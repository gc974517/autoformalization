\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:R> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:2> ; <var:V> := <var:l1> <var:V> := <var:V> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:R> = <var:U> $ ahead of running this set of commands it follows that we have $ <var:V> = <nat:2> \cdot <var:U> + <nat:9> $ after code has terminated . \end{theorem} \begin{proof} The proof of the code can be shown through typical Hoare logic . Stepping through , the environment update command \verb | <var:l1> := <var:R> ; | . This command forwards the precondition $ \{ <var:R> = <var:U> \} $ into the postcondition $ \{ <var:R> = <var:U> \land <var:l1> = <var:U> \} $ . This is rigorously given through the assignment rule found in Hoare logic . Jumping to the following bit of code found in our code , we have the assignment line yielding $ <nat:9> $ as $ <var:l0>$ . This command redefines the condition $ \{ <var:R> = <var:U> \land <var:l1> = <var:U> \} $ as the postcondition $ \{ <var:R> = <var:U> \land <var:l1> = <var:U> \land <var:l0> = <nat:9> \} $ . Advancing to the next step , we have the environment update statement defining $ <var:l1> * <nat:2> $ toward $ <var:l1>$ . This takes the precondition $ \{ <var:R> = <var:U> \land <var:l1> = <var:U> \land <var:l0> = <nat:9> \} $ to the postcondition $ \{ <var:R> = <var:U> \land <var:l1> = <nat:2> \cdot <var:U> \land <var:l0> = <nat:9> \} $ . This is rigorously given by the assignment inference rule given by typical Hoare logic . Moving on to the next bit of code contained in the set of commands , the environment update statement \verb | <var:V> := <var:l1> | . This line takes the precondition $ \{ <var:R> = <var:U> \land <var:l1> = <nat:2> \cdot <var:U> \land <var:l0> = <nat:9> \} $ into the postcondition $ \{ <var:R> = <var:U> \land <var:l0> = <nat:9> \land <var:V> = <nat:2> \cdot <var:U> \} $ . This is rigorously given using the assignment law of Hoare techniques . Further , we have the binding line \verb | <var:V> := <var:V> + <var:l0> | . This statement takes the precondition $ \{ <var:R> = <var:U> \land <var:l0> = <nat:9> \land <var:V> = <nat:2> \cdot <var:U> \} $ toward $ \{ <var:R> = <var:U> \land <var:V> = <nat:2> \cdot <var:U> + <nat:9> \} $ . This is shown through the assignment rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:R> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:2> ; <var:V> := <var:l1> <var:V> := <var:V> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:R> = <var:U> }} <def:poly> {{ <var:V> = <nat:2> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:l1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:l1> = <var:U> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:l1> = <nat:2> * <var:U> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:l0> = <nat:9> /\ <var:V> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:V> = <nat:2> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 