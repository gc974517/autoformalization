\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:z1> := <var:V> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:8> ; <var:F> := <var:z1> <var:F> := <var:F> + <var:z0> \end{verbatim} Allowing that we have $ <var:V> = <var:n> $ ahead of evaluating this list of commands it must be that we see $ <var:F> = <nat:8> \times <var:n> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:V> = <var:n> \} \\ <var:z1> := <var:V> ; \\ \{ <var:V> = <var:n> \land <var:z1> = <var:n> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:V> = <var:n> \land <var:z1> = <var:n> \land <var:z0> = <nat:1> \} \\ <var:z1> := <var:z1> * <nat:8> ; \\ \{ <var:V> = <var:n> \land <var:z1> = <nat:8> \cdot <var:n> \land <var:z0> = <nat:1> \} \\ <var:F> := <var:z1> \\ \{ <var:V> = <var:n> \land <var:z0> = <nat:1> \land <var:F> = <nat:8> \cdot <var:n> \} \\ <var:F> := <var:F> + <var:z0> \\ \{ <var:V> = <var:n> \land <var:F> = <nat:8> \cdot <var:n> + <nat:1> \} \end{eqnarray} Hence , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <var:z1> := <var:V> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:8> ; <var:F> := <var:z1> <var:F> := <var:F> + <var:z0> {{ <var:F> = <nat:8> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:z1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:z1> = <var:n> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:z1> = <nat:8> * <var:n> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:z0> = <nat:1> /\ <var:F> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:F> = <nat:8> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 