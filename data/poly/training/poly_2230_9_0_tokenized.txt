\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:1> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:f> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:f> ; <var:I2> := <var:I2> * <var:f> ; <var:r> := <var:I2> ; <var:r> := <var:r> + <var:I1> ; <var:r> := <var:r> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assuming with some positive coefficients $ <var:o> $ that we have $ <var:f> = <var:o> $ prior to the execution of our series of commands , it holds that we see $ <var:r> = <nat:9> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} Notice the below decorated code segment . \begin{eqnarray} \{ <var:f> = <var:o> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \} \\ <var:I1> := <nat:8> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:I1> = <nat:8> \} \\ <var:I1> := <var:I1> * <var:f> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:I1> = <nat:8> \times <var:o> \} \\ <var:I2> := <nat:9> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:I1> = <nat:8> \times <var:o> \land <var:I2> = <nat:9> \} \\ <var:I2> := <var:I2> * <var:f> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:I1> = <nat:8> \times <var:o> \land <var:I2> = <nat:9> \times <var:o> \} \\ <var:I2> := <var:I2> * <var:f> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:I1> = <nat:8> \times <var:o> \land <var:I2> = <nat:9> \times <var:o> ^ <nat:2> \} \\ <var:r> := <var:I2> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:I1> = <nat:8> \times <var:o> \land <var:r> = <nat:9> \times <var:o> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:I1> ; \\ \{ <var:f> = <var:o> \land <var:I0> = <nat:1> \land <var:r> = <nat:9> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> \} \\ <var:r> := <var:r> + <var:I0> \\ \{ <var:f> = <var:o> \land <var:r> = <nat:9> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:1> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:f> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:f> ; <var:I2> := <var:I2> * <var:f> ; <var:r> := <var:I2> ; <var:r> := <var:r> + <var:I1> ; <var:r> := <var:r> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:f> = <var:o> }} <def:poly> {{ <var:r> = <nat:9> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:8> * <var:o> /\ <var:I2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:8> * <var:o> /\ <var:I2> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:8> * <var:o> /\ <var:I2> = <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:8> * <var:o> /\ <var:r> = <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:I0> = <nat:1> /\ <var:r> = <nat:9> * <var:o> ^ <nat:2> + <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:r> = <nat:9> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 