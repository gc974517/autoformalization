\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:I> ; <var:H0> := <nat:9> ; <var:H1> := <var:H1> * <nat:2> ; <var:O> := <var:H1> <var:O> := <var:O> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:I> = <var:y> $ prior to the execution of the segment of code , it holds that $ <var:O> = <nat:2> \times <var:y> + <nat:9> $ once list of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:y> \} \\ <var:H1> := <var:I> ; \\ \{ <var:I> = <var:y> \land <var:H1> = <var:y> \} \\ <var:H0> := <nat:9> ; \\ \{ <var:I> = <var:y> \land <var:H1> = <var:y> \land <var:H0> = <nat:9> \} \\ <var:H1> := <var:H1> * <nat:2> ; \\ \{ <var:I> = <var:y> \land <var:H1> = <nat:2> \times <var:y> \land <var:H0> = <nat:9> \} \\ <var:O> := <var:H1> \\ \{ <var:I> = <var:y> \land <var:H0> = <nat:9> \land <var:O> = <nat:2> \times <var:y> \} \\ <var:O> := <var:O> + <var:H0> \\ \{ <var:I> = <var:y> \land <var:O> = <nat:2> \times <var:y> + <nat:9> \} \end{eqnarray} Using Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:I> ; <var:H0> := <nat:9> ; <var:H1> := <var:H1> * <nat:2> ; <var:O> := <var:H1> <var:O> := <var:O> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:I> = <var:y> }} <def:poly> {{ <var:O> = <nat:2> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:H1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:H1> = <var:y> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:H1> = <nat:2> * <var:y> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:H0> = <nat:9> /\ <var:O> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:O> = <nat:2> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 