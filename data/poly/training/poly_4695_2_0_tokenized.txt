\begin{document} \begin{theorem} Consider a list of instructions as follows \begin{verbatim} <var:I0> := <nat:2> ; <var:R> := <var:I0> \end{verbatim} Allow --- assuming some positive integer coefficients $ <var:X> $ --- it to hold that $ <var:a> = <var:X> $ prior to running the code segment it must be that we have $ <var:R> = <nat:2> $ after series of instructions executes . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:a> = <var:X> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:a> = <var:X> \land <var:I0> = <nat:2> \} \\ <var:R> := <var:I0> \\ \{ <var:a> = <var:X> \land <var:R> = <nat:2> \} \end{eqnarray} As a result , the series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:a> = <var:X> }} <var:I0> := <nat:2> ; <var:R> := <var:I0> {{ <var:R> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:R> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 