\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:M> ; <var:B> := <var:x1> ; <var:B> := <var:B> + <var:x0> \end{verbatim} Assuming it to be that $ <var:M> = <var:U> $ prior to interpreting our list of commands , it holds that we see $ <var:B> = <nat:4> * <var:U> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be shown with Hoare techniques . Jumping to the next pieces of code seen in our code , we see \begin{verbatim} { <var:M> = <var:U> } <var:x0> := <nat:1> { <var:M> = <var:U> \land <var:x0> = <nat:1> } { <var:M> = <var:U> \land <var:x0> = <nat:1> } <var:x1> := <nat:4> { <var:M> = <var:U> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> } { <var:M> = <var:U> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> } <var:x1> := <var:x1> * <var:M> { <var:M> = <var:U> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> \cdot <var:U> } { <var:M> = <var:U> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> \cdot <var:U> } <var:B> := <var:x1> { <var:M> = <var:U> \land <var:x0> = <nat:1> \land <var:B> = <nat:4> \cdot <var:U> } \end{verbatim} Moving forward , we have \begin{verbatim} { <var:M> = <var:U> } <var:x0> := <nat:1> { <var:M> = <var:U> \land <var:x0> = <nat:1> } \end{verbatim} This is shown with the variable update rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:M> = <var:U> }} <var:x0> := <nat:1> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:M> ; <var:B> := <var:x1> ; <var:B> := <var:B> + <var:x0> {{ <var:B> = <nat:4> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:x0> = <nat:1> /\ <var:B> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:B> = <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 