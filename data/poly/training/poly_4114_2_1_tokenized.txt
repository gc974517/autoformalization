\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:m0> := <nat:2> ; <var:X> := <var:m0> \end{verbatim} Allowing $ <var:g> = <var:c> $ --- with some $ <var:c> $ --- ahead of evaluating the code it follows that we have $ <var:X> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions is shown through standard Hoare reasoning . Advancing to the next step , we have the environment update command binding $ <nat:2> $ into $ <var:m0>$ . This forwards the precondition $ \{ <var:g> = <var:c> \} $ as the condition $ \{ <var:g> = <var:c> \land <var:m0> = <nat:2> \} $ . Advancing to the next step , the binding code \verb | <var:X> := <var:m0> | . This command transfers the condition $ \{ <var:g> = <var:c> \land <var:m0> = <nat:2> \} $ into $ \{ <var:g> = <var:c> \land <var:X> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:g> = <var:c> }} <var:m0> := <nat:2> ; <var:X> := <var:m0> {{ <var:X> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:X> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 