\begin{document} \begin{theorem} Consider a list of commands such that \begin{verbatim} <var:g0> := <nat:1> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:p> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:p> ; <var:g2> := <var:g2> * <var:p> ; <var:A> := <var:g2> ; <var:A> := <var:A> + <var:g1> ; <var:A> := <var:A> + <var:g0> \end{verbatim} Allowing it to hold that $ <var:p> = <var:D> $ ahead of interpreting the set of commands , it follows that we have $ <var:A> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> $ when code segment terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:D> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \} \\ <var:g1> := <nat:3> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \} \\ <var:g1> := <var:g1> * <var:p> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:D> \} \\ <var:g2> := <nat:3> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:D> \land <var:g2> = <nat:3> \} \\ <var:g2> := <var:g2> * <var:p> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:D> \land <var:g2> = <nat:3> \cdot <var:D> \} \\ <var:g2> := <var:g2> * <var:p> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:D> \land <var:g2> = <nat:3> \cdot <var:D> ^ <nat:2> \} \\ <var:A> := <var:g2> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:D> \land <var:A> = <nat:3> \cdot <var:D> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:g1> ; \\ \{ <var:p> = <var:D> \land <var:g0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> \} \\ <var:A> := <var:A> + <var:g0> \\ \{ <var:p> = <var:D> \land <var:A> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:1> \} \end{eqnarray} Applying typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:p> = <var:D> }} <var:g0> := <nat:1> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:p> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:p> ; <var:g2> := <var:g2> * <var:p> ; <var:A> := <var:g2> ; <var:A> := <var:A> + <var:g1> ; <var:A> := <var:A> + <var:g0> {{ <var:A> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:D> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:D> /\ <var:g2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:D> /\ <var:g2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:D> /\ <var:A> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:g0> = <nat:1> /\ <var:A> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:A> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 