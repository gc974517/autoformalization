\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:9> ; <var:h1> := <nat:8> ; <var:h1> := <var:h1> * <var:H> ; <var:B> := <var:h1> ; <var:B> := <var:B> + <var:h0> \end{verbatim} Assuming it to hold that $ <var:H> = <var:L> $ with some positive coefficients $ <var:L> $ before the evaluation of the segment of code it must be that we have $ <var:B> = <nat:8> * <var:L> + <nat:9> $ after set of commands has executed . \end{theorem} \begin{proof} The argument for the set of commands is demonstrated using Hoare reasoning . Looking at the upcoming lines of codein our segment of code , we see \begin{eqnarray} \{ <var:H> = <var:L> \} \, <var:h0> := <nat:9> \, \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \} \\ \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \} \, <var:h1> := <nat:8> \, \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \land <var:h1> = <nat:8> \} \\ \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \land <var:h1> = <nat:8> \} \, <var:h1> := <var:h1> * <var:H> \, \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \land <var:h1> = <nat:8> \cdot <var:L> \} \\ \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \land <var:h1> = <nat:8> \cdot <var:L> \} \, <var:B> := <var:h1> \, \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \land <var:B> = <nat:8> \cdot <var:L> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:H> = <var:L> \} \, <var:h0> := <nat:9> \, \{ <var:H> = <var:L> \land <var:h0> = <nat:9> \} \end{eqnarray} This is guaranteed using the assignment law defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:H> = <var:L> }} <var:h0> := <nat:9> ; <var:h1> := <nat:8> ; <var:h1> := <var:h1> * <var:H> ; <var:B> := <var:h1> ; <var:B> := <var:B> + <var:h0> {{ <var:B> = <nat:8> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:h0> = <nat:9> /\ <var:h1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:h0> = <nat:9> /\ <var:h1> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:h0> = <nat:9> /\ <var:B> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:B> = <nat:8> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 