\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:8> ; <var:H> := <var:P0> \end{verbatim} Allowing $ <var:N> = <var:x> $ , letting positive integers $ <var:x> $ , ahead of interpreting our code segment it holds that we have $ <var:H> = <nat:8> $ once set of instructions is done . \end{theorem} \begin{proof} The method of proof for the list of instructions is demonstrated with usual Hoare logic . Following , we see the variable binding statement defining $ <nat:8> $ to $ <var:P0>$ . This line moves the condition $ \{ <var:N> = <var:x> \} $ into the postcondition $ \{ <var:N> = <var:x> \land <var:P0> = <nat:8> \} $ . This is ensured by the assignment inference rule in typical Hoare logic . Jumping to the next piece of code in the series of commands , we have the variable update command \verb | <var:H> := <var:P0> | . This line advances the condition $ \{ <var:N> = <var:x> \land <var:P0> = <nat:8> \} $ as the condition $ \{ <var:N> = <var:x> \land <var:H> = <nat:8> \} $ . This is shown by the assignment scheme from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:N> = <var:x> }} <var:P0> := <nat:8> ; <var:H> := <var:P0> {{ <var:H> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:H> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 