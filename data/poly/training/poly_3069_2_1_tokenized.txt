\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:5> ; <var:S> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assume $ <var:D> = <var:c> $ , for all positive integer coefficients $ <var:c> $ , before the execution of the segment of code , it holds that we see $ <var:S> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be seen using Hoare techniques . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:c> \} & <var:U0> := <nat:5> & \{ <var:D> = <var:c> \land <var:U0> = <nat:5> \} \\ \{ <var:D> = <var:c> \land <var:U0> = <nat:5> \} & <var:S> := <var:U0& \{ <var:D> = <var:c> \land <var:S> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:S> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:D> = <var:c> }} <def:poly> {{ <var:S> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:S> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 