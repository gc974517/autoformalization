\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:g0> := <nat:2> ; <var:o> := <var:g0> \end{verbatim} Allow it to hold that $ <var:z> = <var:P> $ --- assuming some positive integer coefficients $ <var:P> $ --- prior to running the series of commands , it follows that $ <var:o> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions can be given through usual Hoare reasoning . Advancing on , we have the environment update code \verb | <var:g0> := <nat:2> ; | . This forwards $ \{ <var:z> = <var:P> \} $ into $ \{ <var:z> = <var:P> \land <var:g0> = <nat:2> \} $ . Moving forward , we have the statement \verb | <var:o> := <var:g0> | . This forwards $ \{ <var:z> = <var:P> \land <var:g0> = <nat:2> \} $ toward the postcondition $ \{ <var:z> = <var:P> \land <var:o> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:z> = <var:P> }} <var:g0> := <nat:2> ; <var:o> := <var:g0> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 