\begin{document} \begin{theorem} We define a set of commands such that \begin{verbatim} <var:g1> := <var:j> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:6> ; <var:a> := <var:g1> <var:a> := <var:a> + <var:g0> \end{verbatim} Allow $ <var:j> = <var:i> $ , given every positive integer coefficients $ <var:i> $ , before running the code segment it must be that we have $ <var:a> = <nat:6> * <var:i> + <nat:5> $ after code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:i> \} \\ <var:g1> := <var:j> ; \\ \{ <var:j> = <var:i> \land <var:g1> = <var:i> \} \\ <var:g0> := <nat:5> ; \\ \{ <var:j> = <var:i> \land <var:g1> = <var:i> \land <var:g0> = <nat:5> \} \\ <var:g1> := <var:g1> * <nat:6> ; \\ \{ <var:j> = <var:i> \land <var:g1> = <nat:6> \times <var:i> \land <var:g0> = <nat:5> \} \\ <var:a> := <var:g1> \\ \{ <var:j> = <var:i> \land <var:g0> = <nat:5> \land <var:a> = <nat:6> \times <var:i> \} \\ <var:a> := <var:a> + <var:g0> \\ \{ <var:j> = <var:i> \land <var:a> = <nat:6> \times <var:i> + <nat:5> \} \end{eqnarray} The application of Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:j> = <var:i> }} <var:g1> := <var:j> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:6> ; <var:a> := <var:g1> <var:a> := <var:a> + <var:g0> {{ <var:a> = <nat:6> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:g1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:g1> = <var:i> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:g1> = <nat:6> * <var:i> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:g0> = <nat:5> /\ <var:a> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:a> = <nat:6> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 