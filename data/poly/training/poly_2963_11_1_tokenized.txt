\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O1> := <var:w> ; <var:O2> := <var:O1> * <var:w> ; <var:O3> := <var:O2> * <var:w> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:2> ; <var:O3> := <var:O3> * <nat:3> ; <var:G> := <var:O3> <var:G> := <var:G> + <var:O2> <var:G> := <var:G> + <var:O1> <var:G> := <var:G> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assuming it to hold that $ <var:w> = <var:e> $ , given all $ <var:e> \in \mathbb{N} $ , prior to the evaluation of our code it follows that we have $ <var:G> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> $ when series of instructions terminates . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:w> = <var:e> \} \\ <var:O1> := <var:w> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <var:e> \} \\ <var:O2> := <var:O1> * <var:w> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <var:e> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:w> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O1> := <var:O1> * <nat:3> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <nat:3> \cdot <var:e> \land <var:O2> = <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O2> := <var:O2> * <nat:2> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <nat:3> \cdot <var:e> \land <var:O2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O3> := <var:O3> * <nat:3> ; \\ \{ <var:w> = <var:e> \land <var:O1> = <nat:3> \cdot <var:e> \land <var:O2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:e> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:G> := <var:O3> \\ \{ <var:w> = <var:e> \land <var:O1> = <nat:3> \cdot <var:e> \land <var:O2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:O0> = <nat:1> \land <var:G> = <nat:3> \cdot <var:e> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:O2> \\ \{ <var:w> = <var:e> \land <var:O1> = <nat:3> \cdot <var:e> \land <var:O0> = <nat:1> \land <var:G> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:O1> \\ \{ <var:w> = <var:e> \land <var:O0> = <nat:1> \land <var:G> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> \} \\ <var:G> := <var:G> + <var:O0> \\ \{ <var:w> = <var:e> \land <var:G> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:1> \} \end{eqnarray} Hence , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:w> ; <var:O2> := <var:O1> * <var:w> ; <var:O3> := <var:O2> * <var:w> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:2> ; <var:O3> := <var:O3> * <nat:3> ; <var:G> := <var:O3> <var:G> := <var:G> + <var:O2> <var:G> := <var:G> + <var:O1> <var:G> := <var:G> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:w> = <var:e> }} <def:poly> {{ <var:G> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <nat:3> * <var:e> /\ <var:O2> = <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <nat:3> * <var:e> /\ <var:O2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <nat:3> * <var:e> /\ <var:O2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:e> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <nat:3> * <var:e> /\ <var:O2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:O0> = <nat:1> /\ <var:G> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O1> = <nat:3> * <var:e> /\ <var:O0> = <nat:1> /\ <var:G> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:O0> = <nat:1> /\ <var:G> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:G> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 