\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <var:H> * <var:e> ; <var:H> := <nat:1> + <var:H> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:e> = <var:U> $ ahead of the execution of our list of commands , then we see $ <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:1> $ after series of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be shown through usual Hoare logic . Now , we have the assignment command letting $ <nat:1> $ as $ <var:H>$ . This code redefines the condition $ \{ <var:e> = <var:U> \} $ into the condition $ \{ <var:e> = <var:U> \land <var:H> = <nat:1> \} $ . This is shown to be logically sound by the assignment rule of usual Hoare reasoning . Paying attention to the next statement contained in our code , we have the environment update line defining $ <var:H> * <var:e> $ as $ <var:H>$ . This redefines $ \{ <var:e> = <var:U> \land <var:H> = <nat:1> \} $ toward the postcondition $ \{ <var:e> = <var:U> \land <var:H> = <nat:1> \cdot <var:U> + \} $ . This is rigorously given with the assignment law defined in standard Hoare reasoning . Stepping forward , the environment update command \verb | <var:H> := <nat:1> + <var:H> * <var:e> | . This statement takes the condition $ \{ <var:e> = <var:U> \land <var:H> = <nat:1> \cdot <var:U> + \} $ as the postcondition $ \{ <var:e> = <var:U> \land <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:1> ; <var:H> := <var:H> * <var:e> ; <var:H> := <nat:1> + <var:H> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:e> = <var:U> }} <def:poly> {{ <var:H> = <nat:1> * <var:U> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:H> = <nat:1> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:H> = <nat:1> * <var:U> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 