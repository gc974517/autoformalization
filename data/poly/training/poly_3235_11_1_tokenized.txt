\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:s> ; <var:V2> := <var:V1> * <var:s> ; <var:V3> := <var:V2> * <var:s> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:2> ; <var:V2> := <var:V2> * <nat:8> ; <var:V3> := <var:V3> * <nat:1> ; <var:r> := <var:V3> <var:r> := <var:r> + <var:V2> <var:r> := <var:r> + <var:V1> <var:r> := <var:r> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allowing --- given all integers $ <var:y> $ --- it to be that $ <var:s> = <var:y> $ ahead of the execution of this segment of code , it holds that we have $ <var:r> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:8> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:3> $ once code segment has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:y> \} \\ <var:V1> := <var:s> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <var:y> \} \\ <var:V2> := <var:V1> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <var:y> \land <var:V2> = <var:y> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <var:y> \land <var:V2> = <var:y> ^ <nat:2> \land <var:V3> = <var:y> ^ <nat:3> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <var:y> \land <var:V2> = <var:y> ^ <nat:2> \land <var:V3> = <var:y> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:V1> := <var:V1> * <nat:2> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <nat:2> \times <var:y> \land <var:V2> = <var:y> ^ <nat:2> \land <var:V3> = <var:y> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:V2> := <var:V2> * <nat:8> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <nat:2> \times <var:y> \land <var:V2> = <nat:8> \times <var:y> ^ <nat:2> \land <var:V3> = <var:y> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:V3> := <var:V3> * <nat:1> ; \\ \{ <var:s> = <var:y> \land <var:V1> = <nat:2> \times <var:y> \land <var:V2> = <nat:8> \times <var:y> ^ <nat:2> \land <var:V3> = <nat:1> \times <var:y> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:r> := <var:V3> \\ \{ <var:s> = <var:y> \land <var:V1> = <nat:2> \times <var:y> \land <var:V2> = <nat:8> \times <var:y> ^ <nat:2> \land <var:V0> = <nat:3> \land <var:r> = <nat:1> \times <var:y> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:V2> \\ \{ <var:s> = <var:y> \land <var:V1> = <nat:2> \times <var:y> \land <var:V0> = <nat:3> \land <var:r> = <nat:1> \times <var:y> ^ <nat:3> + <nat:8> \times <var:y> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:V1> \\ \{ <var:s> = <var:y> \land <var:V0> = <nat:3> \land <var:r> = <nat:1> \times <var:y> ^ <nat:3> + <nat:8> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> \} \\ <var:r> := <var:r> + <var:V0> \\ \{ <var:s> = <var:y> \land <var:r> = <nat:1> \times <var:y> ^ <nat:3> + <nat:8> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:s> ; <var:V2> := <var:V1> * <var:s> ; <var:V3> := <var:V2> * <var:s> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:2> ; <var:V2> := <var:V2> * <nat:8> ; <var:V3> := <var:V3> * <nat:1> ; <var:r> := <var:V3> <var:r> := <var:r> + <var:V2> <var:r> := <var:r> + <var:V1> <var:r> := <var:r> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:s> = <var:y> }} <def:poly> {{ <var:r> = <nat:1> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <var:y> /\ <var:V2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <var:y> /\ <var:V2> = <var:y> ^ <nat:2> /\ <var:V3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <var:y> /\ <var:V2> = <var:y> ^ <nat:2> /\ <var:V3> = <var:y> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <nat:2> * <var:y> /\ <var:V2> = <var:y> ^ <nat:2> /\ <var:V3> = <var:y> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <nat:2> * <var:y> /\ <var:V2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:V3> = <var:y> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <nat:2> * <var:y> /\ <var:V2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:y> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <nat:2> * <var:y> /\ <var:V2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:V0> = <nat:3> /\ <var:r> = <nat:1> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V1> = <nat:2> * <var:y> /\ <var:V0> = <nat:3> /\ <var:r> = <nat:1> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:V0> = <nat:3> /\ <var:r> = <nat:1> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:r> = <nat:1> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 