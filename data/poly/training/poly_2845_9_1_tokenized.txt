\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:B> ; <var:L2> := <var:L1> * <var:B> ; <var:L3> := <var:L2> * <var:B> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:9> ; <var:L3> := <var:L3> * <nat:4> ; <var:o> := <var:L3> <var:o> := <var:o> + <var:L1> <var:o> := <var:o> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allow ( for positive integers $ <var:n> $ ) it to be that $ <var:B> = <var:n> $ before running the set of commands it follows that we have $ <var:o> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> + <nat:6> $ once segment of code is done . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:B> = <var:n> \} \\ <var:L1> := <var:B> ; \\ \{ <var:B> = <var:n> \land <var:L1> = <var:n> \} \\ <var:L2> := <var:L1> * <var:B> ; \\ \{ <var:B> = <var:n> \land <var:L1> = <var:n> \land <var:L2> = <var:n> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:B> ; \\ \{ <var:B> = <var:n> \land <var:L1> = <var:n> \land <var:L2> = <var:n> ^ <nat:2> \land <var:L3> = <var:n> ^ <nat:3> \} \\ <var:L0> := <nat:6> ; \\ \{ <var:B> = <var:n> \land <var:L1> = <var:n> \land <var:L2> = <var:n> ^ <nat:2> \land <var:L3> = <var:n> ^ <nat:3> \land <var:L0> = <nat:6> \} \\ <var:L1> := <var:L1> * <nat:9> ; \\ \{ <var:B> = <var:n> \land <var:L1> = <nat:9> * <var:n> \land <var:L2> = <var:n> ^ <nat:2> \land <var:L3> = <var:n> ^ <nat:3> \land <var:L0> = <nat:6> \} \\ <var:L3> := <var:L3> * <nat:4> ; \\ \{ <var:B> = <var:n> \land <var:L1> = <nat:9> * <var:n> \land <var:L2> = <var:n> ^ <nat:2> \land <var:L3> = <nat:4> * <var:n> ^ <nat:3> \land <var:L0> = <nat:6> \} \\ <var:o> := <var:L3> \\ \{ <var:B> = <var:n> \land <var:L1> = <nat:9> * <var:n> \land <var:L2> = <var:n> ^ <nat:2> \land <var:L0> = <nat:6> \land <var:o> = <nat:4> * <var:n> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:L1> \\ \{ <var:B> = <var:n> \land <var:L0> = <nat:6> \land <var:o> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> \} \\ <var:o> := <var:o> + <var:L0> \\ \{ <var:B> = <var:n> \land <var:o> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> + <nat:6> \} \end{eqnarray} Thusly , our code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:B> ; <var:L2> := <var:L1> * <var:B> ; <var:L3> := <var:L2> * <var:B> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:9> ; <var:L3> := <var:L3> * <nat:4> ; <var:o> := <var:L3> <var:o> := <var:o> + <var:L1> <var:o> := <var:o> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:B> = <var:n> }} <def:poly> {{ <var:o> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <var:n> /\ <var:L2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <var:n> /\ <var:L2> = <var:n> ^ <nat:2> /\ <var:L3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <var:n> /\ <var:L2> = <var:n> ^ <nat:2> /\ <var:L3> = <var:n> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <nat:9> * <var:n> /\ <var:L2> = <var:n> ^ <nat:2> /\ <var:L3> = <var:n> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <nat:9> * <var:n> /\ <var:L2> = <var:n> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L1> = <nat:9> * <var:n> /\ <var:L2> = <var:n> ^ <nat:2> /\ <var:L0> = <nat:6> /\ <var:o> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:L0> = <nat:6> /\ <var:o> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:o> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 