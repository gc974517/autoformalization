\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:G> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:G> ; <var:T2> := <var:T2> * <var:G> ; <var:q> := <var:T2> ; <var:q> := <var:q> + <var:T1> ; <var:q> := <var:q> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:G> = <var:w> $ ( taking $ <var:w> \in \mathbb{Z}^+ $ ) before evaluating our set of commands , it holds that $ <var:q> = <nat:6> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:G> = <var:w> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \} \\ <var:T1> := <nat:2> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \} \\ <var:T1> := <var:T1> * <var:G> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:w> \} \\ <var:T2> := <nat:6> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:w> \land <var:T2> = <nat:6> \} \\ <var:T2> := <var:T2> * <var:G> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:w> \land <var:T2> = <nat:6> \cdot <var:w> \} \\ <var:T2> := <var:T2> * <var:G> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:w> \land <var:T2> = <nat:6> \cdot <var:w> ^ <nat:2> \} \\ <var:q> := <var:T2> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:w> \land <var:q> = <nat:6> \cdot <var:w> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:T1> ; \\ \{ <var:G> = <var:w> \land <var:T0> = <nat:2> \land <var:q> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> \} \\ <var:q> := <var:q> + <var:T0> \\ \{ <var:G> = <var:w> \land <var:q> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> \} \end{eqnarray} Therefore , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:2> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:G> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:G> ; <var:T2> := <var:T2> * <var:G> ; <var:q> := <var:T2> ; <var:q> := <var:q> + <var:T1> ; <var:q> := <var:q> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:G> = <var:w> }} <def:poly> {{ <var:q> = <nat:6> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:w> /\ <var:T2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:w> /\ <var:T2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:w> /\ <var:T2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:w> /\ <var:q> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:T0> = <nat:2> /\ <var:q> = <nat:6> * <var:w> ^ <nat:2> + <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:q> = <nat:6> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 