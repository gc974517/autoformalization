\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:7> ; <var:g> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:A> = <var:W> $ --- given positive coefficients $ <var:W> $ --- prior to running the code segment , then we see $ <var:g> = <nat:7> $ when series of commands executes . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be demonstrated using usual Hoare logic . Looking at the following commands in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:A> = <var:W> \} & <var:K0> := <nat:7> & \{ <var:A> = <var:W> \land <var:K0> = <nat:7> \} \\ \{ <var:A> = <var:W> \land <var:K0> = <nat:7> \} & <var:g> := <var:K0& \{ <var:A> = <var:W> \land <var:g> = <nat:7> \} \end{tabular} This is known to be sound using the variable binding law given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:g> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:A> = <var:W> }} <def:poly> {{ <var:g> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:g> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 