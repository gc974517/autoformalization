\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:l> ; <var:M2> := <var:M1> * <var:l> ; <var:M3> := <var:M2> * <var:l> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:6> ; <var:B> := <var:M3> <var:B> := <var:B> + <var:M2> <var:B> := <var:B> + <var:M1> <var:B> := <var:B> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:l> = <var:N> $ prior to running our set of instructions , it must be that we see $ <var:B> = <nat:6> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:6> $ after segment of code has finished . \end{theorem} \begin{proof} The flow of logic for our series of commands can be shown with typical Hoare techniques . Now , we have the variable binding line binding $ <var:l> $ to $ <var:M1>$ . This forwards $ \{ <var:l> = <var:N> \} $ as the postcondition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \} $ . Now , the variable update statement \verb | <var:M2> := <var:M1> * <var:l> ; | . This command transfers $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \} $ toward the condition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M2> = <var:N> ^ <nat:2> \} $ . Observing the upcoming statement in the list of commands , we see the variable binding code defining $ <var:M2> * <var:l> $ to $ <var:M3>$ . This statement forwards the condition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M2> = <var:N> ^ <nat:2> \} $ into the condition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M2> = <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \} $ . Moving on to the next step , we have the statement \verb | <var:M0> := <nat:6> ; | . This forwards the condition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M2> = <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M2> = <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ . This is rigorously given with the assignment scheme in typical Hoare logic . Next , we see the command \verb | <var:M1> := <var:M1> * <nat:1> ; | . This statement advances the precondition $ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M2> = <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ to the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ . This is shown with the assignment rule in Hoare techniques . Taking another step toward the proceeding line in our list of instructions , we have the variable update statement assigning $ <var:M2> * <nat:5> $ to $ <var:M2>$ . This takes the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ into the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <nat:5> \cdot <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ . This is ensured by the assignment inference rule given in usual Hoare techniques . Moving on to the next step , we have the environment update statement giving $ <var:M3> * <nat:6> $ into $ <var:M3>$ . This takes the precondition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <nat:5> \cdot <var:N> ^ <nat:2> \land <var:M3> = <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ toward the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <nat:5> \cdot <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \cdot <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ . Going to the next step , we have the variable update line \verb | <var:B> := <var:M3> | . This command takes the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <nat:5> \cdot <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \cdot <var:N> ^ <nat:3> \land <var:M0> = <nat:6> \} $ to $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <nat:5> \cdot <var:N> ^ <nat:2> \land <var:M0> = <nat:6> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment rule in Hoare logic . Advancing to the upcoming step found in our code segment , we have the variable binding command \verb | <var:B> := <var:B> + <var:M2> | . This redefines the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M2> = <nat:5> \cdot <var:N> ^ <nat:2> \land <var:M0> = <nat:6> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> \} $ toward the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M0> = <nat:6> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> + <nat:5> \cdot <var:N> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme given by typical Hoare reasoning . Moving forward to the upcoming line of code found in our list of instructions , the environment update statement letting $ <var:B> + <var:M1$ toward $ <var:B>$ . This advances the condition $ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> \cdot <var:N> \land <var:M0> = <nat:6> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> + <nat:5> \cdot <var:N> ^ <nat:2> \} $ as the postcondition $ \{ <var:l> = <var:N> \land <var:M0> = <nat:6> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> + <nat:5> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> \} $ . This is sound through the assignment law given in standard Hoare techniques . Shifting focus toward the upcoming bit of code in the list of commands , the variable update code assigning $ <var:B> + <var:M0$ toward $ <var:B>$ . This forwards the precondition $ \{ <var:l> = <var:N> \land <var:M0> = <nat:6> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> + <nat:5> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> \} $ toward the condition $ \{ <var:l> = <var:N> \land <var:B> = <nat:6> \cdot <var:N> ^ <nat:3> + <nat:5> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:l> ; <var:M2> := <var:M1> * <var:l> ; <var:M3> := <var:M2> * <var:l> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:6> ; <var:B> := <var:M3> <var:B> := <var:B> + <var:M2> <var:B> := <var:B> + <var:M1> <var:B> := <var:B> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:l> = <var:N> }} <def:poly> {{ <var:B> = <nat:6> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <var:N> /\ <var:M2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <var:N> /\ <var:M2> = <var:N> ^ <nat:2> /\ <var:M3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <var:N> /\ <var:M2> = <var:N> ^ <nat:2> /\ <var:M3> = <var:N> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <nat:1> * <var:N> /\ <var:M2> = <var:N> ^ <nat:2> /\ <var:M3> = <var:N> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <nat:1> * <var:N> /\ <var:M2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:M3> = <var:N> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <nat:1> * <var:N> /\ <var:M2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:M3> = <nat:6> * <var:N> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <nat:1> * <var:N> /\ <var:M2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:M0> = <nat:6> /\ <var:B> = <nat:6> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <nat:1> * <var:N> /\ <var:M0> = <nat:6> /\ <var:B> = <nat:6> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M0> = <nat:6> /\ <var:B> = <nat:6> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:B> = <nat:6> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 