\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:j> ; <var:Z> := <var:T1> ; <var:Z> := <var:Z> + <var:T0> \end{verbatim} Allow it to hold that $ <var:j> = <var:w> $ given any natural coefficients $ <var:w> $ ahead of the evaluation of the list of commands , then we have $ <var:Z> = <nat:5> \cdot <var:w> + <nat:5> $ . \end{theorem} \begin{proof} The proof of this list of commands is clear with usual Hoare reasoning . Following , we have \verb | { <var:j> = <var:w> } <var:T0> := <nat:5> { <var:j> = <var:w> \land <var:T0> = <nat:5> } | , \verb | { <var:j> = <var:w> \land <var:T0> = <nat:5> } <var:T1> := <nat:5> { <var:j> = <var:w> \land <var:T0> = <nat:5> \land <var:T1> = <nat:5> } | , \verb | { <var:j> = <var:w> \land <var:T0> = <nat:5> \land <var:T1> = <nat:5> } <var:T1> := <var:T1> * <var:j> { <var:j> = <var:w> \land <var:T0> = <nat:5> \land <var:T1> = <nat:5> \times <var:w> } | , \verb | { <var:j> = <var:w> \land <var:T0> = <nat:5> \land <var:T1> = <nat:5> \times <var:w> } <var:Z> := <var:T1> { <var:j> = <var:w> \land <var:T0> = <nat:5> \land <var:Z> = <nat:5> \times <var:w> } | and \verb | { <var:j> = <var:w> \land <var:T0> = <nat:5> \land <var:Z> = <nat:5> \times <var:w> } <var:Z> := <var:Z> + <var:T0{ <var:j> = <var:w> \land <var:Z> = <nat:5> \times <var:w> + <nat:5> } | . This is ensured by the variable binding scheme found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:j> = <var:w> }} <var:T0> := <nat:5> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:j> ; <var:Z> := <var:T1> ; <var:Z> := <var:Z> + <var:T0> {{ <var:Z> = <nat:5> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:T0> = <nat:5> /\ <var:Z> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:Z> = <nat:5> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 