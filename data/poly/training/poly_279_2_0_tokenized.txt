\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:C0> := <nat:6> ; <var:u> := <var:C0> \end{verbatim} Assuming ( given some natural coefficients $ <var:z> $ ) it to hold that $ <var:G> = <var:z> $ before executing this list of commands , it follows that $ <var:u> = <nat:6> $ after set of instructions has executed . \end{theorem} \begin{proof} The course of logic for this series of instructions can be seen by typical Hoare logic . Immediately following , we have \begin{eqnarray} \{ <var:G> = <var:z> \} \, <var:C0> := <nat:6> \, \{ <var:G> = <var:z> \land <var:C0> = <nat:6> \} \end{eqnarray} Advancing on , \begin{eqnarray} \{ <var:G> = <var:z> \} \, <var:C0> := <nat:6> \, \{ <var:G> = <var:z> \land <var:C0> = <nat:6> \} \end{eqnarray} This is shown by the scheme given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:G> = <var:z> }} <var:C0> := <nat:6> ; <var:u> := <var:C0> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 