\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:e1> := <var:g> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:4> ; <var:z> := <var:e1> <var:z> := <var:z> + <var:e0> \end{verbatim} Given that we have $ <var:g> = <var:I> $ prior to running the code it must be that we see $ <var:z> = <nat:4> \cdot <var:I> + <nat:3> $ when list of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be demonstrated using usual Hoare reasoning . Taking a look at the subsequent statement contained in the code , we see the variable binding line \verb | <var:e1> := <var:g> ; | . This command moves the precondition $ \{ <var:g> = <var:I> \} $ into the condition $ \{ <var:g> = <var:I> \land <var:e1> = <var:I> \} $ . This is ensured using the assignment rule in standard Hoare logic . Moving on to the next step , the variable update code yielding $ <nat:3> $ toward $ <var:e0>$ . This code redefines the precondition $ \{ <var:g> = <var:I> \land <var:e1> = <var:I> \} $ into the condition $ \{ <var:g> = <var:I> \land <var:e1> = <var:I> \land <var:e0> = <nat:3> \} $ . Moving forward , we have the environment update command \verb | <var:e1> := <var:e1> * <nat:4> ; | . This takes the precondition $ \{ <var:g> = <var:I> \land <var:e1> = <var:I> \land <var:e0> = <nat:3> \} $ toward the condition $ \{ <var:g> = <var:I> \land <var:e1> = <nat:4> \times <var:I> \land <var:e0> = <nat:3> \} $ . This is deduced by the assignment scheme defined in usual Hoare techniques . Moving on to the next step , the environment update statement defining $ <var:e1$ as $ <var:z>$ . This forwards the precondition $ \{ <var:g> = <var:I> \land <var:e1> = <nat:4> \times <var:I> \land <var:e0> = <nat:3> \} $ as $ \{ <var:g> = <var:I> \land <var:e0> = <nat:3> \land <var:z> = <nat:4> \times <var:I> \} $ . This is sound using the assignment rule obtained from standard Hoare reasoning . Further , the variable update command \verb | <var:z> := <var:z> + <var:e0> | . This transfers the precondition $ \{ <var:g> = <var:I> \land <var:e0> = <nat:3> \land <var:z> = <nat:4> \times <var:I> \} $ into the postcondition $ \{ <var:g> = <var:I> \land <var:z> = <nat:4> \times <var:I> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:g> = <var:I> }} <var:e1> := <var:g> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:4> ; <var:z> := <var:e1> <var:z> := <var:z> + <var:e0> {{ <var:z> = <nat:4> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:e1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:e1> = <var:I> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:e1> = <nat:4> * <var:I> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:e0> = <nat:3> /\ <var:z> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:z> = <nat:4> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 