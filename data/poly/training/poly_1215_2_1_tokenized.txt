\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:9> ; <var:l> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Assume it to be that $ <var:x> = <var:L> $ --- for some natural coefficients $ <var:L> $ --- before interpreting the code segment , then $ <var:l> = <nat:9> $ after segment of code has terminated . \end{theorem} \begin{proof} The flow of logic for our series of commands is given with usual Hoare logic . Moving on to the following line of code contained in our series of instructions , we have the binding line \verb | <var:o0> := <nat:9> ; | . This line forwards the precondition $ \{ <var:x> = <var:L> \} $ as the condition $ \{ <var:x> = <var:L> \land <var:o0> = <nat:9> \} $ . Moving forward , we have the line letting $ <var:o0$ to $ <var:l>$ . This statement transfers $ \{ <var:x> = <var:L> \land <var:o0> = <nat:9> \} $ toward the postcondition $ \{ <var:x> = <var:L> \land <var:l> = <nat:9> \} $ . This is guaranteed through the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:9> ; <var:l> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:x> = <var:L> }} <def:poly> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:L> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:L> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 