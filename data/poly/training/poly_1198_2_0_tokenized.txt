\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:4> ; <var:Q> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assume $ <var:v> = <var:z> $ ahead of running this program it holds that we have $ <var:Q> = <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:z> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:v> = <var:z> \land <var:x0> = <nat:4> \} \\ <var:Q> := <var:x0> \\ \{ <var:v> = <var:z> \land <var:Q> = <nat:4> \} \end{eqnarray} Thus , this code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:Q> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:v> = <var:z> }} <def:poly> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 