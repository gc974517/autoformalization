\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:v0> := <nat:3> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:C> ; <var:T> := <var:v1> ; <var:T> := <var:T> + <var:v0> \end{verbatim} Allowing that $ <var:C> = <var:L> $ ( given natural numbers $ <var:L> $ ) prior to the execution of our list of commands it holds that we have $ <var:T> = <nat:3> * <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning returns : \begin{eqnarray} \{ <var:C> = <var:L> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:C> = <var:L> \land <var:v0> = <nat:3> \} \\ <var:v1> := <nat:3> ; \\ \{ <var:C> = <var:L> \land <var:v0> = <nat:3> \land <var:v1> = <nat:3> \} \\ <var:v1> := <var:v1> * <var:C> ; \\ \{ <var:C> = <var:L> \land <var:v0> = <nat:3> \land <var:v1> = <nat:3> \cdot <var:L> \} \\ <var:T> := <var:v1> ; \\ \{ <var:C> = <var:L> \land <var:v0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:L> \} \\ <var:T> := <var:T> + <var:v0> \\ \{ <var:C> = <var:L> \land <var:T> = <nat:3> \cdot <var:L> + <nat:3> \} \end{eqnarray} Considering the above , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:C> = <var:L> }} <var:v0> := <nat:3> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:C> ; <var:T> := <var:v1> ; <var:T> := <var:T> + <var:v0> {{ <var:T> = <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:v0> = <nat:3> /\ <var:T> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:T> = <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 