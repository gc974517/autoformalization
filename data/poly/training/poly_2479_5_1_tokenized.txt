\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:o1> := <var:r> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:7> ; <var:N> := <var:o1> <var:N> := <var:N> + <var:o0> \end{verbatim} Assuming ( taking natural numbers $ <var:A> $ ) it to be that $ <var:r> = <var:A> $ before executing our segment of code , then we have $ <var:N> = <nat:7> \cdot <var:A> + <nat:8> $ once code exits . \end{theorem} \begin{proof} The flow of logic for this list of commands can be shown with typical Hoare logic . Now , we have the variable update code \verb | <var:o1> := <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:A> \} $ as $ \{ <var:r> = <var:A> \land <var:o1> = <var:A> \} $ . This is shown to be logically sound through the assignment rule of usual Hoare techniques . Moving forward to the next step , we have the binding command assigning $ <nat:8> $ into $ <var:o0>$ . This forwards $ \{ <var:r> = <var:A> \land <var:o1> = <var:A> \} $ as the condition $ \{ <var:r> = <var:A> \land <var:o1> = <var:A> \land <var:o0> = <nat:8> \} $ . Stepping through , we have the environment update statement \verb | <var:o1> := <var:o1> * <nat:7> ; | . This moves $ \{ <var:r> = <var:A> \land <var:o1> = <var:A> \land <var:o0> = <nat:8> \} $ into the postcondition $ \{ <var:r> = <var:A> \land <var:o1> = <nat:7> \times <var:A> \land <var:o0> = <nat:8> \} $ . After , the environment update statement defining $ <var:o1$ as $ <var:N>$ . This advances $ \{ <var:r> = <var:A> \land <var:o1> = <nat:7> \times <var:A> \land <var:o0> = <nat:8> \} $ into the condition $ \{ <var:r> = <var:A> \land <var:o0> = <nat:8> \land <var:N> = <nat:7> \times <var:A> \} $ . This is shown using the assignment scheme from usual Hoare techniques . Going to the next step , the environment update code \verb | <var:N> := <var:N> + <var:o0> | . This statement advances the precondition $ \{ <var:r> = <var:A> \land <var:o0> = <nat:8> \land <var:N> = <nat:7> \times <var:A> \} $ into the condition $ \{ <var:r> = <var:A> \land <var:N> = <nat:7> \times <var:A> + <nat:8> \} $ . This is shown to be logically sound by the assignment inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:r> = <var:A> }} <var:o1> := <var:r> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:7> ; <var:N> := <var:o1> <var:N> := <var:N> + <var:o0> {{ <var:N> = <nat:7> * <var:A> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:A> /\ <var:o1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:A> /\ <var:o1> = <var:A> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:A> /\ <var:o1> = <nat:7> * <var:A> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:A> /\ <var:o0> = <nat:8> /\ <var:N> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:A> /\ <var:N> = <nat:7> * <var:A> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 