\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:3> ; <var:Q> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Assuming given any natural numbers $ <var:r> $ that we have $ <var:Z> = <var:r> $ before interpreting the series of commands , then we have $ <var:Q> = <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:Z> = <var:r> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:Z> = <var:r> \land <var:H0> = <nat:3> \} \\ <var:Q> := <var:H0> \\ \{ <var:Z> = <var:r> \land <var:Q> = <nat:3> \} \end{eqnarray} Given the preceding argument , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:3> ; <var:Q> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <def:poly> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 