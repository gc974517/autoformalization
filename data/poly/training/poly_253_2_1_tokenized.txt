\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:2> ; <var:V> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assume ( for natural coefficients $ <var:U> $ ) it to be that $ <var:X> = <var:U> $ prior to the execution of this code then we see $ <var:V> = <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is shown with Hoare logic . Now , we see the assignment command giving $ <nat:2> $ as $ <var:o0>$ . This command transfers the precondition $ \{ <var:X> = <var:U> \} $ to the condition $ \{ <var:X> = <var:U> \land <var:o0> = <nat:2> \} $ . This is guaranteed through the assignment rule found in Hoare techniques . Moving on to the next step , we see the binding statement giving $ <var:o0$ as $ <var:V>$ . This takes the condition $ \{ <var:X> = <var:U> \land <var:o0> = <nat:2> \} $ into the postcondition $ \{ <var:X> = <var:U> \land <var:V> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:V> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:X> = <var:U> }} <def:poly> {{ <var:V> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:V> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 