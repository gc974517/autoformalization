\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:F> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:F> ; <var:m2> := <var:m2> * <var:F> ; <var:W> := <var:m2> ; <var:W> := <var:W> + <var:m1> ; <var:W> := <var:W> + <var:m0> \end{verbatim} Assume that we have $ <var:F> = <var:w> $ before executing the segment of code , then we have $ <var:W> = <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be accomplished using Hoare reasoning . Taking a look at the subsequent piece of code in our set of instructions , we have the assignment command \verb | <var:m0> := <nat:7> ; | . This advances the condition $ \{ <var:F> = <var:w> \} $ to $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \} $ . Next , the variable binding line \verb | <var:m1> := <nat:2> ; | . This redefines the condition $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \} $ into the postcondition $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \} $ . Moving onward , we see the statement \verb | <var:m1> := <var:m1> * <var:F> ; | . This code forwards $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \} $ into $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \} $ . After , we see the variable update code letting $ <nat:2> $ as $ <var:m2>$ . This transfers the precondition $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \} $ into the condition $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:m2> = <nat:2> \} $ . This is rigorously given through the assignment rule of standard Hoare reasoning . Stepping through , we have the variable binding statement \verb | <var:m2> := <var:m2> * <var:F> ; | . This statement forwards the condition $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:m2> = <nat:2> \} $ as $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:m2> = <nat:2> \cdot <var:w> \} $ . This is shown to be logically sound with the assignment scheme defined in Hoare reasoning . Looking at the proceeding line of code contained in the code segment , we have the variable assignmet code binding $ <var:m2> * <var:F> $ to $ <var:m2>$ . This takes $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:m2> = <nat:2> \cdot <var:w> \} $ as $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:m2> = <nat:2> \cdot <var:w> ^ <nat:2> \} $ . This is known to be sound with the assignment inference rule given by usual Hoare techniques . Jumping to the next bit of code found in our list of commands , we have the variable assignmet command \verb | <var:W> := <var:m2> ; | . This line redefines $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:m2> = <nat:2> \cdot <var:w> ^ <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:W> = <nat:2> \cdot <var:w> ^ <nat:2> \} $ . Looking at the following bit of code contained in our program , we see the binding statement assigning $ <var:W> + <var:m1> $ toward $ <var:W>$ . This advances $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:m1> = <nat:2> \cdot <var:w> \land <var:W> = <nat:2> \cdot <var:w> ^ <nat:2> \} $ as $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:W> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> \} $ . This is given through the assignment law given in standard Hoare logic . Immediately following , we see the variable update code letting $ <var:W> + <var:m0$ into $ <var:W>$ . This statement takes $ \{ <var:F> = <var:w> \land <var:m0> = <nat:7> \land <var:W> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> \} $ as the condition $ \{ <var:F> = <var:w> \land <var:W> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:7> \} $ . This is guaranteed through the assignment law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <var:m0> := <nat:7> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:F> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:F> ; <var:m2> := <var:m2> * <var:F> ; <var:W> := <var:m2> ; <var:W> := <var:W> + <var:m1> ; <var:W> := <var:W> + <var:m0> {{ <var:W> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:2> * <var:w> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:2> * <var:w> /\ <var:m2> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:2> * <var:w> /\ <var:m2> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:2> * <var:w> /\ <var:W> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:7> /\ <var:W> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:W> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 