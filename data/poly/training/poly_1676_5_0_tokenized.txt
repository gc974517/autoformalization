\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:Z> ; <var:O> := <var:m1> ; <var:O> := <var:O> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Given , letting positive integers $ <var:W> $ , $ <var:Z> = <var:W> $ prior to executing our program , then we have $ <var:O> = <nat:8> \cdot <var:W> + <nat:4> $ once program has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be accomplished using standard Hoare logic . Going forward , \begin{eqnarray} \{ <var:Z> = <var:W> \} \, <var:m0> := <nat:4> \, \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \} \\ \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \} \, <var:m1> := <nat:8> \, \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \land <var:m1> = <nat:8> \} \\ \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \land <var:m1> = <nat:8> \} \, <var:m1> := <var:m1> * <var:Z> \, \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \land <var:m1> = <nat:8> * <var:W> \} \\ \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \land <var:m1> = <nat:8> * <var:W> \} \, <var:O> := <var:m1> \, \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \land <var:O> = <nat:8> * <var:W> \} \\ \{ <var:Z> = <var:W> \land <var:m0> = <nat:4> \land <var:O> = <nat:8> * <var:W> \} \, <var:O> := <var:O> + <var:m0\, \{ <var:Z> = <var:W> \land <var:O> = <nat:8> * <var:W> + <nat:4> \} \end{eqnarray} This is sound by the variable assignmet rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:Z> ; <var:O> := <var:m1> ; <var:O> := <var:O> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Z> = <var:W> }} <def:poly> {{ <var:O> = <nat:8> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:m0> = <nat:4> /\ <var:O> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:O> = <nat:8> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 