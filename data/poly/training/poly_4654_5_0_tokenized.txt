\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:k> ; <var:O> := <var:a1> ; <var:O> := <var:O> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:k> = <var:M> $ given some natural numbers $ <var:M> $ ahead of the evaluation of our program it follows that we see $ <var:O> = <nat:7> * <var:M> + <nat:2> $ after code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:M> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:k> = <var:M> \land <var:a0> = <nat:2> \} \\ <var:a1> := <nat:7> ; \\ \{ <var:k> = <var:M> \land <var:a0> = <nat:2> \land <var:a1> = <nat:7> \} \\ <var:a1> := <var:a1> * <var:k> ; \\ \{ <var:k> = <var:M> \land <var:a0> = <nat:2> \land <var:a1> = <nat:7> * <var:M> \} \\ <var:O> := <var:a1> ; \\ \{ <var:k> = <var:M> \land <var:a0> = <nat:2> \land <var:O> = <nat:7> * <var:M> \} \\ <var:O> := <var:O> + <var:a0> \\ \{ <var:k> = <var:M> \land <var:O> = <nat:7> * <var:M> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:2> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:k> ; <var:O> := <var:a1> ; <var:O> := <var:O> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:k> = <var:M> }} <def:poly> {{ <var:O> = <nat:7> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:a0> = <nat:2> /\ <var:O> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:O> = <nat:7> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 