\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:J> := <nat:2> ; <var:J> := <var:J> * <var:d> ; <var:J> := <nat:4> + <var:J> * <var:d> ; <var:J> := <nat:4> + <var:J> * <var:d> ; <var:J> := <nat:3> + <var:J> * <var:d> ; <var:J> := <nat:3> + <var:J> * <var:d> ; <var:J> := <nat:2> + <var:J> * <var:d> ; <var:J> := <nat:2> + <var:J> * <var:d> ; <var:J> := <nat:3> + <var:J> * <var:d> ; <var:J> := <nat:1> + <var:J> * <var:d> ; <var:J> := <nat:1> + <var:J> * <var:d> \end{verbatim} Assuming ( letting $ <var:R> \in \mathbb{Z}^+ $ ) $ <var:d> = <var:R> $ before interpreting our list of commands it holds that $ <var:J> = <nat:2> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this code is demonstrated with typical Hoare logic . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:d> = <var:R> \} & <var:J> := <nat:2> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \} & <var:J> := <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> + \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> + \} & <var:J> := <nat:4> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:2> + <nat:4> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:2> + <nat:4> \} & <var:J> := <nat:4> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> + <nat:4> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> + <nat:4> \} & <var:J> := <nat:3> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:3> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:3> \} & <var:J> := <nat:3> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:3> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:3> \} & <var:J> := <nat:2> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> \} & <var:J> := <nat:2> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:7> + <nat:4> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:2> \} \\ \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:7> + <nat:4> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:2> \} & <var:J> := <nat:3> + <var:J> * <var:d> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \times <var:R> ^ <nat:8> + <nat:4> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:3> \} \end{tabular} This is deduced using the variable update law given by Hoare reasoning . Moving on to the subsequent bit of code contained in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:R> \} & <var:J> := <nat:2> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \} \end{tabular} Now , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:R> \} & <var:J> := <nat:2> & \{ <var:d> = <var:R> \land <var:J> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:d> = <var:R> }} <var:J> := <nat:2> ; <var:J> := <var:J> * <var:d> ; <var:J> := <nat:4> + <var:J> * <var:d> ; <var:J> := <nat:4> + <var:J> * <var:d> ; <var:J> := <nat:3> + <var:J> * <var:d> ; <var:J> := <nat:3> + <var:J> * <var:d> ; <var:J> := <nat:2> + <var:J> * <var:d> ; <var:J> := <nat:2> + <var:J> * <var:d> ; <var:J> := <nat:3> + <var:J> * <var:d> ; <var:J> := <nat:1> + <var:J> * <var:d> ; <var:J> := <nat:1> + <var:J> * <var:d> {{ <var:J> = <nat:2> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:3> + <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:9> + <nat:4> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:J> = <nat:2> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 