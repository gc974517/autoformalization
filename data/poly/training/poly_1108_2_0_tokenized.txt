\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:2> ; <var:a> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Allow $ <var:q> = <var:n> $ for some whole numbers $ <var:n> $ before evaluating our list of commands it holds that $ <var:a> = <nat:2> $ when program executes . \end{theorem} \begin{proof} Proving correctness for the code is given using the below decorated set of instructions . \begin{eqnarray} \{ <var:q> = <var:n> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:q> = <var:n> \land <var:J0> = <nat:2> \} \\ <var:a> := <var:J0> \\ \{ <var:q> = <var:n> \land <var:a> = <nat:2> \} \end{eqnarray} The application of typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:2> ; <var:a> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:q> = <var:n> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 