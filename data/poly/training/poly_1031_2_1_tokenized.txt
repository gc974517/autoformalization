\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:4> ; <var:s> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Allow it to hold that $ <var:n> = <var:a> $ --- for any whole numbers $ <var:a> $ --- before executing our set of commands , it holds that we have $ <var:s> = <nat:4> $ once list of instructions executes . \end{theorem} \begin{proof} The course of logic for this set of commands is evident with standard Hoare reasoning . Moving on , \begin{eqnarray} \{ <var:n> = <var:a> \} \, <var:l0> := <nat:4> \, \{ <var:n> = <var:a> \land <var:l0> = <nat:4> \} \\ \{ <var:n> = <var:a> \land <var:l0> = <nat:4> \} \, <var:s> := <var:l0\, \{ <var:n> = <var:a> \land <var:s> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:4> ; <var:s> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:n> = <var:a> }} <def:poly> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 