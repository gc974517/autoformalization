\begin{document} \begin{theorem} We define a segment of code such that \begin{verbatim} <var:N0> := <nat:9> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:E> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:E> ; <var:N2> := <var:N2> * <var:E> ; <var:U> := <var:N2> ; <var:U> := <var:U> + <var:N1> ; <var:U> := <var:U> + <var:N0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:M> $ --- given positive numbers $ <var:M> $ --- prior to evaluating this program then $ <var:U> = <nat:5> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for our code is clear using Hoare reasoning . Taking a look at the next pieces of code in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:M> \} & <var:N0> := <nat:9> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} \\ \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} & <var:N1> := <nat:7> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \end{tabular} This is shown by the law from typical Hoare techniques . Taking a look at the following lines of codecontained in our program , we have \[ \begin{tabular} {rcl} \{ <var:E> = <var:M> \} & <var:N0> := <nat:9> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} \\ \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} & <var:N1> := <nat:7> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \\ \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} & <var:N1> := <var:N1> * <var:E> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:M> \} \end{tabular} Following , \[ \begin{tabular} {rcl} \{ <var:E> = <var:M> \} & <var:N0> := <nat:9> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} \\ \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} & <var:N1> := <nat:7> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \\ \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} & <var:N1> := <var:N1> * <var:E> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:M> \} \end{tabular} This is guaranteed using the binding law obtained from typical Hoare logic . Taking another step toward the proceeding piece of code in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:E> = <var:M> \} & <var:N0> := <nat:9> & \{ <var:E> = <var:M> \land <var:N0> = <nat:9> \} \end{tabular} This is ensured with the variable binding law of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:E> = <var:M> }} <var:N0> := <nat:9> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:E> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:E> ; <var:N2> := <var:N2> * <var:E> ; <var:U> := <var:N2> ; <var:U> := <var:U> + <var:N1> ; <var:U> := <var:U> + <var:N0> {{ <var:U> = <nat:5> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:M> /\ <var:N2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:M> /\ <var:N2> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:M> /\ <var:N2> = <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:M> /\ <var:U> = <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:N0> = <nat:9> /\ <var:U> = <nat:5> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:U> = <nat:5> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 