\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:4> ; <var:O> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assume $ <var:w> = <var:H> $ prior to evaluating this program , it follows that we have $ <var:O> = <nat:4> $ once list of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is evident with typical Hoare reasoning . After , we have \verb | { <var:w> = <var:H> } <var:Q0> := <nat:4> { <var:w> = <var:H> \land <var:Q0> = <nat:4> } | . This is shown using the inference rule defined in standard Hoare logic . Advancing to the subsequent statement in the series of commands , \verb | { <var:w> = <var:H> } <var:Q0> := <nat:4> { <var:w> = <var:H> \land <var:Q0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:O> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:w> = <var:H> }} <def:poly> {{ <var:O> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:O> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 