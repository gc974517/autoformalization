\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:K0> := <nat:3> ; <var:G> := <var:K0> \end{verbatim} Assume that we have $ <var:i> = <var:W> $ before evaluating this code segment it must be that $ <var:G> = <nat:3> $ when series of commands has finished executing . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:i> = <var:W> \land <var:K0> = <nat:3> \} \\ <var:G> := <var:K0> \\ \{ <var:i> = <var:W> \land <var:G> = <nat:3> \} \end{eqnarray} Therefore , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <var:K0> := <nat:3> ; <var:G> := <var:K0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 