\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:1> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:M> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:M> ; <var:m2> := <var:m2> * <var:M> ; <var:R> := <var:m2> ; <var:R> := <var:R> + <var:m1> ; <var:R> := <var:R> + <var:m0> \end{verbatim} Given ( for some $ <var:a> \in \mathbb{Z}^+ $ ) $ <var:M> = <var:a> $ prior to the evaluation of this segment of code , it follows that $ <var:R> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our segment of code can be accomplished through usual Hoare logic . Immediately following , the code binding $ <nat:1> $ into $ <var:m0>$ . This takes the condition $ \{ <var:M> = <var:a> \} $ as the postcondition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \} $ . This is guaranteed with the assignment scheme obtained from standard Hoare logic . Honing in on the proceeding line of code contained in the series of instructions , we see the assignment line \verb | <var:m1> := <nat:4> ; | . This statement advances the condition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \} $ as the postcondition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \} $ . Moving forward to the next step , we have the variable update command \verb | <var:m1> := <var:m1> * <var:M> ; | . This forwards the precondition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \} $ toward the condition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \} $ . This is guaranteed by the assignment rule in standard Hoare techniques . Going forward , we have the variable update code \verb | <var:m2> := <nat:2> ; | . This statement moves $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \} $ toward the condition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:m2> = <nat:2> \} $ . This is shown to be logically sound by the assignment rule defined in usual Hoare techniques . Advancing , we see the variable binding statement \verb | <var:m2> := <var:m2> * <var:M> ; | . This transfers the condition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:m2> = <nat:2> \} $ into $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:m2> = <nat:2> \times <var:a> \} $ . Jumping to the next statement in our list of commands , we have the binding line binding $ <var:m2> * <var:M> $ toward $ <var:m2>$ . This statement redefines $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:m2> = <nat:2> \times <var:a> \} $ to the postcondition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:m2> = <nat:2> \times <var:a> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law defined in standard Hoare reasoning . Stepping forward , we have the variable binding line giving $ <var:m2> $ toward $ <var:R>$ . This code redefines $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:m2> = <nat:2> \times <var:a> ^ <nat:2> \} $ toward $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:R> = <nat:2> \times <var:a> ^ <nat:2> \} $ . This is given by the assignment inference rule of Hoare techniques . Taking a look at the upcoming command contained in the program , we have the variable assignmet command giving $ <var:R> + <var:m1> $ into $ <var:R>$ . This takes the precondition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \times <var:a> \land <var:R> = <nat:2> \times <var:a> ^ <nat:2> \} $ to the condition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:R> = <nat:2> \times <var:a> ^ <nat:2> + <nat:4> \times <var:a> \} $ . Immediately following , we have the statement yielding $ <var:R> + <var:m0$ into $ <var:R>$ . This forwards the precondition $ \{ <var:M> = <var:a> \land <var:m0> = <nat:1> \land <var:R> = <nat:2> \times <var:a> ^ <nat:2> + <nat:4> \times <var:a> \} $ as $ \{ <var:M> = <var:a> \land <var:R> = <nat:2> \times <var:a> ^ <nat:2> + <nat:4> \times <var:a> + <nat:1> \} $ . This is guaranteed through the assignment law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:M> = <var:a> }} <var:m0> := <nat:1> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:M> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:M> ; <var:m2> := <var:m2> * <var:M> ; <var:R> := <var:m2> ; <var:R> := <var:R> + <var:m1> ; <var:R> := <var:R> + <var:m0> {{ <var:R> = <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:a> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:a> /\ <var:m2> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:a> /\ <var:m2> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:a> /\ <var:R> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:m0> = <nat:1> /\ <var:R> = <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:R> = <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 