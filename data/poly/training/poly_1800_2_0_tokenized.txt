\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:6> ; <var:p> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:j> = <var:d> $ --- taking whole numbers $ <var:d> $ --- prior to interpreting our series of instructions it follows that $ <var:p> = <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare logic gives us : \begin{eqnarray} \{ <var:j> = <var:d> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:j> = <var:d> \land <var:M0> = <nat:6> \} \\ <var:p> := <var:M0> \\ \{ <var:j> = <var:d> \land <var:p> = <nat:6> \} \end{eqnarray} As a consequence , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:p> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:j> = <var:d> }} <def:poly> {{ <var:p> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:d> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:d> /\ <var:p> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 