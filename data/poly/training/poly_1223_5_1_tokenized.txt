\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:N> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:3> ; <var:U> := <var:w1> <var:U> := <var:U> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Assume it to be that $ <var:N> = <var:I> $ --- letting $ <var:I> \in \mathbb{N} $ --- before interpreting this segment of code , it holds that we have $ <var:U> = <nat:3> * <var:I> + <nat:1> $ after series of commands has terminated . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:N> = <var:I> \} \\ <var:w1> := <var:N> ; \\ \{ <var:N> = <var:I> \land <var:w1> = <var:I> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:N> = <var:I> \land <var:w1> = <var:I> \land <var:w0> = <nat:1> \} \\ <var:w1> := <var:w1> * <nat:3> ; \\ \{ <var:N> = <var:I> \land <var:w1> = <nat:3> \cdot <var:I> \land <var:w0> = <nat:1> \} \\ <var:U> := <var:w1> \\ \{ <var:N> = <var:I> \land <var:w0> = <nat:1> \land <var:U> = <nat:3> \cdot <var:I> \} \\ <var:U> := <var:U> + <var:w0> \\ \{ <var:N> = <var:I> \land <var:U> = <nat:3> \cdot <var:I> + <nat:1> \} \end{eqnarray} Given the preceding argument , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:N> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:3> ; <var:U> := <var:w1> <var:U> := <var:U> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:N> = <var:I> }} <def:poly> {{ <var:U> = <nat:3> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:w1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:w1> = <var:I> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:w1> = <nat:3> * <var:I> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:w0> = <nat:1> /\ <var:U> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:U> = <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 