\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:z> ; <var:o2> := <var:o1> * <var:z> ; <var:o3> := <var:o2> * <var:z> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:6> ; <var:o3> := <var:o3> * <nat:2> ; <var:S> := <var:o3> <var:S> := <var:S> + <var:o1> <var:S> := <var:S> + <var:o0> \end{verbatim} Given $ <var:z> = <var:E> $ ahead of running our series of commands then we have $ <var:S> = <nat:2> * <var:E> ^ <nat:3> + <nat:6> * <var:E> + <nat:6> $ once code segment terminates . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be done with Hoare logic . Paying attention to the following bits of codefound in the series of instructions , \begin{verbatim} { <var:z> = <var:E> } <var:o1> := <var:z> { <var:z> = <var:E> \land <var:o1> = <var:E> } { <var:z> = <var:E> \land <var:o1> = <var:E> } <var:o2> := <var:o1> * <var:z> { <var:z> = <var:E> \land <var:o1> = <var:E> \land <var:o2> = <var:E> ^ <nat:2> } { <var:z> = <var:E> \land <var:o1> = <var:E> \land <var:o2> = <var:E> ^ <nat:2> } <var:o3> := <var:o2> * <var:z> { <var:z> = <var:E> \land <var:o1> = <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <var:E> ^ <nat:3> } { <var:z> = <var:E> \land <var:o1> = <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <var:E> ^ <nat:3> } <var:o0> := <nat:6> { <var:z> = <var:E> \land <var:o1> = <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <var:E> ^ <nat:3> \land <var:o0> = <nat:6> } { <var:z> = <var:E> \land <var:o1> = <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <var:E> ^ <nat:3> \land <var:o0> = <nat:6> } <var:o1> := <var:o1> * <nat:6> { <var:z> = <var:E> \land <var:o1> = <nat:6> \cdot <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <var:E> ^ <nat:3> \land <var:o0> = <nat:6> } { <var:z> = <var:E> \land <var:o1> = <nat:6> \cdot <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <var:E> ^ <nat:3> \land <var:o0> = <nat:6> } <var:o3> := <var:o3> * <nat:2> { <var:z> = <var:E> \land <var:o1> = <nat:6> \cdot <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:E> ^ <nat:3> \land <var:o0> = <nat:6> } { <var:z> = <var:E> \land <var:o1> = <nat:6> \cdot <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:E> ^ <nat:3> \land <var:o0> = <nat:6> } <var:S> := <var:o3{ <var:z> = <var:E> \land <var:o1> = <nat:6> \cdot <var:E> \land <var:o2> = <var:E> ^ <nat:2> \land <var:o0> = <nat:6> \land <var:S> = <nat:2> \cdot <var:E> ^ <nat:3> } \end{verbatim} This is ensured with the assignment inference rule found in standard Hoare reasoning . Moving forward to the next step , \begin{verbatim} { <var:z> = <var:E> } <var:o1> := <var:z> { <var:z> = <var:E> \land <var:o1> = <var:E> } \end{verbatim} Taking another step toward the subsequent bit of code contained in our series of instructions , we have \begin{verbatim} { <var:z> = <var:E> } <var:o1> := <var:z> { <var:z> = <var:E> \land <var:o1> = <var:E> } \end{verbatim} This is guaranteed using the variable assignmet law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:z> = <var:E> }} <var:o1> := <var:z> ; <var:o2> := <var:o1> * <var:z> ; <var:o3> := <var:o2> * <var:z> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:6> ; <var:o3> := <var:o3> * <nat:2> ; <var:S> := <var:o3> <var:S> := <var:S> + <var:o1> <var:S> := <var:S> + <var:o0> {{ <var:S> = <nat:2> * <var:E> ^ <nat:3> + <nat:6> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <var:E> /\ <var:o2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <var:E> /\ <var:o2> = <var:E> ^ <nat:2> /\ <var:o3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <var:E> /\ <var:o2> = <var:E> ^ <nat:2> /\ <var:o3> = <var:E> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <nat:6> * <var:E> /\ <var:o2> = <var:E> ^ <nat:2> /\ <var:o3> = <var:E> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <nat:6> * <var:E> /\ <var:o2> = <var:E> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o1> = <nat:6> * <var:E> /\ <var:o2> = <var:E> ^ <nat:2> /\ <var:o0> = <nat:6> /\ <var:S> = <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:o0> = <nat:6> /\ <var:S> = <nat:2> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:E> /\ <var:S> = <nat:2> * <var:E> ^ <nat:3> + <nat:6> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 