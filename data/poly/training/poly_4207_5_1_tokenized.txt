\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:p> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:9> ; <var:S> := <var:G1> <var:S> := <var:S> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Allowing ( letting whole numbers $ <var:V> $ ) it to be that $ <var:p> = <var:V> $ before executing the segment of code , it must be that we see $ <var:S> = <nat:9> * <var:V> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:p> = <var:V> \} \\ <var:G1> := <var:p> ; \\ \{ <var:p> = <var:V> \land <var:G1> = <var:V> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:p> = <var:V> \land <var:G1> = <var:V> \land <var:G0> = <nat:8> \} \\ <var:G1> := <var:G1> * <nat:9> ; \\ \{ <var:p> = <var:V> \land <var:G1> = <nat:9> \cdot <var:V> \land <var:G0> = <nat:8> \} \\ <var:S> := <var:G1> \\ \{ <var:p> = <var:V> \land <var:G0> = <nat:8> \land <var:S> = <nat:9> \cdot <var:V> \} \\ <var:S> := <var:S> + <var:G0> \\ \{ <var:p> = <var:V> \land <var:S> = <nat:9> \cdot <var:V> + <nat:8> \} \end{eqnarray} Considering the above , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:p> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:9> ; <var:S> := <var:G1> <var:S> := <var:S> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:p> = <var:V> }} <def:poly> {{ <var:S> = <nat:9> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:G1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:G1> = <var:V> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:G1> = <nat:9> * <var:V> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:G0> = <nat:8> /\ <var:S> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:S> = <nat:9> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 