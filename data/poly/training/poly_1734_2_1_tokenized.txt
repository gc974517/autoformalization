\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:1> ; <var:x> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allowing that $ <var:t> = <var:V> $ ahead of interpreting this list of instructions , then we have $ <var:x> = <nat:1> $ when segment of code terminates . \end{theorem} \begin{proof} The course of logic for this code can be seen using standard Hoare reasoning . Moving onward , we have \begin{eqnarray} \{ <var:t> = <var:V> \} \, <var:j0> := <nat:1> \, \{ <var:t> = <var:V> \land <var:j0> = <nat:1> \} \end{eqnarray} Paying attention to the following step in the list of commands , we see \begin{eqnarray} \{ <var:t> = <var:V> \} \, <var:j0> := <nat:1> \, \{ <var:t> = <var:V> \land <var:j0> = <nat:1> \} \end{eqnarray} This is shown to be logically sound with the variable binding law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:1> ; <var:x> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:t> = <var:V> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 