\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:9> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:s> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:s> ; <var:n2> := <var:n2> * <var:s> ; <var:U> := <var:n2> ; <var:U> := <var:U> + <var:n1> ; <var:U> := <var:U> + <var:n0> \end{verbatim} Allow ( for integers $ <var:m> $ ) that $ <var:s> = <var:m> $ prior to evaluating our series of commands it follows that we have $ <var:U> = <nat:4> \times <var:m> ^ <nat:2> + <nat:8> \times <var:m> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is evident with usual Hoare logic . Honing in on the next bit of code in our segment of code , we have the variable update line \verb | <var:n0> := <nat:9> ; | . This advances the condition $ \{ <var:s> = <var:m> \} $ to the postcondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \} $ . This is shown with the assignment scheme found in typical Hoare techniques . Observing the proceeding step seen in our list of instructions , we have the binding line defining $ <nat:8> $ to $ <var:n1>$ . This command moves the precondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \} $ toward $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \} $ . This is rigorously given using the assignment scheme defined in typical Hoare techniques . Advancing , the variable update statement defining $ <var:n1> * <var:s> $ into $ <var:n1>$ . This transfers $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \} $ into the condition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \} $ . Going forward , the line \verb | <var:n2> := <nat:4> ; | . This line forwards the condition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \} $ to the postcondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:n2> = <nat:4> \} $ . This is shown using the assignment law in Hoare logic . Advancing to the next statement found in the code , we see the binding command letting $ <var:n2> * <var:s> $ as $ <var:n2>$ . This redefines the precondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:n2> = <nat:4> \} $ as the postcondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:n2> = <nat:4> \times <var:m> \} $ . Moving on , the assignment code binding $ <var:n2> * <var:s> $ to $ <var:n2>$ . This code forwards the precondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:n2> = <nat:4> \times <var:m> \} $ toward the postcondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:n2> = <nat:4> \times <var:m> ^ <nat:2> \} $ . Taking a look at the upcoming bit of code in the series of instructions , the variable binding statement \verb | <var:U> := <var:n2> ; | . This line takes $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:n2> = <nat:4> \times <var:m> ^ <nat:2> \} $ as the postcondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:U> = <nat:4> \times <var:m> ^ <nat:2> \} $ . Taking a look at the subsequent step contained in the set of instructions , the environment update statement \verb | <var:U> := <var:U> + <var:n1> ; | . This transfers the condition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:n1> = <nat:8> \times <var:m> \land <var:U> = <nat:4> \times <var:m> ^ <nat:2> \} $ toward the postcondition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:U> = <nat:4> \times <var:m> ^ <nat:2> + <nat:8> \times <var:m> \} $ . This is guaranteed through the assignment rule defined in usual Hoare reasoning . Moving on , we have the environment update statement defining $ <var:U> + <var:n0$ into $ <var:U>$ . This command takes the condition $ \{ <var:s> = <var:m> \land <var:n0> = <nat:9> \land <var:U> = <nat:4> \times <var:m> ^ <nat:2> + <nat:8> \times <var:m> \} $ into $ \{ <var:s> = <var:m> \land <var:U> = <nat:4> \times <var:m> ^ <nat:2> + <nat:8> \times <var:m> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:s> = <var:m> }} <var:n0> := <nat:9> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:s> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:s> ; <var:n2> := <var:n2> * <var:s> ; <var:U> := <var:n2> ; <var:U> := <var:U> + <var:n1> ; <var:U> := <var:U> + <var:n0> {{ <var:U> = <nat:4> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:8> * <var:m> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:8> * <var:m> /\ <var:n2> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:8> * <var:m> /\ <var:n2> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:8> * <var:m> /\ <var:U> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:n0> = <nat:9> /\ <var:U> = <nat:4> * <var:m> ^ <nat:2> + <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:U> = <nat:4> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 