\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:s0> := <nat:8> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:K> ; <var:D> := <var:s1> ; <var:D> := <var:D> + <var:s0> \end{verbatim} Assume it to hold that $ <var:K> = <var:M> $ --- for all positive numbers $ <var:M> $ --- ahead of executing our series of instructions , it holds that $ <var:D> = <nat:3> \cdot <var:M> + <nat:8> $ once series of commands has finished . \end{theorem} \begin{proof} The flow of logic for the code segment is demonstrated with usual Hoare techniques . Moving forward to the next step , \begin{eqnarray} \{ <var:K> = <var:M> \} \, <var:s0> := <nat:8> \, \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \} \\ \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \} \, <var:s1> := <nat:3> \, \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \land <var:s1> = <nat:3> \} \\ \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \land <var:s1> = <nat:3> \} \, <var:s1> := <var:s1> * <var:K> \, \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \land <var:s1> = <nat:3> \cdot <var:M> \} \end{eqnarray} This is ensured through the environment update inference rule of usual Hoare techniques . Keeping momentum , \begin{eqnarray} \{ <var:K> = <var:M> \} \, <var:s0> := <nat:8> \, \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \} \\ \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \} \, <var:s1> := <nat:3> \, \{ <var:K> = <var:M> \land <var:s0> = <nat:8> \land <var:s1> = <nat:3> \} \end{eqnarray} This is guaranteed with the variable update inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:K> = <var:M> }} <var:s0> := <nat:8> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:K> ; <var:D> := <var:s1> ; <var:D> := <var:D> + <var:s0> {{ <var:D> = <nat:3> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:s0> = <nat:8> /\ <var:D> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:D> = <nat:3> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 