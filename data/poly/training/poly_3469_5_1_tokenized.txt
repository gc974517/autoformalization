\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:v> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:R> := <var:Q1> <var:R> := <var:R> + <var:Q0> \end{verbatim} Allow it to be that $ <var:v> = <var:t> $ before interpreting our set of commands , it holds that we see $ <var:R> = <nat:7> * <var:t> + <nat:2> $ once set of commands is done . \end{theorem} \begin{proof} The argument for this code is shown using typical Hoare techniques . Shifting focus toward the next piece of code in the list of instructions , the variable assignmet command \verb | <var:Q1> := <var:v> ; | . This forwards the precondition $ \{ <var:v> = <var:t> \} $ as the postcondition $ \{ <var:v> = <var:t> \land <var:Q1> = <var:t> \} $ . This is shown to be logically sound with the assignment law defined in standard Hoare logic . Immediately following , we see the code assigning $ <nat:2> $ into $ <var:Q0>$ . This statement moves the condition $ \{ <var:v> = <var:t> \land <var:Q1> = <var:t> \} $ to the postcondition $ \{ <var:v> = <var:t> \land <var:Q1> = <var:t> \land <var:Q0> = <nat:2> \} $ . This is sound by the assignment rule found in standard Hoare logic . Going forward , the variable binding line defining $ <var:Q1> * <nat:7> $ as $ <var:Q1>$ . This redefines the condition $ \{ <var:v> = <var:t> \land <var:Q1> = <var:t> \land <var:Q0> = <nat:2> \} $ into the postcondition $ \{ <var:v> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q0> = <nat:2> \} $ . Looking at the following bit of code in our code segment , the environment update line binding $ <var:Q1$ toward $ <var:R>$ . This line redefines the precondition $ \{ <var:v> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q0> = <nat:2> \} $ to the condition $ \{ <var:v> = <var:t> \land <var:Q0> = <nat:2> \land <var:R> = <nat:7> \times <var:t> \} $ . This is rigorously given using the assignment law obtained from Hoare reasoning . Advancing on , the assignment code \verb | <var:R> := <var:R> + <var:Q0> | . This transfers the condition $ \{ <var:v> = <var:t> \land <var:Q0> = <nat:2> \land <var:R> = <nat:7> \times <var:t> \} $ to the condition $ \{ <var:v> = <var:t> \land <var:R> = <nat:7> \times <var:t> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <var:Q1> := <var:v> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:R> := <var:Q1> <var:R> := <var:R> + <var:Q0> {{ <var:R> = <nat:7> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:Q1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:Q1> = <var:t> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:Q0> = <nat:2> /\ <var:R> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:R> = <nat:7> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 