\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:i> := <nat:4> ; <var:i> := <nat:3> + <var:i> * <var:q> ; <var:i> := <nat:1> + <var:i> * <var:q> ; <var:i> := <nat:1> + <var:i> * <var:q> ; <var:i> := <var:i> * <var:q> ; <var:i> := <var:i> * <var:q> ; <var:i> := <nat:3> + <var:i> * <var:q> \end{verbatim} Allowing that $ <var:q> = <var:H> $ ahead of evaluating the set of commands it holds that $ <var:i> = <nat:4> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:1> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:3> + <nat:3> $ after set of commands is done . \end{theorem} \begin{proof} Utilizing standard Hoare logic produces : \begin{eqnarray} \{ <var:q> = <var:H> \} \\ <var:i> := <nat:4> ; \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \} \\ <var:i> := <nat:3> + <var:i> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \cdot <var:H> + <nat:3> \} \\ <var:i> := <nat:1> + <var:i> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:1> \} \\ <var:i> := <var:i> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + \} \\ <var:i> := <var:i> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> ^ <nat:2> + \} \\ <var:i> := <nat:3> + <var:i> * <var:q> \\ \{ <var:q> = <var:H> \land <var:i> = <nat:4> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:1> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:3> + <nat:3> \} \end{eqnarray} Thus , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:q> = <var:H> }} <var:i> := <nat:4> ; <var:i> := <nat:3> + <var:i> * <var:q> ; <var:i> := <nat:1> + <var:i> * <var:q> ; <var:i> := <nat:1> + <var:i> * <var:q> ; <var:i> := <var:i> * <var:q> ; <var:i> := <var:i> * <var:q> ; <var:i> := <nat:3> + <var:i> * <var:q> {{ <var:i> = <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:i> = <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 