\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:K> ; <var:z> := <var:c1> ; <var:z> := <var:z> + <var:c0> \end{verbatim} Allow that $ <var:K> = <var:W> $ for some positive integers $ <var:W> $ before evaluating the program , it must be that we see $ <var:z> = <nat:1> \cdot <var:W> + <nat:2> $ once code terminates . \end{theorem} \begin{proof} The application of usual Hoare techniques gives us : \begin{eqnarray} \{ <var:K> = <var:W> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:K> = <var:W> \land <var:c0> = <nat:2> \} \\ <var:c1> := <nat:1> ; \\ \{ <var:K> = <var:W> \land <var:c0> = <nat:2> \land <var:c1> = <nat:1> \} \\ <var:c1> := <var:c1> * <var:K> ; \\ \{ <var:K> = <var:W> \land <var:c0> = <nat:2> \land <var:c1> = <nat:1> \cdot <var:W> \} \\ <var:z> := <var:c1> ; \\ \{ <var:K> = <var:W> \land <var:c0> = <nat:2> \land <var:z> = <nat:1> \cdot <var:W> \} \\ <var:z> := <var:z> + <var:c0> \\ \{ <var:K> = <var:W> \land <var:z> = <nat:1> \cdot <var:W> + <nat:2> \} \end{eqnarray} Hence , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:K> = <var:W> }} <var:c0> := <nat:2> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:K> ; <var:z> := <var:c1> ; <var:z> := <var:z> + <var:c0> {{ <var:z> = <nat:1> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:c0> = <nat:2> /\ <var:z> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:z> = <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 