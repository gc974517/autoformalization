\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:m> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:1> ; <var:q> := <var:r1> <var:q> := <var:q> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:m> = <var:U> $ before the execution of this program it holds that we have $ <var:q> = <nat:1> * <var:U> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:U> \} \\ <var:r1> := <var:m> ; \\ \{ <var:m> = <var:U> \land <var:r1> = <var:U> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:m> = <var:U> \land <var:r1> = <var:U> \land <var:r0> = <nat:6> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:m> = <var:U> \land <var:r1> = <nat:1> * <var:U> \land <var:r0> = <nat:6> \} \\ <var:q> := <var:r1> \\ \{ <var:m> = <var:U> \land <var:r0> = <nat:6> \land <var:q> = <nat:1> * <var:U> \} \\ <var:q> := <var:q> + <var:r0> \\ \{ <var:m> = <var:U> \land <var:q> = <nat:1> * <var:U> + <nat:6> \} \end{eqnarray} Using standard Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:m> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:1> ; <var:q> := <var:r1> <var:q> := <var:q> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:m> = <var:U> }} <def:poly> {{ <var:q> = <nat:1> * <var:U> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:r1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:r1> = <var:U> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:r1> = <nat:1> * <var:U> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:r0> = <nat:6> /\ <var:q> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:q> = <nat:1> * <var:U> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 