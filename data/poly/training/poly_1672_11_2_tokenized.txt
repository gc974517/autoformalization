\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:3> + <var:v> * <var:J> ; <var:v> := <nat:3> + <var:v> * <var:J> ; <var:v> := <nat:1> + <var:v> * <var:J> ; <var:v> := <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:2> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allowing it to be that $ <var:J> = <var:s> $ for all $ <var:s> \in \mathbb{N} $ prior to evaluating our series of commands it holds that we have $ <var:v> = <nat:1> \times <var:s> ^ <nat:10> + <nat:3> \times <var:s> ^ <nat:9> + <nat:3> \times <var:s> ^ <nat:8> + <nat:1> \times <var:s> ^ <nat:7> + <nat:4> \times <var:s> ^ <nat:5> + <nat:4> \times <var:s> ^ <nat:4> + <nat:4> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:4> $ when program has finished executing . \end{theorem} \begin{proof} The proof of our program is evident using standard Hoare techniques . Moving forward to the next statements found in our program , we see \begin{verbatim} { <var:J> = <var:s> } <var:v> := <nat:1> { <var:J> = <var:s> \land <var:v> = <nat:1> } { <var:J> = <var:s> \land <var:v> = <nat:1> } <var:v> := <nat:3> + <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> + <nat:3> } { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> + <nat:3> } <var:v> := <nat:3> + <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> } { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> } <var:v> := <nat:1> + <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> } { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> } <var:v> := <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + } \end{verbatim} Jumping to the upcoming steps found in the set of commands , we see \begin{verbatim} { <var:J> = <var:s> } <var:v> := <nat:1> { <var:J> = <var:s> \land <var:v> = <nat:1> } { <var:J> = <var:s> \land <var:v> = <nat:1> } <var:v> := <nat:3> + <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> + <nat:3> } { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> + <nat:3> } <var:v> := <nat:3> + <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> } { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> } <var:v> := <nat:1> + <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> } { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> } <var:v> := <var:v> * <var:J> { <var:J> = <var:s> \land <var:v> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + } \end{verbatim} This is sound using the law defined by Hoare logic . Next , \begin{verbatim} { <var:J> = <var:s> } <var:v> := <nat:1> { <var:J> = <var:s> \land <var:v> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:3> + <var:v> * <var:J> ; <var:v> := <nat:3> + <var:v> * <var:J> ; <var:v> := <nat:1> + <var:v> * <var:J> ; <var:v> := <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:2> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> ; <var:v> := <nat:4> + <var:v> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <def:poly> {{ <var:v> = <nat:1> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 