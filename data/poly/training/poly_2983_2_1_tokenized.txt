\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:5> ; <var:O> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:G> = <var:q> $ ( for $ <var:q> \in \mathbb{N} $ ) before the execution of the set of instructions , then $ <var:O> = <nat:5> $ when code segment is done executing . \end{theorem} \begin{proof} See that the following decorated series of instructions . \begin{eqnarray} \{ <var:G> = <var:q> \} \\ <var:w0> := <nat:5> ; \\ \{ <var:G> = <var:q> \land <var:w0> = <nat:5> \} \\ <var:O> := <var:w0> \\ \{ <var:G> = <var:q> \land <var:O> = <nat:5> \} \end{eqnarray} The application of usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:5> ; <var:O> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:G> = <var:q> }} <def:poly> {{ <var:O> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:O> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 