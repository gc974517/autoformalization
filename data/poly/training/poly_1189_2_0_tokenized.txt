\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:l0> := <nat:2> ; <var:j> := <var:l0> \end{verbatim} Assuming that $ <var:g> = <var:H> $ --- given every natural coefficients $ <var:H> $ --- before the execution of this code segment then we see $ <var:j> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be accomplished by Hoare logic . Immediately after , \begin{eqnarray} \{ <var:g> = <var:H> \} \, <var:l0> := <nat:2> \, \{ <var:g> = <var:H> \land <var:l0> = <nat:2> \} \end{eqnarray} This is ensured by the environment update inference rule of usual Hoare reasoning . Going to the next step , we have \begin{eqnarray} \{ <var:g> = <var:H> \} \, <var:l0> := <nat:2> \, \{ <var:g> = <var:H> \land <var:l0> = <nat:2> \} \end{eqnarray} This is shown to be logically sound through the variable update rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:g> = <var:H> }} <var:l0> := <nat:2> ; <var:j> := <var:l0> {{ <var:j> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:j> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 