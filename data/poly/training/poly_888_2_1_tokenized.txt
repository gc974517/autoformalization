\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:7> ; <var:D> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Allowing --- for $ <var:Y> \in \mathbb{Z}^+ $ --- that we have $ <var:g> = <var:Y> $ prior to the evaluation of the list of commands then we see $ <var:D> = <nat:7> $ when segment of code executes . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands is clear using standard Hoare logic . Now , we have the binding code \verb | <var:j0> := <nat:7> ; | . This code advances the precondition $ \{ <var:g> = <var:Y> \} $ toward the condition $ \{ <var:g> = <var:Y> \land <var:j0> = <nat:7> \} $ . Now , we have the assignment line \verb | <var:D> := <var:j0> | . This advances $ \{ <var:g> = <var:Y> \land <var:j0> = <nat:7> \} $ as the condition $ \{ <var:g> = <var:Y> \land <var:D> = <nat:7> \} $ . This is given using the assignment scheme given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:7> ; <var:D> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:g> = <var:Y> }} <def:poly> {{ <var:D> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:D> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 