\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:p1> := <var:a> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:5> ; <var:P> := <var:p1> <var:P> := <var:P> + <var:p0> \end{verbatim} Assuming $ <var:a> = <var:l> $ --- for any positive numbers $ <var:l> $ --- before the evaluation of our list of commands , it follows that we see $ <var:P> = <nat:5> \cdot <var:l> + <nat:2> $ once segment of code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be seen with typical Hoare logic . Shifting focus toward the next step contained in the list of instructions , we see \begin{eqnarray} \{ <var:a> = <var:l> \} \, <var:p1> := <var:a> \, \{ <var:a> = <var:l> \land <var:p1> = <var:l> \} \end{eqnarray} Looking at the upcoming statement seen in the list of commands , we have \begin{eqnarray} \{ <var:a> = <var:l> \} \, <var:p1> := <var:a> \, \{ <var:a> = <var:l> \land <var:p1> = <var:l> \} \end{eqnarray} Jumping to the proceeding steps seen in the set of instructions , we see \begin{eqnarray} \{ <var:a> = <var:l> \} \, <var:p1> := <var:a> \, \{ <var:a> = <var:l> \land <var:p1> = <var:l> \} \\ \{ <var:a> = <var:l> \land <var:p1> = <var:l> \} \, <var:p0> := <nat:2> \, \{ <var:a> = <var:l> \land <var:p1> = <var:l> \land <var:p0> = <nat:2> \} \end{eqnarray} Paying attention to the following piece of code in the segment of code , we have \begin{eqnarray} \{ <var:a> = <var:l> \} \, <var:p1> := <var:a> \, \{ <var:a> = <var:l> \land <var:p1> = <var:l> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:a> = <var:l> }} <var:p1> := <var:a> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:5> ; <var:P> := <var:p1> <var:P> := <var:P> + <var:p0> {{ <var:P> = <nat:5> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:p1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:p1> = <var:l> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:p1> = <nat:5> * <var:l> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:p0> = <nat:2> /\ <var:P> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:P> = <nat:5> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 