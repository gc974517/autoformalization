\begin{document} \begin{theorem} Define a list of commands : \begin{verbatim} <var:w1> := <var:T> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:9> ; <var:N> := <var:w1> <var:N> := <var:N> + <var:w0> \end{verbatim} Given it to hold that $ <var:T> = <var:z> $ before executing this code segment it holds that we see $ <var:N> = <nat:9> * <var:z> + <nat:4> $ when set of instructions exits . \end{theorem} \begin{proof} Using usual Hoare reasoning produces : \begin{eqnarray} \{ <var:T> = <var:z> \} \\ <var:w1> := <var:T> ; \\ \{ <var:T> = <var:z> \land <var:w1> = <var:z> \} \\ <var:w0> := <nat:4> ; \\ \{ <var:T> = <var:z> \land <var:w1> = <var:z> \land <var:w0> = <nat:4> \} \\ <var:w1> := <var:w1> * <nat:9> ; \\ \{ <var:T> = <var:z> \land <var:w1> = <nat:9> * <var:z> \land <var:w0> = <nat:4> \} \\ <var:N> := <var:w1> \\ \{ <var:T> = <var:z> \land <var:w0> = <nat:4> \land <var:N> = <nat:9> * <var:z> \} \\ <var:N> := <var:N> + <var:w0> \\ \{ <var:T> = <var:z> \land <var:N> = <nat:9> * <var:z> + <nat:4> \} \end{eqnarray} Given the preceding argument , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:T> = <var:z> }} <var:w1> := <var:T> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:9> ; <var:N> := <var:w1> <var:N> := <var:N> + <var:w0> {{ <var:N> = <nat:9> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:w1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:w1> = <var:z> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:w1> = <nat:9> * <var:z> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:w0> = <nat:4> /\ <var:N> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:N> = <nat:9> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 