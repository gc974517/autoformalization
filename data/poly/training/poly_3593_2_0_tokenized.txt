\begin{document} \begin{theorem} Consider the following code in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:3> ; <var:O> := <var:D0> \end{verbatim} Allow that we have $ <var:V> = <var:c> $ before evaluating our code , it follows that we see $ <var:O> = <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:V> = <var:c> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:V> = <var:c> \land <var:D0> = <nat:3> \} \\ <var:O> := <var:D0> \\ \{ <var:V> = <var:c> \land <var:O> = <nat:3> \} \end{eqnarray} As a result , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:V> = <var:c> }} <var:D0> := <nat:3> ; <var:O> := <var:D0> {{ <var:O> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:O> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 