\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:9> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:z> ; <var:L> := <var:y1> ; <var:L> := <var:L> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:z> = <var:m> $ ( assuming some natural coefficients $ <var:m> $ ) before running the series of instructions , it follows that $ <var:L> = <nat:1> \times <var:m> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:m> \} \\ <var:y0> := <nat:9> ; \\ \{ <var:z> = <var:m> \land <var:y0> = <nat:9> \} \\ <var:y1> := <nat:1> ; \\ \{ <var:z> = <var:m> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \} \\ <var:y1> := <var:y1> * <var:z> ; \\ \{ <var:z> = <var:m> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \times <var:m> \} \\ <var:L> := <var:y1> ; \\ \{ <var:z> = <var:m> \land <var:y0> = <nat:9> \land <var:L> = <nat:1> \times <var:m> \} \\ <var:L> := <var:L> + <var:y0> \\ \{ <var:z> = <var:m> \land <var:L> = <nat:1> \times <var:m> + <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:9> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:z> ; <var:L> := <var:y1> ; <var:L> := <var:L> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:z> = <var:m> }} <def:poly> {{ <var:L> = <nat:1> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:y0> = <nat:9> /\ <var:L> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L> = <nat:1> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 