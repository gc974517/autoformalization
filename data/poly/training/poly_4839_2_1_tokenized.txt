\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:8> ; <var:C> := <var:H0> \end{verbatim} Allow it to be that $ <var:b> = <var:p> $ ( for any positive integer coefficients $ <var:p> $ ) prior to executing our series of instructions it holds that we have $ <var:C> = <nat:8> $ after list of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is demonstrated using usual Hoare reasoning . Looking at the proceeding piece of code seen in our set of commands , we have the variable assignmet statement \verb | <var:H0> := <nat:8> ; | . This statement advances $ \{ <var:b> = <var:p> \} $ as $ \{ <var:b> = <var:p> \land <var:H0> = <nat:8> \} $ . Moving on to the next command seen in the set of commands , we see the assignment statement \verb | <var:C> := <var:H0> | . This statement advances $ \{ <var:b> = <var:p> \land <var:H0> = <nat:8> \} $ as $ \{ <var:b> = <var:p> \land <var:C> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:b> = <var:p> }} <var:H0> := <nat:8> ; <var:C> := <var:H0> {{ <var:C> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:C> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 