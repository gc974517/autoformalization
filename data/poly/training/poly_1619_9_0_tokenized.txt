\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:2> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:v> ; <var:w2> := <nat:1> ; <var:w2> := <var:w2> * <var:v> ; <var:w2> := <var:w2> * <var:v> ; <var:Y> := <var:w2> ; <var:Y> := <var:Y> + <var:w1> ; <var:Y> := <var:Y> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing given some positive numbers $ <var:N> $ that $ <var:v> = <var:N> $ before evaluating this set of instructions , it holds that we see $ <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> $ when series of commands has finished . \end{theorem} \begin{proof} The proof of this list of instructions is evident using typical Hoare logic . Going to the next step , we have \begin{eqnarray} \{ <var:v> = <var:N> \} \, <var:w0> := <nat:2> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \} \\ \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \} \, <var:w1> := <nat:8> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> \} \\ \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> \} \, <var:w1> := <var:w1> * <var:v> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> * <var:N> \} \end{eqnarray} Advancing , we have \begin{eqnarray} \{ <var:v> = <var:N> \} \, <var:w0> := <nat:2> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \} \\ \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \} \, <var:w1> := <nat:8> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> \} \\ \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> \} \, <var:w1> := <var:w1> * <var:v> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> * <var:N> \} \\ \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> * <var:N> \} \, <var:w2> := <nat:1> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> * <var:N> \land <var:w2> = <nat:1> \} \\ \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> * <var:N> \land <var:w2> = <nat:1> \} \, <var:w2> := <var:w2> * <var:v> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \land <var:w1> = <nat:8> * <var:N> \land <var:w2> = <nat:1> * <var:N> \} \end{eqnarray} Moving forward , we see \begin{eqnarray} \{ <var:v> = <var:N> \} \, <var:w0> := <nat:2> \, \{ <var:v> = <var:N> \land <var:w0> = <nat:2> \} \end{eqnarray} This is known to be sound using the variable assignmet law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:v> ; <var:w2> := <nat:1> ; <var:w2> := <var:w2> * <var:v> ; <var:w2> := <var:w2> * <var:v> ; <var:Y> := <var:w2> ; <var:Y> := <var:Y> + <var:w1> ; <var:Y> := <var:Y> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:v> = <var:N> }} <def:poly> {{ <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:8> * <var:N> /\ <var:w2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:8> * <var:N> /\ <var:w2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:8> * <var:N> /\ <var:w2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:8> * <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:w0> = <nat:2> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 