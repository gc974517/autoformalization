\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:K> ; <var:i2> := <var:i1> * <var:K> ; <var:i3> := <var:i2> * <var:K> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:9> ; <var:i3> := <var:i3> * <nat:7> ; <var:F> := <var:i3> <var:F> := <var:F> + <var:i2> <var:F> := <var:F> + <var:i1> <var:F> := <var:F> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Allow that we have $ <var:K> = <var:R> $ ahead of the execution of the program it follows that we have $ <var:F> = <nat:7> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> + <nat:6> \times <var:R> + <nat:3> $ once series of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:R> \} \\ <var:i1> := <var:K> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <var:R> \} \\ <var:i2> := <var:i1> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <var:R> \land <var:i2> = <var:R> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <var:R> \land <var:i2> = <var:R> ^ <nat:2> \land <var:i3> = <var:R> ^ <nat:3> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <var:R> \land <var:i2> = <var:R> ^ <nat:2> \land <var:i3> = <var:R> ^ <nat:3> \land <var:i0> = <nat:3> \} \\ <var:i1> := <var:i1> * <nat:6> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <nat:6> \times <var:R> \land <var:i2> = <var:R> ^ <nat:2> \land <var:i3> = <var:R> ^ <nat:3> \land <var:i0> = <nat:3> \} \\ <var:i2> := <var:i2> * <nat:9> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <nat:6> \times <var:R> \land <var:i2> = <nat:9> \times <var:R> ^ <nat:2> \land <var:i3> = <var:R> ^ <nat:3> \land <var:i0> = <nat:3> \} \\ <var:i3> := <var:i3> * <nat:7> ; \\ \{ <var:K> = <var:R> \land <var:i1> = <nat:6> \times <var:R> \land <var:i2> = <nat:9> \times <var:R> ^ <nat:2> \land <var:i3> = <nat:7> \times <var:R> ^ <nat:3> \land <var:i0> = <nat:3> \} \\ <var:F> := <var:i3> \\ \{ <var:K> = <var:R> \land <var:i1> = <nat:6> \times <var:R> \land <var:i2> = <nat:9> \times <var:R> ^ <nat:2> \land <var:i0> = <nat:3> \land <var:F> = <nat:7> \times <var:R> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:i2> \\ \{ <var:K> = <var:R> \land <var:i1> = <nat:6> \times <var:R> \land <var:i0> = <nat:3> \land <var:F> = <nat:7> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:i1> \\ \{ <var:K> = <var:R> \land <var:i0> = <nat:3> \land <var:F> = <nat:7> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> + <nat:6> \times <var:R> \} \\ <var:F> := <var:F> + <var:i0> \\ \{ <var:K> = <var:R> \land <var:F> = <nat:7> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> + <nat:6> \times <var:R> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i1> := <var:K> ; <var:i2> := <var:i1> * <var:K> ; <var:i3> := <var:i2> * <var:K> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:9> ; <var:i3> := <var:i3> * <nat:7> ; <var:F> := <var:i3> <var:F> := <var:F> + <var:i2> <var:F> := <var:F> + <var:i1> <var:F> := <var:F> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:K> = <var:R> }} <def:poly> {{ <var:F> = <nat:7> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:6> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <var:R> /\ <var:i2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <var:R> /\ <var:i2> = <var:R> ^ <nat:2> /\ <var:i3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <var:R> /\ <var:i2> = <var:R> ^ <nat:2> /\ <var:i3> = <var:R> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <nat:6> * <var:R> /\ <var:i2> = <var:R> ^ <nat:2> /\ <var:i3> = <var:R> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <nat:6> * <var:R> /\ <var:i2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:i3> = <var:R> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <nat:6> * <var:R> /\ <var:i2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:i3> = <nat:7> * <var:R> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <nat:6> * <var:R> /\ <var:i2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:i0> = <nat:3> /\ <var:F> = <nat:7> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i1> = <nat:6> * <var:R> /\ <var:i0> = <nat:3> /\ <var:F> = <nat:7> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:i0> = <nat:3> /\ <var:F> = <nat:7> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:F> = <nat:7> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:6> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 