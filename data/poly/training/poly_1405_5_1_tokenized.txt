\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:T1> := <var:A> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:1> ; <var:J> := <var:T1> <var:J> := <var:J> + <var:T0> \end{verbatim} Assume it to be that $ <var:A> = <var:U> $ given every positive numbers $ <var:U> $ prior to evaluating our series of commands it follows that $ <var:J> = <nat:1> \times <var:U> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our code can be demonstrated with usual Hoare logic . Jumping to the subsequent step in our segment of code , we have the statement \verb | <var:T1> := <var:A> ; | . This code takes the condition $ \{ <var:A> = <var:U> \} $ into the postcondition $ \{ <var:A> = <var:U> \land <var:T1> = <var:U> \} $ . Moving forward to the subsequent piece of code contained in the series of commands , we have the environment update statement yielding $ <nat:4> $ to $ <var:T0>$ . This moves the condition $ \{ <var:A> = <var:U> \land <var:T1> = <var:U> \} $ as the condition $ \{ <var:A> = <var:U> \land <var:T1> = <var:U> \land <var:T0> = <nat:4> \} $ . Looking at the following line of code contained in our segment of code , the line yielding $ <var:T1> * <nat:1> $ as $ <var:T1>$ . This command forwards the precondition $ \{ <var:A> = <var:U> \land <var:T1> = <var:U> \land <var:T0> = <nat:4> \} $ toward $ \{ <var:A> = <var:U> \land <var:T1> = <nat:1> \cdot <var:U> \land <var:T0> = <nat:4> \} $ . This is guaranteed using the assignment rule given in usual Hoare reasoning . Taking another step toward the upcoming step contained in our segment of code , the code \verb | <var:J> := <var:T1> | . This line transfers the condition $ \{ <var:A> = <var:U> \land <var:T1> = <nat:1> \cdot <var:U> \land <var:T0> = <nat:4> \} $ as the postcondition $ \{ <var:A> = <var:U> \land <var:T0> = <nat:4> \land <var:J> = <nat:1> \cdot <var:U> \} $ . This is deduced with the assignment scheme obtained from typical Hoare reasoning . Following , we see the variable binding line \verb | <var:J> := <var:J> + <var:T0> | . This moves the precondition $ \{ <var:A> = <var:U> \land <var:T0> = <nat:4> \land <var:J> = <nat:1> \cdot <var:U> \} $ into $ \{ <var:A> = <var:U> \land <var:J> = <nat:1> \cdot <var:U> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:A> = <var:U> }} <var:T1> := <var:A> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:1> ; <var:J> := <var:T1> <var:J> := <var:J> + <var:T0> {{ <var:J> = <nat:1> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:T1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:T1> = <var:U> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:T1> = <nat:1> * <var:U> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:T0> = <nat:4> /\ <var:J> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:J> = <nat:1> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 