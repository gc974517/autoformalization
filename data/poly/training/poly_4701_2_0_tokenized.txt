\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:6> ; <var:o> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Allowing for any natural coefficients $ <var:i> $ it to be that $ <var:j> = <var:i> $ ahead of interpreting this set of commands it holds that we see $ <var:o> = <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:j> = <var:i> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:j> = <var:i> \land <var:y0> = <nat:6> \} \\ <var:o> := <var:y0> \\ \{ <var:j> = <var:i> \land <var:o> = <nat:6> \} \end{eqnarray} Hence , our code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:o> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:j> = <var:i> }} <def:poly> {{ <var:o> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:o> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 