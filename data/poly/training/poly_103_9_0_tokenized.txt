\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:3> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:n> ; <var:h2> := <nat:5> ; <var:h2> := <var:h2> * <var:n> ; <var:h2> := <var:h2> * <var:n> ; <var:m> := <var:h2> ; <var:m> := <var:m> + <var:h1> ; <var:m> := <var:m> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:n> = <var:q> $ prior to executing the series of instructions , it must be that we see $ <var:m> = <nat:5> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:3> $ after series of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:q> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \} \\ <var:h1> := <nat:1> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:h1> = <nat:1> \} \\ <var:h1> := <var:h1> * <var:n> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:h1> = <nat:1> \cdot <var:q> \} \\ <var:h2> := <nat:5> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:h1> = <nat:1> \cdot <var:q> \land <var:h2> = <nat:5> \} \\ <var:h2> := <var:h2> * <var:n> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:h1> = <nat:1> \cdot <var:q> \land <var:h2> = <nat:5> \cdot <var:q> \} \\ <var:h2> := <var:h2> * <var:n> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:h1> = <nat:1> \cdot <var:q> \land <var:h2> = <nat:5> \cdot <var:q> ^ <nat:2> \} \\ <var:m> := <var:h2> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:h1> = <nat:1> \cdot <var:q> \land <var:m> = <nat:5> \cdot <var:q> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:h1> ; \\ \{ <var:n> = <var:q> \land <var:h0> = <nat:3> \land <var:m> = <nat:5> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> \} \\ <var:m> := <var:m> + <var:h0> \\ \{ <var:n> = <var:q> \land <var:m> = <nat:5> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:n> ; <var:h2> := <nat:5> ; <var:h2> := <var:h2> * <var:n> ; <var:h2> := <var:h2> * <var:n> ; <var:m> := <var:h2> ; <var:m> := <var:m> + <var:h1> ; <var:m> := <var:m> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:n> = <var:q> }} <def:poly> {{ <var:m> = <nat:5> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:1> * <var:q> /\ <var:h2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:1> * <var:q> /\ <var:h2> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:1> * <var:q> /\ <var:h2> = <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:1> * <var:q> /\ <var:m> = <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:h0> = <nat:3> /\ <var:m> = <nat:5> * <var:q> ^ <nat:2> + <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:m> = <nat:5> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 