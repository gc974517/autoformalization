\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:4> + <var:Z> * <var:P> ; <var:Z> := <nat:2> + <var:Z> * <var:P> ; <var:Z> := <var:Z> * <var:P> ; <var:Z> := <nat:4> + <var:Z> * <var:P> ; <var:Z> := <nat:1> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:2> + <var:Z> * <var:P> ; <var:Z> := <nat:2> + <var:Z> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Allowing given some $ <var:u> $ $ <var:P> = <var:u> $ prior to the evaluation of the list of instructions it must be that $ <var:Z> = <nat:3> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> $ after series of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be shown with standard Hoare techniques . Moving forward to the subsequent pieces of code contained in the code segment , we see \verb | { <var:P> = <var:u> } <var:Z> := <nat:3> { <var:P> = <var:u> \land <var:Z> = <nat:3> } | , \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> } <var:Z> := <nat:4> + <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> + <nat:4> } | , \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> + <nat:4> } <var:Z> := <nat:2> + <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:2> } | , \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:2> } <var:Z> := <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + } | , \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + } <var:Z> := <nat:4> + <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> } | , \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> } <var:Z> := <nat:1> + <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> + <nat:1> } | , \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> + <nat:1> } <var:Z> := <nat:3> + <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:6> + <nat:4> \cdot <var:u> ^ <nat:5> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:3> } | and \verb | { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:6> + <nat:4> \cdot <var:u> ^ <nat:5> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:3> } <var:Z> := <nat:2> + <var:Z> * <var:P> { <var:P> = <var:u> \land <var:Z> = <nat:3> \cdot <var:u> ^ <nat:7> + <nat:4> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:2> } | . Moving on to the next step , we have \verb | { <var:P> = <var:u> } <var:Z> := <nat:3> { <var:P> = <var:u> \land <var:Z> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:3> ; <var:Z> := <nat:4> + <var:Z> * <var:P> ; <var:Z> := <nat:2> + <var:Z> * <var:P> ; <var:Z> := <var:Z> * <var:P> ; <var:Z> := <nat:4> + <var:Z> * <var:P> ; <var:Z> := <nat:1> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:2> + <var:Z> * <var:P> ; <var:Z> := <nat:2> + <var:Z> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:P> = <var:u> }} <def:poly> {{ <var:Z> = <nat:3> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:7> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 