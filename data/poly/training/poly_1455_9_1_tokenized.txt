\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:G> ; <var:S2> := <var:S1> * <var:G> ; <var:S3> := <var:S2> * <var:G> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:4> ; <var:S3> := <var:S3> * <nat:3> ; <var:a> := <var:S3> <var:a> := <var:a> + <var:S1> <var:a> := <var:a> + <var:S0> \end{verbatim} Assume $ <var:G> = <var:z> $ ahead of evaluating this set of instructions it follows that we see $ <var:a> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> + <nat:7> $ once segment of code has finished . \end{theorem} \begin{proof} The flow of logic for our program can be done through standard Hoare reasoning . Looking at the following statements found in our segment of code , we see \begin{eqnarray} \{ <var:G> = <var:z> \} \, <var:S1> := <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \} \\ \{ <var:G> = <var:z> \land <var:S1> = <var:z> \} \, <var:S2> := <var:S1> * <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \} \\ \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \} \, <var:S3> := <var:S2> * <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \land <var:S3> = <var:z> ^ <nat:3> \} \\ \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \land <var:S3> = <var:z> ^ <nat:3> \} \, <var:S0> := <nat:7> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \land <var:S3> = <var:z> ^ <nat:3> \land <var:S0> = <nat:7> \} \\ \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \land <var:S3> = <var:z> ^ <nat:3> \land <var:S0> = <nat:7> \} \, <var:S1> := <var:S1> * <nat:4> \, \{ <var:G> = <var:z> \land <var:S1> = <nat:4> \times <var:z> \land <var:S2> = <var:z> ^ <nat:2> \land <var:S3> = <var:z> ^ <nat:3> \land <var:S0> = <nat:7> \} \end{eqnarray} Focusing on the proceeding bits of codefound in our code , \begin{eqnarray} \{ <var:G> = <var:z> \} \, <var:S1> := <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \} \\ \{ <var:G> = <var:z> \land <var:S1> = <var:z> \} \, <var:S2> := <var:S1> * <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \land <var:S2> = <var:z> ^ <nat:2> \} \end{eqnarray} Moving forward , we see \begin{eqnarray} \{ <var:G> = <var:z> \} \, <var:S1> := <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \} \end{eqnarray} This is given with the binding scheme given in usual Hoare logic . Observing the subsequent piece of code seen in the code segment , we have \begin{eqnarray} \{ <var:G> = <var:z> \} \, <var:S1> := <var:G> \, \{ <var:G> = <var:z> \land <var:S1> = <var:z> \} \end{eqnarray} This is guaranteed with the scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:G> = <var:z> }} <var:S1> := <var:G> ; <var:S2> := <var:S1> * <var:G> ; <var:S3> := <var:S2> * <var:G> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:4> ; <var:S3> := <var:S3> * <nat:3> ; <var:a> := <var:S3> <var:a> := <var:a> + <var:S1> <var:a> := <var:a> + <var:S0> {{ <var:a> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <var:z> /\ <var:S2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <var:z> /\ <var:S2> = <var:z> ^ <nat:2> /\ <var:S3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <var:z> /\ <var:S2> = <var:z> ^ <nat:2> /\ <var:S3> = <var:z> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <nat:4> * <var:z> /\ <var:S2> = <var:z> ^ <nat:2> /\ <var:S3> = <var:z> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <nat:4> * <var:z> /\ <var:S2> = <var:z> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S1> = <nat:4> * <var:z> /\ <var:S2> = <var:z> ^ <nat:2> /\ <var:S0> = <nat:7> /\ <var:a> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:S0> = <nat:7> /\ <var:a> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:a> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 