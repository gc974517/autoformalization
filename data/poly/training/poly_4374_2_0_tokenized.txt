\begin{document} \begin{theorem} Define the following list of commands : \begin{verbatim} <var:s0> := <nat:6> ; <var:K> := <var:s0> \end{verbatim} Allow that we have $ <var:m> = <var:a> $ before evaluating this code , it must be that we have $ <var:K> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:a> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:m> = <var:a> \land <var:s0> = <nat:6> \} \\ <var:K> := <var:s0> \\ \{ <var:m> = <var:a> \land <var:K> = <nat:6> \} \end{eqnarray} The application of typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:m> = <var:a> }} <var:s0> := <nat:6> ; <var:K> := <var:s0> {{ <var:K> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:K> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 