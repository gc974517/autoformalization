\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:U> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:2> ; <var:b> := <var:N1> <var:b> := <var:b> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:U> = <var:x> $ ( for every $ <var:x> \in \mathbb{Z}^+ $ ) prior to evaluating our code segment it holds that we see $ <var:b> = <nat:2> \times <var:x> + <nat:8> $ when series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:x> \} \\ <var:N1> := <var:U> ; \\ \{ <var:U> = <var:x> \land <var:N1> = <var:x> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:U> = <var:x> \land <var:N1> = <var:x> \land <var:N0> = <nat:8> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:U> = <var:x> \land <var:N1> = <nat:2> \times <var:x> \land <var:N0> = <nat:8> \} \\ <var:b> := <var:N1> \\ \{ <var:U> = <var:x> \land <var:N0> = <nat:8> \land <var:b> = <nat:2> \times <var:x> \} \\ <var:b> := <var:b> + <var:N0> \\ \{ <var:U> = <var:x> \land <var:b> = <nat:2> \times <var:x> + <nat:8> \} \end{eqnarray} The application of typical Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:U> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:2> ; <var:b> := <var:N1> <var:b> := <var:b> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <def:poly> {{ <var:b> = <nat:2> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:N1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:N1> = <var:x> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:N1> = <nat:2> * <var:x> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:N0> = <nat:8> /\ <var:b> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:b> = <nat:2> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 