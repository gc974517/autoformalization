\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:p0> := <nat:6> ; <var:p1> := <nat:4> ; <var:p1> := <var:p1> * <var:d> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:d> ; <var:p2> := <var:p2> * <var:d> ; <var:Y> := <var:p2> ; <var:Y> := <var:Y> + <var:p1> ; <var:Y> := <var:Y> + <var:p0> \end{verbatim} Allowing $ <var:d> = <var:s> $ ahead of evaluating this series of commands , then $ <var:Y> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:6> $ after list of instructions has terminated . \end{theorem} \begin{proof} The application of standard Hoare reasoning results in : \begin{eqnarray} \{ <var:d> = <var:s> \} \\ <var:p0> := <nat:6> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \} \\ <var:p1> := <nat:4> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:p1> = <nat:4> \} \\ <var:p1> := <var:p1> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:p1> = <nat:4> \times <var:s> \} \\ <var:p2> := <nat:2> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:p1> = <nat:4> \times <var:s> \land <var:p2> = <nat:2> \} \\ <var:p2> := <var:p2> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:p1> = <nat:4> \times <var:s> \land <var:p2> = <nat:2> \times <var:s> \} \\ <var:p2> := <var:p2> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:p1> = <nat:4> \times <var:s> \land <var:p2> = <nat:2> \times <var:s> ^ <nat:2> \} \\ <var:Y> := <var:p2> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:p1> = <nat:4> \times <var:s> \land <var:Y> = <nat:2> \times <var:s> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:p1> ; \\ \{ <var:d> = <var:s> \land <var:p0> = <nat:6> \land <var:Y> = <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> \} \\ <var:Y> := <var:Y> + <var:p0> \\ \{ <var:d> = <var:s> \land <var:Y> = <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:6> \} \end{eqnarray} Thus , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:d> = <var:s> }} <var:p0> := <nat:6> ; <var:p1> := <nat:4> ; <var:p1> := <var:p1> * <var:d> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:d> ; <var:p2> := <var:p2> * <var:d> ; <var:Y> := <var:p2> ; <var:Y> := <var:Y> + <var:p1> ; <var:Y> := <var:Y> + <var:p0> {{ <var:Y> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:4> * <var:s> /\ <var:p2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:4> * <var:s> /\ <var:p2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:4> * <var:s> /\ <var:p2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:4> * <var:s> /\ <var:Y> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:p0> = <nat:6> /\ <var:Y> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:Y> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 