\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:J> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:5> ; <var:P> := <var:H1> <var:P> := <var:P> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume --- with some $ <var:u> \in \mathbb{Z}^+ $ --- that $ <var:J> = <var:u> $ ahead of the evaluation of this code segment , it must be that we have $ <var:P> = <nat:5> \cdot <var:u> + <nat:4> $ once series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:u> \} \\ <var:H1> := <var:J> ; \\ \{ <var:J> = <var:u> \land <var:H1> = <var:u> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:J> = <var:u> \land <var:H1> = <var:u> \land <var:H0> = <nat:4> \} \\ <var:H1> := <var:H1> * <nat:5> ; \\ \{ <var:J> = <var:u> \land <var:H1> = <nat:5> \cdot <var:u> \land <var:H0> = <nat:4> \} \\ <var:P> := <var:H1> \\ \{ <var:J> = <var:u> \land <var:H0> = <nat:4> \land <var:P> = <nat:5> \cdot <var:u> \} \\ <var:P> := <var:P> + <var:H0> \\ \{ <var:J> = <var:u> \land <var:P> = <nat:5> \cdot <var:u> + <nat:4> \} \end{eqnarray} Using standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:J> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:5> ; <var:P> := <var:H1> <var:P> := <var:P> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:J> = <var:u> }} <def:poly> {{ <var:P> = <nat:5> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:H1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:H1> = <var:u> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:H1> = <nat:5> * <var:u> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:H0> = <nat:4> /\ <var:P> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:P> = <nat:5> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 