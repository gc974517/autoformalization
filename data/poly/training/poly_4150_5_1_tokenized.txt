\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as \begin{verbatim} <var:R1> := <var:q> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:6> ; <var:n> := <var:R1> <var:n> := <var:n> + <var:R0> \end{verbatim} Given that we have $ <var:q> = <var:L> $ before evaluating the list of commands then we have $ <var:n> = <nat:6> \cdot <var:L> + <nat:7> $ when series of instructions is done . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is done using Hoare techniques . Focusing on the following line of code contained in the program , we have the environment update statement \verb | <var:R1> := <var:q> ; | . This redefines the condition $ \{ <var:q> = <var:L> \} $ into $ \{ <var:q> = <var:L> \land <var:R1> = <var:L> \} $ . Shifting focus toward the next statement seen in our program , the variable binding statement assigning $ <nat:7> $ toward $ <var:R0>$ . This line redefines $ \{ <var:q> = <var:L> \land <var:R1> = <var:L> \} $ into the postcondition $ \{ <var:q> = <var:L> \land <var:R1> = <var:L> \land <var:R0> = <nat:7> \} $ . This is shown to be logically sound with the assignment law in usual Hoare techniques . Going forward , the variable binding command letting $ <var:R1> * <nat:6> $ to $ <var:R1>$ . This moves $ \{ <var:q> = <var:L> \land <var:R1> = <var:L> \land <var:R0> = <nat:7> \} $ toward the condition $ \{ <var:q> = <var:L> \land <var:R1> = <nat:6> \cdot <var:L> \land <var:R0> = <nat:7> \} $ . This is shown with the assignment rule obtained from usual Hoare logic . Moving on to the proceeding line found in the set of commands , we see the binding command \verb | <var:n> := <var:R1> | . This code redefines $ \{ <var:q> = <var:L> \land <var:R1> = <nat:6> \cdot <var:L> \land <var:R0> = <nat:7> \} $ into $ \{ <var:q> = <var:L> \land <var:R0> = <nat:7> \land <var:n> = <nat:6> \cdot <var:L> \} $ . Advancing , the variable update line \verb | <var:n> := <var:n> + <var:R0> | . This moves the precondition $ \{ <var:q> = <var:L> \land <var:R0> = <nat:7> \land <var:n> = <nat:6> \cdot <var:L> \} $ toward the condition $ \{ <var:q> = <var:L> \land <var:n> = <nat:6> \cdot <var:L> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:q> = <var:L> }} <var:R1> := <var:q> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:6> ; <var:n> := <var:R1> <var:n> := <var:n> + <var:R0> {{ <var:n> = <nat:6> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:R1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:R1> = <var:L> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:R1> = <nat:6> * <var:L> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:R0> = <nat:7> /\ <var:n> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:n> = <nat:6> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 