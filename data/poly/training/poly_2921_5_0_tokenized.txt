\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:u> ; <var:o> := <var:x1> ; <var:o> := <var:o> + <var:x0> \end{verbatim} Assuming $ <var:u> = <var:Z> $ before interpreting the code segment , it must be that $ <var:o> = <nat:1> \cdot <var:Z> + <nat:3> $ when list of instructions finishes . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is shown with Hoare reasoning . Further , \begin{eqnarray} \{ <var:u> = <var:Z> \} \, <var:x0> := <nat:3> \, \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \} \\ \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \} \, <var:x1> := <nat:1> \, \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \land <var:x1> = <nat:1> \} \\ \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \land <var:x1> = <nat:1> \} \, <var:x1> := <var:x1> * <var:u> \, \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \land <var:x1> = <nat:1> * <var:Z> \} \end{eqnarray} This is shown to be logically sound using the variable assignmet law defined in standard Hoare techniques . Honing in on the following steps in our segment of code , \begin{eqnarray} \{ <var:u> = <var:Z> \} \, <var:x0> := <nat:3> \, \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \} \\ \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \} \, <var:x1> := <nat:1> \, \{ <var:u> = <var:Z> \land <var:x0> = <nat:3> \land <var:x1> = <nat:1> \} \end{eqnarray} This is deduced with the environment update rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:u> = <var:Z> }} <var:x0> := <nat:3> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:u> ; <var:o> := <var:x1> ; <var:o> := <var:o> + <var:x0> {{ <var:o> = <nat:1> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:x0> = <nat:3> /\ <var:o> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 