\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:g> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:a> := <var:M1> <var:a> := <var:a> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:g> = <var:q> $ ahead of the execution of the series of instructions , it must be that $ <var:a> = <nat:1> * <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the list of commands can be shown using standard Hoare reasoning . Following , we see the variable binding statement binding $ <var:g> $ into $ <var:M1>$ . This line transfers $ \{ <var:g> = <var:q> \} $ to the condition $ \{ <var:g> = <var:q> \land <var:M1> = <var:q> \} $ . Shifting focus toward the proceeding bit of code found in the code segment , we have the binding line \verb | <var:M0> := <nat:2> ; | . This takes $ \{ <var:g> = <var:q> \land <var:M1> = <var:q> \} $ into the condition $ \{ <var:g> = <var:q> \land <var:M1> = <var:q> \land <var:M0> = <nat:2> \} $ . Jumping to the next command in the program , we have the assignment command defining $ <var:M1> * <nat:1> $ as $ <var:M1>$ . This takes the condition $ \{ <var:g> = <var:q> \land <var:M1> = <var:q> \land <var:M0> = <nat:2> \} $ to the postcondition $ \{ <var:g> = <var:q> \land <var:M1> = <nat:1> * <var:q> \land <var:M0> = <nat:2> \} $ . Shifting focus toward the subsequent line contained in our set of instructions , the variable assignmet code defining $ <var:M1$ as $ <var:a>$ . This takes the condition $ \{ <var:g> = <var:q> \land <var:M1> = <nat:1> * <var:q> \land <var:M0> = <nat:2> \} $ toward the postcondition $ \{ <var:g> = <var:q> \land <var:M0> = <nat:2> \land <var:a> = <nat:1> * <var:q> \} $ . Shifting focus toward the next command seen in the segment of code , we see the variable binding code binding $ <var:a> + <var:M0$ toward $ <var:a>$ . This line forwards the precondition $ \{ <var:g> = <var:q> \land <var:M0> = <nat:2> \land <var:a> = <nat:1> * <var:q> \} $ as the postcondition $ \{ <var:g> = <var:q> \land <var:a> = <nat:1> * <var:q> + <nat:2> \} $ . This is ensured by the assignment inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:g> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:a> := <var:M1> <var:a> := <var:a> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:g> = <var:q> }} <def:poly> {{ <var:a> = <nat:1> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:M1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:M1> = <var:q> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:M1> = <nat:1> * <var:q> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:M0> = <nat:2> /\ <var:a> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:a> = <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 