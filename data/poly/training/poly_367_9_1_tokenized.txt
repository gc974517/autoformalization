\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P1> := <var:R> ; <var:P2> := <var:P1> * <var:R> ; <var:P3> := <var:P2> * <var:R> ; <var:P0> := <nat:2> ; <var:P2> := <var:P2> * <nat:1> ; <var:P3> := <var:P3> * <nat:5> ; <var:x> := <var:P3> <var:x> := <var:x> + <var:P2> <var:x> := <var:x> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assume ( for $ <var:X> \in \mathbb{N} $ ) that we have $ <var:R> = <var:X> $ prior to interpreting our code segment it must be that $ <var:x> = <nat:5> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:R> = <var:X> \} \\ <var:P1> := <var:R> ; \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \} \\ <var:P2> := <var:P1> * <var:R> ; \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:R> ; \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P0> = <nat:2> \} \\ <var:P2> := <var:P2> * <nat:1> ; \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P0> = <nat:2> \} \\ <var:P3> := <var:P3> * <nat:5> ; \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:P3> = <nat:5> \times <var:X> ^ <nat:3> \land <var:P0> = <nat:2> \} \\ <var:x> := <var:P3> \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:P0> = <nat:2> \land <var:x> = <nat:5> \times <var:X> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:P2> \\ \{ <var:R> = <var:X> \land <var:P1> = <var:X> \land <var:P0> = <nat:2> \land <var:x> = <nat:5> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:P0> \\ \{ <var:R> = <var:X> \land <var:x> = <nat:5> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thusly , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:R> ; <var:P2> := <var:P1> * <var:R> ; <var:P3> := <var:P2> * <var:R> ; <var:P0> := <nat:2> ; <var:P2> := <var:P2> * <nat:1> ; <var:P3> := <var:P3> * <nat:5> ; <var:x> := <var:P3> <var:x> := <var:x> + <var:P2> <var:x> := <var:x> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:R> = <var:X> }} <def:poly> {{ <var:x> = <nat:5> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:X> ^ <nat:3> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:P0> = <nat:2> /\ <var:x> = <nat:5> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:P1> = <var:X> /\ <var:P0> = <nat:2> /\ <var:x> = <nat:5> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:x> = <nat:5> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 