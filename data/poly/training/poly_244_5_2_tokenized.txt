\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:1> + <var:I> * <var:E> \end{verbatim} Allow ( with some positive integer coefficients $ <var:Y> $ ) that $ <var:E> = <var:Y> $ before interpreting our set of instructions then we have $ <var:I> = <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:E> = <var:Y> \} \\ <var:I> := <nat:4> ; \\ \{ <var:E> = <var:Y> \land <var:I> = <nat:4> \} \\ <var:I> := <nat:2> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:I> = <nat:4> \cdot <var:Y> + <nat:2> \} \\ <var:I> := <nat:2> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:I> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} \\ <var:I> := <nat:2> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:I> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} \\ <var:I> := <nat:1> + <var:I> * <var:E> \\ \{ <var:E> = <var:Y> \land <var:I> = <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:1> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:E> = <var:Y> }} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:1> + <var:I> * <var:E> {{ <var:I> = <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:I> = <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:I> = <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:I> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:I> = <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 