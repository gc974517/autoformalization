\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:F> ; <var:w> := <nat:4> + <var:w> * <var:F> ; <var:w> := <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:1> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:4> + <var:w> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:F> = <var:B> $ before interpreting our segment of code , it must be that we have $ <var:w> = <nat:4> \cdot <var:B> ^ <nat:10> + <nat:4> \cdot <var:B> ^ <nat:9> + <nat:4> \cdot <var:B> ^ <nat:8> + <nat:3> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:5> + <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:4> $ once code has executed . \end{theorem} \begin{proof} The flow of logic for our segment of code can be shown by Hoare reasoning . Moving on , we have the variable update statement assigning $ <nat:4> $ as $ <var:w>$ . This statement advances the precondition $ \{ <var:F> = <var:B> \} $ into $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \} $ . Keeping momentum , we have the line \verb | <var:w> := <nat:4> + <var:w> * <var:F> ; | . This command advances $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \} $ into the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> + <nat:4> \} $ . Moving onward , the assignment code defining $ <nat:4> + <var:w> * <var:F> $ toward $ <var:w>$ . This line forwards the condition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> + <nat:4> \} $ toward the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:4> \} $ . Moving forward , we have the environment update command giving $ <var:w> * <var:F> $ into $ <var:w>$ . This advances $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:4> \} $ to $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + \} $ . Moving on , we see the variable binding statement \verb | <var:w> := <nat:3> + <var:w> * <var:F> ; | . This moves the precondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + \} $ as $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:4> + <nat:4> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \} $ . This is ensured through the assignment scheme of typical Hoare techniques . Advancing to the upcoming bit of code seen in our segment of code , the environment update line \verb | <var:w> := <nat:2> + <var:w> * <var:F> ; | . This command transfers $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:4> + <nat:4> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \} $ as the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:5> + <nat:4> \cdot <var:B> ^ <nat:4> + <nat:4> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> + <nat:2> \} $ . This is shown with the assignment law defined in Hoare reasoning . Shifting focus toward the subsequent command seen in our code segment , the environment update code letting $ <nat:1> + <var:w> * <var:F> $ to $ <var:w>$ . This command takes $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:5> + <nat:4> \cdot <var:B> ^ <nat:4> + <nat:4> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> + <nat:2> \} $ into $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:6> + <nat:4> \cdot <var:B> ^ <nat:5> + <nat:4> \cdot <var:B> ^ <nat:4> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:1> \} $ . This is given with the assignment rule given in typical Hoare logic . Stepping through , we have the variable update code binding $ <nat:2> + <var:w> * <var:F> $ toward $ <var:w>$ . This statement forwards the precondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:6> + <nat:4> \cdot <var:B> ^ <nat:5> + <nat:4> \cdot <var:B> ^ <nat:4> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:1> \} $ into the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:7> + <nat:4> \cdot <var:B> ^ <nat:6> + <nat:4> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} $ . Following , the variable binding command yielding $ <nat:2> + <var:w> * <var:F> $ as $ <var:w>$ . This line takes the precondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:7> + <nat:4> \cdot <var:B> ^ <nat:6> + <nat:4> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:8> + <nat:4> \cdot <var:B> ^ <nat:7> + <nat:4> \cdot <var:B> ^ <nat:6> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:2> \} $ . Moving on to the proceeding step in the set of commands , we see the binding line \verb | <var:w> := <nat:3> + <var:w> * <var:F> ; | . This code moves $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:8> + <nat:4> \cdot <var:B> ^ <nat:7> + <nat:4> \cdot <var:B> ^ <nat:6> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:9> + <nat:4> \cdot <var:B> ^ <nat:8> + <nat:4> \cdot <var:B> ^ <nat:7> + <nat:3> \cdot <var:B> ^ <nat:5> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> \} $ . This is given using the assignment inference rule given by typical Hoare techniques . Jumping to the subsequent bit of code found in the segment of code , we have the variable update code defining $ <nat:4> + <var:w> * <var:F$ into $ <var:w>$ . This statement transfers the precondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:9> + <nat:4> \cdot <var:B> ^ <nat:8> + <nat:4> \cdot <var:B> ^ <nat:7> + <nat:3> \cdot <var:B> ^ <nat:5> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> \} $ into the postcondition $ \{ <var:F> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:10> + <nat:4> \cdot <var:B> ^ <nat:9> + <nat:4> \cdot <var:B> ^ <nat:8> + <nat:3> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:5> + <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:4> \} $ . This is guaranteed by the assignment scheme of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:F> ; <var:w> := <nat:4> + <var:w> * <var:F> ; <var:w> := <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:1> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:4> + <var:w> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:F> = <var:B> }} <def:poly> {{ <var:w> = <nat:4> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 