\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:4> ; <var:P> := <var:a0> \end{verbatim} Allowing that we have $ <var:T> = <var:v> $ , given $ <var:v> \in \mathbb{N} $ , prior to evaluating this code segment , it must be that we have $ <var:P> = <nat:4> $ when series of instructions has finished . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives : \begin{eqnarray} \{ <var:T> = <var:v> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:T> = <var:v> \land <var:a0> = <nat:4> \} \\ <var:P> := <var:a0> \\ \{ <var:T> = <var:v> \land <var:P> = <nat:4> \} \end{eqnarray} Given the above , this code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:T> = <var:v> }} <var:a0> := <nat:4> ; <var:P> := <var:a0> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 