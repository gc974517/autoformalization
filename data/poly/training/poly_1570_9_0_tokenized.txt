\begin{document} \begin{theorem} We define the following set of commands as \begin{verbatim} <var:g0> := <nat:9> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:V> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:V> ; <var:g2> := <var:g2> * <var:V> ; <var:G> := <var:g2> ; <var:G> := <var:G> + <var:g1> ; <var:G> := <var:G> + <var:g0> \end{verbatim} Assume that $ <var:V> = <var:X> $ assuming some natural numbers $ <var:X> $ ahead of executing this code it must be that we see $ <var:G> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be shown with usual Hoare techniques . Paying attention to the subsequent lines found in our set of commands , \begin{eqnarray} \{ <var:V> = <var:X> \} \, <var:g0> := <nat:9> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \} \, <var:g1> := <nat:4> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \, <var:g1> := <var:g1> * <var:V> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \} \, <var:g2> := <nat:6> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:g2> = <nat:6> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:g2> = <nat:6> \} \, <var:g2> := <var:g2> * <var:V> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:g2> = <nat:6> \cdot <var:X> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:g2> = <nat:6> \cdot <var:X> \} \, <var:g2> := <var:g2> * <var:V> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:g2> = <nat:6> \cdot <var:X> ^ <nat:2> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:g2> = <nat:6> \cdot <var:X> ^ <nat:2> \} \, <var:G> := <var:g2> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:G> = <nat:6> \cdot <var:X> ^ <nat:2> \} \\ \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \cdot <var:X> \land <var:G> = <nat:6> \cdot <var:X> ^ <nat:2> \} \, <var:G> := <var:G> + <var:g1> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \land <var:G> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> \} \end{eqnarray} This is given with the assignment inference rule obtained from standard Hoare logic . Moving forward to the next step , \begin{eqnarray} \{ <var:V> = <var:X> \} \, <var:g0> := <nat:9> \, \{ <var:V> = <var:X> \land <var:g0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <var:g0> := <nat:9> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:V> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:V> ; <var:g2> := <var:g2> * <var:V> ; <var:G> := <var:g2> ; <var:G> := <var:G> + <var:g1> ; <var:G> := <var:G> + <var:g0> {{ <var:G> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:X> /\ <var:g2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:X> /\ <var:g2> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:X> /\ <var:g2> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:X> /\ <var:G> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:g0> = <nat:9> /\ <var:G> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:G> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 