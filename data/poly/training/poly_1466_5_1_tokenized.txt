\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:g1> := <var:z> ; <var:g0> := <nat:6> ; <var:g1> := <var:g1> * <nat:8> ; <var:f> := <var:g1> <var:f> := <var:f> + <var:g0> \end{verbatim} Allow it to hold that $ <var:z> = <var:s> $ for some positive coefficients $ <var:s> $ prior to the evaluation of the set of instructions , then we see $ <var:f> = <nat:8> \cdot <var:s> + <nat:6> $ once series of commands terminates . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:z> = <var:s> \} \\ <var:g1> := <var:z> ; \\ \{ <var:z> = <var:s> \land <var:g1> = <var:s> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:z> = <var:s> \land <var:g1> = <var:s> \land <var:g0> = <nat:6> \} \\ <var:g1> := <var:g1> * <nat:8> ; \\ \{ <var:z> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g0> = <nat:6> \} \\ <var:f> := <var:g1> \\ \{ <var:z> = <var:s> \land <var:g0> = <nat:6> \land <var:f> = <nat:8> \cdot <var:s> \} \\ <var:f> := <var:f> + <var:g0> \\ \{ <var:z> = <var:s> \land <var:f> = <nat:8> \cdot <var:s> + <nat:6> \} \end{eqnarray} Thus , this code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:z> = <var:s> }} <var:g1> := <var:z> ; <var:g0> := <nat:6> ; <var:g1> := <var:g1> * <nat:8> ; <var:f> := <var:g1> <var:f> := <var:f> + <var:g0> {{ <var:f> = <nat:8> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:g1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:g1> = <var:s> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:g1> = <nat:8> * <var:s> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:g0> = <nat:6> /\ <var:f> = <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:f> = <nat:8> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 