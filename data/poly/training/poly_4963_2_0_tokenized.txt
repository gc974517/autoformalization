\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:3> ; <var:y> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:c> = <var:P> $ before evaluating the code segment it follows that we see $ <var:y> = <nat:3> $ when series of commands exits . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:c> = <var:P> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:c> = <var:P> \land <var:g0> = <nat:3> \} \\ <var:y> := <var:g0> \\ \{ <var:c> = <var:P> \land <var:y> = <nat:3> \} \end{eqnarray} Thus , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:y> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:c> = <var:P> }} <def:poly> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:P> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:P> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 