\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:Z> ; <var:L2> := <var:L1> * <var:Z> ; <var:L3> := <var:L2> * <var:Z> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:9> ; <var:L2> := <var:L2> * <nat:9> ; <var:L3> := <var:L3> * <nat:3> ; <var:C> := <var:L3> <var:C> := <var:C> + <var:L2> <var:C> := <var:C> + <var:L1> <var:C> := <var:C> + <var:L0> \end{verbatim} Given it to hold that $ <var:Z> = <var:I> $ prior to executing the segment of code then we have $ <var:C> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:9> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is accomplished by standard Hoare reasoning . After , we see \verb | { <var:Z> = <var:I> } <var:L1> := <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> } | , \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> } <var:L2> := <var:L1> * <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> } | , \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> } <var:L3> := <var:L2> * <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> } | , \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> } <var:L0> := <nat:7> { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> \land <var:L0> = <nat:7> } | , \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> \land <var:L0> = <nat:7> } <var:L1> := <var:L1> * <nat:9> { <var:Z> = <var:I> \land <var:L1> = <nat:9> * <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> \land <var:L0> = <nat:7> } | and \verb | { <var:Z> = <var:I> \land <var:L1> = <nat:9> * <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> \land <var:L0> = <nat:7> } <var:L2> := <var:L2> * <nat:9> { <var:Z> = <var:I> \land <var:L1> = <nat:9> * <var:I> \land <var:L2> = <nat:9> * <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> \land <var:L0> = <nat:7> } | . This is ensured using the inference rule given in Hoare techniques . Taking another step toward the upcoming commands in the program , we see \verb | { <var:Z> = <var:I> } <var:L1> := <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> } | and \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> } <var:L2> := <var:L1> * <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> } | . Following , we see \verb | { <var:Z> = <var:I> } <var:L1> := <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> } | , \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> } <var:L2> := <var:L1> * <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> } | and \verb | { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> } <var:L3> := <var:L2> * <var:Z> { <var:Z> = <var:I> \land <var:L1> = <var:I> \land <var:L2> = <var:I> ^ <nat:2> \land <var:L3> = <var:I> ^ <nat:3> } | . This is given using the variable assignmet scheme defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Z> = <var:I> }} <var:L1> := <var:Z> ; <var:L2> := <var:L1> * <var:Z> ; <var:L3> := <var:L2> * <var:Z> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:9> ; <var:L2> := <var:L2> * <nat:9> ; <var:L3> := <var:L3> * <nat:3> ; <var:C> := <var:L3> <var:C> := <var:C> + <var:L2> <var:C> := <var:C> + <var:L1> <var:C> := <var:C> + <var:L0> {{ <var:C> = <nat:3> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <var:I> /\ <var:L2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <var:I> /\ <var:L2> = <var:I> ^ <nat:2> /\ <var:L3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <var:I> /\ <var:L2> = <var:I> ^ <nat:2> /\ <var:L3> = <var:I> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <nat:9> * <var:I> /\ <var:L2> = <var:I> ^ <nat:2> /\ <var:L3> = <var:I> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <nat:9> * <var:I> /\ <var:L2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:L3> = <var:I> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <nat:9> * <var:I> /\ <var:L2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:I> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <nat:9> * <var:I> /\ <var:L2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:L0> = <nat:7> /\ <var:C> = <nat:3> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L1> = <nat:9> * <var:I> /\ <var:L0> = <nat:7> /\ <var:C> = <nat:3> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:L0> = <nat:7> /\ <var:C> = <nat:3> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:C> = <nat:3> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 