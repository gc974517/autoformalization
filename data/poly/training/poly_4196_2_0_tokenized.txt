\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:1> ; <var:c> := <var:z0> \end{verbatim} Assuming ( for every whole numbers $ <var:S> $ ) it to hold that $ <var:B> = <var:S> $ prior to evaluating the list of commands it follows that $ <var:c> = <nat:1> $ when list of instructions finishes . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:B> = <var:S> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:B> = <var:S> \land <var:z0> = <nat:1> \} \\ <var:c> := <var:z0> \\ \{ <var:B> = <var:S> \land <var:c> = <nat:1> \} \end{eqnarray} Considering the preceding argument , our series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:B> = <var:S> }} <var:z0> := <nat:1> ; <var:c> := <var:z0> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 