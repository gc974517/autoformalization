\begin{document} \begin{theorem} Let the following series of commands : \begin{verbatim} <var:X0> := <nat:2> ; <var:Y> := <var:X0> \end{verbatim} Given it to hold that $ <var:x> = <var:b> $ for some positive integer coefficients $ <var:b> $ before evaluating the series of commands , it must be that we have $ <var:Y> = <nat:2> $ after code segment executes . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:b> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:x> = <var:b> \land <var:X0> = <nat:2> \} \\ <var:Y> := <var:X0> \\ \{ <var:x> = <var:b> \land <var:Y> = <nat:2> \} \end{eqnarray} As a consequence , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:x> = <var:b> }} <var:X0> := <nat:2> ; <var:Y> := <var:X0> {{ <var:Y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:Y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 