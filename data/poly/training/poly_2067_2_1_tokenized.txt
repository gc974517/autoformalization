\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:6> ; <var:B> := <var:g0> \end{verbatim} Given --- given every integers $ <var:A> $ --- it to hold that $ <var:F> = <var:A> $ before the evaluation of this list of commands it follows that $ <var:B> = <nat:6> $ when segment of code is done . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:F> = <var:A> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:F> = <var:A> \land <var:g0> = <nat:6> \} \\ <var:B> := <var:g0> \\ \{ <var:F> = <var:A> \land <var:B> = <nat:6> \} \end{eqnarray} Thusly , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <var:g0> := <nat:6> ; <var:B> := <var:g0> {{ <var:B> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:B> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 