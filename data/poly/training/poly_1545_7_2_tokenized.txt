\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:l> := <nat:1> ; <var:l> := <var:l> * <var:o> ; <var:l> := <nat:4> + <var:l> * <var:o> ; <var:l> := <nat:3> + <var:l> * <var:o> ; <var:l> := <nat:1> + <var:l> * <var:o> ; <var:l> := <nat:3> + <var:l> * <var:o> ; <var:l> := <nat:2> + <var:l> * <var:o> \end{verbatim} Assuming that $ <var:o> = <var:N> $ before the evaluation of the series of commands , it follows that we have $ <var:l> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> $ after list of instructions is done . \end{theorem} \begin{proof} The argument for our set of commands can be accomplished with typical Hoare logic . Paying attention to the following step seen in the code segment , we have the environment update command defining $ <nat:1> $ into $ <var:l>$ . This code transfers $ \{ <var:o> = <var:N> \} $ toward the postcondition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> \} $ . This is guaranteed by the assignment rule given by standard Hoare logic . Taking another step toward the upcoming step contained in our set of instructions , we see the assignment statement \verb | <var:l> := <var:l> * <var:o> ; | . This forwards $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> \} $ to the condition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> + \} $ . Advancing to the proceeding statement contained in our code , the environment update command \verb | <var:l> := <nat:4> + <var:l> * <var:o> ; | . This transfers the precondition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> + \} $ as the postcondition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> \} $ . This is shown using the assignment inference rule given by usual Hoare techniques . Considering the following line seen in the list of instructions , we have the variable binding code letting $ <nat:3> + <var:l> * <var:o> $ to $ <var:l>$ . This statement redefines $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> \} $ into the condition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:3> \} $ . This is ensured by the assignment rule found in typical Hoare logic . Moving forward , we have the binding command yielding $ <nat:1> + <var:l> * <var:o> $ toward $ <var:l>$ . This code transfers $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:3> \} $ into the condition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> \} $ . Considering the next statement in our series of instructions , we have the assignment command \verb | <var:l> := <nat:3> + <var:l> * <var:o> ; | . This moves the precondition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> \} $ toward the condition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> \} $ . Going forward , we have the variable update line assigning $ <nat:2> + <var:l> * <var:o$ toward $ <var:l>$ . This moves $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> \} $ to the postcondition $ \{ <var:o> = <var:N> \land <var:l> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:o> = <var:N> }} <var:l> := <nat:1> ; <var:l> := <var:l> * <var:o> ; <var:l> := <nat:4> + <var:l> * <var:o> ; <var:l> := <nat:3> + <var:l> * <var:o> ; <var:l> := <nat:1> + <var:l> * <var:o> ; <var:l> := <nat:3> + <var:l> * <var:o> ; <var:l> := <nat:2> + <var:l> * <var:o> {{ <var:l> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:l> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 