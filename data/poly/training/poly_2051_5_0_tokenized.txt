\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:z> ; <var:w> := <var:g1> ; <var:w> := <var:w> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given ( for $ <var:t> \in \mathbb{N} $ ) it to hold that $ <var:z> = <var:t> $ prior to running our series of instructions it holds that we see $ <var:w> = <nat:9> * <var:t> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is accomplished by Hoare reasoning . Advancing on , we have the variable update statement binding $ <nat:7> $ toward $ <var:g0>$ . This transfers the precondition $ \{ <var:z> = <var:t> \} $ to $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \} $ . Advancing to the proceeding bit of code contained in the code , the environment update code \verb | <var:g1> := <nat:9> ; | . This takes the condition $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \} $ to the condition $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \land <var:g1> = <nat:9> \} $ . Considering the proceeding command contained in the series of commands , we have the assignment code \verb | <var:g1> := <var:g1> * <var:z> ; | . This advances the condition $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \land <var:g1> = <nat:9> \} $ toward the condition $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \land <var:g1> = <nat:9> * <var:t> \} $ . This is rigorously given through the assignment rule found in usual Hoare reasoning . Advancing to the next step , the binding statement \verb | <var:w> := <var:g1> ; | . This line transfers the condition $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \land <var:g1> = <nat:9> * <var:t> \} $ into $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \land <var:w> = <nat:9> * <var:t> \} $ . This is given with the assignment inference rule given in typical Hoare reasoning . After , the binding code \verb | <var:w> := <var:w> + <var:g0> | . This statement advances the precondition $ \{ <var:z> = <var:t> \land <var:g0> = <nat:7> \land <var:w> = <nat:9> * <var:t> \} $ to the condition $ \{ <var:z> = <var:t> \land <var:w> = <nat:9> * <var:t> + <nat:7> \} $ . This is guaranteed through the assignment inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:7> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:z> ; <var:w> := <var:g1> ; <var:w> := <var:w> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:z> = <var:t> }} <def:poly> {{ <var:w> = <nat:9> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:g0> = <nat:7> /\ <var:w> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:w> = <nat:9> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 