\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <nat:2> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:3> + <var:U> * <var:b> ; <var:U> := <nat:2> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:b> = <var:z> $ ahead of the execution of this series of instructions it holds that we have $ <var:U> = <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be done through usual Hoare techniques . Moving onward , we see the assignment command binding $ <nat:4> $ to $ <var:U>$ . This redefines the condition $ \{ <var:b> = <var:z> \} $ toward $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> \} $ . Keeping momentum , the code yielding $ <nat:1> + <var:U> * <var:b> $ toward $ <var:U>$ . This code moves the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> \} $ toward $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> + <nat:1> \} $ . This is shown to be logically sound through the assignment rule of standard Hoare logic . Observing the next command in our code segment , the variable update command assigning $ <nat:2> + <var:U> * <var:b> $ toward $ <var:U>$ . This advances $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> + <nat:1> \} $ into the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> \} $ . This is sound with the assignment inference rule obtained from Hoare techniques . Moving forward to the following statement found in our set of instructions , we have the environment update command \verb | <var:U> := <var:U> * <var:b> ; | . This moves the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> \} $ to $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} $ . Considering the following piece of code contained in the set of instructions , we see the variable update statement \verb | <var:U> := <nat:3> + <var:U> * <var:b> ; | . This code takes $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} $ to the postcondition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> \} $ . After , we have the statement giving $ <nat:2> + <var:U> * <var:b> $ into $ <var:U>$ . This command forwards the precondition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> \} $ as the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:2> \} $ . Going forward , we have the assignment line binding $ <var:U> * <var:b> $ toward $ <var:U>$ . This redefines $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:2> \} $ to $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} $ . Jumping to the upcoming line of code contained in our list of instructions , we have the binding line binding $ <nat:4> + <var:U> * <var:b> $ into $ <var:U>$ . This transfers the precondition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} $ into the postcondition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> \} $ . Taking a look at the upcoming line of code in the list of commands , we have the variable update command \verb | <var:U> := <nat:1> + <var:U> * <var:b> ; | . This redefines the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:1> \} $ . This is ensured with the assignment law defined in standard Hoare reasoning . Paying attention to the next piece of code seen in our program , we have the line binding $ <var:U> * <var:b> $ as $ <var:U>$ . This code takes the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:1> \} $ into $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + \} $ . Stepping forward , we see the binding command \verb | <var:U> := <nat:1> + <var:U> * <var:b> | . This forwards the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + \} $ as the condition $ \{ <var:b> = <var:z> \land <var:U> = <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> \} $ . This is given by the assignment law given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:4> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <nat:2> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:3> + <var:U> * <var:b> ; <var:U> := <nat:2> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:b> = <var:z> }} <def:poly> {{ <var:U> = <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:U> = <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 