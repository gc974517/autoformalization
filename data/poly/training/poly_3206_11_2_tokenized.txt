\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:1> + <var:y> * <var:s> ; <var:y> := <nat:3> + <var:y> * <var:s> ; <var:y> := <nat:3> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:3> + <var:y> * <var:s> ; <var:y> := <nat:4> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:1> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> \end{verbatim} Given $ <var:s> = <var:U> $ ahead of interpreting our program it holds that we see $ <var:y> = <nat:4> * <var:U> ^ <nat:10> + <nat:2> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is given with usual Hoare reasoning . Moving forward , we have \begin{verbatim} { <var:s> = <var:U> } <var:y> := <nat:4> { <var:s> = <var:U> \land <var:y> = <nat:4> } { <var:s> = <var:U> \land <var:y> = <nat:4> } <var:y> := <nat:2> + <var:y> * <var:s> { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> + <nat:2> } \end{verbatim} Focusing on the subsequent steps in the list of commands , we have \begin{verbatim} { <var:s> = <var:U> } <var:y> := <nat:4> { <var:s> = <var:U> \land <var:y> = <nat:4> } { <var:s> = <var:U> \land <var:y> = <nat:4> } <var:y> := <nat:2> + <var:y> * <var:s> { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> + <nat:2> } { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> + <nat:2> } <var:y> := <nat:1> + <var:y> * <var:s> { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> } { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> } <var:y> := <nat:3> + <var:y> * <var:s> { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:3> } \end{verbatim} This is known to be sound by the environment update rule defined in standard Hoare logic . Taking a look at the next step found in the code , we have \begin{verbatim} { <var:s> = <var:U> } <var:y> := <nat:4> { <var:s> = <var:U> \land <var:y> = <nat:4> } \end{verbatim} Advancing on , \begin{verbatim} { <var:s> = <var:U> } <var:y> := <nat:4> { <var:s> = <var:U> \land <var:y> = <nat:4> } { <var:s> = <var:U> \land <var:y> = <nat:4> } <var:y> := <nat:2> + <var:y> * <var:s> { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> + <nat:2> } { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> + <nat:2> } <var:y> := <nat:1> + <var:y> * <var:s> { <var:s> = <var:U> \land <var:y> = <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> } \end{verbatim} This is shown with the assignment scheme from typical Hoare logic . Moving forward to the next step , \begin{verbatim} { <var:s> = <var:U> } <var:y> := <nat:4> { <var:s> = <var:U> \land <var:y> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:s> = <var:U> }} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:1> + <var:y> * <var:s> ; <var:y> := <nat:3> + <var:y> * <var:s> ; <var:y> := <nat:3> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:3> + <var:y> * <var:s> ; <var:y> := <nat:4> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:1> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> {{ <var:y> = <nat:4> * <var:U> ^ <nat:10> + <nat:2> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:9> + <nat:2> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:y> = <nat:4> * <var:U> ^ <nat:10> + <nat:2> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 