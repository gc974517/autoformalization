\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:5> ; <var:b> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:M> = <var:D> $ before running the series of commands , it holds that we see $ <var:b> = <nat:5> $ once list of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:M> = <var:D> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:M> = <var:D> \land <var:U0> = <nat:5> \} \\ <var:b> := <var:U0> \\ \{ <var:M> = <var:D> \land <var:b> = <nat:5> \} \end{eqnarray} As a result , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:b> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <def:poly> {{ <var:b> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:b> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 