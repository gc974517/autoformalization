\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:s> ; <var:g2> := <var:g1> * <var:s> ; <var:g3> := <var:g2> * <var:s> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:7> ; <var:g3> := <var:g3> * <nat:1> ; <var:C> := <var:g3> <var:C> := <var:C> + <var:g1> <var:C> := <var:C> + <var:g0> \end{verbatim} Assume it to be that $ <var:s> = <var:Y> $ before the execution of the program it must be that $ <var:C> = <nat:1> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> + <nat:7> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:s> = <var:Y> \} \\ <var:g1> := <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:g1> = <var:Y> \} \\ <var:g2> := <var:g1> * <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:g1> = <var:Y> \land <var:g2> = <var:Y> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:g1> = <var:Y> \land <var:g2> = <var:Y> ^ <nat:2> \land <var:g3> = <var:Y> ^ <nat:3> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:s> = <var:Y> \land <var:g1> = <var:Y> \land <var:g2> = <var:Y> ^ <nat:2> \land <var:g3> = <var:Y> ^ <nat:3> \land <var:g0> = <nat:7> \} \\ <var:g1> := <var:g1> * <nat:7> ; \\ \{ <var:s> = <var:Y> \land <var:g1> = <nat:7> \times <var:Y> \land <var:g2> = <var:Y> ^ <nat:2> \land <var:g3> = <var:Y> ^ <nat:3> \land <var:g0> = <nat:7> \} \end{eqnarray} Allowing interpreting our code segment results in : \begin{eqnarray} <var:g3> := <var:g3> * <nat:1> ; \\ \{ <var:s> = <var:Y> \land <var:g1> = <nat:7> \times <var:Y> \land <var:g2> = <var:Y> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:Y> ^ <nat:3> \land <var:g0> = <nat:7> \} \\ <var:C> := <var:g3> \\ \{ <var:s> = <var:Y> \land <var:g1> = <nat:7> \times <var:Y> \land <var:g2> = <var:Y> ^ <nat:2> \land <var:g0> = <nat:7> \land <var:C> = <nat:1> \times <var:Y> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:g1> \\ \{ <var:s> = <var:Y> \land <var:g0> = <nat:7> \land <var:C> = <nat:1> \times <var:Y> ^ <nat:3> + <nat:7> \times <var:Y> \} \\ <var:C> := <var:C> + <var:g0> \\ \{ <var:s> = <var:Y> \land <var:C> = <nat:1> \times <var:Y> ^ <nat:3> + <nat:7> \times <var:Y> + <nat:7> \} \end{eqnarray} Given the above , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:s> = <var:Y> }} <var:g1> := <var:s> ; <var:g2> := <var:g1> * <var:s> ; <var:g3> := <var:g2> * <var:s> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:7> ; <var:g3> := <var:g3> * <nat:1> ; <var:C> := <var:g3> <var:C> := <var:C> + <var:g1> <var:C> := <var:C> + <var:g0> {{ <var:C> = <nat:1> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <var:Y> /\ <var:g2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <var:Y> /\ <var:g2> = <var:Y> ^ <nat:2> /\ <var:g3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <var:Y> /\ <var:g2> = <var:Y> ^ <nat:2> /\ <var:g3> = <var:Y> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <nat:7> * <var:Y> /\ <var:g2> = <var:Y> ^ <nat:2> /\ <var:g3> = <var:Y> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <nat:7> * <var:Y> /\ <var:g2> = <var:Y> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:Y> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g1> = <nat:7> * <var:Y> /\ <var:g2> = <var:Y> ^ <nat:2> /\ <var:g0> = <nat:7> /\ <var:C> = <nat:1> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:g0> = <nat:7> /\ <var:C> = <nat:1> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:C> = <nat:1> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 