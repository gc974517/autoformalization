\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:h> ; <var:L> := <var:n1> ; <var:L> := <var:L> + <var:n0> \end{verbatim} Given that we have $ <var:h> = <var:V> $ before executing the program then we see $ <var:L> = <nat:3> * <var:V> + <nat:1> $ when set of instructions has finished . \end{theorem} \begin{proof} The course of logic for this series of commands can be accomplished using typical Hoare logic . Advancing , we see \begin{verbatim} { <var:h> = <var:V> } <var:n0> := <nat:1> { <var:h> = <var:V> \land <var:n0> = <nat:1> } { <var:h> = <var:V> \land <var:n0> = <nat:1> } <var:n1> := <nat:3> { <var:h> = <var:V> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> } { <var:h> = <var:V> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> } <var:n1> := <var:n1> * <var:h> { <var:h> = <var:V> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \times <var:V> } { <var:h> = <var:V> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \times <var:V> } <var:L> := <var:n1> { <var:h> = <var:V> \land <var:n0> = <nat:1> \land <var:L> = <nat:3> \times <var:V> } { <var:h> = <var:V> \land <var:n0> = <nat:1> \land <var:L> = <nat:3> \times <var:V> } <var:L> := <var:L> + <var:n0{ <var:h> = <var:V> \land <var:L> = <nat:3> \times <var:V> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <var:n0> := <nat:1> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:h> ; <var:L> := <var:n1> ; <var:L> := <var:L> + <var:n0> {{ <var:L> = <nat:3> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:1> /\ <var:L> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:L> = <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 