\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:I> ; <var:V0> := <nat:7> ; <var:V1> := <var:V1> * <nat:7> ; <var:G> := <var:V1> <var:G> := <var:G> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:I> = <var:N> $ before executing this set of instructions it holds that $ <var:G> = <nat:7> * <var:N> + <nat:7> $ when series of commands finishes . \end{theorem} \begin{proof} The flow of logic for our list of instructions is evident using the following decorated segment of code . \begin{eqnarray} \{ <var:I> = <var:N> \} \\ <var:V1> := <var:I> ; \\ \{ <var:I> = <var:N> \land <var:V1> = <var:N> \} \\ <var:V0> := <nat:7> ; \\ \{ <var:I> = <var:N> \land <var:V1> = <var:N> \land <var:V0> = <nat:7> \} \\ <var:V1> := <var:V1> * <nat:7> ; \\ \{ <var:I> = <var:N> \land <var:V1> = <nat:7> * <var:N> \land <var:V0> = <nat:7> \} \\ <var:G> := <var:V1> \\ \{ <var:I> = <var:N> \land <var:V0> = <nat:7> \land <var:G> = <nat:7> * <var:N> \} \\ <var:G> := <var:G> + <var:V0> \\ \{ <var:I> = <var:N> \land <var:G> = <nat:7> * <var:N> + <nat:7> \} \end{eqnarray} Using Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:I> ; <var:V0> := <nat:7> ; <var:V1> := <var:V1> * <nat:7> ; <var:G> := <var:V1> <var:G> := <var:G> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:G> = <nat:7> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:V1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:V1> = <var:N> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:V1> = <nat:7> * <var:N> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:V0> = <nat:7> /\ <var:G> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:G> = <nat:7> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 