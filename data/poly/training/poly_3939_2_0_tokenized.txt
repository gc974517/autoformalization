\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:9> ; <var:d> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:r> = <var:b> $ prior to the execution of this code segment it holds that $ <var:d> = <nat:9> $ once list of commands is done . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:r> = <var:b> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:r> = <var:b> \land <var:I0> = <nat:9> \} \\ <var:d> := <var:I0> \\ \{ <var:r> = <var:b> \land <var:d> = <nat:9> \} \end{eqnarray} Advancing the execution of this series of instructions returns : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:d> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <def:poly> {{ <var:d> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:d> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 