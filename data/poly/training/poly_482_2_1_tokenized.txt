\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:8> ; <var:s> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assuming --- for every $ <var:Q> $ --- that we have $ <var:P> = <var:Q> $ before executing this list of instructions , it follows that $ <var:s> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is demonstrated with usual Hoare reasoning . Moving on , \begin{verbatim} { <var:P> = <var:Q> } <var:v0> := <nat:8> { <var:P> = <var:Q> \land <var:v0> = <nat:8> } { <var:P> = <var:Q> \land <var:v0> = <nat:8> } <var:s> := <var:v0{ <var:P> = <var:Q> \land <var:s> = <nat:8> } \end{verbatim} This is guaranteed through the assignment inference rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:8> ; <var:s> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:P> = <var:Q> }} <def:poly> {{ <var:s> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:s> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 