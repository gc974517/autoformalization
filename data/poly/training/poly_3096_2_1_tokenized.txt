\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:8> ; <var:k> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:J> = <var:I> $ --- with some positive numbers $ <var:I> $ --- ahead of interpreting the series of instructions it must be that we see $ <var:k> = <nat:8> $ after list of commands terminates . \end{theorem} \begin{proof} The proof of the set of commands is accomplished with Hoare reasoning . Stepping forward , \verb | { <var:J> = <var:I> } <var:u0> := <nat:8> { <var:J> = <var:I> \land <var:u0> = <nat:8> } | . Now , \verb | { <var:J> = <var:I> } <var:u0> := <nat:8> { <var:J> = <var:I> \land <var:u0> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:8> ; <var:k> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:J> = <var:I> }} <def:poly> {{ <var:k> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:k> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 