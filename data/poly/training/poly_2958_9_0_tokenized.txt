\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:3> ; <var:M1> := <nat:6> ; <var:M1> := <var:M1> * <var:W> ; <var:M2> := <nat:1> ; <var:M2> := <var:M2> * <var:W> ; <var:M2> := <var:M2> * <var:W> ; <var:p> := <var:M2> ; <var:p> := <var:p> + <var:M1> ; <var:p> := <var:p> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:W> = <var:P> $ ( for all natural numbers $ <var:P> $ ) before interpreting our list of commands then we see $ <var:p> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:6> \cdot <var:P> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is shown using usual Hoare logic . Considering the following commands found in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:P> \} & <var:M0> := <nat:3> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \} & <var:M1> := <nat:6> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \} & <var:M1> := <var:M1> * <var:W> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \} & <var:M2> := <nat:1> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:M2> = <nat:1> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:M2> = <nat:1> \} & <var:M2> := <var:M2> * <var:W> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:M2> = <nat:1> \cdot <var:P> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:M2> = <nat:1> \cdot <var:P> \} & <var:M2> := <var:M2> * <var:W> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:M2> = <nat:1> \cdot <var:P> ^ <nat:2> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:M2> = <nat:1> \cdot <var:P> ^ <nat:2> \} & <var:p> := <var:M2> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:p> = <nat:1> \cdot <var:P> ^ <nat:2> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:M1> = <nat:6> \cdot <var:P> \land <var:p> = <nat:1> \cdot <var:P> ^ <nat:2> \} & <var:p> := <var:p> + <var:M1> & \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:p> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:6> \cdot <var:P> \} \\ \{ <var:W> = <var:P> \land <var:M0> = <nat:3> \land <var:p> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:6> \cdot <var:P> \} & <var:p> := <var:p> + <var:M0& \{ <var:W> = <var:P> \land <var:p> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:6> \cdot <var:P> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:3> ; <var:M1> := <nat:6> ; <var:M1> := <var:M1> * <var:W> ; <var:M2> := <nat:1> ; <var:M2> := <var:M2> * <var:W> ; <var:M2> := <var:M2> * <var:W> ; <var:p> := <var:M2> ; <var:p> := <var:p> + <var:M1> ; <var:p> := <var:p> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:W> = <var:P> }} <def:poly> {{ <var:p> = <nat:1> * <var:P> ^ <nat:2> + <nat:6> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:6> * <var:P> /\ <var:M2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:6> * <var:P> /\ <var:M2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:6> * <var:P> /\ <var:M2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:6> * <var:P> /\ <var:p> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:M0> = <nat:3> /\ <var:p> = <nat:1> * <var:P> ^ <nat:2> + <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:p> = <nat:1> * <var:P> ^ <nat:2> + <nat:6> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 