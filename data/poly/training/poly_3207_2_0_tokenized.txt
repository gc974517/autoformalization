\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:2> ; <var:e> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:g> = <var:F> $ ahead of the evaluation of our set of commands then $ <var:e> = <nat:2> $ after set of commands exits . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:g> = <var:F> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:g> = <var:F> \land <var:s0> = <nat:2> \} \\ <var:e> := <var:s0> \\ \{ <var:g> = <var:F> \land <var:e> = <nat:2> \} \end{eqnarray} Considering the above , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:e> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:g> = <var:F> }} <def:poly> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 