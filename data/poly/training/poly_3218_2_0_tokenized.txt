\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:8> ; <var:p> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:J> = <var:l> $ --- for positive numbers $ <var:l> $ --- before the execution of our code then $ <var:p> = <nat:8> $ . \end{theorem} \begin{proof} The proof of our set of instructions is accomplished with standard Hoare techniques . Further , we have the assignment code \verb | <var:T0> := <nat:8> ; | . This command transfers $ \{ <var:J> = <var:l> \} $ to the condition $ \{ <var:J> = <var:l> \land <var:T0> = <nat:8> \} $ . After , we have the variable assignmet statement \verb | <var:p> := <var:T0> | . This statement takes the condition $ \{ <var:J> = <var:l> \land <var:T0> = <nat:8> \} $ as $ \{ <var:J> = <var:l> \land <var:p> = <nat:8> \} $ . This is given by the assignment inference rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:8> ; <var:p> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:J> = <var:l> }} <def:poly> {{ <var:p> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:l> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:l> /\ <var:p> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 