\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:w1> := <var:B> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:7> ; <var:z> := <var:w1> <var:z> := <var:z> + <var:w0> \end{verbatim} Allowing , given all positive integer coefficients $ <var:c> $ , $ <var:B> = <var:c> $ ahead of executing our set of instructions it holds that we see $ <var:z> = <nat:7> \times <var:c> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is done by Hoare reasoning . Taking another step toward the subsequent statement in our list of instructions , we have the variable assignmet statement giving $ <var:B> $ to $ <var:w1>$ . This line forwards the condition $ \{ <var:B> = <var:c> \} $ to the condition $ \{ <var:B> = <var:c> \land <var:w1> = <var:c> \} $ . This is shown with the assignment rule obtained from Hoare reasoning . Advancing , we have the environment update code assigning $ <nat:1> $ as $ <var:w0>$ . This statement takes $ \{ <var:B> = <var:c> \land <var:w1> = <var:c> \} $ as the condition $ \{ <var:B> = <var:c> \land <var:w1> = <var:c> \land <var:w0> = <nat:1> \} $ . Observing the following piece of code contained in our code segment , the assignment line giving $ <var:w1> * <nat:7> $ as $ <var:w1>$ . This redefines the condition $ \{ <var:B> = <var:c> \land <var:w1> = <var:c> \land <var:w0> = <nat:1> \} $ toward the postcondition $ \{ <var:B> = <var:c> \land <var:w1> = <nat:7> \times <var:c> \land <var:w0> = <nat:1> \} $ . This is sound with the assignment inference rule defined in Hoare techniques . Taking another step toward the proceeding line found in the code , we see the environment update statement yielding $ <var:w1$ into $ <var:z>$ . This command redefines $ \{ <var:B> = <var:c> \land <var:w1> = <nat:7> \times <var:c> \land <var:w0> = <nat:1> \} $ into the postcondition $ \{ <var:B> = <var:c> \land <var:w0> = <nat:1> \land <var:z> = <nat:7> \times <var:c> \} $ . Keeping momentum , we see the binding code \verb | <var:z> := <var:z> + <var:w0> | . This advances the precondition $ \{ <var:B> = <var:c> \land <var:w0> = <nat:1> \land <var:z> = <nat:7> \times <var:c> \} $ to the postcondition $ \{ <var:B> = <var:c> \land <var:z> = <nat:7> \times <var:c> + <nat:1> \} $ . This is ensured with the assignment inference rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:B> = <var:c> }} <var:w1> := <var:B> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:7> ; <var:z> := <var:w1> <var:z> := <var:z> + <var:w0> {{ <var:z> = <nat:7> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:w1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:w1> = <var:c> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:w1> = <nat:7> * <var:c> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:w0> = <nat:1> /\ <var:z> = <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:z> = <nat:7> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 