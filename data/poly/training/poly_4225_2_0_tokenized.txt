\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:4> ; <var:B> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:w> = <var:S> $ ahead of the evaluation of this series of instructions it holds that we have $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the set of commands is demonstrated with Hoare reasoning . Focusing on the upcoming line found in our program , we have \verb | { <var:w> = <var:S> } <var:s0> := <nat:4> { <var:w> = <var:S> \land <var:s0> = <nat:4> } | . This is shown using the assignment scheme in Hoare logic . Keeping momentum , \verb | { <var:w> = <var:S> } <var:s0> := <nat:4> { <var:w> = <var:S> \land <var:s0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:B> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:w> = <var:S> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 