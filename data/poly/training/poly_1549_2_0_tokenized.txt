\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:3> ; <var:Z> := <var:f0> \end{verbatim} Given that $ <var:V> = <var:q> $ prior to interpreting the set of commands it must be that we have $ <var:Z> = <nat:3> $ once segment of code has finished . \end{theorem} \begin{proof} The proof of the set of instructions can be seen using standard Hoare reasoning . Advancing on , \[ \begin{tabular} {rcl} \{ <var:V> = <var:q> \} & <var:f0> := <nat:3> & \{ <var:V> = <var:q> \land <var:f0> = <nat:3> \} \\ \{ <var:V> = <var:q> \land <var:f0> = <nat:3> \} & <var:Z> := <var:f0& \{ <var:V> = <var:q> \land <var:Z> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:V> = <var:q> }} <var:f0> := <nat:3> ; <var:Z> := <var:f0> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 