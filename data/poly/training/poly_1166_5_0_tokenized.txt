\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:1> ; <var:k1> := <nat:3> ; <var:k1> := <var:k1> * <var:L> ; <var:b> := <var:k1> ; <var:b> := <var:b> + <var:k0> \end{verbatim} Assume that $ <var:L> = <var:K> $ prior to running our set of instructions , then $ <var:b> = <nat:3> \cdot <var:K> + <nat:1> $ once code has finished executing . \end{theorem} \begin{proof} The flow of logic for this code is demonstrated with Hoare techniques . Advancing to the next step , we see \begin{eqnarray} \{ <var:L> = <var:K> \} \, <var:k0> := <nat:1> \, \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \} \\ \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \} \, <var:k1> := <nat:3> \, \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \land <var:k1> = <nat:3> \} \\ \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \land <var:k1> = <nat:3> \} \, <var:k1> := <var:k1> * <var:L> \, \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \land <var:k1> = <nat:3> \cdot <var:K> \} \\ \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \land <var:k1> = <nat:3> \cdot <var:K> \} \, <var:b> := <var:k1> \, \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \land <var:b> = <nat:3> \cdot <var:K> \} \\ \{ <var:L> = <var:K> \land <var:k0> = <nat:1> \land <var:b> = <nat:3> \cdot <var:K> \} \, <var:b> := <var:b> + <var:k0\, \{ <var:L> = <var:K> \land <var:b> = <nat:3> \cdot <var:K> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:L> = <var:K> }} <var:k0> := <nat:1> ; <var:k1> := <nat:3> ; <var:k1> := <var:k1> * <var:L> ; <var:b> := <var:k1> ; <var:b> := <var:b> + <var:k0> {{ <var:b> = <nat:3> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:k0> = <nat:1> /\ <var:b> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:b> = <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 