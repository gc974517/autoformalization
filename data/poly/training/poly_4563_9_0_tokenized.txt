\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:c> ; <var:o2> := <nat:7> ; <var:o2> := <var:o2> * <var:c> ; <var:o2> := <var:o2> * <var:c> ; <var:X> := <var:o2> ; <var:X> := <var:X> + <var:o1> ; <var:X> := <var:X> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:c> = <var:f> $ ( for any positive coefficients $ <var:f> $ ) ahead of the evaluation of our list of commands , then we see $ <var:X> = <nat:7> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:3> $ once code segment has executed . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is evident by Hoare logic . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:f> \} & <var:o0> := <nat:3> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \} \\ \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \} & <var:o1> := <nat:3> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \\ \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} & <var:o1> := <var:o1> * <var:c> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \} \\ \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \} & <var:o2> := <nat:7> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \land <var:o2> = <nat:7> \} \\ \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \land <var:o2> = <nat:7> \} & <var:o2> := <var:o2> * <var:c> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \land <var:o2> = <nat:7> * <var:f> \} \\ \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \land <var:o2> = <nat:7> * <var:f> \} & <var:o2> := <var:o2> * <var:c> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:f> \land <var:o2> = <nat:7> * <var:f> ^ <nat:2> \} \end{tabular} This is shown to be logically sound using the environment update rule of Hoare techniques . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:f> \} & <var:o0> := <nat:3> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \} \\ \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \} & <var:o1> := <nat:3> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \end{tabular} This is shown through the variable binding rule defined in usual Hoare logic . Looking at the proceeding bit of code in our series of commands , \[ \begin{tabular} {rcl} \{ <var:c> = <var:f> \} & <var:o0> := <nat:3> & \{ <var:c> = <var:f> \land <var:o0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:c> ; <var:o2> := <nat:7> ; <var:o2> := <var:o2> * <var:c> ; <var:o2> := <var:o2> * <var:c> ; <var:X> := <var:o2> ; <var:X> := <var:X> + <var:o1> ; <var:X> := <var:X> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:c> = <var:f> }} <def:poly> {{ <var:X> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:f> /\ <var:o2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:f> /\ <var:o2> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:f> /\ <var:o2> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:f> /\ <var:X> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:o0> = <nat:3> /\ <var:X> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:X> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 