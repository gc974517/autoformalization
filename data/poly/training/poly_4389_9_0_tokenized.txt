\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:D> ; <var:x2> := <nat:2> ; <var:x2> := <var:x2> * <var:D> ; <var:x2> := <var:x2> * <var:D> ; <var:e> := <var:x2> ; <var:e> := <var:e> + <var:x1> ; <var:e> := <var:e> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allow , for $ <var:Y> $ , $ <var:D> = <var:Y> $ before evaluating our series of commands it must be that we have $ <var:e> = <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:9> \cdot <var:Y> + <nat:1> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:D> = <var:Y> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \} \\ <var:x1> := <nat:9> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \} \\ <var:x1> := <var:x1> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> * <var:Y> \} \end{eqnarray} Continuing the execution of the list of instructions yields : \begin{eqnarray} <var:x2> := <nat:2> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> * <var:Y> \land <var:x2> = <nat:2> \} \\ <var:x2> := <var:x2> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> * <var:Y> \land <var:x2> = <nat:2> * <var:Y> \} \\ <var:x2> := <var:x2> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> * <var:Y> \land <var:x2> = <nat:2> * <var:Y> ^ <nat:2> \} \\ <var:e> := <var:x2> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> * <var:Y> \land <var:e> = <nat:2> * <var:Y> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:x1> ; \\ \{ <var:D> = <var:Y> \land <var:x0> = <nat:1> \land <var:e> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> \} \\ <var:e> := <var:e> + <var:x0> \\ \{ <var:D> = <var:Y> \land <var:e> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:1> \} \end{eqnarray} Given the preceding argument , our code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:D> ; <var:x2> := <nat:2> ; <var:x2> := <var:x2> * <var:D> ; <var:x2> := <var:x2> * <var:D> ; <var:e> := <var:x2> ; <var:e> := <var:e> + <var:x1> ; <var:e> := <var:e> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:D> = <var:Y> }} <def:poly> {{ <var:e> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:Y> /\ <var:x2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:Y> /\ <var:x2> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:Y> /\ <var:x2> = <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:Y> /\ <var:e> = <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:x0> = <nat:1> /\ <var:e> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:e> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 