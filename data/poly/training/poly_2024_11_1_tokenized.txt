\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:l> ; <var:Q2> := <var:Q1> * <var:l> ; <var:Q3> := <var:Q2> * <var:l> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q2> := <var:Q2> * <nat:7> ; <var:Q3> := <var:Q3> * <nat:5> ; <var:P> := <var:Q3> <var:P> := <var:P> + <var:Q2> <var:P> := <var:P> + <var:Q1> <var:P> := <var:P> + <var:Q0> \end{verbatim} Given it to hold that $ <var:l> = <var:M> $ , letting whole numbers $ <var:M> $ , before the evaluation of the program , it holds that we see $ <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:M> \} \\ <var:Q1> := <var:l> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <var:M> \} \\ <var:Q2> := <var:Q1> * <var:l> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:l> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \} \\ <var:Q0> := <nat:5> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:5> \} \\ <var:Q1> := <var:Q1> * <nat:9> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <nat:9> * <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:5> \} \\ <var:Q2> := <var:Q2> * <nat:7> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <nat:9> * <var:M> \land <var:Q2> = <nat:7> * <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:5> \} \\ <var:Q3> := <var:Q3> * <nat:5> ; \\ \{ <var:l> = <var:M> \land <var:Q1> = <nat:9> * <var:M> \land <var:Q2> = <nat:7> * <var:M> ^ <nat:2> \land <var:Q3> = <nat:5> * <var:M> ^ <nat:3> \land <var:Q0> = <nat:5> \} \\ <var:P> := <var:Q3> \\ \{ <var:l> = <var:M> \land <var:Q1> = <nat:9> * <var:M> \land <var:Q2> = <nat:7> * <var:M> ^ <nat:2> \land <var:Q0> = <nat:5> \land <var:P> = <nat:5> * <var:M> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:Q2> \\ \{ <var:l> = <var:M> \land <var:Q1> = <nat:9> * <var:M> \land <var:Q0> = <nat:5> \land <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:Q1> \\ \{ <var:l> = <var:M> \land <var:Q0> = <nat:5> \land <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:9> * <var:M> \} \\ <var:P> := <var:P> + <var:Q0> \\ \{ <var:l> = <var:M> \land <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:5> \} \end{eqnarray} The application of Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:l> = <var:M> }} <var:Q1> := <var:l> ; <var:Q2> := <var:Q1> * <var:l> ; <var:Q3> := <var:Q2> * <var:l> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q2> := <var:Q2> * <nat:7> ; <var:Q3> := <var:Q3> * <nat:5> ; <var:P> := <var:Q3> <var:P> := <var:P> + <var:Q2> <var:P> := <var:P> + <var:Q1> <var:P> := <var:P> + <var:Q0> {{ <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <nat:9> * <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <nat:9> * <var:M> /\ <var:Q2> = <nat:7> * <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <nat:9> * <var:M> /\ <var:Q2> = <nat:7> * <var:M> ^ <nat:2> /\ <var:Q3> = <nat:5> * <var:M> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <nat:9> * <var:M> /\ <var:Q2> = <nat:7> * <var:M> ^ <nat:2> /\ <var:Q0> = <nat:5> /\ <var:P> = <nat:5> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q1> = <nat:9> * <var:M> /\ <var:Q0> = <nat:5> /\ <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:Q0> = <nat:5> /\ <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:P> = <nat:5> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 