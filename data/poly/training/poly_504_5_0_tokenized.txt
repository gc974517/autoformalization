\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:S> ; <var:H> := <var:a1> ; <var:H> := <var:H> + <var:a0> \end{verbatim} Assuming $ <var:S> = <var:x> $ ahead of executing our set of instructions it follows that we see $ <var:H> = <nat:7> \cdot <var:x> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:S> = <var:x> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:S> = <var:x> \land <var:a0> = <nat:2> \} \\ <var:a1> := <nat:7> ; \\ \{ <var:S> = <var:x> \land <var:a0> = <nat:2> \land <var:a1> = <nat:7> \} \\ <var:a1> := <var:a1> * <var:S> ; \\ \{ <var:S> = <var:x> \land <var:a0> = <nat:2> \land <var:a1> = <nat:7> \cdot <var:x> \} \\ <var:H> := <var:a1> ; \\ \{ <var:S> = <var:x> \land <var:a0> = <nat:2> \land <var:H> = <nat:7> \cdot <var:x> \} \\ <var:H> := <var:H> + <var:a0> \\ \{ <var:S> = <var:x> \land <var:H> = <nat:7> \cdot <var:x> + <nat:2> \} \end{eqnarray} Thusly , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:S> = <var:x> }} <var:a0> := <nat:2> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:S> ; <var:H> := <var:a1> ; <var:H> := <var:H> + <var:a0> {{ <var:H> = <nat:7> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:a0> = <nat:2> /\ <var:H> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:H> = <nat:7> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 