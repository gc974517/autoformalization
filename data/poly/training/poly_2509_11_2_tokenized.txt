\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:2> + <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:2> + <var:G> * <var:h> ; <var:G> := <var:G> * <var:h> ; <var:G> := <var:G> * <var:h> ; <var:G> := <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:h> = <var:b> $ before executing the list of commands it must be that we see $ <var:G> = <nat:1> \times <var:b> ^ <nat:10> + <nat:1> \times <var:b> ^ <nat:9> + <nat:2> \times <var:b> ^ <nat:8> + <nat:1> \times <var:b> ^ <nat:7> + <nat:1> \times <var:b> ^ <nat:6> + <nat:2> \times <var:b> ^ <nat:5> + <nat:1> \times <var:b> + <nat:1> $ after code segment executes . \end{theorem} \begin{proof} The method of proof for this segment of code is demonstrated through the following decorated set of instructions . \begin{eqnarray} \{ <var:h> = <var:b> \} \\ <var:G> := <nat:1> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> + <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:2> \} \\ <var:G> := <nat:1> + <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:2> \} \\ <var:G> := <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + \} \\ <var:G> := <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + \} \\ <var:G> := <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:8> + <nat:1> \cdot <var:b> ^ <nat:7> + <nat:2> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + \} \\ <var:G> := <nat:1> + <var:G> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:9> + <nat:1> \cdot <var:b> ^ <nat:8> + <nat:2> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:h> \\ \{ <var:h> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> ^ <nat:10> + <nat:1> \cdot <var:b> ^ <nat:9> + <nat:2> \cdot <var:b> ^ <nat:8> + <nat:1> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> + <nat:1> \} \end{eqnarray} Applying standard Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:1> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:2> + <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:2> + <var:G> * <var:h> ; <var:G> := <var:G> * <var:h> ; <var:G> := <var:G> * <var:h> ; <var:G> := <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> ; <var:G> := <nat:1> + <var:G> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:h> = <var:b> }} <def:poly> {{ <var:G> = <nat:1> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:G> = <nat:1> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 