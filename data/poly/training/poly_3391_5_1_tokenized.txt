\begin{document} \begin{theorem} We define the following set of commands such that \begin{verbatim} <var:U1> := <var:d> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:3> ; <var:s> := <var:U1> <var:s> := <var:s> + <var:U0> \end{verbatim} Assume $ <var:d> = <var:C> $ ahead of the execution of the series of commands then we have $ <var:s> = <nat:3> * <var:C> + <nat:5> $ when list of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be accomplished through standard Hoare reasoning . Advancing to the following statements contained in our list of commands , \begin{verbatim} { <var:d> = <var:C> } <var:U1> := <var:d> { <var:d> = <var:C> \land <var:U1> = <var:C> } { <var:d> = <var:C> \land <var:U1> = <var:C> } <var:U0> := <nat:5> { <var:d> = <var:C> \land <var:U1> = <var:C> \land <var:U0> = <nat:5> } { <var:d> = <var:C> \land <var:U1> = <var:C> \land <var:U0> = <nat:5> } <var:U1> := <var:U1> * <nat:3> { <var:d> = <var:C> \land <var:U1> = <nat:3> * <var:C> \land <var:U0> = <nat:5> } \end{verbatim} This is sound with the variable update rule defined by Hoare techniques . Jumping to the following statement seen in our program , \begin{verbatim} { <var:d> = <var:C> } <var:U1> := <var:d> { <var:d> = <var:C> \land <var:U1> = <var:C> } \end{verbatim} This is guaranteed through the variable binding law given in Hoare techniques . Considering the proceeding bit of code in our code , \begin{verbatim} { <var:d> = <var:C> } <var:U1> := <var:d> { <var:d> = <var:C> \land <var:U1> = <var:C> } \end{verbatim} This is shown with the binding law found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:d> = <var:C> }} <var:U1> := <var:d> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:3> ; <var:s> := <var:U1> <var:s> := <var:s> + <var:U0> {{ <var:s> = <nat:3> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:U1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:U1> = <var:C> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:U1> = <nat:3> * <var:C> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:U0> = <nat:5> /\ <var:s> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:s> = <nat:3> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 