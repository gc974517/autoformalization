\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:8> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:F> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:F> ; <var:p2> := <var:p2> * <var:F> ; <var:v> := <var:p2> ; <var:v> := <var:v> + <var:p1> ; <var:v> := <var:v> + <var:p0> \end{verbatim} Given it to hold that $ <var:F> = <var:K> $ prior to the execution of the list of instructions , it follows that we have $ <var:v> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:8> \cdot <var:K> + <nat:8> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives us : \begin{eqnarray} \{ <var:F> = <var:K> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \} \\ <var:p1> := <nat:8> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:p1> = <nat:8> \} \\ <var:p1> := <var:p1> * <var:F> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:p1> = <nat:8> \times <var:K> \} \\ <var:p2> := <nat:1> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:p1> = <nat:8> \times <var:K> \land <var:p2> = <nat:1> \} \end{eqnarray} Furthering running this list of instructions gives : \begin{eqnarray} <var:p2> := <var:p2> * <var:F> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:p1> = <nat:8> \times <var:K> \land <var:p2> = <nat:1> \times <var:K> \} \\ <var:p2> := <var:p2> * <var:F> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:p1> = <nat:8> \times <var:K> \land <var:p2> = <nat:1> \times <var:K> ^ <nat:2> \} \\ <var:v> := <var:p2> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:p1> = <nat:8> \times <var:K> \land <var:v> = <nat:1> \times <var:K> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:p1> ; \\ \{ <var:F> = <var:K> \land <var:p0> = <nat:8> \land <var:v> = <nat:1> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> \} \\ <var:v> := <var:v> + <var:p0> \\ \{ <var:F> = <var:K> \land <var:v> = <nat:1> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:8> \} \end{eqnarray} Continuing running the list of commands yields : \begin{eqnarray} \end{eqnarray} Considering the above , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <var:p0> := <nat:8> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:F> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:F> ; <var:p2> := <var:p2> * <var:F> ; <var:v> := <var:p2> ; <var:v> := <var:v> + <var:p1> ; <var:v> := <var:v> + <var:p0> {{ <var:v> = <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:8> * <var:K> /\ <var:p2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:8> * <var:K> /\ <var:p2> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:8> * <var:K> /\ <var:p2> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:8> * <var:K> /\ <var:v> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p0> = <nat:8> /\ <var:v> = <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:v> = <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 