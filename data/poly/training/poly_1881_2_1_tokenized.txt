\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:6> ; <var:q> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Assuming that we have $ <var:v> = <var:t> $ --- given $ <var:t> \in \mathbb{Z}^+ $ --- before the execution of our set of commands then $ <var:q> = <nat:6> $ . \end{theorem} \begin{proof} Let this decorated series of commands . \begin{eqnarray} \{ <var:v> = <var:t> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:v> = <var:t> \land <var:g0> = <nat:6> \} \\ <var:q> := <var:g0> \\ \{ <var:v> = <var:t> \land <var:q> = <nat:6> \} \end{eqnarray} The application of typical Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:q> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <def:poly> {{ <var:q> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:q> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 