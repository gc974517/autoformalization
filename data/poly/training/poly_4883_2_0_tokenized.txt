\begin{document} \begin{theorem} Let the following code in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:3> ; <var:e> := <var:A0> \end{verbatim} Assume that $ <var:K> = <var:X> $ ( for all positive coefficients $ <var:X> $ ) ahead of the execution of the code , it holds that $ <var:e> = <nat:3> $ . \end{theorem} \begin{proof} The argument for our set of instructions is clear using standard Hoare techniques . Focusing on the upcoming line of code seen in our code segment , the binding code assigning $ <nat:3> $ into $ <var:A0>$ . This statement takes the precondition $ \{ <var:K> = <var:X> \} $ to the condition $ \{ <var:K> = <var:X> \land <var:A0> = <nat:3> \} $ . Going forward , we have the variable assignmet line \verb | <var:e> := <var:A0> | . This code takes the precondition $ \{ <var:K> = <var:X> \land <var:A0> = <nat:3> \} $ toward the postcondition $ \{ <var:K> = <var:X> \land <var:e> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <var:A0> := <nat:3> ; <var:e> := <var:A0> {{ <var:e> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:e> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 