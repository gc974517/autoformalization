\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:3> ; <var:T> := <var:d0> \end{verbatim} Assuming that $ <var:B> = <var:r> $ ( given positive numbers $ <var:r> $ ) ahead of executing the program it holds that we have $ <var:T> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the program can be given using typical Hoare techniques . Keeping momentum , \verb | { <var:B> = <var:r> } <var:d0> := <nat:3> { <var:B> = <var:r> \land <var:d0> = <nat:3> } | and \verb | { <var:B> = <var:r> \land <var:d0> = <nat:3> } <var:T> := <var:d0{ <var:B> = <var:r> \land <var:T> = <nat:3> } | . This is deduced using the environment update scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:B> = <var:r> }} <var:d0> := <nat:3> ; <var:T> := <var:d0> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 