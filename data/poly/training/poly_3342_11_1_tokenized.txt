\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as \begin{verbatim} <var:k1> := <var:f> ; <var:k2> := <var:k1> * <var:f> ; <var:k3> := <var:k2> * <var:f> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:6> ; <var:k3> := <var:k3> * <nat:1> ; <var:z> := <var:k3> <var:z> := <var:z> + <var:k2> <var:z> := <var:z> + <var:k1> <var:z> := <var:z> + <var:k0> \end{verbatim} Given it to be that $ <var:f> = <var:o> $ , for all positive integers $ <var:o> $ , prior to interpreting the series of instructions it must be that $ <var:z> = <nat:1> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be done through usual Hoare reasoning . Keeping momentum , we see the variable binding code \verb | <var:k1> := <var:f> ; | . This forwards the precondition $ \{ <var:f> = <var:o> \} $ as the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \} $ . Advancing to the next statement contained in the segment of code , the variable binding command assigning $ <var:k1> * <var:f> $ toward $ <var:k2>$ . This moves $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \} $ into $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \land <var:k2> = <var:o> ^ <nat:2> \} $ . Moving on to the next step , we see the variable assignmet code \verb | <var:k3> := <var:k2> * <var:f> ; | . This command transfers the precondition $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \land <var:k2> = <var:o> ^ <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \land <var:k2> = <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \} $ . Advancing to the next step , we see the variable assignmet line \verb | <var:k0> := <nat:9> ; | . This redefines $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \land <var:k2> = <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \} $ into the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \land <var:k2> = <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . Focusing on the following line seen in our segment of code , the assignment code giving $ <var:k1> * <nat:9> $ as $ <var:k1>$ . This transfers the precondition $ \{ <var:f> = <var:o> \land <var:k1> = <var:o> \land <var:k2> = <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ toward the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . This is rigorously given through the assignment inference rule obtained from Hoare reasoning . Moving forward , the variable binding statement yielding $ <var:k2> * <nat:6> $ to $ <var:k2>$ . This transfers $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ to the condition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . Observing the subsequent line of code seen in the code segment , the variable binding command \verb | <var:k3> := <var:k3> * <nat:1> ; | . This redefines the condition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:k3> = <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ as the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . This is rigorously given through the assignment rule defined by standard Hoare techniques . Moving on to the next step , we have the variable update statement letting $ <var:k3$ toward $ <var:z>$ . This line takes $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:o> ^ <nat:3> \land <var:k0> = <nat:9> \} $ toward the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:k0> = <nat:9> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> \} $ . Observing the subsequent piece of code found in our code , we see the environment update command \verb | <var:z> := <var:z> + <var:k2> | . This takes the precondition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:k0> = <nat:9> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> \} $ to the postcondition $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k0> = <nat:9> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> \} $ . Moving on , we have the environment update command binding $ <var:z> + <var:k1$ into $ <var:z>$ . This line moves $ \{ <var:f> = <var:o> \land <var:k1> = <nat:9> \cdot <var:o> \land <var:k0> = <nat:9> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> \} $ as the condition $ \{ <var:f> = <var:o> \land <var:k0> = <nat:9> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> \} $ . Observing the next line of code found in the list of commands , we see the variable assignmet statement letting $ <var:z> + <var:k0$ toward $ <var:z>$ . This code takes the condition $ \{ <var:f> = <var:o> \land <var:k0> = <nat:9> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> \} $ toward the postcondition $ \{ <var:f> = <var:o> \land <var:z> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> + <nat:9> \} $ . This is guaranteed through the assignment law obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:f> = <var:o> }} <var:k1> := <var:f> ; <var:k2> := <var:k1> * <var:f> ; <var:k3> := <var:k2> * <var:f> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:6> ; <var:k3> := <var:k3> * <nat:1> ; <var:z> := <var:k3> <var:z> := <var:z> + <var:k2> <var:z> := <var:z> + <var:k1> <var:z> := <var:z> + <var:k0> {{ <var:z> = <nat:1> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <var:o> /\ <var:k2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <var:o> /\ <var:k2> = <var:o> ^ <nat:2> /\ <var:k3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <var:o> /\ <var:k2> = <var:o> ^ <nat:2> /\ <var:k3> = <var:o> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <nat:9> * <var:o> /\ <var:k2> = <var:o> ^ <nat:2> /\ <var:k3> = <var:o> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <nat:9> * <var:o> /\ <var:k2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:k3> = <var:o> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <nat:9> * <var:o> /\ <var:k2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <nat:9> * <var:o> /\ <var:k2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:k0> = <nat:9> /\ <var:z> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k1> = <nat:9> * <var:o> /\ <var:k0> = <nat:9> /\ <var:z> = <nat:1> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:k0> = <nat:9> /\ <var:z> = <nat:1> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:z> = <nat:1> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 