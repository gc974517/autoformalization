\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:W> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:1> ; <var:b> := <var:g1> <var:b> := <var:b> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:W> = <var:V> $ assuming some whole numbers $ <var:V> $ before the execution of our set of instructions it holds that we see $ <var:b> = <nat:1> \cdot <var:V> + <nat:9> $ after set of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be seen with usual Hoare techniques . Keeping momentum , we see the binding command assigning $ <var:W> $ to $ <var:g1>$ . This command moves the condition $ \{ <var:W> = <var:V> \} $ as the postcondition $ \{ <var:W> = <var:V> \land <var:g1> = <var:V> \} $ . Advancing , we see the variable update code \verb | <var:g0> := <nat:9> ; | . This code advances the condition $ \{ <var:W> = <var:V> \land <var:g1> = <var:V> \} $ toward the postcondition $ \{ <var:W> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:9> \} $ . This is rigorously given with the assignment law of Hoare logic . Moving forward to the following line of code seen in our series of commands , we see the binding code yielding $ <var:g1> * <nat:1> $ into $ <var:g1>$ . This advances $ \{ <var:W> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:9> \} $ as the condition $ \{ <var:W> = <var:V> \land <var:g1> = <nat:1> \times <var:V> \land <var:g0> = <nat:9> \} $ . This is shown to be logically sound through the assignment inference rule given by Hoare techniques . Next , the variable assignmet line \verb | <var:b> := <var:g1> | . This command redefines the condition $ \{ <var:W> = <var:V> \land <var:g1> = <nat:1> \times <var:V> \land <var:g0> = <nat:9> \} $ into the condition $ \{ <var:W> = <var:V> \land <var:g0> = <nat:9> \land <var:b> = <nat:1> \times <var:V> \} $ . Further , the binding statement \verb | <var:b> := <var:b> + <var:g0> | . This redefines $ \{ <var:W> = <var:V> \land <var:g0> = <nat:9> \land <var:b> = <nat:1> \times <var:V> \} $ toward the postcondition $ \{ <var:W> = <var:V> \land <var:b> = <nat:1> \times <var:V> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:W> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:1> ; <var:b> := <var:g1> <var:b> := <var:b> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <def:poly> {{ <var:b> = <nat:1> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:g1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:g1> = <var:V> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:g1> = <nat:1> * <var:V> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:g0> = <nat:9> /\ <var:b> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:b> = <nat:1> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 