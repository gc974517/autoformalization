\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:5> ; <var:N1> := <nat:9> ; <var:N1> := <var:N1> * <var:n> ; <var:N2> := <nat:8> ; <var:N2> := <var:N2> * <var:n> ; <var:N2> := <var:N2> * <var:n> ; <var:r> := <var:N2> ; <var:r> := <var:r> + <var:N1> ; <var:r> := <var:r> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Given that we have $ <var:n> = <var:z> $ , letting positive integers $ <var:z> $ , prior to the evaluation of the code segment , it holds that we have $ <var:r> = <nat:8> \times <var:z> ^ <nat:2> + <nat:9> \times <var:z> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be seen through usual Hoare techniques . Jumping to the upcoming bits of codecontained in our series of commands , \verb | { <var:n> = <var:z> } <var:N0> := <nat:5> { <var:n> = <var:z> \land <var:N0> = <nat:5> } | , \verb | { <var:n> = <var:z> \land <var:N0> = <nat:5> } <var:N1> := <nat:9> { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> } | , \verb | { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> } <var:N1> := <var:N1> * <var:n> { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> } | , \verb | { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> } <var:N2> := <nat:8> { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> \land <var:N2> = <nat:8> } | , \verb | { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> \land <var:N2> = <nat:8> } <var:N2> := <var:N2> * <var:n> { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> \land <var:N2> = <nat:8> \times <var:z> } | and \verb | { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> \land <var:N2> = <nat:8> \times <var:z> } <var:N2> := <var:N2> * <var:n> { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> \times <var:z> \land <var:N2> = <nat:8> \times <var:z> ^ <nat:2> } | . This is guaranteed through the binding rule obtained from standard Hoare reasoning . Now , we have \verb | { <var:n> = <var:z> } <var:N0> := <nat:5> { <var:n> = <var:z> \land <var:N0> = <nat:5> } | and \verb | { <var:n> = <var:z> \land <var:N0> = <nat:5> } <var:N1> := <nat:9> { <var:n> = <var:z> \land <var:N0> = <nat:5> \land <var:N1> = <nat:9> } | . Stepping through , \verb | { <var:n> = <var:z> } <var:N0> := <nat:5> { <var:n> = <var:z> \land <var:N0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N0> := <nat:5> ; <var:N1> := <nat:9> ; <var:N1> := <var:N1> * <var:n> ; <var:N2> := <nat:8> ; <var:N2> := <var:N2> * <var:n> ; <var:N2> := <var:N2> * <var:n> ; <var:r> := <var:N2> ; <var:r> := <var:r> + <var:N1> ; <var:r> := <var:r> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:n> = <var:z> }} <def:poly> {{ <var:r> = <nat:8> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:9> * <var:z> /\ <var:N2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:9> * <var:z> /\ <var:N2> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:9> * <var:z> /\ <var:N2> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:9> * <var:z> /\ <var:r> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:N0> = <nat:5> /\ <var:r> = <nat:8> * <var:z> ^ <nat:2> + <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:r> = <nat:8> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 