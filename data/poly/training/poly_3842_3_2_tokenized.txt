\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <nat:1> + <var:N> * <var:A> ; <var:N> := <nat:3> + <var:N> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Allow for natural numbers $ <var:B> $ it to be that $ <var:A> = <var:B> $ before evaluating this program it must be that we see $ <var:N> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:3> $ when series of instructions executes . \end{theorem} \begin{proof} Proving correctness for the set of commands can be seen by Hoare reasoning . Stepping through , we have the variable update command \verb | <var:N> := <nat:4> ; | . This statement forwards the precondition $ \{ <var:A> = <var:B> \} $ into the postcondition $ \{ <var:A> = <var:B> \land <var:N> = <nat:4> \} $ . Taking another step toward the subsequent step contained in the program , the variable update command \verb | <var:N> := <nat:1> + <var:N> * <var:A> ; | . This line redefines $ \{ <var:A> = <var:B> \land <var:N> = <nat:4> \} $ toward the condition $ \{ <var:A> = <var:B> \land <var:N> = <nat:4> \times <var:B> + <nat:1> \} $ . Stepping forward , we see the variable assignmet command \verb | <var:N> := <nat:3> + <var:N> * <var:A> | . This line forwards $ \{ <var:A> = <var:B> \land <var:N> = <nat:4> \times <var:B> + <nat:1> \} $ into $ \{ <var:A> = <var:B> \land <var:N> = <nat:4> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} $ . This is sound through the assignment law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:4> ; <var:N> := <nat:1> + <var:N> * <var:A> ; <var:N> := <nat:3> + <var:N> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:A> = <var:B> }} <def:poly> {{ <var:N> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:N> = <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:N> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 