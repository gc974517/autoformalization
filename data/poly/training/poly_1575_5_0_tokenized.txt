\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:d> ; <var:X> := <var:q1> ; <var:X> := <var:X> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:d> = <var:v> $ , given some positive numbers $ <var:v> $ , before executing our code segment it follows that we have $ <var:X> = <nat:7> \times <var:v> + <nat:2> $ when set of commands has finished executing . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:d> = <var:v> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:d> = <var:v> \land <var:q0> = <nat:2> \} \\ <var:q1> := <nat:7> ; \\ \{ <var:d> = <var:v> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \} \\ <var:q1> := <var:q1> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:v> \} \\ <var:X> := <var:q1> ; \\ \{ <var:d> = <var:v> \land <var:q0> = <nat:2> \land <var:X> = <nat:7> \cdot <var:v> \} \\ <var:X> := <var:X> + <var:q0> \\ \{ <var:d> = <var:v> \land <var:X> = <nat:7> \cdot <var:v> + <nat:2> \} \end{eqnarray} Considering the above , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:d> ; <var:X> := <var:q1> ; <var:X> := <var:X> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:d> = <var:v> }} <def:poly> {{ <var:X> = <nat:7> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:q0> = <nat:2> /\ <var:X> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:X> = <nat:7> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 