\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:2> ; <var:C> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( assuming some positive numbers $ <var:p> $ ) that we have $ <var:D> = <var:p> $ ahead of the evaluation of this program it follows that we see $ <var:C> = <nat:2> $ after program executes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be accomplished by Hoare reasoning . Now , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:p> \} & <var:w0> := <nat:2> & \{ <var:D> = <var:p> \land <var:w0> = <nat:2> \} \\ \{ <var:D> = <var:p> \land <var:w0> = <nat:2> \} & <var:C> := <var:w0& \{ <var:D> = <var:p> \land <var:C> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:C> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:D> = <var:p> }} <def:poly> {{ <var:C> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:C> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 