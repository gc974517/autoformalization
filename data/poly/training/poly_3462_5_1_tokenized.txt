\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:m> ; <var:i0> := <nat:1> ; <var:i1> := <var:i1> * <nat:1> ; <var:y> := <var:i1> <var:y> := <var:y> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given any positive coefficients $ <var:o> $ ) that we have $ <var:m> = <var:o> $ before evaluating the code , it follows that we see $ <var:y> = <nat:1> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our list of instructions can be done using standard Hoare techniques . Taking a look at the subsequent command found in our program , we have \begin{eqnarray} \{ <var:m> = <var:o> \} \, <var:i1> := <var:m> \, \{ <var:m> = <var:o> \land <var:i1> = <var:o> \} \end{eqnarray} This is ensured by the binding rule given in Hoare logic . Looking at the subsequent steps found in the series of instructions , we see \begin{eqnarray} \{ <var:m> = <var:o> \} \, <var:i1> := <var:m> \, \{ <var:m> = <var:o> \land <var:i1> = <var:o> \} \\ \{ <var:m> = <var:o> \land <var:i1> = <var:o> \} \, <var:i0> := <nat:1> \, \{ <var:m> = <var:o> \land <var:i1> = <var:o> \land <var:i0> = <nat:1> \} \\ \{ <var:m> = <var:o> \land <var:i1> = <var:o> \land <var:i0> = <nat:1> \} \, <var:i1> := <var:i1> * <nat:1> \, \{ <var:m> = <var:o> \land <var:i1> = <nat:1> \cdot <var:o> \land <var:i0> = <nat:1> \} \end{eqnarray} This is deduced with the variable update scheme in Hoare logic . Taking another step toward the upcoming line of code contained in our set of instructions , we see \begin{eqnarray} \{ <var:m> = <var:o> \} \, <var:i1> := <var:m> \, \{ <var:m> = <var:o> \land <var:i1> = <var:o> \} \end{eqnarray} This is deduced with the variable assignmet rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:m> ; <var:i0> := <nat:1> ; <var:i1> := <var:i1> * <nat:1> ; <var:y> := <var:i1> <var:y> := <var:y> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:m> = <var:o> }} <def:poly> {{ <var:y> = <nat:1> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:i1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:i1> = <var:o> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:i1> = <nat:1> * <var:o> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:i0> = <nat:1> /\ <var:y> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:y> = <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 