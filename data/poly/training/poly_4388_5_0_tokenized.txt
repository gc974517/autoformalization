\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:5> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:v> ; <var:E> := <var:c1> ; <var:E> := <var:E> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing assuming some whole numbers $ <var:I> $ that $ <var:v> = <var:I> $ ahead of the evaluation of the list of commands , it must be that we have $ <var:E> = <nat:8> \cdot <var:I> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our program is clear with usual Hoare techniques . Advancing on , we have the variable binding statement binding $ <nat:5> $ as $ <var:c0>$ . This moves the condition $ \{ <var:v> = <var:I> \} $ as $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \} $ . This is deduced using the assignment scheme defined by standard Hoare reasoning . Further , the variable binding line letting $ <nat:8> $ to $ <var:c1>$ . This moves the precondition $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \} $ into $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \land <var:c1> = <nat:8> \} $ . This is guaranteed through the assignment scheme given by typical Hoare logic . Moving forward to the following command found in the code segment , we see the assignment command yielding $ <var:c1> * <var:v> $ to $ <var:c1>$ . This code advances $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \land <var:c1> = <nat:8> \} $ toward the postcondition $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \land <var:c1> = <nat:8> * <var:I> \} $ . This is sound with the assignment rule found in Hoare logic . Now , we have the variable update command \verb | <var:E> := <var:c1> ; | . This takes $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \land <var:c1> = <nat:8> * <var:I> \} $ as the condition $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \land <var:E> = <nat:8> * <var:I> \} $ . Considering the subsequent line seen in our series of instructions , we have the variable update statement \verb | <var:E> := <var:E> + <var:c0> | . This code redefines the precondition $ \{ <var:v> = <var:I> \land <var:c0> = <nat:5> \land <var:E> = <nat:8> * <var:I> \} $ into $ \{ <var:v> = <var:I> \land <var:E> = <nat:8> * <var:I> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:5> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:v> ; <var:E> := <var:c1> ; <var:E> := <var:E> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:v> = <var:I> }} <def:poly> {{ <var:E> = <nat:8> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:c0> = <nat:5> /\ <var:E> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:E> = <nat:8> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 