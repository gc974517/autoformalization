\begin{document} \begin{theorem} Consider the following segment of code such that \begin{verbatim} <var:P1> := <var:X> ; <var:P2> := <var:P1> * <var:X> ; <var:P3> := <var:P2> * <var:X> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:6> ; <var:P3> := <var:P3> * <nat:5> ; <var:B> := <var:P3> <var:B> := <var:B> + <var:P2> <var:B> := <var:B> + <var:P1> <var:B> := <var:B> + <var:P0> \end{verbatim} Allow $ <var:X> = <var:O> $ ( assuming some positive integer coefficients $ <var:O> $ ) before interpreting the list of commands , it follows that we see $ <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is shown using Hoare techniques . Going to the next step , we have the environment update statement giving $ <var:X> $ to $ <var:P1>$ . This statement forwards $ \{ <var:X> = <var:O> \} $ into $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \} $ . Moving on to the next statement seen in our program , the variable assignmet code giving $ <var:P1> * <var:X> $ to $ <var:P2>$ . This command forwards the precondition $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \} $ toward the condition $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \land <var:P2> = <var:O> ^ <nat:2> \} $ . This is given through the assignment inference rule obtained from Hoare techniques . Immediately after , we have the assignment statement binding $ <var:P2> * <var:X> $ to $ <var:P3>$ . This redefines $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \land <var:P2> = <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \land <var:P2> = <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule of usual Hoare reasoning . Honing in on the subsequent statement found in the program , we have the line \verb | <var:P0> := <nat:1> ; | . This forwards $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \land <var:P2> = <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \} $ toward the postcondition $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \land <var:P2> = <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ . This is deduced using the assignment inference rule defined by standard Hoare logic . Honing in on the subsequent line of code in our code segment , we have the variable assignmet code \verb | <var:P1> := <var:P1> * <nat:7> ; | . This code moves the precondition $ \{ <var:X> = <var:O> \land <var:P1> = <var:O> \land <var:P2> = <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ toward the postcondition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ . This is known to be sound with the assignment scheme in Hoare logic . Immediately following , the binding statement giving $ <var:P2> * <nat:6> $ toward $ <var:P2>$ . This redefines the condition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ toward $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ . This is known to be sound by the assignment law of typical Hoare reasoning . Jumping to the upcoming bit of code in our list of instructions , we see the statement \verb | <var:P3> := <var:P3> * <nat:5> ; | . This forwards the precondition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:P3> = <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ toward the postcondition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:P3> = <nat:5> \cdot <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ . Following , we have the binding code \verb | <var:B> := <var:P3> | . This advances $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:P3> = <nat:5> \cdot <var:O> ^ <nat:3> \land <var:P0> = <nat:1> \} $ as the postcondition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:P0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> \} $ . Moving forward to the proceeding line seen in the series of commands , we have the variable update command yielding $ <var:B> + <var:P2$ into $ <var:B>$ . This statement redefines the precondition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:P0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> \} $ into $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> \} $ . This is guaranteed by the assignment rule from usual Hoare techniques . Jumping to the subsequent line seen in our code segment , we see the statement letting $ <var:B> + <var:P1$ toward $ <var:B>$ . This command forwards the condition $ \{ <var:X> = <var:O> \land <var:P1> = <nat:7> \cdot <var:O> \land <var:P0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> \} $ into $ \{ <var:X> = <var:O> \land <var:P0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> \} $ . This is sound with the assignment rule from standard Hoare logic . Going forward , we see the variable assignmet statement letting $ <var:B> + <var:P0$ into $ <var:B>$ . This line forwards $ \{ <var:X> = <var:O> \land <var:P0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> \} $ to the postcondition $ \{ <var:X> = <var:O> \land <var:B> = <nat:5> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <var:P1> := <var:X> ; <var:P2> := <var:P1> * <var:X> ; <var:P3> := <var:P2> * <var:X> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:6> ; <var:P3> := <var:P3> * <nat:5> ; <var:B> := <var:P3> <var:B> := <var:B> + <var:P2> <var:B> := <var:B> + <var:P1> <var:B> := <var:B> + <var:P0> {{ <var:B> = <nat:5> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <var:O> /\ <var:P2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <var:O> /\ <var:P2> = <var:O> ^ <nat:2> /\ <var:P3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <var:O> /\ <var:P2> = <var:O> ^ <nat:2> /\ <var:P3> = <var:O> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <nat:7> * <var:O> /\ <var:P2> = <var:O> ^ <nat:2> /\ <var:P3> = <var:O> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <nat:7> * <var:O> /\ <var:P2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:P3> = <var:O> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <nat:7> * <var:O> /\ <var:P2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:O> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <nat:7> * <var:O> /\ <var:P2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:P0> = <nat:1> /\ <var:B> = <nat:5> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P1> = <nat:7> * <var:O> /\ <var:P0> = <nat:1> /\ <var:B> = <nat:5> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:P0> = <nat:1> /\ <var:B> = <nat:5> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:B> = <nat:5> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 