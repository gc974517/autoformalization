\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:6> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:m> ; <var:K> := <var:F1> ; <var:K> := <var:K> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assume it to hold that $ <var:m> = <var:I> $ before evaluating this list of commands then $ <var:K> = <nat:3> * <var:I> + <nat:6> $ when set of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:I> \} \\ <var:F0> := <nat:6> ; \\ \{ <var:m> = <var:I> \land <var:F0> = <nat:6> \} \\ <var:F1> := <nat:3> ; \\ \{ <var:m> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:3> \} \\ <var:F1> := <var:F1> * <var:m> ; \\ \{ <var:m> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:3> \times <var:I> \} \\ <var:K> := <var:F1> ; \\ \{ <var:m> = <var:I> \land <var:F0> = <nat:6> \land <var:K> = <nat:3> \times <var:I> \} \\ <var:K> := <var:K> + <var:F0> \\ \{ <var:m> = <var:I> \land <var:K> = <nat:3> \times <var:I> + <nat:6> \} \end{eqnarray} Applying usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:6> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:m> ; <var:K> := <var:F1> ; <var:K> := <var:K> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:m> = <var:I> }} <def:poly> {{ <var:K> = <nat:3> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:F0> = <nat:6> /\ <var:K> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:K> = <nat:3> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 