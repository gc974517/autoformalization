\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} : \begin{verbatim} <var:D1> := <var:X> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:9> ; <var:r> := <var:D1> <var:r> := <var:r> + <var:D0> \end{verbatim} Assume ( for every positive numbers $ <var:i> $ ) that $ <var:X> = <var:i> $ ahead of interpreting the program it must be that $ <var:r> = <nat:9> * <var:i> + <nat:4> $ once code executes . \end{theorem} \begin{proof} Proving correctness for the code segment is demonstrated through standard Hoare reasoning . Shifting focus toward the upcoming piece of code contained in the list of commands , we see the command giving $ <var:X> $ into $ <var:D1>$ . This moves the condition $ \{ <var:X> = <var:i> \} $ to $ \{ <var:X> = <var:i> \land <var:D1> = <var:i> \} $ . Going to the next step , we have the variable binding code \verb | <var:D0> := <nat:4> ; | . This takes the condition $ \{ <var:X> = <var:i> \land <var:D1> = <var:i> \} $ toward the postcondition $ \{ <var:X> = <var:i> \land <var:D1> = <var:i> \land <var:D0> = <nat:4> \} $ . Jumping to the following step contained in the series of instructions , we have the environment update line yielding $ <var:D1> * <nat:9> $ as $ <var:D1>$ . This statement advances the condition $ \{ <var:X> = <var:i> \land <var:D1> = <var:i> \land <var:D0> = <nat:4> \} $ toward $ \{ <var:X> = <var:i> \land <var:D1> = <nat:9> \cdot <var:i> \land <var:D0> = <nat:4> \} $ . Focusing on the upcoming statement seen in the list of commands , we see the assignment code \verb | <var:r> := <var:D1> | . This line takes the precondition $ \{ <var:X> = <var:i> \land <var:D1> = <nat:9> \cdot <var:i> \land <var:D0> = <nat:4> \} $ into $ \{ <var:X> = <var:i> \land <var:D0> = <nat:4> \land <var:r> = <nat:9> \cdot <var:i> \} $ . This is guaranteed using the assignment rule given by usual Hoare logic . Honing in on the following step contained in the code , we see the environment update statement letting $ <var:r> + <var:D0$ as $ <var:r>$ . This command advances $ \{ <var:X> = <var:i> \land <var:D0> = <nat:4> \land <var:r> = <nat:9> \cdot <var:i> \} $ to the postcondition $ \{ <var:X> = <var:i> \land <var:r> = <nat:9> \cdot <var:i> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:X> = <var:i> }} <var:D1> := <var:X> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:9> ; <var:r> := <var:D1> <var:r> := <var:r> + <var:D0> {{ <var:r> = <nat:9> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:D1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:D1> = <var:i> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:D1> = <nat:9> * <var:i> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:D0> = <nat:4> /\ <var:r> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:r> = <nat:9> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 