\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:9> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:O> ; <var:J2> := <nat:8> ; <var:J2> := <var:J2> * <var:O> ; <var:J2> := <var:J2> * <var:O> ; <var:G> := <var:J2> ; <var:G> := <var:G> + <var:J1> ; <var:G> := <var:G> + <var:J0> \end{verbatim} Allowing it to be that $ <var:O> = <var:V> $ , letting positive integers $ <var:V> $ , prior to evaluating this code , it must be that we have $ <var:G> = <nat:8> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is done using Hoare techniques . Immediately after , we have \verb | { <var:O> = <var:V> } <var:J0> := <nat:9> { <var:O> = <var:V> \land <var:J0> = <nat:9> } | , \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> } <var:J1> := <nat:7> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> } | , \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> } <var:J1> := <var:J1> * <var:O> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> } | , \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> } <var:J2> := <nat:8> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:J2> = <nat:8> } | , \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:J2> = <nat:8> } <var:J2> := <var:J2> * <var:O> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:J2> = <nat:8> * <var:V> } | , \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:J2> = <nat:8> * <var:V> } <var:J2> := <var:J2> * <var:O> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:J2> = <nat:8> * <var:V> ^ <nat:2> } | , \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:J2> = <nat:8> * <var:V> ^ <nat:2> } <var:G> := <var:J2> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:G> = <nat:8> * <var:V> ^ <nat:2> } | and \verb | { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:7> * <var:V> \land <var:G> = <nat:8> * <var:V> ^ <nat:2> } <var:G> := <var:G> + <var:J1> { <var:O> = <var:V> \land <var:J0> = <nat:9> \land <var:G> = <nat:8> * <var:V> ^ <nat:2> + <nat:7> * <var:V> } | . This is ensured by the inference rule obtained from Hoare reasoning . After , we see \verb | { <var:O> = <var:V> } <var:J0> := <nat:9> { <var:O> = <var:V> \land <var:J0> = <nat:9> } | . This is given using the environment update inference rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:O> = <var:V> }} <var:J0> := <nat:9> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:O> ; <var:J2> := <nat:8> ; <var:J2> := <var:J2> * <var:O> ; <var:J2> := <var:J2> * <var:O> ; <var:G> := <var:J2> ; <var:G> := <var:G> + <var:J1> ; <var:G> := <var:G> + <var:J0> {{ <var:G> = <nat:8> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:7> * <var:V> /\ <var:J2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:7> * <var:V> /\ <var:J2> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:7> * <var:V> /\ <var:J2> = <nat:8> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:7> * <var:V> /\ <var:G> = <nat:8> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:J0> = <nat:9> /\ <var:G> = <nat:8> * <var:V> ^ <nat:2> + <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:G> = <nat:8> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 