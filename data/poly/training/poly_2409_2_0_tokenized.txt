\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:6> ; <var:I> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:r> = <var:Y> $ ( for any $ <var:Y> $ ) prior to evaluating the list of instructions , then we see $ <var:I> = <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:r> = <var:Y> \} \\ <var:V0> := <nat:6> ; \\ \{ <var:r> = <var:Y> \land <var:V0> = <nat:6> \} \\ <var:I> := <var:V0> \\ \{ <var:r> = <var:Y> \land <var:I> = <nat:6> \} \end{eqnarray} Considering the above , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:6> ; <var:I> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:r> = <var:Y> }} <def:poly> {{ <var:I> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:I> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 