\begin{document} \begin{theorem} Take a set of instructions such that \begin{verbatim} <var:M0> := <nat:7> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:N> ; <var:t> := <var:M1> ; <var:t> := <var:t> + <var:M0> \end{verbatim} Allow that $ <var:N> = <var:n> $ ahead of interpreting the list of instructions then we have $ <var:t> = <nat:1> \cdot <var:n> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is given using typical Hoare techniques . Stepping forward , we see the variable assignmet statement defining $ <nat:7> $ to $ <var:M0>$ . This moves the condition $ \{ <var:N> = <var:n> \} $ into the postcondition $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \} $ . Stepping forward , the variable binding line \verb | <var:M1> := <nat:1> ; | . This redefines the condition $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \} $ to $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \land <var:M1> = <nat:1> \} $ . Further , we see the binding line \verb | <var:M1> := <var:M1> * <var:N> ; | . This code takes the precondition $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \land <var:M1> = <nat:1> \} $ toward $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \land <var:M1> = <nat:1> \cdot <var:n> \} $ . This is ensured by the assignment inference rule of standard Hoare reasoning . Taking a look at the upcoming piece of code found in the set of instructions , we see the variable binding statement letting $ <var:M1> $ into $ <var:t>$ . This line takes $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \land <var:M1> = <nat:1> \cdot <var:n> \} $ to $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \land <var:t> = <nat:1> \cdot <var:n> \} $ . Taking a look at the next command contained in the program , the assignment code \verb | <var:t> := <var:t> + <var:M0> | . This statement takes the precondition $ \{ <var:N> = <var:n> \land <var:M0> = <nat:7> \land <var:t> = <nat:1> \cdot <var:n> \} $ toward the postcondition $ \{ <var:N> = <var:n> \land <var:t> = <nat:1> \cdot <var:n> + <nat:7> \} $ . This is shown to be logically sound through the assignment rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:N> = <var:n> }} <var:M0> := <nat:7> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:N> ; <var:t> := <var:M1> ; <var:t> := <var:t> + <var:M0> {{ <var:t> = <nat:1> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:M0> = <nat:7> /\ <var:t> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:t> = <nat:1> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 