\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:3> ; <var:v> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allow , for all $ <var:i> \in \mathbb{Z}^+ $ , it to hold that $ <var:c> = <var:i> $ prior to evaluating the code it holds that we have $ <var:v> = <nat:3> $ once list of commands has finished . \end{theorem} \begin{proof} The course of logic for our code segment is evident with Hoare reasoning . Immediately after , we have the line \verb | <var:L0> := <nat:3> ; | . This line redefines the condition $ \{ <var:c> = <var:i> \} $ as $ \{ <var:c> = <var:i> \land <var:L0> = <nat:3> \} $ . This is shown through the assignment law obtained from Hoare reasoning . Taking another step toward the next step seen in the segment of code , we see the assignment code \verb | <var:v> := <var:L0> | . This statement takes the condition $ \{ <var:c> = <var:i> \land <var:L0> = <nat:3> \} $ to the postcondition $ \{ <var:c> = <var:i> \land <var:v> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:v> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <def:poly> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 