\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:4> ; <var:c> := <var:G0> \end{verbatim} Allow that we have $ <var:K> = <var:Y> $ ( letting positive integer coefficients $ <var:Y> $ ) before the evaluation of our program , then we have $ <var:c> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this program is done using standard Hoare reasoning . Immediately after , we see the assignment command \verb | <var:G0> := <nat:4> ; | . This code forwards the precondition $ \{ <var:K> = <var:Y> \} $ into the condition $ \{ <var:K> = <var:Y> \land <var:G0> = <nat:4> \} $ . This is ensured through the assignment law obtained from Hoare techniques . Next , the variable binding statement assigning $ <var:G0$ to $ <var:c>$ . This forwards the condition $ \{ <var:K> = <var:Y> \land <var:G0> = <nat:4> \} $ into the postcondition $ \{ <var:K> = <var:Y> \land <var:c> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:K> = <var:Y> }} <var:G0> := <nat:4> ; <var:c> := <var:G0> {{ <var:c> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:c> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 