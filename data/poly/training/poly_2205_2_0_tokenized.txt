\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:4> ; <var:C> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:G> = <var:K> $ ahead of running our program it holds that $ <var:C> = <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:G> = <var:K> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:G> = <var:K> \land <var:I0> = <nat:4> \} \\ <var:C> := <var:I0> \\ \{ <var:G> = <var:K> \land <var:C> = <nat:4> \} \end{eqnarray} Hence , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:C> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:G> = <var:K> }} <def:poly> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 