\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:U0> := <nat:3> ; <var:Q> := <var:U0> \end{verbatim} Assuming it to hold that $ <var:F> = <var:x> $ ahead of executing the code segment , it must be that we see $ <var:Q> = <nat:3> $ once series of commands exits . \end{theorem} \begin{proof} The argument for our set of instructions can be demonstrated through typical Hoare reasoning . Advancing to the next step , \begin{verbatim} { <var:F> = <var:x> } <var:U0> := <nat:3> { <var:F> = <var:x> \land <var:U0> = <nat:3> } \end{verbatim} This is shown by the assignment scheme obtained from typical Hoare logic . Paying attention to the next command contained in the program , we have \begin{verbatim} { <var:F> = <var:x> } <var:U0> := <nat:3> { <var:F> = <var:x> \land <var:U0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:F> = <var:x> }} <var:U0> := <nat:3> ; <var:Q> := <var:U0> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 