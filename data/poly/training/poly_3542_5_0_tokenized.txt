\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:6> ; <var:y1> := <nat:5> ; <var:y1> := <var:y1> * <var:m> ; <var:e> := <var:y1> ; <var:e> := <var:e> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Allow it to be that $ <var:m> = <var:c> $ prior to the evaluation of the code segment it follows that we see $ <var:e> = <nat:5> \cdot <var:c> + <nat:6> $ . \end{theorem} \begin{proof} Notice this decorated code segment . \begin{eqnarray} \{ <var:m> = <var:c> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:m> = <var:c> \land <var:y0> = <nat:6> \} \\ <var:y1> := <nat:5> ; \\ \{ <var:m> = <var:c> \land <var:y0> = <nat:6> \land <var:y1> = <nat:5> \} \\ <var:y1> := <var:y1> * <var:m> ; \\ \{ <var:m> = <var:c> \land <var:y0> = <nat:6> \land <var:y1> = <nat:5> \times <var:c> \} \\ <var:e> := <var:y1> ; \\ \{ <var:m> = <var:c> \land <var:y0> = <nat:6> \land <var:e> = <nat:5> \times <var:c> \} \\ <var:e> := <var:e> + <var:y0> \\ \{ <var:m> = <var:c> \land <var:e> = <nat:5> \times <var:c> + <nat:6> \} \end{eqnarray} The application of usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:y1> := <nat:5> ; <var:y1> := <var:y1> * <var:m> ; <var:e> := <var:y1> ; <var:e> := <var:e> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:m> = <var:c> }} <def:poly> {{ <var:e> = <nat:5> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:y0> = <nat:6> /\ <var:e> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:e> = <nat:5> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 