\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:8> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:j> ; <var:a> := <var:u1> ; <var:a> := <var:a> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Assuming it to be that $ <var:j> = <var:w> $ before evaluating our code segment it must be that we have $ <var:a> = <nat:3> \times <var:w> + <nat:8> $ once series of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be accomplished through typical Hoare reasoning . Honing in on the subsequent commands seen in the set of instructions , we have \begin{verbatim} { <var:j> = <var:w> } <var:u0> := <nat:8> { <var:j> = <var:w> \land <var:u0> = <nat:8> } { <var:j> = <var:w> \land <var:u0> = <nat:8> } <var:u1> := <nat:3> { <var:j> = <var:w> \land <var:u0> = <nat:8> \land <var:u1> = <nat:3> } { <var:j> = <var:w> \land <var:u0> = <nat:8> \land <var:u1> = <nat:3> } <var:u1> := <var:u1> * <var:j> { <var:j> = <var:w> \land <var:u0> = <nat:8> \land <var:u1> = <nat:3> * <var:w> } { <var:j> = <var:w> \land <var:u0> = <nat:8> \land <var:u1> = <nat:3> * <var:w> } <var:a> := <var:u1> { <var:j> = <var:w> \land <var:u0> = <nat:8> \land <var:a> = <nat:3> * <var:w> } \end{verbatim} This is sound by the variable assignmet rule defined in typical Hoare reasoning . Stepping forward , we have \begin{verbatim} { <var:j> = <var:w> } <var:u0> := <nat:8> { <var:j> = <var:w> \land <var:u0> = <nat:8> } \end{verbatim} This is sound by the variable update law obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:8> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:j> ; <var:a> := <var:u1> ; <var:a> := <var:a> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:j> = <var:w> }} <def:poly> {{ <var:a> = <nat:3> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:u0> = <nat:8> /\ <var:a> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:a> = <nat:3> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 