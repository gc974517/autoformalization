\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:X0> := <nat:1> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:t> ; <var:X2> := <var:X2> * <var:t> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:t> ; <var:X3> := <var:X3> * <var:t> ; <var:X3> := <var:X3> * <var:t> ; <var:c> := <var:X3> ; <var:c> := <var:c> + <var:X2> ; <var:c> := <var:c> + <var:X0> \end{verbatim} Allow that we have $ <var:t> = <var:f> $ given all positive coefficients $ <var:f> $ ahead of running this segment of code , then we have $ <var:c> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} See that the following decorated list of instructions . \begin{eqnarray} \{ <var:t> = <var:f> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \} \\ <var:X2> := <nat:6> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> \} \\ <var:X2> := <var:X2> * <var:t> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> \} \\ <var:X2> := <var:X2> * <var:t> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> ^ <nat:2> \} \\ <var:X3> := <nat:9> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> ^ <nat:2> \land <var:X3> = <nat:9> \} \\ <var:X3> := <var:X3> * <var:t> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> ^ <nat:2> \land <var:X3> = <nat:9> * <var:f> \} \\ <var:X3> := <var:X3> * <var:t> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> ^ <nat:2> \land <var:X3> = <nat:9> * <var:f> ^ <nat:2> \} \end{eqnarray} Furthering the execution of this program yields : \begin{eqnarray} <var:X3> := <var:X3> * <var:t> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> ^ <nat:2> \land <var:X3> = <nat:9> * <var:f> ^ <nat:3> \} \\ <var:c> := <var:X3> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:X2> = <nat:6> * <var:f> ^ <nat:2> \land <var:c> = <nat:9> * <var:f> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:X2> ; \\ \{ <var:t> = <var:f> \land <var:X0> = <nat:1> \land <var:c> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:X0> \\ \{ <var:t> = <var:f> \land <var:c> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:t> = <var:f> }} <var:X0> := <nat:1> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:t> ; <var:X2> := <var:X2> * <var:t> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:t> ; <var:X3> := <var:X3> * <var:t> ; <var:X3> := <var:X3> * <var:t> ; <var:c> := <var:X3> ; <var:c> := <var:c> + <var:X2> ; <var:c> := <var:c> + <var:X0> {{ <var:c> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:X3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:c> = <nat:9> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:X0> = <nat:1> /\ <var:c> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:f> /\ <var:c> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 