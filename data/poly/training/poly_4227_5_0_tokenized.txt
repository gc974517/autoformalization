\begin{document} \begin{theorem} Take a set of instructions as \begin{verbatim} <var:S0> := <nat:7> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:T> ; <var:I> := <var:S1> ; <var:I> := <var:I> + <var:S0> \end{verbatim} Allowing it to hold that $ <var:T> = <var:m> $ prior to interpreting this series of commands , then we have $ <var:I> = <nat:1> \times <var:m> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be shown with typical Hoare techniques . Advancing to the next lines of codefound in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:m> \} & <var:S0> := <nat:7> & \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \} \\ \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \} & <var:S1> := <nat:1> & \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \} \\ \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \} & <var:S1> := <var:S1> * <var:T> & \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \times <var:m> \} \\ \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \times <var:m> \} & <var:I> := <var:S1> & \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \land <var:I> = <nat:1> \times <var:m> \} \\ \{ <var:T> = <var:m> \land <var:S0> = <nat:7> \land <var:I> = <nat:1> \times <var:m> \} & <var:I> := <var:I> + <var:S0& \{ <var:T> = <var:m> \land <var:I> = <nat:1> \times <var:m> + <nat:7> \} \end{tabular} This is shown to be logically sound through the variable update law from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:T> = <var:m> }} <var:S0> := <nat:7> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:T> ; <var:I> := <var:S1> ; <var:I> := <var:I> + <var:S0> {{ <var:I> = <nat:1> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:S0> = <nat:7> /\ <var:I> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:I> = <nat:1> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 