\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:I> ; <var:a0> := <nat:9> ; <var:a1> := <var:a1> * <nat:7> ; <var:j> := <var:a1> <var:j> := <var:j> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:I> = <var:D> $ ( letting $ <var:D> \in \mathbb{Z}^+ $ ) before executing our list of commands it must be that we see $ <var:j> = <nat:7> * <var:D> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:D> \} \\ <var:a1> := <var:I> ; \\ \{ <var:I> = <var:D> \land <var:a1> = <var:D> \} \\ <var:a0> := <nat:9> ; \\ \{ <var:I> = <var:D> \land <var:a1> = <var:D> \land <var:a0> = <nat:9> \} \\ <var:a1> := <var:a1> * <nat:7> ; \\ \{ <var:I> = <var:D> \land <var:a1> = <nat:7> \times <var:D> \land <var:a0> = <nat:9> \} \\ <var:j> := <var:a1> \\ \{ <var:I> = <var:D> \land <var:a0> = <nat:9> \land <var:j> = <nat:7> \times <var:D> \} \\ <var:j> := <var:j> + <var:a0> \\ \{ <var:I> = <var:D> \land <var:j> = <nat:7> \times <var:D> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:I> ; <var:a0> := <nat:9> ; <var:a1> := <var:a1> * <nat:7> ; <var:j> := <var:a1> <var:j> := <var:j> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <def:poly> {{ <var:j> = <nat:7> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:a1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:a1> = <var:D> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:a1> = <nat:7> * <var:D> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:a0> = <nat:9> /\ <var:j> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:j> = <nat:7> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 