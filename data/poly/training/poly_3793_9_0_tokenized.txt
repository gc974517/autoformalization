\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:9> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:E> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:E> ; <var:G2> := <var:G2> * <var:E> ; <var:n> := <var:G2> ; <var:n> := <var:n> + <var:G1> ; <var:n> := <var:n> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:E> = <var:Z> $ prior to the evaluation of this code segment then we have $ <var:n> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:Z> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \} \\ <var:G1> := <nat:4> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \} \end{eqnarray} Furthering executing this list of instructions returns : \begin{eqnarray} <var:G1> := <var:G1> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \cdot <var:Z> \} \\ <var:G2> := <nat:1> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \cdot <var:Z> \land <var:G2> = <nat:1> \} \\ <var:G2> := <var:G2> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \cdot <var:Z> \land <var:G2> = <nat:1> \cdot <var:Z> \} \\ <var:G2> := <var:G2> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \cdot <var:Z> \land <var:G2> = <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:n> := <var:G2> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \cdot <var:Z> \land <var:n> = <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:G1> ; \\ \{ <var:E> = <var:Z> \land <var:G0> = <nat:9> \land <var:n> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} \\ <var:n> := <var:n> + <var:G0> \\ \{ <var:E> = <var:Z> \land <var:n> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:9> \} \end{eqnarray} The application of usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:9> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:E> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:E> ; <var:G2> := <var:G2> * <var:E> ; <var:n> := <var:G2> ; <var:n> := <var:n> + <var:G1> ; <var:n> := <var:n> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:E> = <var:Z> }} <def:poly> {{ <var:n> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> * <var:Z> /\ <var:G2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> * <var:Z> /\ <var:G2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> * <var:Z> /\ <var:G2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> * <var:Z> /\ <var:n> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:n> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:n> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 