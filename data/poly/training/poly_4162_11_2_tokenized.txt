\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:4> + <var:L> * <var:B> ; <var:L> := <var:L> * <var:B> ; <var:L> := <nat:4> + <var:L> * <var:B> ; <var:L> := <nat:4> + <var:L> * <var:B> ; <var:L> := <var:L> * <var:B> ; <var:L> := <var:L> * <var:B> ; <var:L> := <nat:3> + <var:L> * <var:B> ; <var:L> := <nat:3> + <var:L> * <var:B> ; <var:L> := <nat:1> + <var:L> * <var:B> ; <var:L> := <nat:1> + <var:L> * <var:B> \end{verbatim} Allowing that we have $ <var:B> = <var:K> $ before interpreting this series of commands it must be that $ <var:L> = <nat:4> \times <var:K> ^ <nat:10> + <nat:4> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:1> $ after series of commands finishes . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:B> = <var:K> \} \\ <var:L> := <nat:4> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \} \\ <var:L> := <nat:4> + <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> + <nat:4> \} \\ <var:L> := <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + \} \\ <var:L> := <nat:4> + <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \} \\ <var:L> := <nat:4> + <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> + <nat:4> \} \\ <var:L> := <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + \} \end{eqnarray} Furthering the execution of this program gives us : \begin{eqnarray} <var:L> := <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + \} \\ <var:L> := <nat:3> + <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:3> \} \\ <var:L> := <nat:3> + <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> + <nat:3> \} \\ <var:L> := <nat:1> + <var:L> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:1> \} \\ <var:L> := <nat:1> + <var:L> * <var:B> \\ \{ <var:B> = <var:K> \land <var:L> = <nat:4> \times <var:K> ^ <nat:10> + <nat:4> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:1> \} \end{eqnarray} Thus , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:B> = <var:K> }} <var:L> := <nat:4> ; <var:L> := <nat:4> + <var:L> * <var:B> ; <var:L> := <var:L> * <var:B> ; <var:L> := <nat:4> + <var:L> * <var:B> ; <var:L> := <nat:4> + <var:L> * <var:B> ; <var:L> := <var:L> * <var:B> ; <var:L> := <var:L> * <var:B> ; <var:L> := <nat:3> + <var:L> * <var:B> ; <var:L> := <nat:3> + <var:L> * <var:B> ; <var:L> := <nat:1> + <var:L> * <var:B> ; <var:L> := <nat:1> + <var:L> * <var:B> {{ <var:L> = <nat:4> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 