\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:L> ; <var:E> := <var:g1> ; <var:E> := <var:E> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:L> = <var:D> $ ( given $ <var:D> \in \mathbb{N} $ ) prior to the execution of this list of instructions it holds that we see $ <var:E> = <nat:7> * <var:D> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:D> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:L> = <var:D> \land <var:g0> = <nat:3> \} \\ <var:g1> := <nat:7> ; \\ \{ <var:L> = <var:D> \land <var:g0> = <nat:3> \land <var:g1> = <nat:7> \} \\ <var:g1> := <var:g1> * <var:L> ; \\ \{ <var:L> = <var:D> \land <var:g0> = <nat:3> \land <var:g1> = <nat:7> * <var:D> \} \\ <var:E> := <var:g1> ; \\ \{ <var:L> = <var:D> \land <var:g0> = <nat:3> \land <var:E> = <nat:7> * <var:D> \} \\ <var:E> := <var:E> + <var:g0> \\ \{ <var:L> = <var:D> \land <var:E> = <nat:7> * <var:D> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:L> ; <var:E> := <var:g1> ; <var:E> := <var:E> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:L> = <var:D> }} <def:poly> {{ <var:E> = <nat:7> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:g0> = <nat:3> /\ <var:E> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:E> = <nat:7> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 