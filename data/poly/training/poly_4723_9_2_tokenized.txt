\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:2> + <var:v> * <var:N> ; <var:v> := <var:v> * <var:N> ; <var:v> := <var:v> * <var:N> ; <var:v> := <nat:2> + <var:v> * <var:N> ; <var:v> := <var:v> * <var:N> ; <var:v> := <nat:3> + <var:v> * <var:N> ; <var:v> := <nat:2> + <var:v> * <var:N> ; <var:v> := <nat:3> + <var:v> * <var:N> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:N> = <var:s> $ before running our code , it follows that we see $ <var:v> = <nat:3> \cdot <var:s> ^ <nat:8> + <nat:2> \cdot <var:s> ^ <nat:7> + <nat:2> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is evident using typical Hoare reasoning . Taking another step toward the next commands seen in our program , we see \verb | { <var:N> = <var:s> } <var:v> := <nat:3> { <var:N> = <var:s> \land <var:v> = <nat:3> } | , \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> } <var:v> := <nat:2> + <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> + <nat:2> } | , \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> + <nat:2> } <var:v> := <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + } | , \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + } <var:v> := <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + } | and \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + } <var:v> := <nat:2> + <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:2> } | . Advancing to the subsequent commands contained in our list of instructions , we see \verb | { <var:N> = <var:s> } <var:v> := <nat:3> { <var:N> = <var:s> \land <var:v> = <nat:3> } | , \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> } <var:v> := <nat:2> + <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> + <nat:2> } | , \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> + <nat:2> } <var:v> := <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + } | and \verb | { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + } <var:v> := <var:v> * <var:N> { <var:N> = <var:s> \land <var:v> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + } | . This is given by the variable binding inference rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:3> ; <var:v> := <nat:2> + <var:v> * <var:N> ; <var:v> := <var:v> * <var:N> ; <var:v> := <var:v> * <var:N> ; <var:v> := <nat:2> + <var:v> * <var:N> ; <var:v> := <var:v> * <var:N> ; <var:v> := <nat:3> + <var:v> * <var:N> ; <var:v> := <nat:2> + <var:v> * <var:N> ; <var:v> := <nat:3> + <var:v> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:N> = <var:s> }} <def:poly> {{ <var:v> = <nat:3> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:2> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:v> = <nat:3> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 