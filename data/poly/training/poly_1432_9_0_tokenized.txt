\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:7> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:J> ; <var:u2> := <nat:2> ; <var:u2> := <var:u2> * <var:J> ; <var:u2> := <var:u2> * <var:J> ; <var:m> := <var:u2> ; <var:m> := <var:m> + <var:u1> ; <var:m> := <var:m> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allow $ <var:J> = <var:x> $ --- given whole numbers $ <var:x> $ --- before the execution of this program , it holds that we see $ <var:m> = <nat:2> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:7> $ . \end{theorem} \begin{proof} The proof of our series of instructions is given with Hoare logic . Moving on to the proceeding piece of code seen in our list of commands , we have the variable binding line \verb | <var:u0> := <nat:7> ; | . This command forwards the precondition $ \{ <var:J> = <var:x> \} $ toward $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \} $ . This is known to be sound by the assignment scheme found in typical Hoare techniques . Focusing on the proceeding command contained in our series of commands , the variable update statement \verb | <var:u1> := <nat:5> ; | . This line moves the condition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \} $ to the postcondition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \} $ . This is ensured through the assignment rule obtained from typical Hoare logic . Next , the code \verb | <var:u1> := <var:u1> * <var:J> ; | . This command transfers $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \} $ to the postcondition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \} $ . This is ensured using the assignment scheme obtained from usual Hoare techniques . Next , we have the assignment statement \verb | <var:u2> := <nat:2> ; | . This statement transfers the condition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \} $ into $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:u2> = <nat:2> \} $ . This is shown with the assignment scheme in usual Hoare logic . Looking at the subsequent line of code found in our set of instructions , the variable update line giving $ <var:u2> * <var:J> $ as $ <var:u2>$ . This command advances the precondition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:u2> = <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:u2> = <nat:2> \times <var:x> \} $ . This is known to be sound using the assignment rule from typical Hoare logic . Paying attention to the upcoming step in the set of instructions , we see the environment update line giving $ <var:u2> * <var:J> $ toward $ <var:u2>$ . This takes $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:u2> = <nat:2> \times <var:x> \} $ as $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:u2> = <nat:2> \times <var:x> ^ <nat:2> \} $ . This is sound using the assignment scheme of standard Hoare techniques . Advancing on , we have the statement \verb | <var:m> := <var:u2> ; | . This moves $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:u2> = <nat:2> \times <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:m> = <nat:2> \times <var:x> ^ <nat:2> \} $ . Focusing on the next bit of code found in the program , the binding statement defining $ <var:m> + <var:u1> $ as $ <var:m>$ . This forwards the condition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:x> \land <var:m> = <nat:2> \times <var:x> ^ <nat:2> \} $ into $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:m> = <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> \} $ . Next , we have the variable binding statement \verb | <var:m> := <var:m> + <var:u0> | . This statement transfers the condition $ \{ <var:J> = <var:x> \land <var:u0> = <nat:7> \land <var:m> = <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> \} $ into the condition $ \{ <var:J> = <var:x> \land <var:m> = <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:7> \} $ . This is known to be sound using the assignment law given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:7> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:J> ; <var:u2> := <nat:2> ; <var:u2> := <var:u2> * <var:J> ; <var:u2> := <var:u2> * <var:J> ; <var:m> := <var:u2> ; <var:m> := <var:m> + <var:u1> ; <var:m> := <var:m> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:J> = <var:x> }} <def:poly> {{ <var:m> = <nat:2> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:x> /\ <var:u2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:x> /\ <var:u2> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:x> /\ <var:u2> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:x> /\ <var:m> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:u0> = <nat:7> /\ <var:m> = <nat:2> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:m> = <nat:2> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 