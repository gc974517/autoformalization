\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:l> ; <var:E> := <var:O1> ; <var:E> := <var:E> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Assume --- for some positive integer coefficients $ <var:X> $ --- $ <var:l> = <var:X> $ prior to the evaluation of this list of instructions , it follows that $ <var:E> = <nat:9> \times <var:X> + <nat:4> $ after series of instructions executes . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is accomplished by standard Hoare logic . Taking another step toward the upcoming line seen in our code segment , the assignment statement defining $ <nat:4> $ toward $ <var:O0>$ . This transfers the precondition $ \{ <var:l> = <var:X> \} $ to the postcondition $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \} $ . This is guaranteed using the assignment rule defined in typical Hoare techniques . Considering the subsequent step seen in our program , the environment update line yielding $ <nat:9> $ as $ <var:O1>$ . This moves the precondition $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \} $ into $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \land <var:O1> = <nat:9> \} $ . This is known to be sound by the assignment rule given by usual Hoare logic . Advancing to the subsequent bit of code contained in our segment of code , the variable assignmet code defining $ <var:O1> * <var:l> $ to $ <var:O1>$ . This advances the condition $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \land <var:O1> = <nat:9> \} $ as the postcondition $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \land <var:O1> = <nat:9> * <var:X> \} $ . Moving on to the next step , the variable assignmet command yielding $ <var:O1> $ to $ <var:E>$ . This statement forwards the condition $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \land <var:O1> = <nat:9> * <var:X> \} $ toward $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \land <var:E> = <nat:9> * <var:X> \} $ . Going to the next step , we have the variable binding line \verb | <var:E> := <var:E> + <var:O0> | . This statement forwards the precondition $ \{ <var:l> = <var:X> \land <var:O0> = <nat:4> \land <var:E> = <nat:9> * <var:X> \} $ to the postcondition $ \{ <var:l> = <var:X> \land <var:E> = <nat:9> * <var:X> + <nat:4> \} $ . This is sound using the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:l> ; <var:E> := <var:O1> ; <var:E> := <var:E> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:l> = <var:X> }} <def:poly> {{ <var:E> = <nat:9> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:O0> = <nat:4> /\ <var:E> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:E> = <nat:9> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 