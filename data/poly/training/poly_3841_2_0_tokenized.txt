\begin{document} \begin{theorem} Let the following program as \begin{verbatim} <var:I0> := <nat:6> ; <var:j> := <var:I0> \end{verbatim} Assume that we have $ <var:W> = <var:A> $ , for any positive integers $ <var:A> $ , before the execution of the segment of code , it follows that we see $ <var:j> = <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is accomplished with standard Hoare reasoning . Going forward , we have the command assigning $ <nat:6> $ to $ <var:I0>$ . This redefines the condition $ \{ <var:W> = <var:A> \} $ into the postcondition $ \{ <var:W> = <var:A> \land <var:I0> = <nat:6> \} $ . This is shown using the assignment rule in standard Hoare techniques . Moving on , we see the statement \verb | <var:j> := <var:I0> | . This forwards the condition $ \{ <var:W> = <var:A> \land <var:I0> = <nat:6> \} $ as the postcondition $ \{ <var:W> = <var:A> \land <var:j> = <nat:6> \} $ . This is rigorously given with the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:W> = <var:A> }} <var:I0> := <nat:6> ; <var:j> := <var:I0> {{ <var:j> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:j> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 