\begin{document} \begin{theorem} Define the following series of instructions as follows \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:1> + <var:I> * <var:A> ; <var:I> := <nat:4> + <var:I> * <var:A> ; <var:I> := <var:I> * <var:A> ; <var:I> := <nat:3> + <var:I> * <var:A> ; <var:I> := <nat:4> + <var:I> * <var:A> ; <var:I> := <nat:2> + <var:I> * <var:A> \end{verbatim} Allowing for any whole numbers $ <var:E> $ $ <var:A> = <var:E> $ before executing our set of commands , it holds that we have $ <var:I> = <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:E> \} \\ <var:I> := <nat:2> ; \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \} \\ <var:I> := <nat:1> + <var:I> * <var:A> ; \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \times <var:E> + <nat:1> \} \\ <var:I> := <nat:4> + <var:I> * <var:A> ; \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:4> \} \\ <var:I> := <var:I> * <var:A> ; \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + \} \\ <var:I> := <nat:3> + <var:I> * <var:A> ; \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \} \\ <var:I> := <nat:4> + <var:I> * <var:A> ; \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:5> + <nat:1> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> + <nat:4> \} \\ <var:I> := <nat:2> + <var:I> * <var:A> \\ \{ <var:A> = <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:6> + <nat:1> \times <var:E> ^ <nat:5> + <nat:4> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:2> \} \end{eqnarray} Using Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:A> = <var:E> }} <var:I> := <nat:2> ; <var:I> := <nat:1> + <var:I> * <var:A> ; <var:I> := <nat:4> + <var:I> * <var:A> ; <var:I> := <var:I> * <var:A> ; <var:I> := <nat:3> + <var:I> * <var:A> ; <var:I> := <nat:4> + <var:I> * <var:A> ; <var:I> := <nat:2> + <var:I> * <var:A> {{ <var:I> = <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 