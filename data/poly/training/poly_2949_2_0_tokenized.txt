\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:2> ; <var:L> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Given that $ <var:U> = <var:b> $ ahead of the execution of our list of commands it holds that we have $ <var:L> = <nat:2> $ when set of instructions exits . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is done using usual Hoare techniques . Focusing on the subsequent bits of codein our list of commands , we see \begin{verbatim} { <var:U> = <var:b> } <var:p0> := <nat:2> { <var:U> = <var:b> \land <var:p0> = <nat:2> } { <var:U> = <var:b> \land <var:p0> = <nat:2> } <var:L> := <var:p0{ <var:U> = <var:b> \land <var:L> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:L> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:U> = <var:b> }} <def:poly> {{ <var:L> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:L> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 