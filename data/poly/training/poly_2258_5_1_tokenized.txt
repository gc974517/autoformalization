\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:y> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:4> ; <var:A> := <var:W1> <var:A> := <var:A> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:y> = <var:K> $ given any integers $ <var:K> $ before interpreting the list of commands , it must be that we have $ <var:A> = <nat:4> \cdot <var:K> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:y> = <var:K> \} \\ <var:W1> := <var:y> ; \\ \{ <var:y> = <var:K> \land <var:W1> = <var:K> \} \end{eqnarray} Continuing the execution of our set of instructions results in : \begin{eqnarray} <var:W0> := <nat:8> ; \\ \{ <var:y> = <var:K> \land <var:W1> = <var:K> \land <var:W0> = <nat:8> \} \\ <var:W1> := <var:W1> * <nat:4> ; \\ \{ <var:y> = <var:K> \land <var:W1> = <nat:4> * <var:K> \land <var:W0> = <nat:8> \} \\ <var:A> := <var:W1> \\ \{ <var:y> = <var:K> \land <var:W0> = <nat:8> \land <var:A> = <nat:4> * <var:K> \} \\ <var:A> := <var:A> + <var:W0> \\ \{ <var:y> = <var:K> \land <var:A> = <nat:4> * <var:K> + <nat:8> \} \end{eqnarray} Allowing the execution of the series of instructions yields : \begin{eqnarray} \end{eqnarray} Therefore , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:y> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:4> ; <var:A> := <var:W1> <var:A> := <var:A> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:y> = <var:K> }} <def:poly> {{ <var:A> = <nat:4> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:W1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:W1> = <var:K> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:W1> = <nat:4> * <var:K> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:W0> = <nat:8> /\ <var:A> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:A> = <nat:4> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 