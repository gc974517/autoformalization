\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:7> ; <var:x> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:W> = <var:V> $ before executing this program it follows that we have $ <var:x> = <nat:7> $ after program has finished . \end{theorem} \begin{proof} Arguing the correctness of our code can be demonstrated with usual Hoare techniques . Taking a look at the following command contained in our code , the environment update command giving $ <nat:7> $ into $ <var:a0>$ . This transfers $ \{ <var:W> = <var:V> \} $ into the postcondition $ \{ <var:W> = <var:V> \land <var:a0> = <nat:7> \} $ . Observing the subsequent piece of code seen in our series of commands , we have the environment update statement defining $ <var:a0$ to $ <var:x>$ . This redefines $ \{ <var:W> = <var:V> \land <var:a0> = <nat:7> \} $ into the postcondition $ \{ <var:W> = <var:V> \land <var:x> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:7> ; <var:x> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <def:poly> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 