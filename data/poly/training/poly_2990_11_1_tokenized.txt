\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:z1> := <var:Z> ; <var:z2> := <var:z1> * <var:Z> ; <var:z3> := <var:z2> * <var:Z> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:3> ; <var:P> := <var:z3> <var:P> := <var:P> + <var:z2> <var:P> := <var:P> + <var:z1> <var:P> := <var:P> + <var:z0> \end{verbatim} Given ( given all positive integer coefficients $ <var:s> $ ) it to hold that $ <var:Z> = <var:s> $ ahead of executing this list of commands it holds that we see $ <var:P> = <nat:3> \times <var:s> ^ <nat:3> + <nat:8> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> + <nat:6> $ after series of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be demonstrated using Hoare reasoning . Stepping through , we see \begin{verbatim} { <var:Z> = <var:s> } <var:z1> := <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> } { <var:Z> = <var:s> \land <var:z1> = <var:s> } <var:z2> := <var:z1> * <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> \land <var:z2> = <var:s> ^ <nat:2> } \end{verbatim} Advancing on , we see \begin{verbatim} { <var:Z> = <var:s> } <var:z1> := <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> } \end{verbatim} This is known to be sound by the variable update rule found in typical Hoare logic . Shifting focus toward the following commands contained in the list of instructions , we have \begin{verbatim} { <var:Z> = <var:s> } <var:z1> := <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> } { <var:Z> = <var:s> \land <var:z1> = <var:s> } <var:z2> := <var:z1> * <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> \land <var:z2> = <var:s> ^ <nat:2> } { <var:Z> = <var:s> \land <var:z1> = <var:s> \land <var:z2> = <var:s> ^ <nat:2> } <var:z3> := <var:z2> * <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> \land <var:z2> = <var:s> ^ <nat:2> \land <var:z3> = <var:s> ^ <nat:3> } \end{verbatim} This is known to be sound with the variable binding law found in Hoare techniques . Stepping forward , we have \begin{verbatim} { <var:Z> = <var:s> } <var:z1> := <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> } { <var:Z> = <var:s> \land <var:z1> = <var:s> } <var:z2> := <var:z1> * <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> \land <var:z2> = <var:s> ^ <nat:2> } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:Z> = <var:s> } <var:z1> := <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> } { <var:Z> = <var:s> \land <var:z1> = <var:s> } <var:z2> := <var:z1> * <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> \land <var:z2> = <var:s> ^ <nat:2> } \end{verbatim} Jumping to the proceeding piece of code found in our list of commands , we see \begin{verbatim} { <var:Z> = <var:s> } <var:z1> := <var:Z> { <var:Z> = <var:s> \land <var:z1> = <var:s> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Z> = <var:s> }} <var:z1> := <var:Z> ; <var:z2> := <var:z1> * <var:Z> ; <var:z3> := <var:z2> * <var:Z> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:3> ; <var:P> := <var:z3> <var:P> := <var:P> + <var:z2> <var:P> := <var:P> + <var:z1> <var:P> := <var:P> + <var:z0> {{ <var:P> = <nat:3> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <var:s> /\ <var:z2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <var:s> /\ <var:z2> = <var:s> ^ <nat:2> /\ <var:z3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <var:s> /\ <var:z2> = <var:s> ^ <nat:2> /\ <var:z3> = <var:s> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <nat:7> * <var:s> /\ <var:z2> = <var:s> ^ <nat:2> /\ <var:z3> = <var:s> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <nat:7> * <var:s> /\ <var:z2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:z3> = <var:s> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <nat:7> * <var:s> /\ <var:z2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <nat:7> * <var:s> /\ <var:z2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:z0> = <nat:6> /\ <var:P> = <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z1> = <nat:7> * <var:s> /\ <var:z0> = <nat:6> /\ <var:P> = <nat:3> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:z0> = <nat:6> /\ <var:P> = <nat:3> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:P> = <nat:3> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 