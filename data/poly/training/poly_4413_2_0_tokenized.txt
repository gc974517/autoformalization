\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:B0> := <nat:5> ; <var:z> := <var:B0> \end{verbatim} Allowing $ <var:i> = <var:y> $ prior to evaluating the set of instructions , it holds that we see $ <var:z> = <nat:5> $ after series of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is shown by typical Hoare reasoning . Jumping to the following commands in the set of instructions , \begin{verbatim} { <var:i> = <var:y> } <var:B0> := <nat:5> { <var:i> = <var:y> \land <var:B0> = <nat:5> } { <var:i> = <var:y> \land <var:B0> = <nat:5> } <var:z> := <var:B0{ <var:i> = <var:y> \land <var:z> = <nat:5> } \end{verbatim} This is guaranteed using the variable assignmet scheme defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:i> = <var:y> }} <var:B0> := <nat:5> ; <var:z> := <var:B0> {{ <var:z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 