\begin{document} \begin{theorem} Define a list of commands as follows \begin{verbatim} <var:R> := <nat:3> ; <var:R> := <nat:4> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:1> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:3> + <var:R> * <var:y> ; <var:R> := <nat:3> + <var:R> * <var:y> \end{verbatim} Given $ <var:y> = <var:g> $ for all $ <var:g> $ before interpreting this code segment then $ <var:R> = <nat:3> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> $ once list of commands is done . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:y> = <var:g> \} \\ <var:R> := <nat:3> ; \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \} \\ <var:R> := <nat:4> + <var:R> * <var:y> ; \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \times <var:g> + <nat:4> \} \\ <var:R> := <nat:2> + <var:R> * <var:y> ; \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:2> \} \\ <var:R> := <nat:1> + <var:R> * <var:y> ; \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> \} \\ <var:R> := <nat:2> + <var:R> * <var:y> ; \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:2> \} \\ <var:R> := <nat:3> + <var:R> * <var:y> ; \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:5> + <nat:4> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> \} \\ <var:R> := <nat:3> + <var:R> * <var:y> \\ \{ <var:y> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:6> + <nat:4> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:3> \} \end{eqnarray} Thus , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:y> = <var:g> }} <var:R> := <nat:3> ; <var:R> := <nat:4> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:1> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:3> + <var:R> * <var:y> ; <var:R> := <nat:3> + <var:R> * <var:y> {{ <var:R> = <nat:3> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 