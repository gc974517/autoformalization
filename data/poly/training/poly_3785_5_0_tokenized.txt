\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:Z> ; <var:J> := <var:V1> ; <var:J> := <var:J> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:Z> = <var:o> $ prior to evaluating our list of commands it must be that we have $ <var:J> = <nat:1> \cdot <var:o> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our segment of code is clear through Hoare techniques . Taking a look at the proceeding steps found in our series of commands , we have \verb | { <var:Z> = <var:o> } <var:V0> := <nat:8> { <var:Z> = <var:o> \land <var:V0> = <nat:8> } | , \verb | { <var:Z> = <var:o> \land <var:V0> = <nat:8> } <var:V1> := <nat:1> { <var:Z> = <var:o> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> } | , \verb | { <var:Z> = <var:o> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> } <var:V1> := <var:V1> * <var:Z> { <var:Z> = <var:o> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:o> } | , \verb | { <var:Z> = <var:o> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:o> } <var:J> := <var:V1> { <var:Z> = <var:o> \land <var:V0> = <nat:8> \land <var:J> = <nat:1> * <var:o> } | and \verb | { <var:Z> = <var:o> \land <var:V0> = <nat:8> \land <var:J> = <nat:1> * <var:o> } <var:J> := <var:J> + <var:V0{ <var:Z> = <var:o> \land <var:J> = <nat:1> * <var:o> + <nat:8> } | . This is rigorously given through the variable assignmet law from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:Z> ; <var:J> := <var:V1> ; <var:J> := <var:J> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Z> = <var:o> }} <def:poly> {{ <var:J> = <nat:1> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:V0> = <nat:8> /\ <var:J> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:J> = <nat:1> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 