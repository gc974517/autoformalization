\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:c> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:6> ; <var:b> := <var:F1> <var:b> := <var:b> + <var:F0> \end{verbatim} Allowing --- given any integers $ <var:l> $ --- that $ <var:c> = <var:l> $ before running our set of commands , then $ <var:b> = <nat:6> * <var:l> + <nat:8> $ once series of instructions is done . \end{theorem} \begin{proof} Note that the below decorated list of instructions . \begin{eqnarray} \{ <var:c> = <var:l> \} \\ <var:F1> := <var:c> ; \\ \{ <var:c> = <var:l> \land <var:F1> = <var:l> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:c> = <var:l> \land <var:F1> = <var:l> \land <var:F0> = <nat:8> \} \\ <var:F1> := <var:F1> * <nat:6> ; \\ \{ <var:c> = <var:l> \land <var:F1> = <nat:6> \cdot <var:l> \land <var:F0> = <nat:8> \} \\ <var:b> := <var:F1> \\ \{ <var:c> = <var:l> \land <var:F0> = <nat:8> \land <var:b> = <nat:6> \cdot <var:l> \} \\ <var:b> := <var:b> + <var:F0> \\ \{ <var:c> = <var:l> \land <var:b> = <nat:6> \cdot <var:l> + <nat:8> \} \end{eqnarray} Applying typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:c> = <var:l> }} <var:F1> := <var:c> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:6> ; <var:b> := <var:F1> <var:b> := <var:b> + <var:F0> {{ <var:b> = <nat:6> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:F1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:F1> = <var:l> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:F1> = <nat:6> * <var:l> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:F0> = <nat:8> /\ <var:b> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:b> = <nat:6> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 