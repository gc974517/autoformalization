\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:1> ; <var:l> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Given $ <var:o> = <var:I> $ ahead of running our program it holds that $ <var:l> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the code can be done by typical Hoare logic . Shifting focus toward the upcoming line of code contained in our list of commands , the code \verb | <var:c0> := <nat:1> ; | . This command takes $ \{ <var:o> = <var:I> \} $ into $ \{ <var:o> = <var:I> \land <var:c0> = <nat:1> \} $ . This is shown to be logically sound with the assignment rule defined in typical Hoare reasoning . Looking at the proceeding statement found in our series of commands , we see the variable assignmet command defining $ <var:c0$ toward $ <var:l>$ . This forwards the precondition $ \{ <var:o> = <var:I> \land <var:c0> = <nat:1> \} $ to the condition $ \{ <var:o> = <var:I> \land <var:l> = <nat:1> \} $ . This is ensured by the assignment inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:1> ; <var:l> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:o> = <var:I> }} <def:poly> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 