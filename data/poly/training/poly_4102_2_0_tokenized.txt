\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:9> ; <var:K> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Assume that $ <var:m> = <var:b> $ prior to the evaluation of this code , then we see $ <var:K> = <nat:9> $ when list of commands is done executing . \end{theorem} \begin{proof} See that the below decorated set of commands . \begin{eqnarray} \{ <var:m> = <var:b> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:m> = <var:b> \land <var:O0> = <nat:9> \} \\ <var:K> := <var:O0> \\ \{ <var:m> = <var:b> \land <var:K> = <nat:9> \} \end{eqnarray} Applying Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:K> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:m> = <var:b> }} <def:poly> {{ <var:K> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:K> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 