\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:7> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:G> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:G> ; <var:s2> := <var:s2> * <var:G> ; <var:O> := <var:s2> ; <var:O> := <var:O> + <var:s1> ; <var:O> := <var:O> + <var:s0> \end{verbatim} Assuming that $ <var:G> = <var:H> $ ahead of running our list of instructions , it must be that $ <var:O> = <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:G> = <var:H> \} \\ <var:s0> := <nat:7> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \} \\ <var:s1> := <nat:1> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \} \\ <var:s1> := <var:s1> * <var:G> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \times <var:H> \} \\ <var:s2> := <nat:7> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:7> \} \\ <var:s2> := <var:s2> * <var:G> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:7> \times <var:H> \} \\ <var:s2> := <var:s2> * <var:G> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:7> \times <var:H> ^ <nat:2> \} \\ <var:O> := <var:s2> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \times <var:H> \land <var:O> = <nat:7> \times <var:H> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:s1> ; \\ \{ <var:G> = <var:H> \land <var:s0> = <nat:7> \land <var:O> = <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> \} \\ <var:O> := <var:O> + <var:s0> \\ \{ <var:G> = <var:H> \land <var:O> = <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:7> \} \end{eqnarray} Considering the preceding argument , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:G> = <var:H> }} <var:s0> := <nat:7> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:G> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:G> ; <var:s2> := <var:s2> * <var:G> ; <var:O> := <var:s2> ; <var:O> := <var:O> + <var:s1> ; <var:O> := <var:O> + <var:s0> {{ <var:O> = <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:H> /\ <var:O> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:s0> = <nat:7> /\ <var:O> = <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:O> = <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 