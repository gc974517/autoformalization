\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <var:a> * <var:R> ; <var:a> := <nat:4> + <var:a> * <var:R> ; <var:a> := <nat:1> + <var:a> * <var:R> ; <var:a> := <nat:4> + <var:a> * <var:R> \end{verbatim} Allow it to be that $ <var:R> = <var:T> $ ahead of the execution of this code it follows that we have $ <var:a> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> $ once series of instructions has executed . \end{theorem} \begin{proof} The course of logic for this program can be shown through usual Hoare reasoning . Keeping momentum , we see the variable binding code \verb | <var:a> := <nat:2> ; | . This command takes the condition $ \{ <var:R> = <var:T> \} $ as the postcondition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> \} $ . Shifting focus toward the upcoming bit of code in our series of instructions , we have the variable update statement \verb | <var:a> := <var:a> * <var:R> ; | . This command takes the precondition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> \} $ toward the postcondition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> + \} $ . This is deduced through the assignment law given in Hoare techniques . Advancing , we have the assignment statement \verb | <var:a> := <nat:4> + <var:a> * <var:R> ; | . This command moves the condition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> + \} $ as the condition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> ^ <nat:2> + <nat:4> \} $ . Further , we have the command \verb | <var:a> := <nat:1> + <var:a> * <var:R> ; | . This takes the condition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> ^ <nat:2> + <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:1> \} $ . Jumping to the proceeding line of code seen in our list of commands , the variable update line letting $ <nat:4> + <var:a> * <var:R$ toward $ <var:a>$ . This code takes $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:1> \} $ to $ \{ <var:R> = <var:T> \land <var:a> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> \} $ . This is known to be sound through the assignment law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:R> = <var:T> }} <var:a> := <nat:2> ; <var:a> := <var:a> * <var:R> ; <var:a> := <nat:4> + <var:a> * <var:R> ; <var:a> := <nat:1> + <var:a> * <var:R> ; <var:a> := <nat:4> + <var:a> * <var:R> {{ <var:a> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:a> = <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:a> = <nat:2> * <var:T> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:a> = <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:a> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 