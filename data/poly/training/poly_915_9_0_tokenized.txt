\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:G> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:G> ; <var:m2> := <var:m2> * <var:G> ; <var:J> := <var:m2> ; <var:J> := <var:J> + <var:m1> ; <var:J> := <var:J> + <var:m0> \end{verbatim} Allowing $ <var:G> = <var:k> $ prior to running the list of commands , it holds that $ <var:J> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be accomplished by standard Hoare logic . Paying attention to the next bit of code seen in our code , we see the code defining $ <nat:4> $ as $ <var:m0>$ . This forwards the condition $ \{ <var:G> = <var:k> \} $ as $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \} $ . This is shown with the assignment law obtained from typical Hoare techniques . Moving forward to the subsequent line of code contained in our set of instructions , we have the assignment statement \verb | <var:m1> := <nat:2> ; | . This takes $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \} $ to the postcondition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \} $ . This is ensured through the assignment rule given in typical Hoare techniques . Advancing on , the variable update statement \verb | <var:m1> := <var:m1> * <var:G> ; | . This line moves $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \} $ to the postcondition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \} $ . Focusing on the subsequent step found in the set of instructions , the variable binding statement \verb | <var:m2> := <nat:2> ; | . This statement forwards the condition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \} $ as the postcondition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:m2> = <nat:2> \} $ . This is sound by the assignment rule of standard Hoare reasoning . Considering the proceeding statement in the program , the binding code \verb | <var:m2> := <var:m2> * <var:G> ; | . This command moves the condition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:m2> = <nat:2> \} $ to $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:m2> = <nat:2> \cdot <var:k> \} $ . Focusing on the proceeding bit of code contained in our list of instructions , the binding command \verb | <var:m2> := <var:m2> * <var:G> ; | . This forwards the precondition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:m2> = <nat:2> \cdot <var:k> \} $ toward the condition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:m2> = <nat:2> \cdot <var:k> ^ <nat:2> \} $ . Now , we see the variable assignmet statement assigning $ <var:m2> $ into $ <var:J>$ . This forwards $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:m2> = <nat:2> \cdot <var:k> ^ <nat:2> \} $ into the postcondition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:J> = <nat:2> \cdot <var:k> ^ <nat:2> \} $ . Stepping forward , we have the variable binding code letting $ <var:J> + <var:m1> $ into $ <var:J>$ . This takes the precondition $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:m1> = <nat:2> \cdot <var:k> \land <var:J> = <nat:2> \cdot <var:k> ^ <nat:2> \} $ into $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:J> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> \} $ . This is known to be sound by the assignment inference rule given by typical Hoare reasoning . Paying attention to the subsequent line of code contained in the program , we see the binding statement letting $ <var:J> + <var:m0$ as $ <var:J>$ . This forwards $ \{ <var:G> = <var:k> \land <var:m0> = <nat:4> \land <var:J> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> \} $ to $ \{ <var:G> = <var:k> \land <var:J> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:G> = <var:k> }} <var:m0> := <nat:4> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:G> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:G> ; <var:m2> := <var:m2> * <var:G> ; <var:J> := <var:m2> ; <var:J> := <var:J> + <var:m1> ; <var:J> := <var:J> + <var:m0> {{ <var:J> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:2> * <var:k> /\ <var:J> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:m0> = <nat:4> /\ <var:J> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:J> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 