\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G3> := <var:G2> * <var:E> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:5> ; <var:G2> := <var:G2> * <nat:8> ; <var:G3> := <var:G3> * <nat:7> ; <var:x> := <var:G3> <var:x> := <var:x> + <var:G2> <var:x> := <var:x> + <var:G1> <var:x> := <var:x> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Allow that we have $ <var:E> = <var:K> $ before interpreting this code segment it must be that we see $ <var:x> = <nat:7> \times <var:K> ^ <nat:3> + <nat:8> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> + <nat:8> $ after set of instructions has finished executing . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:E> = <var:K> \} \\ <var:G1> := <var:E> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <var:K> \} \\ <var:G2> := <var:G1> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> \land <var:G3> = <var:K> ^ <nat:3> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> \land <var:G3> = <var:K> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G1> := <var:G1> * <nat:5> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <nat:5> * <var:K> \land <var:G2> = <var:K> ^ <nat:2> \land <var:G3> = <var:K> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G2> := <var:G2> * <nat:8> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <nat:5> * <var:K> \land <var:G2> = <nat:8> * <var:K> ^ <nat:2> \land <var:G3> = <var:K> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G3> := <var:G3> * <nat:7> ; \\ \{ <var:E> = <var:K> \land <var:G1> = <nat:5> * <var:K> \land <var:G2> = <nat:8> * <var:K> ^ <nat:2> \land <var:G3> = <nat:7> * <var:K> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:x> := <var:G3> \\ \{ <var:E> = <var:K> \land <var:G1> = <nat:5> * <var:K> \land <var:G2> = <nat:8> * <var:K> ^ <nat:2> \land <var:G0> = <nat:8> \land <var:x> = <nat:7> * <var:K> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:G2> \\ \{ <var:E> = <var:K> \land <var:G1> = <nat:5> * <var:K> \land <var:G0> = <nat:8> \land <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:G1> \\ \{ <var:E> = <var:K> \land <var:G0> = <nat:8> \land <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:5> * <var:K> \} \\ <var:x> := <var:x> + <var:G0> \\ \{ <var:E> = <var:K> \land <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:8> \} \end{eqnarray} Given the preceding argument , the set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G3> := <var:G2> * <var:E> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:5> ; <var:G2> := <var:G2> * <nat:8> ; <var:G3> := <var:G3> * <nat:7> ; <var:x> := <var:G3> <var:x> := <var:x> + <var:G2> <var:x> := <var:x> + <var:G1> <var:x> := <var:x> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:E> = <var:K> }} <def:poly> {{ <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <var:K> /\ <var:G2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <var:K> /\ <var:G2> = <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <var:K> /\ <var:G2> = <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <nat:5> * <var:K> /\ <var:G2> = <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <nat:5> * <var:K> /\ <var:G2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <nat:5> * <var:K> /\ <var:G2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:G3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <nat:5> * <var:K> /\ <var:G2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:G0> = <nat:8> /\ <var:x> = <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G1> = <nat:5> * <var:K> /\ <var:G0> = <nat:8> /\ <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G0> = <nat:8> /\ <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:x> = <nat:7> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 