\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:B1> := <var:E> ; <var:B2> := <var:B1> * <var:E> ; <var:B3> := <var:B2> * <var:E> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:5> ; <var:T> := <var:B3> <var:T> := <var:T> + <var:B2> <var:T> := <var:T> + <var:B1> <var:T> := <var:T> + <var:B0> \end{verbatim} Given --- given $ <var:P> $ --- that we have $ <var:E> = <var:P> $ before the execution of the list of commands it follows that we see $ <var:T> = <nat:5> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:3> $ after code has exited . \end{theorem} \begin{proof} The flow of logic for our code segment is accomplished through typical Hoare techniques . Advancing to the next lines of codefound in the code segment , \[ \begin{tabular} {rcl} \{ <var:E> = <var:P> \} & <var:B1> := <var:E> & \{ <var:E> = <var:P> \land <var:B1> = <var:P> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <var:P> \} & <var:B2> := <var:B1> * <var:E> & \{ <var:E> = <var:P> \land <var:B1> = <var:P> \land <var:B2> = <var:P> ^ <nat:2> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <var:P> \land <var:B2> = <var:P> ^ <nat:2> \} & <var:B3> := <var:B2> * <var:E> & \{ <var:E> = <var:P> \land <var:B1> = <var:P> \land <var:B2> = <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <var:P> \land <var:B2> = <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \} & <var:B0> := <nat:3> & \{ <var:E> = <var:P> \land <var:B1> = <var:P> \land <var:B2> = <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <var:P> \land <var:B2> = <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:B1> := <var:B1> * <nat:1> & \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:B2> := <var:B2> * <nat:4> & \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <nat:4> * <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <nat:4> * <var:P> ^ <nat:2> \land <var:B3> = <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:B3> := <var:B3> * <nat:5> & \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <nat:4> * <var:P> ^ <nat:2> \land <var:B3> = <nat:5> * <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <nat:4> * <var:P> ^ <nat:2> \land <var:B3> = <nat:5> * <var:P> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:T> := <var:B3& \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <nat:4> * <var:P> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:T> = <nat:5> * <var:P> ^ <nat:3> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B2> = <nat:4> * <var:P> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:T> = <nat:5> * <var:P> ^ <nat:3> \} & <var:T> := <var:T> + <var:B2& \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B0> = <nat:3> \land <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> \} \\ \{ <var:E> = <var:P> \land <var:B1> = <nat:1> * <var:P> \land <var:B0> = <nat:3> \land <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> \} & <var:T> := <var:T> + <var:B1& \{ <var:E> = <var:P> \land <var:B0> = <nat:3> \land <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> \} \end{tabular} This is ensured using the variable update law given by usual Hoare reasoning . Shifting focus toward the subsequent bit of code seen in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:P> \} & <var:B1> := <var:E> & \{ <var:E> = <var:P> \land <var:B1> = <var:P> \} \end{tabular} This is rigorously given with the variable assignmet law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:E> = <var:P> }} <var:B1> := <var:E> ; <var:B2> := <var:B1> * <var:E> ; <var:B3> := <var:B2> * <var:E> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:5> ; <var:T> := <var:B3> <var:T> := <var:T> + <var:B2> <var:T> := <var:T> + <var:B1> <var:T> := <var:T> + <var:B0> {{ <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <var:P> /\ <var:B2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <var:P> /\ <var:B2> = <var:P> ^ <nat:2> /\ <var:B3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <var:P> /\ <var:B2> = <var:P> ^ <nat:2> /\ <var:B3> = <var:P> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <nat:1> * <var:P> /\ <var:B2> = <var:P> ^ <nat:2> /\ <var:B3> = <var:P> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <nat:1> * <var:P> /\ <var:B2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:B3> = <var:P> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <nat:1> * <var:P> /\ <var:B2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:B3> = <nat:5> * <var:P> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <nat:1> * <var:P> /\ <var:B2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:B0> = <nat:3> /\ <var:T> = <nat:5> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B1> = <nat:1> * <var:P> /\ <var:B0> = <nat:3> /\ <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B0> = <nat:3> /\ <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:T> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 