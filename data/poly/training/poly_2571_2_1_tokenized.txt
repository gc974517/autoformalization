\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:2> ; <var:O> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allowing it to be that $ <var:T> = <var:h> $ ahead of running this set of commands it follows that we see $ <var:O> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our program can be seen through typical Hoare logic . Taking a look at the subsequent pieces of code in the list of instructions , \begin{verbatim} { <var:T> = <var:h> } <var:J0> := <nat:2> { <var:T> = <var:h> \land <var:J0> = <nat:2> } { <var:T> = <var:h> \land <var:J0> = <nat:2> } <var:O> := <var:J0{ <var:T> = <var:h> \land <var:O> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:2> ; <var:O> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:T> = <var:h> }} <def:poly> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 