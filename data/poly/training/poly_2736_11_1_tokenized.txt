\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as \begin{verbatim} <var:M1> := <var:c> ; <var:M2> := <var:M1> * <var:c> ; <var:M3> := <var:M2> * <var:c> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:3> ; <var:M3> := <var:M3> * <nat:3> ; <var:I> := <var:M3> <var:I> := <var:I> + <var:M2> <var:I> := <var:I> + <var:M1> <var:I> := <var:I> + <var:M0> \end{verbatim} Given that we have $ <var:c> = <var:m> $ before interpreting this set of commands , it must be that we have $ <var:I> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:3> $ after series of instructions finishes . \end{theorem} \begin{proof} Proving correctness for this list of instructions can be demonstrated through usual Hoare techniques . Taking a look at the upcoming statement in our set of instructions , we have the environment update line letting $ <var:c> $ to $ <var:M1>$ . This command transfers the precondition $ \{ <var:c> = <var:m> \} $ into the postcondition $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \} $ . Moving on to the proceeding statement in our program , we see the binding code \verb | <var:M2> := <var:M1> * <var:c> ; | . This advances $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \} $ into the postcondition $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \} $ . Moving forward to the next step , we have the binding command letting $ <var:M2> * <var:c> $ to $ <var:M3>$ . This forwards the precondition $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \} $ into the postcondition $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \} $ . Immediately after , we have the binding line assigning $ <nat:3> $ as $ <var:M0>$ . This takes $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \} $ as the condition $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ . Observing the next line of code found in our program , we have the environment update line yielding $ <var:M1> * <nat:4> $ toward $ <var:M1>$ . This advances the precondition $ \{ <var:c> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ toward the condition $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ . Looking at the next bit of code found in our list of commands , the line defining $ <var:M2> * <nat:3> $ into $ <var:M2>$ . This statement advances $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ as $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ . This is deduced through the assignment rule given in typical Hoare techniques . After , we have the environment update line binding $ <var:M3> * <nat:3> $ to $ <var:M3>$ . This statement forwards the condition $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ to the condition $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:M3> = <nat:3> \times <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ . This is sound by the assignment rule obtained from Hoare logic . Moving on , we have the variable update statement \verb | <var:I> := <var:M3> | . This forwards $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:M3> = <nat:3> \times <var:m> ^ <nat:3> \land <var:M0> = <nat:3> \} $ into the postcondition $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:M0> = <nat:3> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> \} $ . Paying attention to the next line of code in our code segment , we see the variable update line \verb | <var:I> := <var:I> + <var:M2> | . This command moves $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:M0> = <nat:3> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> \} $ as $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M0> = <nat:3> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> \} $ . After , the environment update command giving $ <var:I> + <var:M1$ into $ <var:I>$ . This advances the condition $ \{ <var:c> = <var:m> \land <var:M1> = <nat:4> \times <var:m> \land <var:M0> = <nat:3> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:m> \land <var:M0> = <nat:3> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> \} $ . This is deduced through the assignment rule given by standard Hoare reasoning . After , the variable binding command yielding $ <var:I> + <var:M0$ as $ <var:I>$ . This line moves the precondition $ \{ <var:c> = <var:m> \land <var:M0> = <nat:3> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> \} $ as the condition $ \{ <var:c> = <var:m> \land <var:I> = <nat:3> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:c> = <var:m> }} <var:M1> := <var:c> ; <var:M2> := <var:M1> * <var:c> ; <var:M3> := <var:M2> * <var:c> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:3> ; <var:M3> := <var:M3> * <nat:3> ; <var:I> := <var:M3> <var:I> := <var:I> + <var:M2> <var:I> := <var:I> + <var:M1> <var:I> := <var:I> + <var:M0> {{ <var:I> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <var:m> /\ <var:M2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <var:m> /\ <var:M2> = <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <var:m> /\ <var:M2> = <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <nat:4> * <var:m> /\ <var:M2> = <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <nat:4> * <var:m> /\ <var:M2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <nat:4> * <var:m> /\ <var:M2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <nat:4> * <var:m> /\ <var:M2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:M0> = <nat:3> /\ <var:I> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M1> = <nat:4> * <var:m> /\ <var:M0> = <nat:3> /\ <var:I> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M0> = <nat:3> /\ <var:I> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:I> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 