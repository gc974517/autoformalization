\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:P> ; <var:Q2> := <var:Q1> * <var:P> ; <var:Q3> := <var:Q2> * <var:P> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:Q2> := <var:Q2> * <nat:3> ; <var:Q3> := <var:Q3> * <nat:4> ; <var:B> := <var:Q3> <var:B> := <var:B> + <var:Q2> <var:B> := <var:B> + <var:Q1> <var:B> := <var:B> + <var:Q0> \end{verbatim} Assuming --- for positive integer coefficients $ <var:L> $ --- it to be that $ <var:P> = <var:L> $ before the execution of this series of commands it must be that we see $ <var:B> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions can be shown by Hoare reasoning . Jumping to the next piece of code found in our list of instructions , we have \begin{verbatim} { <var:P> = <var:L> } <var:Q1> := <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> } \end{verbatim} Advancing to the following bits of codefound in the set of instructions , \begin{verbatim} { <var:P> = <var:L> } <var:Q1> := <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> } { <var:P> = <var:L> \land <var:Q1> = <var:L> } <var:Q2> := <var:Q1> * <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> } { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> } <var:Q3> := <var:Q2> * <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q3> = <var:L> ^ <nat:3> } { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q3> = <var:L> ^ <nat:3> } <var:Q0> := <nat:2> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q3> = <var:L> ^ <nat:3> \land <var:Q0> = <nat:2> } \end{verbatim} Jumping to the proceeding steps contained in the series of commands , we see \begin{verbatim} { <var:P> = <var:L> } <var:Q1> := <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> } { <var:P> = <var:L> \land <var:Q1> = <var:L> } <var:Q2> := <var:Q1> * <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> } { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> } <var:Q3> := <var:Q2> * <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q3> = <var:L> ^ <nat:3> } { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q3> = <var:L> ^ <nat:3> } <var:Q0> := <nat:2> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q3> = <var:L> ^ <nat:3> \land <var:Q0> = <nat:2> } \end{verbatim} This is guaranteed through the variable binding inference rule from typical Hoare techniques . Moving forward , we see \begin{verbatim} { <var:P> = <var:L> } <var:Q1> := <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> } { <var:P> = <var:L> \land <var:Q1> = <var:L> } <var:Q2> := <var:Q1> * <var:P> { <var:P> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:P> = <var:L> }} <var:Q1> := <var:P> ; <var:Q2> := <var:Q1> * <var:P> ; <var:Q3> := <var:Q2> * <var:P> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:Q2> := <var:Q2> * <nat:3> ; <var:Q3> := <var:Q3> * <nat:4> ; <var:B> := <var:Q3> <var:B> := <var:B> + <var:Q2> <var:B> := <var:B> + <var:Q1> <var:B> := <var:B> + <var:Q0> {{ <var:B> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> /\ <var:Q3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> /\ <var:Q3> = <var:L> ^ <nat:3> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <nat:1> * <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> /\ <var:Q3> = <var:L> ^ <nat:3> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <nat:1> * <var:L> /\ <var:Q2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:Q3> = <var:L> ^ <nat:3> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <nat:1> * <var:L> /\ <var:Q2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:L> ^ <nat:3> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <nat:1> * <var:L> /\ <var:Q2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:Q0> = <nat:2> /\ <var:B> = <nat:4> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q1> = <nat:1> * <var:L> /\ <var:Q0> = <nat:2> /\ <var:B> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:Q0> = <nat:2> /\ <var:B> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:B> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 