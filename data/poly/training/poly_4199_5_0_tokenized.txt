\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:R> ; <var:x> := <var:d1> ; <var:x> := <var:x> + <var:d0> \end{verbatim} Allowing $ <var:R> = <var:U> $ before executing this series of commands then $ <var:x> = <nat:6> * <var:U> + <nat:3> $ after series of instructions is done executing . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:R> = <var:U> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:R> = <var:U> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:6> ; \\ \{ <var:R> = <var:U> \land <var:d0> = <nat:3> \land <var:d1> = <nat:6> \} \\ <var:d1> := <var:d1> * <var:R> ; \\ \{ <var:R> = <var:U> \land <var:d0> = <nat:3> \land <var:d1> = <nat:6> \times <var:U> \} \\ <var:x> := <var:d1> ; \\ \{ <var:R> = <var:U> \land <var:d0> = <nat:3> \land <var:x> = <nat:6> \times <var:U> \} \\ <var:x> := <var:x> + <var:d0> \\ \{ <var:R> = <var:U> \land <var:x> = <nat:6> \times <var:U> + <nat:3> \} \end{eqnarray} As a result , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:R> = <var:U> }} <var:d0> := <nat:3> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:R> ; <var:x> := <var:d1> ; <var:x> := <var:x> + <var:d0> {{ <var:x> = <nat:6> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:d0> = <nat:3> /\ <var:x> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:x> = <nat:6> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 