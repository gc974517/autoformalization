\begin{document} \begin{theorem} Let the following list of commands as follows \begin{verbatim} <var:w0> := <nat:4> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:x> ; <var:w2> := <nat:1> ; <var:w2> := <var:w2> * <var:x> ; <var:w2> := <var:w2> * <var:x> ; <var:L> := <var:w2> ; <var:L> := <var:L> + <var:w1> ; <var:L> := <var:L> + <var:w0> \end{verbatim} Given $ <var:x> = <var:o> $ ahead of interpreting this list of instructions it must be that we see $ <var:L> = <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> $ after code segment has exited . \end{theorem} \begin{proof} The course of logic for the list of instructions is given through standard Hoare techniques . Jumping to the subsequent pieces of code seen in our list of instructions , we see \verb | { <var:x> = <var:o> } <var:w0> := <nat:4> { <var:x> = <var:o> \land <var:w0> = <nat:4> } | , \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> } <var:w1> := <nat:4> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> } | , \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> } <var:w1> := <var:w1> * <var:x> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> } | , \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> } <var:w2> := <nat:1> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:w2> = <nat:1> } | , \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:w2> = <nat:1> } <var:w2> := <var:w2> * <var:x> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:w2> = <nat:1> \times <var:o> } | , \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:w2> = <nat:1> \times <var:o> } <var:w2> := <var:w2> * <var:x> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:w2> = <nat:1> \times <var:o> ^ <nat:2> } | , \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:w2> = <nat:1> \times <var:o> ^ <nat:2> } <var:L> := <var:w2> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:L> = <nat:1> \times <var:o> ^ <nat:2> } | and \verb | { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:w1> = <nat:4> \times <var:o> \land <var:L> = <nat:1> \times <var:o> ^ <nat:2> } <var:L> := <var:L> + <var:w1> { <var:x> = <var:o> \land <var:w0> = <nat:4> \land <var:L> = <nat:1> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> } | . This is deduced through the environment update scheme of typical Hoare reasoning . Paying attention to the upcoming step in the list of commands , we see \verb | { <var:x> = <var:o> } <var:w0> := <nat:4> { <var:x> = <var:o> \land <var:w0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:x> = <var:o> }} <var:w0> := <nat:4> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:x> ; <var:w2> := <nat:1> ; <var:w2> := <var:w2> * <var:x> ; <var:w2> := <var:w2> * <var:x> ; <var:L> := <var:w2> ; <var:L> := <var:L> + <var:w1> ; <var:L> := <var:L> + <var:w0> {{ <var:L> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:4> * <var:o> /\ <var:w2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:4> * <var:o> /\ <var:w2> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:4> * <var:o> /\ <var:w2> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:4> * <var:o> /\ <var:L> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:w0> = <nat:4> /\ <var:L> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:L> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 