\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:5> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:b> ; <var:t> := <var:M1> ; <var:t> := <var:t> + <var:M0> \end{verbatim} Allowing that we have $ <var:b> = <var:h> $ prior to the evaluation of the series of instructions , it follows that we see $ <var:t> = <nat:8> * <var:h> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:h> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:b> = <var:h> \land <var:M0> = <nat:5> \} \\ <var:M1> := <nat:8> ; \\ \{ <var:b> = <var:h> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \} \\ <var:M1> := <var:M1> * <var:b> ; \\ \{ <var:b> = <var:h> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> * <var:h> \} \\ <var:t> := <var:M1> ; \\ \{ <var:b> = <var:h> \land <var:M0> = <nat:5> \land <var:t> = <nat:8> * <var:h> \} \\ <var:t> := <var:t> + <var:M0> \\ \{ <var:b> = <var:h> \land <var:t> = <nat:8> * <var:h> + <nat:5> \} \end{eqnarray} Using standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:b> = <var:h> }} <var:M0> := <nat:5> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:b> ; <var:t> := <var:M1> ; <var:t> := <var:t> + <var:M0> {{ <var:t> = <nat:8> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:M0> = <nat:5> /\ <var:t> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:t> = <nat:8> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 