\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:9> ; <var:Z> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:v> = <var:r> $ ( for any positive integer coefficients $ <var:r> $ ) prior to the evaluation of the code segment , it follows that we see $ <var:Z> = <nat:9> $ once segment of code terminates . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:r> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:v> = <var:r> \land <var:K0> = <nat:9> \} \\ <var:Z> := <var:K0> \\ \{ <var:v> = <var:r> \land <var:Z> = <nat:9> \} \end{eqnarray} Thusly , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:9> ; <var:Z> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:v> = <var:r> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 