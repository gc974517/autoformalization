\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:K1> := <var:b> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:5> ; <var:l> := <var:K1> <var:l> := <var:l> + <var:K0> \end{verbatim} Assume that $ <var:b> = <var:p> $ prior to the evaluation of this code segment it must be that we have $ <var:l> = <nat:5> \times <var:p> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:b> = <var:p> \} \\ <var:K1> := <var:b> ; \\ \{ <var:b> = <var:p> \land <var:K1> = <var:p> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:b> = <var:p> \land <var:K1> = <var:p> \land <var:K0> = <nat:1> \} \\ <var:K1> := <var:K1> * <nat:5> ; \\ \{ <var:b> = <var:p> \land <var:K1> = <nat:5> \times <var:p> \land <var:K0> = <nat:1> \} \\ <var:l> := <var:K1> \\ \{ <var:b> = <var:p> \land <var:K0> = <nat:1> \land <var:l> = <nat:5> \times <var:p> \} \\ <var:l> := <var:l> + <var:K0> \\ \{ <var:b> = <var:p> \land <var:l> = <nat:5> \times <var:p> + <nat:1> \} \end{eqnarray} Thusly , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:b> = <var:p> }} <var:K1> := <var:b> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:5> ; <var:l> := <var:K1> <var:l> := <var:l> + <var:K0> {{ <var:l> = <nat:5> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:K1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:K1> = <var:p> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:K1> = <nat:5> * <var:p> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:K0> = <nat:1> /\ <var:l> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:l> = <nat:5> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 