\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:1> ; <var:V> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:r> = <var:Q> $ before running our segment of code it follows that $ <var:V> = <nat:1> $ when set of instructions has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is given using standard Hoare techniques . Jumping to the following line in our program , we have \begin{verbatim} { <var:r> = <var:Q> } <var:c0> := <nat:1> { <var:r> = <var:Q> \land <var:c0> = <nat:1> } \end{verbatim} Moving onward , \begin{verbatim} { <var:r> = <var:Q> } <var:c0> := <nat:1> { <var:r> = <var:Q> \land <var:c0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:1> ; <var:V> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:r> = <var:Q> }} <def:poly> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 