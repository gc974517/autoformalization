\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:B1> := <var:u> ; <var:B2> := <var:B1> * <var:u> ; <var:B3> := <var:B2> * <var:u> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:3> ; <var:B3> := <var:B3> * <nat:3> ; <var:I> := <var:B3> <var:I> := <var:I> + <var:B2> <var:I> := <var:I> + <var:B1> <var:I> := <var:I> + <var:B0> \end{verbatim} Allow that $ <var:u> = <var:R> $ prior to executing this program it must be that we see $ <var:I> = <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:u> = <var:R> \} \\ <var:B1> := <var:u> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <var:R> \} \\ <var:B2> := <var:B1> * <var:u> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:u> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \} \\ <var:B0> := <nat:3> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ <var:B1> := <var:B1> * <nat:1> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <nat:1> \times <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ <var:B2> := <var:B2> * <nat:3> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <nat:1> \times <var:R> \land <var:B2> = <nat:3> \times <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ <var:B3> := <var:B3> * <nat:3> ; \\ \{ <var:u> = <var:R> \land <var:B1> = <nat:1> \times <var:R> \land <var:B2> = <nat:3> \times <var:R> ^ <nat:2> \land <var:B3> = <nat:3> \times <var:R> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ <var:I> := <var:B3> \\ \{ <var:u> = <var:R> \land <var:B1> = <nat:1> \times <var:R> \land <var:B2> = <nat:3> \times <var:R> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:I> = <nat:3> \times <var:R> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:B2> \\ \{ <var:u> = <var:R> \land <var:B1> = <nat:1> \times <var:R> \land <var:B0> = <nat:3> \land <var:I> = <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:B1> \\ \{ <var:u> = <var:R> \land <var:B0> = <nat:3> \land <var:I> = <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> \} \\ <var:I> := <var:I> + <var:B0> \\ \{ <var:u> = <var:R> \land <var:I> = <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:u> = <var:R> }} <var:B1> := <var:u> ; <var:B2> := <var:B1> * <var:u> ; <var:B3> := <var:B2> * <var:u> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:3> ; <var:B3> := <var:B3> * <nat:3> ; <var:I> := <var:B3> <var:I> := <var:I> + <var:B2> <var:I> := <var:I> + <var:B1> <var:I> := <var:I> + <var:B0> {{ <var:I> = <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <nat:1> * <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <nat:1> * <var:R> /\ <var:B2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <nat:1> * <var:R> /\ <var:B2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:R> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <nat:1> * <var:R> /\ <var:B2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:B0> = <nat:3> /\ <var:I> = <nat:3> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B1> = <nat:1> * <var:R> /\ <var:B0> = <nat:3> /\ <var:I> = <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:B0> = <nat:3> /\ <var:I> = <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:I> = <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 