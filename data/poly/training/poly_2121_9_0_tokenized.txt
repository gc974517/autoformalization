\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:8> ; <var:D1> := <var:D1> * <var:e> ; <var:D2> := <nat:8> ; <var:D2> := <var:D2> * <var:e> ; <var:D2> := <var:D2> * <var:e> ; <var:C> := <var:D2> ; <var:C> := <var:C> + <var:D1> ; <var:C> := <var:C> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Assuming --- given all $ <var:z> \in \mathbb{N} $ --- it to be that $ <var:e> = <var:z> $ prior to the execution of this code segment , it holds that we see $ <var:C> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the code can be shown by the following decorated code segment . \begin{eqnarray} \{ <var:e> = <var:z> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \} \\ <var:D1> := <nat:8> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:D1> = <nat:8> \} \\ <var:D1> := <var:D1> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:D1> = <nat:8> * <var:z> \} \\ <var:D2> := <nat:8> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:D1> = <nat:8> * <var:z> \land <var:D2> = <nat:8> \} \\ <var:D2> := <var:D2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:D1> = <nat:8> * <var:z> \land <var:D2> = <nat:8> * <var:z> \} \\ <var:D2> := <var:D2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:D1> = <nat:8> * <var:z> \land <var:D2> = <nat:8> * <var:z> ^ <nat:2> \} \\ <var:C> := <var:D2> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:D1> = <nat:8> * <var:z> \land <var:C> = <nat:8> * <var:z> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:D1> ; \\ \{ <var:e> = <var:z> \land <var:D0> = <nat:3> \land <var:C> = <nat:8> * <var:z> ^ <nat:2> + <nat:8> * <var:z> \} \\ <var:C> := <var:C> + <var:D0> \\ \{ <var:e> = <var:z> \land <var:C> = <nat:8> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:D1> := <nat:8> ; <var:D1> := <var:D1> * <var:e> ; <var:D2> := <nat:8> ; <var:D2> := <var:D2> * <var:e> ; <var:D2> := <var:D2> * <var:e> ; <var:C> := <var:D2> ; <var:C> := <var:C> + <var:D1> ; <var:C> := <var:C> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <def:poly> {{ <var:C> = <nat:8> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:8> * <var:z> /\ <var:D2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:8> * <var:z> /\ <var:D2> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:8> * <var:z> /\ <var:D2> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:8> * <var:z> /\ <var:C> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:D0> = <nat:3> /\ <var:C> = <nat:8> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:C> = <nat:8> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 