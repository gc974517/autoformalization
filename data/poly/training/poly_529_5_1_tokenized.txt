\begin{document} \begin{theorem} Let the following set of commands as \begin{verbatim} <var:V1> := <var:l> ; <var:V0> := <nat:9> ; <var:V1> := <var:V1> * <nat:5> ; <var:o> := <var:V1> <var:o> := <var:o> + <var:V0> \end{verbatim} Assuming , given some $ <var:P> \in \mathbb{Z}^+ $ , it to hold that $ <var:l> = <var:P> $ prior to evaluating this set of commands , then we see $ <var:o> = <nat:5> \times <var:P> + <nat:9> $ once series of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for our code is done using the following decorated set of instructions . \begin{eqnarray} \{ <var:l> = <var:P> \} \\ <var:V1> := <var:l> ; \\ \{ <var:l> = <var:P> \land <var:V1> = <var:P> \} \\ <var:V0> := <nat:9> ; \\ \{ <var:l> = <var:P> \land <var:V1> = <var:P> \land <var:V0> = <nat:9> \} \\ <var:V1> := <var:V1> * <nat:5> ; \\ \{ <var:l> = <var:P> \land <var:V1> = <nat:5> * <var:P> \land <var:V0> = <nat:9> \} \\ <var:o> := <var:V1> \\ \{ <var:l> = <var:P> \land <var:V0> = <nat:9> \land <var:o> = <nat:5> * <var:P> \} \\ <var:o> := <var:o> + <var:V0> \\ \{ <var:l> = <var:P> \land <var:o> = <nat:5> * <var:P> + <nat:9> \} \end{eqnarray} Using typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:l> = <var:P> }} <var:V1> := <var:l> ; <var:V0> := <nat:9> ; <var:V1> := <var:V1> * <nat:5> ; <var:o> := <var:V1> <var:o> := <var:o> + <var:V0> {{ <var:o> = <nat:5> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:V1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:V1> = <var:P> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:V1> = <nat:5> * <var:P> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:V0> = <nat:9> /\ <var:o> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:o> = <nat:5> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 