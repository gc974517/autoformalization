\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:X> ; <var:g> := <var:Z1> ; <var:g> := <var:g> + <var:Z0> \end{verbatim} Allow that $ <var:X> = <var:T> $ before executing this program , it must be that we have $ <var:g> = <nat:9> \cdot <var:T> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is demonstrated using typical Hoare reasoning . Now , we have the variable update command letting $ <nat:3> $ toward $ <var:Z0>$ . This line takes $ \{ <var:X> = <var:T> \} $ into the postcondition $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \} $ . This is ensured by the assignment law of Hoare logic . After , we have the variable update code yielding $ <nat:9> $ to $ <var:Z1>$ . This takes the condition $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \} $ toward $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> \} $ . Moving forward , we have the environment update line \verb | <var:Z1> := <var:Z1> * <var:X> ; | . This moves the precondition $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> \} $ into $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:T> \} $ . Going to the next step , the variable assignmet statement \verb | <var:g> := <var:Z1> ; | . This command advances the condition $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:T> \} $ as $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \land <var:g> = <nat:9> * <var:T> \} $ . This is sound using the assignment law found in Hoare reasoning . Stepping forward , we have the binding code giving $ <var:g> + <var:Z0$ into $ <var:g>$ . This advances the precondition $ \{ <var:X> = <var:T> \land <var:Z0> = <nat:3> \land <var:g> = <nat:9> * <var:T> \} $ toward the postcondition $ \{ <var:X> = <var:T> \land <var:g> = <nat:9> * <var:T> + <nat:3> \} $ . This is shown using the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <var:Z0> := <nat:3> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:X> ; <var:g> := <var:Z1> ; <var:g> := <var:g> + <var:Z0> {{ <var:g> = <nat:9> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:Z0> = <nat:3> /\ <var:g> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:g> = <nat:9> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 