\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} : \begin{verbatim} <var:H1> := <var:x> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:4> ; <var:d> := <var:H1> <var:d> := <var:d> + <var:H0> \end{verbatim} Assume $ <var:x> = <var:U> $ prior to running this list of instructions it must be that we have $ <var:d> = <nat:4> * <var:U> + <nat:1> $ when program has executed . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:x> = <var:U> \} \\ <var:H1> := <var:x> ; \\ \{ <var:x> = <var:U> \land <var:H1> = <var:U> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:x> = <var:U> \land <var:H1> = <var:U> \land <var:H0> = <nat:1> \} \\ <var:H1> := <var:H1> * <nat:4> ; \\ \{ <var:x> = <var:U> \land <var:H1> = <nat:4> * <var:U> \land <var:H0> = <nat:1> \} \\ <var:d> := <var:H1> \\ \{ <var:x> = <var:U> \land <var:H0> = <nat:1> \land <var:d> = <nat:4> * <var:U> \} \\ <var:d> := <var:d> + <var:H0> \\ \{ <var:x> = <var:U> \land <var:d> = <nat:4> * <var:U> + <nat:1> \} \end{eqnarray} Therefore , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:x> = <var:U> }} <var:H1> := <var:x> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:4> ; <var:d> := <var:H1> <var:d> := <var:d> + <var:H0> {{ <var:d> = <nat:4> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:H1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:H1> = <var:U> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:H1> = <nat:4> * <var:U> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:H0> = <nat:1> /\ <var:d> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:d> = <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 