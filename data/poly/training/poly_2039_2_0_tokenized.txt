\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:r0> := <nat:3> ; <var:T> := <var:r0> \end{verbatim} Assume $ <var:u> = <var:B> $ before running our list of commands , it must be that we have $ <var:T> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the program can be accomplished using usual Hoare techniques . Moving forward to the next step , we have the variable assignmet code \verb | <var:r0> := <nat:3> ; | . This redefines the precondition $ \{ <var:u> = <var:B> \} $ to the condition $ \{ <var:u> = <var:B> \land <var:r0> = <nat:3> \} $ . Moving onward , we see the binding statement giving $ <var:r0$ into $ <var:T>$ . This transfers $ \{ <var:u> = <var:B> \land <var:r0> = <nat:3> \} $ as the condition $ \{ <var:u> = <var:B> \land <var:T> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:u> = <var:B> }} <var:r0> := <nat:3> ; <var:T> := <var:r0> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 