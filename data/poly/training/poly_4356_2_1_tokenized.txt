\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:5> ; <var:v> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:I> = <var:s> $ ahead of the execution of the list of instructions , then we see $ <var:v> = <nat:5> $ once series of instructions has executed . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:I> = <var:s> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:I> = <var:s> \land <var:r0> = <nat:5> \} \\ <var:v> := <var:r0> \\ \{ <var:I> = <var:s> \land <var:v> = <nat:5> \} \end{eqnarray} Considering the preceding argument , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:5> ; <var:v> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:I> = <var:s> }} <def:poly> {{ <var:v> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:v> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 