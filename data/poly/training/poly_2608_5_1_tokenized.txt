\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:E1> := <var:j> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:3> ; <var:a> := <var:E1> <var:a> := <var:a> + <var:E0> \end{verbatim} Assume it to hold that $ <var:j> = <var:n> $ prior to interpreting the series of commands , it must be that $ <var:a> = <nat:3> \times <var:n> + <nat:7> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives us : \begin{eqnarray} \{ <var:j> = <var:n> \} \\ <var:E1> := <var:j> ; \\ \{ <var:j> = <var:n> \land <var:E1> = <var:n> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:j> = <var:n> \land <var:E1> = <var:n> \land <var:E0> = <nat:7> \} \\ <var:E1> := <var:E1> * <nat:3> ; \\ \{ <var:j> = <var:n> \land <var:E1> = <nat:3> \times <var:n> \land <var:E0> = <nat:7> \} \\ <var:a> := <var:E1> \\ \{ <var:j> = <var:n> \land <var:E0> = <nat:7> \land <var:a> = <nat:3> \times <var:n> \} \\ <var:a> := <var:a> + <var:E0> \\ \{ <var:j> = <var:n> \land <var:a> = <nat:3> \times <var:n> + <nat:7> \} \end{eqnarray} Hence , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:j> = <var:n> }} <var:E1> := <var:j> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:3> ; <var:a> := <var:E1> <var:a> := <var:a> + <var:E0> {{ <var:a> = <nat:3> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:E1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:E1> = <var:n> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:E1> = <nat:3> * <var:n> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:E0> = <nat:7> /\ <var:a> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:a> = <nat:3> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 