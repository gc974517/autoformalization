\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:9> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:q> ; <var:Q> := <var:b1> ; <var:Q> := <var:Q> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Assuming it to hold that $ <var:q> = <var:i> $ ( given some positive numbers $ <var:i> $ ) prior to executing our segment of code , it follows that we see $ <var:Q> = <nat:7> * <var:i> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is given by typical Hoare logic . Advancing to the proceeding command found in our program , we see the variable binding command \verb | <var:b0> := <nat:9> ; | . This command redefines the condition $ \{ <var:q> = <var:i> \} $ into the condition $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \} $ . Taking another step toward the upcoming command contained in the segment of code , we see the variable assignmet code \verb | <var:b1> := <nat:7> ; | . This advances $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \} $ to $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> \} $ . This is shown by the assignment rule found in Hoare reasoning . Moving on , the environment update code giving $ <var:b1> * <var:q> $ into $ <var:b1>$ . This command transfers $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> \} $ to $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> \times <var:i> \} $ . Considering the next piece of code seen in our code segment , the statement letting $ <var:b1> $ as $ <var:Q>$ . This takes the condition $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> \times <var:i> \} $ toward the postcondition $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \land <var:Q> = <nat:7> \times <var:i> \} $ . Considering the next statement contained in our list of instructions , the binding command yielding $ <var:Q> + <var:b0$ toward $ <var:Q>$ . This advances the precondition $ \{ <var:q> = <var:i> \land <var:b0> = <nat:9> \land <var:Q> = <nat:7> \times <var:i> \} $ into $ \{ <var:q> = <var:i> \land <var:Q> = <nat:7> \times <var:i> + <nat:9> \} $ . This is deduced by the assignment rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:9> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:q> ; <var:Q> := <var:b1> ; <var:Q> := <var:Q> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:q> = <var:i> }} <def:poly> {{ <var:Q> = <nat:7> * <var:i> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:b0> = <nat:9> /\ <var:Q> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:Q> = <nat:7> * <var:i> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 