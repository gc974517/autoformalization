\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <nat:1> + <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:4> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <nat:4> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:3> + <var:L> * <var:A> \end{verbatim} Assuming ( given any positive integers $ <var:q> $ ) that $ <var:A> = <var:q> $ prior to interpreting the code segment then we have $ <var:L> = <nat:1> * <var:q> ^ <nat:10> + <nat:1> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> $ once list of commands has exited . \end{theorem} \begin{proof} The argument for this series of commands is given using Hoare logic . Paying attention to the next line in our series of commands , we have the assignment line \verb | <var:L> := <nat:1> ; | . This transfers the precondition $ \{ <var:A> = <var:q> \} $ to $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \} $ . Keeping momentum , the variable binding line \verb | <var:L> := <nat:1> + <var:L> * <var:A> ; | . This command advances $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \} $ into the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> + <nat:1> \} $ . This is shown by the assignment inference rule given by typical Hoare logic . After , we have the variable update line \verb | <var:L> := <var:L> * <var:A> ; | . This statement transfers the precondition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> + <nat:1> \} $ into $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + \} $ . Considering the proceeding bit of code in our list of instructions , the variable binding code yielding $ <var:L> * <var:A> $ into $ <var:L>$ . This line redefines the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + \} $ into the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> ^ <nat:2> + \} $ . Moving forward to the subsequent line contained in our set of instructions , we see the environment update line \verb | <var:L> := <nat:4> + <var:L> * <var:A> ; | . This line forwards the precondition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:1> \cdot <var:q> ^ <nat:3> + <nat:4> \} $ . This is shown through the assignment law obtained from typical Hoare techniques . Taking another step toward the next bit of code in our code , we have the variable update code \verb | <var:L> := <nat:2> + <var:L> * <var:A> ; | . This takes the precondition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:1> \cdot <var:q> ^ <nat:3> + <nat:4> \} $ into the postcondition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:5> + <nat:1> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> + <nat:2> \} $ . Moving forward to the subsequent line contained in the series of commands , we have the assignment statement defining $ <nat:2> + <var:L> * <var:A> $ as $ <var:L>$ . This code redefines the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:5> + <nat:1> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> + <nat:2> \} $ to the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:6> + <nat:1> \cdot <var:q> ^ <nat:5> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:2> \} $ . Moving on , we see the assignment line \verb | <var:L> := <nat:4> + <var:L> * <var:A> ; | . This code moves the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:6> + <nat:1> \cdot <var:q> ^ <nat:5> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:2> \} $ into $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:7> + <nat:1> \cdot <var:q> ^ <nat:6> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:4> \} $ . Taking another step toward the next command found in our series of instructions , the binding line \verb | <var:L> := <nat:2> + <var:L> * <var:A> ; | . This code forwards the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:7> + <nat:1> \cdot <var:q> ^ <nat:6> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:4> \} $ toward the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:8> + <nat:1> \cdot <var:q> ^ <nat:7> + <nat:4> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> \} $ . Observing the subsequent line of code contained in our list of commands , we have the variable assignmet line \verb | <var:L> := <var:L> * <var:A> ; | . This takes the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:8> + <nat:1> \cdot <var:q> ^ <nat:7> + <nat:4> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> \} $ to the condition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:9> + <nat:1> \cdot <var:q> ^ <nat:8> + <nat:4> \cdot <var:q> ^ <nat:5> + <nat:2> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + \} $ . Looking at the proceeding piece of code seen in our program , we have the assignment code \verb | <var:L> := <nat:3> + <var:L> * <var:A> | . This command redefines the precondition $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:9> + <nat:1> \cdot <var:q> ^ <nat:8> + <nat:4> \cdot <var:q> ^ <nat:5> + <nat:2> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + \} $ as $ \{ <var:A> = <var:q> \land <var:L> = <nat:1> \cdot <var:q> ^ <nat:10> + <nat:1> \cdot <var:q> ^ <nat:9> + <nat:4> \cdot <var:q> ^ <nat:6> + <nat:2> \cdot <var:q> ^ <nat:5> + <nat:2> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:A> = <var:q> }} <var:L> := <nat:1> ; <var:L> := <nat:1> + <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:4> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <nat:4> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:3> + <var:L> * <var:A> {{ <var:L> = <nat:1> * <var:q> ^ <nat:10> + <nat:1> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:8> + <nat:4> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:10> + <nat:1> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 