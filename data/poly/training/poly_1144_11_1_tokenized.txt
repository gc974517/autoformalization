\begin{document} \begin{theorem} We define the following segment of code : \begin{verbatim} <var:K1> := <var:U> ; <var:K2> := <var:K1> * <var:U> ; <var:K3> := <var:K2> * <var:U> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:3> ; <var:K3> := <var:K3> * <nat:4> ; <var:p> := <var:K3> <var:p> := <var:p> + <var:K2> <var:p> := <var:p> + <var:K1> <var:p> := <var:p> + <var:K0> \end{verbatim} Assume $ <var:U> = <var:z> $ ahead of executing the list of instructions it holds that we have $ <var:p> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is evident using typical Hoare techniques . Immediately after , we have \begin{eqnarray} \{ <var:U> = <var:z> \} \, <var:K1> := <var:U> \, \{ <var:U> = <var:z> \land <var:K1> = <var:z> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <var:z> \} \, <var:K2> := <var:K1> * <var:U> \, \{ <var:U> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \} \, <var:K3> := <var:K2> * <var:U> \, \{ <var:U> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \} \, <var:K0> := <nat:7> \, \{ <var:U> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \, <var:K1> := <var:K1> * <nat:2> \, \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \, <var:K2> := <var:K2> * <nat:3> \, \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \, <var:K3> := <var:K3> * <nat:4> \, \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:z> ^ <nat:3> \land <var:K0> = <nat:7> \} \, <var:p> := <var:K3\, \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:K0> = <nat:7> \land <var:p> = <nat:4> \times <var:z> ^ <nat:3> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:K0> = <nat:7> \land <var:p> = <nat:4> \times <var:z> ^ <nat:3> \} \, <var:p> := <var:p> + <var:K2\, \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K0> = <nat:7> \land <var:p> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> \} \\ \{ <var:U> = <var:z> \land <var:K1> = <nat:2> \times <var:z> \land <var:K0> = <nat:7> \land <var:p> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> \} \, <var:p> := <var:p> + <var:K1\, \{ <var:U> = <var:z> \land <var:K0> = <nat:7> \land <var:p> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> \} \end{eqnarray} Focusing on the proceeding step contained in our program , we have \begin{eqnarray} \{ <var:U> = <var:z> \} \, <var:K1> := <var:U> \, \{ <var:U> = <var:z> \land <var:K1> = <var:z> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:U> = <var:z> }} <var:K1> := <var:U> ; <var:K2> := <var:K1> * <var:U> ; <var:K3> := <var:K2> * <var:U> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:3> ; <var:K3> := <var:K3> * <nat:4> ; <var:p> := <var:K3> <var:p> := <var:p> + <var:K2> <var:p> := <var:p> + <var:K1> <var:p> := <var:p> + <var:K0> {{ <var:p> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:z> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:K0> = <nat:7> /\ <var:p> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K0> = <nat:7> /\ <var:p> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:K0> = <nat:7> /\ <var:p> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:p> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 