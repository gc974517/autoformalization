\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:T0> := <nat:3> ; <var:X> := <var:T0> \end{verbatim} Given ( given all $ <var:y> \in \mathbb{N} $ ) it to be that $ <var:f> = <var:y> $ before the evaluation of the list of instructions then we have $ <var:X> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be shown with usual Hoare reasoning . Honing in on the next step seen in our list of instructions , the binding code \verb | <var:T0> := <nat:3> ; | . This transfers the precondition $ \{ <var:f> = <var:y> \} $ into the postcondition $ \{ <var:f> = <var:y> \land <var:T0> = <nat:3> \} $ . This is known to be sound through the assignment rule from Hoare reasoning . Advancing on , we see the environment update statement \verb | <var:X> := <var:T0> | . This line forwards $ \{ <var:f> = <var:y> \land <var:T0> = <nat:3> \} $ into $ \{ <var:f> = <var:y> \land <var:X> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:f> = <var:y> }} <var:T0> := <nat:3> ; <var:X> := <var:T0> {{ <var:X> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:X> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 