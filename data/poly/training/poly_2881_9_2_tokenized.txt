\begin{document} \begin{theorem} We define a series of instructions as \begin{verbatim} <var:l> := <nat:4> ; <var:l> := <nat:1> + <var:l> * <var:K> ; <var:l> := <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <nat:3> + <var:l> * <var:K> ; <var:l> := <nat:3> + <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <var:l> * <var:K> ; <var:l> := <nat:2> + <var:l> * <var:K> \end{verbatim} Assume it to be that $ <var:K> = <var:R> $ , assuming some integers $ <var:R> $ , before the execution of the list of commands it follows that $ <var:l> = <nat:4> \cdot <var:R> ^ <nat:8> + <nat:1> \cdot <var:R> ^ <nat:7> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:R> \} \\ <var:l> := <nat:4> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \} \\ <var:l> := <nat:1> + <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> + <nat:1> \} \\ <var:l> := <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + \} \\ <var:l> := <nat:4> + <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \} \\ <var:l> := <nat:3> + <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> + <nat:3> \} \\ <var:l> := <nat:3> + <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:3> \} \\ <var:l> := <nat:4> + <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:6> + <nat:1> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:4> \} \\ <var:l> := <var:l> * <var:K> ; \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:7> + <nat:1> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + \} \\ <var:l> := <nat:2> + <var:l> * <var:K> \\ \{ <var:K> = <var:R> \land <var:l> = <nat:4> \cdot <var:R> ^ <nat:8> + <nat:1> \cdot <var:R> ^ <nat:7> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:K> = <var:R> }} <var:l> := <nat:4> ; <var:l> := <nat:1> + <var:l> * <var:K> ; <var:l> := <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <nat:3> + <var:l> * <var:K> ; <var:l> := <nat:3> + <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <var:l> * <var:K> ; <var:l> := <nat:2> + <var:l> * <var:K> {{ <var:l> = <nat:4> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 