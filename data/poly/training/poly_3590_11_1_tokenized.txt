\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w1> := <var:O> ; <var:w2> := <var:w1> * <var:O> ; <var:w3> := <var:w2> * <var:O> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:5> ; <var:w2> := <var:w2> * <nat:1> ; <var:w3> := <var:w3> * <nat:1> ; <var:y> := <var:w3> <var:y> := <var:y> + <var:w2> <var:y> := <var:y> + <var:w1> <var:y> := <var:y> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:O> = <var:H> $ before the execution of the code segment it holds that we see $ <var:y> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> + <nat:8> $ once program has finished . \end{theorem} \begin{proof} The flow of logic for this code is evident through standard Hoare techniques . Observing the upcoming command in the code segment , we have the assignment command \verb | <var:w1> := <var:O> ; | . This code takes the precondition $ \{ <var:O> = <var:H> \} $ into $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \} $ . Moving on , the variable binding line assigning $ <var:w1> * <var:O> $ into $ <var:w2>$ . This line advances the condition $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \} $ into $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \} $ . Advancing on , we see the statement \verb | <var:w3> := <var:w2> * <var:O> ; | . This code transfers the precondition $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \} $ into the condition $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \} $ . This is rigorously given through the assignment law in standard Hoare logic . After , we have the variable assignmet command \verb | <var:w0> := <nat:8> ; | . This statement takes $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \} $ toward $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ . This is shown to be logically sound with the assignment rule given in Hoare logic . Jumping to the proceeding line of code contained in the series of instructions , we see the binding line \verb | <var:w1> := <var:w1> * <nat:5> ; | . This transfers the precondition $ \{ <var:O> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ as the postcondition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ . Stepping forward , we see the variable assignmet line \verb | <var:w2> := <var:w2> * <nat:1> ; | . This redefines $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ to the postcondition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <nat:1> \times <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ . Moving onward , the variable update statement \verb | <var:w3> := <var:w3> * <nat:1> ; | . This command forwards the precondition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <nat:1> \times <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ toward the condition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <nat:1> \times <var:H> ^ <nat:2> \land <var:w3> = <nat:1> \times <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ . Moving forward to the next step , we see the variable binding statement defining $ <var:w3$ as $ <var:y>$ . This forwards $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <nat:1> \times <var:H> ^ <nat:2> \land <var:w3> = <nat:1> \times <var:H> ^ <nat:3> \land <var:w0> = <nat:8> \} $ to the condition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <nat:1> \times <var:H> ^ <nat:2> \land <var:w0> = <nat:8> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> \} $ . This is guaranteed by the assignment law found in usual Hoare techniques . Advancing to the next piece of code found in our segment of code , we have the variable update command \verb | <var:y> := <var:y> + <var:w2> | . This moves $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w2> = <nat:1> \times <var:H> ^ <nat:2> \land <var:w0> = <nat:8> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> \} $ as the postcondition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w0> = <nat:8> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> \} $ . This is deduced by the assignment inference rule defined by usual Hoare reasoning . Moving forward , we have the binding command \verb | <var:y> := <var:y> + <var:w1> | . This line transfers the condition $ \{ <var:O> = <var:H> \land <var:w1> = <nat:5> \times <var:H> \land <var:w0> = <nat:8> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> \} $ as the postcondition $ \{ <var:O> = <var:H> \land <var:w0> = <nat:8> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> \} $ . Paying attention to the next statement in our list of instructions , we have the variable binding statement \verb | <var:y> := <var:y> + <var:w0> | . This line moves the condition $ \{ <var:O> = <var:H> \land <var:w0> = <nat:8> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> \} $ to the condition $ \{ <var:O> = <var:H> \land <var:y> = <nat:1> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w1> := <var:O> ; <var:w2> := <var:w1> * <var:O> ; <var:w3> := <var:w2> * <var:O> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:5> ; <var:w2> := <var:w2> * <nat:1> ; <var:w3> := <var:w3> * <nat:1> ; <var:y> := <var:w3> <var:y> := <var:y> + <var:w2> <var:y> := <var:y> + <var:w1> <var:y> := <var:y> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:O> = <var:H> }} <def:poly> {{ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <nat:5> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <nat:5> * <var:H> /\ <var:w2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <nat:5> * <var:H> /\ <var:w2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:H> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <nat:5> * <var:H> /\ <var:w2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:w0> = <nat:8> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w1> = <nat:5> * <var:H> /\ <var:w0> = <nat:8> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:w0> = <nat:8> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 