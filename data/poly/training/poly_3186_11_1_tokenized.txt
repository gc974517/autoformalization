\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:Y> ; <var:p2> := <var:p1> * <var:Y> ; <var:p3> := <var:p2> * <var:Y> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:6> ; <var:p3> := <var:p3> * <nat:9> ; <var:t> := <var:p3> <var:t> := <var:t> + <var:p2> <var:t> := <var:t> + <var:p1> <var:t> := <var:t> + <var:p0> \end{verbatim} Given that $ <var:Y> = <var:B> $ prior to running our code segment it follows that we have $ <var:t> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:4> $ once set of commands is done . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be accomplished using standard Hoare logic . Paying attention to the proceeding lines of codein our program , we have \begin{verbatim} { <var:Y> = <var:B> } <var:p1> := <var:Y> { <var:Y> = <var:B> \land <var:p1> = <var:B> } { <var:Y> = <var:B> \land <var:p1> = <var:B> } <var:p2> := <var:p1> * <var:Y> { <var:Y> = <var:B> \land <var:p1> = <var:B> \land <var:p2> = <var:B> ^ <nat:2> } { <var:Y> = <var:B> \land <var:p1> = <var:B> \land <var:p2> = <var:B> ^ <nat:2> } <var:p3> := <var:p2> * <var:Y> { <var:Y> = <var:B> \land <var:p1> = <var:B> \land <var:p2> = <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> } { <var:Y> = <var:B> \land <var:p1> = <var:B> \land <var:p2> = <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> } <var:p0> := <nat:4> { <var:Y> = <var:B> \land <var:p1> = <var:B> \land <var:p2> = <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } { <var:Y> = <var:B> \land <var:p1> = <var:B> \land <var:p2> = <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } <var:p1> := <var:p1> * <nat:3> { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } <var:p2> := <var:p2> * <nat:6> { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <nat:6> * <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <nat:6> * <var:B> ^ <nat:2> \land <var:p3> = <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } <var:p3> := <var:p3> * <nat:9> { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <nat:6> * <var:B> ^ <nat:2> \land <var:p3> = <nat:9> * <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <nat:6> * <var:B> ^ <nat:2> \land <var:p3> = <nat:9> * <var:B> ^ <nat:3> \land <var:p0> = <nat:4> } <var:t> := <var:p3{ <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <nat:6> * <var:B> ^ <nat:2> \land <var:p0> = <nat:4> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> } { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p2> = <nat:6> * <var:B> ^ <nat:2> \land <var:p0> = <nat:4> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> } <var:t> := <var:t> + <var:p2{ <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p0> = <nat:4> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> } { <var:Y> = <var:B> \land <var:p1> = <nat:3> * <var:B> \land <var:p0> = <nat:4> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> } <var:t> := <var:t> + <var:p1{ <var:Y> = <var:B> \land <var:p0> = <nat:4> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> } { <var:Y> = <var:B> \land <var:p0> = <nat:4> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> } <var:t> := <var:t> + <var:p0{ <var:Y> = <var:B> \land <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Y> = <var:B> }} <var:p1> := <var:Y> ; <var:p2> := <var:p1> * <var:Y> ; <var:p3> := <var:p2> * <var:Y> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:6> ; <var:p3> := <var:p3> * <nat:9> ; <var:t> := <var:p3> <var:t> := <var:t> + <var:p2> <var:t> := <var:t> + <var:p1> <var:t> := <var:t> + <var:p0> {{ <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <var:B> /\ <var:p2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <var:B> /\ <var:p2> = <var:B> ^ <nat:2> /\ <var:p3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <var:B> /\ <var:p2> = <var:B> ^ <nat:2> /\ <var:p3> = <var:B> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <nat:3> * <var:B> /\ <var:p2> = <var:B> ^ <nat:2> /\ <var:p3> = <var:B> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <nat:3> * <var:B> /\ <var:p2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:p3> = <var:B> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <nat:3> * <var:B> /\ <var:p2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:B> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <nat:3> * <var:B> /\ <var:p2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:p0> = <nat:4> /\ <var:t> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p1> = <nat:3> * <var:B> /\ <var:p0> = <nat:4> /\ <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:p0> = <nat:4> /\ <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:t> = <nat:9> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 