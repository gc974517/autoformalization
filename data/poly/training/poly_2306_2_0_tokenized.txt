\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:3> ; <var:V> := <var:U0> \end{verbatim} Assuming that $ <var:d> = <var:f> $ ahead of the evaluation of our series of instructions then we see $ <var:V> = <nat:3> $ when list of instructions has executed . \end{theorem} \begin{proof} The application of typical Hoare logic produces : \begin{eqnarray} \{ <var:d> = <var:f> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:d> = <var:f> \land <var:U0> = <nat:3> \} \\ <var:V> := <var:U0> \\ \{ <var:d> = <var:f> \land <var:V> = <nat:3> \} \end{eqnarray} Therefore , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:d> = <var:f> }} <var:U0> := <nat:3> ; <var:V> := <var:U0> {{ <var:V> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:f> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:f> /\ <var:V> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 