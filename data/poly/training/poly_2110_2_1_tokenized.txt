\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:2> ; <var:m> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:Y> = <var:t> $ , given all $ <var:t> $ , before evaluating our set of instructions it holds that we have $ <var:m> = <nat:2> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:Y> = <var:t> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:Y> = <var:t> \land <var:O0> = <nat:2> \} \end{eqnarray} Continuing the execution of the set of instructions gives us : \begin{eqnarray} <var:m> := <var:O0> \\ \{ <var:Y> = <var:t> \land <var:m> = <nat:2> \} \end{eqnarray} As a consequence , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:2> ; <var:m> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Y> = <var:t> }} <def:poly> {{ <var:m> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:m> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 