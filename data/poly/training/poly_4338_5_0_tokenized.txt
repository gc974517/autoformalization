\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:8> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:c> ; <var:L> := <var:h1> ; <var:L> := <var:L> + <var:h0> \end{verbatim} Given it to be that $ <var:c> = <var:S> $ taking natural coefficients $ <var:S> $ prior to the execution of our segment of code , it follows that $ <var:L> = <nat:4> \cdot <var:S> + <nat:8> $ after code executes . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:c> = <var:S> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:c> = <var:S> \land <var:h0> = <nat:8> \} \\ <var:h1> := <nat:4> ; \\ \{ <var:c> = <var:S> \land <var:h0> = <nat:8> \land <var:h1> = <nat:4> \} \\ <var:h1> := <var:h1> * <var:c> ; \\ \{ <var:c> = <var:S> \land <var:h0> = <nat:8> \land <var:h1> = <nat:4> * <var:S> \} \\ <var:L> := <var:h1> ; \\ \{ <var:c> = <var:S> \land <var:h0> = <nat:8> \land <var:L> = <nat:4> * <var:S> \} \\ <var:L> := <var:L> + <var:h0> \\ \{ <var:c> = <var:S> \land <var:L> = <nat:4> * <var:S> + <nat:8> \} \end{eqnarray} As a consequence , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:c> = <var:S> }} <var:h0> := <nat:8> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:c> ; <var:L> := <var:h1> ; <var:L> := <var:L> + <var:h0> {{ <var:L> = <nat:4> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:h0> = <nat:8> /\ <var:L> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:L> = <nat:4> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 