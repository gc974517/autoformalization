\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:o> ; <var:m2> := <nat:6> ; <var:m2> := <var:m2> * <var:o> ; <var:m2> := <var:m2> * <var:o> ; <var:K> := <var:m2> ; <var:K> := <var:K> + <var:m1> ; <var:K> := <var:K> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:o> = <var:p> $ before interpreting this list of commands , then we see $ <var:K> = <nat:6> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions is demonstrated by standard Hoare techniques . Considering the upcoming piece of code seen in the segment of code , \begin{verbatim} { <var:o> = <var:p> } <var:m0> := <nat:3> { <var:o> = <var:p> \land <var:m0> = <nat:3> } \end{verbatim} Jumping to the following piece of code seen in our set of commands , we see \begin{verbatim} { <var:o> = <var:p> } <var:m0> := <nat:3> { <var:o> = <var:p> \land <var:m0> = <nat:3> } \end{verbatim} This is shown to be logically sound through the variable update scheme defined in standard Hoare logic . Taking a look at the subsequent pieces of code contained in the series of instructions , we have \begin{verbatim} { <var:o> = <var:p> } <var:m0> := <nat:3> { <var:o> = <var:p> \land <var:m0> = <nat:3> } { <var:o> = <var:p> \land <var:m0> = <nat:3> } <var:m1> := <nat:1> { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> } { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> } <var:m1> := <var:m1> * <var:o> { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> \times <var:p> } { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> \times <var:p> } <var:m2> := <nat:6> { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> \times <var:p> \land <var:m2> = <nat:6> } { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> \times <var:p> \land <var:m2> = <nat:6> } <var:m2> := <var:m2> * <var:o> { <var:o> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:1> \times <var:p> \land <var:m2> = <nat:6> \times <var:p> } \end{verbatim} Shifting focus toward the next bit of code seen in our program , \begin{verbatim} { <var:o> = <var:p> } <var:m0> := <nat:3> { <var:o> = <var:p> \land <var:m0> = <nat:3> } \end{verbatim} Looking at the proceeding bit of code in the program , we see \begin{verbatim} { <var:o> = <var:p> } <var:m0> := <nat:3> { <var:o> = <var:p> \land <var:m0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:o> ; <var:m2> := <nat:6> ; <var:m2> := <var:m2> * <var:o> ; <var:m2> := <var:m2> * <var:o> ; <var:K> := <var:m2> ; <var:K> := <var:K> + <var:m1> ; <var:K> := <var:K> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:o> = <var:p> }} <def:poly> {{ <var:K> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:1> * <var:p> /\ <var:m2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:1> * <var:p> /\ <var:m2> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:1> * <var:p> /\ <var:m2> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:1> * <var:p> /\ <var:K> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m0> = <nat:3> /\ <var:K> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:K> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 