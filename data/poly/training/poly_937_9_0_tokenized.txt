\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:J> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:J> ; <var:F2> := <var:F2> * <var:J> ; <var:U> := <var:F2> ; <var:U> := <var:U> + <var:F1> ; <var:U> := <var:U> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Allow ( letting natural numbers $ <var:S> $ ) it to be that $ <var:J> = <var:S> $ ahead of interpreting this list of instructions , it holds that we have $ <var:U> = <nat:6> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:2> $ after list of instructions terminates . \end{theorem} \begin{proof} The proof of this series of instructions is done by typical Hoare reasoning . Next , \[ \begin{tabular} {rcl} \{ <var:J> = <var:S> \} & <var:F0> := <nat:2> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \} \\ \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \} & <var:F1> := <nat:1> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \} \\ \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \} & <var:F1> := <var:F1> * <var:J> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \times <var:S> \} \\ \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \times <var:S> \} & <var:F2> := <nat:6> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \times <var:S> \land <var:F2> = <nat:6> \} \\ \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \times <var:S> \land <var:F2> = <nat:6> \} & <var:F2> := <var:F2> * <var:J> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \times <var:S> \land <var:F2> = <nat:6> \times <var:S> \} \end{tabular} This is rigorously given through the environment update scheme in usual Hoare reasoning . Taking another step toward the next bits of codein our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:S> \} & <var:F0> := <nat:2> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \} \\ \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \} & <var:F1> := <nat:1> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \} \\ \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \} & <var:F1> := <var:F1> * <var:J> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \times <var:S> \} \end{tabular} Focusing on the subsequent statement found in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:S> \} & <var:F0> := <nat:2> & \{ <var:J> = <var:S> \land <var:F0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:J> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:J> ; <var:F2> := <var:F2> * <var:J> ; <var:U> := <var:F2> ; <var:U> := <var:U> + <var:F1> ; <var:U> := <var:U> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:J> = <var:S> }} <def:poly> {{ <var:U> = <nat:6> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:S> /\ <var:F2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:S> /\ <var:F2> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:S> /\ <var:F2> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:S> /\ <var:U> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:F0> = <nat:2> /\ <var:U> = <nat:6> * <var:S> ^ <nat:2> + <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:U> = <nat:6> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 