\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:6> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:m> ; <var:q2> := <nat:9> ; <var:q2> := <var:q2> * <var:m> ; <var:q2> := <var:q2> * <var:m> ; <var:x> := <var:q2> ; <var:x> := <var:x> + <var:q1> ; <var:x> := <var:x> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:m> = <var:s> $ --- given some $ <var:s> \in \mathbb{N} $ --- prior to the evaluation of this list of instructions , it must be that $ <var:x> = <nat:9> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> + <nat:6> $ once set of instructions is done . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:m> = <var:s> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \} \\ <var:q1> := <nat:5> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \} \\ <var:q1> := <var:q1> * <var:m> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:s> \} \\ <var:q2> := <nat:9> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:s> \land <var:q2> = <nat:9> \} \\ <var:q2> := <var:q2> * <var:m> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:s> \land <var:q2> = <nat:9> \cdot <var:s> \} \\ <var:q2> := <var:q2> * <var:m> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:s> \land <var:q2> = <nat:9> \cdot <var:s> ^ <nat:2> \} \\ <var:x> := <var:q2> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:s> \land <var:x> = <nat:9> \cdot <var:s> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:q1> ; \\ \{ <var:m> = <var:s> \land <var:q0> = <nat:6> \land <var:x> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> \} \\ <var:x> := <var:x> + <var:q0> \\ \{ <var:m> = <var:s> \land <var:x> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> + <nat:6> \} \end{eqnarray} Hence , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:6> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:m> ; <var:q2> := <nat:9> ; <var:q2> := <var:q2> * <var:m> ; <var:q2> := <var:q2> * <var:m> ; <var:x> := <var:q2> ; <var:x> := <var:x> + <var:q1> ; <var:x> := <var:x> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:m> = <var:s> }} <def:poly> {{ <var:x> = <nat:9> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:s> /\ <var:q2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:s> /\ <var:q2> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:s> /\ <var:q2> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:s> /\ <var:x> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:q0> = <nat:6> /\ <var:x> = <nat:9> * <var:s> ^ <nat:2> + <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:x> = <nat:9> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 