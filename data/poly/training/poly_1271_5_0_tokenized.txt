\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:4> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:Y> ; <var:h> := <var:Q1> ; <var:h> := <var:h> + <var:Q0> \end{verbatim} Assuming $ <var:Y> = <var:v> $ ( for natural numbers $ <var:v> $ ) ahead of evaluating this code then we see $ <var:h> = <nat:5> \times <var:v> + <nat:4> $ when set of commands finishes . \end{theorem} \begin{proof} The method of proof for our code is evident with usual Hoare techniques . Shifting focus toward the proceeding lines in our code , we have \begin{eqnarray} \{ <var:Y> = <var:v> \} \, <var:Q0> := <nat:4> \, \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \} \\ \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \} \, <var:Q1> := <nat:5> \, \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:5> \} \\ \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:5> \} \, <var:Q1> := <var:Q1> * <var:Y> \, \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:5> \cdot <var:v> \} \\ \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:5> \cdot <var:v> \} \, <var:h> := <var:Q1> \, \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \land <var:h> = <nat:5> \cdot <var:v> \} \end{eqnarray} This is sound by the assignment scheme given in standard Hoare reasoning . Immediately after , we see \begin{eqnarray} \{ <var:Y> = <var:v> \} \, <var:Q0> := <nat:4> \, \{ <var:Y> = <var:v> \land <var:Q0> = <nat:4> \} \end{eqnarray} This is rigorously given by the assignment scheme found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Y> = <var:v> }} <var:Q0> := <nat:4> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:Y> ; <var:h> := <var:Q1> ; <var:h> := <var:h> + <var:Q0> {{ <var:h> = <nat:5> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:Q0> = <nat:4> /\ <var:h> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:h> = <nat:5> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 