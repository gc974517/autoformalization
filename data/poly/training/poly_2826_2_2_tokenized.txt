\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r> := <nat:1> ; <var:r> := <nat:4> + <var:r> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:l> = <var:Q> $ --- taking natural coefficients $ <var:Q> $ --- ahead of running our series of commands , it must be that we see $ <var:r> = <nat:1> \cdot <var:Q> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this program can be accomplished using Hoare techniques . Following , we have the binding command giving $ <nat:1> $ as $ <var:r>$ . This forwards $ \{ <var:l> = <var:Q> \} $ into the postcondition $ \{ <var:l> = <var:Q> \land <var:r> = <nat:1> \} $ . This is shown by the assignment inference rule from standard Hoare techniques . Moving forward to the next piece of code found in our series of instructions , we have the assignment statement \verb | <var:r> := <nat:4> + <var:r> * <var:l> | . This command advances the precondition $ \{ <var:l> = <var:Q> \land <var:r> = <nat:1> \} $ as $ \{ <var:l> = <var:Q> \land <var:r> = <nat:1> \cdot <var:Q> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:1> ; <var:r> := <nat:4> + <var:r> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:l> = <var:Q> }} <def:poly> {{ <var:r> = <nat:1> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:r> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:r> = <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 