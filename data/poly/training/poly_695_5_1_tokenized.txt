\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:q1> := <var:b> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:7> ; <var:p> := <var:q1> <var:p> := <var:p> + <var:q0> \end{verbatim} Allowing , letting positive integers $ <var:c> $ , it to hold that $ <var:b> = <var:c> $ prior to executing this code segment then we have $ <var:p> = <nat:7> * <var:c> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the program is shown using the following decorated code . \begin{eqnarray} \{ <var:b> = <var:c> \} \\ <var:q1> := <var:b> ; \\ \{ <var:b> = <var:c> \land <var:q1> = <var:c> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:b> = <var:c> \land <var:q1> = <var:c> \land <var:q0> = <nat:6> \} \\ <var:q1> := <var:q1> * <nat:7> ; \\ \{ <var:b> = <var:c> \land <var:q1> = <nat:7> \cdot <var:c> \land <var:q0> = <nat:6> \} \\ <var:p> := <var:q1> \\ \{ <var:b> = <var:c> \land <var:q0> = <nat:6> \land <var:p> = <nat:7> \cdot <var:c> \} \\ <var:p> := <var:p> + <var:q0> \\ \{ <var:b> = <var:c> \land <var:p> = <nat:7> \cdot <var:c> + <nat:6> \} \end{eqnarray} Using Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:b> = <var:c> }} <var:q1> := <var:b> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:7> ; <var:p> := <var:q1> <var:p> := <var:p> + <var:q0> {{ <var:p> = <nat:7> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:q1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:q1> = <var:c> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:q1> = <nat:7> * <var:c> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:q0> = <nat:6> /\ <var:p> = <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p> = <nat:7> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 