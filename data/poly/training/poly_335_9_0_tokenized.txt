\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:7> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:A> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:A> ; <var:F2> := <var:F2> * <var:A> ; <var:E> := <var:F2> ; <var:E> := <var:E> + <var:F1> ; <var:E> := <var:E> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allowing that $ <var:A> = <var:K> $ before the execution of this segment of code , it holds that we see $ <var:E> = <nat:8> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is accomplished using standard Hoare techniques . Focusing on the following bit of code contained in the series of commands , the variable binding command \verb | <var:F0> := <nat:7> ; | . This moves the precondition $ \{ <var:A> = <var:K> \} $ as $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \} $ . This is shown through the assignment scheme given by typical Hoare techniques . Now , we have the variable assignmet statement letting $ <nat:8> $ as $ <var:F1>$ . This code transfers the precondition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \} $ toward the condition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \} $ . Moving forward to the subsequent bit of code seen in the set of commands , we have the binding command assigning $ <var:F1> * <var:A> $ toward $ <var:F1>$ . This code transfers $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \} $ into the postcondition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \} $ . This is shown to be logically sound with the assignment scheme defined in typical Hoare techniques . Moving on to the upcoming line of code contained in the list of instructions , we see the variable update line giving $ <nat:8> $ into $ <var:F2>$ . This advances $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \} $ toward the condition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:F2> = <nat:8> \} $ . This is sound with the assignment inference rule defined in typical Hoare reasoning . Moving forward to the next step , the variable binding code assigning $ <var:F2> * <var:A> $ to $ <var:F2>$ . This line advances $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:F2> = <nat:8> \} $ into $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:F2> = <nat:8> \times <var:K> \} $ . This is known to be sound using the assignment rule of typical Hoare techniques . Focusing on the next line of code seen in the segment of code , we see the variable binding code \verb | <var:F2> := <var:F2> * <var:A> ; | . This transfers the precondition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:F2> = <nat:8> \times <var:K> \} $ toward the postcondition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:F2> = <nat:8> \times <var:K> ^ <nat:2> \} $ . This is shown with the assignment rule of typical Hoare logic . Following , we have the variable binding line letting $ <var:F2> $ toward $ <var:E>$ . This statement forwards the precondition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:F2> = <nat:8> \times <var:K> ^ <nat:2> \} $ as the condition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:E> = <nat:8> \times <var:K> ^ <nat:2> \} $ . Honing in on the subsequent command seen in the list of instructions , we see the environment update statement defining $ <var:E> + <var:F1> $ toward $ <var:E>$ . This forwards the condition $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:F1> = <nat:8> \times <var:K> \land <var:E> = <nat:8> \times <var:K> ^ <nat:2> \} $ to $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:E> = <nat:8> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> \} $ . This is shown to be logically sound using the assignment inference rule found in standard Hoare reasoning . Immediately after , we see the statement \verb | <var:E> := <var:E> + <var:F0> | . This line redefines $ \{ <var:A> = <var:K> \land <var:F0> = <nat:7> \land <var:E> = <nat:8> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> \} $ toward $ \{ <var:A> = <var:K> \land <var:E> = <nat:8> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:7> \} $ . This is known to be sound using the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:7> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:A> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:A> ; <var:F2> := <var:F2> * <var:A> ; <var:E> := <var:F2> ; <var:E> := <var:E> + <var:F1> ; <var:E> := <var:E> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:A> = <var:K> }} <def:poly> {{ <var:E> = <nat:8> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:8> * <var:K> /\ <var:F2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:8> * <var:K> /\ <var:F2> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:8> * <var:K> /\ <var:F2> = <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:8> * <var:K> /\ <var:E> = <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:F0> = <nat:7> /\ <var:E> = <nat:8> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:E> = <nat:8> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 