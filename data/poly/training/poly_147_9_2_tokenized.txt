\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <nat:1> + <var:Q> * <var:O> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:O> = <var:E> $ prior to executing the segment of code , it follows that we see $ <var:Q> = <nat:1> \cdot <var:E> ^ <nat:8> + <nat:2> \cdot <var:E> ^ <nat:6> + <nat:3> \cdot <var:E> ^ <nat:5> + <nat:3> \cdot <var:E> ^ <nat:4> + <nat:3> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is evident by typical Hoare reasoning . Jumping to the next statement seen in the list of commands , we see the code assigning $ <nat:1> $ as $ <var:Q>$ . This command transfers the condition $ \{ <var:O> = <var:E> \} $ to $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \} $ . Honing in on the subsequent statement found in the list of instructions , we have the line letting $ <var:Q> * <var:O> $ to $ <var:Q>$ . This forwards the precondition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \} $ toward the postcondition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> + \} $ . Advancing to the next step , we have the binding code defining $ <nat:2> + <var:Q> * <var:O> $ to $ <var:Q>$ . This statement redefines the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> + \} $ into the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:2> + <nat:2> \} $ . Advancing to the proceeding statement in our segment of code , the assignment command assigning $ <nat:3> + <var:Q> * <var:O> $ into $ <var:Q>$ . This moves $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:2> + <nat:2> \} $ into the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> + <nat:3> \} $ . Jumping to the subsequent line of code found in the series of commands , the environment update line \verb | <var:Q> := <nat:3> + <var:Q> * <var:O> ; | . This code redefines the precondition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> + <nat:3> \} $ toward the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} $ . This is given using the assignment law given by standard Hoare techniques . Stepping forward , we see the variable binding statement giving $ <nat:3> + <var:Q> * <var:O> $ as $ <var:Q>$ . This transfers the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} $ as the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} $ . Going to the next step , we have the command defining $ <nat:1> + <var:Q> * <var:O> $ toward $ <var:Q>$ . This redefines the precondition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} $ into the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:1> \} $ . Moving onward , we see the variable update statement binding $ <var:Q> * <var:O> $ to $ <var:Q>$ . This takes $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:1> \} $ to the postcondition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + \} $ . Further , we have the variable binding command assigning $ <nat:4> + <var:Q> * <var:O$ into $ <var:Q>$ . This command moves the condition $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + \} $ into $ \{ <var:O> = <var:E> \land <var:Q> = <nat:1> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \} $ . This is rigorously given with the assignment law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:1> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <nat:1> + <var:Q> * <var:O> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:O> = <var:E> }} <def:poly> {{ <var:Q> = <nat:1> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:Q> = <nat:1> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 