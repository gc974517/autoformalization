\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:M> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:2> ; <var:E> := <var:d1> <var:E> := <var:E> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Given it to hold that $ <var:M> = <var:W> $ --- given any natural numbers $ <var:W> $ --- before interpreting this set of instructions it follows that we have $ <var:E> = <nat:2> \cdot <var:W> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be accomplished using usual Hoare techniques . Honing in on the proceeding step contained in the set of commands , we have the command \verb | <var:d1> := <var:M> ; | . This command moves $ \{ <var:M> = <var:W> \} $ into the postcondition $ \{ <var:M> = <var:W> \land <var:d1> = <var:W> \} $ . This is rigorously given through the assignment rule given by Hoare techniques . Next , the assignment statement \verb | <var:d0> := <nat:8> ; | . This code moves $ \{ <var:M> = <var:W> \land <var:d1> = <var:W> \} $ as $ \{ <var:M> = <var:W> \land <var:d1> = <var:W> \land <var:d0> = <nat:8> \} $ . Considering the subsequent line of code in our code , we have the variable assignmet line \verb | <var:d1> := <var:d1> * <nat:2> ; | . This transfers $ \{ <var:M> = <var:W> \land <var:d1> = <var:W> \land <var:d0> = <nat:8> \} $ toward the postcondition $ \{ <var:M> = <var:W> \land <var:d1> = <nat:2> \times <var:W> \land <var:d0> = <nat:8> \} $ . This is known to be sound through the assignment law given in usual Hoare reasoning . Stepping through , the environment update code yielding $ <var:d1$ as $ <var:E>$ . This takes the precondition $ \{ <var:M> = <var:W> \land <var:d1> = <nat:2> \times <var:W> \land <var:d0> = <nat:8> \} $ into $ \{ <var:M> = <var:W> \land <var:d0> = <nat:8> \land <var:E> = <nat:2> \times <var:W> \} $ . Paying attention to the next line seen in our list of instructions , the variable assignmet statement \verb | <var:E> := <var:E> + <var:d0> | . This code takes the precondition $ \{ <var:M> = <var:W> \land <var:d0> = <nat:8> \land <var:E> = <nat:2> \times <var:W> \} $ toward $ \{ <var:M> = <var:W> \land <var:E> = <nat:2> \times <var:W> + <nat:8> \} $ . This is shown to be logically sound using the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:M> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:2> ; <var:E> := <var:d1> <var:E> := <var:E> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:M> = <var:W> }} <def:poly> {{ <var:E> = <nat:2> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:d1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:d1> = <var:W> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:d1> = <nat:2> * <var:W> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:d0> = <nat:8> /\ <var:E> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:E> = <nat:2> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 