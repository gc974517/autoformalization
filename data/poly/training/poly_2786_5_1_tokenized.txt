\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:q1> := <var:c> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:1> ; <var:M> := <var:q1> <var:M> := <var:M> + <var:q0> \end{verbatim} Given it to hold that $ <var:c> = <var:m> $ before executing the code it holds that we have $ <var:M> = <nat:1> \times <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the list of commands is evident by Hoare reasoning . Paying attention to the upcoming line of code seen in our series of instructions , we have the code defining $ <var:c> $ as $ <var:q1>$ . This moves $ \{ <var:c> = <var:m> \} $ into the condition $ \{ <var:c> = <var:m> \land <var:q1> = <var:m> \} $ . This is shown to be logically sound with the assignment inference rule defined by Hoare techniques . Keeping momentum , the environment update line letting $ <nat:2> $ into $ <var:q0>$ . This redefines the precondition $ \{ <var:c> = <var:m> \land <var:q1> = <var:m> \} $ into the condition $ \{ <var:c> = <var:m> \land <var:q1> = <var:m> \land <var:q0> = <nat:2> \} $ . This is given through the assignment scheme found in Hoare techniques . Observing the upcoming statement contained in the segment of code , we see the variable binding code \verb | <var:q1> := <var:q1> * <nat:1> ; | . This advances the condition $ \{ <var:c> = <var:m> \land <var:q1> = <var:m> \land <var:q0> = <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:m> \land <var:q1> = <nat:1> * <var:m> \land <var:q0> = <nat:2> \} $ . Taking a look at the next command in the segment of code , the variable assignmet line defining $ <var:q1$ toward $ <var:M>$ . This statement moves the precondition $ \{ <var:c> = <var:m> \land <var:q1> = <nat:1> * <var:m> \land <var:q0> = <nat:2> \} $ as $ \{ <var:c> = <var:m> \land <var:q0> = <nat:2> \land <var:M> = <nat:1> * <var:m> \} $ . This is known to be sound through the assignment law defined by usual Hoare techniques . Taking a look at the subsequent statement contained in our series of instructions , we have the environment update code \verb | <var:M> := <var:M> + <var:q0> | . This code forwards $ \{ <var:c> = <var:m> \land <var:q0> = <nat:2> \land <var:M> = <nat:1> * <var:m> \} $ to the condition $ \{ <var:c> = <var:m> \land <var:M> = <nat:1> * <var:m> + <nat:2> \} $ . This is known to be sound with the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:c> = <var:m> }} <var:q1> := <var:c> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:1> ; <var:M> := <var:q1> <var:M> := <var:M> + <var:q0> {{ <var:M> = <nat:1> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:q1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:q1> = <var:m> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:q1> = <nat:1> * <var:m> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:q0> = <nat:2> /\ <var:M> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:M> = <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 