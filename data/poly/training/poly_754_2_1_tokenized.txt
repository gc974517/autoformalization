\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:5> ; <var:O> := <var:B0> \end{verbatim} Allow $ <var:V> = <var:c> $ before the execution of our code segment then we see $ <var:O> = <nat:5> $ after series of commands has executed . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:V> = <var:c> \} \\ <var:B0> := <nat:5> ; \\ \{ <var:V> = <var:c> \land <var:B0> = <nat:5> \} \\ <var:O> := <var:B0> \\ \{ <var:V> = <var:c> \land <var:O> = <nat:5> \} \end{eqnarray} As a result , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:V> = <var:c> }} <var:B0> := <nat:5> ; <var:O> := <var:B0> {{ <var:O> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:O> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 