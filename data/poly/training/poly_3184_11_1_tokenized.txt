\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:V> ; <var:f2> := <var:f1> * <var:V> ; <var:f3> := <var:f2> * <var:V> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:5> ; <var:f3> := <var:f3> * <nat:1> ; <var:d> := <var:f3> <var:d> := <var:d> + <var:f2> <var:d> := <var:d> + <var:f1> <var:d> := <var:d> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:V> = <var:W> $ ahead of the evaluation of the series of instructions it must be that $ <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:5> \cdot <var:W> + <nat:7> $ when program finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is demonstrated by typical Hoare logic . Taking another step toward the following statement contained in our code , we have the variable assignmet command \verb | <var:f1> := <var:V> ; | . This code moves the precondition $ \{ <var:V> = <var:W> \} $ to $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \} $ . Taking a look at the upcoming piece of code seen in our code , the command assigning $ <var:f1> * <var:V> $ toward $ <var:f2>$ . This code forwards the precondition $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \} $ into the postcondition $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \land <var:f2> = <var:W> ^ <nat:2> \} $ . Moving on to the next step , the variable binding line binding $ <var:f2> * <var:V> $ as $ <var:f3>$ . This code transfers the precondition $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \land <var:f2> = <var:W> ^ <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \land <var:f2> = <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \} $ . This is guaranteed through the assignment rule given by Hoare reasoning . Looking at the upcoming piece of code contained in our series of instructions , we see the environment update command \verb | <var:f0> := <nat:7> ; | . This forwards $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \land <var:f2> = <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \land <var:f2> = <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . After , we see the environment update command letting $ <var:f1> * <nat:5> $ toward $ <var:f1>$ . This forwards $ \{ <var:V> = <var:W> \land <var:f1> = <var:W> \land <var:f2> = <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ to $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . Moving on to the next step , the variable update code \verb | <var:f2> := <var:f2> * <nat:5> ; | . This command forwards the condition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ into the condition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . Observing the subsequent statement found in the series of commands , we have the binding code \verb | <var:f3> := <var:f3> * <nat:1> ; | . This forwards the precondition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:f3> = <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ into the postcondition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:f3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . This is sound through the assignment law defined in Hoare reasoning . Honing in on the next piece of code in the set of commands , the environment update command \verb | <var:d> := <var:f3> | . This code transfers $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:f3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:f0> = <nat:7> \} $ toward $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:f0> = <nat:7> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment rule from Hoare logic . Moving on , we have the variable assignmet statement \verb | <var:d> := <var:d> + <var:f2> | . This transfers the precondition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:f0> = <nat:7> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f0> = <nat:7> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> \} $ . Keeping momentum , we have the assignment code \verb | <var:d> := <var:d> + <var:f1> | . This statement transfers the precondition $ \{ <var:V> = <var:W> \land <var:f1> = <nat:5> \cdot <var:W> \land <var:f0> = <nat:7> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> \} $ as $ \{ <var:V> = <var:W> \land <var:f0> = <nat:7> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:5> \cdot <var:W> \} $ . This is shown to be logically sound by the assignment scheme obtained from usual Hoare reasoning . Taking a look at the following line seen in our series of commands , we have the variable binding statement \verb | <var:d> := <var:d> + <var:f0> | . This code moves the condition $ \{ <var:V> = <var:W> \land <var:f0> = <nat:7> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:5> \cdot <var:W> \} $ toward $ \{ <var:V> = <var:W> \land <var:d> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:5> \cdot <var:W> + <nat:7> \} $ . This is shown to be logically sound using the assignment law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:V> ; <var:f2> := <var:f1> * <var:V> ; <var:f3> := <var:f2> * <var:V> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:5> ; <var:f3> := <var:f3> * <nat:1> ; <var:d> := <var:f3> <var:d> := <var:d> + <var:f2> <var:d> := <var:d> + <var:f1> <var:d> := <var:d> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:V> = <var:W> }} <def:poly> {{ <var:d> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <var:W> /\ <var:f2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <var:W> /\ <var:f2> = <var:W> ^ <nat:2> /\ <var:f3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <var:W> /\ <var:f2> = <var:W> ^ <nat:2> /\ <var:f3> = <var:W> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <nat:5> * <var:W> /\ <var:f2> = <var:W> ^ <nat:2> /\ <var:f3> = <var:W> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <nat:5> * <var:W> /\ <var:f2> = <nat:5> * <var:W> ^ <nat:2> /\ <var:f3> = <var:W> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <nat:5> * <var:W> /\ <var:f2> = <nat:5> * <var:W> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:W> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <nat:5> * <var:W> /\ <var:f2> = <nat:5> * <var:W> ^ <nat:2> /\ <var:f0> = <nat:7> /\ <var:d> = <nat:1> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f1> = <nat:5> * <var:W> /\ <var:f0> = <nat:7> /\ <var:d> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:f0> = <nat:7> /\ <var:d> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> + <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:W> /\ <var:d> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 