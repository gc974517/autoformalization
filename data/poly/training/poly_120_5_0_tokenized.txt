\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:4> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:c> ; <var:S> := <var:t1> ; <var:S> := <var:S> + <var:t0> \end{verbatim} Assume --- letting $ <var:d> \in \mathbb{N} $ --- it to hold that $ <var:c> = <var:d> $ before the evaluation of this list of instructions , it follows that we see $ <var:S> = <nat:1> * <var:d> + <nat:4> $ after list of instructions terminates . \end{theorem} \begin{proof} The course of logic for this segment of code is done through usual Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:c> = <var:d> \} \, <var:t0> := <nat:4> \, \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \} \\ \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \} \, <var:t1> := <nat:1> \, \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \land <var:t1> = <nat:1> \} \\ \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \land <var:t1> = <nat:1> \} \, <var:t1> := <var:t1> * <var:c> \, \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \land <var:t1> = <nat:1> \times <var:d> \} \end{eqnarray} This is rigorously given through the environment update inference rule obtained from usual Hoare techniques . Taking a look at the following statement contained in our list of instructions , we see \begin{eqnarray} \{ <var:c> = <var:d> \} \, <var:t0> := <nat:4> \, \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \} \end{eqnarray} Honing in on the next command found in our code segment , \begin{eqnarray} \{ <var:c> = <var:d> \} \, <var:t0> := <nat:4> \, \{ <var:c> = <var:d> \land <var:t0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:c> = <var:d> }} <var:t0> := <nat:4> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:c> ; <var:S> := <var:t1> ; <var:S> := <var:S> + <var:t0> {{ <var:S> = <nat:1> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:t0> = <nat:4> /\ <var:S> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:S> = <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 