\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:I> ; <var:F2> := <var:F1> * <var:I> ; <var:F3> := <var:F2> * <var:I> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:5> ; <var:t> := <var:F3> <var:t> := <var:t> + <var:F2> <var:t> := <var:t> + <var:F1> <var:t> := <var:t> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Assuming $ <var:I> = <var:L> $ ahead of the execution of our code segment it follows that $ <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> $ after code has executed . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:I> = <var:L> \} \\ <var:F1> := <var:I> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <var:L> \} \\ <var:F2> := <var:F1> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \} \end{eqnarray} Furthering the evaluation of the code segment produces : \begin{eqnarray} <var:F3> := <var:F2> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F3> = <var:L> ^ <nat:3> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F3> = <var:L> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:F1> := <var:F1> * <nat:1> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <nat:1> * <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F3> = <var:L> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:F2> := <var:F2> * <nat:4> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <nat:1> * <var:L> \land <var:F2> = <nat:4> * <var:L> ^ <nat:2> \land <var:F3> = <var:L> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:F3> := <var:F3> * <nat:5> ; \\ \{ <var:I> = <var:L> \land <var:F1> = <nat:1> * <var:L> \land <var:F2> = <nat:4> * <var:L> ^ <nat:2> \land <var:F3> = <nat:5> * <var:L> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:t> := <var:F3> \\ \{ <var:I> = <var:L> \land <var:F1> = <nat:1> * <var:L> \land <var:F2> = <nat:4> * <var:L> ^ <nat:2> \land <var:F0> = <nat:2> \land <var:t> = <nat:5> * <var:L> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:F2> \\ \{ <var:I> = <var:L> \land <var:F1> = <nat:1> * <var:L> \land <var:F0> = <nat:2> \land <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> \} \end{eqnarray} Advancing the evaluation of the series of commands gives : \begin{eqnarray} <var:t> := <var:t> + <var:F1> \\ \{ <var:I> = <var:L> \land <var:F0> = <nat:2> \land <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> \} \\ <var:t> := <var:t> + <var:F0> \\ \{ <var:I> = <var:L> \land <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> \} \end{eqnarray} Considering the above , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:I> ; <var:F2> := <var:F1> * <var:I> ; <var:F3> := <var:F2> * <var:I> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:5> ; <var:t> := <var:F3> <var:t> := <var:t> + <var:F2> <var:t> := <var:t> + <var:F1> <var:t> := <var:t> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:I> = <var:L> }} <def:poly> {{ <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <var:L> /\ <var:F2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <var:L> /\ <var:F2> = <var:L> ^ <nat:2> /\ <var:F3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <var:L> /\ <var:F2> = <var:L> ^ <nat:2> /\ <var:F3> = <var:L> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <nat:1> * <var:L> /\ <var:F2> = <var:L> ^ <nat:2> /\ <var:F3> = <var:L> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <nat:1> * <var:L> /\ <var:F2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:F3> = <var:L> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <nat:1> * <var:L> /\ <var:F2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:F3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <nat:1> * <var:L> /\ <var:F2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:F0> = <nat:2> /\ <var:t> = <nat:5> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F1> = <nat:1> * <var:L> /\ <var:F0> = <nat:2> /\ <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:F0> = <nat:2> /\ <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:t> = <nat:5> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 