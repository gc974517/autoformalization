\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:1> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:f> ; <var:W> := <var:M1> ; <var:W> := <var:W> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assume that we have $ <var:f> = <var:c> $ ahead of the evaluation of this code it follows that we see $ <var:W> = <nat:2> \cdot <var:c> + <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:f> = <var:c> \} \\ <var:M0> := <nat:1> ; \\ \{ <var:f> = <var:c> \land <var:M0> = <nat:1> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:f> = <var:c> \land <var:M0> = <nat:1> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:f> ; \\ \{ <var:f> = <var:c> \land <var:M0> = <nat:1> \land <var:M1> = <nat:2> * <var:c> \} \\ <var:W> := <var:M1> ; \\ \{ <var:f> = <var:c> \land <var:M0> = <nat:1> \land <var:W> = <nat:2> * <var:c> \} \\ <var:W> := <var:W> + <var:M0> \\ \{ <var:f> = <var:c> \land <var:W> = <nat:2> * <var:c> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:1> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:f> ; <var:W> := <var:M1> ; <var:W> := <var:W> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:f> = <var:c> }} <def:poly> {{ <var:W> = <nat:2> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:M0> = <nat:1> /\ <var:W> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:W> = <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 