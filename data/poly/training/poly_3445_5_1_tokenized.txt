\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:S> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:G> := <var:Q1> <var:G> := <var:G> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:S> = <var:b> $ before interpreting our series of instructions , it must be that $ <var:G> = <nat:1> \cdot <var:b> + <nat:9> $ once set of instructions exits . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:S> = <var:b> \} \\ <var:Q1> := <var:S> ; \\ \{ <var:S> = <var:b> \land <var:Q1> = <var:b> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:S> = <var:b> \land <var:Q1> = <var:b> \land <var:Q0> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <nat:1> ; \\ \{ <var:S> = <var:b> \land <var:Q1> = <nat:1> \cdot <var:b> \land <var:Q0> = <nat:9> \} \\ <var:G> := <var:Q1> \\ \{ <var:S> = <var:b> \land <var:Q0> = <nat:9> \land <var:G> = <nat:1> \cdot <var:b> \} \\ <var:G> := <var:G> + <var:Q0> \\ \{ <var:S> = <var:b> \land <var:G> = <nat:1> \cdot <var:b> + <nat:9> \} \end{eqnarray} As a result , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:S> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:G> := <var:Q1> <var:G> := <var:G> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:S> = <var:b> }} <def:poly> {{ <var:G> = <nat:1> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:Q1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:Q1> = <var:b> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:Q1> = <nat:1> * <var:b> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:Q0> = <nat:9> /\ <var:G> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:G> = <nat:1> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 