\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:2> ; <var:e> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given given some $ <var:L> $ it to hold that $ <var:m> = <var:L> $ prior to executing the segment of code , it holds that we have $ <var:e> = <nat:2> $ when program has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:L> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:m> = <var:L> \land <var:r0> = <nat:2> \} \\ <var:e> := <var:r0> \\ \{ <var:m> = <var:L> \land <var:e> = <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:2> ; <var:e> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:m> = <var:L> }} <def:poly> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 