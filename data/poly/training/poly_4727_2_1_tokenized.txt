\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:4> ; <var:x> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Given it to be that $ <var:n> = <var:R> $ before running our series of instructions it holds that $ <var:x> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands can be demonstrated by typical Hoare logic . Stepping through , \verb | { <var:n> = <var:R> } <var:v0> := <nat:4> { <var:n> = <var:R> \land <var:v0> = <nat:4> } | . Taking a look at the following statement in our set of commands , we see \verb | { <var:n> = <var:R> } <var:v0> := <nat:4> { <var:n> = <var:R> \land <var:v0> = <nat:4> } | . This is deduced by the variable binding inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:x> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:n> = <var:R> }} <def:poly> {{ <var:x> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:x> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 