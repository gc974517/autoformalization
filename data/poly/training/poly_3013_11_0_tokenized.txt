\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:7> ; <var:E2> := <nat:5> ; <var:E2> := <var:E2> * <var:a> ; <var:E2> := <var:E2> * <var:a> ; <var:E3> := <nat:8> ; <var:E3> := <var:E3> * <var:a> ; <var:E3> := <var:E3> * <var:a> ; <var:E3> := <var:E3> * <var:a> ; <var:u> := <var:E3> ; <var:u> := <var:u> + <var:E2> ; <var:u> := <var:u> + <var:E0> \end{verbatim} Assuming ( assuming some positive coefficients $ <var:L> $ ) that we have $ <var:a> = <var:L> $ before running this series of instructions it holds that we have $ <var:u> = <nat:8> \cdot <var:L> ^ <nat:3> + <nat:5> \cdot <var:L> ^ <nat:2> + <nat:7> $ after set of commands has terminated . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:a> = <var:L> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \} \\ <var:E2> := <nat:5> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \} \\ <var:E2> := <var:E2> * <var:a> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> \} \\ <var:E2> := <var:E2> * <var:a> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> ^ <nat:2> \} \\ <var:E3> := <nat:8> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:E3> = <nat:8> \} \\ <var:E3> := <var:E3> * <var:a> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:E3> = <nat:8> \cdot <var:L> \} \\ <var:E3> := <var:E3> * <var:a> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:E3> = <nat:8> \cdot <var:L> ^ <nat:2> \} \\ <var:E3> := <var:E3> * <var:a> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:E3> = <nat:8> \cdot <var:L> ^ <nat:3> \} \\ <var:u> := <var:E3> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:E2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:u> = <nat:8> \cdot <var:L> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:E2> ; \\ \{ <var:a> = <var:L> \land <var:E0> = <nat:7> \land <var:u> = <nat:8> \cdot <var:L> ^ <nat:3> + <nat:5> \cdot <var:L> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:E0> \\ \{ <var:a> = <var:L> \land <var:u> = <nat:8> \cdot <var:L> ^ <nat:3> + <nat:5> \cdot <var:L> ^ <nat:2> + <nat:7> \} \end{eqnarray} Therefore , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:a> = <var:L> }} <var:E0> := <nat:7> ; <var:E2> := <nat:5> ; <var:E2> := <var:E2> * <var:a> ; <var:E2> := <var:E2> * <var:a> ; <var:E3> := <nat:8> ; <var:E3> := <var:E3> * <var:a> ; <var:E3> := <var:E3> * <var:a> ; <var:E3> := <var:E3> * <var:a> ; <var:u> := <var:E3> ; <var:u> := <var:u> + <var:E2> ; <var:u> := <var:u> + <var:E0> {{ <var:u> = <nat:8> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:E3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:E2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:u> = <nat:8> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:E0> = <nat:7> /\ <var:u> = <nat:8> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:u> = <nat:8> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 