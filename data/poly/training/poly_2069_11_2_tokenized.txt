\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:1> + <var:H> * <var:c> ; <var:H> := <var:H> * <var:c> ; <var:H> := <var:H> * <var:c> ; <var:H> := <nat:1> + <var:H> * <var:c> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:1> + <var:H> * <var:c> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:2> + <var:H> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Assuming , letting positive coefficients $ <var:G> $ , that we have $ <var:c> = <var:G> $ ahead of executing the code segment , it follows that we see $ <var:H> = <nat:1> \cdot <var:G> ^ <nat:10> + <nat:4> \cdot <var:G> ^ <nat:9> + <nat:1> \cdot <var:G> ^ <nat:8> + <nat:1> \cdot <var:G> ^ <nat:5> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:2> $ once code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:G> \} \\ <var:H> := <nat:1> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \} \\ <var:H> := <nat:4> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> + <nat:4> \} \\ <var:H> := <nat:1> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:1> \} \\ <var:H> := <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + \} \\ <var:H> := <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + \} \\ <var:H> := <nat:1> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:5> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:1> \} \\ <var:H> := <nat:4> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:6> + <nat:4> \cdot <var:G> ^ <nat:5> + <nat:1> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> + <nat:4> \} \\ <var:H> := <nat:4> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:7> + <nat:4> \cdot <var:G> ^ <nat:6> + <nat:1> \cdot <var:G> ^ <nat:5> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:4> \} \\ <var:H> := <nat:1> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:8> + <nat:4> \cdot <var:G> ^ <nat:7> + <nat:1> \cdot <var:G> ^ <nat:6> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:1> \} \\ <var:H> := <nat:4> + <var:H> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:9> + <nat:4> \cdot <var:G> ^ <nat:8> + <nat:1> \cdot <var:G> ^ <nat:7> + <nat:1> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:4> \} \\ <var:H> := <nat:2> + <var:H> * <var:c> \\ \{ <var:c> = <var:G> \land <var:H> = <nat:1> \cdot <var:G> ^ <nat:10> + <nat:4> \cdot <var:G> ^ <nat:9> + <nat:1> \cdot <var:G> ^ <nat:8> + <nat:1> \cdot <var:G> ^ <nat:5> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:2> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:1> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:1> + <var:H> * <var:c> ; <var:H> := <var:H> * <var:c> ; <var:H> := <var:H> * <var:c> ; <var:H> := <nat:1> + <var:H> * <var:c> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:1> + <var:H> * <var:c> ; <var:H> := <nat:4> + <var:H> * <var:c> ; <var:H> := <nat:2> + <var:H> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:c> = <var:G> }} <def:poly> {{ <var:H> = <nat:1> * <var:G> ^ <nat:10> + <nat:4> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:8> + <nat:4> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:9> + <nat:4> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:H> = <nat:1> * <var:G> ^ <nat:10> + <nat:4> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 