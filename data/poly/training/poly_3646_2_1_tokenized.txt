\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:7> ; <var:o> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assuming ( given some $ <var:G> $ ) that we have $ <var:S> = <var:G> $ prior to interpreting the segment of code , then $ <var:o> = <nat:7> $ . \end{theorem} \begin{proof} The proof of this series of commands is clear by usual Hoare logic . Taking a look at the upcoming piece of code contained in our series of instructions , the binding line \verb | <var:O0> := <nat:7> ; | . This command forwards the precondition $ \{ <var:S> = <var:G> \} $ into the postcondition $ \{ <var:S> = <var:G> \land <var:O0> = <nat:7> \} $ . This is known to be sound by the assignment law of Hoare reasoning . Advancing to the next step , we see the variable update line \verb | <var:o> := <var:O0> | . This redefines $ \{ <var:S> = <var:G> \land <var:O0> = <nat:7> \} $ to the condition $ \{ <var:S> = <var:G> \land <var:o> = <nat:7> \} $ . This is shown through the assignment scheme defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:7> ; <var:o> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:S> = <var:G> }} <def:poly> {{ <var:o> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:o> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 