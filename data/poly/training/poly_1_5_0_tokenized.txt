\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:Q0> := <nat:5> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:D> ; <var:w> := <var:Q1> ; <var:w> := <var:w> + <var:Q0> \end{verbatim} Assuming it to be that $ <var:D> = <var:u> $ ahead of running the list of commands then we see $ <var:w> = <nat:4> \times <var:u> + <nat:5> $ after list of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:u> \} \\ <var:Q0> := <nat:5> ; \\ \{ <var:D> = <var:u> \land <var:Q0> = <nat:5> \} \\ <var:Q1> := <nat:4> ; \\ \{ <var:D> = <var:u> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:4> \cdot <var:u> \} \\ <var:w> := <var:Q1> ; \\ \{ <var:D> = <var:u> \land <var:Q0> = <nat:5> \land <var:w> = <nat:4> \cdot <var:u> \} \\ <var:w> := <var:w> + <var:Q0> \\ \{ <var:D> = <var:u> \land <var:w> = <nat:4> \cdot <var:u> + <nat:5> \} \end{eqnarray} The application of usual Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:D> = <var:u> }} <var:Q0> := <nat:5> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:D> ; <var:w> := <var:Q1> ; <var:w> := <var:w> + <var:Q0> {{ <var:w> = <nat:4> * <var:u> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:Q0> = <nat:5> /\ <var:w> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:w> = <nat:4> * <var:u> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 