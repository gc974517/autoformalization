\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:j0> := <nat:4> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:b> ; <var:e> := <var:j1> ; <var:e> := <var:e> + <var:j0> \end{verbatim} Assume $ <var:b> = <var:h> $ prior to evaluating the list of instructions it holds that $ <var:e> = <nat:8> \cdot <var:h> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the segment of code is shown with Hoare logic . Moving on to the subsequent pieces of code found in the set of instructions , we have \begin{verbatim} { <var:b> = <var:h> } <var:j0> := <nat:4> { <var:b> = <var:h> \land <var:j0> = <nat:4> } { <var:b> = <var:h> \land <var:j0> = <nat:4> } <var:j1> := <nat:8> { <var:b> = <var:h> \land <var:j0> = <nat:4> \land <var:j1> = <nat:8> } { <var:b> = <var:h> \land <var:j0> = <nat:4> \land <var:j1> = <nat:8> } <var:j1> := <var:j1> * <var:b> { <var:b> = <var:h> \land <var:j0> = <nat:4> \land <var:j1> = <nat:8> \times <var:h> } { <var:b> = <var:h> \land <var:j0> = <nat:4> \land <var:j1> = <nat:8> \times <var:h> } <var:e> := <var:j1> { <var:b> = <var:h> \land <var:j0> = <nat:4> \land <var:e> = <nat:8> \times <var:h> } { <var:b> = <var:h> \land <var:j0> = <nat:4> \land <var:e> = <nat:8> \times <var:h> } <var:e> := <var:e> + <var:j0{ <var:b> = <var:h> \land <var:e> = <nat:8> \times <var:h> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:b> = <var:h> }} <var:j0> := <nat:4> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:b> ; <var:e> := <var:j1> ; <var:e> := <var:e> + <var:j0> {{ <var:e> = <nat:8> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:j0> = <nat:4> /\ <var:e> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:e> = <nat:8> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 