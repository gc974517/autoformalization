\begin{document} \begin{theorem} Consider the following list of commands as follows \begin{verbatim} <var:H1> := <var:l> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:6> ; <var:g> := <var:H1> <var:g> := <var:g> + <var:H0> \end{verbatim} Given ( assuming some positive numbers $ <var:Y> $ ) it to hold that $ <var:l> = <var:Y> $ prior to the execution of the segment of code , it holds that $ <var:g> = <nat:6> \times <var:Y> + <nat:4> $ after code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:Y> \} \\ <var:H1> := <var:l> ; \\ \{ <var:l> = <var:Y> \land <var:H1> = <var:Y> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:l> = <var:Y> \land <var:H1> = <var:Y> \land <var:H0> = <nat:4> \} \\ <var:H1> := <var:H1> * <nat:6> ; \\ \{ <var:l> = <var:Y> \land <var:H1> = <nat:6> \times <var:Y> \land <var:H0> = <nat:4> \} \\ <var:g> := <var:H1> \\ \{ <var:l> = <var:Y> \land <var:H0> = <nat:4> \land <var:g> = <nat:6> \times <var:Y> \} \\ <var:g> := <var:g> + <var:H0> \\ \{ <var:l> = <var:Y> \land <var:g> = <nat:6> \times <var:Y> + <nat:4> \} \end{eqnarray} Using standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:l> = <var:Y> }} <var:H1> := <var:l> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:6> ; <var:g> := <var:H1> <var:g> := <var:g> + <var:H0> {{ <var:g> = <nat:6> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:H1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:H1> = <nat:6> * <var:Y> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:H0> = <nat:4> /\ <var:g> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:g> = <nat:6> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 