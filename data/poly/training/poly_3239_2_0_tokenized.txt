\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:1> ; <var:C> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:f> = <var:z> $ for all positive coefficients $ <var:z> $ ahead of the execution of our series of commands , it holds that we see $ <var:C> = <nat:1> $ after set of instructions exits . \end{theorem} \begin{proof} The method of proof for the list of instructions can be done with usual Hoare techniques . After , the variable assignmet code \verb | <var:j0> := <nat:1> ; | . This redefines the condition $ \{ <var:f> = <var:z> \} $ to the condition $ \{ <var:f> = <var:z> \land <var:j0> = <nat:1> \} $ . Considering the subsequent command in the segment of code , the variable binding code \verb | <var:C> := <var:j0> | . This transfers $ \{ <var:f> = <var:z> \land <var:j0> = <nat:1> \} $ as the condition $ \{ <var:f> = <var:z> \land <var:C> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:1> ; <var:C> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <def:poly> {{ <var:C> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:C> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 