\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:5> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:s> ; <var:I> := <var:v1> ; <var:I> := <var:I> + <var:v0> \end{verbatim} Allow it to be that $ <var:s> = <var:D> $ ahead of the execution of the series of instructions , it must be that we see $ <var:I> = <nat:5> \cdot <var:D> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:s> = <var:D> \} \\ <var:v0> := <nat:5> ; \\ \{ <var:s> = <var:D> \land <var:v0> = <nat:5> \} \\ <var:v1> := <nat:5> ; \\ \{ <var:s> = <var:D> \land <var:v0> = <nat:5> \land <var:v1> = <nat:5> \} \\ <var:v1> := <var:v1> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:v0> = <nat:5> \land <var:v1> = <nat:5> \cdot <var:D> \} \\ <var:I> := <var:v1> ; \\ \{ <var:s> = <var:D> \land <var:v0> = <nat:5> \land <var:I> = <nat:5> \cdot <var:D> \} \\ <var:I> := <var:I> + <var:v0> \\ \{ <var:s> = <var:D> \land <var:I> = <nat:5> \cdot <var:D> + <nat:5> \} \end{eqnarray} As a consequence , the set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:s> = <var:D> }} <var:v0> := <nat:5> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:s> ; <var:I> := <var:v1> ; <var:I> := <var:I> + <var:v0> {{ <var:I> = <nat:5> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:v0> = <nat:5> /\ <var:I> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:I> = <nat:5> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 