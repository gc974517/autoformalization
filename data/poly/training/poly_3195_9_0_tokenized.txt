\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:4> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:X> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:X> ; <var:r2> := <var:r2> * <var:X> ; <var:g> := <var:r2> ; <var:g> := <var:g> + <var:r1> ; <var:g> := <var:g> + <var:r0> \end{verbatim} Allow for every positive integers $ <var:U> $ that $ <var:X> = <var:U> $ before evaluating our segment of code , it must be that we see $ <var:g> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the program is evident through typical Hoare reasoning . Moving on to the subsequent piece of code in the segment of code , the environment update statement letting $ <nat:4> $ into $ <var:r0>$ . This advances the condition $ \{ <var:X> = <var:U> \} $ as $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \} $ . This is deduced through the assignment law in standard Hoare reasoning . Stepping through , we have the binding command letting $ <nat:2> $ to $ <var:r1>$ . This command moves the precondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \} $ into the postcondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \} $ . This is shown by the assignment inference rule of typical Hoare techniques . Following , we see the variable update code \verb | <var:r1> := <var:r1> * <var:X> ; | . This transfers the precondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \} $ to the postcondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \} $ . This is sound using the assignment law obtained from usual Hoare techniques . Moving on , we have the variable update command \verb | <var:r2> := <nat:2> ; | . This code advances the condition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \} $ to the condition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:r2> = <nat:2> \} $ . This is shown to be logically sound using the assignment scheme given in standard Hoare logic . Advancing to the following command contained in our code segment , we see the variable assignmet statement \verb | <var:r2> := <var:r2> * <var:X> ; | . This redefines the precondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:r2> = <nat:2> \} $ into the postcondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:r2> = <nat:2> \times <var:U> \} $ . Shifting focus toward the next line of code found in the program , we see the variable binding code binding $ <var:r2> * <var:X> $ into $ <var:r2>$ . This line forwards $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:r2> = <nat:2> \times <var:U> \} $ to the postcondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:r2> = <nat:2> \times <var:U> ^ <nat:2> \} $ . Going forward , we see the statement yielding $ <var:r2> $ to $ <var:g>$ . This takes $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:r2> = <nat:2> \times <var:U> ^ <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:g> = <nat:2> \times <var:U> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined in usual Hoare reasoning . Jumping to the subsequent command in our code segment , the binding statement \verb | <var:g> := <var:g> + <var:r1> ; | . This takes $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \times <var:U> \land <var:g> = <nat:2> \times <var:U> ^ <nat:2> \} $ into the condition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:g> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> \} $ . Considering the next step seen in our set of commands , we see the assignment line assigning $ <var:g> + <var:r0$ as $ <var:g>$ . This moves the precondition $ \{ <var:X> = <var:U> \land <var:r0> = <nat:4> \land <var:g> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> \} $ toward the condition $ \{ <var:X> = <var:U> \land <var:g> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:X> = <var:U> }} <var:r0> := <nat:4> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:X> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:X> ; <var:r2> := <var:r2> * <var:X> ; <var:g> := <var:r2> ; <var:g> := <var:g> + <var:r1> ; <var:g> := <var:g> + <var:r0> {{ <var:g> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:U> /\ <var:r2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:U> /\ <var:r2> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:U> /\ <var:r2> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:U> /\ <var:g> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r0> = <nat:4> /\ <var:g> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:g> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 