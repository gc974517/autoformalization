\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:1> ; <var:L> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:k> = <var:t> $ prior to interpreting our list of instructions it must be that $ <var:L> = <nat:1> $ once series of instructions is done . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:k> = <var:t> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:k> = <var:t> \land <var:K0> = <nat:1> \} \\ <var:L> := <var:K0> \\ \{ <var:k> = <var:t> \land <var:L> = <nat:1> \} \end{eqnarray} Considering the preceding argument , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:L> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:k> = <var:t> }} <def:poly> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 