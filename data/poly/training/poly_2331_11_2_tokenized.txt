\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <nat:4> + <var:d> * <var:N> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <nat:4> + <var:d> * <var:N> \end{verbatim} Given it to hold that $ <var:N> = <var:w> $ , given some whole numbers $ <var:w> $ , ahead of the evaluation of the series of commands , then we have $ <var:d> = <nat:2> \times <var:w> ^ <nat:10> + <nat:2> \times <var:w> ^ <nat:9> + <nat:4> \times <var:w> ^ <nat:8> + <nat:2> \times <var:w> ^ <nat:7> + <nat:2> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:4> $ after code segment has executed . \end{theorem} \begin{proof} The proof of our program is shown with standard Hoare techniques . Stepping forward , the variable binding statement \verb | <var:d> := <nat:2> ; | . This line transfers $ \{ <var:N> = <var:w> \} $ into the postcondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \} $ . This is deduced using the assignment scheme in typical Hoare techniques . Going forward , we have the variable binding code letting $ <nat:2> + <var:d> * <var:N> $ into $ <var:d>$ . This code takes $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \} $ as $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> + <nat:2> \} $ . This is known to be sound by the assignment rule in standard Hoare logic . Now , we see the assignment line defining $ <nat:4> + <var:d> * <var:N> $ into $ <var:d>$ . This line transfers the precondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> + <nat:2> \} $ as $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} $ . This is shown with the assignment scheme obtained from standard Hoare logic . Observing the proceeding statement seen in the series of instructions , we have the variable binding line defining $ <nat:2> + <var:d> * <var:N> $ as $ <var:d>$ . This command moves the precondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} $ as the condition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:2> \} $ . Moving on to the next step , the assignment statement defining $ <nat:2> + <var:d> * <var:N> $ into $ <var:d>$ . This command redefines $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:2> \} $ as $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> \} $ . This is shown by the assignment inference rule in standard Hoare reasoning . Stepping through , we see the assignment command \verb | <var:d> := <var:d> * <var:N> ; | . This takes the precondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> \} $ toward $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + \} $ . Taking another step toward the next piece of code seen in our series of commands , we have the environment update line yielding $ <var:d> * <var:N> $ to $ <var:d>$ . This moves the precondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + \} $ to $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + \} $ . This is shown to be logically sound through the assignment rule defined in Hoare logic . Immediately following , the binding command \verb | <var:d> := <nat:1> + <var:d> * <var:N> ; | . This statement forwards the condition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + \} $ into the postcondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:1> \} $ . Considering the next bit of code contained in our series of commands , the environment update code assigning $ <nat:1> + <var:d> * <var:N> $ into $ <var:d>$ . This takes the precondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:1> \} $ to the postcondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:4> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> + <nat:1> \} $ . This is rigorously given with the assignment inference rule defined by typical Hoare reasoning . Stepping through , we have the variable update line \verb | <var:d> := <nat:2> + <var:d> * <var:N> ; | . This advances the precondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:4> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> + <nat:1> \} $ toward the postcondition $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:9> + <nat:2> \cdot <var:w> ^ <nat:8> + <nat:4> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:2> \} $ . Going forward , we have the variable update code giving $ <nat:4> + <var:d> * <var:N$ into $ <var:d>$ . This command advances $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:9> + <nat:2> \cdot <var:w> ^ <nat:8> + <nat:4> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:2> \} $ to $ \{ <var:N> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:10> + <nat:2> \cdot <var:w> ^ <nat:9> + <nat:4> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:N> = <var:w> }} <var:d> := <nat:2> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <nat:4> + <var:d> * <var:N> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> ; <var:d> := <nat:2> + <var:d> * <var:N> ; <var:d> := <nat:4> + <var:d> * <var:N> {{ <var:d> = <nat:2> * <var:w> ^ <nat:10> + <nat:2> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:10> + <nat:2> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 