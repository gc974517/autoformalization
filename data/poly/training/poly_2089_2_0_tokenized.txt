\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:L> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:A> = <var:U> $ prior to interpreting the segment of code it must be that $ <var:L> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions can be accomplished with standard Hoare reasoning . Immediately after , we see \begin{verbatim} { <var:A> = <var:U> } <var:x0> := <nat:3> { <var:A> = <var:U> \land <var:x0> = <nat:3> } \end{verbatim} This is guaranteed with the variable update rule from typical Hoare logic . Paying attention to the proceeding piece of code seen in our series of commands , \begin{verbatim} { <var:A> = <var:U> } <var:x0> := <nat:3> { <var:A> = <var:U> \land <var:x0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:L> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:A> = <var:U> }} <def:poly> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 