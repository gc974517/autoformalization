\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:r> := <nat:1> ; <var:r> := <nat:4> + <var:r> * <var:O> ; <var:r> := <nat:1> + <var:r> * <var:O> ; <var:r> := <var:r> * <var:O> ; <var:r> := <nat:3> + <var:r> * <var:O> ; <var:r> := <nat:1> + <var:r> * <var:O> ; <var:r> := <nat:3> + <var:r> * <var:O> ; <var:r> := <nat:2> + <var:r> * <var:O> ; <var:r> := <nat:4> + <var:r> * <var:O> \end{verbatim} Given it to hold that $ <var:O> = <var:X> $ ahead of evaluating this series of commands then $ <var:r> = <nat:1> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> $ when series of instructions has terminated . \end{theorem} \begin{proof} The proof of our program can be shown with typical Hoare techniques . Looking at the subsequent commands found in the program , we have \verb | { <var:O> = <var:X> } <var:r> := <nat:1> { <var:O> = <var:X> \land <var:r> = <nat:1> } | , \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> } <var:r> := <nat:4> + <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> + <nat:4> } | , \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> + <nat:4> } <var:r> := <nat:1> + <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:1> } | , \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:1> } <var:r> := <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + } | , \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + } <var:r> := <nat:3> + <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> } | , \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> } <var:r> := <nat:1> + <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + <nat:1> } | and \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + <nat:1> } <var:r> := <nat:3> + <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:3> } | . Looking at the upcoming commands seen in the list of commands , we see \verb | { <var:O> = <var:X> } <var:r> := <nat:1> { <var:O> = <var:X> \land <var:r> = <nat:1> } | and \verb | { <var:O> = <var:X> \land <var:r> = <nat:1> } <var:r> := <nat:4> + <var:r> * <var:O> { <var:O> = <var:X> \land <var:r> = <nat:1> \times <var:X> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:O> = <var:X> }} <var:r> := <nat:1> ; <var:r> := <nat:4> + <var:r> * <var:O> ; <var:r> := <nat:1> + <var:r> * <var:O> ; <var:r> := <var:r> * <var:O> ; <var:r> := <nat:3> + <var:r> * <var:O> ; <var:r> := <nat:1> + <var:r> * <var:O> ; <var:r> := <nat:3> + <var:r> * <var:O> ; <var:r> := <nat:2> + <var:r> * <var:O> ; <var:r> := <nat:4> + <var:r> * <var:O> {{ <var:r> = <nat:1> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:r> = <nat:1> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 