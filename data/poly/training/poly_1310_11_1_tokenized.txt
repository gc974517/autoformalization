\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:n> ; <var:D2> := <var:D1> * <var:n> ; <var:D3> := <var:D2> * <var:n> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:2> ; <var:D2> := <var:D2> * <nat:7> ; <var:D3> := <var:D3> * <nat:8> ; <var:j> := <var:D3> <var:j> := <var:j> + <var:D2> <var:j> := <var:j> + <var:D1> <var:j> := <var:j> + <var:D0> \end{verbatim} Allowing that $ <var:n> = <var:G> $ ahead of running this program , then we have $ <var:j> = <nat:8> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:8> $ when segment of code has finished . \end{theorem} \begin{proof} Proving correctness for this segment of code can be given with standard Hoare techniques . Immediately after , we have \begin{eqnarray} \{ <var:n> = <var:G> \} \, <var:D1> := <var:n> \, \{ <var:n> = <var:G> \land <var:D1> = <var:G> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <var:G> \} \, <var:D2> := <var:D1> * <var:n> \, \{ <var:n> = <var:G> \land <var:D1> = <var:G> \land <var:D2> = <var:G> ^ <nat:2> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <var:G> \land <var:D2> = <var:G> ^ <nat:2> \} \, <var:D3> := <var:D2> * <var:n> \, \{ <var:n> = <var:G> \land <var:D1> = <var:G> \land <var:D2> = <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <var:G> \land <var:D2> = <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \} \, <var:D0> := <nat:8> \, \{ <var:n> = <var:G> \land <var:D1> = <var:G> \land <var:D2> = <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <var:G> \land <var:D2> = <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \, <var:D1> := <var:D1> * <nat:2> \, \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \, <var:D2> := <var:D2> * <nat:7> \, \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:D3> = <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \, <var:D3> := <var:D3> * <nat:8> \, \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:D3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:D3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:D0> = <nat:8> \} \, <var:j> := <var:D3\, \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:D0> = <nat:8> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:D0> = <nat:8> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> \} \, <var:j> := <var:j> + <var:D2\, \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D0> = <nat:8> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> \} \\ \{ <var:n> = <var:G> \land <var:D1> = <nat:2> \cdot <var:G> \land <var:D0> = <nat:8> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> \} \, <var:j> := <var:j> + <var:D1\, \{ <var:n> = <var:G> \land <var:D0> = <nat:8> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> \} \\ \{ <var:n> = <var:G> \land <var:D0> = <nat:8> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> \} \, <var:j> := <var:j> + <var:D0\, \{ <var:n> = <var:G> \land <var:j> = <nat:8> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:8> \} \end{eqnarray} This is sound through the variable assignmet scheme given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:n> = <var:G> }} <var:D1> := <var:n> ; <var:D2> := <var:D1> * <var:n> ; <var:D3> := <var:D2> * <var:n> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:2> ; <var:D2> := <var:D2> * <nat:7> ; <var:D3> := <var:D3> * <nat:8> ; <var:j> := <var:D3> <var:j> := <var:j> + <var:D2> <var:j> := <var:j> + <var:D1> <var:j> := <var:j> + <var:D0> {{ <var:j> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <var:G> /\ <var:D2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <var:G> /\ <var:D2> = <var:G> ^ <nat:2> /\ <var:D3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <var:G> /\ <var:D2> = <var:G> ^ <nat:2> /\ <var:D3> = <var:G> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <nat:2> * <var:G> /\ <var:D2> = <var:G> ^ <nat:2> /\ <var:D3> = <var:G> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <nat:2> * <var:G> /\ <var:D2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:D3> = <var:G> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <nat:2> * <var:G> /\ <var:D2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:D3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <nat:2> * <var:G> /\ <var:D2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:D0> = <nat:8> /\ <var:j> = <nat:8> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D1> = <nat:2> * <var:G> /\ <var:D0> = <nat:8> /\ <var:j> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:D0> = <nat:8> /\ <var:j> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:j> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 