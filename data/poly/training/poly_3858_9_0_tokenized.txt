\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:8> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:y> ; <var:B2> := <nat:8> ; <var:B2> := <var:B2> * <var:y> ; <var:B2> := <var:B2> * <var:y> ; <var:u> := <var:B2> ; <var:u> := <var:u> + <var:B1> ; <var:u> := <var:u> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:y> = <var:T> $ ( letting whole numbers $ <var:T> $ ) prior to evaluating our segment of code , it follows that we see $ <var:u> = <nat:8> \cdot <var:T> ^ <nat:2> + <nat:7> \cdot <var:T> + <nat:8> $ . \end{theorem} \begin{proof} We can see that the following decorated series of instructions . \begin{eqnarray} \{ <var:y> = <var:T> \} \\ <var:B0> := <nat:8> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \} \\ <var:B1> := <nat:7> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \} \\ <var:B1> := <var:B1> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \times <var:T> \} \\ <var:B2> := <nat:8> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \times <var:T> \land <var:B2> = <nat:8> \} \\ <var:B2> := <var:B2> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \times <var:T> \land <var:B2> = <nat:8> \times <var:T> \} \\ <var:B2> := <var:B2> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \times <var:T> \land <var:B2> = <nat:8> \times <var:T> ^ <nat:2> \} \\ <var:u> := <var:B2> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \times <var:T> \land <var:u> = <nat:8> \times <var:T> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:B1> ; \\ \{ <var:y> = <var:T> \land <var:B0> = <nat:8> \land <var:u> = <nat:8> \times <var:T> ^ <nat:2> + <nat:7> \times <var:T> \} \\ <var:u> := <var:u> + <var:B0> \\ \{ <var:y> = <var:T> \land <var:u> = <nat:8> \times <var:T> ^ <nat:2> + <nat:7> \times <var:T> + <nat:8> \} \end{eqnarray} Applying typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:8> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:y> ; <var:B2> := <nat:8> ; <var:B2> := <var:B2> * <var:y> ; <var:B2> := <var:B2> * <var:y> ; <var:u> := <var:B2> ; <var:u> := <var:u> + <var:B1> ; <var:u> := <var:u> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <def:poly> {{ <var:u> = <nat:8> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> * <var:T> /\ <var:B2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> * <var:T> /\ <var:B2> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> * <var:T> /\ <var:B2> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> * <var:T> /\ <var:u> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:B0> = <nat:8> /\ <var:u> = <nat:8> * <var:T> ^ <nat:2> + <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:u> = <nat:8> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 