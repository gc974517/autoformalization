\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:4> + <var:k> * <var:I> ; <var:k> := <nat:4> + <var:k> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Assume , for every positive integers $ <var:M> $ , it to hold that $ <var:I> = <var:M> $ before running the code , it follows that $ <var:k> = <nat:1> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our list of commands can be given with standard Hoare techniques . Next , we see \begin{eqnarray} \{ <var:I> = <var:M> \} \, <var:k> := <nat:1> \, \{ <var:I> = <var:M> \land <var:k> = <nat:1> \} \\ \{ <var:I> = <var:M> \land <var:k> = <nat:1> \} \, <var:k> := <nat:4> + <var:k> * <var:I> \, \{ <var:I> = <var:M> \land <var:k> = <nat:1> \cdot <var:M> + <nat:4> \} \end{eqnarray} Considering the subsequent step contained in our series of instructions , \begin{eqnarray} \{ <var:I> = <var:M> \} \, <var:k> := <nat:1> \, \{ <var:I> = <var:M> \land <var:k> = <nat:1> \} \end{eqnarray} This is known to be sound using the variable binding rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:1> ; <var:k> := <nat:4> + <var:k> * <var:I> ; <var:k> := <nat:4> + <var:k> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:I> = <var:M> }} <def:poly> {{ <var:k> = <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:k> = <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:k> = <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 