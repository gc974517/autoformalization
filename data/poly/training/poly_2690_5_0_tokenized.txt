\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:L> ; <var:Q> := <var:V1> ; <var:Q> := <var:Q> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assuming that we have $ <var:L> = <var:s> $ before interpreting our segment of code , it must be that we have $ <var:Q> = <nat:1> \cdot <var:s> + <nat:4> $ after program has finished executing . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:L> = <var:s> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:L> = <var:s> \land <var:V0> = <nat:4> \} \\ <var:V1> := <nat:1> ; \\ \{ <var:L> = <var:s> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \} \\ <var:V1> := <var:V1> * <var:L> ; \\ \{ <var:L> = <var:s> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \times <var:s> \} \\ <var:Q> := <var:V1> ; \\ \{ <var:L> = <var:s> \land <var:V0> = <nat:4> \land <var:Q> = <nat:1> \times <var:s> \} \\ <var:Q> := <var:Q> + <var:V0> \\ \{ <var:L> = <var:s> \land <var:Q> = <nat:1> \times <var:s> + <nat:4> \} \end{eqnarray} Given the above , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:L> ; <var:Q> := <var:V1> ; <var:Q> := <var:Q> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:Q> = <nat:1> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:V0> = <nat:4> /\ <var:Q> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:Q> = <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 