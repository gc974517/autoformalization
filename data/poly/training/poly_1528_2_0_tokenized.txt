\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:9> ; <var:x> := <var:A0> \end{verbatim} Assume that we have $ <var:G> = <var:c> $ prior to interpreting our segment of code it holds that we have $ <var:x> = <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be demonstrated through standard Hoare logic . Following , we see the variable assignmet line letting $ <nat:9> $ as $ <var:A0>$ . This command takes $ \{ <var:G> = <var:c> \} $ as the postcondition $ \{ <var:G> = <var:c> \land <var:A0> = <nat:9> \} $ . This is given with the assignment scheme in usual Hoare reasoning . Moving forward to the next step , the variable assignmet command \verb | <var:x> := <var:A0> | . This line transfers the precondition $ \{ <var:G> = <var:c> \land <var:A0> = <nat:9> \} $ into the postcondition $ \{ <var:G> = <var:c> \land <var:x> = <nat:9> \} $ . This is ensured with the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:G> = <var:c> }} <var:A0> := <nat:9> ; <var:x> := <var:A0> {{ <var:x> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:c> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:c> /\ <var:x> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 