\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:a> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:l> := <var:Y1> <var:l> := <var:l> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Allowing that we have $ <var:a> = <var:M> $ prior to the evaluation of our series of instructions it must be that we have $ <var:l> = <nat:3> * <var:M> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:M> \} \\ <var:Y1> := <var:a> ; \\ \{ <var:a> = <var:M> \land <var:Y1> = <var:M> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:a> = <var:M> \land <var:Y1> = <var:M> \land <var:Y0> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <nat:3> ; \\ \{ <var:a> = <var:M> \land <var:Y1> = <nat:3> * <var:M> \land <var:Y0> = <nat:1> \} \\ <var:l> := <var:Y1> \\ \{ <var:a> = <var:M> \land <var:Y0> = <nat:1> \land <var:l> = <nat:3> * <var:M> \} \\ <var:l> := <var:l> + <var:Y0> \\ \{ <var:a> = <var:M> \land <var:l> = <nat:3> * <var:M> + <nat:1> \} \end{eqnarray} The application of usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:a> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:l> := <var:Y1> <var:l> := <var:l> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:a> = <var:M> }} <def:poly> {{ <var:l> = <nat:3> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:Y1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:Y1> = <var:M> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:Y1> = <nat:3> * <var:M> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:Y0> = <nat:1> /\ <var:l> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:l> = <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 