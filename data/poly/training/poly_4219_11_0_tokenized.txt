\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:B0> := <nat:6> ; <var:B2> := <nat:1> ; <var:B2> := <var:B2> * <var:e> ; <var:B2> := <var:B2> * <var:e> ; <var:B3> := <nat:6> ; <var:B3> := <var:B3> * <var:e> ; <var:B3> := <var:B3> * <var:e> ; <var:B3> := <var:B3> * <var:e> ; <var:V> := <var:B3> ; <var:V> := <var:V> + <var:B2> ; <var:V> := <var:V> + <var:B0> \end{verbatim} Allow $ <var:e> = <var:X> $ ( for any positive integer coefficients $ <var:X> $ ) ahead of evaluating our series of instructions then we have $ <var:V> = <nat:6> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} The argument for our series of instructions can be shown through usual Hoare reasoning . Moving on , \[ \begin{tabular} {rcl} \{ <var:e> = <var:X> \} & <var:B0> := <nat:6> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} & <var:B2> := <nat:1> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> \} & <var:B2> := <var:B2> * <var:e> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> * <var:X> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> * <var:X> \} & <var:B2> := <var:B2> * <var:e> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> * <var:X> ^ <nat:2> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> * <var:X> ^ <nat:2> \} & <var:B3> := <nat:6> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> * <var:X> ^ <nat:2> \land <var:B3> = <nat:6> \} \end{tabular} Going forward , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:X> \} & <var:B0> := <nat:6> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} & <var:B2> := <nat:1> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> \} \end{tabular} This is rigorously given through the variable binding law of Hoare reasoning . Honing in on the upcoming statement found in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:X> \} & <var:B0> := <nat:6> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} \end{tabular} Considering the next bits of codecontained in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:X> \} & <var:B0> := <nat:6> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \} & <var:B2> := <nat:1> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> \} \\ \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> \} & <var:B2> := <var:B2> * <var:e> & \{ <var:e> = <var:X> \land <var:B0> = <nat:6> \land <var:B2> = <nat:1> * <var:X> \} \end{tabular} This is sound through the binding rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:e> = <var:X> }} <var:B0> := <nat:6> ; <var:B2> := <nat:1> ; <var:B2> := <var:B2> * <var:e> ; <var:B2> := <var:B2> * <var:e> ; <var:B3> := <nat:6> ; <var:B3> := <var:B3> * <var:e> ; <var:B3> := <var:B3> * <var:e> ; <var:B3> := <var:B3> * <var:e> ; <var:V> := <var:B3> ; <var:V> := <var:V> + <var:B2> ; <var:V> := <var:V> + <var:B0> {{ <var:V> = <nat:6> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:B3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:B3> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:B3> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:B3> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:V> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:B0> = <nat:6> /\ <var:V> = <nat:6> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:V> = <nat:6> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 