\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:3> ; <var:r> := <var:T0> \end{verbatim} Assuming it to be that $ <var:J> = <var:q> $ prior to the evaluation of our code segment it follows that $ <var:r> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the segment of code can be done through usual Hoare techniques . Following , \verb | { <var:J> = <var:q> } <var:T0> := <nat:3> { <var:J> = <var:q> \land <var:T0> = <nat:3> } | . This is shown to be logically sound using the rule given in Hoare logic . Considering the upcoming line of code found in the list of commands , \verb | { <var:J> = <var:q> } <var:T0> := <nat:3> { <var:J> = <var:q> \land <var:T0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:J> = <var:q> }} <var:T0> := <nat:3> ; <var:r> := <var:T0> {{ <var:r> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:q> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:q> /\ <var:r> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 