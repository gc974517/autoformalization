\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:U1> := <var:N> ; <var:U2> := <var:U1> * <var:N> ; <var:U3> := <var:U2> * <var:N> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:5> ; <var:U2> := <var:U2> * <nat:8> ; <var:U3> := <var:U3> * <nat:9> ; <var:p> := <var:U3> <var:p> := <var:p> + <var:U2> <var:p> := <var:p> + <var:U1> <var:p> := <var:p> + <var:U0> \end{verbatim} Assume for every natural numbers $ <var:d> $ it to be that $ <var:N> = <var:d> $ before the evaluation of this series of commands it must be that we see $ <var:p> = <nat:9> \times <var:d> ^ <nat:3> + <nat:8> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is accomplished through this decorated set of commands . \begin{eqnarray} \{ <var:N> = <var:d> \} \\ <var:U1> := <var:N> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <var:d> \} \\ <var:U2> := <var:U1> * <var:N> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <var:d> \land <var:U2> = <var:d> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:N> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <var:d> \land <var:U2> = <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <var:d> \land <var:U2> = <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \land <var:U0> = <nat:2> \} \\ <var:U1> := <var:U1> * <nat:5> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <nat:5> * <var:d> \land <var:U2> = <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \land <var:U0> = <nat:2> \} \\ <var:U2> := <var:U2> * <nat:8> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <nat:5> * <var:d> \land <var:U2> = <nat:8> * <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \land <var:U0> = <nat:2> \} \\ <var:U3> := <var:U3> * <nat:9> ; \\ \{ <var:N> = <var:d> \land <var:U1> = <nat:5> * <var:d> \land <var:U2> = <nat:8> * <var:d> ^ <nat:2> \land <var:U3> = <nat:9> * <var:d> ^ <nat:3> \land <var:U0> = <nat:2> \} \end{eqnarray} Allowing executing this program gives : \begin{eqnarray} <var:p> := <var:U3> \\ \{ <var:N> = <var:d> \land <var:U1> = <nat:5> * <var:d> \land <var:U2> = <nat:8> * <var:d> ^ <nat:2> \land <var:U0> = <nat:2> \land <var:p> = <nat:9> * <var:d> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:U2> \\ \{ <var:N> = <var:d> \land <var:U1> = <nat:5> * <var:d> \land <var:U0> = <nat:2> \land <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:U1> \\ \{ <var:N> = <var:d> \land <var:U0> = <nat:2> \land <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> \} \\ <var:p> := <var:p> + <var:U0> \\ \{ <var:N> = <var:d> \land <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:N> = <var:d> }} <var:U1> := <var:N> ; <var:U2> := <var:U1> * <var:N> ; <var:U3> := <var:U2> * <var:N> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:5> ; <var:U2> := <var:U2> * <nat:8> ; <var:U3> := <var:U3> * <nat:9> ; <var:p> := <var:U3> <var:p> := <var:p> + <var:U2> <var:p> := <var:p> + <var:U1> <var:p> := <var:p> + <var:U0> {{ <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <var:d> /\ <var:U2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <var:d> /\ <var:U2> = <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <var:d> /\ <var:U2> = <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <nat:5> * <var:d> /\ <var:U2> = <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <nat:5> * <var:d> /\ <var:U2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <nat:5> * <var:d> /\ <var:U2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:U3> = <nat:9> * <var:d> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <nat:5> * <var:d> /\ <var:U2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:U0> = <nat:2> /\ <var:p> = <nat:9> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U1> = <nat:5> * <var:d> /\ <var:U0> = <nat:2> /\ <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:U0> = <nat:2> /\ <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:p> = <nat:9> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 