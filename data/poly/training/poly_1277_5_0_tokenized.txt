\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:m> ; <var:l> := <var:J1> ; <var:l> := <var:l> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allowing , given all positive coefficients $ <var:k> $ , it to hold that $ <var:m> = <var:k> $ before evaluating our list of commands then $ <var:l> = <nat:5> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:k> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:m> = <var:k> \land <var:J0> = <nat:1> \} \\ <var:J1> := <nat:5> ; \\ \{ <var:m> = <var:k> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \} \\ <var:J1> := <var:J1> * <var:m> ; \\ \{ <var:m> = <var:k> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:k> \} \\ <var:l> := <var:J1> ; \\ \{ <var:m> = <var:k> \land <var:J0> = <nat:1> \land <var:l> = <nat:5> \cdot <var:k> \} \\ <var:l> := <var:l> + <var:J0> \\ \{ <var:m> = <var:k> \land <var:l> = <nat:5> \cdot <var:k> + <nat:1> \} \end{eqnarray} The application of usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:1> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:m> ; <var:l> := <var:J1> ; <var:l> := <var:l> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:m> = <var:k> }} <def:poly> {{ <var:l> = <nat:5> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:J0> = <nat:1> /\ <var:l> = <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:l> = <nat:5> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 