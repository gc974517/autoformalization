\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:3> ; <var:N> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Assume given some natural coefficients $ <var:Q> $ it to be that $ <var:k> = <var:Q> $ prior to the execution of our list of instructions , then we have $ <var:N> = <nat:3> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The method of proof for the list of commands can be given by Hoare reasoning . Looking at the following step in our code segment , we have \verb | { <var:k> = <var:Q> } <var:T0> := <nat:3> { <var:k> = <var:Q> \land <var:T0> = <nat:3> } | . This is shown to be logically sound by the variable binding scheme given in Hoare logic . Observing the subsequent step in our segment of code , we see \verb | { <var:k> = <var:Q> } <var:T0> := <nat:3> { <var:k> = <var:Q> \land <var:T0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:3> ; <var:N> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:k> = <var:Q> }} <def:poly> {{ <var:N> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:N> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 