\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:9> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:C> ; <var:c> := <var:W1> ; <var:c> := <var:c> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Allow that we have $ <var:C> = <var:T> $ ahead of running our list of commands , it follows that we see $ <var:c> = <nat:1> \cdot <var:T> + <nat:9> $ . \end{theorem} \begin{proof} The argument for our series of commands can be accomplished using typical Hoare reasoning . Immediately following , we have the assignment line yielding $ <nat:9> $ to $ <var:W0>$ . This transfers $ \{ <var:C> = <var:T> \} $ as the postcondition $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \} $ . This is rigorously given with the assignment law defined by usual Hoare techniques . Paying attention to the upcoming step found in the program , we have the environment update code binding $ <nat:1> $ to $ <var:W1>$ . This redefines $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \} $ to $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \land <var:W1> = <nat:1> \} $ . This is rigorously given through the assignment inference rule in Hoare techniques . Looking at the next step found in the list of instructions , the variable assignmet code binding $ <var:W1> * <var:C> $ into $ <var:W1>$ . This takes $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \land <var:W1> = <nat:1> \} $ toward $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \land <var:W1> = <nat:1> * <var:T> \} $ . This is ensured using the assignment rule obtained from standard Hoare logic . Moving on , we have the variable update code binding $ <var:W1> $ to $ <var:c>$ . This forwards $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \land <var:W1> = <nat:1> * <var:T> \} $ toward $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \land <var:c> = <nat:1> * <var:T> \} $ . This is deduced using the assignment scheme of typical Hoare logic . Stepping forward , we see the statement defining $ <var:c> + <var:W0$ into $ <var:c>$ . This statement advances the condition $ \{ <var:C> = <var:T> \land <var:W0> = <nat:9> \land <var:c> = <nat:1> * <var:T> \} $ into $ \{ <var:C> = <var:T> \land <var:c> = <nat:1> * <var:T> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:9> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:C> ; <var:c> := <var:W1> ; <var:c> := <var:c> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <def:poly> {{ <var:c> = <nat:1> * <var:T> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:W0> = <nat:9> /\ <var:c> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:c> = <nat:1> * <var:T> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 