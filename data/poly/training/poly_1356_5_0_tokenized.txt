\begin{document} \begin{theorem} We define the following series of instructions as follows \begin{verbatim} <var:r0> := <nat:1> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:g> ; <var:x> := <var:r1> ; <var:x> := <var:x> + <var:r0> \end{verbatim} Allowing it to be that $ <var:g> = <var:T> $ prior to evaluating the segment of code , then we see $ <var:x> = <nat:7> \times <var:T> + <nat:1> $ after segment of code has terminated . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:g> = <var:T> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:g> = <var:T> \land <var:r0> = <nat:1> \} \\ <var:r1> := <nat:7> ; \\ \{ <var:g> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:7> \} \\ <var:r1> := <var:r1> * <var:g> ; \\ \{ <var:g> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:7> \cdot <var:T> \} \\ <var:x> := <var:r1> ; \\ \{ <var:g> = <var:T> \land <var:r0> = <nat:1> \land <var:x> = <nat:7> \cdot <var:T> \} \\ <var:x> := <var:x> + <var:r0> \\ \{ <var:g> = <var:T> \land <var:x> = <nat:7> \cdot <var:T> + <nat:1> \} \end{eqnarray} As a consequence , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:g> = <var:T> }} <var:r0> := <nat:1> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:g> ; <var:x> := <var:r1> ; <var:x> := <var:x> + <var:r0> {{ <var:x> = <nat:7> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:r0> = <nat:1> /\ <var:x> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:x> = <nat:7> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 