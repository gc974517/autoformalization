\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:W> ; <var:X> := <var:a1> ; <var:X> := <var:X> + <var:a0> \end{verbatim} Allow $ <var:W> = <var:i> $ ahead of interpreting our segment of code , it holds that $ <var:X> = <nat:3> \cdot <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:W> = <var:i> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:W> = <var:i> \land <var:a0> = <nat:2> \} \\ <var:a1> := <nat:3> ; \\ \{ <var:W> = <var:i> \land <var:a0> = <nat:2> \land <var:a1> = <nat:3> \} \\ <var:a1> := <var:a1> * <var:W> ; \\ \{ <var:W> = <var:i> \land <var:a0> = <nat:2> \land <var:a1> = <nat:3> \cdot <var:i> \} \\ <var:X> := <var:a1> ; \\ \{ <var:W> = <var:i> \land <var:a0> = <nat:2> \land <var:X> = <nat:3> \cdot <var:i> \} \\ <var:X> := <var:X> + <var:a0> \\ \{ <var:W> = <var:i> \land <var:X> = <nat:3> \cdot <var:i> + <nat:2> \} \end{eqnarray} Considering the above , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:W> = <var:i> }} <var:a0> := <nat:2> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:W> ; <var:X> := <var:a1> ; <var:X> := <var:X> + <var:a0> {{ <var:X> = <nat:3> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:a0> = <nat:2> /\ <var:X> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:X> = <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 