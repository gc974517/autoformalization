\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:6> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:Z> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:Z> ; <var:C2> := <var:C2> * <var:Z> ; <var:u> := <var:C2> ; <var:u> := <var:u> + <var:C1> ; <var:u> := <var:u> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:Z> = <var:S> $ ahead of executing the series of instructions , it must be that $ <var:u> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is demonstrated using usual Hoare techniques . Moving forward to the upcoming bits of codeseen in our code segment , we have \verb | { <var:Z> = <var:S> } <var:C0> := <nat:6> { <var:Z> = <var:S> \land <var:C0> = <nat:6> } | , \verb | { <var:Z> = <var:S> \land <var:C0> = <nat:6> } <var:C1> := <nat:4> { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> } | , \verb | { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> } <var:C1> := <var:C1> * <var:Z> { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> * <var:S> } | and \verb | { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> * <var:S> } <var:C2> := <nat:4> { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> * <var:S> \land <var:C2> = <nat:4> } | . This is ensured by the variable assignmet inference rule in Hoare reasoning . Going to the next step , \verb | { <var:Z> = <var:S> } <var:C0> := <nat:6> { <var:Z> = <var:S> \land <var:C0> = <nat:6> } | . Taking another step toward the following lines of codecontained in the list of commands , we have \verb | { <var:Z> = <var:S> } <var:C0> := <nat:6> { <var:Z> = <var:S> \land <var:C0> = <nat:6> } | and \verb | { <var:Z> = <var:S> \land <var:C0> = <nat:6> } <var:C1> := <nat:4> { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> } | . This is ensured by the variable binding rule found in typical Hoare reasoning . Looking at the proceeding lines contained in the list of instructions , \verb | { <var:Z> = <var:S> } <var:C0> := <nat:6> { <var:Z> = <var:S> \land <var:C0> = <nat:6> } | and \verb | { <var:Z> = <var:S> \land <var:C0> = <nat:6> } <var:C1> := <nat:4> { <var:Z> = <var:S> \land <var:C0> = <nat:6> \land <var:C1> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:6> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:Z> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:Z> ; <var:C2> := <var:C2> * <var:Z> ; <var:u> := <var:C2> ; <var:u> := <var:u> + <var:C1> ; <var:u> := <var:u> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Z> = <var:S> }} <def:poly> {{ <var:u> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C2> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C2> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:4> * <var:S> /\ <var:u> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:C0> = <nat:6> /\ <var:u> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:u> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 