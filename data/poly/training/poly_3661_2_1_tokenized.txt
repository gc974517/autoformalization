\begin{document} \begin{theorem} Take a segment of code as follows \begin{verbatim} <var:d0> := <nat:2> ; <var:x> := <var:d0> \end{verbatim} Given that $ <var:a> = <var:O> $ ahead of the execution of the code , it holds that we see $ <var:x> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:O> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:a> = <var:O> \land <var:d0> = <nat:2> \} \\ <var:x> := <var:d0> \\ \{ <var:a> = <var:O> \land <var:x> = <nat:2> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <var:d0> := <nat:2> ; <var:x> := <var:d0> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 