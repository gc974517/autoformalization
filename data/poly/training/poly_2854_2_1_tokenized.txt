\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:1> ; <var:N> := <var:w0> \end{verbatim} Given $ <var:D> = <var:I> $ before the evaluation of this program , then $ <var:N> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is accomplished with standard Hoare logic . Shifting focus toward the upcoming bit of code seen in the series of instructions , we see the command \verb | <var:w0> := <nat:1> ; | . This code redefines $ \{ <var:D> = <var:I> \} $ into the postcondition $ \{ <var:D> = <var:I> \land <var:w0> = <nat:1> \} $ . Looking at the upcoming bit of code contained in our program , the variable update command \verb | <var:N> := <var:w0> | . This code transfers $ \{ <var:D> = <var:I> \land <var:w0> = <nat:1> \} $ as the condition $ \{ <var:D> = <var:I> \land <var:N> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:D> = <var:I> }} <var:w0> := <nat:1> ; <var:N> := <var:w0> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 