\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:p1> := <var:w> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:7> ; <var:K> := <var:p1> <var:K> := <var:K> + <var:p0> \end{verbatim} Assume , given every $ <var:D> $ , it to be that $ <var:w> = <var:D> $ ahead of interpreting our series of commands it follows that $ <var:K> = <nat:7> * <var:D> + <nat:7> $ after series of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is demonstrated with usual Hoare reasoning . Moving on to the next step , \verb | { <var:w> = <var:D> } <var:p1> := <var:w> { <var:w> = <var:D> \land <var:p1> = <var:D> } | . This is given through the variable assignmet rule in standard Hoare reasoning . Following , we see \verb | { <var:w> = <var:D> } <var:p1> := <var:w> { <var:w> = <var:D> \land <var:p1> = <var:D> } | and \verb | { <var:w> = <var:D> \land <var:p1> = <var:D> } <var:p0> := <nat:7> { <var:w> = <var:D> \land <var:p1> = <var:D> \land <var:p0> = <nat:7> } | . This is sound by the variable update inference rule of Hoare techniques . Considering the next step found in our series of commands , we have \verb | { <var:w> = <var:D> } <var:p1> := <var:w> { <var:w> = <var:D> \land <var:p1> = <var:D> } | . This is ensured with the scheme found in usual Hoare reasoning . Going to the next step , we see \verb | { <var:w> = <var:D> } <var:p1> := <var:w> { <var:w> = <var:D> \land <var:p1> = <var:D> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <var:p1> := <var:w> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:7> ; <var:K> := <var:p1> <var:K> := <var:K> + <var:p0> {{ <var:K> = <nat:7> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:p1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:p1> = <var:D> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:p1> = <nat:7> * <var:D> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:p0> = <nat:7> /\ <var:K> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:K> = <nat:7> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 