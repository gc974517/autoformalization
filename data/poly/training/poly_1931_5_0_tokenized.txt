\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:L> ; <var:s> := <var:b1> ; <var:s> := <var:s> + <var:b0> \end{verbatim} Assuming $ <var:L> = <var:i> $ ahead of evaluating our list of instructions , then we have $ <var:s> = <nat:7> \cdot <var:i> + <nat:3> $ once set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:i> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:L> = <var:i> \land <var:b0> = <nat:3> \} \\ <var:b1> := <nat:7> ; \\ \{ <var:L> = <var:i> \land <var:b0> = <nat:3> \land <var:b1> = <nat:7> \} \\ <var:b1> := <var:b1> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:b0> = <nat:3> \land <var:b1> = <nat:7> \cdot <var:i> \} \\ <var:s> := <var:b1> ; \\ \{ <var:L> = <var:i> \land <var:b0> = <nat:3> \land <var:s> = <nat:7> \cdot <var:i> \} \\ <var:s> := <var:s> + <var:b0> \\ \{ <var:L> = <var:i> \land <var:s> = <nat:7> \cdot <var:i> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:L> = <var:i> }} <var:b0> := <nat:3> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:L> ; <var:s> := <var:b1> ; <var:s> := <var:s> + <var:b0> {{ <var:s> = <nat:7> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:b0> = <nat:3> /\ <var:s> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:s> = <nat:7> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 