\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:m1> := <var:Y> ; <var:m2> := <var:m1> * <var:Y> ; <var:m3> := <var:m2> * <var:Y> ; <var:m0> := <nat:7> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:1> ; <var:z> := <var:m3> <var:z> := <var:z> + <var:m2> <var:z> := <var:z> + <var:m0> \end{verbatim} Assuming it to be that $ <var:Y> = <var:x> $ given all whole numbers $ <var:x> $ before evaluating the segment of code , then we see $ <var:z> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:7> $ when list of commands exits . \end{theorem} \begin{proof} The course of logic for the series of commands is accomplished by standard Hoare logic . Observing the following pieces of code seen in our code , \begin{eqnarray} \{ <var:Y> = <var:x> \} \, <var:m1> := <var:Y> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \} \\ \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \} \, <var:m2> := <var:m1> * <var:Y> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \} \\ \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:Y> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \} \\ \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \} \, <var:m0> := <nat:7> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} \\ \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} \, <var:m2> := <var:m2> * <nat:3> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} \\ \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} \, <var:m3> := <var:m3> * <nat:1> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:m3> = <nat:1> \times <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} \end{eqnarray} This is shown to be logically sound with the variable assignmet scheme of standard Hoare reasoning . Moving forward to the next statement found in our list of commands , we see \begin{eqnarray} \{ <var:Y> = <var:x> \} \, <var:m1> := <var:Y> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \} \end{eqnarray} Paying attention to the next piece of code contained in our series of instructions , we see \begin{eqnarray} \{ <var:Y> = <var:x> \} \, <var:m1> := <var:Y> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \} \end{eqnarray} Honing in on the upcoming bit of code found in the series of commands , we have \begin{eqnarray} \{ <var:Y> = <var:x> \} \, <var:m1> := <var:Y> \, \{ <var:Y> = <var:x> \land <var:m1> = <var:x> \} \end{eqnarray} This is deduced through the rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Y> = <var:x> }} <var:m1> := <var:Y> ; <var:m2> := <var:m1> * <var:Y> ; <var:m3> := <var:m2> * <var:Y> ; <var:m0> := <nat:7> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:1> ; <var:z> := <var:m3> <var:z> := <var:z> + <var:m2> <var:z> := <var:z> + <var:m0> {{ <var:z> = <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m0> = <nat:7> /\ <var:z> = <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m1> = <var:x> /\ <var:m0> = <nat:7> /\ <var:z> = <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:z> = <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 