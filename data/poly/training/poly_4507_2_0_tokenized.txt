\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:3> ; <var:j> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:W> = <var:C> $ ahead of interpreting our list of commands then we have $ <var:j> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is accomplished through this decorated set of commands . \begin{eqnarray} \{ <var:W> = <var:C> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:W> = <var:C> \land <var:H0> = <nat:3> \} \\ <var:j> := <var:H0> \\ \{ <var:W> = <var:C> \land <var:j> = <nat:3> \} \end{eqnarray} The application of typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:3> ; <var:j> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:W> = <var:C> }} <def:poly> {{ <var:j> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:j> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 