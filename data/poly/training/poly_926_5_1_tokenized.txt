\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V1> := <var:f> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:9> ; <var:x> := <var:V1> <var:x> := <var:x> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:f> = <var:r> $ , for all positive integers $ <var:r> $ , before evaluating this code segment , it must be that we see $ <var:x> = <nat:9> \cdot <var:r> + <nat:5> $ once code segment terminates . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:f> = <var:r> \} \\ <var:V1> := <var:f> ; \\ \{ <var:f> = <var:r> \land <var:V1> = <var:r> \} \\ <var:V0> := <nat:5> ; \\ \{ <var:f> = <var:r> \land <var:V1> = <var:r> \land <var:V0> = <nat:5> \} \\ <var:V1> := <var:V1> * <nat:9> ; \\ \{ <var:f> = <var:r> \land <var:V1> = <nat:9> \cdot <var:r> \land <var:V0> = <nat:5> \} \\ <var:x> := <var:V1> \\ \{ <var:f> = <var:r> \land <var:V0> = <nat:5> \land <var:x> = <nat:9> \cdot <var:r> \} \\ <var:x> := <var:x> + <var:V0> \\ \{ <var:f> = <var:r> \land <var:x> = <nat:9> \cdot <var:r> + <nat:5> \} \end{eqnarray} Considering the above , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:f> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:9> ; <var:x> := <var:V1> <var:x> := <var:x> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:f> = <var:r> }} <def:poly> {{ <var:x> = <nat:9> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:V1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:V1> = <var:r> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:V1> = <nat:9> * <var:r> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:V0> = <nat:5> /\ <var:x> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:x> = <nat:9> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 