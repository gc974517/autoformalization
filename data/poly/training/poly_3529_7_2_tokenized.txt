\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:2> + <var:s> * <var:R> ; <var:s> := <nat:4> + <var:s> * <var:R> ; <var:s> := <nat:1> + <var:s> * <var:R> ; <var:s> := <nat:4> + <var:s> * <var:R> ; <var:s> := <var:s> * <var:R> ; <var:s> := <nat:3> + <var:s> * <var:R> \end{verbatim} Assuming ( taking positive integer coefficients $ <var:C> $ ) it to hold that $ <var:R> = <var:C> $ before evaluating our set of instructions , it holds that we have $ <var:s> = <nat:4> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> $ once segment of code is done . \end{theorem} \begin{proof} Applying standard Hoare logic results in : \begin{eqnarray} \{ <var:R> = <var:C> \} \\ <var:s> := <nat:4> ; \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> \} \\ <var:s> := <nat:2> + <var:s> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> * <var:C> + <nat:2> \} \\ <var:s> := <nat:4> + <var:s> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> \} \\ <var:s> := <nat:1> + <var:s> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:1> \} \\ <var:s> := <nat:4> + <var:s> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> \} \end{eqnarray} Furthering running this list of commands results in : \begin{eqnarray} <var:s> := <var:s> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + \} \\ <var:s> := <nat:3> + <var:s> * <var:R> \\ \{ <var:R> = <var:C> \land <var:s> = <nat:4> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:R> = <var:C> }} <var:s> := <nat:4> ; <var:s> := <nat:2> + <var:s> * <var:R> ; <var:s> := <nat:4> + <var:s> * <var:R> ; <var:s> := <nat:1> + <var:s> * <var:R> ; <var:s> := <nat:4> + <var:s> * <var:R> ; <var:s> := <var:s> * <var:R> ; <var:s> := <nat:3> + <var:s> * <var:R> {{ <var:s> = <nat:4> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:s> = <nat:4> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 