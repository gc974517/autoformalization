\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:1> ; <var:h> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Given --- for positive coefficients $ <var:U> $ --- that we have $ <var:K> = <var:U> $ before interpreting our series of commands , it holds that $ <var:h> = <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:K> = <var:U> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:K> = <var:U> \land <var:y0> = <nat:1> \} \\ <var:h> := <var:y0> \\ \{ <var:K> = <var:U> \land <var:h> = <nat:1> \} \end{eqnarray} As a consequence , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:h> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:K> = <var:U> }} <def:poly> {{ <var:h> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:h> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 