\begin{document} \begin{theorem} We define a list of instructions : \begin{verbatim} <var:i0> := <nat:1> ; <var:P> := <var:i0> \end{verbatim} Allowing it to be that $ <var:z> = <var:v> $ before evaluating the set of commands , it must be that $ <var:P> = <nat:1> $ when list of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:v> \} \\ <var:i0> := <nat:1> ; \\ \{ <var:z> = <var:v> \land <var:i0> = <nat:1> \} \\ <var:P> := <var:i0> \\ \{ <var:z> = <var:v> \land <var:P> = <nat:1> \} \end{eqnarray} Utilizing usual Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:z> = <var:v> }} <var:i0> := <nat:1> ; <var:P> := <var:i0> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 