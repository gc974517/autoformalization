\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:W1> := <var:G> ; <var:W2> := <var:W1> * <var:G> ; <var:W3> := <var:W2> * <var:G> ; <var:W0> := <nat:9> ; <var:W1> := <var:W1> * <nat:9> ; <var:W3> := <var:W3> * <nat:5> ; <var:F> := <var:W3> <var:F> := <var:F> + <var:W1> <var:F> := <var:F> + <var:W0> \end{verbatim} Assume ( for any whole numbers $ <var:H> $ ) that $ <var:G> = <var:H> $ ahead of interpreting the series of commands , it holds that we have $ <var:F> = <nat:5> \times <var:H> ^ <nat:3> + <nat:9> \times <var:H> + <nat:9> $ when set of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be given with typical Hoare reasoning . Moving on to the proceeding statements in our series of instructions , \begin{eqnarray} \{ <var:G> = <var:H> \} \, <var:W1> := <var:G> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <var:H> \} \, <var:W2> := <var:W1> * <var:G> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} \, <var:W3> := <var:W2> * <var:G> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \} \, <var:W0> := <nat:9> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:9> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:9> \} \, <var:W1> := <var:W1> * <nat:9> \, \{ <var:G> = <var:H> \land <var:W1> = <nat:9> \cdot <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:9> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <nat:9> \cdot <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:9> \} \, <var:W3> := <var:W3> * <nat:5> \, \{ <var:G> = <var:H> \land <var:W1> = <nat:9> \cdot <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <nat:5> \cdot <var:H> ^ <nat:3> \land <var:W0> = <nat:9> \} \end{eqnarray} This is shown through the variable assignmet rule of typical Hoare reasoning . Moving on to the upcoming commands seen in the list of commands , we see \begin{eqnarray} \{ <var:G> = <var:H> \} \, <var:W1> := <var:G> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <var:H> \} \, <var:W2> := <var:W1> * <var:G> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} \\ \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} \, <var:W3> := <var:W2> * <var:G> \, \{ <var:G> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:G> = <var:H> }} <var:W1> := <var:G> ; <var:W2> := <var:W1> * <var:G> ; <var:W3> := <var:W2> * <var:G> ; <var:W0> := <nat:9> ; <var:W1> := <var:W1> * <nat:9> ; <var:W3> := <var:W3> * <nat:5> ; <var:F> := <var:W3> <var:F> := <var:F> + <var:W1> <var:F> := <var:F> + <var:W0> {{ <var:F> = <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W0> = <nat:9> /\ <var:F> = <nat:5> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:W0> = <nat:9> /\ <var:F> = <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:F> = <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 