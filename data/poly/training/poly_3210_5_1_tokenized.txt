\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:J> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:5> ; <var:w> := <var:t1> <var:w> := <var:w> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:J> = <var:H> $ for some positive coefficients $ <var:H> $ ahead of interpreting the list of commands , then $ <var:w> = <nat:5> \cdot <var:H> + <nat:9> $ after program has finished . \end{theorem} \begin{proof} Arguing the correctness of our program is given using Hoare techniques . Moving onward , we have \begin{verbatim} { <var:J> = <var:H> } <var:t1> := <var:J> { <var:J> = <var:H> \land <var:t1> = <var:H> } { <var:J> = <var:H> \land <var:t1> = <var:H> } <var:t0> := <nat:9> { <var:J> = <var:H> \land <var:t1> = <var:H> \land <var:t0> = <nat:9> } { <var:J> = <var:H> \land <var:t1> = <var:H> \land <var:t0> = <nat:9> } <var:t1> := <var:t1> * <nat:5> { <var:J> = <var:H> \land <var:t1> = <nat:5> * <var:H> \land <var:t0> = <nat:9> } { <var:J> = <var:H> \land <var:t1> = <nat:5> * <var:H> \land <var:t0> = <nat:9> } <var:w> := <var:t1{ <var:J> = <var:H> \land <var:t0> = <nat:9> \land <var:w> = <nat:5> * <var:H> } \end{verbatim} Taking a look at the subsequent command contained in the code segment , we see \begin{verbatim} { <var:J> = <var:H> } <var:t1> := <var:J> { <var:J> = <var:H> \land <var:t1> = <var:H> } \end{verbatim} This is sound using the variable update rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:J> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:5> ; <var:w> := <var:t1> <var:w> := <var:w> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:J> = <var:H> }} <def:poly> {{ <var:w> = <nat:5> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:t1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:t1> = <var:H> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:t1> = <nat:5> * <var:H> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:t0> = <nat:9> /\ <var:w> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:w> = <nat:5> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 