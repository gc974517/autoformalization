\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:c> ; <var:X> := <var:g1> ; <var:X> := <var:X> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:c> = <var:v> $ , for some $ <var:v> $ , ahead of the execution of the code then $ <var:X> = <nat:2> \times <var:v> + <nat:2> $ once list of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be seen with standard Hoare techniques . Next , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:v> \} & <var:g0> := <nat:2> & \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \} \\ \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \} & <var:g1> := <nat:2> & \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:2> \} \\ \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:2> \} & <var:g1> := <var:g1> * <var:c> & \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:2> * <var:v> \} \\ \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:2> * <var:v> \} & <var:X> := <var:g1> & \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \land <var:X> = <nat:2> * <var:v> \} \end{tabular} This is shown with the environment update law given by Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:v> \} & <var:g0> := <nat:2> & \{ <var:c> = <var:v> \land <var:g0> = <nat:2> \} \end{tabular} This is shown with the binding scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:c> ; <var:X> := <var:g1> ; <var:X> := <var:X> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:c> = <var:v> }} <def:poly> {{ <var:X> = <nat:2> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:g0> = <nat:2> /\ <var:X> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:X> = <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 