\begin{document} \begin{theorem} Take a code segment as \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:k> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:k> ; <var:A2> := <var:A2> * <var:k> ; <var:W> := <var:A2> ; <var:W> := <var:W> + <var:A1> ; <var:W> := <var:W> + <var:A0> \end{verbatim} Allowing that $ <var:k> = <var:f> $ before interpreting the code it follows that we see $ <var:W> = <nat:3> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> $ once program has executed . \end{theorem} \begin{proof} The course of logic for this segment of code is evident by standard Hoare logic . Moving on to the next command in the program , the command letting $ <nat:2> $ toward $ <var:A0>$ . This statement forwards the condition $ \{ <var:k> = <var:f> \} $ to the postcondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \} $ . Honing in on the following step contained in our program , we have the variable assignmet command giving $ <nat:4> $ as $ <var:A1>$ . This code redefines the precondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \} $ toward $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \} $ . Further , the binding statement \verb | <var:A1> := <var:A1> * <var:k> ; | . This moves the precondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \} $ to the condition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \} $ . This is sound with the assignment scheme defined by standard Hoare reasoning . Immediately after , we have the variable update command assigning $ <nat:3> $ toward $ <var:A2>$ . This takes $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \} $ to $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:A2> = <nat:3> \} $ . This is rigorously given with the assignment scheme in Hoare logic . Taking a look at the following bit of code found in our segment of code , we see the variable update line \verb | <var:A2> := <var:A2> * <var:k> ; | . This advances the condition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:A2> = <nat:3> \} $ toward $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:A2> = <nat:3> \cdot <var:f> \} $ . Paying attention to the proceeding command contained in our list of commands , we see the environment update code \verb | <var:A2> := <var:A2> * <var:k> ; | . This advances the precondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:A2> = <nat:3> \cdot <var:f> \} $ into the postcondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:A2> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ . This is known to be sound with the assignment rule found in typical Hoare reasoning . Focusing on the subsequent piece of code contained in the set of commands , we have the command \verb | <var:W> := <var:A2> ; | . This line transfers $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:A2> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:W> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule given in usual Hoare reasoning . Going to the next step , we see the variable binding statement \verb | <var:W> := <var:W> + <var:A1> ; | . This redefines the precondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:A1> = <nat:4> \cdot <var:f> \land <var:W> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ to $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:W> = <nat:3> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> \} $ . This is known to be sound with the assignment rule given in Hoare reasoning . Observing the next step seen in the set of instructions , the binding statement \verb | <var:W> := <var:W> + <var:A0> | . This statement takes the precondition $ \{ <var:k> = <var:f> \land <var:A0> = <nat:2> \land <var:W> = <nat:3> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> \} $ as the postcondition $ \{ <var:k> = <var:f> \land <var:W> = <nat:3> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:2> \} $ . This is ensured through the assignment rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:k> = <var:f> }} <var:A0> := <nat:2> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:k> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:k> ; <var:A2> := <var:A2> * <var:k> ; <var:W> := <var:A2> ; <var:W> := <var:W> + <var:A1> ; <var:W> := <var:W> + <var:A0> {{ <var:W> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:4> * <var:f> /\ <var:A2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:4> * <var:f> /\ <var:A2> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:4> * <var:f> /\ <var:A2> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:4> * <var:f> /\ <var:W> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:A0> = <nat:2> /\ <var:W> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:W> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 