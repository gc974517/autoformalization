\begin{document} \begin{theorem} We define the following series of commands as \begin{verbatim} <var:Z0> := <nat:1> ; <var:N> := <var:Z0> \end{verbatim} Allow it to hold that $ <var:h> = <var:t> $ before evaluating our code segment it follows that we see $ <var:N> = <nat:1> $ once code has terminated . \end{theorem} \begin{proof} Observe this decorated series of instructions . \begin{eqnarray} \{ <var:h> = <var:t> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:h> = <var:t> \land <var:Z0> = <nat:1> \} \\ <var:N> := <var:Z0> \\ \{ <var:h> = <var:t> \land <var:N> = <nat:1> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:h> = <var:t> }} <var:Z0> := <nat:1> ; <var:N> := <var:Z0> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 