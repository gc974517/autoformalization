\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:u1> := <var:i> ; <var:u0> := <nat:7> ; <var:u1> := <var:u1> * <nat:3> ; <var:h> := <var:u1> <var:h> := <var:h> + <var:u0> \end{verbatim} Assume it to hold that $ <var:i> = <var:v> $ ahead of executing this list of commands then $ <var:h> = <nat:3> \cdot <var:v> + <nat:7> $ after set of instructions executes . \end{theorem} \begin{proof} Applying typical Hoare reasoning results in : \begin{eqnarray} \{ <var:i> = <var:v> \} \\ <var:u1> := <var:i> ; \\ \{ <var:i> = <var:v> \land <var:u1> = <var:v> \} \\ <var:u0> := <nat:7> ; \\ \{ <var:i> = <var:v> \land <var:u1> = <var:v> \land <var:u0> = <nat:7> \} \\ <var:u1> := <var:u1> * <nat:3> ; \\ \{ <var:i> = <var:v> \land <var:u1> = <nat:3> \cdot <var:v> \land <var:u0> = <nat:7> \} \\ <var:h> := <var:u1> \\ \{ <var:i> = <var:v> \land <var:u0> = <nat:7> \land <var:h> = <nat:3> \cdot <var:v> \} \\ <var:h> := <var:h> + <var:u0> \\ \{ <var:i> = <var:v> \land <var:h> = <nat:3> \cdot <var:v> + <nat:7> \} \end{eqnarray} Hence , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:i> = <var:v> }} <var:u1> := <var:i> ; <var:u0> := <nat:7> ; <var:u1> := <var:u1> * <nat:3> ; <var:h> := <var:u1> <var:h> := <var:h> + <var:u0> {{ <var:h> = <nat:3> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:u1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:u1> = <var:v> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:u1> = <nat:3> * <var:v> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:u0> = <nat:7> /\ <var:h> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:h> = <nat:3> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 