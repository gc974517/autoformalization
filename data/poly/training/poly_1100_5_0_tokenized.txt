\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:1> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:d> ; <var:T> := <var:u1> ; <var:T> := <var:T> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:d> = <var:s> $ before the execution of this list of commands , it follows that we see $ <var:T> = <nat:9> * <var:s> + <nat:1> $ after series of instructions is done executing . \end{theorem} \begin{proof} The method of proof for this set of commands is evident through usual Hoare reasoning . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:s> \} & <var:u0> := <nat:1> & \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \} \\ \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \} & <var:u1> := <nat:9> & \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \land <var:u1> = <nat:9> \} \\ \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \land <var:u1> = <nat:9> \} & <var:u1> := <var:u1> * <var:d> & \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \land <var:u1> = <nat:9> * <var:s> \} \\ \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \land <var:u1> = <nat:9> * <var:s> \} & <var:T> := <var:u1> & \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \land <var:T> = <nat:9> * <var:s> \} \\ \{ <var:d> = <var:s> \land <var:u0> = <nat:1> \land <var:T> = <nat:9> * <var:s> \} & <var:T> := <var:T> + <var:u0& \{ <var:d> = <var:s> \land <var:T> = <nat:9> * <var:s> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:d> ; <var:T> := <var:u1> ; <var:T> := <var:T> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:d> = <var:s> }} <def:poly> {{ <var:T> = <nat:9> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:u0> = <nat:1> /\ <var:T> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:T> = <nat:9> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 