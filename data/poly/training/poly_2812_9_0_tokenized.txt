\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:4> ; <var:C1> := <nat:5> ; <var:C1> := <var:C1> * <var:G> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:G> ; <var:C2> := <var:C2> * <var:G> ; <var:U> := <var:C2> ; <var:U> := <var:U> + <var:C1> ; <var:U> := <var:U> + <var:C0> \end{verbatim} Allowing $ <var:G> = <var:B> $ prior to the execution of the list of instructions it follows that we have $ <var:U> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be accomplished through usual Hoare logic . Advancing to the following line in the list of commands , we see the environment update line assigning $ <nat:4> $ to $ <var:C0>$ . This redefines $ \{ <var:G> = <var:B> \} $ as the condition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \} $ . This is shown with the assignment scheme defined in Hoare techniques . Advancing to the next step , we see the variable binding line assigning $ <nat:5> $ to $ <var:C1>$ . This redefines the condition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \} $ as the postcondition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \} $ . This is rigorously given through the assignment law given by Hoare techniques . Moving forward to the next line in our list of commands , we have the variable assignmet line binding $ <var:C1> * <var:G> $ into $ <var:C1>$ . This command advances $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \} $ as $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \} $ . This is guaranteed with the assignment scheme in standard Hoare logic . Keeping momentum , the statement binding $ <nat:3> $ to $ <var:C2>$ . This moves the condition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \} $ toward $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:C2> = <nat:3> \} $ . This is shown to be logically sound by the assignment law found in Hoare techniques . Considering the upcoming line of code seen in our code segment , the variable binding command \verb | <var:C2> := <var:C2> * <var:G> ; | . This takes the condition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:C2> = <nat:3> \} $ as the condition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:C2> = <nat:3> \cdot <var:B> \} $ . Further , the variable update command \verb | <var:C2> := <var:C2> * <var:G> ; | . This statement moves $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:C2> = <nat:3> \cdot <var:B> \} $ as the condition $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:C2> = <nat:3> \cdot <var:B> ^ <nat:2> \} $ . Advancing , we see the variable update command assigning $ <var:C2> $ as $ <var:U>$ . This command forwards $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:C2> = <nat:3> \cdot <var:B> ^ <nat:2> \} $ as $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:U> = <nat:3> \cdot <var:B> ^ <nat:2> \} $ . This is given using the assignment law obtained from standard Hoare reasoning . Next , we have the variable update statement binding $ <var:U> + <var:C1> $ as $ <var:U>$ . This takes $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:C1> = <nat:5> \cdot <var:B> \land <var:U> = <nat:3> \cdot <var:B> ^ <nat:2> \} $ as $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:U> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} $ . Focusing on the following command contained in the segment of code , we see the variable binding command \verb | <var:U> := <var:U> + <var:C0> | . This statement takes $ \{ <var:G> = <var:B> \land <var:C0> = <nat:4> \land <var:U> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} $ into the condition $ \{ <var:G> = <var:B> \land <var:U> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:4> \} $ . This is deduced through the assignment law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:G> = <var:B> }} <var:C0> := <nat:4> ; <var:C1> := <nat:5> ; <var:C1> := <var:C1> * <var:G> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:G> ; <var:C2> := <var:C2> * <var:G> ; <var:U> := <var:C2> ; <var:U> := <var:U> + <var:C1> ; <var:U> := <var:U> + <var:C0> {{ <var:U> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:C1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:C1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:C1> = <nat:5> * <var:B> /\ <var:C2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:C1> = <nat:5> * <var:B> /\ <var:C2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:C1> = <nat:5> * <var:B> /\ <var:C2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:C1> = <nat:5> * <var:B> /\ <var:U> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:C0> = <nat:4> /\ <var:U> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:U> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 