\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:6> ; <var:i> := <var:W0> \end{verbatim} Given it to be that $ <var:N> = <var:M> $ prior to the evaluation of this series of instructions , it must be that $ <var:i> = <nat:6> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions can be shown through Hoare techniques . Advancing to the next step , the assignment statement \verb | <var:W0> := <nat:6> ; | . This command redefines the precondition $ \{ <var:N> = <var:M> \} $ into the postcondition $ \{ <var:N> = <var:M> \land <var:W0> = <nat:6> \} $ . This is given through the assignment rule given by standard Hoare reasoning . Shifting focus toward the next bit of code in the program , we have the variable update code \verb | <var:i> := <var:W0> | . This takes $ \{ <var:N> = <var:M> \land <var:W0> = <nat:6> \} $ into $ \{ <var:N> = <var:M> \land <var:i> = <nat:6> \} $ . This is guaranteed through the assignment inference rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:N> = <var:M> }} <var:W0> := <nat:6> ; <var:i> := <var:W0> {{ <var:i> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:i> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 