\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:Z1> := <var:X> ; <var:Z2> := <var:Z1> * <var:X> ; <var:Z3> := <var:Z2> * <var:X> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:Z2> := <var:Z2> * <nat:7> ; <var:Z3> := <var:Z3> * <nat:2> ; <var:d> := <var:Z3> <var:d> := <var:d> + <var:Z2> <var:d> := <var:d> + <var:Z1> <var:d> := <var:d> + <var:Z0> \end{verbatim} Assume that $ <var:X> = <var:I> $ prior to running our program it follows that $ <var:d> = <nat:2> \cdot <var:I> ^ <nat:3> + <nat:7> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> + <nat:7> $ . \end{theorem} \begin{proof} Notice this decorated series of instructions . \begin{eqnarray} \{ <var:X> = <var:I> \} \\ <var:Z1> := <var:X> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <var:I> \} \\ <var:Z2> := <var:Z1> * <var:X> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <var:I> \land <var:Z2> = <var:I> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:X> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <var:I> \land <var:Z2> = <var:I> ^ <nat:2> \land <var:Z3> = <var:I> ^ <nat:3> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <var:I> \land <var:Z2> = <var:I> ^ <nat:2> \land <var:Z3> = <var:I> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z1> := <var:Z1> * <nat:6> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <nat:6> * <var:I> \land <var:Z2> = <var:I> ^ <nat:2> \land <var:Z3> = <var:I> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z2> := <var:Z2> * <nat:7> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <nat:6> * <var:I> \land <var:Z2> = <nat:7> * <var:I> ^ <nat:2> \land <var:Z3> = <var:I> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z3> := <var:Z3> * <nat:2> ; \\ \{ <var:X> = <var:I> \land <var:Z1> = <nat:6> * <var:I> \land <var:Z2> = <nat:7> * <var:I> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:I> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:d> := <var:Z3> \\ \{ <var:X> = <var:I> \land <var:Z1> = <nat:6> * <var:I> \land <var:Z2> = <nat:7> * <var:I> ^ <nat:2> \land <var:Z0> = <nat:7> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:Z2> \\ \{ <var:X> = <var:I> \land <var:Z1> = <nat:6> * <var:I> \land <var:Z0> = <nat:7> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:Z1> \\ \{ <var:X> = <var:I> \land <var:Z0> = <nat:7> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> \} \\ <var:d> := <var:d> + <var:Z0> \\ \{ <var:X> = <var:I> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:7> \} \end{eqnarray} The application of typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <var:Z1> := <var:X> ; <var:Z2> := <var:Z1> * <var:X> ; <var:Z3> := <var:Z2> * <var:X> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:Z2> := <var:Z2> * <nat:7> ; <var:Z3> := <var:Z3> * <nat:2> ; <var:d> := <var:Z3> <var:d> := <var:d> + <var:Z2> <var:d> := <var:d> + <var:Z1> <var:d> := <var:d> + <var:Z0> {{ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <var:I> /\ <var:Z2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <var:I> /\ <var:Z2> = <var:I> ^ <nat:2> /\ <var:Z3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <var:I> /\ <var:Z2> = <var:I> ^ <nat:2> /\ <var:Z3> = <var:I> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <nat:6> * <var:I> /\ <var:Z2> = <var:I> ^ <nat:2> /\ <var:Z3> = <var:I> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <nat:6> * <var:I> /\ <var:Z2> = <nat:7> * <var:I> ^ <nat:2> /\ <var:Z3> = <var:I> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <nat:6> * <var:I> /\ <var:Z2> = <nat:7> * <var:I> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:I> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <nat:6> * <var:I> /\ <var:Z2> = <nat:7> * <var:I> ^ <nat:2> /\ <var:Z0> = <nat:7> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z1> = <nat:6> * <var:I> /\ <var:Z0> = <nat:7> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:Z0> = <nat:7> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 