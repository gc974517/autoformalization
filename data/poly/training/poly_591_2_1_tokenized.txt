\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:1> ; <var:Y> := <var:Z0> \end{verbatim} Assuming it to hold that $ <var:c> = <var:B> $ , with some $ <var:B> \in \mathbb{Z}^+ $ , prior to evaluating the list of commands it follows that $ <var:Y> = <nat:1> $ once code has finished . \end{theorem} \begin{proof} The application of typical Hoare techniques gives : \begin{eqnarray} \{ <var:c> = <var:B> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:c> = <var:B> \land <var:Z0> = <nat:1> \} \\ <var:Y> := <var:Z0> \\ \{ <var:c> = <var:B> \land <var:Y> = <nat:1> \} \end{eqnarray} Considering the preceding argument , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:c> = <var:B> }} <var:Z0> := <nat:1> ; <var:Y> := <var:Z0> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:B> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:B> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 