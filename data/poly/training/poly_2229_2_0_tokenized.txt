\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:6> ; <var:F> := <var:I0> \end{verbatim} Allowing it to be that $ <var:f> = <var:T> $ before executing the program , it follows that we have $ <var:F> = <nat:6> $ after set of commands terminates . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:f> = <var:T> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:f> = <var:T> \land <var:I0> = <nat:6> \} \\ <var:F> := <var:I0> \\ \{ <var:f> = <var:T> \land <var:F> = <nat:6> \} \end{eqnarray} As a result , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:f> = <var:T> }} <var:I0> := <nat:6> ; <var:F> := <var:I0> {{ <var:F> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:F> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 