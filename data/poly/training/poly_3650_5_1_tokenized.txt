\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:N> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:1> ; <var:u> := <var:R1> <var:u> := <var:u> + <var:R0> \end{verbatim} Assuming it to hold that $ <var:N> = <var:D> $ ahead of the evaluation of our set of commands , it must be that we see $ <var:u> = <nat:1> \cdot <var:D> + <nat:3> $ once set of commands is done . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:N> = <var:D> \} \\ <var:R1> := <var:N> ; \\ \{ <var:N> = <var:D> \land <var:R1> = <var:D> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:N> = <var:D> \land <var:R1> = <var:D> \land <var:R0> = <nat:3> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:N> = <var:D> \land <var:R1> = <nat:1> \times <var:D> \land <var:R0> = <nat:3> \} \\ <var:u> := <var:R1> \\ \{ <var:N> = <var:D> \land <var:R0> = <nat:3> \land <var:u> = <nat:1> \times <var:D> \} \\ <var:u> := <var:u> + <var:R0> \\ \{ <var:N> = <var:D> \land <var:u> = <nat:1> \times <var:D> + <nat:3> \} \end{eqnarray} Given the preceding argument , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:N> = <var:D> }} <var:R1> := <var:N> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:1> ; <var:u> := <var:R1> <var:u> := <var:u> + <var:R0> {{ <var:u> = <nat:1> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:R1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:R1> = <var:D> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:R1> = <nat:1> * <var:D> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:R0> = <nat:3> /\ <var:u> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:u> = <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 