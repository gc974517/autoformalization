\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:Y1> := <var:P> ; <var:Y2> := <var:Y1> * <var:P> ; <var:Y3> := <var:Y2> * <var:P> ; <var:Y4> := <var:Y3> * <var:P> ; <var:Y5> := <var:Y4> * <var:P> ; <var:Y0> := <nat:7> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y5> := <var:Y5> * <nat:1> ; <var:J> := <var:Y5> <var:J> := <var:J> + <var:Y2> <var:J> := <var:J> + <var:Y0> \end{verbatim} Assuming ( with some integers $ <var:B> $ ) that we have $ <var:P> = <var:B> $ before running this series of instructions it must be that $ <var:J> = <nat:1> \times <var:B> ^ <nat:5> + <nat:4> \times <var:B> ^ <nat:2> + <nat:7> $ when series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:B> \} \\ <var:Y1> := <var:P> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \} \\ <var:Y2> := <var:Y1> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \} \\ <var:Y4> := <var:Y3> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y4> = <var:B> ^ <nat:4> \} \\ <var:Y5> := <var:Y4> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y4> = <var:B> ^ <nat:4> \land <var:Y5> = <var:B> ^ <nat:5> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y4> = <var:B> ^ <nat:4> \land <var:Y5> = <var:B> ^ <nat:5> \land <var:Y0> = <nat:7> \} \\ <var:Y2> := <var:Y2> * <nat:4> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <nat:4> \times <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y4> = <var:B> ^ <nat:4> \land <var:Y5> = <var:B> ^ <nat:5> \land <var:Y0> = <nat:7> \} \\ <var:Y5> := <var:Y5> * <nat:1> ; \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <nat:4> \times <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y4> = <var:B> ^ <nat:4> \land <var:Y5> = <nat:1> \times <var:B> ^ <nat:5> \land <var:Y0> = <nat:7> \} \\ <var:J> := <var:Y5> \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <nat:4> \times <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y4> = <var:B> ^ <nat:4> \land <var:Y0> = <nat:7> \land <var:J> = <nat:1> \times <var:B> ^ <nat:5> \} \\ <var:J> := <var:J> + <var:Y2> \\ \{ <var:P> = <var:B> \land <var:Y1> = <var:B> \land <var:Y0> = <nat:7> \land <var:J> = <nat:1> \times <var:B> ^ <nat:5> + <nat:4> \times <var:B> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:Y0> \\ \{ <var:P> = <var:B> \land <var:J> = <nat:1> \times <var:B> ^ <nat:5> + <nat:4> \times <var:B> ^ <nat:2> + <nat:7> \} \end{eqnarray} The application of typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <var:Y4> : string := " <var:Y4> " . Definition <var:Y5> : string := " <var:Y5> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:P> = <var:B> }} <var:Y1> := <var:P> ; <var:Y2> := <var:Y1> * <var:P> ; <var:Y3> := <var:Y2> * <var:P> ; <var:Y4> := <var:Y3> * <var:P> ; <var:Y5> := <var:Y4> * <var:P> ; <var:Y0> := <nat:7> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y5> := <var:Y5> * <nat:1> ; <var:J> := <var:Y5> <var:J> := <var:J> + <var:Y2> <var:J> := <var:J> + <var:Y0> {{ <var:J> = <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y4> = <var:B> ^ <nat:4> /\ <var:Y5> = <var:B> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y4> = <var:B> ^ <nat:4> /\ <var:Y5> = <var:B> ^ <nat:5> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y4> = <var:B> ^ <nat:4> /\ <var:Y5> = <var:B> ^ <nat:5> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y4> = <var:B> ^ <nat:4> /\ <var:Y5> = <nat:1> * <var:B> ^ <nat:5> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y4> = <var:B> ^ <nat:4> /\ <var:Y0> = <nat:7> /\ <var:J> = <nat:1> * <var:B> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y0> = <nat:7> /\ <var:J> = <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:J> = <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 