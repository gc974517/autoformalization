\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:e> ; <var:S> := <var:o1> ; <var:S> := <var:S> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> . Given that $ <var:e> = <var:k> $ ahead of evaluating our segment of code , it must be that we have $ <var:S> = <nat:2> \cdot <var:k> + <nat:1> $ once series of instructions executes . \end{theorem} \begin{proof} The proof of our list of instructions is accomplished by Hoare techniques . Advancing to the subsequent statements seen in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:k> \} & <var:o0> := <nat:1> & \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \} \\ \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \} & <var:o1> := <nat:2> & \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \land <var:o1> = <nat:2> \} \end{tabular} This is known to be sound through the binding rule obtained from typical Hoare techniques . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:k> \} & <var:o0> := <nat:1> & \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \} \\ \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \} & <var:o1> := <nat:2> & \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \land <var:o1> = <nat:2> \} \\ \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \land <var:o1> = <nat:2> \} & <var:o1> := <var:o1> * <var:e> & \{ <var:e> = <var:k> \land <var:o0> = <nat:1> \land <var:o1> = <nat:2> \times <var:k> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:1> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:e> ; <var:S> := <var:o1> ; <var:S> := <var:S> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:e> = <var:k> }} <def:poly> {{ <var:S> = <nat:2> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:o0> = <nat:1> /\ <var:S> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:S> = <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 