\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:2> ; <var:K> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Allow it to hold that $ <var:R> = <var:w> $ ahead of running this set of commands , it must be that we have $ <var:K> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be done by Hoare reasoning . Shifting focus toward the proceeding line of code found in our code segment , \begin{eqnarray} \{ <var:R> = <var:w> \} \, <var:p0> := <nat:2> \, \{ <var:R> = <var:w> \land <var:p0> = <nat:2> \} \end{eqnarray} This is deduced through the rule given by Hoare logic . Moving on , \begin{eqnarray} \{ <var:R> = <var:w> \} \, <var:p0> := <nat:2> \, \{ <var:R> = <var:w> \land <var:p0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:K> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <def:poly> {{ <var:K> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:K> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 