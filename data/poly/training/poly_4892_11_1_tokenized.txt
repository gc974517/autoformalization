\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:C> ; <var:Q2> := <var:Q1> * <var:C> ; <var:Q3> := <var:Q2> * <var:C> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:Q3> := <var:Q3> * <nat:5> ; <var:O> := <var:Q3> <var:O> := <var:O> + <var:Q2> <var:O> := <var:O> + <var:Q1> <var:O> := <var:O> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allow that $ <var:C> = <var:D> $ ahead of executing the set of commands , it must be that we have $ <var:O> = <nat:5> \cdot <var:D> ^ <nat:3> + <nat:5> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:3> $ once list of instructions is done . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:C> = <var:D> \} \\ <var:Q1> := <var:C> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <var:D> \} \\ <var:Q2> := <var:Q1> * <var:C> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <var:D> \land <var:Q2> = <var:D> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:C> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <var:D> \land <var:Q2> = <var:D> ^ <nat:2> \land <var:Q3> = <var:D> ^ <nat:3> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <var:D> \land <var:Q2> = <var:D> ^ <nat:2> \land <var:Q3> = <var:D> ^ <nat:3> \land <var:Q0> = <nat:3> \} \\ <var:Q1> := <var:Q1> * <nat:7> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <nat:7> * <var:D> \land <var:Q2> = <var:D> ^ <nat:2> \land <var:Q3> = <var:D> ^ <nat:3> \land <var:Q0> = <nat:3> \} \\ <var:Q2> := <var:Q2> * <nat:5> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <nat:7> * <var:D> \land <var:Q2> = <nat:5> * <var:D> ^ <nat:2> \land <var:Q3> = <var:D> ^ <nat:3> \land <var:Q0> = <nat:3> \} \\ <var:Q3> := <var:Q3> * <nat:5> ; \\ \{ <var:C> = <var:D> \land <var:Q1> = <nat:7> * <var:D> \land <var:Q2> = <nat:5> * <var:D> ^ <nat:2> \land <var:Q3> = <nat:5> * <var:D> ^ <nat:3> \land <var:Q0> = <nat:3> \} \\ <var:O> := <var:Q3> \\ \{ <var:C> = <var:D> \land <var:Q1> = <nat:7> * <var:D> \land <var:Q2> = <nat:5> * <var:D> ^ <nat:2> \land <var:Q0> = <nat:3> \land <var:O> = <nat:5> * <var:D> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:Q2> \\ \{ <var:C> = <var:D> \land <var:Q1> = <nat:7> * <var:D> \land <var:Q0> = <nat:3> \land <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:Q1> \\ \{ <var:C> = <var:D> \land <var:Q0> = <nat:3> \land <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> \} \\ <var:O> := <var:O> + <var:Q0> \\ \{ <var:C> = <var:D> \land <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:3> \} \end{eqnarray} Therefore , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:C> ; <var:Q2> := <var:Q1> * <var:C> ; <var:Q3> := <var:Q2> * <var:C> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:Q3> := <var:Q3> * <nat:5> ; <var:O> := <var:Q3> <var:O> := <var:O> + <var:Q2> <var:O> := <var:O> + <var:Q1> <var:O> := <var:O> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:C> = <var:D> }} <def:poly> {{ <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <var:D> /\ <var:Q2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <var:D> /\ <var:Q2> = <var:D> ^ <nat:2> /\ <var:Q3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <var:D> /\ <var:Q2> = <var:D> ^ <nat:2> /\ <var:Q3> = <var:D> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <nat:7> * <var:D> /\ <var:Q2> = <var:D> ^ <nat:2> /\ <var:Q3> = <var:D> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <nat:7> * <var:D> /\ <var:Q2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:Q3> = <var:D> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <nat:7> * <var:D> /\ <var:Q2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:Q3> = <nat:5> * <var:D> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <nat:7> * <var:D> /\ <var:Q2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:Q0> = <nat:3> /\ <var:O> = <nat:5> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q1> = <nat:7> * <var:D> /\ <var:Q0> = <nat:3> /\ <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:Q0> = <nat:3> /\ <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:O> = <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 