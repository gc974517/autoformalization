\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:L> ; <var:d2> := <nat:4> ; <var:d2> := <var:d2> * <var:L> ; <var:d2> := <var:d2> * <var:L> ; <var:F> := <var:d2> ; <var:F> := <var:F> + <var:d1> ; <var:F> := <var:F> + <var:d0> \end{verbatim} Assuming it to hold that $ <var:L> = <var:B> $ prior to evaluating this program then we have $ <var:F> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> $ after series of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be seen by the following decorated list of instructions . \begin{eqnarray} \{ <var:L> = <var:B> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \} \end{eqnarray} Continuing executing this code gives : \begin{eqnarray} <var:d1> := <nat:2> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> \} \\ <var:d1> := <var:d1> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> * <var:B> \} \\ <var:d2> := <nat:4> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:4> \} \\ <var:d2> := <var:d2> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:4> * <var:B> \} \\ <var:d2> := <var:d2> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:4> * <var:B> ^ <nat:2> \} \\ <var:F> := <var:d2> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> * <var:B> \land <var:F> = <nat:4> * <var:B> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:d1> ; \\ \{ <var:L> = <var:B> \land <var:d0> = <nat:4> \land <var:F> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> \} \\ <var:F> := <var:F> + <var:d0> \\ \{ <var:L> = <var:B> \land <var:F> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} \end{eqnarray} The application of usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:L> = <var:B> }} <var:d0> := <nat:4> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:L> ; <var:d2> := <nat:4> ; <var:d2> := <var:d2> * <var:L> ; <var:d2> := <var:d2> * <var:L> ; <var:F> := <var:d2> ; <var:F> := <var:F> + <var:d1> ; <var:F> := <var:F> + <var:d0> {{ <var:F> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> * <var:B> /\ <var:F> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:d0> = <nat:4> /\ <var:F> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:F> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 