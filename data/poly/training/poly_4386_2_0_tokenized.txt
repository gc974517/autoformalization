\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:9> ; <var:O> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:Q> = <var:A> $ prior to executing the list of commands , it holds that we see $ <var:O> = <nat:9> $ after program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:A> \} \\ <var:L0> := <nat:9> ; \\ \{ <var:Q> = <var:A> \land <var:L0> = <nat:9> \} \\ <var:O> := <var:L0> \\ \{ <var:Q> = <var:A> \land <var:O> = <nat:9> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:O> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Q> = <var:A> }} <def:poly> {{ <var:O> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 