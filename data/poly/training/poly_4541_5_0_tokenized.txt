\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:2> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:D> ; <var:r> := <var:v1> ; <var:r> := <var:r> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Given it to be that $ <var:D> = <var:Y> $ before interpreting this list of commands , it follows that $ <var:r> = <nat:5> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands can be demonstrated using Hoare logic . Immediately after , we see the variable assignmet statement defining $ <nat:2> $ as $ <var:v0>$ . This forwards the condition $ \{ <var:D> = <var:Y> \} $ as $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \} $ . This is shown through the assignment law given in usual Hoare reasoning . Going forward , we see the variable assignmet code binding $ <nat:5> $ toward $ <var:v1>$ . This code redefines the condition $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \land <var:v1> = <nat:5> \} $ . Considering the subsequent piece of code found in our set of instructions , we see the variable binding line binding $ <var:v1> * <var:D> $ into $ <var:v1>$ . This moves the precondition $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \land <var:v1> = <nat:5> \} $ as the postcondition $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \land <var:v1> = <nat:5> \times <var:Y> \} $ . Following , the binding command yielding $ <var:v1> $ as $ <var:r>$ . This statement transfers the precondition $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \land <var:v1> = <nat:5> \times <var:Y> \} $ toward the condition $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \land <var:r> = <nat:5> \times <var:Y> \} $ . This is known to be sound with the assignment inference rule of Hoare techniques . Moving onward , the binding code binding $ <var:r> + <var:v0$ into $ <var:r>$ . This statement takes $ \{ <var:D> = <var:Y> \land <var:v0> = <nat:2> \land <var:r> = <nat:5> \times <var:Y> \} $ toward the postcondition $ \{ <var:D> = <var:Y> \land <var:r> = <nat:5> \times <var:Y> + <nat:2> \} $ . This is deduced through the assignment inference rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:D> ; <var:r> := <var:v1> ; <var:r> := <var:r> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:D> = <var:Y> }} <def:poly> {{ <var:r> = <nat:5> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:v0> = <nat:2> /\ <var:r> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:r> = <nat:5> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 