\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} : \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:3> + <var:d> * <var:l> \end{verbatim} Allowing $ <var:l> = <var:K> $ before the evaluation of our series of commands , it holds that we see $ <var:d> = <nat:2> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is clear by usual Hoare logic . Moving forward to the next step , we see the binding code binding $ <nat:2> $ as $ <var:d>$ . This line advances the condition $ \{ <var:l> = <var:K> \} $ to the condition $ \{ <var:l> = <var:K> \land <var:d> = <nat:2> \} $ . Moving on , the variable update statement giving $ <nat:3> + <var:d> * <var:l$ to $ <var:d>$ . This transfers the precondition $ \{ <var:l> = <var:K> \land <var:d> = <nat:2> \} $ toward $ \{ <var:l> = <var:K> \land <var:d> = <nat:2> \times <var:K> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:l> = <var:K> }} <var:d> := <nat:2> ; <var:d> := <nat:3> + <var:d> * <var:l> {{ <var:d> = <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:d> = <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 