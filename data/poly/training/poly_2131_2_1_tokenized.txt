\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:3> ; <var:I> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given , for any whole numbers $ <var:N> $ , that $ <var:y> = <var:N> $ before evaluating our set of instructions , then we have $ <var:I> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our code segment can be seen with typical Hoare techniques . Advancing to the next steps contained in our code , \begin{eqnarray} \{ <var:y> = <var:N> \} \, <var:g0> := <nat:3> \, \{ <var:y> = <var:N> \land <var:g0> = <nat:3> \} \\ \{ <var:y> = <var:N> \land <var:g0> = <nat:3> \} \, <var:I> := <var:g0\, \{ <var:y> = <var:N> \land <var:I> = <nat:3> \} \end{eqnarray} This is sound by the environment update inference rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:I> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:y> = <var:N> }} <def:poly> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 