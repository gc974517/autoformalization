\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:G1> := <var:e> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:2> ; <var:M> := <var:G1> <var:M> := <var:M> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:e> = <var:c> $ ahead of the evaluation of this set of instructions it must be that $ <var:M> = <nat:2> * <var:c> + <nat:7> $ when segment of code has terminated . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is evident with Hoare logic . Looking at the proceeding step in our set of instructions , the assignment command \verb | <var:G1> := <var:e> ; | . This forwards the condition $ \{ <var:e> = <var:c> \} $ to the postcondition $ \{ <var:e> = <var:c> \land <var:G1> = <var:c> \} $ . This is guaranteed through the assignment law given by standard Hoare reasoning . Observing the upcoming statement in the segment of code , the binding line \verb | <var:G0> := <nat:7> ; | . This code takes $ \{ <var:e> = <var:c> \land <var:G1> = <var:c> \} $ toward $ \{ <var:e> = <var:c> \land <var:G1> = <var:c> \land <var:G0> = <nat:7> \} $ . This is known to be sound through the assignment rule defined by usual Hoare techniques . Considering the subsequent step contained in the segment of code , the binding command \verb | <var:G1> := <var:G1> * <nat:2> ; | . This transfers the condition $ \{ <var:e> = <var:c> \land <var:G1> = <var:c> \land <var:G0> = <nat:7> \} $ to the condition $ \{ <var:e> = <var:c> \land <var:G1> = <nat:2> * <var:c> \land <var:G0> = <nat:7> \} $ . This is known to be sound by the assignment rule given in standard Hoare logic . Taking a look at the following step found in the set of commands , the binding command giving $ <var:G1$ toward $ <var:M>$ . This moves $ \{ <var:e> = <var:c> \land <var:G1> = <nat:2> * <var:c> \land <var:G0> = <nat:7> \} $ toward the condition $ \{ <var:e> = <var:c> \land <var:G0> = <nat:7> \land <var:M> = <nat:2> * <var:c> \} $ . Stepping through , we have the variable assignmet code letting $ <var:M> + <var:G0$ as $ <var:M>$ . This code takes the condition $ \{ <var:e> = <var:c> \land <var:G0> = <nat:7> \land <var:M> = <nat:2> * <var:c> \} $ toward $ \{ <var:e> = <var:c> \land <var:M> = <nat:2> * <var:c> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:e> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:2> ; <var:M> := <var:G1> <var:M> := <var:M> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:e> = <var:c> }} <def:poly> {{ <var:M> = <nat:2> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:G1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:G1> = <var:c> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:G1> = <nat:2> * <var:c> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:G0> = <nat:7> /\ <var:M> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:M> = <nat:2> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 