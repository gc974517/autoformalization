\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:8> ; <var:F> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allow that $ <var:t> = <var:H> $ ahead of evaluating the segment of code , it must be that we have $ <var:F> = <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this program is accomplished through this decorated series of commands . \begin{eqnarray} \{ <var:t> = <var:H> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:t> = <var:H> \land <var:Q0> = <nat:8> \} \\ <var:F> := <var:Q0> \\ \{ <var:t> = <var:H> \land <var:F> = <nat:8> \} \end{eqnarray} The application of Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:F> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:t> = <var:H> }} <def:poly> {{ <var:F> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:F> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 