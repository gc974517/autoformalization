\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:F> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:1> ; <var:i> := <var:x1> <var:i> := <var:i> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:F> = <var:j> $ ahead of running the series of instructions , then $ <var:i> = <nat:1> * <var:j> + <nat:7> $ when series of instructions has finished . \end{theorem} \begin{proof} The proof of the code is done through typical Hoare logic . Going to the next step , we see \begin{verbatim} { <var:F> = <var:j> } <var:x1> := <var:F> { <var:F> = <var:j> \land <var:x1> = <var:j> } { <var:F> = <var:j> \land <var:x1> = <var:j> } <var:x0> := <nat:7> { <var:F> = <var:j> \land <var:x1> = <var:j> \land <var:x0> = <nat:7> } { <var:F> = <var:j> \land <var:x1> = <var:j> \land <var:x0> = <nat:7> } <var:x1> := <var:x1> * <nat:1> { <var:F> = <var:j> \land <var:x1> = <nat:1> \times <var:j> \land <var:x0> = <nat:7> } { <var:F> = <var:j> \land <var:x1> = <nat:1> \times <var:j> \land <var:x0> = <nat:7> } <var:i> := <var:x1{ <var:F> = <var:j> \land <var:x0> = <nat:7> \land <var:i> = <nat:1> \times <var:j> } { <var:F> = <var:j> \land <var:x0> = <nat:7> \land <var:i> = <nat:1> \times <var:j> } <var:i> := <var:i> + <var:x0{ <var:F> = <var:j> \land <var:i> = <nat:1> \times <var:j> + <nat:7> } \end{verbatim} This is shown with the assignment scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:F> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:1> ; <var:i> := <var:x1> <var:i> := <var:i> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:F> = <var:j> }} <def:poly> {{ <var:i> = <nat:1> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:j> /\ <var:x1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:j> /\ <var:x1> = <var:j> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:j> /\ <var:x1> = <nat:1> * <var:j> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:j> /\ <var:x0> = <nat:7> /\ <var:i> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:j> /\ <var:i> = <nat:1> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 