\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:4> + <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:3> + <var:h> * <var:e> ; <var:h> := <nat:4> + <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow that $ <var:e> = <var:N> $ ahead of running the series of commands it follows that we have $ <var:h> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> $ when program has terminated . \end{theorem} \begin{proof} The proof of this list of instructions is accomplished using Hoare logic . Now , \begin{eqnarray} \{ <var:e> = <var:N> \} \, <var:h> := <nat:1> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \} \\ \{ <var:e> = <var:N> \land <var:h> = <nat:1> \} \, <var:h> := <nat:4> + <var:h> * <var:e> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> + <nat:4> \} \\ \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> + <nat:4> \} \, <var:h> := <nat:1> + <var:h> * <var:e> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:1> \} \\ \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:1> \} \, <var:h> := <nat:1> + <var:h> * <var:e> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:1> \} \\ \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:1> \} \, <var:h> := <nat:3> + <var:h> * <var:e> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> \} \\ \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> \} \, <var:h> := <nat:4> + <var:h> * <var:e> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> \} \end{eqnarray} This is ensured using the variable update law defined by usual Hoare reasoning . Moving onward , \begin{eqnarray} \{ <var:e> = <var:N> \} \, <var:h> := <nat:1> \, \{ <var:e> = <var:N> \land <var:h> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:1> ; <var:h> := <nat:4> + <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:3> + <var:h> * <var:e> ; <var:h> := <nat:4> + <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:e> = <var:N> }} <def:poly> {{ <var:h> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:h> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 