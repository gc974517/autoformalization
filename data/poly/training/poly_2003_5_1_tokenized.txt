\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:r1> := <var:c> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:7> ; <var:L> := <var:r1> <var:L> := <var:L> + <var:r0> \end{verbatim} Assume , assuming some $ <var:A> \in \mathbb{N} $ , $ <var:c> = <var:A> $ before evaluating our list of commands then we have $ <var:L> = <nat:7> * <var:A> + <nat:5> $ when program exits . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:c> = <var:A> \} \\ <var:r1> := <var:c> ; \\ \{ <var:c> = <var:A> \land <var:r1> = <var:A> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:c> = <var:A> \land <var:r1> = <var:A> \land <var:r0> = <nat:5> \} \\ <var:r1> := <var:r1> * <nat:7> ; \\ \{ <var:c> = <var:A> \land <var:r1> = <nat:7> \times <var:A> \land <var:r0> = <nat:5> \} \\ <var:L> := <var:r1> \\ \{ <var:c> = <var:A> \land <var:r0> = <nat:5> \land <var:L> = <nat:7> \times <var:A> \} \\ <var:L> := <var:L> + <var:r0> \\ \{ <var:c> = <var:A> \land <var:L> = <nat:7> \times <var:A> + <nat:5> \} \end{eqnarray} As a consequence , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:c> = <var:A> }} <var:r1> := <var:c> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:7> ; <var:L> := <var:r1> <var:L> := <var:L> + <var:r0> {{ <var:L> = <nat:7> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:r1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:r1> = <var:A> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:r1> = <nat:7> * <var:A> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:r0> = <nat:5> /\ <var:L> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:L> = <nat:7> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 