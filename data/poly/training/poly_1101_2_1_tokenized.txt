\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:Y0> := <nat:6> ; <var:n> := <var:Y0> \end{verbatim} Assuming it to be that $ <var:z> = <var:x> $ ( letting positive coefficients $ <var:x> $ ) ahead of executing the code segment it follows that we see $ <var:n> = <nat:6> $ after code segment executes . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:z> = <var:x> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:z> = <var:x> \land <var:Y0> = <nat:6> \} \\ <var:n> := <var:Y0> \\ \{ <var:z> = <var:x> \land <var:n> = <nat:6> \} \end{eqnarray} Given the above , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:z> = <var:x> }} <var:Y0> := <nat:6> ; <var:n> := <var:Y0> {{ <var:n> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:n> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 