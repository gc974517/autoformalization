\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:6> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:t> ; <var:E> := <var:p1> ; <var:E> := <var:E> + <var:p0> \end{verbatim} Assume that we have $ <var:t> = <var:F> $ ( for some integers $ <var:F> $ ) before the evaluation of the set of instructions , then $ <var:E> = <nat:2> * <var:F> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is accomplished with usual Hoare logic . Immediately following , we have \begin{verbatim} { <var:t> = <var:F> } <var:p0> := <nat:6> { <var:t> = <var:F> \land <var:p0> = <nat:6> } { <var:t> = <var:F> \land <var:p0> = <nat:6> } <var:p1> := <nat:2> { <var:t> = <var:F> \land <var:p0> = <nat:6> \land <var:p1> = <nat:2> } \end{verbatim} Considering the next line seen in the set of commands , \begin{verbatim} { <var:t> = <var:F> } <var:p0> := <nat:6> { <var:t> = <var:F> \land <var:p0> = <nat:6> } \end{verbatim} This is guaranteed using the environment update rule given by standard Hoare logic . Further , \begin{verbatim} { <var:t> = <var:F> } <var:p0> := <nat:6> { <var:t> = <var:F> \land <var:p0> = <nat:6> } { <var:t> = <var:F> \land <var:p0> = <nat:6> } <var:p1> := <nat:2> { <var:t> = <var:F> \land <var:p0> = <nat:6> \land <var:p1> = <nat:2> } \end{verbatim} This is shown to be logically sound through the variable update inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:t> = <var:F> }} <var:p0> := <nat:6> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:t> ; <var:E> := <var:p1> ; <var:E> := <var:E> + <var:p0> {{ <var:E> = <nat:2> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:p0> = <nat:6> /\ <var:E> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:E> = <nat:2> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 