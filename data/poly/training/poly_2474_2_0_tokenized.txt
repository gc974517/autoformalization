\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:4> ; <var:l> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given all natural numbers $ <var:e> $ , it to be that $ <var:u> = <var:e> $ prior to the execution of the code it must be that $ <var:l> = <nat:4> $ once program has executed . \end{theorem} \begin{proof} The flow of logic for this set of commands is given by standard Hoare reasoning . Taking another step toward the following lines of codecontained in the list of commands , we see \verb | { <var:u> = <var:e> } <var:p0> := <nat:4> { <var:u> = <var:e> \land <var:p0> = <nat:4> } | and \verb | { <var:u> = <var:e> \land <var:p0> = <nat:4> } <var:l> := <var:p0{ <var:u> = <var:e> \land <var:l> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:4> ; <var:l> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:u> = <var:e> }} <def:poly> {{ <var:l> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:l> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 