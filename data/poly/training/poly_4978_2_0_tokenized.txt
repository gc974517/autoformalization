\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:J0> := <nat:6> ; <var:U> := <var:J0> \end{verbatim} Allowing that $ <var:T> = <var:B> $ for some positive integer coefficients $ <var:B> $ ahead of evaluating this series of instructions then we have $ <var:U> = <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is shown with usual Hoare logic . Immediately after , we see \verb | { <var:T> = <var:B> } <var:J0> := <nat:6> { <var:T> = <var:B> \land <var:J0> = <nat:6> } | . This is rigorously given through the scheme of typical Hoare techniques . Further , \verb | { <var:T> = <var:B> } <var:J0> := <nat:6> { <var:T> = <var:B> \land <var:J0> = <nat:6> } | . This is shown to be logically sound by the binding inference rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <var:J0> := <nat:6> ; <var:U> := <var:J0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 