\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:p> ; <var:A2> := <var:A1> * <var:p> ; <var:A3> := <var:A2> * <var:p> ; <var:A0> := <nat:3> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:5> ; <var:K> := <var:A3> <var:K> := <var:K> + <var:A2> <var:K> := <var:K> + <var:A1> <var:K> := <var:K> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:p> = <var:Z> $ --- given $ <var:Z> $ --- ahead of the execution of the segment of code then we have $ <var:K> = <nat:5> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is done by typical Hoare reasoning . Moving forward to the next step , \begin{verbatim} { <var:p> = <var:Z> } <var:A1> := <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> } { <var:p> = <var:Z> \land <var:A1> = <var:Z> } <var:A2> := <var:A1> * <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> } { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> } <var:A3> := <var:A2> * <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> } { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> } <var:A0> := <nat:3> { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } <var:A1> := <var:A1> * <nat:8> { <var:p> = <var:Z> \land <var:A1> = <nat:8> \cdot <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } { <var:p> = <var:Z> \land <var:A1> = <nat:8> \cdot <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } <var:A2> := <var:A2> * <nat:1> { <var:p> = <var:Z> \land <var:A1> = <nat:8> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } { <var:p> = <var:Z> \land <var:A1> = <nat:8> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } <var:A3> := <var:A3> * <nat:5> { <var:p> = <var:Z> \land <var:A1> = <nat:8> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:5> \cdot <var:Z> ^ <nat:3> \land <var:A0> = <nat:3> } \end{verbatim} This is shown to be logically sound through the variable update inference rule given by typical Hoare techniques . Moving on to the following bits of codein our segment of code , we see \begin{verbatim} { <var:p> = <var:Z> } <var:A1> := <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> } { <var:p> = <var:Z> \land <var:A1> = <var:Z> } <var:A2> := <var:A1> * <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> } { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> } <var:A3> := <var:A2> * <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> } \end{verbatim} This is ensured by the assignment rule given in Hoare reasoning . Focusing on the proceeding command found in the segment of code , \begin{verbatim} { <var:p> = <var:Z> } <var:A1> := <var:p> { <var:p> = <var:Z> \land <var:A1> = <var:Z> } \end{verbatim} This is given with the law obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:p> ; <var:A2> := <var:A1> * <var:p> ; <var:A3> := <var:A2> * <var:p> ; <var:A0> := <nat:3> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:5> ; <var:K> := <var:A3> <var:K> := <var:K> + <var:A2> <var:K> := <var:K> + <var:A1> <var:K> := <var:K> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:p> = <var:Z> }} <def:poly> {{ <var:K> = <nat:5> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <nat:8> * <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <nat:8> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <nat:8> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:Z> ^ <nat:3> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <nat:8> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A0> = <nat:3> /\ <var:K> = <nat:5> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A1> = <nat:8> * <var:Z> /\ <var:A0> = <nat:3> /\ <var:K> = <nat:5> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:A0> = <nat:3> /\ <var:K> = <nat:5> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:K> = <nat:5> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 