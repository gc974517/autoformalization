\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:5> ; <var:a> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Given that $ <var:b> = <var:X> $ prior to evaluating the series of instructions it holds that $ <var:a> = <nat:5> $ after code is done executing . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:b> = <var:X> \} \\ <var:J0> := <nat:5> ; \\ \{ <var:b> = <var:X> \land <var:J0> = <nat:5> \} \\ <var:a> := <var:J0> \\ \{ <var:b> = <var:X> \land <var:a> = <nat:5> \} \end{eqnarray} Thusly , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:5> ; <var:a> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:b> = <var:X> }} <def:poly> {{ <var:a> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:a> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 