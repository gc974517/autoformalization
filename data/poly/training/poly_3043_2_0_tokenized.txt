\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:4> ; <var:Q> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming for some $ <var:l> \in \mathbb{N} $ it to hold that $ <var:e> = <var:l> $ ahead of evaluating the list of commands it holds that we have $ <var:Q> = <nat:4> $ when code finishes . \end{theorem} \begin{proof} The method of proof for our list of commands is clear with standard Hoare techniques . Moving onward , we see \begin{verbatim} { <var:e> = <var:l> } <var:Y0> := <nat:4> { <var:e> = <var:l> \land <var:Y0> = <nat:4> } \end{verbatim} This is shown with the assignment scheme in usual Hoare techniques . Following , we see \begin{verbatim} { <var:e> = <var:l> } <var:Y0> := <nat:4> { <var:e> = <var:l> \land <var:Y0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:4> ; <var:Q> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <def:poly> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 