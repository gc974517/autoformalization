\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:Y1> := <var:K> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:X> := <var:Y1> <var:X> := <var:X> + <var:Y0> \end{verbatim} Given $ <var:K> = <var:s> $ before evaluating this program , then we have $ <var:X> = <nat:1> \cdot <var:s> + <nat:1> $ when set of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be shown by the below decorated list of instructions . \begin{eqnarray} \{ <var:K> = <var:s> \} \\ <var:Y1> := <var:K> ; \\ \{ <var:K> = <var:s> \land <var:Y1> = <var:s> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:K> = <var:s> \land <var:Y1> = <var:s> \land <var:Y0> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <nat:1> ; \\ \{ <var:K> = <var:s> \land <var:Y1> = <nat:1> \cdot <var:s> \land <var:Y0> = <nat:1> \} \\ <var:X> := <var:Y1> \\ \{ <var:K> = <var:s> \land <var:Y0> = <nat:1> \land <var:X> = <nat:1> \cdot <var:s> \} \\ <var:X> := <var:X> + <var:Y0> \\ \{ <var:K> = <var:s> \land <var:X> = <nat:1> \cdot <var:s> + <nat:1> \} \end{eqnarray} Using typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <var:Y1> := <var:K> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:X> := <var:Y1> <var:X> := <var:X> + <var:Y0> {{ <var:X> = <nat:1> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y1> = <var:s> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y1> = <nat:1> * <var:s> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y0> = <nat:1> /\ <var:X> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:X> = <nat:1> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 