\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:e> ; <var:m> := <var:H1> ; <var:m> := <var:m> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Assuming $ <var:e> = <var:b> $ for any natural coefficients $ <var:b> $ prior to executing this code segment , it follows that we see $ <var:m> = <nat:1> \times <var:b> + <nat:5> $ after set of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of the code can be demonstrated by standard Hoare logic . Looking at the next pieces of code in the series of commands , \[ \begin{tabular} {rcl} \{ <var:e> = <var:b> \} & <var:H0> := <nat:5> & \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \} \\ \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \} & <var:H1> := <nat:1> & \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \} \end{tabular} Next , \[ \begin{tabular} {rcl} \{ <var:e> = <var:b> \} & <var:H0> := <nat:5> & \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \} \end{tabular} Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:e> = <var:b> \} & <var:H0> := <nat:5> & \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \} \\ \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \} & <var:H1> := <nat:1> & \{ <var:e> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \} \end{tabular} This is ensured by the variable binding rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:e> ; <var:m> := <var:H1> ; <var:m> := <var:m> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:e> = <var:b> }} <def:poly> {{ <var:m> = <nat:1> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:H0> = <nat:5> /\ <var:m> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:m> = <nat:1> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 