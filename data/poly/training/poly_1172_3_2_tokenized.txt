\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:2> + <var:i> * <var:N> ; <var:i> := <nat:3> + <var:i> * <var:N> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allowing --- given some $ <var:Q> $ --- that $ <var:N> = <var:Q> $ prior to executing the series of commands , it holds that we see $ <var:i> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} Let the following decorated list of instructions . \begin{eqnarray} \{ <var:N> = <var:Q> \} \\ <var:i> := <nat:2> ; \\ \{ <var:N> = <var:Q> \land <var:i> = <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:N> ; \\ \{ <var:N> = <var:Q> \land <var:i> = <nat:2> \times <var:Q> + <nat:2> \} \\ <var:i> := <nat:3> + <var:i> * <var:N> \\ \{ <var:N> = <var:Q> \land <var:i> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:3> \} \end{eqnarray} Utilizing Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:2> ; <var:i> := <nat:2> + <var:i> * <var:N> ; <var:i> := <nat:3> + <var:i> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:N> = <var:Q> }} <def:poly> {{ <var:i> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:i> = <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:i> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 