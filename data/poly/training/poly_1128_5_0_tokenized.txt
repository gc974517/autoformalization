\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:1> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:f> ; <var:y> := <var:b1> ; <var:y> := <var:y> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:f> = <var:r> $ prior to interpreting the list of commands , it holds that we see $ <var:y> = <nat:4> \cdot <var:r> + <nat:1> $ after series of commands exits . \end{theorem} \begin{proof} The method of proof for our list of commands is demonstrated with standard Hoare techniques . Going forward , we have \verb | { <var:f> = <var:r> } <var:b0> := <nat:1> { <var:f> = <var:r> \land <var:b0> = <nat:1> } | , \verb | { <var:f> = <var:r> \land <var:b0> = <nat:1> } <var:b1> := <nat:4> { <var:f> = <var:r> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> } | and \verb | { <var:f> = <var:r> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> } <var:b1> := <var:b1> * <var:f> { <var:f> = <var:r> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \cdot <var:r> } | . Now , \verb | { <var:f> = <var:r> } <var:b0> := <nat:1> { <var:f> = <var:r> \land <var:b0> = <nat:1> } | . This is shown to be logically sound through the inference rule in typical Hoare techniques . Moving on , we see \verb | { <var:f> = <var:r> } <var:b0> := <nat:1> { <var:f> = <var:r> \land <var:b0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:f> ; <var:y> := <var:b1> ; <var:y> := <var:y> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:f> = <var:r> }} <def:poly> {{ <var:y> = <nat:4> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:b0> = <nat:1> /\ <var:y> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:y> = <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 