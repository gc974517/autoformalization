\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:5> ; <var:h1> := <nat:7> ; <var:h1> := <var:h1> * <var:c> ; <var:G> := <var:h1> ; <var:G> := <var:G> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assume $ <var:c> = <var:i> $ prior to the evaluation of our segment of code then we have $ <var:G> = <nat:7> * <var:i> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the series of commands is clear by standard Hoare logic . Looking at the proceeding step contained in our series of instructions , we have the variable binding statement letting $ <nat:5> $ toward $ <var:h0>$ . This moves $ \{ <var:c> = <var:i> \} $ as the postcondition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \} $ . Looking at the subsequent piece of code seen in the set of commands , we see the variable binding code assigning $ <nat:7> $ into $ <var:h1>$ . This advances the condition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \} $ toward the condition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \land <var:h1> = <nat:7> \} $ . Immediately after , we see the binding command \verb | <var:h1> := <var:h1> * <var:c> ; | . This line redefines the condition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \land <var:h1> = <nat:7> \} $ into the postcondition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \land <var:h1> = <nat:7> \times <var:i> \} $ . This is deduced using the assignment rule given by usual Hoare techniques . Advancing to the next step , we see the binding code \verb | <var:G> := <var:h1> ; | . This forwards $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \land <var:h1> = <nat:7> \times <var:i> \} $ into the postcondition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \land <var:G> = <nat:7> \times <var:i> \} $ . This is known to be sound by the assignment inference rule defined in typical Hoare techniques . Moving forward to the subsequent line found in the set of commands , the environment update code \verb | <var:G> := <var:G> + <var:h0> | . This command takes the condition $ \{ <var:c> = <var:i> \land <var:h0> = <nat:5> \land <var:G> = <nat:7> \times <var:i> \} $ toward the postcondition $ \{ <var:c> = <var:i> \land <var:G> = <nat:7> \times <var:i> + <nat:5> \} $ . This is deduced using the assignment law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:h1> := <nat:7> ; <var:h1> := <var:h1> * <var:c> ; <var:G> := <var:h1> ; <var:G> := <var:G> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <def:poly> {{ <var:G> = <nat:7> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:h0> = <nat:5> /\ <var:G> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:G> = <nat:7> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 