\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:3> ; <var:p> := <var:u0> \end{verbatim} Allow ( given positive integer coefficients $ <var:w> $ ) $ <var:Z> = <var:w> $ prior to interpreting our series of commands , it holds that $ <var:p> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:w> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:Z> = <var:w> \land <var:u0> = <nat:3> \} \\ <var:p> := <var:u0> \\ \{ <var:Z> = <var:w> \land <var:p> = <nat:3> \} \end{eqnarray} Applying standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <var:u0> := <nat:3> ; <var:p> := <var:u0> {{ <var:p> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:p> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 