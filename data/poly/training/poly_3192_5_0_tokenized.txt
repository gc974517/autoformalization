\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:d> ; <var:j> := <var:Y1> ; <var:j> := <var:j> + <var:Y0> \end{verbatim} Allow it to hold that $ <var:d> = <var:D> $ before the evaluation of the code then $ <var:j> = <nat:3> \cdot <var:D> + <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:d> = <var:D> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:d> = <var:D> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <nat:3> ; \\ \{ <var:d> = <var:D> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \} \\ <var:Y1> := <var:Y1> * <var:d> ; \\ \{ <var:d> = <var:D> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:D> \} \\ <var:j> := <var:Y1> ; \\ \{ <var:d> = <var:D> \land <var:Y0> = <nat:7> \land <var:j> = <nat:3> \times <var:D> \} \\ <var:j> := <var:j> + <var:Y0> \\ \{ <var:d> = <var:D> \land <var:j> = <nat:3> \times <var:D> + <nat:7> \} \end{eqnarray} Thusly , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:d> = <var:D> }} <var:Y0> := <nat:7> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:d> ; <var:j> := <var:Y1> ; <var:j> := <var:j> + <var:Y0> {{ <var:j> = <nat:3> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:Y0> = <nat:7> /\ <var:j> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:j> = <nat:3> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 