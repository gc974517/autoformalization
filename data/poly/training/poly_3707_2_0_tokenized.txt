\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:1> ; <var:T> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given ( taking whole numbers $ <var:V> $ ) that $ <var:j> = <var:V> $ before the execution of the set of commands , it holds that we have $ <var:T> = <nat:1> $ after segment of code executes . \end{theorem} \begin{proof} The argument for our list of instructions is clear by Hoare logic . Immediately following , we have the variable assignmet line assigning $ <nat:1> $ into $ <var:U0>$ . This transfers the precondition $ \{ <var:j> = <var:V> \} $ to the condition $ \{ <var:j> = <var:V> \land <var:U0> = <nat:1> \} $ . Moving on , the assignment statement binding $ <var:U0$ into $ <var:T>$ . This code moves $ \{ <var:j> = <var:V> \land <var:U0> = <nat:1> \} $ into $ \{ <var:j> = <var:V> \land <var:T> = <nat:1> \} $ . This is rigorously given using the assignment inference rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:1> ; <var:T> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:j> = <var:V> }} <def:poly> {{ <var:T> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:T> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 