\begin{document} \begin{theorem} Define the following list of commands such that \begin{verbatim} <var:U1> := <var:J> ; <var:U0> := <nat:4> ; <var:U1> := <var:U1> * <nat:1> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> \end{verbatim} Allowing that we have $ <var:J> = <var:m> $ before the execution of our code segment , then $ <var:d> = <nat:1> \cdot <var:m> + <nat:4> $ when set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:m> \} \\ <var:U1> := <var:J> ; \\ \{ <var:J> = <var:m> \land <var:U1> = <var:m> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:J> = <var:m> \land <var:U1> = <var:m> \land <var:U0> = <nat:4> \} \\ <var:U1> := <var:U1> * <nat:1> ; \\ \{ <var:J> = <var:m> \land <var:U1> = <nat:1> * <var:m> \land <var:U0> = <nat:4> \} \\ <var:d> := <var:U1> \\ \{ <var:J> = <var:m> \land <var:U0> = <nat:4> \land <var:d> = <nat:1> * <var:m> \} \\ <var:d> := <var:d> + <var:U0> \\ \{ <var:J> = <var:m> \land <var:d> = <nat:1> * <var:m> + <nat:4> \} \end{eqnarray} The application of Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:J> = <var:m> }} <var:U1> := <var:J> ; <var:U0> := <nat:4> ; <var:U1> := <var:U1> * <nat:1> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> {{ <var:d> = <nat:1> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:m> /\ <var:U1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:m> /\ <var:U1> = <var:m> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:m> /\ <var:U1> = <nat:1> * <var:m> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:m> /\ <var:U0> = <nat:4> /\ <var:d> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:m> /\ <var:d> = <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 