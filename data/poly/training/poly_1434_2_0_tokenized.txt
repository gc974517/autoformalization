\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:3> ; <var:b> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allowing it to be that $ <var:C> = <var:L> $ prior to evaluating this set of commands it holds that we see $ <var:b> = <nat:3> $ when set of commands has executed . \end{theorem} \begin{proof} The proof of this series of commands can be demonstrated using usual Hoare techniques . Looking at the upcoming statement in the set of commands , the environment update statement \verb | <var:U0> := <nat:3> ; | . This forwards $ \{ <var:C> = <var:L> \} $ toward $ \{ <var:C> = <var:L> \land <var:U0> = <nat:3> \} $ . Honing in on the proceeding step found in our program , the variable assignmet statement binding $ <var:U0$ as $ <var:b>$ . This statement redefines the precondition $ \{ <var:C> = <var:L> \land <var:U0> = <nat:3> \} $ to $ \{ <var:C> = <var:L> \land <var:b> = <nat:3> \} $ . This is shown by the assignment law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:3> ; <var:b> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:C> = <var:L> }} <def:poly> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 