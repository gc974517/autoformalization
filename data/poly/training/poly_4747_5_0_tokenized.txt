\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:1> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:d> ; <var:T> := <var:p1> ; <var:T> := <var:T> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:d> = <var:L> $ prior to interpreting this code , then we see $ <var:T> = <nat:1> * <var:L> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning returns : \begin{eqnarray} \{ <var:d> = <var:L> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:d> = <var:L> \land <var:p0> = <nat:1> \} \\ <var:p1> := <nat:1> ; \\ \{ <var:d> = <var:L> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \} \\ <var:p1> := <var:p1> * <var:d> ; \\ \{ <var:d> = <var:L> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:L> \} \\ <var:T> := <var:p1> ; \\ \{ <var:d> = <var:L> \land <var:p0> = <nat:1> \land <var:T> = <nat:1> \times <var:L> \} \\ <var:T> := <var:T> + <var:p0> \\ \{ <var:d> = <var:L> \land <var:T> = <nat:1> \times <var:L> + <nat:1> \} \end{eqnarray} Hence , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:1> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:d> ; <var:T> := <var:p1> ; <var:T> := <var:T> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:d> = <var:L> }} <def:poly> {{ <var:T> = <nat:1> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:p0> = <nat:1> /\ <var:T> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:T> = <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 