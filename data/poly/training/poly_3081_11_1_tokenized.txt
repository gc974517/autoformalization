\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:R1> := <var:l> ; <var:R2> := <var:R1> * <var:l> ; <var:R3> := <var:R2> * <var:l> ; <var:R0> := <nat:8> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:6> ; <var:J> := <var:R3> <var:J> := <var:J> + <var:R2> <var:J> := <var:J> + <var:R1> <var:J> := <var:J> + <var:R0> \end{verbatim} Allow it to be that $ <var:l> = <var:d> $ --- for all natural coefficients $ <var:d> $ --- ahead of interpreting this series of instructions it holds that $ <var:J> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> $ once series of commands has terminated . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:l> = <var:d> \} \\ <var:R1> := <var:l> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <var:d> \} \\ <var:R2> := <var:R1> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:8> \} \end{eqnarray} Advancing the evaluation of our code yields : \begin{eqnarray} <var:R1> := <var:R1> * <nat:2> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <nat:2> \times <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:8> \} \\ <var:R2> := <var:R2> * <nat:6> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <nat:2> \times <var:d> \land <var:R2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:8> \} \\ <var:R3> := <var:R3> * <nat:6> ; \\ \{ <var:l> = <var:d> \land <var:R1> = <nat:2> \times <var:d> \land <var:R2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:R3> = <nat:6> \times <var:d> ^ <nat:3> \land <var:R0> = <nat:8> \} \\ <var:J> := <var:R3> \\ \{ <var:l> = <var:d> \land <var:R1> = <nat:2> \times <var:d> \land <var:R2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:R0> = <nat:8> \land <var:J> = <nat:6> \times <var:d> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:R2> \\ \{ <var:l> = <var:d> \land <var:R1> = <nat:2> \times <var:d> \land <var:R0> = <nat:8> \land <var:J> = <nat:6> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:R1> \\ \{ <var:l> = <var:d> \land <var:R0> = <nat:8> \land <var:J> = <nat:6> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> \} \\ <var:J> := <var:J> + <var:R0> \\ \{ <var:l> = <var:d> \land <var:J> = <nat:6> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:8> \} \end{eqnarray} Hence , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <var:R1> := <var:l> ; <var:R2> := <var:R1> * <var:l> ; <var:R3> := <var:R2> * <var:l> ; <var:R0> := <nat:8> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:6> ; <var:J> := <var:R3> <var:J> := <var:J> + <var:R2> <var:J> := <var:J> + <var:R1> <var:J> := <var:J> + <var:R0> {{ <var:J> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <nat:2> * <var:d> /\ <var:R2> = <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <nat:2> * <var:d> /\ <var:R2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <nat:2> * <var:d> /\ <var:R2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:R3> = <nat:6> * <var:d> ^ <nat:3> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <nat:2> * <var:d> /\ <var:R2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:R0> = <nat:8> /\ <var:J> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R1> = <nat:2> * <var:d> /\ <var:R0> = <nat:8> /\ <var:J> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:R0> = <nat:8> /\ <var:J> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:J> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 