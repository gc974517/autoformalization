\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:s> ; <var:H> := <var:c1> ; <var:H> := <var:H> + <var:c0> \end{verbatim} Allow --- given positive integer coefficients $ <var:t> $ --- $ <var:s> = <var:t> $ ahead of interpreting this set of instructions it must be that we have $ <var:H> = <nat:3> * <var:t> + <nat:2> $ . \end{theorem} \begin{proof} Let the below decorated segment of code . \begin{eqnarray} \{ <var:s> = <var:t> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:s> = <var:t> \land <var:c0> = <nat:2> \} \\ <var:c1> := <nat:3> ; \\ \{ <var:s> = <var:t> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} \\ <var:c1> := <var:c1> * <var:s> ; \\ \{ <var:s> = <var:t> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:t> \} \\ <var:H> := <var:c1> ; \\ \{ <var:s> = <var:t> \land <var:c0> = <nat:2> \land <var:H> = <nat:3> * <var:t> \} \\ <var:H> := <var:H> + <var:c0> \\ \{ <var:s> = <var:t> \land <var:H> = <nat:3> * <var:t> + <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:s> = <var:t> }} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:s> ; <var:H> := <var:c1> ; <var:H> := <var:H> + <var:c0> {{ <var:H> = <nat:3> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:c0> = <nat:2> /\ <var:H> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:H> = <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 