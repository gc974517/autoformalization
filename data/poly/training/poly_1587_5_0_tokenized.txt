\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:j> ; <var:y> := <var:w1> ; <var:y> := <var:y> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Allow it to be that $ <var:j> = <var:x> $ before executing this list of commands , it follows that we see $ <var:y> = <nat:5> * <var:x> + <nat:9> $ when program has terminated . \end{theorem} \begin{proof} Proving correctness for our set of instructions is demonstrated through usual Hoare reasoning . After , we have \begin{verbatim} { <var:j> = <var:x> } <var:w0> := <nat:9> { <var:j> = <var:x> \land <var:w0> = <nat:9> } { <var:j> = <var:x> \land <var:w0> = <nat:9> } <var:w1> := <nat:5> { <var:j> = <var:x> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> } { <var:j> = <var:x> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> } <var:w1> := <var:w1> * <var:j> { <var:j> = <var:x> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> \cdot <var:x> } \end{verbatim} This is sound by the assignment rule defined in Hoare logic . Advancing to the next step , \begin{verbatim} { <var:j> = <var:x> } <var:w0> := <nat:9> { <var:j> = <var:x> \land <var:w0> = <nat:9> } { <var:j> = <var:x> \land <var:w0> = <nat:9> } <var:w1> := <nat:5> { <var:j> = <var:x> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> } \end{verbatim} This is rigorously given using the variable binding law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:9> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:j> ; <var:y> := <var:w1> ; <var:y> := <var:y> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:j> = <var:x> }} <def:poly> {{ <var:y> = <nat:5> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:w0> = <nat:9> /\ <var:y> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:y> = <nat:5> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 