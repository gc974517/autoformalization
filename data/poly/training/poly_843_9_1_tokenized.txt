\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:S> ; <var:W2> := <var:W1> * <var:S> ; <var:W3> := <var:W2> * <var:S> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:3> ; <var:W3> := <var:W3> * <nat:3> ; <var:C> := <var:W3> <var:C> := <var:C> + <var:W1> <var:C> := <var:C> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Allow that we have $ <var:S> = <var:L> $ ( for every positive integers $ <var:L> $ ) before interpreting this set of commands it holds that we see $ <var:C> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> + <nat:3> $ once set of instructions has executed . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:S> = <var:L> \} \\ <var:W1> := <var:S> ; \\ \{ <var:S> = <var:L> \land <var:W1> = <var:L> \} \\ <var:W2> := <var:W1> * <var:S> ; \\ \{ <var:S> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:S> ; \\ \{ <var:S> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:S> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:W1> := <var:W1> * <nat:3> ; \\ \{ <var:S> = <var:L> \land <var:W1> = <nat:3> \cdot <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:W3> := <var:W3> * <nat:3> ; \\ \{ <var:S> = <var:L> \land <var:W1> = <nat:3> \cdot <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:L> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:C> := <var:W3> \\ \{ <var:S> = <var:L> \land <var:W1> = <nat:3> \cdot <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W0> = <nat:3> \land <var:C> = <nat:3> \cdot <var:L> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:W1> \\ \{ <var:S> = <var:L> \land <var:W0> = <nat:3> \land <var:C> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> \} \\ <var:C> := <var:C> + <var:W0> \\ \{ <var:S> = <var:L> \land <var:C> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> + <nat:3> \} \end{eqnarray} Given the above , this segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:S> ; <var:W2> := <var:W1> * <var:S> ; <var:W3> := <var:W2> * <var:S> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:3> ; <var:W3> := <var:W3> * <nat:3> ; <var:C> := <var:W3> <var:C> := <var:C> + <var:W1> <var:C> := <var:C> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:S> = <var:L> }} <def:poly> {{ <var:C> = <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <nat:3> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <nat:3> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:L> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W1> = <nat:3> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W0> = <nat:3> /\ <var:C> = <nat:3> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:W0> = <nat:3> /\ <var:C> = <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:C> = <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 