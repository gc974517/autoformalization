\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:O1> := <var:Z> ; <var:O2> := <var:O1> * <var:Z> ; <var:O3> := <var:O2> * <var:Z> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:3> ; <var:O3> := <var:O3> * <nat:7> ; <var:T> := <var:O3> <var:T> := <var:T> + <var:O2> <var:T> := <var:T> + <var:O1> <var:T> := <var:T> + <var:O0> \end{verbatim} Given it to be that $ <var:Z> = <var:q> $ ( letting natural coefficients $ <var:q> $ ) before the execution of this set of commands it holds that we see $ <var:T> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:Z> = <var:q> \} \\ <var:O1> := <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <var:q> \} \\ <var:O2> := <var:O1> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> \land <var:O3> = <var:q> ^ <nat:3> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> \land <var:O3> = <var:q> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:O1> := <var:O1> * <nat:3> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <nat:3> \cdot <var:q> \land <var:O2> = <var:q> ^ <nat:2> \land <var:O3> = <var:q> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:O2> := <var:O2> * <nat:3> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <nat:3> \cdot <var:q> \land <var:O2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:O3> = <var:q> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:O3> := <var:O3> * <nat:7> ; \\ \{ <var:Z> = <var:q> \land <var:O1> = <nat:3> \cdot <var:q> \land <var:O2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:O3> = <nat:7> \cdot <var:q> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:T> := <var:O3> \\ \{ <var:Z> = <var:q> \land <var:O1> = <nat:3> \cdot <var:q> \land <var:O2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:T> = <nat:7> \cdot <var:q> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:O2> \\ \{ <var:Z> = <var:q> \land <var:O1> = <nat:3> \cdot <var:q> \land <var:O0> = <nat:2> \land <var:T> = <nat:7> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:O1> \\ \{ <var:Z> = <var:q> \land <var:O0> = <nat:2> \land <var:T> = <nat:7> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> \} \\ <var:T> := <var:T> + <var:O0> \\ \{ <var:Z> = <var:q> \land <var:T> = <nat:7> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:2> \} \end{eqnarray} Hence , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Z> = <var:q> }} <var:O1> := <var:Z> ; <var:O2> := <var:O1> * <var:Z> ; <var:O3> := <var:O2> * <var:Z> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:3> ; <var:O3> := <var:O3> * <nat:7> ; <var:T> := <var:O3> <var:T> := <var:T> + <var:O2> <var:T> := <var:T> + <var:O1> <var:T> := <var:T> + <var:O0> {{ <var:T> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <var:q> /\ <var:O2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <nat:3> * <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <nat:3> * <var:q> /\ <var:O2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <nat:3> * <var:q> /\ <var:O2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <nat:3> * <var:q> /\ <var:O2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:O0> = <nat:2> /\ <var:T> = <nat:7> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O1> = <nat:3> * <var:q> /\ <var:O0> = <nat:2> /\ <var:T> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:O0> = <nat:2> /\ <var:T> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:T> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 