\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:6> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:F> ; <var:I> := <var:E1> ; <var:I> := <var:I> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Assume that we have $ <var:F> = <var:t> $ ahead of evaluating our set of instructions , it must be that we see $ <var:I> = <nat:4> \cdot <var:t> + <nat:6> $ once list of instructions finishes . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:F> = <var:t> \} \\ <var:E0> := <nat:6> ; \\ \{ <var:F> = <var:t> \land <var:E0> = <nat:6> \} \\ <var:E1> := <nat:4> ; \\ \{ <var:F> = <var:t> \land <var:E0> = <nat:6> \land <var:E1> = <nat:4> \} \\ <var:E1> := <var:E1> * <var:F> ; \\ \{ <var:F> = <var:t> \land <var:E0> = <nat:6> \land <var:E1> = <nat:4> \cdot <var:t> \} \\ <var:I> := <var:E1> ; \\ \{ <var:F> = <var:t> \land <var:E0> = <nat:6> \land <var:I> = <nat:4> \cdot <var:t> \} \\ <var:I> := <var:I> + <var:E0> \\ \{ <var:F> = <var:t> \land <var:I> = <nat:4> \cdot <var:t> + <nat:6> \} \end{eqnarray} Considering the preceding argument , our segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:6> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:F> ; <var:I> := <var:E1> ; <var:I> := <var:I> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:F> = <var:t> }} <def:poly> {{ <var:I> = <nat:4> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:E0> = <nat:6> /\ <var:E1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:E0> = <nat:6> /\ <var:E1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:E0> = <nat:6> /\ <var:I> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:I> = <nat:4> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 