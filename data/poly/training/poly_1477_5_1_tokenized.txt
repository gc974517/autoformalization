\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:T1> := <var:G> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:7> ; <var:V> := <var:T1> <var:V> := <var:V> + <var:T0> \end{verbatim} Allow letting $ <var:R> \in \mathbb{Z}^+ $ that $ <var:G> = <var:R> $ ahead of the evaluation of the code segment , then we have $ <var:V> = <nat:7> \times <var:R> + <nat:2> $ when series of instructions executes . \end{theorem} \begin{proof} The proof of the code is done with the following decorated list of instructions . \begin{eqnarray} \{ <var:G> = <var:R> \} \\ <var:T1> := <var:G> ; \\ \{ <var:G> = <var:R> \land <var:T1> = <var:R> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:G> = <var:R> \land <var:T1> = <var:R> \land <var:T0> = <nat:2> \} \\ <var:T1> := <var:T1> * <nat:7> ; \\ \{ <var:G> = <var:R> \land <var:T1> = <nat:7> \times <var:R> \land <var:T0> = <nat:2> \} \\ <var:V> := <var:T1> \\ \{ <var:G> = <var:R> \land <var:T0> = <nat:2> \land <var:V> = <nat:7> \times <var:R> \} \\ <var:V> := <var:V> + <var:T0> \\ \{ <var:G> = <var:R> \land <var:V> = <nat:7> \times <var:R> + <nat:2> \} \end{eqnarray} Applying Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:G> = <var:R> }} <var:T1> := <var:G> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:7> ; <var:V> := <var:T1> <var:V> := <var:V> + <var:T0> {{ <var:V> = <nat:7> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:R> /\ <var:T1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:R> /\ <var:T1> = <var:R> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:R> /\ <var:T1> = <nat:7> * <var:R> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:R> /\ <var:T0> = <nat:2> /\ <var:V> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:R> /\ <var:V> = <nat:7> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 