\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:w> ; <var:O2> := <var:O1> * <var:w> ; <var:O3> := <var:O2> * <var:w> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:5> ; <var:O3> := <var:O3> * <nat:6> ; <var:G> := <var:O3> <var:G> := <var:G> + <var:O2> <var:G> := <var:G> + <var:O1> <var:G> := <var:G> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:w> = <var:Y> $ with some whole numbers $ <var:Y> $ ahead of executing this series of commands , it follows that we see $ <var:G> = <nat:6> \times <var:Y> ^ <nat:3> + <nat:5> \times <var:Y> ^ <nat:2> + <nat:5> \times <var:Y> + <nat:5> $ when list of commands executes . \end{theorem} \begin{proof} Proving correctness for this list of commands can be given with typical Hoare reasoning . Honing in on the next statement in the code , \[ \begin{tabular} {rcl} \{ <var:w> = <var:Y> \} & <var:O1> := <var:w> & \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \} \end{tabular} Now , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:Y> \} & <var:O1> := <var:w> & \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \} & <var:O2> := <var:O1> * <var:w> & \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \} & <var:O3> := <var:O2> * <var:w> & \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \} & <var:O0> := <nat:5> & \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} & <var:O1> := <var:O1> * <nat:5> & \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} & <var:O2> := <var:O2> * <nat:5> & \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <nat:5> \times <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <nat:5> \times <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} & <var:O3> := <var:O3> * <nat:6> & \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <nat:5> \times <var:Y> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <nat:5> \times <var:Y> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:Y> ^ <nat:3> \land <var:O0> = <nat:5> \} & <var:G> := <var:O3& \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <nat:5> \times <var:Y> ^ <nat:2> \land <var:O0> = <nat:5> \land <var:G> = <nat:6> \times <var:Y> ^ <nat:3> \} \\ \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O2> = <nat:5> \times <var:Y> ^ <nat:2> \land <var:O0> = <nat:5> \land <var:G> = <nat:6> \times <var:Y> ^ <nat:3> \} & <var:G> := <var:G> + <var:O2& \{ <var:w> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O0> = <nat:5> \land <var:G> = <nat:6> \times <var:Y> ^ <nat:3> + <nat:5> \times <var:Y> ^ <nat:2> \} \end{tabular} Considering the subsequent piece of code seen in our code , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:Y> \} & <var:O1> := <var:w> & \{ <var:w> = <var:Y> \land <var:O1> = <var:Y> \} \end{tabular} This is rigorously given with the environment update scheme from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:w> ; <var:O2> := <var:O1> * <var:w> ; <var:O3> := <var:O2> * <var:w> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:5> ; <var:O3> := <var:O3> * <nat:6> ; <var:G> := <var:O3> <var:G> := <var:G> + <var:O2> <var:G> := <var:G> + <var:O1> <var:G> := <var:G> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:w> = <var:Y> }} <def:poly> {{ <var:G> = <nat:6> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <nat:5> * <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <nat:5> * <var:Y> /\ <var:O2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <nat:5> * <var:Y> /\ <var:O2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:Y> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <nat:5> * <var:Y> /\ <var:O2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:O0> = <nat:5> /\ <var:G> = <nat:6> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O1> = <nat:5> * <var:Y> /\ <var:O0> = <nat:5> /\ <var:G> = <nat:6> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:O0> = <nat:5> /\ <var:G> = <nat:6> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:G> = <nat:6> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 