\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:q1> := <var:D> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:2> ; <var:O> := <var:q1> <var:O> := <var:O> + <var:q0> \end{verbatim} Allowing it to hold that $ <var:D> = <var:s> $ --- for positive coefficients $ <var:s> $ --- before interpreting the code segment it follows that we see $ <var:O> = <nat:2> \cdot <var:s> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:D> = <var:s> \} \\ <var:q1> := <var:D> ; \\ \{ <var:D> = <var:s> \land <var:q1> = <var:s> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:D> = <var:s> \land <var:q1> = <var:s> \land <var:q0> = <nat:6> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:D> = <var:s> \land <var:q1> = <nat:2> \times <var:s> \land <var:q0> = <nat:6> \} \\ <var:O> := <var:q1> \\ \{ <var:D> = <var:s> \land <var:q0> = <nat:6> \land <var:O> = <nat:2> \times <var:s> \} \\ <var:O> := <var:O> + <var:q0> \\ \{ <var:D> = <var:s> \land <var:O> = <nat:2> \times <var:s> + <nat:6> \} \end{eqnarray} Thusly , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:D> = <var:s> }} <var:q1> := <var:D> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:2> ; <var:O> := <var:q1> <var:O> := <var:O> + <var:q0> {{ <var:O> = <nat:2> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:q1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:q1> = <var:s> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:q1> = <nat:2> * <var:s> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:q0> = <nat:6> /\ <var:O> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:O> = <nat:2> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 