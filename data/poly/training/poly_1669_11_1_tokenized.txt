\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:A> ; <var:t2> := <var:t1> * <var:A> ; <var:t3> := <var:t2> * <var:A> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:7> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:1> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Given ( given some positive coefficients $ <var:V> $ ) that we have $ <var:A> = <var:V> $ before evaluating this series of commands , it follows that $ <var:m> = <nat:1> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> ^ <nat:2> + <nat:7> \times <var:V> + <nat:4> $ when set of instructions is done . \end{theorem} \begin{proof} The argument for our code is shown by usual Hoare reasoning . Jumping to the next steps contained in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:V> \} & <var:t1> := <var:A> & \{ <var:A> = <var:V> \land <var:t1> = <var:V> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <var:V> \} & <var:t2> := <var:t1> * <var:A> & \{ <var:A> = <var:V> \land <var:t1> = <var:V> \land <var:t2> = <var:V> ^ <nat:2> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <var:V> \land <var:t2> = <var:V> ^ <nat:2> \} & <var:t3> := <var:t2> * <var:A> & \{ <var:A> = <var:V> \land <var:t1> = <var:V> \land <var:t2> = <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <var:V> \land <var:t2> = <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \} & <var:t0> := <nat:4> & \{ <var:A> = <var:V> \land <var:t1> = <var:V> \land <var:t2> = <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <var:V> \land <var:t2> = <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} & <var:t1> := <var:t1> * <nat:7> & \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} & <var:t2> := <var:t2> * <nat:5> & \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:t3> = <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} & <var:t3> := <var:t3> * <nat:1> & \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:V> ^ <nat:3> \land <var:t0> = <nat:4> \} & <var:m> := <var:t3& \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> \} & <var:m> := <var:m> + <var:t2& \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:5> \cdot <var:V> ^ <nat:2> \} \\ \{ <var:A> = <var:V> \land <var:t1> = <nat:7> \cdot <var:V> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:5> \cdot <var:V> ^ <nat:2> \} & <var:m> := <var:m> + <var:t1& \{ <var:A> = <var:V> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:5> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> \} \\ \{ <var:A> = <var:V> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:5> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> \} & <var:m> := <var:m> + <var:t0& \{ <var:A> = <var:V> \land <var:m> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:5> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:A> ; <var:t2> := <var:t1> * <var:A> ; <var:t3> := <var:t2> * <var:A> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:7> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:1> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:A> = <var:V> }} <def:poly> {{ <var:m> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <var:V> /\ <var:t2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <var:V> /\ <var:t2> = <var:V> ^ <nat:2> /\ <var:t3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <var:V> /\ <var:t2> = <var:V> ^ <nat:2> /\ <var:t3> = <var:V> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <nat:7> * <var:V> /\ <var:t2> = <var:V> ^ <nat:2> /\ <var:t3> = <var:V> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <nat:7> * <var:V> /\ <var:t2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:t3> = <var:V> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <nat:7> * <var:V> /\ <var:t2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:V> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <nat:7> * <var:V> /\ <var:t2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:m> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t1> = <nat:7> * <var:V> /\ <var:t0> = <nat:4> /\ <var:m> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:t0> = <nat:4> /\ <var:m> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:m> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 