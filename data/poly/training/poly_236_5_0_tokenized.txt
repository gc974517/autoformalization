\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:1> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:Q> ; <var:k> := <var:u1> ; <var:k> := <var:k> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:Q> = <var:L> $ before the execution of this set of commands , it must be that we have $ <var:k> = <nat:4> * <var:L> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be given using standard Hoare reasoning . Focusing on the proceeding step in our code segment , we have the variable binding code giving $ <nat:1> $ toward $ <var:u0>$ . This moves the precondition $ \{ <var:Q> = <var:L> \} $ to $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \} $ . This is shown to be logically sound through the assignment rule obtained from standard Hoare logic . Going to the next step , we have the environment update command \verb | <var:u1> := <nat:4> ; | . This command advances $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \} $ to the postcondition $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \} $ . This is sound through the assignment rule defined by usual Hoare logic . Honing in on the proceeding line found in the program , we see the variable update code assigning $ <var:u1> * <var:Q> $ as $ <var:u1>$ . This statement forwards the condition $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \} $ into $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:L> \} $ . Paying attention to the proceeding piece of code in our code , we have the variable binding line \verb | <var:k> := <var:u1> ; | . This statement takes the precondition $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:L> \} $ to $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \land <var:k> = <nat:4> \cdot <var:L> \} $ . This is shown using the assignment inference rule in standard Hoare logic . Going to the next step , we see the assignment command defining $ <var:k> + <var:u0$ toward $ <var:k>$ . This forwards the precondition $ \{ <var:Q> = <var:L> \land <var:u0> = <nat:1> \land <var:k> = <nat:4> \cdot <var:L> \} $ to the condition $ \{ <var:Q> = <var:L> \land <var:k> = <nat:4> \cdot <var:L> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:Q> ; <var:k> := <var:u1> ; <var:k> := <var:k> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <def:poly> {{ <var:k> = <nat:4> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:u0> = <nat:1> /\ <var:k> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:k> = <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 