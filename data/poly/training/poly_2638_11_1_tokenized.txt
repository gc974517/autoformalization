\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:C1> := <var:c> ; <var:C2> := <var:C1> * <var:c> ; <var:C3> := <var:C2> * <var:c> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:9> ; <var:C3> := <var:C3> * <nat:5> ; <var:G> := <var:C3> <var:G> := <var:G> + <var:C2> <var:G> := <var:G> + <var:C1> <var:G> := <var:G> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:c> = <var:J> $ before the evaluation of our set of commands it must be that we see $ <var:G> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is clear using usual Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:J> \} & <var:C1> := <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \} & <var:C2> := <var:C1> * <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \} & <var:C3> := <var:C2> * <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \} & <var:C0> := <nat:9> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \land <var:C0> = <nat:9> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \land <var:C0> = <nat:9> \} & <var:C1> := <var:C1> * <nat:6> & \{ <var:c> = <var:J> \land <var:C1> = <nat:6> * <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \land <var:C0> = <nat:9> \} \end{tabular} Moving on to the following lines of codeseen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:J> \} & <var:C1> := <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \} & <var:C2> := <var:C1> * <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \} & <var:C3> := <var:C2> * <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \} & <var:C0> := <nat:9> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \land <var:C0> = <nat:9> \} \\ \{ <var:c> = <var:J> \land <var:C1> = <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \land <var:C0> = <nat:9> \} & <var:C1> := <var:C1> * <nat:6> & \{ <var:c> = <var:J> \land <var:C1> = <nat:6> * <var:J> \land <var:C2> = <var:J> ^ <nat:2> \land <var:C3> = <var:J> ^ <nat:3> \land <var:C0> = <nat:9> \} \end{tabular} This is known to be sound with the variable assignmet scheme given in standard Hoare techniques . Taking another step toward the subsequent command found in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:J> \} & <var:C1> := <var:c> & \{ <var:c> = <var:J> \land <var:C1> = <var:J> \} \end{tabular} This is deduced by the law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C1> := <var:c> ; <var:C2> := <var:C1> * <var:c> ; <var:C3> := <var:C2> * <var:c> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:9> ; <var:C3> := <var:C3> * <nat:5> ; <var:G> := <var:C3> <var:G> := <var:G> + <var:C2> <var:G> := <var:G> + <var:C1> <var:G> := <var:G> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <def:poly> {{ <var:G> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <var:J> /\ <var:C2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <var:J> /\ <var:C2> = <var:J> ^ <nat:2> /\ <var:C3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <var:J> /\ <var:C2> = <var:J> ^ <nat:2> /\ <var:C3> = <var:J> ^ <nat:3> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <nat:6> * <var:J> /\ <var:C2> = <var:J> ^ <nat:2> /\ <var:C3> = <var:J> ^ <nat:3> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <nat:6> * <var:J> /\ <var:C2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:C3> = <var:J> ^ <nat:3> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <nat:6> * <var:J> /\ <var:C2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:C3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <nat:6> * <var:J> /\ <var:C2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:C0> = <nat:9> /\ <var:G> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C1> = <nat:6> * <var:J> /\ <var:C0> = <nat:9> /\ <var:G> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C0> = <nat:9> /\ <var:G> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:G> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 