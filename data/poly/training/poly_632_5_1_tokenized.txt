\begin{document} \begin{theorem} Take the following list of instructions : \begin{verbatim} <var:Q1> := <var:l> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:H> := <var:Q1> <var:H> := <var:H> + <var:Q0> \end{verbatim} Assume that $ <var:l> = <var:h> $ , taking integers $ <var:h> $ , before evaluating the program it follows that $ <var:H> = <nat:9> \times <var:h> + <nat:5> $ after program has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be given using the following decorated list of commands . \begin{eqnarray} \{ <var:l> = <var:h> \} \\ <var:Q1> := <var:l> ; \\ \{ <var:l> = <var:h> \land <var:Q1> = <var:h> \} \\ <var:Q0> := <nat:5> ; \\ \{ <var:l> = <var:h> \land <var:Q1> = <var:h> \land <var:Q0> = <nat:5> \} \\ <var:Q1> := <var:Q1> * <nat:9> ; \\ \{ <var:l> = <var:h> \land <var:Q1> = <nat:9> * <var:h> \land <var:Q0> = <nat:5> \} \\ <var:H> := <var:Q1> \\ \{ <var:l> = <var:h> \land <var:Q0> = <nat:5> \land <var:H> = <nat:9> * <var:h> \} \\ <var:H> := <var:H> + <var:Q0> \\ \{ <var:l> = <var:h> \land <var:H> = <nat:9> * <var:h> + <nat:5> \} \end{eqnarray} The application of usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:l> = <var:h> }} <var:Q1> := <var:l> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:H> := <var:Q1> <var:H> := <var:H> + <var:Q0> {{ <var:H> = <nat:9> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:Q1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:Q1> = <var:h> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:Q1> = <nat:9> * <var:h> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:Q0> = <nat:5> /\ <var:H> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:H> = <nat:9> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 