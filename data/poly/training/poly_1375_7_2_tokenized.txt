\begin{document} \begin{theorem} We define a segment of code as follows \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:s> ; <var:E> := <nat:1> + <var:E> * <var:s> ; <var:E> := <nat:4> + <var:E> * <var:s> ; <var:E> := <nat:4> + <var:E> * <var:s> ; <var:E> := <var:E> * <var:s> ; <var:E> := <nat:1> + <var:E> * <var:s> \end{verbatim} Allowing it to be that $ <var:s> = <var:o> $ ahead of running this list of instructions , it must be that we see $ <var:E> = <nat:4> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:1> $ after set of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be done using Hoare logic . Considering the next line of code in our program , we have the assignment statement binding $ <nat:4> $ as $ <var:E>$ . This advances the precondition $ \{ <var:s> = <var:o> \} $ into $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \} $ . This is guaranteed by the assignment rule of typical Hoare logic . Moving on to the next step , the assignment command letting $ <nat:1> + <var:E> * <var:s> $ to $ <var:E>$ . This code transfers the precondition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \} $ toward the postcondition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> + <nat:1> \} $ . This is deduced using the assignment rule given in standard Hoare reasoning . Taking a look at the subsequent bit of code seen in the segment of code , we see the variable binding command giving $ <nat:1> + <var:E> * <var:s> $ to $ <var:E>$ . This code redefines $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> + <nat:1> \} $ toward the postcondition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:1> \} $ . This is guaranteed by the assignment scheme found in usual Hoare techniques . Going to the next step , the variable binding code defining $ <nat:4> + <var:E> * <var:s> $ toward $ <var:E>$ . This line moves $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:1> \} $ to the postcondition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> \} $ . Further , we have the environment update statement letting $ <nat:4> + <var:E> * <var:s> $ to $ <var:E>$ . This forwards the condition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> \} $ into the condition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> \} $ . This is deduced through the assignment rule of Hoare reasoning . Looking at the subsequent command in our series of instructions , the variable assignmet line defining $ <var:E> * <var:s> $ to $ <var:E>$ . This takes the precondition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> \} $ toward the condition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + \} $ . This is deduced using the assignment inference rule in typical Hoare logic . Further , we have the variable update line giving $ <nat:1> + <var:E> * <var:s$ as $ <var:E>$ . This forwards $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + \} $ toward the postcondition $ \{ <var:s> = <var:o> \land <var:E> = <nat:4> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:1> \} $ . This is known to be sound through the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:s> = <var:o> }} <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:s> ; <var:E> := <nat:1> + <var:E> * <var:s> ; <var:E> := <nat:4> + <var:E> * <var:s> ; <var:E> := <nat:4> + <var:E> * <var:s> ; <var:E> := <var:E> * <var:s> ; <var:E> := <nat:1> + <var:E> * <var:s> {{ <var:E> = <nat:4> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:E> = <nat:4> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 