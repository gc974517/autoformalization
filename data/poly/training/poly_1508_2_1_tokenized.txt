\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:3> ; <var:k> := <var:t0> \end{verbatim} Allow $ <var:q> = <var:J> $ prior to executing the set of instructions , it follows that we have $ <var:k> = <nat:3> $ once segment of code has terminated . \end{theorem} \begin{proof} The application of Hoare techniques gives us : \begin{eqnarray} \{ <var:q> = <var:J> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:q> = <var:J> \land <var:t0> = <nat:3> \} \\ <var:k> := <var:t0> \\ \{ <var:q> = <var:J> \land <var:k> = <nat:3> \} \end{eqnarray} As a consequence , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:q> = <var:J> }} <var:t0> := <nat:3> ; <var:k> := <var:t0> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 