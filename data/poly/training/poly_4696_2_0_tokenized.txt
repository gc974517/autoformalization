\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:8> ; <var:G> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:c> = <var:M> $ prior to the execution of the list of commands , then we see $ <var:G> = <nat:8> $ once set of commands exits . \end{theorem} \begin{proof} The course of logic for our program can be seen by usual Hoare reasoning . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:M> \} & <var:U0> := <nat:8> & \{ <var:c> = <var:M> \land <var:U0> = <nat:8> \} \\ \{ <var:c> = <var:M> \land <var:U0> = <nat:8> \} & <var:G> := <var:U0& \{ <var:c> = <var:M> \land <var:G> = <nat:8> \} \end{tabular} This is shown to be logically sound with the variable binding inference rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:8> ; <var:G> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:c> = <var:M> }} <def:poly> {{ <var:G> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:G> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 