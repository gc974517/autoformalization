\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:Q> ; <var:F2> := <var:F1> * <var:Q> ; <var:F3> := <var:F2> * <var:Q> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:6> ; <var:F3> := <var:F3> * <nat:2> ; <var:k> := <var:F3> <var:k> := <var:k> + <var:F2> <var:k> := <var:k> + <var:F1> <var:k> := <var:k> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Assume that $ <var:Q> = <var:S> $ assuming some $ <var:S> \in \mathbb{N} $ prior to executing the list of instructions , then we have $ <var:k> = <nat:2> \cdot <var:S> ^ <nat:3> + <nat:6> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:8> $ when set of commands exits . \end{theorem} \begin{proof} See that the below decorated code . \begin{eqnarray} \{ <var:Q> = <var:S> \} \\ <var:F1> := <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <var:S> \} \\ <var:F2> := <var:F1> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <var:S> \land <var:F2> = <var:S> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <var:S> \land <var:F2> = <var:S> ^ <nat:2> \land <var:F3> = <var:S> ^ <nat:3> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <var:S> \land <var:F2> = <var:S> ^ <nat:2> \land <var:F3> = <var:S> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:F1> := <var:F1> * <nat:3> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <nat:3> \times <var:S> \land <var:F2> = <var:S> ^ <nat:2> \land <var:F3> = <var:S> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:F2> := <var:F2> * <nat:6> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <nat:3> \times <var:S> \land <var:F2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:F3> = <var:S> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:F3> := <var:F3> * <nat:2> ; \\ \{ <var:Q> = <var:S> \land <var:F1> = <nat:3> \times <var:S> \land <var:F2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:F3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:k> := <var:F3> \\ \{ <var:Q> = <var:S> \land <var:F1> = <nat:3> \times <var:S> \land <var:F2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:F0> = <nat:8> \land <var:k> = <nat:2> \times <var:S> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:F2> \\ \{ <var:Q> = <var:S> \land <var:F1> = <nat:3> \times <var:S> \land <var:F0> = <nat:8> \land <var:k> = <nat:2> \times <var:S> ^ <nat:3> + <nat:6> \times <var:S> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:F1> \\ \{ <var:Q> = <var:S> \land <var:F0> = <nat:8> \land <var:k> = <nat:2> \times <var:S> ^ <nat:3> + <nat:6> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> \} \\ <var:k> := <var:k> + <var:F0> \\ \{ <var:Q> = <var:S> \land <var:k> = <nat:2> \times <var:S> ^ <nat:3> + <nat:6> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:8> \} \end{eqnarray} Using Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:Q> ; <var:F2> := <var:F1> * <var:Q> ; <var:F3> := <var:F2> * <var:Q> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:6> ; <var:F3> := <var:F3> * <nat:2> ; <var:k> := <var:F3> <var:k> := <var:k> + <var:F2> <var:k> := <var:k> + <var:F1> <var:k> := <var:k> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Q> = <var:S> }} <def:poly> {{ <var:k> = <nat:2> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <var:S> /\ <var:F2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <var:S> /\ <var:F2> = <var:S> ^ <nat:2> /\ <var:F3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <var:S> /\ <var:F2> = <var:S> ^ <nat:2> /\ <var:F3> = <var:S> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <nat:3> * <var:S> /\ <var:F2> = <var:S> ^ <nat:2> /\ <var:F3> = <var:S> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <nat:3> * <var:S> /\ <var:F2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:F3> = <var:S> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <nat:3> * <var:S> /\ <var:F2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:F3> = <nat:2> * <var:S> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <nat:3> * <var:S> /\ <var:F2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:F0> = <nat:8> /\ <var:k> = <nat:2> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F1> = <nat:3> * <var:S> /\ <var:F0> = <nat:8> /\ <var:k> = <nat:2> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:F0> = <nat:8> /\ <var:k> = <nat:2> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:k> = <nat:2> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 