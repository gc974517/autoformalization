\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:J> ; <var:F2> := <var:F1> * <var:J> ; <var:F3> := <var:F2> * <var:J> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:7> ; <var:F3> := <var:F3> * <nat:3> ; <var:c> := <var:F3> <var:c> := <var:c> + <var:F1> <var:c> := <var:c> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:J> = <var:M> $ ahead of executing the list of commands it must be that we see $ <var:c> = <nat:3> \times <var:M> ^ <nat:3> + <nat:7> \times <var:M> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be given with Hoare logic . Moving forward to the next command contained in our list of commands , the assignment code assigning $ <var:J> $ into $ <var:F1>$ . This redefines the condition $ \{ <var:J> = <var:M> \} $ into the condition $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \} $ . This is given through the assignment law given in standard Hoare techniques . Going forward , the variable update command \verb | <var:F2> := <var:F1> * <var:J> ; | . This code forwards the condition $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \} $ as $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \land <var:F2> = <var:M> ^ <nat:2> \} $ . This is given with the assignment scheme in Hoare techniques . Considering the upcoming line of code seen in the set of instructions , we have the binding statement binding $ <var:F2> * <var:J> $ into $ <var:F3>$ . This statement transfers $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \land <var:F2> = <var:M> ^ <nat:2> \} $ toward $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <var:M> ^ <nat:3> \} $ . This is given by the assignment scheme of typical Hoare reasoning . After , we see the variable binding statement giving $ <nat:9> $ to $ <var:F0>$ . This line redefines the precondition $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <var:M> ^ <nat:3> \} $ toward the condition $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <var:M> ^ <nat:3> \land <var:F0> = <nat:9> \} $ . This is shown to be logically sound with the assignment law from standard Hoare techniques . Looking at the upcoming statement contained in the code segment , we see the variable assignmet code \verb | <var:F1> := <var:F1> * <nat:7> ; | . This command moves the precondition $ \{ <var:J> = <var:M> \land <var:F1> = <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <var:M> ^ <nat:3> \land <var:F0> = <nat:9> \} $ toward the postcondition $ \{ <var:J> = <var:M> \land <var:F1> = <nat:7> \cdot <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <var:M> ^ <nat:3> \land <var:F0> = <nat:9> \} $ . This is guaranteed by the assignment scheme in standard Hoare reasoning . Paying attention to the subsequent piece of code seen in the set of instructions , the variable update code \verb | <var:F3> := <var:F3> * <nat:3> ; | . This moves the condition $ \{ <var:J> = <var:M> \land <var:F1> = <nat:7> \cdot <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <var:M> ^ <nat:3> \land <var:F0> = <nat:9> \} $ into the condition $ \{ <var:J> = <var:M> \land <var:F1> = <nat:7> \cdot <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <nat:3> \cdot <var:M> ^ <nat:3> \land <var:F0> = <nat:9> \} $ . This is guaranteed through the assignment rule in Hoare logic . Advancing to the next step , we have the binding statement \verb | <var:c> := <var:F3> | . This command redefines the precondition $ \{ <var:J> = <var:M> \land <var:F1> = <nat:7> \cdot <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F3> = <nat:3> \cdot <var:M> ^ <nat:3> \land <var:F0> = <nat:9> \} $ as the postcondition $ \{ <var:J> = <var:M> \land <var:F1> = <nat:7> \cdot <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F0> = <nat:9> \land <var:c> = <nat:3> \cdot <var:M> ^ <nat:3> \} $ . Advancing , we have the statement \verb | <var:c> := <var:c> + <var:F1> | . This redefines $ \{ <var:J> = <var:M> \land <var:F1> = <nat:7> \cdot <var:M> \land <var:F2> = <var:M> ^ <nat:2> \land <var:F0> = <nat:9> \land <var:c> = <nat:3> \cdot <var:M> ^ <nat:3> \} $ into the condition $ \{ <var:J> = <var:M> \land <var:F0> = <nat:9> \land <var:c> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:7> \cdot <var:M> \} $ . This is given with the assignment inference rule defined by typical Hoare reasoning . Moving forward to the next piece of code seen in the list of commands , the assignment line \verb | <var:c> := <var:c> + <var:F0> | . This transfers $ \{ <var:J> = <var:M> \land <var:F0> = <nat:9> \land <var:c> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:7> \cdot <var:M> \} $ as the postcondition $ \{ <var:J> = <var:M> \land <var:c> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:7> \cdot <var:M> + <nat:9> \} $ . This is sound through the assignment inference rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:J> ; <var:F2> := <var:F1> * <var:J> ; <var:F3> := <var:F2> * <var:J> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:7> ; <var:F3> := <var:F3> * <nat:3> ; <var:c> := <var:F3> <var:c> := <var:c> + <var:F1> <var:c> := <var:c> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <def:poly> {{ <var:c> = <nat:3> * <var:M> ^ <nat:3> + <nat:7> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <var:M> /\ <var:F2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <var:M> /\ <var:F2> = <var:M> ^ <nat:2> /\ <var:F3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <var:M> /\ <var:F2> = <var:M> ^ <nat:2> /\ <var:F3> = <var:M> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <nat:7> * <var:M> /\ <var:F2> = <var:M> ^ <nat:2> /\ <var:F3> = <var:M> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <nat:7> * <var:M> /\ <var:F2> = <var:M> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:M> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F1> = <nat:7> * <var:M> /\ <var:F2> = <var:M> ^ <nat:2> /\ <var:F0> = <nat:9> /\ <var:c> = <nat:3> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:F0> = <nat:9> /\ <var:c> = <nat:3> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:c> = <nat:3> * <var:M> ^ <nat:3> + <nat:7> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 