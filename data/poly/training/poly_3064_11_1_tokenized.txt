\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:L1> := <var:T> ; <var:L2> := <var:L1> * <var:T> ; <var:L3> := <var:L2> * <var:T> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:5> ; <var:L3> := <var:L3> * <nat:3> ; <var:k> := <var:L3> <var:k> := <var:k> + <var:L2> <var:k> := <var:k> + <var:L1> <var:k> := <var:k> + <var:L0> \end{verbatim} Allow it to be that $ <var:T> = <var:d> $ before the evaluation of the set of commands then $ <var:k> = <nat:3> \cdot <var:d> ^ <nat:3> + <nat:5> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:3> $ once series of instructions terminates . \end{theorem} \begin{proof} The course of logic for the set of commands is shown using typical Hoare logic . Moving onward , we have \begin{verbatim} { <var:T> = <var:d> } <var:L1> := <var:T> { <var:T> = <var:d> \land <var:L1> = <var:d> } { <var:T> = <var:d> \land <var:L1> = <var:d> } <var:L2> := <var:L1> * <var:T> { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } <var:L3> := <var:L2> * <var:T> { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> } { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> } <var:L0> := <nat:3> { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } <var:L1> := <var:L1> * <nat:3> { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } <var:L2> := <var:L2> * <nat:5> { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <nat:5> * <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <nat:5> * <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } <var:L3> := <var:L3> * <nat:3> { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <nat:5> * <var:d> ^ <nat:2> \land <var:L3> = <nat:3> * <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <nat:5> * <var:d> ^ <nat:2> \land <var:L3> = <nat:3> * <var:d> ^ <nat:3> \land <var:L0> = <nat:3> } <var:k> := <var:L3{ <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <nat:5> * <var:d> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:k> = <nat:3> * <var:d> ^ <nat:3> } { <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L2> = <nat:5> * <var:d> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:k> = <nat:3> * <var:d> ^ <nat:3> } <var:k> := <var:k> + <var:L2{ <var:T> = <var:d> \land <var:L1> = <nat:3> * <var:d> \land <var:L0> = <nat:3> \land <var:k> = <nat:3> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> } \end{verbatim} Immediately following , we have \begin{verbatim} { <var:T> = <var:d> } <var:L1> := <var:T> { <var:T> = <var:d> \land <var:L1> = <var:d> } { <var:T> = <var:d> \land <var:L1> = <var:d> } <var:L2> := <var:L1> * <var:T> { <var:T> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } \end{verbatim} This is shown to be logically sound with the scheme in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:T> = <var:d> }} <var:L1> := <var:T> ; <var:L2> := <var:L1> * <var:T> ; <var:L3> := <var:L2> * <var:T> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:5> ; <var:L3> := <var:L3> * <nat:3> ; <var:k> := <var:L3> <var:k> := <var:k> + <var:L2> <var:k> := <var:k> + <var:L1> <var:k> := <var:k> + <var:L0> {{ <var:k> = <nat:3> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <nat:3> * <var:d> /\ <var:L2> = <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <nat:3> * <var:d> /\ <var:L2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <nat:3> * <var:d> /\ <var:L2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:d> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <nat:3> * <var:d> /\ <var:L2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:L0> = <nat:3> /\ <var:k> = <nat:3> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L1> = <nat:3> * <var:d> /\ <var:L0> = <nat:3> /\ <var:k> = <nat:3> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:L0> = <nat:3> /\ <var:k> = <nat:3> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:k> = <nat:3> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 