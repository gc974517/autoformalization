\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> \end{verbatim} Given $ <var:q> = <var:Y> $ ahead of the evaluation of this set of instructions it must be that $ <var:e> = <nat:3> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this code is evident using usual Hoare reasoning . Focusing on the upcoming line seen in our list of instructions , we have the variable update command binding $ <nat:3> $ toward $ <var:e>$ . This transfers the precondition $ \{ <var:q> = <var:Y> \} $ into $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \} $ . This is given through the assignment law defined by Hoare logic . Stepping through , we see the variable assignmet line giving $ <var:e> * <var:q> $ toward $ <var:e>$ . This advances the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \} $ to $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> + \} $ . Taking another step toward the next step found in our code , the binding statement giving $ <nat:4> + <var:e> * <var:q> $ toward $ <var:e>$ . This forwards the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> + \} $ to the postcondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:4> \} $ . Looking at the next piece of code in the program , we see the variable update line defining $ <nat:4> + <var:e> * <var:q> $ toward $ <var:e>$ . This redefines $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:4> \} $ as the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> + <nat:4> \} $ . This is shown with the assignment law defined by typical Hoare logic . Considering the upcoming step found in our list of commands , we see the assignment line \verb | <var:e> := <nat:3> + <var:e> * <var:q> ; | . This advances the precondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> + <nat:4> \} $ toward the postcondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:3> \} $ . This is shown to be logically sound with the assignment rule obtained from standard Hoare reasoning . Advancing on , the variable assignmet command yielding $ <var:e> * <var:q> $ toward $ <var:e>$ . This forwards the precondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:3> \} $ to $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + \} $ . This is known to be sound by the assignment inference rule of typical Hoare techniques . Moving onward , we have the variable assignmet statement \verb | <var:e> := <nat:3> + <var:e> * <var:q> ; | . This transfers the precondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + \} $ into $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:3> \} $ . This is sound by the assignment scheme found in Hoare logic . Advancing , we have the variable assignmet line assigning $ <nat:4> + <var:e> * <var:q> $ as $ <var:e>$ . This line moves the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:3> \} $ to the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> + <nat:4> \} $ . This is rigorously given with the assignment rule from Hoare logic . Taking another step toward the proceeding line found in the code , we have the binding code \verb | <var:e> := <nat:4> + <var:e> * <var:q> ; | . This takes the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> + <nat:4> \} $ toward $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:8> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:4> \} $ . Taking a look at the next statement found in the series of instructions , we have the environment update statement defining $ <nat:3> + <var:e> * <var:q> $ into $ <var:e>$ . This line forwards $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:8> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:4> \} $ as the postcondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:9> + <nat:4> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:3> \} $ . This is given by the assignment inference rule from standard Hoare techniques . Moving on to the next step , we see the command \verb | <var:e> := <nat:2> + <var:e> * <var:q> | . This moves the condition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:9> + <nat:4> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:3> \} $ as the postcondition $ \{ <var:q> = <var:Y> \land <var:e> = <nat:3> \cdot <var:Y> ^ <nat:10> + <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:4> \cdot <var:Y> ^ <nat:7> + <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:2> \} $ . This is deduced by the assignment rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <var:e> := <nat:3> ; <var:e> := <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> {{ <var:e> = <nat:3> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:9> + <nat:4> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e> = <nat:3> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 