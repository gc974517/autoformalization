\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:J> ; <var:s2> := <var:s1> * <var:J> ; <var:s3> := <var:s2> * <var:J> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:5> ; <var:s2> := <var:s2> * <nat:7> ; <var:s3> := <var:s3> * <nat:7> ; <var:B> := <var:s3> <var:B> := <var:B> + <var:s2> <var:B> := <var:B> + <var:s1> <var:B> := <var:B> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:J> = <var:a> $ ahead of running the segment of code , then we see $ <var:B> = <nat:7> \times <var:a> ^ <nat:3> + <nat:7> \times <var:a> ^ <nat:2> + <nat:5> \times <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives : \begin{eqnarray} \{ <var:J> = <var:a> \} \\ <var:s1> := <var:J> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <var:a> \} \\ <var:s2> := <var:s1> * <var:J> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:J> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s1> := <var:s1> * <nat:5> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <nat:5> * <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:7> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <nat:5> * <var:a> \land <var:s2> = <nat:7> * <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s3> := <var:s3> * <nat:7> ; \\ \{ <var:J> = <var:a> \land <var:s1> = <nat:5> * <var:a> \land <var:s2> = <nat:7> * <var:a> ^ <nat:2> \land <var:s3> = <nat:7> * <var:a> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:B> := <var:s3> \\ \{ <var:J> = <var:a> \land <var:s1> = <nat:5> * <var:a> \land <var:s2> = <nat:7> * <var:a> ^ <nat:2> \land <var:s0> = <nat:3> \land <var:B> = <nat:7> * <var:a> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:s2> \\ \{ <var:J> = <var:a> \land <var:s1> = <nat:5> * <var:a> \land <var:s0> = <nat:3> \land <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:s1> \\ \{ <var:J> = <var:a> \land <var:s0> = <nat:3> \land <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:5> * <var:a> \} \\ <var:B> := <var:B> + <var:s0> \\ \{ <var:J> = <var:a> \land <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> \} \end{eqnarray} Considering the above , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:J> ; <var:s2> := <var:s1> * <var:J> ; <var:s3> := <var:s2> * <var:J> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:5> ; <var:s2> := <var:s2> * <nat:7> ; <var:s3> := <var:s3> * <nat:7> ; <var:B> := <var:s3> <var:B> := <var:B> + <var:s2> <var:B> := <var:B> + <var:s1> <var:B> := <var:B> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:J> = <var:a> }} <def:poly> {{ <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <nat:5> * <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <nat:5> * <var:a> /\ <var:s2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <nat:5> * <var:a> /\ <var:s2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:a> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <nat:5> * <var:a> /\ <var:s2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:B> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s1> = <nat:5> * <var:a> /\ <var:s0> = <nat:3> /\ <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:s0> = <nat:3> /\ <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:B> = <nat:7> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 