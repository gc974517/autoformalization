\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:y1> := <var:N> ; <var:y2> := <var:y1> * <var:N> ; <var:y3> := <var:y2> * <var:N> ; <var:y0> := <nat:7> ; <var:y1> := <var:y1> * <nat:5> ; <var:y2> := <var:y2> * <nat:9> ; <var:y3> := <var:y3> * <nat:3> ; <var:O> := <var:y3> <var:O> := <var:O> + <var:y2> <var:O> := <var:O> + <var:y1> <var:O> := <var:O> + <var:y0> \end{verbatim} Assume that $ <var:N> = <var:M> $ ahead of the execution of this code it holds that $ <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:7> $ when series of commands has terminated . \end{theorem} \begin{proof} The proof of the list of commands can be accomplished by usual Hoare logic . Looking at the proceeding bits of codeseen in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:M> \} & <var:y1> := <var:N> & \{ <var:N> = <var:M> \land <var:y1> = <var:M> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <var:M> \} & <var:y2> := <var:y1> * <var:N> & \{ <var:N> = <var:M> \land <var:y1> = <var:M> \land <var:y2> = <var:M> ^ <nat:2> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <var:M> \land <var:y2> = <var:M> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:N> & \{ <var:N> = <var:M> \land <var:y1> = <var:M> \land <var:y2> = <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <var:M> \land <var:y2> = <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \} & <var:y0> := <nat:7> & \{ <var:N> = <var:M> \land <var:y1> = <var:M> \land <var:y2> = <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <var:M> \land <var:y2> = <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} & <var:y1> := <var:y1> * <nat:5> & \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} & <var:y2> := <var:y2> * <nat:9> & \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <nat:9> * <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <nat:9> * <var:M> ^ <nat:2> \land <var:y3> = <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} & <var:y3> := <var:y3> * <nat:3> & \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <nat:9> * <var:M> ^ <nat:2> \land <var:y3> = <nat:3> * <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <nat:9> * <var:M> ^ <nat:2> \land <var:y3> = <nat:3> * <var:M> ^ <nat:3> \land <var:y0> = <nat:7> \} & <var:O> := <var:y3& \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <nat:9> * <var:M> ^ <nat:2> \land <var:y0> = <nat:7> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y2> = <nat:9> * <var:M> ^ <nat:2> \land <var:y0> = <nat:7> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> \} & <var:O> := <var:O> + <var:y2& \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y0> = <nat:7> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> \} \\ \{ <var:N> = <var:M> \land <var:y1> = <nat:5> * <var:M> \land <var:y0> = <nat:7> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> \} & <var:O> := <var:O> + <var:y1& \{ <var:N> = <var:M> \land <var:y0> = <nat:7> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> \} \\ \{ <var:N> = <var:M> \land <var:y0> = <nat:7> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> \} & <var:O> := <var:O> + <var:y0& \{ <var:N> = <var:M> \land <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:N> = <var:M> }} <var:y1> := <var:N> ; <var:y2> := <var:y1> * <var:N> ; <var:y3> := <var:y2> * <var:N> ; <var:y0> := <nat:7> ; <var:y1> := <var:y1> * <nat:5> ; <var:y2> := <var:y2> * <nat:9> ; <var:y3> := <var:y3> * <nat:3> ; <var:O> := <var:y3> <var:O> := <var:O> + <var:y2> <var:O> := <var:O> + <var:y1> <var:O> := <var:O> + <var:y0> {{ <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <var:M> /\ <var:y2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <var:M> /\ <var:y2> = <var:M> ^ <nat:2> /\ <var:y3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <var:M> /\ <var:y2> = <var:M> ^ <nat:2> /\ <var:y3> = <var:M> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <nat:5> * <var:M> /\ <var:y2> = <var:M> ^ <nat:2> /\ <var:y3> = <var:M> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <nat:5> * <var:M> /\ <var:y2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:y3> = <var:M> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <nat:5> * <var:M> /\ <var:y2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:y3> = <nat:3> * <var:M> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <nat:5> * <var:M> /\ <var:y2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:y0> = <nat:7> /\ <var:O> = <nat:3> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y1> = <nat:5> * <var:M> /\ <var:y0> = <nat:7> /\ <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:y0> = <nat:7> /\ <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:O> = <nat:3> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 