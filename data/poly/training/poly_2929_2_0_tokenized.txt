\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:6> ; <var:j> := <var:N0> \end{verbatim} Allowing it to be that $ <var:m> = <var:O> $ prior to the execution of this series of commands , it must be that $ <var:j> = <nat:6> $ when series of instructions exits . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:m> = <var:O> \} \\ <var:N0> := <nat:6> ; \\ \{ <var:m> = <var:O> \land <var:N0> = <nat:6> \} \\ <var:j> := <var:N0> \\ \{ <var:m> = <var:O> \land <var:j> = <nat:6> \} \end{eqnarray} Hence , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:m> = <var:O> }} <var:N0> := <nat:6> ; <var:j> := <var:N0> {{ <var:j> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:j> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 