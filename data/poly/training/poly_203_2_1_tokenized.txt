\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:5> ; <var:z> := <var:B0> \end{verbatim} Assuming it to hold that $ <var:c> = <var:u> $ --- given all positive coefficients $ <var:u> $ --- before evaluating the segment of code , it must be that we have $ <var:z> = <nat:5> $ when series of commands has exited . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:c> = <var:u> \} \\ <var:B0> := <nat:5> ; \\ \{ <var:c> = <var:u> \land <var:B0> = <nat:5> \} \\ <var:z> := <var:B0> \\ \{ <var:c> = <var:u> \land <var:z> = <nat:5> \} \end{eqnarray} Considering the preceding argument , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:c> = <var:u> }} <var:B0> := <nat:5> ; <var:z> := <var:B0> {{ <var:z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 