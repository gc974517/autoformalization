\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:m1> := <var:A> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:9> ; <var:O> := <var:m1> <var:O> := <var:O> + <var:m0> \end{verbatim} Assume it to hold that $ <var:A> = <var:Y> $ before running our series of instructions , it follows that we see $ <var:O> = <nat:9> \times <var:Y> + <nat:6> $ after set of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of our code segment is shown with the following decorated set of commands . \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:m1> := <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:m1> = <var:Y> \} \\ <var:m0> := <nat:6> ; \\ \{ <var:A> = <var:Y> \land <var:m1> = <var:Y> \land <var:m0> = <nat:6> \} \\ <var:m1> := <var:m1> * <nat:9> ; \\ \{ <var:A> = <var:Y> \land <var:m1> = <nat:9> * <var:Y> \land <var:m0> = <nat:6> \} \\ <var:O> := <var:m1> \\ \{ <var:A> = <var:Y> \land <var:m0> = <nat:6> \land <var:O> = <nat:9> * <var:Y> \} \\ <var:O> := <var:O> + <var:m0> \\ \{ <var:A> = <var:Y> \land <var:O> = <nat:9> * <var:Y> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <var:m1> := <var:A> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:9> ; <var:O> := <var:m1> <var:O> := <var:O> + <var:m0> {{ <var:O> = <nat:9> * <var:Y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:m1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:m1> = <var:Y> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:m1> = <nat:9> * <var:Y> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:m0> = <nat:6> /\ <var:O> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:O> = <nat:9> * <var:Y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 