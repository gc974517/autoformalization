\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:9> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:B> ; <var:l> := <var:F1> ; <var:l> := <var:l> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:B> = <var:V> $ ahead of interpreting the list of commands it holds that we see $ <var:l> = <nat:5> * <var:V> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:V> \} \\ <var:F0> := <nat:9> ; \\ \{ <var:B> = <var:V> \land <var:F0> = <nat:9> \} \\ <var:F1> := <nat:5> ; \\ \{ <var:B> = <var:V> \land <var:F0> = <nat:9> \land <var:F1> = <nat:5> \} \\ <var:F1> := <var:F1> * <var:B> ; \\ \{ <var:B> = <var:V> \land <var:F0> = <nat:9> \land <var:F1> = <nat:5> \times <var:V> \} \\ <var:l> := <var:F1> ; \\ \{ <var:B> = <var:V> \land <var:F0> = <nat:9> \land <var:l> = <nat:5> \times <var:V> \} \\ <var:l> := <var:l> + <var:F0> \\ \{ <var:B> = <var:V> \land <var:l> = <nat:5> \times <var:V> + <nat:9> \} \end{eqnarray} Applying standard Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:9> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:B> ; <var:l> := <var:F1> ; <var:l> := <var:l> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:B> = <var:V> }} <def:poly> {{ <var:l> = <nat:5> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:F0> = <nat:9> /\ <var:l> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:l> = <nat:5> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 