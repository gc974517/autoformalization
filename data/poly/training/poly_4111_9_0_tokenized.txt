\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:1> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:n> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:n> ; <var:S2> := <var:S2> * <var:n> ; <var:t> := <var:S2> ; <var:t> := <var:t> + <var:S1> ; <var:t> := <var:t> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Given --- given any positive integers $ <var:D> $ --- $ <var:n> = <var:D> $ before running this list of commands , it holds that we have $ <var:t> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:6> \cdot <var:D> + <nat:1> $ once set of commands executes . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:n> = <var:D> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \} \\ <var:S1> := <nat:6> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> \} \\ <var:S1> := <var:S1> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> * <var:D> \} \\ <var:S2> := <nat:3> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> * <var:D> \land <var:S2> = <nat:3> \} \\ <var:S2> := <var:S2> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> * <var:D> \land <var:S2> = <nat:3> * <var:D> \} \\ <var:S2> := <var:S2> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> * <var:D> \land <var:S2> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:t> := <var:S2> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> * <var:D> \land <var:t> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:S1> ; \\ \{ <var:n> = <var:D> \land <var:S0> = <nat:1> \land <var:t> = <nat:3> * <var:D> ^ <nat:2> + <nat:6> * <var:D> \} \\ <var:t> := <var:t> + <var:S0> \\ \{ <var:n> = <var:D> \land <var:t> = <nat:3> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:1> \} \end{eqnarray} Thusly , this series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:1> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:n> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:n> ; <var:S2> := <var:S2> * <var:n> ; <var:t> := <var:S2> ; <var:t> := <var:t> + <var:S1> ; <var:t> := <var:t> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <def:poly> {{ <var:t> = <nat:3> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> * <var:D> /\ <var:S2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> * <var:D> /\ <var:S2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> * <var:D> /\ <var:S2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> * <var:D> /\ <var:t> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:S0> = <nat:1> /\ <var:t> = <nat:3> * <var:D> ^ <nat:2> + <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:t> = <nat:3> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 