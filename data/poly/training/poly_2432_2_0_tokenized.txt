\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:1> ; <var:r> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:c> = <var:Q> $ prior to executing this segment of code , it holds that we see $ <var:r> = <nat:1> $ when code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:Q> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:c> = <var:Q> \land <var:V0> = <nat:1> \} \\ <var:r> := <var:V0> \\ \{ <var:c> = <var:Q> \land <var:r> = <nat:1> \} \end{eqnarray} Applying standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:1> ; <var:r> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:c> = <var:Q> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Q> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Q> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 