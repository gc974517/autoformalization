\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:7> ; <var:y1> := <var:y1> * <var:j> ; <var:f> := <var:y1> ; <var:f> := <var:f> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:j> = <var:D> $ before evaluating the series of commands then we have $ <var:f> = <nat:7> \cdot <var:D> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:j> = <var:D> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:j> = <var:D> \land <var:y0> = <nat:5> \} \\ <var:y1> := <nat:7> ; \\ \{ <var:j> = <var:D> \land <var:y0> = <nat:5> \land <var:y1> = <nat:7> \} \\ <var:y1> := <var:y1> * <var:j> ; \\ \{ <var:j> = <var:D> \land <var:y0> = <nat:5> \land <var:y1> = <nat:7> \cdot <var:D> \} \\ <var:f> := <var:y1> ; \\ \{ <var:j> = <var:D> \land <var:y0> = <nat:5> \land <var:f> = <nat:7> \cdot <var:D> \} \\ <var:f> := <var:f> + <var:y0> \\ \{ <var:j> = <var:D> \land <var:f> = <nat:7> \cdot <var:D> + <nat:5> \} \end{eqnarray} Given the preceding argument , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:y1> := <nat:7> ; <var:y1> := <var:y1> * <var:j> ; <var:f> := <var:y1> ; <var:f> := <var:f> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:j> = <var:D> }} <def:poly> {{ <var:f> = <nat:7> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:y0> = <nat:5> /\ <var:f> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:f> = <nat:7> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 