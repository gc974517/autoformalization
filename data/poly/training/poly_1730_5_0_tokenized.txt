\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:L0> := <nat:8> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:O> ; <var:x> := <var:L1> ; <var:x> := <var:x> + <var:L0> \end{verbatim} Assuming $ <var:O> = <var:C> $ ahead of the execution of our list of commands it holds that $ <var:x> = <nat:8> \cdot <var:C> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this code can be accomplished using typical Hoare techniques . Moving onward , we see the environment update code \verb | <var:L0> := <nat:8> ; | . This code takes the condition $ \{ <var:O> = <var:C> \} $ to $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \} $ . This is rigorously given through the assignment law defined by usual Hoare techniques . Stepping through , the variable update code \verb | <var:L1> := <nat:8> ; | . This code takes the condition $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \} $ toward the postcondition $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \land <var:L1> = <nat:8> \} $ . Moving forward to the following command contained in the code , the environment update command \verb | <var:L1> := <var:L1> * <var:O> ; | . This statement redefines $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \land <var:L1> = <nat:8> \} $ into the condition $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \land <var:L1> = <nat:8> \cdot <var:C> \} $ . This is rigorously given using the assignment inference rule defined in typical Hoare reasoning . Advancing to the proceeding step found in our code , the command \verb | <var:x> := <var:L1> ; | . This statement advances the condition $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \land <var:L1> = <nat:8> \cdot <var:C> \} $ into the condition $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \land <var:x> = <nat:8> \cdot <var:C> \} $ . Next , the variable update line giving $ <var:x> + <var:L0$ toward $ <var:x>$ . This forwards the precondition $ \{ <var:O> = <var:C> \land <var:L0> = <nat:8> \land <var:x> = <nat:8> \cdot <var:C> \} $ toward $ \{ <var:O> = <var:C> \land <var:x> = <nat:8> \cdot <var:C> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:O> = <var:C> }} <var:L0> := <nat:8> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:O> ; <var:x> := <var:L1> ; <var:x> := <var:x> + <var:L0> {{ <var:x> = <nat:8> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:L0> = <nat:8> /\ <var:x> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:x> = <nat:8> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 