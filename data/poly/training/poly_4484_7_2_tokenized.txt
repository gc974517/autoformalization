\begin{document} \begin{theorem} Take the following code as \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:g> ; <var:z> := <nat:2> + <var:z> * <var:g> ; <var:z> := <var:z> * <var:g> ; <var:z> := <nat:4> + <var:z> * <var:g> ; <var:z> := <nat:4> + <var:z> * <var:g> ; <var:z> := <nat:4> + <var:z> * <var:g> \end{verbatim} Allowing $ <var:g> = <var:A> $ prior to evaluating this segment of code then we see $ <var:z> = <nat:2> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:5> + <nat:2> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this set of commands can be accomplished by Hoare reasoning . Paying attention to the upcoming lines of codein our list of instructions , we see \verb | { <var:g> = <var:A> } <var:z> := <nat:2> { <var:g> = <var:A> \land <var:z> = <nat:2> } | , \verb | { <var:g> = <var:A> \land <var:z> = <nat:2> } <var:z> := <nat:4> + <var:z> * <var:g> { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> + <nat:4> } | , \verb | { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> + <nat:4> } <var:z> := <nat:2> + <var:z> * <var:g> { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:2> } | and \verb | { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:2> } <var:z> := <var:z> * <var:g> { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + } | . This is known to be sound with the variable assignmet rule defined in typical Hoare reasoning . Moving onward , \verb | { <var:g> = <var:A> } <var:z> := <nat:2> { <var:g> = <var:A> \land <var:z> = <nat:2> } | , \verb | { <var:g> = <var:A> \land <var:z> = <nat:2> } <var:z> := <nat:4> + <var:z> * <var:g> { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> + <nat:4> } | and \verb | { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> + <nat:4> } <var:z> := <nat:2> + <var:z> * <var:g> { <var:g> = <var:A> \land <var:z> = <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:2> } | . This is shown by the binding inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:g> = <var:A> }} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:g> ; <var:z> := <nat:2> + <var:z> * <var:g> ; <var:z> := <var:z> * <var:g> ; <var:z> := <nat:4> + <var:z> * <var:g> ; <var:z> := <nat:4> + <var:z> * <var:g> ; <var:z> := <nat:4> + <var:z> * <var:g> {{ <var:z> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:z> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 