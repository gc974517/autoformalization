\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as \begin{verbatim} <var:R1> := <var:n> ; <var:R2> := <var:R1> * <var:n> ; <var:R3> := <var:R2> * <var:n> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:8> ; <var:R3> := <var:R3> * <nat:2> ; <var:a> := <var:R3> <var:a> := <var:a> + <var:R2> <var:a> := <var:a> + <var:R1> <var:a> := <var:a> + <var:R0> \end{verbatim} Assuming that $ <var:n> = <var:O> $ before interpreting this segment of code , it holds that $ <var:a> = <nat:2> \times <var:O> ^ <nat:3> + <nat:8> \times <var:O> ^ <nat:2> + <nat:8> \times <var:O> + <nat:4> $ once set of instructions has terminated . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be shown using typical Hoare techniques . Honing in on the next line of code in the series of commands , we have the environment update command \verb | <var:R1> := <var:n> ; | . This command forwards the condition $ \{ <var:n> = <var:O> \} $ to the condition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \} $ . Going forward , we see the variable assignmet command \verb | <var:R2> := <var:R1> * <var:n> ; | . This takes the condition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \} $ as the condition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \} $ . This is rigorously given through the assignment scheme given in Hoare techniques . Honing in on the next step found in the list of instructions , the variable binding command assigning $ <var:R2> * <var:n> $ as $ <var:R3>$ . This forwards the condition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \} $ . This is shown using the assignment law given by standard Hoare logic . Observing the next statement found in our code segment , the assignment statement letting $ <nat:4> $ to $ <var:R0>$ . This redefines the condition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \} $ to the postcondition $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . Moving on to the following piece of code in our series of commands , we have the environment update statement \verb | <var:R1> := <var:R1> * <nat:8> ; | . This code forwards $ \{ <var:n> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ as the condition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . This is shown to be logically sound through the assignment inference rule defined in typical Hoare techniques . Moving forward to the upcoming line of code contained in the set of instructions , the variable binding statement \verb | <var:R2> := <var:R2> * <nat:8> ; | . This forwards $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ into the condition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . Taking a look at the next piece of code contained in the series of instructions , the assignment command \verb | <var:R3> := <var:R3> * <nat:2> ; | . This command redefines $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:R3> = <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:R3> = <nat:2> \cdot <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . This is guaranteed with the assignment inference rule given by standard Hoare reasoning . Focusing on the following command found in our list of instructions , we see the binding command \verb | <var:a> := <var:R3> | . This statement transfers the precondition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:R3> = <nat:2> \cdot <var:O> ^ <nat:3> \land <var:R0> = <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> \} $ . This is given by the assignment law from typical Hoare reasoning . After , the binding statement \verb | <var:a> := <var:a> + <var:R2> | . This command advances the condition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> \} $ to the postcondition $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> \} $ . Honing in on the upcoming command in our code , the environment update statement yielding $ <var:a> + <var:R1$ into $ <var:a>$ . This code forwards $ \{ <var:n> = <var:O> \land <var:R1> = <nat:8> \cdot <var:O> \land <var:R0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> \} $ into the postcondition $ \{ <var:n> = <var:O> \land <var:R0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> + <nat:8> \cdot <var:O> \} $ . This is given by the assignment law found in standard Hoare techniques . Moving forward to the subsequent line of code seen in the program , we have the variable update code binding $ <var:a> + <var:R0$ as $ <var:a>$ . This redefines the condition $ \{ <var:n> = <var:O> \land <var:R0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> + <nat:8> \cdot <var:O> \} $ as $ \{ <var:n> = <var:O> \land <var:a> = <nat:2> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> + <nat:8> \cdot <var:O> + <nat:4> \} $ . This is rigorously given using the assignment inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:n> = <var:O> }} <var:R1> := <var:n> ; <var:R2> := <var:R1> * <var:n> ; <var:R3> := <var:R2> * <var:n> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:8> ; <var:R3> := <var:R3> * <nat:2> ; <var:a> := <var:R3> <var:a> := <var:a> + <var:R2> <var:a> := <var:a> + <var:R1> <var:a> := <var:a> + <var:R0> {{ <var:a> = <nat:2> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <var:O> /\ <var:R2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <var:O> /\ <var:R2> = <var:O> ^ <nat:2> /\ <var:R3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <var:O> /\ <var:R2> = <var:O> ^ <nat:2> /\ <var:R3> = <var:O> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <nat:8> * <var:O> /\ <var:R2> = <var:O> ^ <nat:2> /\ <var:R3> = <var:O> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <nat:8> * <var:O> /\ <var:R2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:R3> = <var:O> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <nat:8> * <var:O> /\ <var:R2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:R3> = <nat:2> * <var:O> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <nat:8> * <var:O> /\ <var:R2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:R0> = <nat:4> /\ <var:a> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R1> = <nat:8> * <var:O> /\ <var:R0> = <nat:4> /\ <var:a> = <nat:2> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:R0> = <nat:4> /\ <var:a> = <nat:2> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:a> = <nat:2> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 