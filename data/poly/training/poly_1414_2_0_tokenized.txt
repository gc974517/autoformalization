\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:1> ; <var:B> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given --- for some positive numbers $ <var:g> $ --- that $ <var:c> = <var:g> $ prior to interpreting the set of commands it follows that we see $ <var:B> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be accomplished through Hoare reasoning . After , we have the assignment code letting $ <nat:1> $ into $ <var:b0>$ . This code takes the condition $ \{ <var:c> = <var:g> \} $ as $ \{ <var:c> = <var:g> \land <var:b0> = <nat:1> \} $ . Further , we have the assignment code letting $ <var:b0$ to $ <var:B>$ . This advances the precondition $ \{ <var:c> = <var:g> \land <var:b0> = <nat:1> \} $ into the postcondition $ \{ <var:c> = <var:g> \land <var:B> = <nat:1> \} $ . This is known to be sound by the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:B> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:c> = <var:g> }} <def:poly> {{ <var:B> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:B> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 