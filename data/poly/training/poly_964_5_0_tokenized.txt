\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:5> ; <var:P1> := <nat:7> ; <var:P1> := <var:P1> * <var:b> ; <var:D> := <var:P1> ; <var:D> := <var:D> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:b> = <var:l> $ before interpreting this series of instructions it holds that we have $ <var:D> = <nat:7> \times <var:l> + <nat:5> $ once code has terminated . \end{theorem} \begin{proof} Notice the following decorated list of instructions . \begin{eqnarray} \{ <var:b> = <var:l> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:b> = <var:l> \land <var:P0> = <nat:5> \} \\ <var:P1> := <nat:7> ; \\ \{ <var:b> = <var:l> \land <var:P0> = <nat:5> \land <var:P1> = <nat:7> \} \end{eqnarray} Advancing the evaluation of our program results in : \begin{eqnarray} <var:P1> := <var:P1> * <var:b> ; \\ \{ <var:b> = <var:l> \land <var:P0> = <nat:5> \land <var:P1> = <nat:7> \cdot <var:l> \} \\ <var:D> := <var:P1> ; \\ \{ <var:b> = <var:l> \land <var:P0> = <nat:5> \land <var:D> = <nat:7> \cdot <var:l> \} \\ <var:D> := <var:D> + <var:P0> \\ \{ <var:b> = <var:l> \land <var:D> = <nat:7> \cdot <var:l> + <nat:5> \} \end{eqnarray} Applying standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:5> ; <var:P1> := <nat:7> ; <var:P1> := <var:P1> * <var:b> ; <var:D> := <var:P1> ; <var:D> := <var:D> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:b> = <var:l> }} <def:poly> {{ <var:D> = <nat:7> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:P0> = <nat:5> /\ <var:D> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:D> = <nat:7> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 