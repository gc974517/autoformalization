\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z> := <nat:4> ; <var:Z> := <var:Z> * <var:B> ; <var:Z> := <nat:2> + <var:Z> * <var:B> ; <var:Z> := <var:Z> * <var:B> ; <var:Z> := <nat:1> + <var:Z> * <var:B> ; <var:Z> := <nat:3> + <var:Z> * <var:B> ; <var:Z> := <nat:4> + <var:Z> * <var:B> ; <var:Z> := <nat:2> + <var:Z> * <var:B> ; <var:Z> := <nat:1> + <var:Z> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:B> = <var:H> $ ( for every positive integer coefficients $ <var:H> $ ) ahead of evaluating our code it holds that we have $ <var:Z> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> $ once code segment terminates . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:B> = <var:H> \} \\ <var:Z> := <nat:4> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> \} \\ <var:Z> := <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> + \} \\ <var:Z> := <nat:2> + <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> \} \\ <var:Z> := <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + \} \\ <var:Z> := <nat:1> + <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:3> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> \} \end{eqnarray} Furthering executing this set of instructions results in : \begin{eqnarray} <var:Z> := <nat:1> + <var:Z> * <var:B> \\ \{ <var:B> = <var:H> \land <var:Z> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} \end{eqnarray} Allowing executing our list of instructions gives us : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:4> ; <var:Z> := <var:Z> * <var:B> ; <var:Z> := <nat:2> + <var:Z> * <var:B> ; <var:Z> := <var:Z> * <var:B> ; <var:Z> := <nat:1> + <var:Z> * <var:B> ; <var:Z> := <nat:3> + <var:Z> * <var:B> ; <var:Z> := <nat:4> + <var:Z> * <var:B> ; <var:Z> := <nat:2> + <var:Z> * <var:B> ; <var:Z> := <nat:1> + <var:Z> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:B> = <var:H> }} <def:poly> {{ <var:Z> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Z> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 