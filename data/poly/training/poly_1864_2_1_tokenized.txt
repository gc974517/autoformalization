\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:6> ; <var:Z> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given some $ <var:l> \in \mathbb{Z}^+ $ ) that we have $ <var:Y> = <var:l> $ before running our list of instructions it must be that we have $ <var:Z> = <nat:6> $ once segment of code is done executing . \end{theorem} \begin{proof} Arguing the correctness of the program is done by typical Hoare logic . Moving forward , \verb | { <var:Y> = <var:l> } <var:P0> := <nat:6> { <var:Y> = <var:l> \land <var:P0> = <nat:6> } | . Moving forward to the following line of code found in our code segment , we see \verb | { <var:Y> = <var:l> } <var:P0> := <nat:6> { <var:Y> = <var:l> \land <var:P0> = <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:Z> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Y> = <var:l> }} <def:poly> {{ <var:Z> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:Z> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 