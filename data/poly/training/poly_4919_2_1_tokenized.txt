\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:t0> := <nat:3> ; <var:L> := <var:t0> \end{verbatim} Allowing that $ <var:z> = <var:d> $ ahead of evaluating our list of commands it follows that we have $ <var:L> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands is given by typical Hoare logic . Focusing on the proceeding bit of code seen in the program , the binding line \verb | <var:t0> := <nat:3> ; | . This forwards the condition $ \{ <var:z> = <var:d> \} $ to the condition $ \{ <var:z> = <var:d> \land <var:t0> = <nat:3> \} $ . Paying attention to the upcoming piece of code found in our series of commands , we have the variable assignmet command defining $ <var:t0$ as $ <var:L>$ . This command advances the condition $ \{ <var:z> = <var:d> \land <var:t0> = <nat:3> \} $ into $ \{ <var:z> = <var:d> \land <var:L> = <nat:3> \} $ . This is guaranteed using the assignment scheme in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:z> = <var:d> }} <var:t0> := <nat:3> ; <var:L> := <var:t0> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 