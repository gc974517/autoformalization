\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:N> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:N> ; <var:a2> := <var:a2> * <var:N> ; <var:z> := <var:a2> ; <var:z> := <var:z> + <var:a1> ; <var:z> := <var:z> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:N> = <var:f> $ before the execution of this series of commands , it follows that $ <var:z> = <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} The argument for the program is accomplished by typical Hoare reasoning . Immediately after , we see \verb | { <var:N> = <var:f> } <var:a0> := <nat:3> { <var:N> = <var:f> \land <var:a0> = <nat:3> } | , \verb | { <var:N> = <var:f> \land <var:a0> = <nat:3> } <var:a1> := <nat:2> { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } | , \verb | { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } <var:a1> := <var:a1> * <var:N> { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:f> } | and \verb | { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:f> } <var:a2> := <nat:4> { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:f> \land <var:a2> = <nat:4> } | . Looking at the following statements contained in the program , we see \verb | { <var:N> = <var:f> } <var:a0> := <nat:3> { <var:N> = <var:f> \land <var:a0> = <nat:3> } | and \verb | { <var:N> = <var:f> \land <var:a0> = <nat:3> } <var:a1> := <nat:2> { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } | . This is shown to be logically sound through the variable update rule found in standard Hoare logic . Following , we see \verb | { <var:N> = <var:f> } <var:a0> := <nat:3> { <var:N> = <var:f> \land <var:a0> = <nat:3> } | . This is guaranteed by the variable binding scheme given in usual Hoare techniques . Taking another step toward the upcoming steps seen in the code segment , we have \verb | { <var:N> = <var:f> } <var:a0> := <nat:3> { <var:N> = <var:f> \land <var:a0> = <nat:3> } | and \verb | { <var:N> = <var:f> \land <var:a0> = <nat:3> } <var:a1> := <nat:2> { <var:N> = <var:f> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:N> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:N> ; <var:a2> := <var:a2> * <var:N> ; <var:z> := <var:a2> ; <var:z> := <var:z> + <var:a1> ; <var:z> := <var:z> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:N> = <var:f> }} <def:poly> {{ <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:f> /\ <var:a2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:f> /\ <var:a2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:f> /\ <var:a2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:f> /\ <var:z> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:a0> = <nat:3> /\ <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 