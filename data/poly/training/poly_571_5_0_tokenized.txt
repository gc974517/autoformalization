\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:i> ; <var:r> := <var:u1> ; <var:r> := <var:r> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Allow ( given all whole numbers $ <var:t> $ ) that $ <var:i> = <var:t> $ ahead of executing our list of instructions , then we have $ <var:r> = <nat:6> * <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands is done through typical Hoare techniques . Jumping to the following pieces of code in the code , \verb | { <var:i> = <var:t> } <var:u0> := <nat:3> { <var:i> = <var:t> \land <var:u0> = <nat:3> } | , \verb | { <var:i> = <var:t> \land <var:u0> = <nat:3> } <var:u1> := <nat:6> { <var:i> = <var:t> \land <var:u0> = <nat:3> \land <var:u1> = <nat:6> } | , \verb | { <var:i> = <var:t> \land <var:u0> = <nat:3> \land <var:u1> = <nat:6> } <var:u1> := <var:u1> * <var:i> { <var:i> = <var:t> \land <var:u0> = <nat:3> \land <var:u1> = <nat:6> \times <var:t> } | , \verb | { <var:i> = <var:t> \land <var:u0> = <nat:3> \land <var:u1> = <nat:6> \times <var:t> } <var:r> := <var:u1> { <var:i> = <var:t> \land <var:u0> = <nat:3> \land <var:r> = <nat:6> \times <var:t> } | and \verb | { <var:i> = <var:t> \land <var:u0> = <nat:3> \land <var:r> = <nat:6> \times <var:t> } <var:r> := <var:r> + <var:u0{ <var:i> = <var:t> \land <var:r> = <nat:6> \times <var:t> + <nat:3> } | . This is guaranteed by the variable binding inference rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:i> ; <var:r> := <var:u1> ; <var:r> := <var:r> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:i> = <var:t> }} <def:poly> {{ <var:r> = <nat:6> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:u0> = <nat:3> /\ <var:r> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:r> = <nat:6> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 