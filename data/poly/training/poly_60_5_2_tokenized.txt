\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:a> ; <var:d> := <var:d> * <var:a> ; <var:d> := <nat:1> + <var:d> * <var:a> ; <var:d> := <nat:2> + <var:d> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:a> = <var:H> $ ahead of executing the list of instructions , it must be that we see $ <var:d> = <nat:4> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> + <nat:2> $ . \end{theorem} \begin{proof} Let this decorated series of commands . \begin{eqnarray} \{ <var:a> = <var:H> \} \\ <var:d> := <nat:4> ; \\ \{ <var:a> = <var:H> \land <var:d> = <nat:4> \} \\ <var:d> := <nat:2> + <var:d> * <var:a> ; \\ \{ <var:a> = <var:H> \land <var:d> = <nat:4> \cdot <var:H> + <nat:2> \} \\ <var:d> := <var:d> * <var:a> ; \\ \{ <var:a> = <var:H> \land <var:d> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + \} \\ <var:d> := <nat:1> + <var:d> * <var:a> ; \\ \{ <var:a> = <var:H> \land <var:d> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:1> \} \\ <var:d> := <nat:2> + <var:d> * <var:a> \\ \{ <var:a> = <var:H> \land <var:d> = <nat:4> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> + <nat:2> \} \end{eqnarray} Using standard Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:a> ; <var:d> := <var:d> * <var:a> ; <var:d> := <nat:1> + <var:d> * <var:a> ; <var:d> := <nat:2> + <var:d> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:a> = <var:H> }} <def:poly> {{ <var:d> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:d> = <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:d> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:d> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:d> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 