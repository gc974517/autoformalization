\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} : \begin{verbatim} <var:a1> := <var:N> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:4> ; <var:n> := <var:a1> <var:n> := <var:n> + <var:a0> \end{verbatim} Allowing it to hold that $ <var:N> = <var:k> $ ( given whole numbers $ <var:k> $ ) prior to executing our segment of code , then we see $ <var:n> = <nat:4> \times <var:k> + <nat:2> $ once set of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for this set of commands can be done through usual Hoare logic . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:a1> := <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} \end{tabular} This is known to be sound by the variable assignmet law defined in Hoare reasoning . Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:a1> := <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} & <var:a0> := <nat:2> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a0> = <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a0> = <nat:2> \} & <var:a1> := <var:a1> * <nat:4> & \{ <var:N> = <var:k> \land <var:a1> = <nat:4> \times <var:k> \land <var:a0> = <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <nat:4> \times <var:k> \land <var:a0> = <nat:2> \} & <var:n> := <var:a1& \{ <var:N> = <var:k> \land <var:a0> = <nat:2> \land <var:n> = <nat:4> \times <var:k> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:N> = <var:k> }} <var:a1> := <var:N> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:4> ; <var:n> := <var:a1> <var:n> := <var:n> + <var:a0> {{ <var:n> = <nat:4> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <var:k> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <nat:4> * <var:k> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a0> = <nat:2> /\ <var:n> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:n> = <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 