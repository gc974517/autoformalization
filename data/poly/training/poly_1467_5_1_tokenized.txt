\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:M1> := <var:O> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:5> ; <var:m> := <var:M1> <var:m> := <var:m> + <var:M0> \end{verbatim} Allowing it to be that $ <var:O> = <var:c> $ ahead of interpreting the segment of code , it must be that we see $ <var:m> = <nat:5> \cdot <var:c> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code can be shown through Hoare logic . Immediately after , \[ \begin{tabular} {rcl} \{ <var:O> = <var:c> \} & <var:M1> := <var:O> & \{ <var:O> = <var:c> \land <var:M1> = <var:c> \} \\ \{ <var:O> = <var:c> \land <var:M1> = <var:c> \} & <var:M0> := <nat:4> & \{ <var:O> = <var:c> \land <var:M1> = <var:c> \land <var:M0> = <nat:4> \} \\ \{ <var:O> = <var:c> \land <var:M1> = <var:c> \land <var:M0> = <nat:4> \} & <var:M1> := <var:M1> * <nat:5> & \{ <var:O> = <var:c> \land <var:M1> = <nat:5> * <var:c> \land <var:M0> = <nat:4> \} \\ \{ <var:O> = <var:c> \land <var:M1> = <nat:5> * <var:c> \land <var:M0> = <nat:4> \} & <var:m> := <var:M1& \{ <var:O> = <var:c> \land <var:M0> = <nat:4> \land <var:m> = <nat:5> * <var:c> \} \\ \{ <var:O> = <var:c> \land <var:M0> = <nat:4> \land <var:m> = <nat:5> * <var:c> \} & <var:m> := <var:m> + <var:M0& \{ <var:O> = <var:c> \land <var:m> = <nat:5> * <var:c> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:O> = <var:c> }} <var:M1> := <var:O> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:5> ; <var:m> := <var:M1> <var:m> := <var:m> + <var:M0> {{ <var:m> = <nat:5> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:M1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:M1> = <var:c> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:M1> = <nat:5> * <var:c> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:M0> = <nat:4> /\ <var:m> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:m> = <nat:5> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 