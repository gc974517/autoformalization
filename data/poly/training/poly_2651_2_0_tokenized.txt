\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:6> ; <var:u> := <var:V0> \end{verbatim} Assuming that $ <var:U> = <var:E> $ --- for any positive integer coefficients $ <var:E> $ --- before evaluating our set of commands , it holds that $ <var:u> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be demonstrated through standard Hoare reasoning . Jumping to the next bit of code seen in the set of commands , \begin{verbatim} { <var:U> = <var:E> } <var:V0> := <nat:6> { <var:U> = <var:E> \land <var:V0> = <nat:6> } \end{verbatim} This is given by the environment update rule from standard Hoare logic . Next , we have \begin{verbatim} { <var:U> = <var:E> } <var:V0> := <nat:6> { <var:U> = <var:E> \land <var:V0> = <nat:6> } \end{verbatim} This is known to be sound by the variable update law obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:U> = <var:E> }} <var:V0> := <nat:6> ; <var:u> := <var:V0> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 