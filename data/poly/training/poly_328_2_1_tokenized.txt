\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:9> ; <var:U> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:K> = <var:s> $ prior to executing our set of instructions , it must be that we have $ <var:U> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this code is given through usual Hoare reasoning . Stepping through , we see \begin{verbatim} { <var:K> = <var:s> } <var:T0> := <nat:9> { <var:K> = <var:s> \land <var:T0> = <nat:9> } \end{verbatim} Immediately following , \begin{verbatim} { <var:K> = <var:s> } <var:T0> := <nat:9> { <var:K> = <var:s> \land <var:T0> = <nat:9> } \end{verbatim} This is given through the variable binding inference rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:9> ; <var:U> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <def:poly> {{ <var:U> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:U> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 