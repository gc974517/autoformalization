\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:q1> := <var:Z> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:5> ; <var:n> := <var:q1> <var:n> := <var:n> + <var:q0> \end{verbatim} Allow --- for positive integer coefficients $ <var:i> $ --- that $ <var:Z> = <var:i> $ prior to running our series of commands , it holds that $ <var:n> = <nat:5> \times <var:i> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands can be accomplished through standard Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:i> \} & <var:q1> := <var:Z> & \{ <var:Z> = <var:i> \land <var:q1> = <var:i> \} \\ \{ <var:Z> = <var:i> \land <var:q1> = <var:i> \} & <var:q0> := <nat:7> & \{ <var:Z> = <var:i> \land <var:q1> = <var:i> \land <var:q0> = <nat:7> \} \\ \{ <var:Z> = <var:i> \land <var:q1> = <var:i> \land <var:q0> = <nat:7> \} & <var:q1> := <var:q1> * <nat:5> & \{ <var:Z> = <var:i> \land <var:q1> = <nat:5> \cdot <var:i> \land <var:q0> = <nat:7> \} \\ \{ <var:Z> = <var:i> \land <var:q1> = <nat:5> \cdot <var:i> \land <var:q0> = <nat:7> \} & <var:n> := <var:q1& \{ <var:Z> = <var:i> \land <var:q0> = <nat:7> \land <var:n> = <nat:5> \cdot <var:i> \} \\ \{ <var:Z> = <var:i> \land <var:q0> = <nat:7> \land <var:n> = <nat:5> \cdot <var:i> \} & <var:n> := <var:n> + <var:q0& \{ <var:Z> = <var:i> \land <var:n> = <nat:5> \cdot <var:i> + <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Z> = <var:i> }} <var:q1> := <var:Z> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:5> ; <var:n> := <var:q1> <var:n> := <var:n> + <var:q0> {{ <var:n> = <nat:5> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:q1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:q1> = <var:i> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:q1> = <nat:5> * <var:i> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:q0> = <nat:7> /\ <var:n> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:n> = <nat:5> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 