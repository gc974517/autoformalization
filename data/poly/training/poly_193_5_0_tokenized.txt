\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:2> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:y> ; <var:n> := <var:N1> ; <var:n> := <var:n> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:y> = <var:M> $ before the evaluation of our segment of code then we have $ <var:n> = <nat:2> * <var:M> + <nat:2> $ once list of instructions executes . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:y> = <var:M> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:y> = <var:M> \land <var:N0> = <nat:2> \} \\ <var:N1> := <nat:2> ; \\ \{ <var:y> = <var:M> \land <var:N0> = <nat:2> \land <var:N1> = <nat:2> \} \\ <var:N1> := <var:N1> * <var:y> ; \\ \{ <var:y> = <var:M> \land <var:N0> = <nat:2> \land <var:N1> = <nat:2> \times <var:M> \} \\ <var:n> := <var:N1> ; \\ \{ <var:y> = <var:M> \land <var:N0> = <nat:2> \land <var:n> = <nat:2> \times <var:M> \} \\ <var:n> := <var:n> + <var:N0> \\ \{ <var:y> = <var:M> \land <var:n> = <nat:2> \times <var:M> + <nat:2> \} \end{eqnarray} Thus , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N0> := <nat:2> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:y> ; <var:n> := <var:N1> ; <var:n> := <var:n> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:y> = <var:M> }} <def:poly> {{ <var:n> = <nat:2> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:N0> = <nat:2> /\ <var:n> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:n> = <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 