\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:R> := <nat:1> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> \end{verbatim} Assume it to hold that $ <var:r> = <var:e> $ ahead of the evaluation of our set of commands it follows that $ <var:R> = <nat:1> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:3> $ once set of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:e> \} \\ <var:R> := <nat:1> ; \\ \{ <var:r> = <var:e> \land <var:R> = <nat:1> \} \\ <var:R> := <nat:2> + <var:R> * <var:r> ; \\ \{ <var:r> = <var:e> \land <var:R> = <nat:1> \cdot <var:e> + <nat:2> \} \\ <var:R> := <nat:2> + <var:R> * <var:r> ; \\ \{ <var:r> = <var:e> \land <var:R> = <nat:1> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:2> \} \\ <var:R> := <nat:3> + <var:R> * <var:r> ; \\ \{ <var:r> = <var:e> \land <var:R> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:3> \} \end{eqnarray} Allowing the execution of the series of commands gives : \begin{eqnarray} <var:R> := <nat:3> + <var:R> * <var:r> \\ \{ <var:r> = <var:e> \land <var:R> = <nat:1> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:r> = <var:e> }} <var:R> := <nat:1> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> {{ <var:R> = <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:R> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:R> = <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:R> = <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:R> = <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:R> = <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 