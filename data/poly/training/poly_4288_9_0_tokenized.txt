\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:1> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:D> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:D> ; <var:M2> := <var:M2> * <var:D> ; <var:W> := <var:M2> ; <var:W> := <var:W> + <var:M1> ; <var:W> := <var:W> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allow that we have $ <var:D> = <var:E> $ prior to executing our program , it must be that we have $ <var:W> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:1> $ . \end{theorem} \begin{proof} The application of Hoare techniques results in : \begin{eqnarray} \{ <var:D> = <var:E> \} \\ <var:M0> := <nat:1> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \} \\ <var:M1> := <nat:4> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> \} \\ <var:M1> := <var:M1> * <var:D> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:E> \} \\ <var:M2> := <nat:2> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:E> \land <var:M2> = <nat:2> \} \\ <var:M2> := <var:M2> * <var:D> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:E> \land <var:M2> = <nat:2> * <var:E> \} \\ <var:M2> := <var:M2> * <var:D> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:E> \land <var:M2> = <nat:2> * <var:E> ^ <nat:2> \} \\ <var:W> := <var:M2> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:E> \land <var:W> = <nat:2> * <var:E> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:M1> ; \\ \{ <var:D> = <var:E> \land <var:M0> = <nat:1> \land <var:W> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> \} \\ <var:W> := <var:W> + <var:M0> \\ \{ <var:D> = <var:E> \land <var:W> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:1> \} \end{eqnarray} Given the preceding argument , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:1> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:D> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:D> ; <var:M2> := <var:M2> * <var:D> ; <var:W> := <var:M2> ; <var:W> := <var:W> + <var:M1> ; <var:W> := <var:W> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:D> = <var:E> }} <def:poly> {{ <var:W> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:E> /\ <var:M2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:E> /\ <var:M2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:E> /\ <var:M2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:M0> = <nat:1> /\ <var:W> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 