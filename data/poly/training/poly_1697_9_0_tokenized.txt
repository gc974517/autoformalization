\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:5> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:F> ; <var:V2> := <nat:1> ; <var:V2> := <var:V2> * <var:F> ; <var:V2> := <var:V2> * <var:F> ; <var:Z> := <var:V2> ; <var:Z> := <var:Z> + <var:V1> ; <var:Z> := <var:Z> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Allowing for positive integers $ <var:y> $ it to hold that $ <var:F> = <var:y> $ before the evaluation of our set of instructions it must be that $ <var:Z> = <nat:1> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:5> $ once code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:y> \} \\ <var:V0> := <nat:5> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \} \\ <var:V1> := <nat:9> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:V1> = <nat:9> \} \\ <var:V1> := <var:V1> * <var:F> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:V1> = <nat:9> * <var:y> \} \\ <var:V2> := <nat:1> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:V1> = <nat:9> * <var:y> \land <var:V2> = <nat:1> \} \\ <var:V2> := <var:V2> * <var:F> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:V1> = <nat:9> * <var:y> \land <var:V2> = <nat:1> * <var:y> \} \\ <var:V2> := <var:V2> * <var:F> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:V1> = <nat:9> * <var:y> \land <var:V2> = <nat:1> * <var:y> ^ <nat:2> \} \\ <var:Z> := <var:V2> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:V1> = <nat:9> * <var:y> \land <var:Z> = <nat:1> * <var:y> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:V1> ; \\ \{ <var:F> = <var:y> \land <var:V0> = <nat:5> \land <var:Z> = <nat:1> * <var:y> ^ <nat:2> + <nat:9> * <var:y> \} \\ <var:Z> := <var:Z> + <var:V0> \\ \{ <var:F> = <var:y> \land <var:Z> = <nat:1> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:5> \} \end{eqnarray} Utilizing Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:5> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:F> ; <var:V2> := <nat:1> ; <var:V2> := <var:V2> * <var:F> ; <var:V2> := <var:V2> * <var:F> ; <var:Z> := <var:V2> ; <var:Z> := <var:Z> + <var:V1> ; <var:Z> := <var:Z> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:F> = <var:y> }} <def:poly> {{ <var:Z> = <nat:1> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:9> * <var:y> /\ <var:V2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:9> * <var:y> /\ <var:V2> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:9> * <var:y> /\ <var:V2> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:9> * <var:y> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:V0> = <nat:5> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:2> + <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 