\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:6> ; <var:f> := <var:d0> \end{verbatim} Allow it to be that $ <var:D> = <var:L> $ prior to executing our series of commands , then we see $ <var:f> = <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:D> = <var:L> \} \\ <var:d0> := <nat:6> ; \\ \{ <var:D> = <var:L> \land <var:d0> = <nat:6> \} \end{eqnarray} Allowing the evaluation of the list of commands yields : \begin{eqnarray} <var:f> := <var:d0> \\ \{ <var:D> = <var:L> \land <var:f> = <nat:6> \} \end{eqnarray} Considering the above , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:D> = <var:L> }} <var:d0> := <nat:6> ; <var:f> := <var:d0> {{ <var:f> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:f> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 