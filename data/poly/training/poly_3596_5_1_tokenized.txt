\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:K> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:2> ; <var:b> := <var:r1> <var:b> := <var:b> + <var:r0> \end{verbatim} Assuming that we have $ <var:K> = <var:g> $ before interpreting our series of instructions then we have $ <var:b> = <nat:2> * <var:g> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques returns : \begin{eqnarray} \{ <var:K> = <var:g> \} \\ <var:r1> := <var:K> ; \\ \{ <var:K> = <var:g> \land <var:r1> = <var:g> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:K> = <var:g> \land <var:r1> = <var:g> \land <var:r0> = <nat:7> \} \end{eqnarray} Advancing running this set of commands returns : \begin{eqnarray} <var:r1> := <var:r1> * <nat:2> ; \\ \{ <var:K> = <var:g> \land <var:r1> = <nat:2> * <var:g> \land <var:r0> = <nat:7> \} \\ <var:b> := <var:r1> \\ \{ <var:K> = <var:g> \land <var:r0> = <nat:7> \land <var:b> = <nat:2> * <var:g> \} \\ <var:b> := <var:b> + <var:r0> \\ \{ <var:K> = <var:g> \land <var:b> = <nat:2> * <var:g> + <nat:7> \} \end{eqnarray} As a consequence , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:K> = <var:g> }} <var:r1> := <var:K> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:2> ; <var:b> := <var:r1> <var:b> := <var:b> + <var:r0> {{ <var:b> = <nat:2> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:r1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:r1> = <var:g> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:r1> = <nat:2> * <var:g> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:r0> = <nat:7> /\ <var:b> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:b> = <nat:2> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 