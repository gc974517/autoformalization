\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:C1> := <var:x> ; <var:C2> := <var:C1> * <var:x> ; <var:C3> := <var:C2> * <var:x> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:3> ; <var:z> := <var:C3> <var:z> := <var:z> + <var:C2> <var:z> := <var:z> + <var:C1> <var:z> := <var:z> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:x> = <var:F> $ ahead of executing our code , it follows that $ <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be shown with typical Hoare logic . Observing the upcoming step seen in our series of instructions , the environment update code \verb | <var:C1> := <var:x> ; | . This line takes $ \{ <var:x> = <var:F> \} $ as the condition $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \} $ . Immediately after , we have the environment update code binding $ <var:C1> * <var:x> $ as $ <var:C2>$ . This moves $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \} $ as the postcondition $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \land <var:C2> = <var:F> ^ <nat:2> \} $ . This is sound using the assignment scheme obtained from typical Hoare reasoning . Focusing on the subsequent piece of code contained in the set of instructions , we see the assignment line defining $ <var:C2> * <var:x> $ as $ <var:C3>$ . This transfers the condition $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \land <var:C2> = <var:F> ^ <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \land <var:C2> = <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \} $ . This is given with the assignment rule found in typical Hoare reasoning . Considering the following bit of code contained in our segment of code , the variable binding line \verb | <var:C0> := <nat:3> ; | . This moves the precondition $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \land <var:C2> = <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \} $ into $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \land <var:C2> = <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . This is given through the assignment law in standard Hoare logic . Now , we see the variable update statement yielding $ <var:C1> * <nat:2> $ toward $ <var:C1>$ . This line advances the condition $ \{ <var:x> = <var:F> \land <var:C1> = <var:F> \land <var:C2> = <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ into the condition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . Following , we have the binding code defining $ <var:C2> * <nat:3> $ to $ <var:C2>$ . This moves the precondition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ to the postcondition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <nat:3> \cdot <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . Advancing to the next step , the variable assignmet command \verb | <var:C3> := <var:C3> * <nat:3> ; | . This command redefines the condition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <nat:3> \cdot <var:F> ^ <nat:2> \land <var:C3> = <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ to the condition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <nat:3> \cdot <var:F> ^ <nat:2> \land <var:C3> = <nat:3> \cdot <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . Moving forward , the variable update command \verb | <var:z> := <var:C3> | . This moves $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <nat:3> \cdot <var:F> ^ <nat:2> \land <var:C3> = <nat:3> \cdot <var:F> ^ <nat:3> \land <var:C0> = <nat:3> \} $ to the condition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <nat:3> \cdot <var:F> ^ <nat:2> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> \} $ . Considering the next statement in our set of commands , we see the command yielding $ <var:z> + <var:C2$ into $ <var:z>$ . This moves $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C2> = <nat:3> \cdot <var:F> ^ <nat:2> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> \} $ to the postcondition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> \} $ . Going forward , we have the binding code \verb | <var:z> := <var:z> + <var:C1> | . This line forwards the condition $ \{ <var:x> = <var:F> \land <var:C1> = <nat:2> \cdot <var:F> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> \} $ to $ \{ <var:x> = <var:F> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> \} $ . Shifting focus toward the following line of code contained in our series of commands , we see the environment update line \verb | <var:z> := <var:z> + <var:C0> | . This command forwards the precondition $ \{ <var:x> = <var:F> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> \} $ into the postcondition $ \{ <var:x> = <var:F> \land <var:z> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C1> := <var:x> ; <var:C2> := <var:C1> * <var:x> ; <var:C3> := <var:C2> * <var:x> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:3> ; <var:z> := <var:C3> <var:z> := <var:z> + <var:C2> <var:z> := <var:z> + <var:C1> <var:z> := <var:z> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:x> = <var:F> }} <def:poly> {{ <var:z> = <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <var:F> /\ <var:C2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <var:F> /\ <var:C2> = <var:F> ^ <nat:2> /\ <var:C3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <var:F> /\ <var:C2> = <var:F> ^ <nat:2> /\ <var:C3> = <var:F> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <nat:2> * <var:F> /\ <var:C2> = <var:F> ^ <nat:2> /\ <var:C3> = <var:F> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <nat:2> * <var:F> /\ <var:C2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:C3> = <var:F> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <nat:2> * <var:F> /\ <var:C2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:F> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <nat:2> * <var:F> /\ <var:C2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:C0> = <nat:3> /\ <var:z> = <nat:3> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C1> = <nat:2> * <var:F> /\ <var:C0> = <nat:3> /\ <var:z> = <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:C0> = <nat:3> /\ <var:z> = <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:z> = <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 