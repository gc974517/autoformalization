\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:2> ; <var:x> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given --- given all natural coefficients $ <var:i> $ --- it to be that $ <var:K> = <var:i> $ prior to interpreting the code , it must be that we see $ <var:x> = <nat:2> $ once set of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions can be demonstrated through typical Hoare logic . Moving on to the subsequent step in the code segment , we have the variable binding command giving $ <nat:2> $ as $ <var:g0>$ . This command transfers the condition $ \{ <var:K> = <var:i> \} $ as the condition $ \{ <var:K> = <var:i> \land <var:g0> = <nat:2> \} $ . This is guaranteed by the assignment scheme of typical Hoare reasoning . Paying attention to the upcoming bit of code found in our program , we have the assignment code letting $ <var:g0$ toward $ <var:x>$ . This command forwards $ \{ <var:K> = <var:i> \land <var:g0> = <nat:2> \} $ as $ \{ <var:K> = <var:i> \land <var:x> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:x> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:K> = <var:i> }} <def:poly> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 