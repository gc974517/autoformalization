\begin{document} \begin{theorem} Take the following list of commands such that \begin{verbatim} <var:J> := <nat:4> ; <var:J> := <nat:2> + <var:J> * <var:e> ; <var:J> := <nat:1> + <var:J> * <var:e> ; <var:J> := <nat:3> + <var:J> * <var:e> ; <var:J> := <nat:2> + <var:J> * <var:e> \end{verbatim} Given that we have $ <var:e> = <var:U> $ prior to running our code segment it follows that we see $ <var:J> = <nat:4> \times <var:U> ^ <nat:4> + <nat:2> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:2> $ when set of commands executes . \end{theorem} \begin{proof} The proof of this list of instructions can be seen by typical Hoare techniques . Shifting focus toward the proceeding piece of code found in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:U> \} & <var:J> := <nat:4> & \{ <var:e> = <var:U> \land <var:J> = <nat:4> \} \end{tabular} This is guaranteed using the assignment rule defined in standard Hoare reasoning . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:U> \} & <var:J> := <nat:4> & \{ <var:e> = <var:U> \land <var:J> = <nat:4> \} \\ \{ <var:e> = <var:U> \land <var:J> = <nat:4> \} & <var:J> := <nat:2> + <var:J> * <var:e> & \{ <var:e> = <var:U> \land <var:J> = <nat:4> \cdot <var:U> + <nat:2> \} \\ \{ <var:e> = <var:U> \land <var:J> = <nat:4> \cdot <var:U> + <nat:2> \} & <var:J> := <nat:1> + <var:J> * <var:e> & \{ <var:e> = <var:U> \land <var:J> = <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:1> \} \\ \{ <var:e> = <var:U> \land <var:J> = <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:1> \} & <var:J> := <nat:3> + <var:J> * <var:e> & \{ <var:e> = <var:U> \land <var:J> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:3> \} \end{tabular} This is ensured by the variable assignmet law defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:e> = <var:U> }} <var:J> := <nat:4> ; <var:J> := <nat:2> + <var:J> * <var:e> ; <var:J> := <nat:1> + <var:J> * <var:e> ; <var:J> := <nat:3> + <var:J> * <var:e> ; <var:J> := <nat:2> + <var:J> * <var:e> {{ <var:J> = <nat:4> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:J> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:J> = <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:J> = <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:J> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:J> = <nat:4> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 