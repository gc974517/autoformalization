\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:1> ; <var:b> := <var:t1> <var:b> := <var:b> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Assume , for any $ <var:f> \in \mathbb{N} $ , $ <var:s> = <var:f> $ before evaluating the segment of code , it must be that we see $ <var:b> = <nat:1> \cdot <var:f> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is given with Hoare reasoning . Advancing to the subsequent line of code in our code , we have the variable assignmet code giving $ <var:s> $ toward $ <var:t1>$ . This command takes the condition $ \{ <var:s> = <var:f> \} $ to the condition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \} $ . This is ensured with the assignment inference rule in standard Hoare techniques . Paying attention to the subsequent line in the segment of code , the variable update command defining $ <nat:6> $ toward $ <var:t0>$ . This statement moves the precondition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \} $ toward $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t0> = <nat:6> \} $ . This is shown with the assignment law given by typical Hoare reasoning . Jumping to the next step in our code , we see the variable update statement \verb | <var:t1> := <var:t1> * <nat:1> ; | . This command forwards $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t0> = <nat:6> \} $ as the postcondition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:1> \cdot <var:f> \land <var:t0> = <nat:6> \} $ . This is shown to be logically sound with the assignment scheme defined in usual Hoare logic . Advancing , we see the variable assignmet code defining $ <var:t1$ to $ <var:b>$ . This command takes the precondition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:1> \cdot <var:f> \land <var:t0> = <nat:6> \} $ as $ \{ <var:s> = <var:f> \land <var:t0> = <nat:6> \land <var:b> = <nat:1> \cdot <var:f> \} $ . Considering the next line of code contained in the list of instructions , we see the assignment code \verb | <var:b> := <var:b> + <var:t0> | . This code moves the condition $ \{ <var:s> = <var:f> \land <var:t0> = <nat:6> \land <var:b> = <nat:1> \cdot <var:f> \} $ as the condition $ \{ <var:s> = <var:f> \land <var:b> = <nat:1> \cdot <var:f> + <nat:6> \} $ . This is rigorously given by the assignment rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:1> ; <var:b> := <var:t1> <var:b> := <var:b> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <def:poly> {{ <var:b> = <nat:1> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <var:f> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <nat:1> * <var:f> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t0> = <nat:6> /\ <var:b> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:b> = <nat:1> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 