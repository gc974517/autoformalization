\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as \begin{verbatim} <var:x1> := <var:F> ; <var:x2> := <var:x1> * <var:F> ; <var:x3> := <var:x2> * <var:F> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:5> ; <var:x3> := <var:x3> * <nat:9> ; <var:N> := <var:x3> <var:N> := <var:N> + <var:x2> <var:N> := <var:N> + <var:x1> <var:N> := <var:N> + <var:x0> \end{verbatim} Allowing ( for any whole numbers $ <var:Z> $ ) it to hold that $ <var:F> = <var:Z> $ ahead of running the program , it must be that we see $ <var:N> = <nat:9> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:F> = <var:Z> \} \\ <var:x1> := <var:F> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <var:Z> \} \\ <var:x2> := <var:x1> * <var:F> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <var:Z> \land <var:x2> = <var:Z> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:F> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <var:Z> \land <var:x2> = <var:Z> ^ <nat:2> \land <var:x3> = <var:Z> ^ <nat:3> \} \\ <var:x0> := <nat:2> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <var:Z> \land <var:x2> = <var:Z> ^ <nat:2> \land <var:x3> = <var:Z> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:x1> := <var:x1> * <nat:5> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <nat:5> * <var:Z> \land <var:x2> = <var:Z> ^ <nat:2> \land <var:x3> = <var:Z> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:x2> := <var:x2> * <nat:5> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <nat:5> * <var:Z> \land <var:x2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:x3> = <var:Z> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:x3> := <var:x3> * <nat:9> ; \\ \{ <var:F> = <var:Z> \land <var:x1> = <nat:5> * <var:Z> \land <var:x2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:x3> = <nat:9> * <var:Z> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:N> := <var:x3> \\ \{ <var:F> = <var:Z> \land <var:x1> = <nat:5> * <var:Z> \land <var:x2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:x0> = <nat:2> \land <var:N> = <nat:9> * <var:Z> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:x2> \\ \{ <var:F> = <var:Z> \land <var:x1> = <nat:5> * <var:Z> \land <var:x0> = <nat:2> \land <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:x1> \\ \{ <var:F> = <var:Z> \land <var:x0> = <nat:2> \land <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> \} \\ <var:N> := <var:N> + <var:x0> \\ \{ <var:F> = <var:Z> \land <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:2> \} \end{eqnarray} Considering the preceding argument , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:F> = <var:Z> }} <var:x1> := <var:F> ; <var:x2> := <var:x1> * <var:F> ; <var:x3> := <var:x2> * <var:F> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:5> ; <var:x3> := <var:x3> * <nat:9> ; <var:N> := <var:x3> <var:N> := <var:N> + <var:x2> <var:N> := <var:N> + <var:x1> <var:N> := <var:N> + <var:x0> {{ <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <var:Z> /\ <var:x2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <var:Z> /\ <var:x2> = <var:Z> ^ <nat:2> /\ <var:x3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <var:Z> /\ <var:x2> = <var:Z> ^ <nat:2> /\ <var:x3> = <var:Z> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <nat:5> * <var:Z> /\ <var:x2> = <var:Z> ^ <nat:2> /\ <var:x3> = <var:Z> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <nat:5> * <var:Z> /\ <var:x2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:x3> = <var:Z> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <nat:5> * <var:Z> /\ <var:x2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:Z> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <nat:5> * <var:Z> /\ <var:x2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:x0> = <nat:2> /\ <var:N> = <nat:9> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x1> = <nat:5> * <var:Z> /\ <var:x0> = <nat:2> /\ <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:x0> = <nat:2> /\ <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:N> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 