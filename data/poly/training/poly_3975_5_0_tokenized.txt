\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:6> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:n> ; <var:I> := <var:H1> ; <var:I> := <var:I> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:n> = <var:z> $ given all positive coefficients $ <var:z> $ prior to the evaluation of our segment of code it holds that $ <var:I> = <nat:8> \times <var:z> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be given using typical Hoare reasoning . Next , \verb | { <var:n> = <var:z> } <var:H0> := <nat:6> { <var:n> = <var:z> \land <var:H0> = <nat:6> } | . This is shown to be logically sound using the variable assignmet scheme found in standard Hoare logic . Stepping through , \verb | { <var:n> = <var:z> } <var:H0> := <nat:6> { <var:n> = <var:z> \land <var:H0> = <nat:6> } | and \verb | { <var:n> = <var:z> \land <var:H0> = <nat:6> } <var:H1> := <nat:8> { <var:n> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:8> } | . This is known to be sound with the binding inference rule from usual Hoare techniques . Moving forward to the subsequent bits of codein the set of instructions , we see \verb | { <var:n> = <var:z> } <var:H0> := <nat:6> { <var:n> = <var:z> \land <var:H0> = <nat:6> } | and \verb | { <var:n> = <var:z> \land <var:H0> = <nat:6> } <var:H1> := <nat:8> { <var:n> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:6> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:n> ; <var:I> := <var:H1> ; <var:I> := <var:I> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:n> = <var:z> }} <def:poly> {{ <var:I> = <nat:8> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:H0> = <nat:6> /\ <var:I> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:I> = <nat:8> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 