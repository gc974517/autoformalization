\begin{document} \begin{theorem} We define a set of instructions as \begin{verbatim} <var:K1> := <var:q> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:3> ; <var:U> := <var:K1> <var:U> := <var:U> + <var:K0> \end{verbatim} Allowing given all positive numbers $ <var:k> $ it to be that $ <var:q> = <var:k> $ prior to the execution of the code segment it holds that $ <var:U> = <nat:3> * <var:k> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:k> \} \\ <var:K1> := <var:q> ; \\ \{ <var:q> = <var:k> \land <var:K1> = <var:k> \} \\ <var:K0> := <nat:2> ; \\ \{ <var:q> = <var:k> \land <var:K1> = <var:k> \land <var:K0> = <nat:2> \} \\ <var:K1> := <var:K1> * <nat:3> ; \\ \{ <var:q> = <var:k> \land <var:K1> = <nat:3> * <var:k> \land <var:K0> = <nat:2> \} \\ <var:U> := <var:K1> \\ \{ <var:q> = <var:k> \land <var:K0> = <nat:2> \land <var:U> = <nat:3> * <var:k> \} \\ <var:U> := <var:U> + <var:K0> \\ \{ <var:q> = <var:k> \land <var:U> = <nat:3> * <var:k> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:q> = <var:k> }} <var:K1> := <var:q> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:3> ; <var:U> := <var:K1> <var:U> := <var:U> + <var:K0> {{ <var:U> = <nat:3> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:K1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:K1> = <var:k> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:K1> = <nat:3> * <var:k> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:K0> = <nat:2> /\ <var:U> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:U> = <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 