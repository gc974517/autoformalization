\begin{document} \begin{theorem} Let the following set of instructions as \begin{verbatim} <var:I0> := <nat:1> ; <var:v> := <var:I0> \end{verbatim} Assume --- letting $ <var:f> $ --- that $ <var:a> = <var:f> $ ahead of running this series of commands , it holds that we have $ <var:v> = <nat:1> $ . \end{theorem} \begin{proof} The argument for this series of commands can be done using usual Hoare reasoning . Immediately following , we see the variable assignmet line assigning $ <nat:1> $ toward $ <var:I0>$ . This forwards the condition $ \{ <var:a> = <var:f> \} $ to the condition $ \{ <var:a> = <var:f> \land <var:I0> = <nat:1> \} $ . Focusing on the proceeding line contained in the program , we have the binding command defining $ <var:I0$ toward $ <var:v>$ . This command redefines the condition $ \{ <var:a> = <var:f> \land <var:I0> = <nat:1> \} $ to $ \{ <var:a> = <var:f> \land <var:v> = <nat:1> \} $ . This is sound with the assignment rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:a> = <var:f> }} <var:I0> := <nat:1> ; <var:v> := <var:I0> {{ <var:v> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:v> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 