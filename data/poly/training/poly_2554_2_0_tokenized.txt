\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:a0> := <nat:8> ; <var:x> := <var:a0> \end{verbatim} Allow --- taking positive integers $ <var:i> $ --- that $ <var:t> = <var:i> $ prior to the evaluation of this series of instructions it follows that $ <var:x> = <nat:8> $ when series of commands is done . \end{theorem} \begin{proof} The flow of logic for this set of commands is demonstrated using Hoare logic . Paying attention to the proceeding step found in our series of instructions , we have \begin{eqnarray} \{ <var:t> = <var:i> \} \, <var:a0> := <nat:8> \, \{ <var:t> = <var:i> \land <var:a0> = <nat:8> \} \end{eqnarray} Moving forward to the next step , we have \begin{eqnarray} \{ <var:t> = <var:i> \} \, <var:a0> := <nat:8> \, \{ <var:t> = <var:i> \land <var:a0> = <nat:8> \} \end{eqnarray} This is shown with the law defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:t> = <var:i> }} <var:a0> := <nat:8> ; <var:x> := <var:a0> {{ <var:x> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:x> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 