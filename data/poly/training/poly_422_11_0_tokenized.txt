\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:2> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:H> ; <var:Z2> := <var:Z2> * <var:H> ; <var:Z3> := <nat:7> ; <var:Z3> := <var:Z3> * <var:H> ; <var:Z3> := <var:Z3> * <var:H> ; <var:Z3> := <var:Z3> * <var:H> ; <var:Y> := <var:Z3> ; <var:Y> := <var:Y> + <var:Z2> ; <var:Y> := <var:Y> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:H> = <var:o> $ , for every $ <var:o> \in \mathbb{N} $ , before executing the series of commands , it must be that we see $ <var:Y> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:2> $ when series of commands has finished . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:H> = <var:o> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \} \\ <var:Z2> := <nat:4> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> \} \\ <var:Z2> := <var:Z2> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> \} \\ <var:Z2> := <var:Z2> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> ^ <nat:2> \} \\ <var:Z3> := <nat:7> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> ^ <nat:2> \land <var:Z3> = <nat:7> \} \\ <var:Z3> := <var:Z3> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> ^ <nat:2> \land <var:Z3> = <nat:7> * <var:o> \} \\ <var:Z3> := <var:Z3> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> ^ <nat:2> \land <var:Z3> = <nat:7> * <var:o> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> ^ <nat:2> \land <var:Z3> = <nat:7> * <var:o> ^ <nat:3> \} \\ <var:Y> := <var:Z3> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:o> ^ <nat:2> \land <var:Y> = <nat:7> * <var:o> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:Z2> ; \\ \{ <var:H> = <var:o> \land <var:Z0> = <nat:2> \land <var:Y> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:Z0> \\ \{ <var:H> = <var:o> \land <var:Y> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> \} \end{eqnarray} Therefore , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:H> ; <var:Z2> := <var:Z2> * <var:H> ; <var:Z3> := <nat:7> ; <var:Z3> := <var:Z3> * <var:H> ; <var:Z3> := <var:Z3> * <var:H> ; <var:Z3> := <var:Z3> * <var:H> ; <var:Y> := <var:Z3> ; <var:Y> := <var:Y> + <var:Z2> ; <var:Y> := <var:Y> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <def:poly> {{ <var:Y> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Z3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Z0> = <nat:2> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 