\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:8> ; <var:O> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assuming , given any natural numbers $ <var:s> $ , it to hold that $ <var:t> = <var:s> $ prior to executing the code then $ <var:O> = <nat:8> $ after series of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare techniques gives : \begin{eqnarray} \{ <var:t> = <var:s> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:t> = <var:s> \land <var:Q0> = <nat:8> \} \\ <var:O> := <var:Q0> \\ \{ <var:t> = <var:s> \land <var:O> = <nat:8> \} \end{eqnarray} Given the above , this list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:O> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <def:poly> {{ <var:O> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:O> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 