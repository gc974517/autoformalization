\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:C> ; <var:c> := <var:n1> ; <var:c> := <var:c> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:C> = <var:d> $ before interpreting this segment of code , it follows that we see $ <var:c> = <nat:8> * <var:d> + <nat:2> $ when list of instructions has exited . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:C> = <var:d> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:C> = <var:d> \land <var:n0> = <nat:2> \} \\ <var:n1> := <nat:8> ; \\ \{ <var:C> = <var:d> \land <var:n0> = <nat:2> \land <var:n1> = <nat:8> \} \\ <var:n1> := <var:n1> * <var:C> ; \\ \{ <var:C> = <var:d> \land <var:n0> = <nat:2> \land <var:n1> = <nat:8> * <var:d> \} \\ <var:c> := <var:n1> ; \\ \{ <var:C> = <var:d> \land <var:n0> = <nat:2> \land <var:c> = <nat:8> * <var:d> \} \\ <var:c> := <var:c> + <var:n0> \\ \{ <var:C> = <var:d> \land <var:c> = <nat:8> * <var:d> + <nat:2> \} \end{eqnarray} Therefore , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n0> := <nat:2> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:C> ; <var:c> := <var:n1> ; <var:c> := <var:c> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:C> = <var:d> }} <def:poly> {{ <var:c> = <nat:8> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:n0> = <nat:2> /\ <var:c> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:c> = <nat:8> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 