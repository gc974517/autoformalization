\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:4> ; <var:y> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Assume that $ <var:B> = <var:l> $ prior to executing this set of commands it must be that we see $ <var:y> = <nat:4> $ once list of instructions is done . \end{theorem} \begin{proof} The proof of our list of commands is accomplished through typical Hoare reasoning . Moving on , we see \verb | { <var:B> = <var:l> } <var:x0> := <nat:4> { <var:B> = <var:l> \land <var:x0> = <nat:4> } | . Advancing on , we see \verb | { <var:B> = <var:l> } <var:x0> := <nat:4> { <var:B> = <var:l> \land <var:x0> = <nat:4> } | . This is sound with the binding rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:y> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:B> = <var:l> }} <def:poly> {{ <var:y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 