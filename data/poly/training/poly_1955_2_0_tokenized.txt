\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:9> ; <var:f> := <var:E0> \end{verbatim} Assuming --- assuming some positive coefficients $ <var:l> $ --- $ <var:z> = <var:l> $ ahead of running this list of instructions , then we have $ <var:f> = <nat:9> $ once code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:l> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:z> = <var:l> \land <var:E0> = <nat:9> \} \\ <var:f> := <var:E0> \\ \{ <var:z> = <var:l> \land <var:f> = <nat:9> \} \end{eqnarray} Using standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:z> = <var:l> }} <var:E0> := <nat:9> ; <var:f> := <var:E0> {{ <var:f> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:f> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 