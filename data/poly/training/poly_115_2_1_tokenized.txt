\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:4> ; <var:F> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Allowing that we have $ <var:j> = <var:O> $ before interpreting the set of instructions , it holds that $ <var:F> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this code segment can be shown by typical Hoare techniques . Advancing to the subsequent line in our list of instructions , we have the binding statement \verb | <var:C0> := <nat:4> ; | . This forwards the precondition $ \{ <var:j> = <var:O> \} $ toward the condition $ \{ <var:j> = <var:O> \land <var:C0> = <nat:4> \} $ . This is shown to be logically sound through the assignment scheme obtained from typical Hoare logic . Moving onward , the assignment command \verb | <var:F> := <var:C0> | . This code advances the condition $ \{ <var:j> = <var:O> \land <var:C0> = <nat:4> \} $ toward the condition $ \{ <var:j> = <var:O> \land <var:F> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:4> ; <var:F> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:j> = <var:O> }} <def:poly> {{ <var:F> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:O> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:O> /\ <var:F> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 