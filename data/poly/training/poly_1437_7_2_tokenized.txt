\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:3> ; <var:t> := <var:t> * <var:g> ; <var:t> := <nat:1> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:1> + <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:g> = <var:F> $ ahead of the evaluation of this set of commands it follows that $ <var:t> = <nat:3> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:4> + <nat:2> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:4> $ when series of commands is done . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:g> = <var:F> \} \\ <var:t> := <nat:3> ; \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \} \\ <var:t> := <var:t> * <var:g> ; \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \cdot <var:F> + \} \\ <var:t> := <nat:1> + <var:t> * <var:g> ; \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \cdot <var:F> ^ <nat:2> + <nat:1> \} \\ <var:t> := <nat:2> + <var:t> * <var:g> ; \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> + <nat:2> \} \\ <var:t> := <nat:2> + <var:t> * <var:g> ; \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:2> \} \\ <var:t> := <nat:1> + <var:t> * <var:g> ; \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:g> \\ \{ <var:g> = <var:F> \land <var:t> = <nat:3> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:4> \} \end{eqnarray} Thusly , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:3> ; <var:t> := <var:t> * <var:g> ; <var:t> := <nat:1> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:1> + <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:g> = <var:F> }} <def:poly> {{ <var:t> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:t> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 