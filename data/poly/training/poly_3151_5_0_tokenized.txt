\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:y> ; <var:q> := <var:G1> ; <var:q> := <var:q> + <var:G0> \end{verbatim} Assume $ <var:y> = <var:E> $ --- for any positive coefficients $ <var:E> $ --- prior to the evaluation of the code , it follows that $ <var:q> = <nat:3> * <var:E> + <nat:3> $ once program has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be given through usual Hoare logic . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:y> = <var:E> \} & <var:G0> := <nat:3> & \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \} \\ \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \} & <var:G1> := <nat:3> & \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \} \end{tabular} Moving forward , \[ \begin{tabular} {rcl} \{ <var:y> = <var:E> \} & <var:G0> := <nat:3> & \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \} \end{tabular} Looking at the next bits of codein our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:E> \} & <var:G0> := <nat:3> & \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \} \\ \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \} & <var:G1> := <nat:3> & \{ <var:y> = <var:E> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \} \end{tabular} This is given by the variable update scheme defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:y> = <var:E> }} <var:G0> := <nat:3> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:y> ; <var:q> := <var:G1> ; <var:q> := <var:q> + <var:G0> {{ <var:q> = <nat:3> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:G0> = <nat:3> /\ <var:q> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:q> = <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 