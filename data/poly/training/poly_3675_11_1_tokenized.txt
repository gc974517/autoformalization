\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:f> ; <var:S2> := <var:S1> * <var:f> ; <var:S3> := <var:S2> * <var:f> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:5> ; <var:g> := <var:S3> <var:g> := <var:g> + <var:S2> <var:g> := <var:g> + <var:S1> <var:g> := <var:g> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> . Assume $ <var:f> = <var:n> $ prior to the execution of this set of instructions then we have $ <var:g> = <nat:5> \times <var:n> ^ <nat:3> + <nat:9> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:4> $ after code segment has executed . \end{theorem} \begin{proof} The method of proof for this code can be shown through usual Hoare logic . Immediately after , the variable binding line \verb | <var:S1> := <var:f> ; | . This moves $ \{ <var:f> = <var:n> \} $ as the postcondition $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \} $ . Next , we have the variable binding line defining $ <var:S1> * <var:f> $ into $ <var:S2>$ . This code redefines the condition $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \} $ to $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \land <var:S2> = <var:n> ^ <nat:2> \} $ . This is deduced using the assignment scheme defined by standard Hoare reasoning . Taking another step toward the proceeding step seen in our series of instructions , we see the variable assignmet command assigning $ <var:S2> * <var:f> $ as $ <var:S3>$ . This command transfers the condition $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \land <var:S2> = <var:n> ^ <nat:2> \} $ to $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \land <var:S2> = <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \} $ . Focusing on the next line seen in our code segment , we see the statement \verb | <var:S0> := <nat:4> ; | . This transfers $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \land <var:S2> = <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \} $ to $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \land <var:S2> = <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ . This is guaranteed using the assignment scheme from standard Hoare reasoning . Advancing on , the binding line assigning $ <var:S1> * <nat:3> $ toward $ <var:S1>$ . This code advances $ \{ <var:f> = <var:n> \land <var:S1> = <var:n> \land <var:S2> = <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ as the condition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ . This is shown to be logically sound by the assignment scheme from Hoare techniques . Following , we see the binding code \verb | <var:S2> := <var:S2> * <nat:9> ; | . This takes $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ as the postcondition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <nat:9> \cdot <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ . Moving on to the next piece of code in our series of commands , the variable binding command \verb | <var:S3> := <var:S3> * <nat:5> ; | . This code redefines $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <nat:9> \cdot <var:n> ^ <nat:2> \land <var:S3> = <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ into the postcondition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <nat:9> \cdot <var:n> ^ <nat:2> \land <var:S3> = <nat:5> \cdot <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ . Advancing to the next command in the segment of code , we have the variable assignmet line assigning $ <var:S3$ toward $ <var:g>$ . This transfers the precondition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <nat:9> \cdot <var:n> ^ <nat:2> \land <var:S3> = <nat:5> \cdot <var:n> ^ <nat:3> \land <var:S0> = <nat:4> \} $ to the postcondition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <nat:9> \cdot <var:n> ^ <nat:2> \land <var:S0> = <nat:4> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> \} $ . This is shown by the assignment rule defined in standard Hoare reasoning . After , we have the variable assignmet statement assigning $ <var:g> + <var:S2$ as $ <var:g>$ . This redefines $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S2> = <nat:9> \cdot <var:n> ^ <nat:2> \land <var:S0> = <nat:4> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> \} $ as the condition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S0> = <nat:4> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:9> \cdot <var:n> ^ <nat:2> \} $ . This is guaranteed by the assignment scheme found in typical Hoare reasoning . Focusing on the proceeding step found in our list of commands , we have the code \verb | <var:g> := <var:g> + <var:S1> | . This moves the condition $ \{ <var:f> = <var:n> \land <var:S1> = <nat:3> \cdot <var:n> \land <var:S0> = <nat:4> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:9> \cdot <var:n> ^ <nat:2> \} $ as $ \{ <var:f> = <var:n> \land <var:S0> = <nat:4> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:9> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> \} $ . Advancing to the next step , we see the binding line defining $ <var:g> + <var:S0$ into $ <var:g>$ . This line takes the precondition $ \{ <var:f> = <var:n> \land <var:S0> = <nat:4> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:9> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> \} $ as $ \{ <var:f> = <var:n> \land <var:g> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:9> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:4> \} $ . This is guaranteed by the assignment inference rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S1> := <var:f> ; <var:S2> := <var:S1> * <var:f> ; <var:S3> := <var:S2> * <var:f> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:5> ; <var:g> := <var:S3> <var:g> := <var:g> + <var:S2> <var:g> := <var:g> + <var:S1> <var:g> := <var:g> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:f> = <var:n> }} <def:poly> {{ <var:g> = <nat:5> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <var:n> /\ <var:S2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <var:n> /\ <var:S2> = <var:n> ^ <nat:2> /\ <var:S3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <var:n> /\ <var:S2> = <var:n> ^ <nat:2> /\ <var:S3> = <var:n> ^ <nat:3> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <nat:3> * <var:n> /\ <var:S2> = <var:n> ^ <nat:2> /\ <var:S3> = <var:n> ^ <nat:3> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <nat:3> * <var:n> /\ <var:S2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:S3> = <var:n> ^ <nat:3> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <nat:3> * <var:n> /\ <var:S2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:n> ^ <nat:3> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <nat:3> * <var:n> /\ <var:S2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:5> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S1> = <nat:3> * <var:n> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:5> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:5> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:g> = <nat:5> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 