\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:z> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:2> ; <var:I> := <var:N1> <var:I> := <var:I> + <var:N0> \end{verbatim} Assuming $ <var:z> = <var:B> $ ( for $ <var:B> $ ) ahead of running the set of commands , it holds that we see $ <var:I> = <nat:2> \cdot <var:B> + <nat:1> $ once list of instructions has finished . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:z> = <var:B> \} \\ <var:N1> := <var:z> ; \\ \{ <var:z> = <var:B> \land <var:N1> = <var:B> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:z> = <var:B> \land <var:N1> = <var:B> \land <var:N0> = <nat:1> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:z> = <var:B> \land <var:N1> = <nat:2> \times <var:B> \land <var:N0> = <nat:1> \} \\ <var:I> := <var:N1> \\ \{ <var:z> = <var:B> \land <var:N0> = <nat:1> \land <var:I> = <nat:2> \times <var:B> \} \\ <var:I> := <var:I> + <var:N0> \\ \{ <var:z> = <var:B> \land <var:I> = <nat:2> \times <var:B> + <nat:1> \} \end{eqnarray} Hence , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:z> = <var:B> }} <var:N1> := <var:z> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:2> ; <var:I> := <var:N1> <var:I> := <var:I> + <var:N0> {{ <var:I> = <nat:2> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:N1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:N1> = <var:B> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:N1> = <nat:2> * <var:B> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:N0> = <nat:1> /\ <var:I> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 