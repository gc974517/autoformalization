\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:d> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:2> ; <var:e> := <var:q1> <var:e> := <var:e> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:d> = <var:i> $ , for any positive integer coefficients $ <var:i> $ , ahead of the evaluation of this series of instructions it follows that we see $ <var:e> = <nat:2> \times <var:i> + <nat:8> $ when code segment finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:i> \} \\ <var:q1> := <var:d> ; \\ \{ <var:d> = <var:i> \land <var:q1> = <var:i> \} \\ <var:q0> := <nat:8> ; \\ \{ <var:d> = <var:i> \land <var:q1> = <var:i> \land <var:q0> = <nat:8> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:d> = <var:i> \land <var:q1> = <nat:2> * <var:i> \land <var:q0> = <nat:8> \} \\ <var:e> := <var:q1> \\ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:e> = <nat:2> * <var:i> \} \\ <var:e> := <var:e> + <var:q0> \\ \{ <var:d> = <var:i> \land <var:e> = <nat:2> * <var:i> + <nat:8> \} \end{eqnarray} Using Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:d> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:2> ; <var:e> := <var:q1> <var:e> := <var:e> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:d> = <var:i> }} <def:poly> {{ <var:e> = <nat:2> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q1> = <var:i> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q1> = <nat:2> * <var:i> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:e> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:e> = <nat:2> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 