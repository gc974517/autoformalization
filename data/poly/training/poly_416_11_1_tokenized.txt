\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:q> ; <var:S2> := <var:S1> * <var:q> ; <var:S3> := <var:S2> * <var:q> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:8> ; <var:S3> := <var:S3> * <nat:8> ; <var:a> := <var:S3> <var:a> := <var:a> + <var:S2> <var:a> := <var:a> + <var:S1> <var:a> := <var:a> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:q> = <var:Y> $ prior to evaluating our series of instructions , then $ <var:a> = <nat:8> \times <var:Y> ^ <nat:3> + <nat:8> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:7> $ once code segment has finished . \end{theorem} \begin{proof} The proof of this code segment can be given through standard Hoare reasoning . Observing the proceeding lines in our code , we see \verb | { <var:q> = <var:Y> } <var:S1> := <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> } | , \verb | { <var:q> = <var:Y> \land <var:S1> = <var:Y> } <var:S2> := <var:S1> * <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> } | and \verb | { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> } <var:S3> := <var:S2> * <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> } | . This is guaranteed with the binding law given by usual Hoare reasoning . Moving forward , we see \verb | { <var:q> = <var:Y> } <var:S1> := <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> } | , \verb | { <var:q> = <var:Y> \land <var:S1> = <var:Y> } <var:S2> := <var:S1> * <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> } | , \verb | { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> } <var:S3> := <var:S2> * <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> } | , \verb | { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> } <var:S0> := <nat:7> { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } | , \verb | { <var:q> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } <var:S1> := <var:S1> * <nat:3> { <var:q> = <var:Y> \land <var:S1> = <nat:3> \times <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } | , \verb | { <var:q> = <var:Y> \land <var:S1> = <nat:3> \times <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } <var:S2> := <var:S2> * <nat:8> { <var:q> = <var:Y> \land <var:S1> = <nat:3> \times <var:Y> \land <var:S2> = <nat:8> \times <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } | and \verb | { <var:q> = <var:Y> \land <var:S1> = <nat:3> \times <var:Y> \land <var:S2> = <nat:8> \times <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } <var:S3> := <var:S3> * <nat:8> { <var:q> = <var:Y> \land <var:S1> = <nat:3> \times <var:Y> \land <var:S2> = <nat:8> \times <var:Y> ^ <nat:2> \land <var:S3> = <nat:8> \times <var:Y> ^ <nat:3> \land <var:S0> = <nat:7> } | . Immediately after , \verb | { <var:q> = <var:Y> } <var:S1> := <var:q> { <var:q> = <var:Y> \land <var:S1> = <var:Y> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S1> := <var:q> ; <var:S2> := <var:S1> * <var:q> ; <var:S3> := <var:S2> * <var:q> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:8> ; <var:S3> := <var:S3> * <nat:8> ; <var:a> := <var:S3> <var:a> := <var:a> + <var:S2> <var:a> := <var:a> + <var:S1> <var:a> := <var:a> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <def:poly> {{ <var:a> = <nat:8> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <nat:3> * <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <nat:3> * <var:Y> /\ <var:S2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <nat:3> * <var:Y> /\ <var:S2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:Y> ^ <nat:3> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <nat:3> * <var:Y> /\ <var:S2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:S0> = <nat:7> /\ <var:a> = <nat:8> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S1> = <nat:3> * <var:Y> /\ <var:S0> = <nat:7> /\ <var:a> = <nat:8> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:S0> = <nat:7> /\ <var:a> = <nat:8> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:a> = <nat:8> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 