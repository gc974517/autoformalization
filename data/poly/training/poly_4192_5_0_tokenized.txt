\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:p> ; <var:T> := <var:Q1> ; <var:T> := <var:T> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Given $ <var:p> = <var:m> $ letting positive coefficients $ <var:m> $ ahead of evaluating our series of instructions it must be that we have $ <var:T> = <nat:2> \times <var:m> + <nat:1> $ when series of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is demonstrated by Hoare logic . Honing in on the subsequent pieces of code in our set of instructions , \begin{eqnarray} \{ <var:p> = <var:m> \} \, <var:Q0> := <nat:1> \, \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \} \\ \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \} \, <var:Q1> := <nat:2> \, \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:2> \} \end{eqnarray} This is given with the variable assignmet law defined by standard Hoare logic . Taking a look at the subsequent lines found in the code segment , we have \begin{eqnarray} \{ <var:p> = <var:m> \} \, <var:Q0> := <nat:1> \, \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \} \\ \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \} \, <var:Q1> := <nat:2> \, \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:2> \} \end{eqnarray} This is deduced through the variable update law found in usual Hoare reasoning . Immediately following , we see \begin{eqnarray} \{ <var:p> = <var:m> \} \, <var:Q0> := <nat:1> \, \{ <var:p> = <var:m> \land <var:Q0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:p> ; <var:T> := <var:Q1> ; <var:T> := <var:T> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:p> = <var:m> }} <def:poly> {{ <var:T> = <nat:2> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Q0> = <nat:1> /\ <var:T> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:T> = <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 