\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <nat:4> + <var:s> * <var:b> ; <var:s> := <nat:4> + <var:s> * <var:b> ; <var:s> := <nat:2> + <var:s> * <var:b> ; <var:s> := <nat:3> + <var:s> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:b> = <var:g> $ --- given all $ <var:g> \in \mathbb{N} $ --- prior to the execution of the code segment it must be that $ <var:s> = <nat:1> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> $ after code segment has terminated . \end{theorem} \begin{proof} Proving correctness for this code is clear through Hoare reasoning . Moving forward to the next step , we have \begin{verbatim} { <var:b> = <var:g> } <var:s> := <nat:1> { <var:b> = <var:g> \land <var:s> = <nat:1> } { <var:b> = <var:g> \land <var:s> = <nat:1> } <var:s> := <nat:4> + <var:s> * <var:b> { <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> + <nat:4> } { <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> + <nat:4> } <var:s> := <nat:4> + <var:s> * <var:b> { <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> } { <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> } <var:s> := <nat:2> + <var:s> * <var:b> { <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> } { <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> } <var:s> := <nat:3> + <var:s> * <var:b{ <var:b> = <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:1> ; <var:s> := <nat:4> + <var:s> * <var:b> ; <var:s> := <nat:4> + <var:s> * <var:b> ; <var:s> := <nat:2> + <var:s> * <var:b> ; <var:s> := <nat:3> + <var:s> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:b> = <var:g> }} <def:poly> {{ <var:s> = <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:s> = <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:s> = <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:s> = <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 