\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:q0> := <nat:5> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:J> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:J> ; <var:q2> := <var:q2> * <var:J> ; <var:M> := <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> \end{verbatim} Allow that $ <var:J> = <var:G> $ ahead of running the series of commands it holds that we see $ <var:M> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:5> $ after set of commands has exited . \end{theorem} \begin{proof} The method of proof for the list of commands can be given with usual Hoare reasoning . Taking a look at the next line of code seen in our series of commands , we have the command assigning $ <nat:5> $ to $ <var:q0>$ . This transfers $ \{ <var:J> = <var:G> \} $ into $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \} $ . Immediately following , we see the variable binding command \verb | <var:q1> := <nat:3> ; | . This forwards the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \} $ to the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \} $ . This is deduced using the assignment scheme found in standard Hoare reasoning . Looking at the following line in our set of commands , we see the assignment command \verb | <var:q1> := <var:q1> * <var:J> ; | . This forwards the precondition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \} $ into the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \} $ . After , we see the code binding $ <nat:4> $ into $ <var:q2>$ . This statement transfers the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \} $ toward $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:q2> = <nat:4> \} $ . This is shown to be logically sound by the assignment inference rule in Hoare reasoning . Moving onward , the statement \verb | <var:q2> := <var:q2> * <var:J> ; | . This advances the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:q2> = <nat:4> \} $ into the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:q2> = <nat:4> * <var:G> \} $ . Moving on , the binding command \verb | <var:q2> := <var:q2> * <var:J> ; | . This command takes the condition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:q2> = <nat:4> * <var:G> \} $ to $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:q2> = <nat:4> * <var:G> ^ <nat:2> \} $ . This is shown with the assignment law given in standard Hoare reasoning . Taking another step toward the subsequent line contained in our program , the binding line binding $ <var:q2> $ toward $ <var:M>$ . This forwards the precondition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:q2> = <nat:4> * <var:G> ^ <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:M> = <nat:4> * <var:G> ^ <nat:2> \} $ . Following , we have the assignment line giving $ <var:M> + <var:q1> $ into $ <var:M>$ . This command moves the precondition $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> * <var:G> \land <var:M> = <nat:4> * <var:G> ^ <nat:2> \} $ to $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:M> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> \} $ . This is ensured by the assignment scheme defined in typical Hoare logic . Advancing to the following command seen in our code , the environment update code \verb | <var:M> := <var:M> + <var:q0> | . This statement advances $ \{ <var:J> = <var:G> \land <var:q0> = <nat:5> \land <var:M> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> \} $ into the condition $ \{ <var:J> = <var:G> \land <var:M> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:J> = <var:G> }} <var:q0> := <nat:5> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:J> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:J> ; <var:q2> := <var:q2> * <var:J> ; <var:M> := <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> {{ <var:M> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:G> /\ <var:q2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:G> /\ <var:q2> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:G> /\ <var:q2> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:G> /\ <var:M> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:q0> = <nat:5> /\ <var:M> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:M> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 