\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:1> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Allow it to be that $ <var:y> = <var:b> $ ahead of the evaluation of our set of instructions , it holds that we have $ <var:O> = <nat:3> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:y> = <var:b> \} \\ <var:O> := <nat:3> ; \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \} \\ <var:O> := <nat:3> + <var:O> * <var:y> ; \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \times <var:b> + <nat:3> \} \\ <var:O> := <nat:3> + <var:O> * <var:y> ; \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:3> \} \\ <var:O> := <nat:1> + <var:O> * <var:y> ; \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:1> \} \\ <var:O> := <nat:3> + <var:O> * <var:y> ; \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \times <var:b> ^ <nat:4> + <nat:3> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:3> \} \\ <var:O> := <nat:3> + <var:O> * <var:y> ; \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \times <var:b> ^ <nat:5> + <nat:3> \times <var:b> ^ <nat:4> + <nat:3> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:3> \} \\ <var:O> := <nat:2> + <var:O> * <var:y> \\ \{ <var:y> = <var:b> \land <var:O> = <nat:3> \times <var:b> ^ <nat:6> + <nat:3> \times <var:b> ^ <nat:5> + <nat:3> \times <var:b> ^ <nat:4> + <nat:1> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:2> \} \end{eqnarray} Given the above , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:1> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:y> = <var:b> }} <def:poly> {{ <var:O> = <nat:3> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:O> = <nat:3> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 