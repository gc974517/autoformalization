\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:3> ; <var:v> := <var:n0> \end{verbatim} Given it to hold that $ <var:X> = <var:h> $ ( letting positive coefficients $ <var:h> $ ) prior to running this set of instructions it must be that $ <var:v> = <nat:3> $ . \end{theorem} \begin{proof} The argument for this code segment is shown through standard Hoare techniques . Moving on to the proceeding command seen in our list of commands , \begin{eqnarray} \{ <var:X> = <var:h> \} \, <var:n0> := <nat:3> \, \{ <var:X> = <var:h> \land <var:n0> = <nat:3> \} \end{eqnarray} This is deduced using the variable assignmet rule obtained from Hoare reasoning . Next , we have \begin{eqnarray} \{ <var:X> = <var:h> \} \, <var:n0> := <nat:3> \, \{ <var:X> = <var:h> \land <var:n0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:X> = <var:h> }} <var:n0> := <nat:3> ; <var:v> := <var:n0> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 