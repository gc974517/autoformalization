\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:1> ; <var:r> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:t> = <var:Z> $ ahead of the evaluation of the series of instructions then we have $ <var:r> = <nat:1> $ once set of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands is evident using usual Hoare logic . Focusing on the next line contained in the code , we see the variable update statement yielding $ <nat:1> $ as $ <var:n0>$ . This takes the precondition $ \{ <var:t> = <var:Z> \} $ as $ \{ <var:t> = <var:Z> \land <var:n0> = <nat:1> \} $ . Advancing , we see the binding code \verb | <var:r> := <var:n0> | . This advances the precondition $ \{ <var:t> = <var:Z> \land <var:n0> = <nat:1> \} $ toward $ \{ <var:t> = <var:Z> \land <var:r> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:r> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:t> = <var:Z> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 