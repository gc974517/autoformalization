\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:A1> := <var:M> ; <var:A2> := <var:A1> * <var:M> ; <var:A3> := <var:A2> * <var:M> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:4> ; <var:a> := <var:A3> <var:a> := <var:a> + <var:A2> <var:a> := <var:a> + <var:A1> <var:a> := <var:a> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:M> = <var:d> $ , assuming some $ <var:d> \in \mathbb{N} $ , ahead of the execution of this series of instructions , it holds that we see $ <var:a> = <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our program is shown with usual Hoare techniques . Taking a look at the proceeding statements in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:M> = <var:d> \} & <var:A1> := <var:M> & \{ <var:M> = <var:d> \land <var:A1> = <var:d> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <var:d> \} & <var:A2> := <var:A1> * <var:M> & \{ <var:M> = <var:d> \land <var:A1> = <var:d> \land <var:A2> = <var:d> ^ <nat:2> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <var:d> \land <var:A2> = <var:d> ^ <nat:2> \} & <var:A3> := <var:A2> * <var:M> & \{ <var:M> = <var:d> \land <var:A1> = <var:d> \land <var:A2> = <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <var:d> \land <var:A2> = <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \} & <var:A0> := <nat:7> & \{ <var:M> = <var:d> \land <var:A1> = <var:d> \land <var:A2> = <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <var:d> \land <var:A2> = <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} & <var:A1> := <var:A1> * <nat:1> & \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} & <var:A2> := <var:A2> * <nat:1> & \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <nat:1> \times <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <nat:1> \times <var:d> ^ <nat:2> \land <var:A3> = <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} & <var:A3> := <var:A3> * <nat:4> & \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <nat:1> \times <var:d> ^ <nat:2> \land <var:A3> = <nat:4> \times <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <nat:1> \times <var:d> ^ <nat:2> \land <var:A3> = <nat:4> \times <var:d> ^ <nat:3> \land <var:A0> = <nat:7> \} & <var:a> := <var:A3& \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <nat:1> \times <var:d> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:a> = <nat:4> \times <var:d> ^ <nat:3> \} \\ \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A2> = <nat:1> \times <var:d> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:a> = <nat:4> \times <var:d> ^ <nat:3> \} & <var:a> := <var:a> + <var:A2& \{ <var:M> = <var:d> \land <var:A1> = <nat:1> \times <var:d> \land <var:A0> = <nat:7> \land <var:a> = <nat:4> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> \} \end{tabular} This is known to be sound with the law given in standard Hoare logic . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:d> \} & <var:A1> := <var:M> & \{ <var:M> = <var:d> \land <var:A1> = <var:d> \} \end{tabular} This is given by the environment update inference rule defined by typical Hoare logic . Immediately following , \[ \begin{tabular} {rcl} \{ <var:M> = <var:d> \} & <var:A1> := <var:M> & \{ <var:M> = <var:d> \land <var:A1> = <var:d> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:M> ; <var:A2> := <var:A1> * <var:M> ; <var:A3> := <var:A2> * <var:M> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:4> ; <var:a> := <var:A3> <var:a> := <var:a> + <var:A2> <var:a> := <var:a> + <var:A1> <var:a> := <var:a> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:M> = <var:d> }} <def:poly> {{ <var:a> = <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <var:d> /\ <var:A2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <var:d> /\ <var:A2> = <var:d> ^ <nat:2> /\ <var:A3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <var:d> /\ <var:A2> = <var:d> ^ <nat:2> /\ <var:A3> = <var:d> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <nat:1> * <var:d> /\ <var:A2> = <var:d> ^ <nat:2> /\ <var:A3> = <var:d> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <nat:1> * <var:d> /\ <var:A2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:A3> = <var:d> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <nat:1> * <var:d> /\ <var:A2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:A3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <nat:1> * <var:d> /\ <var:A2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:A0> = <nat:7> /\ <var:a> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A1> = <nat:1> * <var:d> /\ <var:A0> = <nat:7> /\ <var:a> = <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:A0> = <nat:7> /\ <var:a> = <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 