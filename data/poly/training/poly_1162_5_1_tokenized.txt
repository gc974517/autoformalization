\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:o> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:O> := <var:Q1> <var:O> := <var:O> + <var:Q0> \end{verbatim} Assume it to hold that $ <var:o> = <var:w> $ ( for some positive integer coefficients $ <var:w> $ ) before the evaluation of the series of instructions , it must be that we see $ <var:O> = <nat:5> \cdot <var:w> + <nat:1> $ after code has exited . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:Q1> := <var:o> ; \\ \{ <var:o> = <var:w> \land <var:Q1> = <var:w> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:o> = <var:w> \land <var:Q1> = <var:w> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <nat:5> ; \\ \{ <var:o> = <var:w> \land <var:Q1> = <nat:5> * <var:w> \land <var:Q0> = <nat:1> \} \\ <var:O> := <var:Q1> \\ \{ <var:o> = <var:w> \land <var:Q0> = <nat:1> \land <var:O> = <nat:5> * <var:w> \} \\ <var:O> := <var:O> + <var:Q0> \\ \{ <var:o> = <var:w> \land <var:O> = <nat:5> * <var:w> + <nat:1> \} \end{eqnarray} As a consequence , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <var:Q1> := <var:o> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:O> := <var:Q1> <var:O> := <var:O> + <var:Q0> {{ <var:O> = <nat:5> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:Q1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:Q1> = <var:w> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:Q1> = <nat:5> * <var:w> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:Q0> = <nat:1> /\ <var:O> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:O> = <nat:5> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 