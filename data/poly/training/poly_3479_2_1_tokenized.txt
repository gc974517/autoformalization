\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:9> ; <var:g> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allowing it to be that $ <var:W> = <var:V> $ --- for natural numbers $ <var:V> $ --- ahead of executing this code , it must be that we have $ <var:g> = <nat:9> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:W> = <var:V> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:W> = <var:V> \land <var:E0> = <nat:9> \} \\ <var:g> := <var:E0> \\ \{ <var:W> = <var:V> \land <var:g> = <nat:9> \} \end{eqnarray} As a consequence , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:9> ; <var:g> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <def:poly> {{ <var:g> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:g> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 