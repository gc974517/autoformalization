\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:J> ; <var:s> := <var:G1> ; <var:s> := <var:s> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:J> = <var:L> $ prior to interpreting our series of commands , it holds that we see $ <var:s> = <nat:3> \cdot <var:L> + <nat:8> $ . \end{theorem} \begin{proof} The argument for this segment of code can be demonstrated by standard Hoare techniques . Observing the following command in our code , we see the assignment command \verb | <var:G0> := <nat:8> ; | . This redefines the precondition $ \{ <var:J> = <var:L> \} $ toward the postcondition $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \} $ . Stepping forward , we have the variable binding line defining $ <nat:3> $ toward $ <var:G1>$ . This takes the precondition $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \} $ . Shifting focus toward the proceeding step seen in our series of commands , we have the assignment statement \verb | <var:G1> := <var:G1> * <var:J> ; | . This redefines the precondition $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \} $ into $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:L> \} $ . Paying attention to the upcoming line found in the code segment , we have the variable assignmet statement \verb | <var:s> := <var:G1> ; | . This takes the condition $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:L> \} $ into $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \land <var:s> = <nat:3> \times <var:L> \} $ . Jumping to the subsequent command contained in the segment of code , we have the command giving $ <var:s> + <var:G0$ into $ <var:s>$ . This transfers $ \{ <var:J> = <var:L> \land <var:G0> = <nat:8> \land <var:s> = <nat:3> \times <var:L> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:s> = <nat:3> \times <var:L> + <nat:8> \} $ . This is shown to be logically sound by the assignment scheme given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:J> ; <var:s> := <var:G1> ; <var:s> := <var:s> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:J> = <var:L> }} <def:poly> {{ <var:s> = <nat:3> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:G0> = <nat:8> /\ <var:s> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:s> = <nat:3> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 