\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:9> ; <var:L> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Given that we have $ <var:y> = <var:K> $ before the evaluation of this program it must be that we have $ <var:L> = <nat:9> $ when list of instructions has exited . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:y> = <var:K> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:y> = <var:K> \land <var:k0> = <nat:9> \} \\ <var:L> := <var:k0> \\ \{ <var:y> = <var:K> \land <var:L> = <nat:9> \} \end{eqnarray} Therefore , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:9> ; <var:L> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:y> = <var:K> }} <def:poly> {{ <var:L> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:L> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 