\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:F> ; <var:f2> := <var:f1> * <var:F> ; <var:f3> := <var:f2> * <var:F> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:8> ; <var:m> := <var:f3> <var:m> := <var:m> + <var:f2> <var:m> := <var:m> + <var:f1> <var:m> := <var:m> + <var:f0> \end{verbatim} Allow --- given positive numbers $ <var:I> $ --- that we have $ <var:F> = <var:I> $ before evaluating our list of instructions , it must be that $ <var:m> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:3> $ . \end{theorem} \begin{proof} Note that the following decorated series of instructions . \begin{eqnarray} \{ <var:F> = <var:I> \} \\ <var:f1> := <var:F> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <var:I> \} \\ <var:f2> := <var:f1> * <var:F> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <var:I> \land <var:f2> = <var:I> ^ <nat:2> \} \end{eqnarray} Advancing evaluating this code segment produces : \begin{eqnarray} <var:f3> := <var:f2> * <var:F> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <var:I> \land <var:f2> = <var:I> ^ <nat:2> \land <var:f3> = <var:I> ^ <nat:3> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <var:I> \land <var:f2> = <var:I> ^ <nat:2> \land <var:f3> = <var:I> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f1> := <var:f1> * <nat:5> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <nat:5> \cdot <var:I> \land <var:f2> = <var:I> ^ <nat:2> \land <var:f3> = <var:I> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f2> := <var:f2> * <nat:4> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <nat:5> \cdot <var:I> \land <var:f2> = <nat:4> \cdot <var:I> ^ <nat:2> \land <var:f3> = <var:I> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f3> := <var:f3> * <nat:8> ; \\ \{ <var:F> = <var:I> \land <var:f1> = <nat:5> \cdot <var:I> \land <var:f2> = <nat:4> \cdot <var:I> ^ <nat:2> \land <var:f3> = <nat:8> \cdot <var:I> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:m> := <var:f3> \\ \{ <var:F> = <var:I> \land <var:f1> = <nat:5> \cdot <var:I> \land <var:f2> = <nat:4> \cdot <var:I> ^ <nat:2> \land <var:f0> = <nat:3> \land <var:m> = <nat:8> \cdot <var:I> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:f2> \\ \{ <var:F> = <var:I> \land <var:f1> = <nat:5> \cdot <var:I> \land <var:f0> = <nat:3> \land <var:m> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:f1> \\ \{ <var:F> = <var:I> \land <var:f0> = <nat:3> \land <var:m> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> \} \\ <var:m> := <var:m> + <var:f0> \\ \{ <var:F> = <var:I> \land <var:m> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:3> \} \end{eqnarray} The application of typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:F> = <var:I> }} <var:f1> := <var:F> ; <var:f2> := <var:f1> * <var:F> ; <var:f3> := <var:f2> * <var:F> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:8> ; <var:m> := <var:f3> <var:m> := <var:m> + <var:f2> <var:m> := <var:m> + <var:f1> <var:m> := <var:m> + <var:f0> {{ <var:m> = <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <var:I> /\ <var:f2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <var:I> /\ <var:f2> = <var:I> ^ <nat:2> /\ <var:f3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <var:I> /\ <var:f2> = <var:I> ^ <nat:2> /\ <var:f3> = <var:I> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <nat:5> * <var:I> /\ <var:f2> = <var:I> ^ <nat:2> /\ <var:f3> = <var:I> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <nat:5> * <var:I> /\ <var:f2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:f3> = <var:I> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <nat:5> * <var:I> /\ <var:f2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:f3> = <nat:8> * <var:I> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <nat:5> * <var:I> /\ <var:f2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:f0> = <nat:3> /\ <var:m> = <nat:8> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f1> = <nat:5> * <var:I> /\ <var:f0> = <nat:3> /\ <var:m> = <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:f0> = <nat:3> /\ <var:m> = <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:m> = <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 