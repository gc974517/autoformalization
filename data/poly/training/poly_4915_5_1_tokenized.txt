\begin{document} \begin{theorem} Define the following set of commands : \begin{verbatim} <var:B1> := <var:U> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:2> ; <var:X> := <var:B1> <var:X> := <var:X> + <var:B0> \end{verbatim} Allowing that we have $ <var:U> = <var:M> $ ahead of evaluating this segment of code , it follows that we see $ <var:X> = <nat:2> \times <var:M> + <nat:8> $ when set of commands has finished . \end{theorem} \begin{proof} The proof of this segment of code can be given by usual Hoare logic . Now , we see the variable binding line giving $ <var:U> $ toward $ <var:B1>$ . This code moves the precondition $ \{ <var:U> = <var:M> \} $ into the postcondition $ \{ <var:U> = <var:M> \land <var:B1> = <var:M> \} $ . This is guaranteed using the assignment rule in usual Hoare techniques . Moving forward to the upcoming line in the list of instructions , the assignment code \verb | <var:B0> := <nat:8> ; | . This transfers $ \{ <var:U> = <var:M> \land <var:B1> = <var:M> \} $ as the condition $ \{ <var:U> = <var:M> \land <var:B1> = <var:M> \land <var:B0> = <nat:8> \} $ . This is shown by the assignment inference rule obtained from standard Hoare techniques . Immediately after , the variable update command giving $ <var:B1> * <nat:2> $ as $ <var:B1>$ . This line advances the condition $ \{ <var:U> = <var:M> \land <var:B1> = <var:M> \land <var:B0> = <nat:8> \} $ into the postcondition $ \{ <var:U> = <var:M> \land <var:B1> = <nat:2> \cdot <var:M> \land <var:B0> = <nat:8> \} $ . This is sound through the assignment inference rule given in typical Hoare techniques . Advancing to the upcoming command seen in the set of commands , the environment update line giving $ <var:B1$ toward $ <var:X>$ . This statement takes the precondition $ \{ <var:U> = <var:M> \land <var:B1> = <nat:2> \cdot <var:M> \land <var:B0> = <nat:8> \} $ to the condition $ \{ <var:U> = <var:M> \land <var:B0> = <nat:8> \land <var:X> = <nat:2> \cdot <var:M> \} $ . Looking at the next command contained in the list of commands , the environment update code giving $ <var:X> + <var:B0$ toward $ <var:X>$ . This statement transfers the condition $ \{ <var:U> = <var:M> \land <var:B0> = <nat:8> \land <var:X> = <nat:2> \cdot <var:M> \} $ to $ \{ <var:U> = <var:M> \land <var:X> = <nat:2> \cdot <var:M> + <nat:8> \} $ . This is ensured through the assignment inference rule in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:U> = <var:M> }} <var:B1> := <var:U> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:2> ; <var:X> := <var:B1> <var:X> := <var:X> + <var:B0> {{ <var:X> = <nat:2> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:B1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:B1> = <var:M> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:B1> = <nat:2> * <var:M> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:B0> = <nat:8> /\ <var:X> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:X> = <nat:2> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 