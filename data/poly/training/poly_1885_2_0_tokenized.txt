\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:5> ; <var:p> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:m> = <var:Z> $ prior to the evaluation of the series of instructions it holds that we see $ <var:p> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:Z> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:m> = <var:Z> \land <var:f0> = <nat:5> \} \\ <var:p> := <var:f0> \\ \{ <var:m> = <var:Z> \land <var:p> = <nat:5> \} \end{eqnarray} Applying standard Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:5> ; <var:p> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:m> = <var:Z> }} <def:poly> {{ <var:p> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:p> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 