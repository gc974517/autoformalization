\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:h> ; <var:s2> := <nat:4> ; <var:s2> := <var:s2> * <var:h> ; <var:s2> := <var:s2> * <var:h> ; <var:D> := <var:s2> ; <var:D> := <var:D> + <var:s1> ; <var:D> := <var:D> + <var:s0> \end{verbatim} Allowing for all natural coefficients $ <var:g> $ that $ <var:h> = <var:g> $ prior to interpreting this segment of code it follows that we have $ <var:D> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> + <nat:3> $ once set of commands is done executing . \end{theorem} \begin{proof} The proof of the program can be accomplished with standard Hoare techniques . Moving on to the next step , the variable binding command binding $ <nat:3> $ to $ <var:s0>$ . This transfers $ \{ <var:h> = <var:g> \} $ to the postcondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \} $ . After , we see the assignment command defining $ <nat:1> $ to $ <var:s1>$ . This statement transfers the precondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \} $ . This is guaranteed through the assignment rule in Hoare techniques . Considering the following line contained in the program , we see the binding code \verb | <var:s1> := <var:s1> * <var:h> ; | . This takes the precondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \} $ as the condition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \} $ . This is sound through the assignment rule in standard Hoare logic . Looking at the following piece of code found in the list of instructions , the variable assignmet line assigning $ <nat:4> $ into $ <var:s2>$ . This redefines $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \} $ to $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:4> \} $ . Moving forward to the next statement contained in the set of instructions , we see the command binding $ <var:s2> * <var:h> $ as $ <var:s2>$ . This command advances $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:4> \} $ into the condition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:4> \cdot <var:g> \} $ . This is guaranteed through the assignment rule in typical Hoare reasoning . Advancing to the next step , we have the variable binding command assigning $ <var:s2> * <var:h> $ to $ <var:s2>$ . This command moves the precondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:4> \cdot <var:g> \} $ toward the postcondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:4> \cdot <var:g> ^ <nat:2> \} $ . This is ensured with the assignment inference rule given in standard Hoare logic . Moving forward to the subsequent piece of code in the list of commands , the variable assignmet command \verb | <var:D> := <var:s2> ; | . This statement moves the condition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:4> \cdot <var:g> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:D> = <nat:4> \cdot <var:g> ^ <nat:2> \} $ . This is known to be sound using the assignment law obtained from standard Hoare logic . Further , we see the environment update code \verb | <var:D> := <var:D> + <var:s1> ; | . This takes the condition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:D> = <nat:4> \cdot <var:g> ^ <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:D> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> \} $ . This is given using the assignment law of usual Hoare reasoning . Moving on to the following line contained in our segment of code , we see the binding command \verb | <var:D> := <var:D> + <var:s0> | . This command takes $ \{ <var:h> = <var:g> \land <var:s0> = <nat:3> \land <var:D> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> \} $ toward the postcondition $ \{ <var:h> = <var:g> \land <var:D> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> + <nat:3> \} $ . This is shown with the assignment rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <var:s0> := <nat:3> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:h> ; <var:s2> := <nat:4> ; <var:s2> := <var:s2> * <var:h> ; <var:s2> := <var:s2> * <var:h> ; <var:D> := <var:s2> ; <var:D> := <var:D> + <var:s1> ; <var:D> := <var:D> + <var:s0> {{ <var:D> = <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:1> * <var:g> /\ <var:D> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:3> /\ <var:D> = <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:D> = <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 