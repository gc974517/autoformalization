\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:4> ; <var:D> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Assuming $ <var:I> = <var:T> $ --- given any $ <var:T> \in \mathbb{N} $ --- prior to executing the segment of code it must be that we have $ <var:D> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:T> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:I> = <var:T> \land <var:s0> = <nat:4> \} \\ <var:D> := <var:s0> \\ \{ <var:I> = <var:T> \land <var:D> = <nat:4> \} \end{eqnarray} The application of standard Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:D> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:I> = <var:T> }} <def:poly> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 