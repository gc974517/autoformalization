\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:7> ; <var:m> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:s> = <var:O> $ prior to the evaluation of the code segment it follows that we see $ <var:m> = <nat:7> $ after series of commands executes . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be accomplished through typical Hoare reasoning . Moving forward to the proceeding statement found in the segment of code , the line \verb | <var:U0> := <nat:7> ; | . This redefines the precondition $ \{ <var:s> = <var:O> \} $ toward the condition $ \{ <var:s> = <var:O> \land <var:U0> = <nat:7> \} $ . This is ensured by the assignment law defined in usual Hoare logic . Focusing on the subsequent line seen in our set of instructions , the variable binding statement \verb | <var:m> := <var:U0> | . This statement takes the precondition $ \{ <var:s> = <var:O> \land <var:U0> = <nat:7> \} $ to $ \{ <var:s> = <var:O> \land <var:m> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:7> ; <var:m> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:s> = <var:O> }} <def:poly> {{ <var:m> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:m> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 