\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:t> ; <var:D2> := <var:D1> * <var:t> ; <var:D3> := <var:D2> * <var:t> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:8> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:6> ; <var:E> := <var:D3> <var:E> := <var:E> + <var:D2> <var:E> := <var:E> + <var:D1> <var:E> := <var:E> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Given it to be that $ <var:t> = <var:L> $ , for any whole numbers $ <var:L> $ , prior to executing our list of commands then we have $ <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be given with Hoare techniques . Keeping momentum , we have the variable assignmet command \verb | <var:D1> := <var:t> ; | . This moves the condition $ \{ <var:t> = <var:L> \} $ as the postcondition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \} $ . This is ensured through the assignment rule of Hoare techniques . Moving forward to the next step , we see the variable binding code \verb | <var:D2> := <var:D1> * <var:t> ; | . This line transfers the precondition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \} $ into the postcondition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \} $ . This is rigorously given using the assignment rule given in usual Hoare techniques . Keeping momentum , we have the variable binding command \verb | <var:D3> := <var:D2> * <var:t> ; | . This line takes the condition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \} $ . Keeping momentum , the variable update statement letting $ <nat:8> $ toward $ <var:D0>$ . This advances the condition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \} $ to the condition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ . This is rigorously given with the assignment law of usual Hoare logic . Looking at the proceeding statement contained in the set of commands , we have the environment update line \verb | <var:D1> := <var:D1> * <nat:8> ; | . This transfers the precondition $ \{ <var:t> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ to $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ . This is rigorously given through the assignment rule defined by standard Hoare techniques . Considering the subsequent line in our list of instructions , the variable update command binding $ <var:D2> * <nat:3> $ to $ <var:D2>$ . This statement takes $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ into the postcondition $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <nat:3> * <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ . Jumping to the subsequent piece of code in our set of commands , the assignment statement \verb | <var:D3> := <var:D3> * <nat:6> ; | . This transfers the condition $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <nat:3> * <var:L> ^ <nat:2> \land <var:D3> = <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ toward the postcondition $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <nat:3> * <var:L> ^ <nat:2> \land <var:D3> = <nat:6> * <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ . This is ensured using the assignment rule found in typical Hoare reasoning . Honing in on the next bit of code seen in our list of commands , we see the assignment command \verb | <var:E> := <var:D3> | . This advances $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <nat:3> * <var:L> ^ <nat:2> \land <var:D3> = <nat:6> * <var:L> ^ <nat:3> \land <var:D0> = <nat:8> \} $ as the condition $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <nat:3> * <var:L> ^ <nat:2> \land <var:D0> = <nat:8> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> \} $ . Stepping through , we have the assignment code defining $ <var:E> + <var:D2$ to $ <var:E>$ . This forwards $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D2> = <nat:3> * <var:L> ^ <nat:2> \land <var:D0> = <nat:8> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> \} $ as the condition $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D0> = <nat:8> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> \} $ . Considering the subsequent command seen in the set of commands , the assignment statement \verb | <var:E> := <var:E> + <var:D1> | . This command moves the condition $ \{ <var:t> = <var:L> \land <var:D1> = <nat:8> * <var:L> \land <var:D0> = <nat:8> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> \} $ as $ \{ <var:t> = <var:L> \land <var:D0> = <nat:8> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> \} $ . Following , we have the variable assignmet line \verb | <var:E> := <var:E> + <var:D0> | . This statement takes $ \{ <var:t> = <var:L> \land <var:D0> = <nat:8> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> \} $ into the postcondition $ \{ <var:t> = <var:L> \land <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:8> \} $ . This is sound through the assignment scheme obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:t> ; <var:D2> := <var:D1> * <var:t> ; <var:D3> := <var:D2> * <var:t> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:8> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:6> ; <var:E> := <var:D3> <var:E> := <var:E> + <var:D2> <var:E> := <var:E> + <var:D1> <var:E> := <var:E> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:t> = <var:L> }} <def:poly> {{ <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <var:L> /\ <var:D2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <var:L> /\ <var:D2> = <var:L> ^ <nat:2> /\ <var:D3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <var:L> /\ <var:D2> = <var:L> ^ <nat:2> /\ <var:D3> = <var:L> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <nat:8> * <var:L> /\ <var:D2> = <var:L> ^ <nat:2> /\ <var:D3> = <var:L> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <nat:8> * <var:L> /\ <var:D2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:D3> = <var:L> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <nat:8> * <var:L> /\ <var:D2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:L> ^ <nat:3> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <nat:8> * <var:L> /\ <var:D2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:6> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D1> = <nat:8> * <var:L> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:E> = <nat:6> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 