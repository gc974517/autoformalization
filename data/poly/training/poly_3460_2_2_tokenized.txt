\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:2> + <var:k> * <var:V> \end{verbatim} Assuming that $ <var:V> = <var:r> $ before evaluating this code it follows that we have $ <var:k> = <nat:3> \times <var:r> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this code can be accomplished with standard Hoare logic . Advancing on , the environment update command assigning $ <nat:3> $ as $ <var:k>$ . This statement transfers the condition $ \{ <var:V> = <var:r> \} $ as the postcondition $ \{ <var:V> = <var:r> \land <var:k> = <nat:3> \} $ . Following , we see the binding code \verb | <var:k> := <nat:2> + <var:k> * <var:V> | . This moves the precondition $ \{ <var:V> = <var:r> \land <var:k> = <nat:3> \} $ into $ \{ <var:V> = <var:r> \land <var:k> = <nat:3> \cdot <var:r> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:V> = <var:r> }} <var:k> := <nat:3> ; <var:k> := <nat:2> + <var:k> * <var:V> {{ <var:k> = <nat:3> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:k> = <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 