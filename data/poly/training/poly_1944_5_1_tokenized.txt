\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:B> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:6> ; <var:p> := <var:l1> <var:p> := <var:p> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:B> = <var:D> $ , taking whole numbers $ <var:D> $ , before the evaluation of our program it holds that $ <var:p> = <nat:6> \times <var:D> + <nat:9> $ once set of instructions exits . \end{theorem} \begin{proof} The course of logic for the set of commands is done by standard Hoare logic . Moving on to the following lines in our segment of code , we see \begin{eqnarray} \{ <var:B> = <var:D> \} \, <var:l1> := <var:B> \, \{ <var:B> = <var:D> \land <var:l1> = <var:D> \} \\ \{ <var:B> = <var:D> \land <var:l1> = <var:D> \} \, <var:l0> := <nat:9> \, \{ <var:B> = <var:D> \land <var:l1> = <var:D> \land <var:l0> = <nat:9> \} \\ \{ <var:B> = <var:D> \land <var:l1> = <var:D> \land <var:l0> = <nat:9> \} \, <var:l1> := <var:l1> * <nat:6> \, \{ <var:B> = <var:D> \land <var:l1> = <nat:6> \cdot <var:D> \land <var:l0> = <nat:9> \} \end{eqnarray} Further , we see \begin{eqnarray} \{ <var:B> = <var:D> \} \, <var:l1> := <var:B> \, \{ <var:B> = <var:D> \land <var:l1> = <var:D> \} \\ \{ <var:B> = <var:D> \land <var:l1> = <var:D> \} \, <var:l0> := <nat:9> \, \{ <var:B> = <var:D> \land <var:l1> = <var:D> \land <var:l0> = <nat:9> \} \end{eqnarray} This is ensured by the binding scheme of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:B> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:6> ; <var:p> := <var:l1> <var:p> := <var:p> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:B> = <var:D> }} <def:poly> {{ <var:p> = <nat:6> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:D> /\ <var:l1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:D> /\ <var:l1> = <var:D> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:D> /\ <var:l1> = <nat:6> * <var:D> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:D> /\ <var:l0> = <nat:9> /\ <var:p> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:D> /\ <var:p> = <nat:6> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 