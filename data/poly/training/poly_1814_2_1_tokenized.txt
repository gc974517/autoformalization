\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:9> ; <var:n> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assuming given some positive integer coefficients $ <var:g> $ that we have $ <var:s> = <var:g> $ ahead of interpreting the code segment , then we see $ <var:n> = <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for this code is clear by usual Hoare logic . Observing the following step in the program , we have the line \verb | <var:t0> := <nat:9> ; | . This redefines $ \{ <var:s> = <var:g> \} $ into $ \{ <var:s> = <var:g> \land <var:t0> = <nat:9> \} $ . Next , the statement giving $ <var:t0$ to $ <var:n>$ . This statement transfers the precondition $ \{ <var:s> = <var:g> \land <var:t0> = <nat:9> \} $ into the condition $ \{ <var:s> = <var:g> \land <var:n> = <nat:9> \} $ . This is shown using the assignment inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:9> ; <var:n> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:s> = <var:g> }} <def:poly> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 