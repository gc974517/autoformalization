\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:y1> := <var:w> ; <var:y2> := <var:y1> * <var:w> ; <var:y3> := <var:y2> * <var:w> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:2> ; <var:y2> := <var:y2> * <nat:9> ; <var:y3> := <var:y3> * <nat:7> ; <var:e> := <var:y3> <var:e> := <var:e> + <var:y2> <var:e> := <var:e> + <var:y1> <var:e> := <var:e> + <var:y0> \end{verbatim} Allowing that $ <var:w> = <var:U> $ ahead of the evaluation of our code segment , it must be that $ <var:e> = <nat:7> \times <var:U> ^ <nat:3> + <nat:9> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:5> $ . \end{theorem} \begin{proof} Note that the following decorated code segment . \begin{eqnarray} \{ <var:w> = <var:U> \} \\ <var:y1> := <var:w> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <var:U> \} \\ <var:y2> := <var:y1> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <var:U> \land <var:y2> = <var:U> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <var:U> \land <var:y2> = <var:U> ^ <nat:2> \land <var:y3> = <var:U> ^ <nat:3> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <var:U> \land <var:y2> = <var:U> ^ <nat:2> \land <var:y3> = <var:U> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:y1> := <var:y1> * <nat:2> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <nat:2> \times <var:U> \land <var:y2> = <var:U> ^ <nat:2> \land <var:y3> = <var:U> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:y2> := <var:y2> * <nat:9> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <nat:2> \times <var:U> \land <var:y2> = <nat:9> \times <var:U> ^ <nat:2> \land <var:y3> = <var:U> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:y3> := <var:y3> * <nat:7> ; \\ \{ <var:w> = <var:U> \land <var:y1> = <nat:2> \times <var:U> \land <var:y2> = <nat:9> \times <var:U> ^ <nat:2> \land <var:y3> = <nat:7> \times <var:U> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:e> := <var:y3> \\ \{ <var:w> = <var:U> \land <var:y1> = <nat:2> \times <var:U> \land <var:y2> = <nat:9> \times <var:U> ^ <nat:2> \land <var:y0> = <nat:5> \land <var:e> = <nat:7> \times <var:U> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:y2> \\ \{ <var:w> = <var:U> \land <var:y1> = <nat:2> \times <var:U> \land <var:y0> = <nat:5> \land <var:e> = <nat:7> \times <var:U> ^ <nat:3> + <nat:9> \times <var:U> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:y1> \\ \{ <var:w> = <var:U> \land <var:y0> = <nat:5> \land <var:e> = <nat:7> \times <var:U> ^ <nat:3> + <nat:9> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> \} \\ <var:e> := <var:e> + <var:y0> \\ \{ <var:w> = <var:U> \land <var:e> = <nat:7> \times <var:U> ^ <nat:3> + <nat:9> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:5> \} \end{eqnarray} The application of standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <var:y1> := <var:w> ; <var:y2> := <var:y1> * <var:w> ; <var:y3> := <var:y2> * <var:w> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:2> ; <var:y2> := <var:y2> * <nat:9> ; <var:y3> := <var:y3> * <nat:7> ; <var:e> := <var:y3> <var:e> := <var:e> + <var:y2> <var:e> := <var:e> + <var:y1> <var:e> := <var:e> + <var:y0> {{ <var:e> = <nat:7> * <var:U> ^ <nat:3> + <nat:9> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <var:U> /\ <var:y2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <var:U> /\ <var:y2> = <var:U> ^ <nat:2> /\ <var:y3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <var:U> /\ <var:y2> = <var:U> ^ <nat:2> /\ <var:y3> = <var:U> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <nat:2> * <var:U> /\ <var:y2> = <var:U> ^ <nat:2> /\ <var:y3> = <var:U> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <nat:2> * <var:U> /\ <var:y2> = <nat:9> * <var:U> ^ <nat:2> /\ <var:y3> = <var:U> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <nat:2> * <var:U> /\ <var:y2> = <nat:9> * <var:U> ^ <nat:2> /\ <var:y3> = <nat:7> * <var:U> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <nat:2> * <var:U> /\ <var:y2> = <nat:9> * <var:U> ^ <nat:2> /\ <var:y0> = <nat:5> /\ <var:e> = <nat:7> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y1> = <nat:2> * <var:U> /\ <var:y0> = <nat:5> /\ <var:e> = <nat:7> * <var:U> ^ <nat:3> + <nat:9> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:y0> = <nat:5> /\ <var:e> = <nat:7> * <var:U> ^ <nat:3> + <nat:9> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:e> = <nat:7> * <var:U> ^ <nat:3> + <nat:9> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 