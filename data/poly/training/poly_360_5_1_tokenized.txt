\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N1> := <var:e> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:9> ; <var:v> := <var:N1> <var:v> := <var:v> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:e> = <var:l> $ ahead of interpreting the list of commands , it must be that we see $ <var:v> = <nat:9> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:e> = <var:l> \} \\ <var:N1> := <var:e> ; \\ \{ <var:e> = <var:l> \land <var:N1> = <var:l> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:e> = <var:l> \land <var:N1> = <var:l> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:9> ; \\ \{ <var:e> = <var:l> \land <var:N1> = <nat:9> \times <var:l> \land <var:N0> = <nat:4> \} \\ <var:v> := <var:N1> \\ \{ <var:e> = <var:l> \land <var:N0> = <nat:4> \land <var:v> = <nat:9> \times <var:l> \} \\ <var:v> := <var:v> + <var:N0> \\ \{ <var:e> = <var:l> \land <var:v> = <nat:9> \times <var:l> + <nat:4> \} \end{eqnarray} As a consequence , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:e> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:9> ; <var:v> := <var:N1> <var:v> := <var:v> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <def:poly> {{ <var:v> = <nat:9> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:N1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:N1> = <var:l> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:N1> = <nat:9> * <var:l> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:N0> = <nat:4> /\ <var:v> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:v> = <nat:9> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 