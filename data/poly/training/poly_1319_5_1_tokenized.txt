\begin{document} \begin{theorem} Take a program in \emph{Imp} as follows \begin{verbatim} <var:m1> := <var:Z> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:4> ; <var:q> := <var:m1> <var:q> := <var:q> + <var:m0> \end{verbatim} Assume it to hold that $ <var:Z> = <var:o> $ before evaluating our set of commands , it follows that $ <var:q> = <nat:4> \times <var:o> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:Z> = <var:o> \} \\ <var:m1> := <var:Z> ; \\ \{ <var:Z> = <var:o> \land <var:m1> = <var:o> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:Z> = <var:o> \land <var:m1> = <var:o> \land <var:m0> = <nat:4> \} \\ <var:m1> := <var:m1> * <nat:4> ; \\ \{ <var:Z> = <var:o> \land <var:m1> = <nat:4> \cdot <var:o> \land <var:m0> = <nat:4> \} \end{eqnarray} Continuing the evaluation of our series of commands yields : \begin{eqnarray} <var:q> := <var:m1> \\ \{ <var:Z> = <var:o> \land <var:m0> = <nat:4> \land <var:q> = <nat:4> \cdot <var:o> \} \\ <var:q> := <var:q> + <var:m0> \\ \{ <var:Z> = <var:o> \land <var:q> = <nat:4> \cdot <var:o> + <nat:4> \} \end{eqnarray} Thusly , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Z> = <var:o> }} <var:m1> := <var:Z> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:4> ; <var:q> := <var:m1> <var:q> := <var:q> + <var:m0> {{ <var:q> = <nat:4> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:m1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:m1> = <var:o> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:m1> = <nat:4> * <var:o> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:m0> = <nat:4> /\ <var:q> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:q> = <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 