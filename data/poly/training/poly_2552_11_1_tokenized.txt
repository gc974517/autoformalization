\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:s> ; <var:j2> := <var:j1> * <var:s> ; <var:j3> := <var:j2> * <var:s> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:1> ; <var:a> := <var:j3> <var:a> := <var:a> + <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> \end{verbatim} Allowing with some positive numbers $ <var:m> $ that $ <var:s> = <var:m> $ prior to evaluating our segment of code , it must be that we see $ <var:a> = <nat:1> \times <var:m> ^ <nat:3> + <nat:9> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning yields : \begin{eqnarray} \{ <var:s> = <var:m> \} \\ <var:j1> := <var:s> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <var:m> \} \\ <var:j2> := <var:j1> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ <var:j1> := <var:j1> * <nat:5> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <nat:5> \cdot <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ <var:j2> := <var:j2> * <nat:9> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <nat:5> \cdot <var:m> \land <var:j2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ <var:j3> := <var:j3> * <nat:1> ; \\ \{ <var:s> = <var:m> \land <var:j1> = <nat:5> \cdot <var:m> \land <var:j2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:j3> = <nat:1> \cdot <var:m> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ <var:a> := <var:j3> \\ \{ <var:s> = <var:m> \land <var:j1> = <nat:5> \cdot <var:m> \land <var:j2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:j0> = <nat:6> \land <var:a> = <nat:1> \cdot <var:m> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:j2> \\ \{ <var:s> = <var:m> \land <var:j1> = <nat:5> \cdot <var:m> \land <var:j0> = <nat:6> \land <var:a> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:j1> \\ \{ <var:s> = <var:m> \land <var:j0> = <nat:6> \land <var:a> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> \} \\ <var:a> := <var:a> + <var:j0> \\ \{ <var:s> = <var:m> \land <var:a> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:6> \} \end{eqnarray} Thusly , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:s> = <var:m> }} <var:j1> := <var:s> ; <var:j2> := <var:j1> * <var:s> ; <var:j3> := <var:j2> * <var:s> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:1> ; <var:a> := <var:j3> <var:a> := <var:a> + <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> {{ <var:a> = <nat:1> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <var:m> /\ <var:j2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <var:m> /\ <var:j2> = <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <var:m> /\ <var:j2> = <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <nat:5> * <var:m> /\ <var:j2> = <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <nat:5> * <var:m> /\ <var:j2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <nat:5> * <var:m> /\ <var:j2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:m> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <nat:5> * <var:m> /\ <var:j2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:j0> = <nat:6> /\ <var:a> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j1> = <nat:5> * <var:m> /\ <var:j0> = <nat:6> /\ <var:a> = <nat:1> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:j0> = <nat:6> /\ <var:a> = <nat:1> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:a> = <nat:1> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 