\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:G> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:1> ; <var:N> := <var:a1> <var:N> := <var:N> + <var:a0> \end{verbatim} Assume ( taking $ <var:D> \in \mathbb{N} $ ) it to hold that $ <var:G> = <var:D> $ prior to the execution of this code then we see $ <var:N> = <nat:1> \cdot <var:D> + <nat:1> $ when list of instructions finishes . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be demonstrated with usual Hoare techniques . Moving on to the next step , we see the environment update command \verb | <var:a1> := <var:G> ; | . This code redefines $ \{ <var:G> = <var:D> \} $ into the postcondition $ \{ <var:G> = <var:D> \land <var:a1> = <var:D> \} $ . Moving on to the proceeding line of code seen in our code segment , the variable assignmet line \verb | <var:a0> := <nat:1> ; | . This command advances $ \{ <var:G> = <var:D> \land <var:a1> = <var:D> \} $ to the condition $ \{ <var:G> = <var:D> \land <var:a1> = <var:D> \land <var:a0> = <nat:1> \} $ . Considering the proceeding line of code found in our list of instructions , we have the environment update line letting $ <var:a1> * <nat:1> $ into $ <var:a1>$ . This redefines the precondition $ \{ <var:G> = <var:D> \land <var:a1> = <var:D> \land <var:a0> = <nat:1> \} $ to the postcondition $ \{ <var:G> = <var:D> \land <var:a1> = <nat:1> * <var:D> \land <var:a0> = <nat:1> \} $ . This is rigorously given by the assignment law obtained from typical Hoare reasoning . Moving forward to the subsequent command contained in the series of instructions , we see the variable assignmet line defining $ <var:a1$ toward $ <var:N>$ . This advances $ \{ <var:G> = <var:D> \land <var:a1> = <nat:1> * <var:D> \land <var:a0> = <nat:1> \} $ to the postcondition $ \{ <var:G> = <var:D> \land <var:a0> = <nat:1> \land <var:N> = <nat:1> * <var:D> \} $ . Further , we see the environment update code letting $ <var:N> + <var:a0$ to $ <var:N>$ . This moves $ \{ <var:G> = <var:D> \land <var:a0> = <nat:1> \land <var:N> = <nat:1> * <var:D> \} $ to $ \{ <var:G> = <var:D> \land <var:N> = <nat:1> * <var:D> + <nat:1> \} $ . This is shown using the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:G> = <var:D> }} <var:a1> := <var:G> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:1> ; <var:N> := <var:a1> <var:N> := <var:N> + <var:a0> {{ <var:N> = <nat:1> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:a1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:a1> = <var:D> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:a1> = <nat:1> * <var:D> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:a0> = <nat:1> /\ <var:N> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:N> = <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 