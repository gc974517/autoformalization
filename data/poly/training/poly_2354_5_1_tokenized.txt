\begin{document} \begin{theorem} We define a list of instructions as follows \begin{verbatim} <var:A1> := <var:j> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:1> ; <var:d> := <var:A1> <var:d> := <var:d> + <var:A0> \end{verbatim} Assuming that $ <var:j> = <var:l> $ before executing the segment of code it must be that we have $ <var:d> = <nat:1> * <var:l> + <nat:8> $ when segment of code has terminated . \end{theorem} \begin{proof} The method of proof for our series of instructions is evident by standard Hoare logic . Going forward , we have the variable binding statement \verb | <var:A1> := <var:j> ; | . This code redefines $ \{ <var:j> = <var:l> \} $ into the postcondition $ \{ <var:j> = <var:l> \land <var:A1> = <var:l> \} $ . This is deduced by the assignment rule from typical Hoare logic . Moving onward , the assignment statement \verb | <var:A0> := <nat:8> ; | . This statement transfers the precondition $ \{ <var:j> = <var:l> \land <var:A1> = <var:l> \} $ to the postcondition $ \{ <var:j> = <var:l> \land <var:A1> = <var:l> \land <var:A0> = <nat:8> \} $ . Observing the subsequent line of code seen in the series of commands , the variable update code \verb | <var:A1> := <var:A1> * <nat:1> ; | . This advances the condition $ \{ <var:j> = <var:l> \land <var:A1> = <var:l> \land <var:A0> = <nat:8> \} $ into the postcondition $ \{ <var:j> = <var:l> \land <var:A1> = <nat:1> * <var:l> \land <var:A0> = <nat:8> \} $ . This is sound through the assignment scheme given by usual Hoare reasoning . Advancing to the next step , we have the statement \verb | <var:d> := <var:A1> | . This line transfers the condition $ \{ <var:j> = <var:l> \land <var:A1> = <nat:1> * <var:l> \land <var:A0> = <nat:8> \} $ as $ \{ <var:j> = <var:l> \land <var:A0> = <nat:8> \land <var:d> = <nat:1> * <var:l> \} $ . This is rigorously given by the assignment inference rule of usual Hoare techniques . Moving forward to the next step , we have the variable binding statement yielding $ <var:d> + <var:A0$ as $ <var:d>$ . This redefines the precondition $ \{ <var:j> = <var:l> \land <var:A0> = <nat:8> \land <var:d> = <nat:1> * <var:l> \} $ to $ \{ <var:j> = <var:l> \land <var:d> = <nat:1> * <var:l> + <nat:8> \} $ . This is shown using the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:j> = <var:l> }} <var:A1> := <var:j> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:1> ; <var:d> := <var:A1> <var:d> := <var:d> + <var:A0> {{ <var:d> = <nat:1> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:A1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:A1> = <var:l> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:A1> = <nat:1> * <var:l> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:A0> = <nat:8> /\ <var:d> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:d> = <nat:1> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 