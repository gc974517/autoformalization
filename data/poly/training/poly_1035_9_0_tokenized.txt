\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:5> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:S> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:S> ; <var:c2> := <var:c2> * <var:S> ; <var:U> := <var:c2> ; <var:U> := <var:U> + <var:c1> ; <var:U> := <var:U> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:S> = <var:e> $ ahead of interpreting the series of instructions then $ <var:U> = <nat:2> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> + <nat:5> $ when list of instructions is done . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:S> = <var:e> \} \\ <var:c0> := <nat:5> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \} \\ <var:c1> := <nat:7> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:c1> = <nat:7> \} \\ <var:c1> := <var:c1> * <var:S> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:c1> = <nat:7> \cdot <var:e> \} \\ <var:c2> := <nat:2> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:c1> = <nat:7> \cdot <var:e> \land <var:c2> = <nat:2> \} \\ <var:c2> := <var:c2> * <var:S> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:c1> = <nat:7> \cdot <var:e> \land <var:c2> = <nat:2> \cdot <var:e> \} \\ <var:c2> := <var:c2> * <var:S> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:c1> = <nat:7> \cdot <var:e> \land <var:c2> = <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:U> := <var:c2> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:c1> = <nat:7> \cdot <var:e> \land <var:U> = <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:c1> ; \\ \{ <var:S> = <var:e> \land <var:c0> = <nat:5> \land <var:U> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:7> \cdot <var:e> \} \\ <var:U> := <var:U> + <var:c0> \\ \{ <var:S> = <var:e> \land <var:U> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:7> \cdot <var:e> + <nat:5> \} \end{eqnarray} Considering the above , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:5> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:S> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:S> ; <var:c2> := <var:c2> * <var:S> ; <var:U> := <var:c2> ; <var:U> := <var:U> + <var:c1> ; <var:U> := <var:U> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <def:poly> {{ <var:U> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:7> * <var:e> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:7> * <var:e> /\ <var:c2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:7> * <var:e> /\ <var:c2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:7> * <var:e> /\ <var:U> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:5> /\ <var:U> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:U> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 