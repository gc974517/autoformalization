\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:g1> := <var:h> ; <var:g2> := <var:g1> * <var:h> ; <var:g3> := <var:g2> * <var:h> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:5> ; <var:g3> := <var:g3> * <nat:9> ; <var:n> := <var:g3> <var:n> := <var:n> + <var:g2> <var:n> := <var:n> + <var:g1> <var:n> := <var:n> + <var:g0> \end{verbatim} Assume that $ <var:h> = <var:M> $ prior to evaluating this series of instructions it follows that we see $ <var:n> = <nat:9> \cdot <var:M> ^ <nat:3> + <nat:5> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:9> $ after segment of code is done executing . \end{theorem} \begin{proof} Proving correctness for our set of instructions is done through typical Hoare logic . Following , we see \begin{verbatim} { <var:h> = <var:M> } <var:g1> := <var:h> { <var:h> = <var:M> \land <var:g1> = <var:M> } { <var:h> = <var:M> \land <var:g1> = <var:M> } <var:g2> := <var:g1> * <var:h> { <var:h> = <var:M> \land <var:g1> = <var:M> \land <var:g2> = <var:M> ^ <nat:2> } { <var:h> = <var:M> \land <var:g1> = <var:M> \land <var:g2> = <var:M> ^ <nat:2> } <var:g3> := <var:g2> * <var:h> { <var:h> = <var:M> \land <var:g1> = <var:M> \land <var:g2> = <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> } { <var:h> = <var:M> \land <var:g1> = <var:M> \land <var:g2> = <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> } <var:g0> := <nat:9> { <var:h> = <var:M> \land <var:g1> = <var:M> \land <var:g2> = <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } { <var:h> = <var:M> \land <var:g1> = <var:M> \land <var:g2> = <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } <var:g1> := <var:g1> * <nat:1> { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } <var:g2> := <var:g2> * <nat:5> { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:g3> = <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } <var:g3> := <var:g3> * <nat:9> { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:g0> = <nat:9> } <var:n> := <var:g3{ <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:n> = <nat:9> \times <var:M> ^ <nat:3> } { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:n> = <nat:9> \times <var:M> ^ <nat:3> } <var:n> := <var:n> + <var:g2{ <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g0> = <nat:9> \land <var:n> = <nat:9> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> } { <var:h> = <var:M> \land <var:g1> = <nat:1> \times <var:M> \land <var:g0> = <nat:9> \land <var:n> = <nat:9> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> } <var:n> := <var:n> + <var:g1{ <var:h> = <var:M> \land <var:g0> = <nat:9> \land <var:n> = <nat:9> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> } \end{verbatim} This is shown using the assignment scheme defined in typical Hoare logic . Taking a look at the proceeding line of code in our set of commands , we see \begin{verbatim} { <var:h> = <var:M> } <var:g1> := <var:h> { <var:h> = <var:M> \land <var:g1> = <var:M> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:h> = <var:M> }} <var:g1> := <var:h> ; <var:g2> := <var:g1> * <var:h> ; <var:g3> := <var:g2> * <var:h> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:5> ; <var:g3> := <var:g3> * <nat:9> ; <var:n> := <var:g3> <var:n> := <var:n> + <var:g2> <var:n> := <var:n> + <var:g1> <var:n> := <var:n> + <var:g0> {{ <var:n> = <nat:9> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <var:M> /\ <var:g2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <var:M> /\ <var:g2> = <var:M> ^ <nat:2> /\ <var:g3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <var:M> /\ <var:g2> = <var:M> ^ <nat:2> /\ <var:g3> = <var:M> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <nat:1> * <var:M> /\ <var:g2> = <var:M> ^ <nat:2> /\ <var:g3> = <var:M> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <nat:1> * <var:M> /\ <var:g2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:g3> = <var:M> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <nat:1> * <var:M> /\ <var:g2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:M> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <nat:1> * <var:M> /\ <var:g2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:g0> = <nat:9> /\ <var:n> = <nat:9> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g1> = <nat:1> * <var:M> /\ <var:g0> = <nat:9> /\ <var:n> = <nat:9> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:g0> = <nat:9> /\ <var:n> = <nat:9> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:n> = <nat:9> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 