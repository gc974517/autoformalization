\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:2> ; <var:F> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Assume that $ <var:T> = <var:Q> $ before interpreting this list of instructions it holds that $ <var:F> = <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is clear by usual Hoare reasoning . Moving on , we see the line \verb | <var:f0> := <nat:2> ; | . This redefines the precondition $ \{ <var:T> = <var:Q> \} $ to the condition $ \{ <var:T> = <var:Q> \land <var:f0> = <nat:2> \} $ . Advancing to the next step , the environment update code binding $ <var:f0$ as $ <var:F>$ . This forwards the condition $ \{ <var:T> = <var:Q> \land <var:f0> = <nat:2> \} $ toward the condition $ \{ <var:T> = <var:Q> \land <var:F> = <nat:2> \} $ . This is shown through the assignment inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:2> ; <var:F> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:T> = <var:Q> }} <def:poly> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 