\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:9> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:Q> ; <var:t> := <var:I1> ; <var:t> := <var:t> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:Q> = <var:L> $ given $ <var:L> \in \mathbb{N} $ ahead of interpreting the list of instructions it holds that we have $ <var:t> = <nat:1> * <var:L> + <nat:9> $ after segment of code has exited . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:Q> = <var:L> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:Q> = <var:L> \land <var:I0> = <nat:9> \} \\ <var:I1> := <nat:1> ; \\ \{ <var:Q> = <var:L> \land <var:I0> = <nat:9> \land <var:I1> = <nat:1> \} \\ <var:I1> := <var:I1> * <var:Q> ; \\ \{ <var:Q> = <var:L> \land <var:I0> = <nat:9> \land <var:I1> = <nat:1> * <var:L> \} \\ <var:t> := <var:I1> ; \\ \{ <var:Q> = <var:L> \land <var:I0> = <nat:9> \land <var:t> = <nat:1> * <var:L> \} \\ <var:t> := <var:t> + <var:I0> \\ \{ <var:Q> = <var:L> \land <var:t> = <nat:1> * <var:L> + <nat:9> \} \end{eqnarray} Thus , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:Q> ; <var:t> := <var:I1> ; <var:t> := <var:t> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <def:poly> {{ <var:t> = <nat:1> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:I0> = <nat:9> /\ <var:t> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:t> = <nat:1> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 