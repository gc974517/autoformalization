\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <var:h> * <var:j> ; <var:h> := <nat:2> + <var:h> * <var:j> ; <var:h> := <var:h> * <var:j> ; <var:h> := <var:h> * <var:j> ; <var:h> := <nat:3> + <var:h> * <var:j> ; <var:h> := <nat:4> + <var:h> * <var:j> \end{verbatim} Assume --- given any positive numbers $ <var:I> $ --- that $ <var:j> = <var:I> $ before interpreting our series of instructions then $ <var:h> = <nat:3> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the list of instructions can be done through the below decorated set of instructions . \begin{eqnarray} \{ <var:j> = <var:I> \} \\ <var:h> := <nat:3> ; \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \} \\ <var:h> := <var:h> * <var:j> ; \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \times <var:I> + \} \\ <var:h> := <nat:2> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \} \\ <var:h> := <var:h> * <var:j> ; \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> + \} \\ <var:h> := <var:h> * <var:j> ; \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:2> + \} \\ <var:h> := <nat:3> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \times <var:I> ^ <nat:5> + <nat:2> \times <var:I> ^ <nat:3> + <nat:3> \} \\ <var:h> := <nat:4> + <var:h> * <var:j> \\ \{ <var:j> = <var:I> \land <var:h> = <nat:3> \times <var:I> ^ <nat:6> + <nat:2> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> + <nat:4> \} \end{eqnarray} Using typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <var:h> := <nat:3> ; <var:h> := <var:h> * <var:j> ; <var:h> := <nat:2> + <var:h> * <var:j> ; <var:h> := <var:h> * <var:j> ; <var:h> := <var:h> * <var:j> ; <var:h> := <nat:3> + <var:h> * <var:j> ; <var:h> := <nat:4> + <var:h> * <var:j> {{ <var:h> = <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:h> = <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 