\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:d0> := <nat:5> ; <var:e> := <var:d0> \end{verbatim} Given it to be that $ <var:o> = <var:I> $ prior to evaluating this list of commands it follows that $ <var:e> = <nat:5> $ . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:o> = <var:I> \} \\ <var:d0> := <nat:5> ; \\ \{ <var:o> = <var:I> \land <var:d0> = <nat:5> \} \\ <var:e> := <var:d0> \\ \{ <var:o> = <var:I> \land <var:e> = <nat:5> \} \end{eqnarray} Given the preceding argument , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:o> = <var:I> }} <var:d0> := <nat:5> ; <var:e> := <var:d0> {{ <var:e> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:e> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 