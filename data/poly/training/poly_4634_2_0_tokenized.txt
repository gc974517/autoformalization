\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:4> ; <var:z> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Assume for all whole numbers $ <var:c> $ it to be that $ <var:s> = <var:c> $ prior to evaluating this series of commands , it follows that $ <var:z> = <nat:4> $ when series of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:c> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:s> = <var:c> \land <var:x0> = <nat:4> \} \\ <var:z> := <var:x0> \\ \{ <var:s> = <var:c> \land <var:z> = <nat:4> \} \end{eqnarray} Using typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:z> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:s> = <var:c> }} <def:poly> {{ <var:z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 