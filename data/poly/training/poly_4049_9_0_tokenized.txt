\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:M> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:M> ; <var:s2> := <var:s2> * <var:M> ; <var:q> := <var:s2> ; <var:q> := <var:q> + <var:s1> ; <var:q> := <var:q> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:M> = <var:R> $ before running this set of instructions it must be that we have $ <var:q> = <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> $ once list of instructions executes . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:M> = <var:R> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \} \\ <var:s1> := <nat:1> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \} \\ <var:s1> := <var:s1> * <var:M> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \times <var:R> \} \\ <var:s2> := <nat:2> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \times <var:R> \land <var:s2> = <nat:2> \} \\ <var:s2> := <var:s2> * <var:M> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \times <var:R> \land <var:s2> = <nat:2> \times <var:R> \} \\ <var:s2> := <var:s2> * <var:M> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \times <var:R> \land <var:s2> = <nat:2> \times <var:R> ^ <nat:2> \} \\ <var:q> := <var:s2> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \times <var:R> \land <var:q> = <nat:2> \times <var:R> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:s1> ; \\ \{ <var:M> = <var:R> \land <var:s0> = <nat:4> \land <var:q> = <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> \} \\ <var:q> := <var:q> + <var:s0> \\ \{ <var:M> = <var:R> \land <var:q> = <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> \} \end{eqnarray} Considering the above , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:M> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:M> ; <var:s2> := <var:s2> * <var:M> ; <var:q> := <var:s2> ; <var:q> := <var:q> + <var:s1> ; <var:q> := <var:q> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:M> = <var:R> }} <def:poly> {{ <var:q> = <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <nat:2> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:R> /\ <var:q> = <nat:2> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:s0> = <nat:4> /\ <var:q> = <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:q> = <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 