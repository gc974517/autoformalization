\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:9> ; <var:b1> := <var:b1> * <var:U> ; <var:b2> := <nat:7> ; <var:b2> := <var:b2> * <var:U> ; <var:b2> := <var:b2> * <var:U> ; <var:Z> := <var:b2> ; <var:Z> := <var:Z> + <var:b1> ; <var:Z> := <var:Z> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:U> = <var:d> $ , for some whole numbers $ <var:d> $ , ahead of evaluating this code segment it follows that $ <var:Z> = <nat:7> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this program can be demonstrated through Hoare logic . Focusing on the following piece of code contained in the set of instructions , the variable binding code \verb | <var:b0> := <nat:8> ; | . This command moves the precondition $ \{ <var:U> = <var:d> \} $ as the condition $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \} $ . This is given using the assignment rule defined in usual Hoare logic . Going to the next step , the environment update line assigning $ <nat:9> $ into $ <var:b1>$ . This transfers the precondition $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \} $ toward $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \} $ . Taking a look at the next bit of code found in our list of instructions , we have the variable binding line assigning $ <var:b1> * <var:U> $ as $ <var:b1>$ . This code takes $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \} $ into $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \} $ . Advancing to the proceeding bit of code contained in our list of instructions , we see the assignment code \verb | <var:b2> := <nat:7> ; | . This line takes $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \} $ to the postcondition $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:b2> = <nat:7> \} $ . Moving forward to the following command contained in our series of commands , the binding code \verb | <var:b2> := <var:b2> * <var:U> ; | . This command advances $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:b2> = <nat:7> \} $ to $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:b2> = <nat:7> \cdot <var:d> \} $ . This is shown to be logically sound through the assignment law defined in Hoare techniques . Moving forward to the next step , the environment update command \verb | <var:b2> := <var:b2> * <var:U> ; | . This command advances the precondition $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:b2> = <nat:7> \cdot <var:d> \} $ as the postcondition $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:b2> = <nat:7> \cdot <var:d> ^ <nat:2> \} $ . Jumping to the upcoming line of code contained in our code segment , the line defining $ <var:b2> $ to $ <var:Z>$ . This redefines $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:b2> = <nat:7> \cdot <var:d> ^ <nat:2> \} $ toward $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:Z> = <nat:7> \cdot <var:d> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme found in standard Hoare reasoning . Moving forward to the next step , we see the assignment code \verb | <var:Z> := <var:Z> + <var:b1> ; | . This redefines $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:b1> = <nat:9> \cdot <var:d> \land <var:Z> = <nat:7> \cdot <var:d> ^ <nat:2> \} $ as $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:Z> = <nat:7> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> \} $ . Taking a look at the proceeding piece of code contained in our series of commands , the variable update command yielding $ <var:Z> + <var:b0$ into $ <var:Z>$ . This line redefines the condition $ \{ <var:U> = <var:d> \land <var:b0> = <nat:8> \land <var:Z> = <nat:7> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> \} $ into $ \{ <var:U> = <var:d> \land <var:Z> = <nat:7> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:8> ; <var:b1> := <nat:9> ; <var:b1> := <var:b1> * <var:U> ; <var:b2> := <nat:7> ; <var:b2> := <var:b2> * <var:U> ; <var:b2> := <var:b2> * <var:U> ; <var:Z> := <var:b2> ; <var:Z> := <var:Z> + <var:b1> ; <var:Z> := <var:Z> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:U> = <var:d> }} <def:poly> {{ <var:Z> = <nat:7> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:9> * <var:d> /\ <var:b2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:9> * <var:d> /\ <var:b2> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:9> * <var:d> /\ <var:b2> = <nat:7> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:9> * <var:d> /\ <var:Z> = <nat:7> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:b0> = <nat:8> /\ <var:Z> = <nat:7> * <var:d> ^ <nat:2> + <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:Z> = <nat:7> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 