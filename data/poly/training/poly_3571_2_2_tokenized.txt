\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} such that \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:3> + <var:Q> * <var:h> \end{verbatim} Assuming it to hold that $ <var:h> = <var:s> $ prior to executing our list of instructions it holds that we have $ <var:Q> = <nat:3> * <var:s> + <nat:3> $ once list of instructions exits . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:h> = <var:s> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:h> = <var:s> \land <var:Q> = <nat:3> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:h> \\ \{ <var:h> = <var:s> \land <var:Q> = <nat:3> * <var:s> + <nat:3> \} \end{eqnarray} Thusly , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:h> = <var:s> }} <var:Q> := <nat:3> ; <var:Q> := <nat:3> + <var:Q> * <var:h> {{ <var:Q> = <nat:3> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Q> = <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 