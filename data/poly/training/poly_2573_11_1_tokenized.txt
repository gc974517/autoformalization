\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:R> ; <var:F2> := <var:F1> * <var:R> ; <var:F3> := <var:F2> * <var:R> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:9> ; <var:F2> := <var:F2> * <nat:6> ; <var:F3> := <var:F3> * <nat:4> ; <var:i> := <var:F3> <var:i> := <var:i> + <var:F2> <var:i> := <var:i> + <var:F1> <var:i> := <var:i> + <var:F0> \end{verbatim} Assume it to be that $ <var:R> = <var:e> $ prior to executing this program , then we see $ <var:i> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:6> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:2> $ after series of commands terminates . \end{theorem} \begin{proof} The argument for this code can be done using typical Hoare logic . Moving onward , we have the variable update command letting $ <var:R> $ into $ <var:F1>$ . This advances $ \{ <var:R> = <var:e> \} $ into $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \} $ . Next , we see the assignment code yielding $ <var:F1> * <var:R> $ into $ <var:F2>$ . This moves $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \} $ as $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \} $ . This is rigorously given by the assignment scheme given in typical Hoare reasoning . Advancing to the following line contained in the code segment , we see the variable assignmet line giving $ <var:F2> * <var:R> $ as $ <var:F3>$ . This code takes $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \} $ to the condition $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \} $ . Advancing , the assignment command \verb | <var:F0> := <nat:2> ; | . This command transfers $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \} $ to the condition $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ . This is known to be sound through the assignment rule given in Hoare reasoning . Immediately after , we have the variable update code assigning $ <var:F1> * <nat:9> $ as $ <var:F1>$ . This moves the condition $ \{ <var:R> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ . This is rigorously given using the assignment inference rule found in standard Hoare techniques . Taking another step toward the following bit of code found in our code segment , we have the variable binding line \verb | <var:F2> := <var:F2> * <nat:6> ; | . This command takes $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ into $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <nat:6> * <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ . This is known to be sound by the assignment scheme of standard Hoare techniques . Looking at the upcoming statement seen in our program , the variable assignmet statement defining $ <var:F3> * <nat:4> $ into $ <var:F3>$ . This moves $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <nat:6> * <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ into the condition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <nat:6> * <var:e> ^ <nat:2> \land <var:F3> = <nat:4> * <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ . Taking a look at the subsequent line of code seen in our code segment , we have the binding command letting $ <var:F3$ as $ <var:i>$ . This line moves the precondition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <nat:6> * <var:e> ^ <nat:2> \land <var:F3> = <nat:4> * <var:e> ^ <nat:3> \land <var:F0> = <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <nat:6> * <var:e> ^ <nat:2> \land <var:F0> = <nat:2> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> \} $ . This is rigorously given by the assignment scheme defined in Hoare reasoning . Moving on , the assignment command \verb | <var:i> := <var:i> + <var:F2> | . This code redefines the condition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F2> = <nat:6> * <var:e> ^ <nat:2> \land <var:F0> = <nat:2> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> \} $ toward the condition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F0> = <nat:2> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> \} $ . This is sound by the assignment inference rule found in usual Hoare logic . Advancing to the following piece of code seen in our series of instructions , we see the environment update command yielding $ <var:i> + <var:F1$ as $ <var:i>$ . This forwards the precondition $ \{ <var:R> = <var:e> \land <var:F1> = <nat:9> * <var:e> \land <var:F0> = <nat:2> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> \} $ as the condition $ \{ <var:R> = <var:e> \land <var:F0> = <nat:2> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ . Now , we have the binding statement letting $ <var:i> + <var:F0$ to $ <var:i>$ . This line takes the condition $ \{ <var:R> = <var:e> \land <var:F0> = <nat:2> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ as the condition $ \{ <var:R> = <var:e> \land <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:R> = <var:e> }} <var:F1> := <var:R> ; <var:F2> := <var:F1> * <var:R> ; <var:F3> := <var:F2> * <var:R> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:9> ; <var:F2> := <var:F2> * <nat:6> ; <var:F3> := <var:F3> * <nat:4> ; <var:i> := <var:F3> <var:i> := <var:i> + <var:F2> <var:i> := <var:i> + <var:F1> <var:i> := <var:i> + <var:F0> {{ <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <var:e> /\ <var:F2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <var:e> /\ <var:F2> = <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <var:e> /\ <var:F2> = <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <nat:9> * <var:e> /\ <var:F2> = <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <nat:9> * <var:e> /\ <var:F2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <nat:9> * <var:e> /\ <var:F2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <nat:9> * <var:e> /\ <var:F2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:F0> = <nat:2> /\ <var:i> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F1> = <nat:9> * <var:e> /\ <var:F0> = <nat:2> /\ <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:F0> = <nat:2> /\ <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:i> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 