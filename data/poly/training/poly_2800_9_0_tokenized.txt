\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:s> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:s> ; <var:Z2> := <var:Z2> * <var:s> ; <var:Q> := <var:Z2> ; <var:Q> := <var:Q> + <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assuming $ <var:s> = <var:u> $ ahead of the execution of this segment of code then $ <var:Q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:1> $ after set of instructions has terminated . \end{theorem} \begin{proof} The argument for our code segment can be given through usual Hoare techniques . Immediately after , the variable update statement \verb | <var:Z0> := <nat:1> ; | . This statement redefines $ \{ <var:s> = <var:u> \} $ into the postcondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \} $ . This is sound by the assignment inference rule given in usual Hoare logic . Focusing on the upcoming line of code in our set of instructions , we have the assignment command giving $ <nat:1> $ as $ <var:Z1>$ . This statement moves $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \} $ into the postcondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \} $ . This is rigorously given through the assignment scheme defined in usual Hoare techniques . Stepping through , the line defining $ <var:Z1> * <var:s> $ toward $ <var:Z1>$ . This transfers the precondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \} $ to $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \} $ . This is given using the assignment inference rule found in standard Hoare techniques . Observing the subsequent bit of code found in our segment of code , the assignment code defining $ <nat:1> $ as $ <var:Z2>$ . This code redefines the precondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \} $ to the postcondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Z2> = <nat:1> \} $ . This is shown to be logically sound with the assignment law given by standard Hoare reasoning . Going to the next step , the variable binding statement binding $ <var:Z2> * <var:s> $ toward $ <var:Z2>$ . This code advances the condition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Z2> = <nat:1> \} $ to the postcondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Z2> = <nat:1> \times <var:u> \} $ . This is known to be sound through the assignment rule defined in standard Hoare logic . Jumping to the upcoming step seen in the list of commands , we have the variable assignmet command defining $ <var:Z2> * <var:s> $ to $ <var:Z2>$ . This takes $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Z2> = <nat:1> \times <var:u> \} $ as the condition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Z2> = <nat:1> \times <var:u> ^ <nat:2> \} $ . Immediately following , we have the binding code letting $ <var:Z2> $ into $ <var:Q>$ . This takes the precondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Z2> = <nat:1> \times <var:u> ^ <nat:2> \} $ toward the condition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Q> = <nat:1> \times <var:u> ^ <nat:2> \} $ . Immediately following , we have the environment update code \verb | <var:Q> := <var:Q> + <var:Z1> ; | . This statement moves $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> \times <var:u> \land <var:Q> = <nat:1> \times <var:u> ^ <nat:2> \} $ as the postcondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> \} $ . This is given through the assignment inference rule given by standard Hoare techniques . Moving on , the environment update statement \verb | <var:Q> := <var:Q> + <var:Z0> | . This statement transfers the precondition $ \{ <var:s> = <var:u> \land <var:Z0> = <nat:1> \land <var:Q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> \} $ toward the condition $ \{ <var:s> = <var:u> \land <var:Q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:1> \} $ . This is guaranteed with the assignment inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:1> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:s> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:s> ; <var:Z2> := <var:Z2> * <var:s> ; <var:Q> := <var:Z2> ; <var:Q> := <var:Q> + <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:s> = <var:u> }} <def:poly> {{ <var:Q> = <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> * <var:u> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> * <var:u> /\ <var:Z2> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> * <var:u> /\ <var:Z2> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> * <var:u> /\ <var:Q> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Z0> = <nat:1> /\ <var:Q> = <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:Q> = <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 