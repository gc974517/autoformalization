\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:8> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:A> ; <var:M2> := <var:M2> * <var:A> ; <var:M3> := <nat:8> ; <var:M3> := <var:M3> * <var:A> ; <var:M3> := <var:M3> * <var:A> ; <var:M3> := <var:M3> * <var:A> ; <var:U> := <var:M3> ; <var:U> := <var:U> + <var:M2> ; <var:U> := <var:U> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allowing it to hold that $ <var:A> = <var:P> $ prior to the evaluation of the list of instructions , it must be that $ <var:U> = <nat:8> \times <var:P> ^ <nat:3> + <nat:9> \times <var:P> ^ <nat:2> + <nat:8> $ after segment of code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is shown through standard Hoare reasoning . Taking a look at the next line of code in the series of commands , we see the command letting $ <nat:8> $ toward $ <var:M0>$ . This forwards the condition $ \{ <var:A> = <var:P> \} $ toward the postcondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \} $ . This is deduced with the assignment scheme from Hoare reasoning . Jumping to the proceeding line of code found in our series of commands , the assignment code \verb | <var:M2> := <nat:9> ; | . This moves the condition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \} $ into the condition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> \} $ . Now , the variable update code binding $ <var:M2> * <var:A> $ toward $ <var:M2>$ . This transfers the precondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> \} $ as the postcondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> \} $ . This is shown to be logically sound with the assignment rule from usual Hoare techniques . Advancing to the subsequent line of code seen in the series of commands , we have the variable assignmet code \verb | <var:M2> := <var:M2> * <var:A> ; | . This transfers the precondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> \} $ as the condition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \} $ . Moving on to the next step , we see the binding code \verb | <var:M3> := <nat:8> ; | . This code takes the precondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \} $ to the postcondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> \} $ . This is deduced by the assignment scheme of standard Hoare reasoning . Immediately following , we see the assignment code \verb | <var:M3> := <var:M3> * <var:A> ; | . This moves the precondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> \} $ toward the condition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> * <var:P> \} $ . This is deduced using the assignment rule given by typical Hoare techniques . Next , we see the variable assignmet line giving $ <var:M3> * <var:A> $ toward $ <var:M3>$ . This takes the condition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> * <var:P> \} $ into the postcondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> * <var:P> ^ <nat:2> \} $ . This is shown through the assignment scheme given by Hoare logic . Going to the next step , we see the command binding $ <var:M3> * <var:A> $ as $ <var:M3>$ . This statement advances the precondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> * <var:P> ^ <nat:2> \} $ to $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> * <var:P> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment scheme given in standard Hoare reasoning . Focusing on the following bit of code found in our segment of code , the statement yielding $ <var:M3> $ to $ <var:U>$ . This transfers $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:M3> = <nat:8> * <var:P> ^ <nat:3> \} $ as the condition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:U> = <nat:8> * <var:P> ^ <nat:3> \} $ . Moving on to the next step , the environment update code \verb | <var:U> := <var:U> + <var:M2> ; | . This statement moves the precondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:M2> = <nat:9> * <var:P> ^ <nat:2> \land <var:U> = <nat:8> * <var:P> ^ <nat:3> \} $ toward the postcondition $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:U> = <nat:8> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> \} $ . This is ensured with the assignment law from usual Hoare logic . Advancing , we have the variable binding code \verb | <var:U> := <var:U> + <var:M0> | . This code forwards $ \{ <var:A> = <var:P> \land <var:M0> = <nat:8> \land <var:U> = <nat:8> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> \} $ toward $ \{ <var:A> = <var:P> \land <var:U> = <nat:8> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> \} $ . This is known to be sound by the assignment law from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M0> := <nat:8> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:A> ; <var:M2> := <var:M2> * <var:A> ; <var:M3> := <nat:8> ; <var:M3> := <var:M3> * <var:A> ; <var:M3> := <var:M3> * <var:A> ; <var:M3> := <var:M3> * <var:A> ; <var:U> := <var:M3> ; <var:U> := <var:U> + <var:M2> ; <var:U> := <var:U> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:A> = <var:P> }} <def:poly> {{ <var:U> = <nat:8> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:M3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:U> = <nat:8> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:M0> = <nat:8> /\ <var:U> = <nat:8> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:U> = <nat:8> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 