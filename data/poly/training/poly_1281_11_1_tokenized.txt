\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:D1> := <var:g> ; <var:D2> := <var:D1> * <var:g> ; <var:D3> := <var:D2> * <var:g> ; <var:D0> := <nat:6> ; <var:D1> := <var:D1> * <nat:5> ; <var:D2> := <var:D2> * <nat:4> ; <var:D3> := <var:D3> * <nat:3> ; <var:W> := <var:D3> <var:W> := <var:W> + <var:D2> <var:W> := <var:W> + <var:D1> <var:W> := <var:W> + <var:D0> \end{verbatim} Assuming that $ <var:g> = <var:Q> $ ahead of the evaluation of our code segment it holds that we see $ <var:W> = <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> + <nat:6> $ once list of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:Q> \} \\ <var:D1> := <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <var:Q> \} \\ <var:D2> := <var:D1> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <var:Q> \land <var:D2> = <var:Q> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <var:Q> \land <var:D2> = <var:Q> ^ <nat:2> \land <var:D3> = <var:Q> ^ <nat:3> \} \\ <var:D0> := <nat:6> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <var:Q> \land <var:D2> = <var:Q> ^ <nat:2> \land <var:D3> = <var:Q> ^ <nat:3> \land <var:D0> = <nat:6> \} \\ <var:D1> := <var:D1> * <nat:5> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <nat:5> \times <var:Q> \land <var:D2> = <var:Q> ^ <nat:2> \land <var:D3> = <var:Q> ^ <nat:3> \land <var:D0> = <nat:6> \} \\ <var:D2> := <var:D2> * <nat:4> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <nat:5> \times <var:Q> \land <var:D2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:D3> = <var:Q> ^ <nat:3> \land <var:D0> = <nat:6> \} \\ <var:D3> := <var:D3> * <nat:3> ; \\ \{ <var:g> = <var:Q> \land <var:D1> = <nat:5> \times <var:Q> \land <var:D2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:D3> = <nat:3> \times <var:Q> ^ <nat:3> \land <var:D0> = <nat:6> \} \\ <var:W> := <var:D3> \\ \{ <var:g> = <var:Q> \land <var:D1> = <nat:5> \times <var:Q> \land <var:D2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:D0> = <nat:6> \land <var:W> = <nat:3> \times <var:Q> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:D2> \\ \{ <var:g> = <var:Q> \land <var:D1> = <nat:5> \times <var:Q> \land <var:D0> = <nat:6> \land <var:W> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:D1> \\ \{ <var:g> = <var:Q> \land <var:D0> = <nat:6> \land <var:W> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> \} \\ <var:W> := <var:W> + <var:D0> \\ \{ <var:g> = <var:Q> \land <var:W> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:6> \} \end{eqnarray} The application of standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:g> = <var:Q> }} <var:D1> := <var:g> ; <var:D2> := <var:D1> * <var:g> ; <var:D3> := <var:D2> * <var:g> ; <var:D0> := <nat:6> ; <var:D1> := <var:D1> * <nat:5> ; <var:D2> := <var:D2> * <nat:4> ; <var:D3> := <var:D3> * <nat:3> ; <var:W> := <var:D3> <var:W> := <var:W> + <var:D2> <var:W> := <var:W> + <var:D1> <var:W> := <var:W> + <var:D0> {{ <var:W> = <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <var:Q> /\ <var:D2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <var:Q> /\ <var:D2> = <var:Q> ^ <nat:2> /\ <var:D3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <var:Q> /\ <var:D2> = <var:Q> ^ <nat:2> /\ <var:D3> = <var:Q> ^ <nat:3> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <nat:5> * <var:Q> /\ <var:D2> = <var:Q> ^ <nat:2> /\ <var:D3> = <var:Q> ^ <nat:3> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <nat:5> * <var:Q> /\ <var:D2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:D3> = <var:Q> ^ <nat:3> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <nat:5> * <var:Q> /\ <var:D2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:Q> ^ <nat:3> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <nat:5> * <var:Q> /\ <var:D2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:D0> = <nat:6> /\ <var:W> = <nat:3> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D1> = <nat:5> * <var:Q> /\ <var:D0> = <nat:6> /\ <var:W> = <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:W> = <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:W> = <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 