\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:K> ; <var:d2> := <var:d1> * <var:K> ; <var:d3> := <var:d2> * <var:K> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:6> ; <var:B> := <var:d3> <var:B> := <var:B> + <var:d2> <var:B> := <var:B> + <var:d1> <var:B> := <var:B> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:K> = <var:D> $ ( given some $ <var:D> $ ) prior to executing our segment of code it must be that $ <var:B> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> + <nat:8> $ . \end{theorem} \begin{proof} The argument for this set of commands is shown through this decorated series of instructions . \begin{eqnarray} \{ <var:K> = <var:D> \} \\ <var:d1> := <var:K> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <var:D> \} \\ <var:d2> := <var:d1> * <var:K> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <var:D> \land <var:d2> = <var:D> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:K> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <var:D> \land <var:d2> = <var:D> ^ <nat:2> \land <var:d3> = <var:D> ^ <nat:3> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <var:D> \land <var:d2> = <var:D> ^ <nat:2> \land <var:d3> = <var:D> ^ <nat:3> \land <var:d0> = <nat:8> \} \\ <var:d1> := <var:d1> * <nat:5> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <nat:5> * <var:D> \land <var:d2> = <var:D> ^ <nat:2> \land <var:d3> = <var:D> ^ <nat:3> \land <var:d0> = <nat:8> \} \\ <var:d2> := <var:d2> * <nat:2> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <nat:5> * <var:D> \land <var:d2> = <nat:2> * <var:D> ^ <nat:2> \land <var:d3> = <var:D> ^ <nat:3> \land <var:d0> = <nat:8> \} \\ <var:d3> := <var:d3> * <nat:6> ; \\ \{ <var:K> = <var:D> \land <var:d1> = <nat:5> * <var:D> \land <var:d2> = <nat:2> * <var:D> ^ <nat:2> \land <var:d3> = <nat:6> * <var:D> ^ <nat:3> \land <var:d0> = <nat:8> \} \\ <var:B> := <var:d3> \\ \{ <var:K> = <var:D> \land <var:d1> = <nat:5> * <var:D> \land <var:d2> = <nat:2> * <var:D> ^ <nat:2> \land <var:d0> = <nat:8> \land <var:B> = <nat:6> * <var:D> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:d2> \\ \{ <var:K> = <var:D> \land <var:d1> = <nat:5> * <var:D> \land <var:d0> = <nat:8> \land <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:d1> \\ \{ <var:K> = <var:D> \land <var:d0> = <nat:8> \land <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} \\ <var:B> := <var:B> + <var:d0> \\ \{ <var:K> = <var:D> \land <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:8> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:K> ; <var:d2> := <var:d1> * <var:K> ; <var:d3> := <var:d2> * <var:K> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:6> ; <var:B> := <var:d3> <var:B> := <var:B> + <var:d2> <var:B> := <var:B> + <var:d1> <var:B> := <var:B> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:K> = <var:D> }} <def:poly> {{ <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <var:D> /\ <var:d2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <var:D> /\ <var:d2> = <var:D> ^ <nat:2> /\ <var:d3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <var:D> /\ <var:d2> = <var:D> ^ <nat:2> /\ <var:d3> = <var:D> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <nat:5> * <var:D> /\ <var:d2> = <var:D> ^ <nat:2> /\ <var:d3> = <var:D> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <nat:5> * <var:D> /\ <var:d2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:d3> = <var:D> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <nat:5> * <var:D> /\ <var:d2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:D> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <nat:5> * <var:D> /\ <var:d2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:d0> = <nat:8> /\ <var:B> = <nat:6> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d1> = <nat:5> * <var:D> /\ <var:d0> = <nat:8> /\ <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:d0> = <nat:8> /\ <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:B> = <nat:6> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 