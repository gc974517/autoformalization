\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:3> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Given --- for every $ <var:K> \in \mathbb{Z}^+ $ --- that $ <var:J> = <var:K> $ ahead of interpreting our program it follows that we see $ <var:o> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:J> = <var:K> \} \\ <var:o> := <nat:2> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \} \\ <var:o> := <nat:4> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> + <nat:4> \} \\ <var:o> := <nat:4> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:4> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:2> \} \\ <var:o> := <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + \} \\ <var:o> := <nat:4> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:4> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> + <nat:2> \} \\ <var:o> := <nat:4> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:4> \} \\ <var:o> := <nat:4> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:4> \} \\ <var:o> := <nat:3> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:3> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> \\ \{ <var:J> = <var:K> \land <var:o> = <nat:2> \times <var:K> ^ <nat:10> + <nat:4> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:8> + <nat:2> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:2> \} \end{eqnarray} Therefore , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:2> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:3> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <def:poly> {{ <var:o> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:o> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 