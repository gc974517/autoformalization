\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:j0> := <nat:2> ; <var:j3> := <nat:7> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:X> := <var:j3> ; <var:X> := <var:X> + <var:j0> \end{verbatim} Allowing --- for all integers $ <var:f> $ --- it to be that $ <var:T> = <var:f> $ before the evaluation of the set of commands it follows that $ <var:X> = <nat:7> * <var:f> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare reasoning returns : \begin{eqnarray} \{ <var:T> = <var:f> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:T> = <var:f> \land <var:j0> = <nat:2> \} \\ <var:j3> := <nat:7> ; \\ \{ <var:T> = <var:f> \land <var:j0> = <nat:2> \land <var:j3> = <nat:7> \} \\ <var:j3> := <var:j3> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:j0> = <nat:2> \land <var:j3> = <nat:7> * <var:f> \} \\ <var:j3> := <var:j3> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:j0> = <nat:2> \land <var:j3> = <nat:7> * <var:f> ^ <nat:2> \} \\ <var:j3> := <var:j3> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:j0> = <nat:2> \land <var:j3> = <nat:7> * <var:f> ^ <nat:3> \} \\ <var:X> := <var:j3> ; \\ \{ <var:T> = <var:f> \land <var:j0> = <nat:2> \land <var:X> = <nat:7> * <var:f> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:j0> \\ \{ <var:T> = <var:f> \land <var:X> = <nat:7> * <var:f> ^ <nat:3> + <nat:2> \} \end{eqnarray} Furthering evaluating our program returns : \begin{eqnarray} \end{eqnarray} Thusly , the list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:T> = <var:f> }} <var:j0> := <nat:2> ; <var:j3> := <nat:7> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:X> := <var:j3> ; <var:X> := <var:X> + <var:j0> {{ <var:X> = <nat:7> * <var:f> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:j0> = <nat:2> /\ <var:j3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:j0> = <nat:2> /\ <var:j3> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:j0> = <nat:2> /\ <var:j3> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:j0> = <nat:2> /\ <var:j3> = <nat:7> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:j0> = <nat:2> /\ <var:X> = <nat:7> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:X> = <nat:7> * <var:f> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 