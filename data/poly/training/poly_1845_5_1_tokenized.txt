\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:G> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:6> ; <var:F> := <var:z1> <var:F> := <var:F> + <var:z0> \end{verbatim} Assume that $ <var:G> = <var:T> $ ahead of running this code segment then we see $ <var:F> = <nat:6> * <var:T> + <nat:3> $ after list of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:T> \} \\ <var:z1> := <var:G> ; \\ \{ <var:G> = <var:T> \land <var:z1> = <var:T> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:G> = <var:T> \land <var:z1> = <var:T> \land <var:z0> = <nat:3> \} \\ <var:z1> := <var:z1> * <nat:6> ; \\ \{ <var:G> = <var:T> \land <var:z1> = <nat:6> \cdot <var:T> \land <var:z0> = <nat:3> \} \\ <var:F> := <var:z1> \\ \{ <var:G> = <var:T> \land <var:z0> = <nat:3> \land <var:F> = <nat:6> \cdot <var:T> \} \end{eqnarray} Continuing evaluating this list of instructions gives us : \begin{eqnarray} <var:F> := <var:F> + <var:z0> \\ \{ <var:G> = <var:T> \land <var:F> = <nat:6> \cdot <var:T> + <nat:3> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:G> = <var:T> }} <var:z1> := <var:G> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:6> ; <var:F> := <var:z1> <var:F> := <var:F> + <var:z0> {{ <var:F> = <nat:6> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:z1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:z1> = <var:T> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:z1> = <nat:6> * <var:T> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:z0> = <nat:3> /\ <var:F> = <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:F> = <nat:6> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 