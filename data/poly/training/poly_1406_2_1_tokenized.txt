\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:9> ; <var:X> := <var:M0> \end{verbatim} Allow it to hold that $ <var:p> = <var:D> $ --- for any positive coefficients $ <var:D> $ --- before evaluating the set of instructions , then $ <var:X> = <nat:9> $ when series of commands has terminated . \end{theorem} \begin{proof} The method of proof for this set of instructions can be shown with this decorated segment of code . \begin{eqnarray} \{ <var:p> = <var:D> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:p> = <var:D> \land <var:M0> = <nat:9> \} \\ <var:X> := <var:M0> \\ \{ <var:p> = <var:D> \land <var:X> = <nat:9> \} \end{eqnarray} Utilizing Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:p> = <var:D> }} <var:M0> := <nat:9> ; <var:X> := <var:M0> {{ <var:X> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:X> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 