\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:J> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:9> ; <var:p> := <var:o1> <var:p> := <var:p> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Given ( given $ <var:e> \in \mathbb{N} $ ) that we have $ <var:J> = <var:e> $ prior to evaluating our program then we see $ <var:p> = <nat:9> * <var:e> + <nat:3> $ after set of instructions finishes . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:J> = <var:e> \} \\ <var:o1> := <var:J> ; \\ \{ <var:J> = <var:e> \land <var:o1> = <var:e> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:J> = <var:e> \land <var:o1> = <var:e> \land <var:o0> = <nat:3> \} \\ <var:o1> := <var:o1> * <nat:9> ; \\ \{ <var:J> = <var:e> \land <var:o1> = <nat:9> * <var:e> \land <var:o0> = <nat:3> \} \\ <var:p> := <var:o1> \\ \{ <var:J> = <var:e> \land <var:o0> = <nat:3> \land <var:p> = <nat:9> * <var:e> \} \\ <var:p> := <var:p> + <var:o0> \\ \{ <var:J> = <var:e> \land <var:p> = <nat:9> * <var:e> + <nat:3> \} \end{eqnarray} Hence , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:J> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:9> ; <var:p> := <var:o1> <var:p> := <var:p> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:J> = <var:e> }} <def:poly> {{ <var:p> = <nat:9> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:o1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:o1> = <var:e> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:o1> = <nat:9> * <var:e> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:o0> = <nat:3> /\ <var:p> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:p> = <nat:9> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 