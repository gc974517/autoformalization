\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:v1> := <var:M> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming , taking whole numbers $ <var:q> $ , $ <var:M> = <var:q> $ prior to the evaluation of this set of instructions it holds that $ <var:g> = <nat:2> * <var:q> + <nat:9> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Notice this decorated code . \begin{eqnarray} \{ <var:M> = <var:q> \} \\ <var:v1> := <var:M> ; \\ \{ <var:M> = <var:q> \land <var:v1> = <var:q> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:M> = <var:q> \land <var:v1> = <var:q> \land <var:v0> = <nat:9> \} \\ <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:M> = <var:q> \land <var:v1> = <nat:2> \times <var:q> \land <var:v0> = <nat:9> \} \end{eqnarray} Furthering running the code gives : \begin{eqnarray} <var:g> := <var:v1> \\ \{ <var:M> = <var:q> \land <var:v0> = <nat:9> \land <var:g> = <nat:2> \times <var:q> \} \\ <var:g> := <var:g> + <var:v0> \\ \{ <var:M> = <var:q> \land <var:g> = <nat:2> \times <var:q> + <nat:9> \} \end{eqnarray} Applying standard Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:M> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <def:poly> {{ <var:g> = <nat:2> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:v1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:v1> = <var:q> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:v1> = <nat:2> * <var:q> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:v0> = <nat:9> /\ <var:g> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:g> = <nat:2> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 