\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:4> + <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:4> + <var:L> * <var:x> ; <var:L> := <nat:4> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> \end{verbatim} Assuming $ <var:x> = <var:w> $ --- for all $ <var:w> $ --- prior to interpreting our list of commands , it holds that we see $ <var:L> = <nat:2> \cdot <var:w> ^ <nat:10> + <nat:4> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:w> \} \\ <var:L> := <nat:2> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \} \\ <var:L> := <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> + \} \\ <var:L> := <nat:4> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \} \\ <var:L> := <nat:2> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> + <nat:2> \} \\ <var:L> := <nat:2> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:2> \} \\ <var:L> := <nat:3> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:3> \} \\ <var:L> := <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:6> + <nat:4> \times <var:w> ^ <nat:4> + <nat:2> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + \} \\ <var:L> := <nat:4> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:7> + <nat:4> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:4> + <nat:2> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:4> \} \\ <var:L> := <nat:4> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:8> + <nat:4> \times <var:w> ^ <nat:6> + <nat:2> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> + <nat:4> \} \\ <var:L> := <nat:3> + <var:L> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:9> + <nat:4> \times <var:w> ^ <nat:7> + <nat:2> \times <var:w> ^ <nat:6> + <nat:2> \times <var:w> ^ <nat:5> + <nat:3> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:3> \} \\ <var:L> := <nat:3> + <var:L> * <var:x> \\ \{ <var:x> = <var:w> \land <var:L> = <nat:2> \times <var:w> ^ <nat:10> + <nat:4> \times <var:w> ^ <nat:8> + <nat:2> \times <var:w> ^ <nat:7> + <nat:2> \times <var:w> ^ <nat:6> + <nat:3> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:3> \} \end{eqnarray} Applying Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:4> + <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:4> + <var:L> * <var:x> ; <var:L> := <nat:4> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> {{ <var:L> = <nat:2> * <var:w> ^ <nat:10> + <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:L> = <nat:2> * <var:w> ^ <nat:10> + <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 