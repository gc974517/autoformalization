\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:R1> := <var:G> ; <var:R2> := <var:R1> * <var:G> ; <var:R3> := <var:R2> * <var:G> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:5> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:8> ; <var:f> := <var:R3> <var:f> := <var:f> + <var:R2> <var:f> := <var:f> + <var:R1> <var:f> := <var:f> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allowing $ <var:G> = <var:l> $ prior to the evaluation of our segment of code , then $ <var:f> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:6> \cdot <var:l> ^ <nat:2> + <nat:5> \cdot <var:l> + <nat:2> $ when list of commands is done executing . \end{theorem} \begin{proof} The argument for this code is accomplished through Hoare logic . Considering the following step found in the series of commands , we have the binding code \verb | <var:R1> := <var:G> ; | . This forwards the condition $ \{ <var:G> = <var:l> \} $ to the condition $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \} $ . Moving on to the next step , we see the variable update command \verb | <var:R2> := <var:R1> * <var:G> ; | . This moves $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \} $ into the condition $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \land <var:R2> = <var:l> ^ <nat:2> \} $ . Shifting focus toward the subsequent piece of code seen in our list of commands , we see the variable binding statement defining $ <var:R2> * <var:G> $ as $ <var:R3>$ . This line forwards $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \land <var:R2> = <var:l> ^ <nat:2> \} $ toward the condition $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \land <var:R2> = <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \} $ . This is guaranteed by the assignment scheme of standard Hoare techniques . Moving on to the proceeding piece of code seen in our program , the variable binding code yielding $ <nat:2> $ toward $ <var:R0>$ . This statement advances $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \land <var:R2> = <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \} $ as the postcondition $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \land <var:R2> = <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ . This is ensured using the assignment law defined in typical Hoare logic . Jumping to the upcoming piece of code seen in the series of instructions , we see the variable assignmet statement assigning $ <var:R1> * <nat:5> $ as $ <var:R1>$ . This line moves $ \{ <var:G> = <var:l> \land <var:R1> = <var:l> \land <var:R2> = <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ toward the postcondition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ . Immediately after , the variable binding statement \verb | <var:R2> := <var:R2> * <nat:6> ; | . This takes the condition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ to $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ . This is guaranteed through the assignment inference rule given by usual Hoare reasoning . Advancing to the next step , we see the variable assignmet code yielding $ <var:R3> * <nat:8> $ to $ <var:R3>$ . This command forwards the condition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:R3> = <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ toward the condition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:R3> = <nat:8> \times <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ . This is given by the assignment scheme from Hoare logic . Going to the next step , we see the binding command \verb | <var:f> := <var:R3> | . This command advances the precondition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:R3> = <nat:8> \times <var:l> ^ <nat:3> \land <var:R0> = <nat:2> \} $ into the postcondition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:R0> = <nat:2> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> \} $ . Jumping to the following piece of code found in the list of instructions , we have the binding line \verb | <var:f> := <var:f> + <var:R2> | . This command takes the precondition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:R0> = <nat:2> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> \} $ as $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R0> = <nat:2> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> \} $ . This is known to be sound through the assignment inference rule obtained from typical Hoare techniques . Keeping momentum , we have the variable binding code \verb | <var:f> := <var:f> + <var:R1> | . This code transfers the precondition $ \{ <var:G> = <var:l> \land <var:R1> = <nat:5> \times <var:l> \land <var:R0> = <nat:2> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> \} $ as the condition $ \{ <var:G> = <var:l> \land <var:R0> = <nat:2> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> \} $ . Moving forward to the next step , we have the variable assignmet code defining $ <var:f> + <var:R0$ as $ <var:f>$ . This code transfers $ \{ <var:G> = <var:l> \land <var:R0> = <nat:2> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> \} $ into the postcondition $ \{ <var:G> = <var:l> \land <var:f> = <nat:8> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> + <nat:2> \} $ . This is deduced using the assignment law from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:G> ; <var:R2> := <var:R1> * <var:G> ; <var:R3> := <var:R2> * <var:G> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:5> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:8> ; <var:f> := <var:R3> <var:f> := <var:f> + <var:R2> <var:f> := <var:f> + <var:R1> <var:f> := <var:f> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:G> = <var:l> }} <def:poly> {{ <var:f> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <var:l> /\ <var:R2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <var:l> /\ <var:R2> = <var:l> ^ <nat:2> /\ <var:R3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <var:l> /\ <var:R2> = <var:l> ^ <nat:2> /\ <var:R3> = <var:l> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <nat:5> * <var:l> /\ <var:R2> = <var:l> ^ <nat:2> /\ <var:R3> = <var:l> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <nat:5> * <var:l> /\ <var:R2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:R3> = <var:l> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <nat:5> * <var:l> /\ <var:R2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:R3> = <nat:8> * <var:l> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <nat:5> * <var:l> /\ <var:R2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:R0> = <nat:2> /\ <var:f> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R1> = <nat:5> * <var:l> /\ <var:R0> = <nat:2> /\ <var:f> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:R0> = <nat:2> /\ <var:f> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:f> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 