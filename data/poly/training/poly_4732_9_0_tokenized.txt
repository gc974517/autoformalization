\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:q> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:q> ; <var:l2> := <var:l2> * <var:q> ; <var:d> := <var:l2> ; <var:d> := <var:d> + <var:l1> ; <var:d> := <var:d> + <var:l0> \end{verbatim} Allow it to hold that $ <var:q> = <var:x> $ for some natural coefficients $ <var:x> $ ahead of evaluating our set of commands , it must be that we have $ <var:d> = <nat:3> \times <var:x> ^ <nat:2> + <nat:9> \times <var:x> + <nat:5> $ once code has exited . \end{theorem} \begin{proof} Demonstrating correctness of the code is shown through usual Hoare reasoning . Looking at the proceeding lines of codein the code segment , we have \verb | { <var:q> = <var:x> } <var:l0> := <nat:5> { <var:q> = <var:x> \land <var:l0> = <nat:5> } | and \verb | { <var:q> = <var:x> \land <var:l0> = <nat:5> } <var:l1> := <nat:9> { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> } | . Observing the subsequent line contained in the series of instructions , \verb | { <var:q> = <var:x> } <var:l0> := <nat:5> { <var:q> = <var:x> \land <var:l0> = <nat:5> } | . Moving on , we see \verb | { <var:q> = <var:x> } <var:l0> := <nat:5> { <var:q> = <var:x> \land <var:l0> = <nat:5> } | , \verb | { <var:q> = <var:x> \land <var:l0> = <nat:5> } <var:l1> := <nat:9> { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> } | , \verb | { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> } <var:l1> := <var:l1> * <var:q> { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> } | , \verb | { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> } <var:l2> := <nat:3> { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> \land <var:l2> = <nat:3> } | , \verb | { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> \land <var:l2> = <nat:3> } <var:l2> := <var:l2> * <var:q> { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> \land <var:l2> = <nat:3> \times <var:x> } | and \verb | { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> \land <var:l2> = <nat:3> \times <var:x> } <var:l2> := <var:l2> * <var:q> { <var:q> = <var:x> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \times <var:x> \land <var:l2> = <nat:3> \times <var:x> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:q> = <var:x> }} <var:l0> := <nat:5> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:q> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:q> ; <var:l2> := <var:l2> * <var:q> ; <var:d> := <var:l2> ; <var:d> := <var:d> + <var:l1> ; <var:d> := <var:d> + <var:l0> {{ <var:d> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:x> /\ <var:l2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:x> /\ <var:l2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:x> /\ <var:l2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:x> /\ <var:d> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:l0> = <nat:5> /\ <var:d> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:d> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 