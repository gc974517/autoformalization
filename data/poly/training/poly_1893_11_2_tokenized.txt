\begin{document} \begin{theorem} Let the following set of instructions : \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <nat:2> + <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <nat:2> + <var:d> * <var:H> ; <var:d> := <var:d> * <var:H> ; <var:d> := <nat:3> + <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> \end{verbatim} Allowing it to hold that $ <var:H> = <var:F> $ before executing the set of commands it must be that $ <var:d> = <nat:3> \cdot <var:F> ^ <nat:10> + <nat:1> \cdot <var:F> ^ <nat:9> + <nat:2> \cdot <var:F> ^ <nat:8> + <nat:1> \cdot <var:F> ^ <nat:7> + <nat:2> \cdot <var:F> ^ <nat:6> + <nat:3> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:1> $ once code is done . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be demonstrated by usual Hoare techniques . Following , \verb | { <var:H> = <var:F> } <var:d> := <nat:3> { <var:H> = <var:F> \land <var:d> = <nat:3> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> } <var:d> := <nat:1> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> + <nat:1> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> + <nat:1> } <var:d> := <nat:2> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> } <var:d> := <nat:1> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> } <var:d> := <nat:2> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> } <var:d> := <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + } <var:d> := <nat:3> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> } <var:d> := <nat:1> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + <nat:1> } | , \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + <nat:1> } <var:d> := <nat:1> + <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> } | and \verb | { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> } <var:d> := <var:d> * <var:H> { <var:H> = <var:F> \land <var:d> = <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + } | . This is sound using the inference rule of usual Hoare reasoning . Advancing to the next step , we see \verb | { <var:H> = <var:F> } <var:d> := <nat:3> { <var:H> = <var:F> \land <var:d> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:H> = <var:F> }} <var:d> := <nat:3> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <nat:2> + <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <nat:2> + <var:d> * <var:H> ; <var:d> := <var:d> * <var:H> ; <var:d> := <nat:3> + <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> ; <var:d> := <var:d> * <var:H> ; <var:d> := <nat:1> + <var:d> * <var:H> {{ <var:d> = <nat:3> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 