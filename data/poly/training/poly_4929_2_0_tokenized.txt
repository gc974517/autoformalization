\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:1> ; <var:z> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Allowing $ <var:O> = <var:Z> $ prior to running this set of instructions , then we have $ <var:z> = <nat:1> $ once segment of code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:Z> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:O> = <var:Z> \land <var:C0> = <nat:1> \} \\ <var:z> := <var:C0> \\ \{ <var:O> = <var:Z> \land <var:z> = <nat:1> \} \end{eqnarray} The application of standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:z> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:O> = <var:Z> }} <def:poly> {{ <var:z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 