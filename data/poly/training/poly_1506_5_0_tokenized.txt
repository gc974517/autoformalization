\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:b> ; <var:K> := <var:U1> ; <var:K> := <var:K> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:b> = <var:T> $ prior to interpreting this list of instructions it follows that we have $ <var:K> = <nat:3> \cdot <var:T> + <nat:4> $ when set of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be seen using standard Hoare reasoning . Now , we see the environment update statement \verb | <var:U0> := <nat:4> ; | . This takes $ \{ <var:b> = <var:T> \} $ to the condition $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \} $ . Stepping forward , we have the variable assignmet command letting $ <nat:3> $ as $ <var:U1>$ . This redefines $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \} $ to $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \} $ . Immediately following , we have the variable update code \verb | <var:U1> := <var:U1> * <var:b> ; | . This redefines the precondition $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \} $ as the postcondition $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \cdot <var:T> \} $ . This is known to be sound with the assignment inference rule defined in standard Hoare reasoning . Taking another step toward the proceeding command seen in our program , we see the binding code letting $ <var:U1> $ as $ <var:K>$ . This code advances the condition $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \cdot <var:T> \} $ as the condition $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \land <var:K> = <nat:3> \cdot <var:T> \} $ . Shifting focus toward the next command contained in the code , we have the assignment code letting $ <var:K> + <var:U0$ as $ <var:K>$ . This forwards the condition $ \{ <var:b> = <var:T> \land <var:U0> = <nat:4> \land <var:K> = <nat:3> \cdot <var:T> \} $ into the condition $ \{ <var:b> = <var:T> \land <var:K> = <nat:3> \cdot <var:T> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:b> ; <var:K> := <var:U1> ; <var:K> := <var:K> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:b> = <var:T> }} <def:poly> {{ <var:K> = <nat:3> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:U0> = <nat:4> /\ <var:K> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:K> = <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 