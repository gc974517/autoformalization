\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:2> + <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <nat:1> + <var:l> * <var:f> ; <var:l> := <nat:1> + <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <nat:4> + <var:l> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:f> = <var:Z> $ before executing the series of commands it follows that $ <var:l> = <nat:2> \cdot <var:Z> ^ <nat:8> + <nat:2> \cdot <var:Z> ^ <nat:7> + <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:4> $ once code segment is done executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:Z> \} \\ <var:l> := <nat:2> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> \} \\ <var:l> := <nat:2> + <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> + <nat:2> \} \\ <var:l> := <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + \} \\ <var:l> := <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + \} \\ <var:l> := <nat:1> + <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> \} \\ <var:l> := <nat:1> + <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> + <nat:1> \} \\ <var:l> := <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + \} \\ <var:l> := <var:l> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + \} \\ <var:l> := <nat:4> + <var:l> * <var:f> \\ \{ <var:f> = <var:Z> \land <var:l> = <nat:2> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:4> \} \end{eqnarray} As a consequence , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <nat:2> + <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <nat:1> + <var:l> * <var:f> ; <var:l> := <nat:1> + <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <var:l> * <var:f> ; <var:l> := <nat:4> + <var:l> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:f> = <var:Z> }} <def:poly> {{ <var:l> = <nat:2> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:l> = <nat:2> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 