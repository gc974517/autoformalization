\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:2> + <var:f> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing , for any $ <var:i> \in \mathbb{N} $ , that we have $ <var:X> = <var:i> $ before evaluating our set of instructions it follows that we see $ <var:f> = <nat:1> \cdot <var:i> + <nat:2> $ after list of commands has terminated . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:X> = <var:i> \} \\ <var:f> := <nat:1> ; \\ \{ <var:X> = <var:i> \land <var:f> = <nat:1> \} \\ <var:f> := <nat:2> + <var:f> * <var:X> \\ \{ <var:X> = <var:i> \land <var:f> = <nat:1> * <var:i> + <nat:2> \} \end{eqnarray} Thus , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:1> ; <var:f> := <nat:2> + <var:f> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:X> = <var:i> }} <def:poly> {{ <var:f> = <nat:1> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:f> = <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 