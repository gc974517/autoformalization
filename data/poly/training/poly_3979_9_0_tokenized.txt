\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:3> ; <var:V1> := <nat:6> ; <var:V1> := <var:V1> * <var:y> ; <var:V2> := <nat:7> ; <var:V2> := <var:V2> * <var:y> ; <var:V2> := <var:V2> * <var:y> ; <var:w> := <var:V2> ; <var:w> := <var:w> + <var:V1> ; <var:w> := <var:w> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Assuming $ <var:y> = <var:T> $ , with some positive numbers $ <var:T> $ , prior to evaluating the list of commands , then we see $ <var:w> = <nat:7> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:y> = <var:T> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \} \\ <var:V1> := <nat:6> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:V1> = <nat:6> \} \\ <var:V1> := <var:V1> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:V1> = <nat:6> \times <var:T> \} \\ <var:V2> := <nat:7> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:V1> = <nat:6> \times <var:T> \land <var:V2> = <nat:7> \} \\ <var:V2> := <var:V2> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:V1> = <nat:6> \times <var:T> \land <var:V2> = <nat:7> \times <var:T> \} \\ <var:V2> := <var:V2> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:V1> = <nat:6> \times <var:T> \land <var:V2> = <nat:7> \times <var:T> ^ <nat:2> \} \\ <var:w> := <var:V2> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:V1> = <nat:6> \times <var:T> \land <var:w> = <nat:7> \times <var:T> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:V1> ; \\ \{ <var:y> = <var:T> \land <var:V0> = <nat:3> \land <var:w> = <nat:7> \times <var:T> ^ <nat:2> + <nat:6> \times <var:T> \} \\ <var:w> := <var:w> + <var:V0> \\ \{ <var:y> = <var:T> \land <var:w> = <nat:7> \times <var:T> ^ <nat:2> + <nat:6> \times <var:T> + <nat:3> \} \end{eqnarray} Thus , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:V1> := <nat:6> ; <var:V1> := <var:V1> * <var:y> ; <var:V2> := <nat:7> ; <var:V2> := <var:V2> * <var:y> ; <var:V2> := <var:V2> * <var:y> ; <var:w> := <var:V2> ; <var:w> := <var:w> + <var:V1> ; <var:w> := <var:w> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <def:poly> {{ <var:w> = <nat:7> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:6> * <var:T> /\ <var:V2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:6> * <var:T> /\ <var:V2> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:6> * <var:T> /\ <var:V2> = <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:6> * <var:T> /\ <var:w> = <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:V0> = <nat:3> /\ <var:w> = <nat:7> * <var:T> ^ <nat:2> + <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:w> = <nat:7> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 