\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <var:h> * <var:b> ; <var:h> := <nat:2> + <var:h> * <var:b> ; <var:h> := <var:h> * <var:b> ; <var:h> := <var:h> * <var:b> ; <var:h> := <var:h> * <var:b> ; <var:h> := <nat:4> + <var:h> * <var:b> ; <var:h> := <nat:2> + <var:h> * <var:b> ; <var:h> := <nat:3> + <var:h> * <var:b> ; <var:h> := <nat:1> + <var:h> * <var:b> ; <var:h> := <nat:4> + <var:h> * <var:b> \end{verbatim} Assume it to hold that $ <var:b> = <var:E> $ --- given $ <var:E> \in \mathbb{Z}^+ $ --- prior to the evaluation of this program it must be that we see $ <var:h> = <nat:1> \times <var:E> ^ <nat:10> + <nat:2> \times <var:E> ^ <nat:8> + <nat:4> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:4> $ when set of instructions is done . \end{theorem} \begin{proof} The way to prove correctness for this program is shown by standard Hoare techniques . Taking another step toward the proceeding statements seen in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:b> = <var:E> \} & <var:h> := <nat:1> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} \\ \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} & <var:h> := <var:h> * <var:b> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> + \} \\ \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> + \} & <var:h> := <nat:2> + <var:h> * <var:b> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> \} \\ \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> \} & <var:h> := <var:h> * <var:b> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + \} \\ \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + \} & <var:h> := <var:h> * <var:b> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:2> + \} \end{tabular} This is sound by the environment update scheme found in typical Hoare techniques . Focusing on the subsequent bit of code in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:E> \} & <var:h> := <nat:1> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} \end{tabular} Paying attention to the upcoming lines found in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:E> \} & <var:h> := <nat:1> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} \\ \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} & <var:h> := <var:h> * <var:b> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> + \} \\ \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> + \} & <var:h> := <nat:2> + <var:h> * <var:b> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> \} \end{tabular} Shifting focus toward the proceeding piece of code found in the segment of code , \[ \begin{tabular} {rcl} \{ <var:b> = <var:E> \} & <var:h> := <nat:1> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} \end{tabular} Jumping to the next bit of code in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:E> \} & <var:h> := <nat:1> & \{ <var:b> = <var:E> \land <var:h> = <nat:1> \} \end{tabular} This is known to be sound using the variable binding rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:b> = <var:E> }} <var:h> := <nat:1> ; <var:h> := <var:h> * <var:b> ; <var:h> := <nat:2> + <var:h> * <var:b> ; <var:h> := <var:h> * <var:b> ; <var:h> := <var:h> * <var:b> ; <var:h> := <var:h> * <var:b> ; <var:h> := <nat:4> + <var:h> * <var:b> ; <var:h> := <nat:2> + <var:h> * <var:b> ; <var:h> := <nat:3> + <var:h> * <var:b> ; <var:h> := <nat:1> + <var:h> * <var:b> ; <var:h> := <nat:4> + <var:h> * <var:b> {{ <var:h> = <nat:1> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:5> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:h> = <nat:1> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 