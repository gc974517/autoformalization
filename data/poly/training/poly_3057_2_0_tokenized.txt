\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:3> ; <var:s> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given some whole numbers $ <var:m> $ --- it to hold that $ <var:a> = <var:m> $ prior to the evaluation of the list of commands , it must be that we see $ <var:s> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the code is shown using typical Hoare reasoning . After , we see \verb | { <var:a> = <var:m> } <var:O0> := <nat:3> { <var:a> = <var:m> \land <var:O0> = <nat:3> } | and \verb | { <var:a> = <var:m> \land <var:O0> = <nat:3> } <var:s> := <var:O0{ <var:a> = <var:m> \land <var:s> = <nat:3> } | . This is shown using the variable update rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:s> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:a> = <var:m> }} <def:poly> {{ <var:s> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:s> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 