\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:A1> := <var:O> ; <var:A2> := <var:A1> * <var:O> ; <var:A3> := <var:A2> * <var:O> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:7> ; <var:A2> := <var:A2> * <nat:5> ; <var:A3> := <var:A3> * <nat:2> ; <var:Q> := <var:A3> <var:Q> := <var:Q> + <var:A2> <var:Q> := <var:Q> + <var:A1> <var:Q> := <var:Q> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Allow that $ <var:O> = <var:b> $ ahead of interpreting our list of commands it follows that we see $ <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:2> $ once series of commands has exited . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:O> = <var:b> \} \\ <var:A1> := <var:O> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <var:b> \} \\ <var:A2> := <var:A1> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:2> \} \\ <var:A1> := <var:A1> * <nat:7> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <nat:7> * <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:2> \} \\ <var:A2> := <var:A2> * <nat:5> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <nat:7> * <var:b> \land <var:A2> = <nat:5> * <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:2> \} \\ <var:A3> := <var:A3> * <nat:2> ; \\ \{ <var:O> = <var:b> \land <var:A1> = <nat:7> * <var:b> \land <var:A2> = <nat:5> * <var:b> ^ <nat:2> \land <var:A3> = <nat:2> * <var:b> ^ <nat:3> \land <var:A0> = <nat:2> \} \\ <var:Q> := <var:A3> \\ \{ <var:O> = <var:b> \land <var:A1> = <nat:7> * <var:b> \land <var:A2> = <nat:5> * <var:b> ^ <nat:2> \land <var:A0> = <nat:2> \land <var:Q> = <nat:2> * <var:b> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:A2> \\ \{ <var:O> = <var:b> \land <var:A1> = <nat:7> * <var:b> \land <var:A0> = <nat:2> \land <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:A1> \\ \{ <var:O> = <var:b> \land <var:A0> = <nat:2> \land <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:7> * <var:b> \} \\ <var:Q> := <var:Q> + <var:A0> \\ \{ <var:O> = <var:b> \land <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:2> \} \end{eqnarray} Hence , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:O> ; <var:A2> := <var:A1> * <var:O> ; <var:A3> := <var:A2> * <var:O> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:7> ; <var:A2> := <var:A2> * <nat:5> ; <var:A3> := <var:A3> * <nat:2> ; <var:Q> := <var:A3> <var:Q> := <var:Q> + <var:A2> <var:Q> := <var:Q> + <var:A1> <var:Q> := <var:Q> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <def:poly> {{ <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <var:b> /\ <var:A2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <var:b> /\ <var:A2> = <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <var:b> /\ <var:A2> = <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <nat:7> * <var:b> /\ <var:A2> = <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <nat:7> * <var:b> /\ <var:A2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <nat:7> * <var:b> /\ <var:A2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <nat:7> * <var:b> /\ <var:A2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:A0> = <nat:2> /\ <var:Q> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A1> = <nat:7> * <var:b> /\ <var:A0> = <nat:2> /\ <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:A0> = <nat:2> /\ <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:Q> = <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 