\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:3> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:P> ; <var:f2> := <nat:8> ; <var:f2> := <var:f2> * <var:P> ; <var:f2> := <var:f2> * <var:P> ; <var:V> := <var:f2> ; <var:V> := <var:V> + <var:f1> ; <var:V> := <var:V> + <var:f0> \end{verbatim} Assume it to be that $ <var:P> = <var:U> $ before executing this code , then we have $ <var:V> = <nat:8> \cdot <var:U> ^ <nat:2> + <nat:8> \cdot <var:U> + <nat:3> $ once set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:U> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \} \end{eqnarray} Furthering interpreting this series of commands returns : \begin{eqnarray} <var:f1> := <nat:8> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \} \\ <var:f1> := <var:f1> * <var:P> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:U> \} \\ <var:f2> := <nat:8> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:U> \land <var:f2> = <nat:8> \} \\ <var:f2> := <var:f2> * <var:P> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:U> \land <var:f2> = <nat:8> \times <var:U> \} \\ <var:f2> := <var:f2> * <var:P> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:U> \land <var:f2> = <nat:8> \times <var:U> ^ <nat:2> \} \\ <var:V> := <var:f2> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:U> \land <var:V> = <nat:8> \times <var:U> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:f1> ; \\ \{ <var:P> = <var:U> \land <var:f0> = <nat:3> \land <var:V> = <nat:8> \times <var:U> ^ <nat:2> + <nat:8> \times <var:U> \} \\ <var:V> := <var:V> + <var:f0> \\ \{ <var:P> = <var:U> \land <var:V> = <nat:8> \times <var:U> ^ <nat:2> + <nat:8> \times <var:U> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:P> = <var:U> }} <var:f0> := <nat:3> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:P> ; <var:f2> := <nat:8> ; <var:f2> := <var:f2> * <var:P> ; <var:f2> := <var:f2> * <var:P> ; <var:V> := <var:f2> ; <var:V> := <var:V> + <var:f1> ; <var:V> := <var:V> + <var:f0> {{ <var:V> = <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:U> /\ <var:f2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:U> /\ <var:f2> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:U> /\ <var:f2> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:U> /\ <var:V> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:f0> = <nat:3> /\ <var:V> = <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:V> = <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 