\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:8> ; <var:n> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allowing $ <var:A> = <var:M> $ before running this code segment , it holds that we have $ <var:n> = <nat:8> $ once program terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be done using typical Hoare logic . Advancing on , we have the variable update line \verb | <var:u0> := <nat:8> ; | . This line transfers the condition $ \{ <var:A> = <var:M> \} $ toward the condition $ \{ <var:A> = <var:M> \land <var:u0> = <nat:8> \} $ . This is guaranteed by the assignment rule obtained from usual Hoare reasoning . Immediately after , we see the variable update command letting $ <var:u0$ toward $ <var:n>$ . This command moves $ \{ <var:A> = <var:M> \land <var:u0> = <nat:8> \} $ as the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:8> \} $ . This is rigorously given by the assignment rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:8> ; <var:n> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <def:poly> {{ <var:n> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 