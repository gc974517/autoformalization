\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:N> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Q> := <var:Y1> <var:Q> := <var:Q> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:N> = <var:W> $ prior to executing our segment of code it must be that $ <var:Q> = <nat:3> * <var:W> + <nat:3> $ after program executes . \end{theorem} \begin{proof} The proof of the program is clear using usual Hoare reasoning . Keeping momentum , the statement defining $ <var:N> $ to $ <var:Y1>$ . This redefines the condition $ \{ <var:N> = <var:W> \} $ into the postcondition $ \{ <var:N> = <var:W> \land <var:Y1> = <var:W> \} $ . Now , we have the command yielding $ <nat:3> $ to $ <var:Y0>$ . This code takes the precondition $ \{ <var:N> = <var:W> \land <var:Y1> = <var:W> \} $ toward $ \{ <var:N> = <var:W> \land <var:Y1> = <var:W> \land <var:Y0> = <nat:3> \} $ . Moving forward to the proceeding command seen in the series of commands , we see the variable assignmet line \verb | <var:Y1> := <var:Y1> * <nat:3> ; | . This command moves the condition $ \{ <var:N> = <var:W> \land <var:Y1> = <var:W> \land <var:Y0> = <nat:3> \} $ into the condition $ \{ <var:N> = <var:W> \land <var:Y1> = <nat:3> * <var:W> \land <var:Y0> = <nat:3> \} $ . Taking a look at the upcoming step in the list of commands , we have the variable binding statement binding $ <var:Y1$ as $ <var:Q>$ . This moves the precondition $ \{ <var:N> = <var:W> \land <var:Y1> = <nat:3> * <var:W> \land <var:Y0> = <nat:3> \} $ into the condition $ \{ <var:N> = <var:W> \land <var:Y0> = <nat:3> \land <var:Q> = <nat:3> * <var:W> \} $ . Honing in on the proceeding command in our segment of code , we see the line \verb | <var:Q> := <var:Q> + <var:Y0> | . This transfers $ \{ <var:N> = <var:W> \land <var:Y0> = <nat:3> \land <var:Q> = <nat:3> * <var:W> \} $ as the postcondition $ \{ <var:N> = <var:W> \land <var:Q> = <nat:3> * <var:W> + <nat:3> \} $ . This is given with the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:N> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Q> := <var:Y1> <var:Q> := <var:Q> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:N> = <var:W> }} <def:poly> {{ <var:Q> = <nat:3> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:Y1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:Y1> = <var:W> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:Y1> = <nat:3> * <var:W> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:Y0> = <nat:3> /\ <var:Q> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:Q> = <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 