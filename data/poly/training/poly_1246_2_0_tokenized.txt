\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:4> ; <var:w> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:P> = <var:f> $ prior to executing our series of commands it holds that $ <var:w> = <nat:4> $ when code is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be demonstrated by usual Hoare reasoning . Advancing to the upcoming statements in the segment of code , \begin{eqnarray} \{ <var:P> = <var:f> \} \, <var:Y0> := <nat:4> \, \{ <var:P> = <var:f> \land <var:Y0> = <nat:4> \} \\ \{ <var:P> = <var:f> \land <var:Y0> = <nat:4> \} \, <var:w> := <var:Y0\, \{ <var:P> = <var:f> \land <var:w> = <nat:4> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:4> ; <var:w> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:P> = <var:f> }} <def:poly> {{ <var:w> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:w> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 