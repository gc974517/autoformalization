\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:8> ; <var:J> := <var:i0> \end{verbatim} Allow , with some positive numbers $ <var:n> $ , that we have $ <var:F> = <var:n> $ prior to executing this series of commands , it must be that we have $ <var:J> = <nat:8> $ . \end{theorem} \begin{proof} Observe the following decorated list of instructions . \begin{eqnarray} \{ <var:F> = <var:n> \} \\ <var:i0> := <nat:8> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:8> \} \\ <var:J> := <var:i0> \\ \{ <var:F> = <var:n> \land <var:J> = <nat:8> \} \end{eqnarray} Applying typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:F> = <var:n> }} <var:i0> := <nat:8> ; <var:J> := <var:i0> {{ <var:J> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:J> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 