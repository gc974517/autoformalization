\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:C> := <nat:4> ; <var:C> := <nat:3> + <var:C> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Assuming that $ <var:W> = <var:r> $ ahead of the execution of this code segment , it holds that $ <var:C> = <nat:4> \cdot <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:W> = <var:r> \} \\ <var:C> := <nat:4> ; \\ \{ <var:W> = <var:r> \land <var:C> = <nat:4> \} \end{eqnarray} Advancing interpreting the code segment produces : \begin{eqnarray} <var:C> := <nat:3> + <var:C> * <var:W> \\ \{ <var:W> = <var:r> \land <var:C> = <nat:4> \cdot <var:r> + <nat:3> \} \end{eqnarray} Given the preceding argument , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:4> ; <var:C> := <nat:3> + <var:C> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:W> = <var:r> }} <def:poly> {{ <var:C> = <nat:4> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:C> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:C> = <nat:4> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 