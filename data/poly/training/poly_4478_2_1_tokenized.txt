\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:d> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assuming ( letting positive coefficients $ <var:j> $ ) it to hold that $ <var:e> = <var:j> $ ahead of interpreting the segment of code then we have $ <var:d> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our program is shown using usual Hoare logic . Further , we have \begin{verbatim} { <var:e> = <var:j> } <var:w0> := <nat:3> { <var:e> = <var:j> \land <var:w0> = <nat:3> } \end{verbatim} This is given using the variable binding rule given by usual Hoare techniques . Jumping to the next line seen in the program , we see \begin{verbatim} { <var:e> = <var:j> } <var:w0> := <nat:3> { <var:e> = <var:j> \land <var:w0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:d> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:e> = <var:j> }} <def:poly> {{ <var:d> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:d> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 