\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:5> ; <var:b> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given ( for every $ <var:e> $ ) $ <var:c> = <var:e> $ before interpreting our segment of code it must be that we have $ <var:b> = <nat:5> $ after series of instructions finishes . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:e> \} \\ <var:K0> := <nat:5> ; \\ \{ <var:c> = <var:e> \land <var:K0> = <nat:5> \} \\ <var:b> := <var:K0> \\ \{ <var:c> = <var:e> \land <var:b> = <nat:5> \} \end{eqnarray} As a result , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:5> ; <var:b> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:c> = <var:e> }} <def:poly> {{ <var:b> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:b> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 