\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:K> ; <var:V2> := <var:V1> * <var:K> ; <var:V3> := <var:V2> * <var:K> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:5> ; <var:V3> := <var:V3> * <nat:7> ; <var:p> := <var:V3> <var:p> := <var:p> + <var:V2> <var:p> := <var:p> + <var:V1> <var:p> := <var:p> + <var:V0> \end{verbatim} Assuming $ <var:K> = <var:J> $ prior to evaluating the set of commands it follows that we see $ <var:p> = <nat:7> \times <var:J> ^ <nat:3> + <nat:5> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> + <nat:3> $ after code has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is done with typical Hoare reasoning . Taking a look at the upcoming lines of codeseen in our code segment , we see \begin{verbatim} { <var:K> = <var:J> } <var:V1> := <var:K> { <var:K> = <var:J> \land <var:V1> = <var:J> } { <var:K> = <var:J> \land <var:V1> = <var:J> } <var:V2> := <var:V1> * <var:K> { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> } { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> } <var:V3> := <var:V2> * <var:K> { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> } { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> } <var:V0> := <nat:3> { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } <var:V1> := <var:V1> * <nat:8> { <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } { <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } <var:V2> := <var:V2> * <nat:5> { <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <nat:5> * <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } { <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <nat:5> * <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } <var:V3> := <var:V3> * <nat:7> { <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <nat:5> * <var:J> ^ <nat:2> \land <var:V3> = <nat:7> * <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } { <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <nat:5> * <var:J> ^ <nat:2> \land <var:V3> = <nat:7> * <var:J> ^ <nat:3> \land <var:V0> = <nat:3> } <var:p> := <var:V3{ <var:K> = <var:J> \land <var:V1> = <nat:8> * <var:J> \land <var:V2> = <nat:5> * <var:J> ^ <nat:2> \land <var:V0> = <nat:3> \land <var:p> = <nat:7> * <var:J> ^ <nat:3> } \end{verbatim} Going forward , \begin{verbatim} { <var:K> = <var:J> } <var:V1> := <var:K> { <var:K> = <var:J> \land <var:V1> = <var:J> } { <var:K> = <var:J> \land <var:V1> = <var:J> } <var:V2> := <var:V1> * <var:K> { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> } { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> } <var:V3> := <var:V2> * <var:K> { <var:K> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V3> = <var:J> ^ <nat:3> } \end{verbatim} This is known to be sound using the law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:K> = <var:J> }} <var:V1> := <var:K> ; <var:V2> := <var:V1> * <var:K> ; <var:V3> := <var:V2> * <var:K> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:5> ; <var:V3> := <var:V3> * <nat:7> ; <var:p> := <var:V3> <var:p> := <var:p> + <var:V2> <var:p> := <var:p> + <var:V1> <var:p> := <var:p> + <var:V0> {{ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <var:J> /\ <var:V2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <var:J> /\ <var:V2> = <var:J> ^ <nat:2> /\ <var:V3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <var:J> /\ <var:V2> = <var:J> ^ <nat:2> /\ <var:V3> = <var:J> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <nat:8> * <var:J> /\ <var:V2> = <var:J> ^ <nat:2> /\ <var:V3> = <var:J> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <nat:8> * <var:J> /\ <var:V2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:V3> = <var:J> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <nat:8> * <var:J> /\ <var:V2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:V3> = <nat:7> * <var:J> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <nat:8> * <var:J> /\ <var:V2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:V0> = <nat:3> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V1> = <nat:8> * <var:J> /\ <var:V0> = <nat:3> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:V0> = <nat:3> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:J> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 