\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:6> ; <var:n> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:h> = <var:J> $ before running the series of instructions it holds that we see $ <var:n> = <nat:6> $ once list of commands has terminated . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:h> = <var:J> \} \\ <var:D0> := <nat:6> ; \\ \{ <var:h> = <var:J> \land <var:D0> = <nat:6> \} \end{eqnarray} Furthering the execution of our list of instructions produces : \begin{eqnarray} <var:n> := <var:D0> \\ \{ <var:h> = <var:J> \land <var:n> = <nat:6> \} \end{eqnarray} As a consequence , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:6> ; <var:n> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:h> = <var:J> }} <def:poly> {{ <var:n> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:n> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 