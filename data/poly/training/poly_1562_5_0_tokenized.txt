\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:8> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:c> ; <var:y> := <var:F1> ; <var:y> := <var:y> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:c> = <var:T> $ before evaluating this code segment , it follows that we see $ <var:y> = <nat:9> \cdot <var:T> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be demonstrated by Hoare techniques . Stepping through , we have \begin{eqnarray} \{ <var:c> = <var:T> \} \, <var:F0> := <nat:8> \, \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \} \\ \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \} \, <var:F1> := <nat:9> \, \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \land <var:F1> = <nat:9> \} \\ \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \land <var:F1> = <nat:9> \} \, <var:F1> := <var:F1> * <var:c> \, \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \land <var:F1> = <nat:9> * <var:T> \} \end{eqnarray} Moving forward to the next step , \begin{eqnarray} \{ <var:c> = <var:T> \} \, <var:F0> := <nat:8> \, \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \} \end{eqnarray} This is rigorously given using the variable binding law given by typical Hoare logic . Moving on to the upcoming statement contained in the set of commands , we see \begin{eqnarray} \{ <var:c> = <var:T> \} \, <var:F0> := <nat:8> \, \{ <var:c> = <var:T> \land <var:F0> = <nat:8> \} \end{eqnarray} This is shown using the variable update rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:8> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:c> ; <var:y> := <var:F1> ; <var:y> := <var:y> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:c> = <var:T> }} <def:poly> {{ <var:y> = <nat:9> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:F0> = <nat:8> /\ <var:y> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:y> = <nat:9> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 