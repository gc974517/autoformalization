\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:1> ; <var:r> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:e> = <var:V> $ prior to running our segment of code , it follows that $ <var:r> = <nat:1> $ when program has exited . \end{theorem} \begin{proof} The proof of the series of instructions can be given using usual Hoare logic . Going to the next step , we see the statement \verb | <var:Y0> := <nat:1> ; | . This takes the precondition $ \{ <var:e> = <var:V> \} $ into $ \{ <var:e> = <var:V> \land <var:Y0> = <nat:1> \} $ . Next , we have the variable update code \verb | <var:r> := <var:Y0> | . This command forwards $ \{ <var:e> = <var:V> \land <var:Y0> = <nat:1> \} $ into the postcondition $ \{ <var:e> = <var:V> \land <var:r> = <nat:1> \} $ . This is ensured by the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:1> ; <var:r> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:e> = <var:V> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 