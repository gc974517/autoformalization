\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:3> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:j> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:j> ; <var:h2> := <var:h2> * <var:j> ; <var:H> := <var:h2> ; <var:H> := <var:H> + <var:h1> ; <var:H> := <var:H> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Assuming $ <var:j> = <var:o> $ --- given some $ <var:o> $ --- before the evaluation of our set of instructions , it must be that $ <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions can be accomplished with typical Hoare techniques . Advancing , we have the assignment command \verb | <var:h0> := <nat:3> ; | . This redefines the precondition $ \{ <var:j> = <var:o> \} $ into $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \} $ . This is sound through the assignment scheme given by Hoare reasoning . Honing in on the subsequent step contained in the list of commands , we see the variable update code \verb | <var:h1> := <nat:5> ; | . This line advances the precondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \} $ as $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \} $ . After , we see the code yielding $ <var:h1> * <var:j> $ toward $ <var:h1>$ . This transfers the condition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \} $ toward the condition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \} $ . Moving forward to the next step , we see the code giving $ <nat:6> $ into $ <var:h2>$ . This line redefines the precondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \} $ to $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:h2> = <nat:6> \} $ . This is known to be sound by the assignment rule obtained from standard Hoare reasoning . Immediately following , the variable binding code \verb | <var:h2> := <var:h2> * <var:j> ; | . This transfers the condition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:h2> = <nat:6> \} $ as the postcondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:h2> = <nat:6> * <var:o> \} $ . This is ensured with the assignment scheme given by typical Hoare logic . Taking a look at the upcoming bit of code in our list of instructions , the environment update code assigning $ <var:h2> * <var:j> $ to $ <var:h2>$ . This takes $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:h2> = <nat:6> * <var:o> \} $ to the postcondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:h2> = <nat:6> * <var:o> ^ <nat:2> \} $ . This is ensured by the assignment inference rule found in standard Hoare techniques . Jumping to the subsequent statement seen in the code segment , we see the binding command assigning $ <var:h2> $ as $ <var:H>$ . This redefines the precondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:h2> = <nat:6> * <var:o> ^ <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:H> = <nat:6> * <var:o> ^ <nat:2> \} $ . This is ensured with the assignment scheme given by typical Hoare reasoning . Immediately after , the variable binding command \verb | <var:H> := <var:H> + <var:h1> ; | . This forwards $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> * <var:o> \land <var:H> = <nat:6> * <var:o> ^ <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> \} $ . This is shown using the assignment law found in standard Hoare reasoning . Taking a look at the upcoming statement found in the set of commands , we see the line assigning $ <var:H> + <var:h0$ to $ <var:H>$ . This advances $ \{ <var:j> = <var:o> \land <var:h0> = <nat:3> \land <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> \} $ to the condition $ \{ <var:j> = <var:o> \land <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:j> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:j> ; <var:h2> := <var:h2> * <var:j> ; <var:H> := <var:h2> ; <var:H> := <var:H> + <var:h1> ; <var:H> := <var:H> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:j> = <var:o> }} <def:poly> {{ <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h2> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h2> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:o> /\ <var:H> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:h0> = <nat:3> /\ <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:H> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 