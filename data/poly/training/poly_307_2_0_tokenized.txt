\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:3> ; <var:c> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Given --- given all $ <var:r> $ --- it to hold that $ <var:J> = <var:r> $ prior to interpreting this set of commands , then we have $ <var:c> = <nat:3> $ once series of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is evident through Hoare logic . Looking at the following line of code found in our series of commands , we see the assignment command \verb | <var:H0> := <nat:3> ; | . This command forwards the precondition $ \{ <var:J> = <var:r> \} $ into the postcondition $ \{ <var:J> = <var:r> \land <var:H0> = <nat:3> \} $ . Moving on to the next piece of code seen in the series of instructions , we have the statement defining $ <var:H0$ to $ <var:c>$ . This redefines $ \{ <var:J> = <var:r> \land <var:H0> = <nat:3> \} $ to the postcondition $ \{ <var:J> = <var:r> \land <var:c> = <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:3> ; <var:c> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <def:poly> {{ <var:c> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:c> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 