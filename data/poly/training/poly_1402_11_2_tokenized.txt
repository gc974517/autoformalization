\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I> := <nat:1> ; <var:I> := <nat:4> + <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> ; <var:I> := <nat:1> + <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> ; <var:I> := <nat:1> + <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> ; <var:I> := <nat:1> + <var:I> * <var:i> ; <var:I> := <var:I> * <var:i> ; <var:I> := <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:i> = <var:N> $ , for every $ <var:N> \in \mathbb{N} $ , before the evaluation of this list of commands then we see $ <var:I> = <nat:1> \cdot <var:N> ^ <nat:10> + <nat:4> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:1> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:2> $ when code segment has finished executing . \end{theorem} \begin{proof} The argument for our list of instructions can be shown using Hoare techniques . Advancing to the subsequent command in the series of commands , the variable update code giving $ <nat:1> $ to $ <var:I>$ . This command takes $ \{ <var:i> = <var:N> \} $ into the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> \} $ . This is guaranteed by the assignment inference rule defined in Hoare logic . Stepping forward , we see the binding line \verb | <var:I> := <nat:4> + <var:I> * <var:i> ; | . This forwards the precondition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> \} $ into the postcondition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> + <nat:4> \} $ . Moving on to the next step , we have the variable update line \verb | <var:I> := <nat:2> + <var:I> * <var:i> ; | . This line transfers $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> + <nat:4> \} $ into $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> \} $ . Moving forward , we have the variable binding code \verb | <var:I> := <nat:1> + <var:I> * <var:i> ; | . This command redefines the precondition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> \} $ toward the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> \} $ . This is given using the assignment rule defined by typical Hoare reasoning . Moving forward , we see the variable assignmet statement binding $ <nat:2> + <var:I> * <var:i> $ into $ <var:I>$ . This transfers the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> \} $ into $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> \} $ . Now , the assignment statement \verb | <var:I> := <nat:1> + <var:I> * <var:i> ; | . This advances $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> \} $ toward the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> \} $ . This is deduced by the assignment rule defined in Hoare techniques . Looking at the subsequent piece of code contained in our set of commands , we see the variable update line \verb | <var:I> := <nat:2> + <var:I> * <var:i> ; | . This moves the precondition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> \} $ as the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> \} $ . This is shown to be logically sound using the assignment scheme given in standard Hoare logic . Shifting focus toward the proceeding piece of code contained in our segment of code , we see the variable binding command assigning $ <nat:1> + <var:I> * <var:i> $ into $ <var:I>$ . This code forwards the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> \} $ toward the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> \} $ . This is sound with the assignment law defined by usual Hoare logic . Shifting focus toward the following command in our series of commands , we have the statement defining $ <var:I> * <var:i> $ to $ <var:I>$ . This code advances the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> \} $ toward the postcondition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + \} $ . Jumping to the next piece of code found in the segment of code , we have the binding statement letting $ <var:I> * <var:i> $ to $ <var:I>$ . This advances the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + \} $ into $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + \} $ . Further , we have the variable update statement \verb | <var:I> := <nat:2> + <var:I> * <var:i> | . This command redefines $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + \} $ as the condition $ \{ <var:i> = <var:N> \land <var:I> = <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> \} $ . This is shown to be logically sound by the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:1> ; <var:I> := <nat:4> + <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> ; <var:I> := <nat:1> + <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> ; <var:I> := <nat:1> + <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> ; <var:I> := <nat:1> + <var:I> * <var:i> ; <var:I> := <var:I> * <var:i> ; <var:I> := <var:I> * <var:i> ; <var:I> := <nat:2> + <var:I> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:i> = <var:N> }} <def:poly> {{ <var:I> = <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:I> = <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 