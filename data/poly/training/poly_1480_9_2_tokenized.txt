\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <nat:4> + <var:x> * <var:m> ; <var:x> := <nat:1> + <var:x> * <var:m> ; <var:x> := <nat:1> + <var:x> * <var:m> ; <var:x> := <nat:2> + <var:x> * <var:m> ; <var:x> := <nat:3> + <var:x> * <var:m> ; <var:x> := <nat:3> + <var:x> * <var:m> ; <var:x> := <nat:4> + <var:x> * <var:m> ; <var:x> := <nat:2> + <var:x> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allow $ <var:m> = <var:T> $ , given some $ <var:T> \in \mathbb{Z}^+ $ , prior to running the list of instructions , then $ <var:x> = <nat:4> \times <var:T> ^ <nat:8> + <nat:4> \times <var:T> ^ <nat:7> + <nat:1> \times <var:T> ^ <nat:6> + <nat:1> \times <var:T> ^ <nat:5> + <nat:2> \times <var:T> ^ <nat:4> + <nat:3> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:2> $ once code segment is done . \end{theorem} \begin{proof} Arguing the correctness of the code segment is done using typical Hoare techniques . Focusing on the upcoming statements found in the code segment , \[ \begin{tabular} {rcl} \{ <var:m> = <var:T> \} & <var:x> := <nat:4> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} \\ \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} & <var:x> := <nat:4> + <var:x> * <var:m> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> * <var:T> + <nat:4> \} \\ \{ <var:m> = <var:T> \land <var:x> = <nat:4> * <var:T> + <nat:4> \} & <var:x> := <nat:1> + <var:x> * <var:m> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> \} \\ \{ <var:m> = <var:T> \land <var:x> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> \} & <var:x> := <nat:1> + <var:x> * <var:m> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:1> \} \end{tabular} This is known to be sound using the scheme from usual Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:T> \} & <var:x> := <nat:4> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} \end{tabular} Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:T> \} & <var:x> := <nat:4> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} \\ \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} & <var:x> := <nat:4> + <var:x> * <var:m> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> * <var:T> + <nat:4> \} \end{tabular} This is ensured through the variable update scheme defined by standard Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:T> \} & <var:x> := <nat:4> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} \end{tabular} This is rigorously given using the variable assignmet rule given in usual Hoare logic . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:m> = <var:T> \} & <var:x> := <nat:4> & \{ <var:m> = <var:T> \land <var:x> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:4> ; <var:x> := <nat:4> + <var:x> * <var:m> ; <var:x> := <nat:1> + <var:x> * <var:m> ; <var:x> := <nat:1> + <var:x> * <var:m> ; <var:x> := <nat:2> + <var:x> * <var:m> ; <var:x> := <nat:3> + <var:x> * <var:m> ; <var:x> := <nat:3> + <var:x> * <var:m> ; <var:x> := <nat:4> + <var:x> * <var:m> ; <var:x> := <nat:2> + <var:x> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:m> = <var:T> }} <def:poly> {{ <var:x> = <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 