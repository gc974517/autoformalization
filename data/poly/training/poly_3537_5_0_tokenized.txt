\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:O> ; <var:L> := <var:o1> ; <var:L> := <var:L> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:O> = <var:D> $ before interpreting this series of instructions , it follows that we have $ <var:L> = <nat:9> \cdot <var:D> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is accomplished by the below decorated series of instructions . \begin{eqnarray} \{ <var:O> = <var:D> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:O> = <var:D> \land <var:o0> = <nat:2> \} \\ <var:o1> := <nat:9> ; \\ \{ <var:O> = <var:D> \land <var:o0> = <nat:2> \land <var:o1> = <nat:9> \} \\ <var:o1> := <var:o1> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:o0> = <nat:2> \land <var:o1> = <nat:9> \cdot <var:D> \} \\ <var:L> := <var:o1> ; \\ \{ <var:O> = <var:D> \land <var:o0> = <nat:2> \land <var:L> = <nat:9> \cdot <var:D> \} \\ <var:L> := <var:L> + <var:o0> \\ \{ <var:O> = <var:D> \land <var:L> = <nat:9> \cdot <var:D> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:O> ; <var:L> := <var:o1> ; <var:L> := <var:L> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:O> = <var:D> }} <def:poly> {{ <var:L> = <nat:9> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:o0> = <nat:2> /\ <var:L> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:L> = <nat:9> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 