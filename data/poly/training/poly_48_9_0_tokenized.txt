\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:K> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:K> ; <var:w2> := <var:w2> * <var:K> ; <var:n> := <var:w2> ; <var:n> := <var:n> + <var:w1> ; <var:n> := <var:n> + <var:w0> \end{verbatim} Assuming that $ <var:K> = <var:o> $ --- for all positive coefficients $ <var:o> $ --- prior to interpreting our series of commands it holds that we have $ <var:n> = <nat:4> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:9> $ after code segment has exited . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:K> = <var:o> \} \\ <var:w0> := <nat:9> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \} \\ <var:w1> := <nat:4> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:w1> = <nat:4> \} \\ <var:w1> := <var:w1> * <var:K> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:w1> = <nat:4> \cdot <var:o> \} \\ <var:w2> := <nat:4> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:w1> = <nat:4> \cdot <var:o> \land <var:w2> = <nat:4> \} \\ <var:w2> := <var:w2> * <var:K> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:w1> = <nat:4> \cdot <var:o> \land <var:w2> = <nat:4> \cdot <var:o> \} \\ <var:w2> := <var:w2> * <var:K> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:w1> = <nat:4> \cdot <var:o> \land <var:w2> = <nat:4> \cdot <var:o> ^ <nat:2> \} \\ <var:n> := <var:w2> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:w1> = <nat:4> \cdot <var:o> \land <var:n> = <nat:4> \cdot <var:o> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:w1> ; \\ \{ <var:K> = <var:o> \land <var:w0> = <nat:9> \land <var:n> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> \} \\ <var:n> := <var:n> + <var:w0> \\ \{ <var:K> = <var:o> \land <var:n> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:9> \} \end{eqnarray} Therefore , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:K> = <var:o> }} <var:w0> := <nat:9> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:K> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:K> ; <var:w2> := <var:w2> * <var:K> ; <var:n> := <var:w2> ; <var:n> := <var:n> + <var:w1> ; <var:n> := <var:n> + <var:w0> {{ <var:n> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:4> * <var:o> /\ <var:w2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:4> * <var:o> /\ <var:w2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:4> * <var:o> /\ <var:w2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:4> * <var:o> /\ <var:n> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:w0> = <nat:9> /\ <var:n> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:n> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 