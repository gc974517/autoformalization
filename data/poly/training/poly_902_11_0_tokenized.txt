\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:4> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:m> ; <var:I2> := <var:I2> * <var:m> ; <var:I3> := <nat:3> ; <var:I3> := <var:I3> * <var:m> ; <var:I3> := <var:I3> * <var:m> ; <var:I3> := <var:I3> * <var:m> ; <var:d> := <var:I3> ; <var:d> := <var:d> + <var:I2> ; <var:d> := <var:d> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allow that $ <var:m> = <var:f> $ prior to running this list of commands , it holds that we see $ <var:d> = <nat:3> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions can be given using standard Hoare reasoning . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:f> \} & <var:I0> := <nat:4> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \} & <var:I2> := <nat:9> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> \} & <var:I2> := <var:I2> * <var:m> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> \} & <var:I2> := <var:I2> * <var:m> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> ^ <nat:2> \} \end{tabular} Moving on to the subsequent bits of codein the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:f> \} & <var:I0> := <nat:4> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \} & <var:I2> := <nat:9> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> \} & <var:I2> := <var:I2> * <var:m> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> \} & <var:I2> := <var:I2> * <var:m> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> ^ <nat:2> \} \\ \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> ^ <nat:2> \} & <var:I3> := <nat:3> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \land <var:I2> = <nat:9> * <var:f> ^ <nat:2> \land <var:I3> = <nat:3> \} \end{tabular} This is sound using the assignment scheme defined by usual Hoare reasoning . Honing in on the following line found in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:m> = <var:f> \} & <var:I0> := <nat:4> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \} \end{tabular} This is sound using the variable update law from typical Hoare logic . Focusing on the subsequent piece of code contained in our list of instructions , \[ \begin{tabular} {rcl} \{ <var:m> = <var:f> \} & <var:I0> := <nat:4> & \{ <var:m> = <var:f> \land <var:I0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:m> ; <var:I2> := <var:I2> * <var:m> ; <var:I3> := <nat:3> ; <var:I3> := <var:I3> * <var:m> ; <var:I3> := <var:I3> * <var:m> ; <var:I3> := <var:I3> * <var:m> ; <var:d> := <var:I3> ; <var:d> := <var:d> + <var:I2> ; <var:d> := <var:d> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:m> = <var:f> }} <def:poly> {{ <var:d> = <nat:3> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:I3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:d> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:I0> = <nat:4> /\ <var:d> = <nat:3> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d> = <nat:3> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 