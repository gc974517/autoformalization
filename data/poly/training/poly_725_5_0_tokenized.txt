\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:y0> := <nat:7> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:V> ; <var:U> := <var:y1> ; <var:U> := <var:U> + <var:y0> \end{verbatim} Allowing --- given positive numbers $ <var:p> $ --- that $ <var:V> = <var:p> $ before the execution of our series of instructions , it follows that $ <var:U> = <nat:3> \times <var:p> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:p> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:V> = <var:p> \land <var:y0> = <nat:7> \} \\ <var:y1> := <nat:3> ; \\ \{ <var:V> = <var:p> \land <var:y0> = <nat:7> \land <var:y1> = <nat:3> \} \\ <var:y1> := <var:y1> * <var:V> ; \\ \{ <var:V> = <var:p> \land <var:y0> = <nat:7> \land <var:y1> = <nat:3> * <var:p> \} \\ <var:U> := <var:y1> ; \\ \{ <var:V> = <var:p> \land <var:y0> = <nat:7> \land <var:U> = <nat:3> * <var:p> \} \\ <var:U> := <var:U> + <var:y0> \\ \{ <var:V> = <var:p> \land <var:U> = <nat:3> * <var:p> + <nat:7> \} \end{eqnarray} Applying typical Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <var:y0> := <nat:7> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:V> ; <var:U> := <var:y1> ; <var:U> := <var:U> + <var:y0> {{ <var:U> = <nat:3> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:y0> = <nat:7> /\ <var:U> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:U> = <nat:3> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 