\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:p> ; <var:P> := <var:s1> ; <var:P> := <var:P> + <var:s0> \end{verbatim} Allowing that $ <var:p> = <var:F> $ for natural numbers $ <var:F> $ prior to the execution of our segment of code , then $ <var:P> = <nat:4> \cdot <var:F> + <nat:4> $ once set of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:F> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:p> = <var:F> \land <var:s0> = <nat:4> \} \\ <var:s1> := <nat:4> ; \\ \{ <var:p> = <var:F> \land <var:s0> = <nat:4> \land <var:s1> = <nat:4> \} \\ <var:s1> := <var:s1> * <var:p> ; \\ \{ <var:p> = <var:F> \land <var:s0> = <nat:4> \land <var:s1> = <nat:4> \times <var:F> \} \\ <var:P> := <var:s1> ; \\ \{ <var:p> = <var:F> \land <var:s0> = <nat:4> \land <var:P> = <nat:4> \times <var:F> \} \\ <var:P> := <var:P> + <var:s0> \\ \{ <var:p> = <var:F> \land <var:P> = <nat:4> \times <var:F> + <nat:4> \} \end{eqnarray} Using usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:p> = <var:F> }} <var:s0> := <nat:4> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:p> ; <var:P> := <var:s1> ; <var:P> := <var:P> + <var:s0> {{ <var:P> = <nat:4> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:s0> = <nat:4> /\ <var:P> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:P> = <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 