\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:F> ; <var:b2> := <var:b1> * <var:F> ; <var:b3> := <var:b2> * <var:F> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:8> ; <var:b3> := <var:b3> * <nat:7> ; <var:g> := <var:b3> <var:g> := <var:g> + <var:b1> <var:g> := <var:g> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assume assuming some $ <var:Y> $ $ <var:F> = <var:Y> $ ahead of interpreting this set of commands , it follows that $ <var:g> = <nat:7> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> + <nat:5> $ once series of commands is done executing . \end{theorem} \begin{proof} The course of logic for the set of commands can be accomplished by usual Hoare techniques . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:Y> \} & <var:b1> := <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} \\ \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} & <var:b2> := <var:b1> * <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} \\ \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} & <var:b3> := <var:b2> * <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \} \end{tabular} Taking a look at the proceeding pieces of code found in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:Y> \} & <var:b1> := <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} \\ \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} & <var:b2> := <var:b1> * <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} \\ \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} & <var:b3> := <var:b2> * <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \} \end{tabular} This is rigorously given through the environment update law from typical Hoare techniques . Focusing on the next command found in our code segment , \[ \begin{tabular} {rcl} \{ <var:F> = <var:Y> \} & <var:b1> := <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} \end{tabular} This is guaranteed through the assignment scheme found in typical Hoare logic . Observing the next line contained in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:Y> \} & <var:b1> := <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} \end{tabular} This is known to be sound with the binding inference rule found in usual Hoare logic . Next , \[ \begin{tabular} {rcl} \{ <var:F> = <var:Y> \} & <var:b1> := <var:F> & \{ <var:F> = <var:Y> \land <var:b1> = <var:Y> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b1> := <var:F> ; <var:b2> := <var:b1> * <var:F> ; <var:b3> := <var:b2> * <var:F> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:8> ; <var:b3> := <var:b3> * <nat:7> ; <var:g> := <var:b3> <var:g> := <var:g> + <var:b1> <var:g> := <var:g> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:F> = <var:Y> }} <def:poly> {{ <var:g> = <nat:7> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <nat:8> * <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <nat:8> * <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <nat:7> * <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b1> = <nat:8> * <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b0> = <nat:5> /\ <var:g> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:b0> = <nat:5> /\ <var:g> = <nat:7> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:g> = <nat:7> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 