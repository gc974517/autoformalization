\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:8> ; <var:B> := <var:K0> \end{verbatim} Allowing it to hold that $ <var:R> = <var:t> $ ahead of executing our series of commands , it must be that we have $ <var:B> = <nat:8> $ when set of commands exits . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:R> = <var:t> \} \\ <var:K0> := <nat:8> ; \\ \{ <var:R> = <var:t> \land <var:K0> = <nat:8> \} \\ <var:B> := <var:K0> \\ \{ <var:R> = <var:t> \land <var:B> = <nat:8> \} \end{eqnarray} As a consequence , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:R> = <var:t> }} <var:K0> := <nat:8> ; <var:B> := <var:K0> {{ <var:B> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:B> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 