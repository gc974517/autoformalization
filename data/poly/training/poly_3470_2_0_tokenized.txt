\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:h0> := <nat:8> ; <var:c> := <var:h0> \end{verbatim} Assume --- given some $ <var:G> \in \mathbb{N} $ --- it to be that $ <var:z> = <var:G> $ ahead of the execution of the series of instructions , it must be that we have $ <var:c> = <nat:8> $ . \end{theorem} \begin{proof} The proof of our list of commands is accomplished by usual Hoare reasoning . Taking another step toward the upcoming piece of code contained in the list of instructions , we have the assignment command defining $ <nat:8> $ toward $ <var:h0>$ . This forwards $ \{ <var:z> = <var:G> \} $ to $ \{ <var:z> = <var:G> \land <var:h0> = <nat:8> \} $ . Moving forward to the next step , we have the variable binding statement yielding $ <var:h0$ as $ <var:c>$ . This transfers the condition $ \{ <var:z> = <var:G> \land <var:h0> = <nat:8> \} $ toward the condition $ \{ <var:z> = <var:G> \land <var:c> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:z> = <var:G> }} <var:h0> := <nat:8> ; <var:c> := <var:h0> {{ <var:c> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:c> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 