\begin{document} \begin{theorem} Let the following program in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:6> ; <var:i> := <var:y0> \end{verbatim} Given that we have $ <var:o> = <var:V> $ ahead of the execution of our list of instructions it follows that we have $ <var:i> = <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is shown through typical Hoare reasoning . Following , we see the assignment statement \verb | <var:y0> := <nat:6> ; | . This line forwards $ \{ <var:o> = <var:V> \} $ as the postcondition $ \{ <var:o> = <var:V> \land <var:y0> = <nat:6> \} $ . This is rigorously given by the assignment law obtained from Hoare logic . Looking at the proceeding statement seen in the code , we have the line \verb | <var:i> := <var:y0> | . This command takes the condition $ \{ <var:o> = <var:V> \land <var:y0> = <nat:6> \} $ as $ \{ <var:o> = <var:V> \land <var:i> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:o> = <var:V> }} <var:y0> := <nat:6> ; <var:i> := <var:y0> {{ <var:i> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:i> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 