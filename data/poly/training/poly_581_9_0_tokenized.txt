\begin{document} \begin{theorem} Consider the following program such that \begin{verbatim} <var:T0> := <nat:6> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:y> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:y> ; <var:T2> := <var:T2> * <var:y> ; <var:q> := <var:T2> ; <var:q> := <var:q> + <var:T1> ; <var:q> := <var:q> + <var:T0> \end{verbatim} Allowing that we have $ <var:y> = <var:w> $ before the evaluation of our code segment , it holds that we see $ <var:q> = <nat:8> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions can be demonstrated using usual Hoare reasoning . Advancing on , the statement \verb | <var:T0> := <nat:6> ; | . This forwards $ \{ <var:y> = <var:w> \} $ toward $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \} $ . Honing in on the upcoming command in our program , the assignment statement yielding $ <nat:4> $ as $ <var:T1>$ . This command forwards the precondition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \} $ as the condition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \} $ . This is deduced by the assignment law given by standard Hoare logic . Looking at the following command in our series of commands , the assignment line \verb | <var:T1> := <var:T1> * <var:y> ; | . This code redefines $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \} $ into the postcondition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \} $ . This is guaranteed using the assignment law from Hoare logic . Advancing to the following line in the program , we have the variable binding statement \verb | <var:T2> := <nat:8> ; | . This code takes the precondition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \} $ as the condition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:T2> = <nat:8> \} $ . Immediately following , the variable binding statement \verb | <var:T2> := <var:T2> * <var:y> ; | . This moves $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:T2> = <nat:8> \} $ to the postcondition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:T2> = <nat:8> \times <var:w> \} $ . This is shown to be logically sound using the assignment rule from Hoare reasoning . Considering the subsequent line of code found in the code , we see the environment update code defining $ <var:T2> * <var:y> $ to $ <var:T2>$ . This moves $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:T2> = <nat:8> \times <var:w> \} $ to the postcondition $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:T2> = <nat:8> \times <var:w> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule given by Hoare reasoning . Considering the following bit of code seen in the code , the environment update line \verb | <var:q> := <var:T2> ; | . This forwards $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:T2> = <nat:8> \times <var:w> ^ <nat:2> \} $ as $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:q> = <nat:8> \times <var:w> ^ <nat:2> \} $ . This is rigorously given by the assignment law of typical Hoare techniques . Honing in on the next line of code seen in our code segment , we see the variable assignmet statement assigning $ <var:q> + <var:T1> $ to $ <var:q>$ . This redefines $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:T1> = <nat:4> \times <var:w> \land <var:q> = <nat:8> \times <var:w> ^ <nat:2> \} $ to $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:q> = <nat:8> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> \} $ . This is ensured by the assignment law given in Hoare techniques . Looking at the next command seen in the series of commands , we have the command \verb | <var:q> := <var:q> + <var:T0> | . This statement advances $ \{ <var:y> = <var:w> \land <var:T0> = <nat:6> \land <var:q> = <nat:8> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> \} $ to $ \{ <var:y> = <var:w> \land <var:q> = <nat:8> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:6> \} $ . This is deduced by the assignment law given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:y> = <var:w> }} <var:T0> := <nat:6> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:y> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:y> ; <var:T2> := <var:T2> * <var:y> ; <var:q> := <var:T2> ; <var:q> := <var:q> + <var:T1> ; <var:q> := <var:q> + <var:T0> {{ <var:q> = <nat:8> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:4> * <var:w> /\ <var:T2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:4> * <var:w> /\ <var:T2> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:4> * <var:w> /\ <var:T2> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:4> * <var:w> /\ <var:q> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:T0> = <nat:6> /\ <var:q> = <nat:8> * <var:w> ^ <nat:2> + <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:q> = <nat:8> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 