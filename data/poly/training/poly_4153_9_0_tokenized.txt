\begin{document} \begin{theorem} Define the following code segment as follows \begin{verbatim} <var:D0> := <nat:1> ; <var:D1> := <nat:8> ; <var:D1> := <var:D1> * <var:n> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:n> ; <var:D2> := <var:D2> * <var:n> ; <var:N> := <var:D2> ; <var:N> := <var:N> + <var:D1> ; <var:N> := <var:N> + <var:D0> \end{verbatim} Allow --- given any natural numbers $ <var:Z> $ --- $ <var:n> = <var:Z> $ before executing this list of commands it holds that we see $ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:1> $ after program exits . \end{theorem} \begin{proof} The argument for this code can be seen by typical Hoare reasoning . Following , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:Z> \} & <var:D0> := <nat:1> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} & <var:D1> := <nat:8> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \land <var:D1> = <nat:8> \} \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \land <var:D1> = <nat:8> \} & <var:D1> := <var:D1> * <var:n> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \land <var:D1> = <nat:8> * <var:Z> \} \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \land <var:D1> = <nat:8> * <var:Z> \} & <var:D2> := <nat:5> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \land <var:D1> = <nat:8> * <var:Z> \land <var:D2> = <nat:5> \} \end{tabular} This is shown to be logically sound using the environment update rule of Hoare reasoning . Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:n> = <var:Z> \} & <var:D0> := <nat:1> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} \end{tabular} Moving on to the upcoming command found in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:Z> \} & <var:D0> := <nat:1> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} \end{tabular} Considering the following statement seen in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:Z> \} & <var:D0> := <nat:1> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} \end{tabular} This is rigorously given with the variable update scheme from Hoare logic . Further , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:Z> \} & <var:D0> := <nat:1> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} \end{tabular} Considering the following line seen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:Z> \} & <var:D0> := <nat:1> & \{ <var:n> = <var:Z> \land <var:D0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:D0> := <nat:1> ; <var:D1> := <nat:8> ; <var:D1> := <var:D1> * <var:n> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:n> ; <var:D2> := <var:D2> * <var:n> ; <var:N> := <var:D2> ; <var:N> := <var:N> + <var:D1> ; <var:N> := <var:N> + <var:D0> {{ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:8> * <var:Z> /\ <var:D2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:8> * <var:Z> /\ <var:D2> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:8> * <var:Z> /\ <var:D2> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:8> * <var:Z> /\ <var:N> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 