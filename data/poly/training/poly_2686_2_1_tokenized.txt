\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:3> ; <var:l> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Assuming that we have $ <var:w> = <var:U> $ , for $ <var:U> \in \mathbb{Z}^+ $ , prior to the execution of the segment of code , it holds that we see $ <var:l> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is accomplished by usual Hoare techniques . Taking another step toward the next line in our set of commands , the environment update command \verb | <var:v0> := <nat:3> ; | . This takes $ \{ <var:w> = <var:U> \} $ as the condition $ \{ <var:w> = <var:U> \land <var:v0> = <nat:3> \} $ . Advancing to the following piece of code in the program , we have the variable update code defining $ <var:v0$ toward $ <var:l>$ . This code takes the condition $ \{ <var:w> = <var:U> \land <var:v0> = <nat:3> \} $ toward the condition $ \{ <var:w> = <var:U> \land <var:l> = <nat:3> \} $ . This is deduced through the assignment rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:3> ; <var:l> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <def:poly> {{ <var:l> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:l> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 