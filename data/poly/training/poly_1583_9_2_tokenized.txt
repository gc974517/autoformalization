\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:G> := <nat:3> ; <var:G> := <nat:2> + <var:G> * <var:U> ; <var:G> := <var:G> * <var:U> ; <var:G> := <nat:4> + <var:G> * <var:U> ; <var:G> := <nat:2> + <var:G> * <var:U> ; <var:G> := <nat:3> + <var:G> * <var:U> ; <var:G> := <nat:1> + <var:G> * <var:U> ; <var:G> := <nat:2> + <var:G> * <var:U> ; <var:G> := <nat:4> + <var:G> * <var:U> \end{verbatim} Assuming that $ <var:U> = <var:z> $ ahead of executing our set of instructions , it must be that we see $ <var:G> = <nat:3> \times <var:z> ^ <nat:8> + <nat:2> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:4> $ when series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for the set of instructions is given through standard Hoare logic . Advancing to the following line found in our list of instructions , we see \begin{verbatim} { <var:U> = <var:z> } <var:G> := <nat:3> { <var:U> = <var:z> \land <var:G> = <nat:3> } \end{verbatim} This is given with the assignment inference rule given by typical Hoare logic . Shifting focus toward the following bits of codein the code , we see \begin{verbatim} { <var:U> = <var:z> } <var:G> := <nat:3> { <var:U> = <var:z> \land <var:G> = <nat:3> } { <var:U> = <var:z> \land <var:G> = <nat:3> } <var:G> := <nat:2> + <var:G> * <var:U> { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> + <nat:2> } { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> + <nat:2> } <var:G> := <var:G> * <var:U> { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + } { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + } <var:G> := <nat:4> + <var:G> * <var:U> { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> } { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> } <var:G> := <nat:2> + <var:G> * <var:U> { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> + <nat:2> } { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> + <nat:2> } <var:G> := <nat:3> + <var:G> * <var:U> { <var:U> = <var:z> \land <var:G> = <nat:3> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> } \end{verbatim} This is given by the environment update inference rule given by standard Hoare reasoning . Taking a look at the following statement seen in the list of commands , we have \begin{verbatim} { <var:U> = <var:z> } <var:G> := <nat:3> { <var:U> = <var:z> \land <var:G> = <nat:3> } \end{verbatim} This is rigorously given using the assignment law obtained from Hoare techniques . Taking another step toward the subsequent step contained in our list of instructions , we see \begin{verbatim} { <var:U> = <var:z> } <var:G> := <nat:3> { <var:U> = <var:z> \land <var:G> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:U> = <var:z> }} <var:G> := <nat:3> ; <var:G> := <nat:2> + <var:G> * <var:U> ; <var:G> := <var:G> * <var:U> ; <var:G> := <nat:4> + <var:G> * <var:U> ; <var:G> := <nat:2> + <var:G> * <var:U> ; <var:G> := <nat:3> + <var:G> * <var:U> ; <var:G> := <nat:1> + <var:G> * <var:U> ; <var:G> := <nat:2> + <var:G> * <var:U> ; <var:G> := <nat:4> + <var:G> * <var:U> {{ <var:G> = <nat:3> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:G> = <nat:3> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 