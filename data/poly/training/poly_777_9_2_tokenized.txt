\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:k> := <nat:2> ; <var:k> := <var:k> * <var:p> ; <var:k> := <nat:4> + <var:k> * <var:p> ; <var:k> := <var:k> * <var:p> ; <var:k> := <nat:3> + <var:k> * <var:p> ; <var:k> := <nat:1> + <var:k> * <var:p> ; <var:k> := <nat:3> + <var:k> * <var:p> ; <var:k> := <nat:4> + <var:k> * <var:p> ; <var:k> := <nat:3> + <var:k> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Allowing $ <var:p> = <var:u> $ before interpreting this program it holds that $ <var:k> = <nat:2> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this segment of code is clear with typical Hoare techniques . Now , we have \verb | { <var:p> = <var:u> } <var:k> := <nat:2> { <var:p> = <var:u> \land <var:k> = <nat:2> } | . This is shown by the assignment inference rule defined by usual Hoare reasoning . Taking a look at the next command seen in the program , we have \verb | { <var:p> = <var:u> } <var:k> := <nat:2> { <var:p> = <var:u> \land <var:k> = <nat:2> } | . This is guaranteed with the environment update inference rule defined by typical Hoare logic . Moving forward to the next step , we see \verb | { <var:p> = <var:u> } <var:k> := <nat:2> { <var:p> = <var:u> \land <var:k> = <nat:2> } | , \verb | { <var:p> = <var:u> \land <var:k> = <nat:2> } <var:k> := <var:k> * <var:p> { <var:p> = <var:u> \land <var:k> = <nat:2> \times <var:u> + } | , \verb | { <var:p> = <var:u> \land <var:k> = <nat:2> \times <var:u> + } <var:k> := <nat:4> + <var:k> * <var:p> { <var:p> = <var:u> \land <var:k> = <nat:2> \times <var:u> ^ <nat:2> + <nat:4> } | and \verb | { <var:p> = <var:u> \land <var:k> = <nat:2> \times <var:u> ^ <nat:2> + <nat:4> } <var:k> := <var:k> * <var:p> { <var:p> = <var:u> \land <var:k> = <nat:2> \times <var:u> ^ <nat:3> + <nat:4> \times <var:u> + } | . This is known to be sound with the assignment law given in Hoare reasoning . Next , we have \verb | { <var:p> = <var:u> } <var:k> := <nat:2> { <var:p> = <var:u> \land <var:k> = <nat:2> } | and \verb | { <var:p> = <var:u> \land <var:k> = <nat:2> } <var:k> := <var:k> * <var:p> { <var:p> = <var:u> \land <var:k> = <nat:2> \times <var:u> + } | . This is rigorously given through the binding law from usual Hoare techniques . Taking another step toward the next line of code in the series of instructions , we have \verb | { <var:p> = <var:u> } <var:k> := <nat:2> { <var:p> = <var:u> \land <var:k> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:2> ; <var:k> := <var:k> * <var:p> ; <var:k> := <nat:4> + <var:k> * <var:p> ; <var:k> := <var:k> * <var:p> ; <var:k> := <nat:3> + <var:k> * <var:p> ; <var:k> := <nat:1> + <var:k> * <var:p> ; <var:k> := <nat:3> + <var:k> * <var:p> ; <var:k> := <nat:4> + <var:k> * <var:p> ; <var:k> := <nat:3> + <var:k> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:p> = <var:u> }} <def:poly> {{ <var:k> = <nat:2> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:3> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:7> + <nat:4> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:k> = <nat:2> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 