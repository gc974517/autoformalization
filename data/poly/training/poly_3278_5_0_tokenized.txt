\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:H> ; <var:B> := <var:i1> ; <var:B> := <var:B> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allow it to be that $ <var:H> = <var:x> $ before executing our series of instructions , it must be that we have $ <var:B> = <nat:1> * <var:x> + <nat:3> $ when list of instructions is done executing . \end{theorem} \begin{proof} The course of logic for the set of instructions can be seen using standard Hoare logic . Moving forward to the next step , we have \begin{verbatim} { <var:H> = <var:x> } <var:i0> := <nat:3> { <var:H> = <var:x> \land <var:i0> = <nat:3> } { <var:H> = <var:x> \land <var:i0> = <nat:3> } <var:i1> := <nat:1> { <var:H> = <var:x> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> } { <var:H> = <var:x> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> } <var:i1> := <var:i1> * <var:H> { <var:H> = <var:x> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:x> } \end{verbatim} This is known to be sound using the variable binding rule obtained from typical Hoare reasoning . Observing the subsequent pieces of code in our segment of code , we see \begin{verbatim} { <var:H> = <var:x> } <var:i0> := <nat:3> { <var:H> = <var:x> \land <var:i0> = <nat:3> } { <var:H> = <var:x> \land <var:i0> = <nat:3> } <var:i1> := <nat:1> { <var:H> = <var:x> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:H> ; <var:B> := <var:i1> ; <var:B> := <var:B> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <def:poly> {{ <var:B> = <nat:1> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:i0> = <nat:3> /\ <var:B> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:B> = <nat:1> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 