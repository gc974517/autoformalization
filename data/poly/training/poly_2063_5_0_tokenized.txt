\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:9> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:V> ; <var:Y> := <var:O1> ; <var:Y> := <var:Y> + <var:O0> \end{verbatim} Assuming it to hold that $ <var:V> = <var:b> $ ahead of running the segment of code it holds that $ <var:Y> = <nat:6> * <var:b> + <nat:9> $ after segment of code has finished executing . \end{theorem} \begin{proof} Proving correctness for this list of commands can be given by Hoare techniques . Focusing on the subsequent commands found in our list of instructions , we see \verb | { <var:V> = <var:b> } <var:O0> := <nat:9> { <var:V> = <var:b> \land <var:O0> = <nat:9> } | , \verb | { <var:V> = <var:b> \land <var:O0> = <nat:9> } <var:O1> := <nat:6> { <var:V> = <var:b> \land <var:O0> = <nat:9> \land <var:O1> = <nat:6> } | , \verb | { <var:V> = <var:b> \land <var:O0> = <nat:9> \land <var:O1> = <nat:6> } <var:O1> := <var:O1> * <var:V> { <var:V> = <var:b> \land <var:O0> = <nat:9> \land <var:O1> = <nat:6> * <var:b> } | and \verb | { <var:V> = <var:b> \land <var:O0> = <nat:9> \land <var:O1> = <nat:6> * <var:b> } <var:Y> := <var:O1> { <var:V> = <var:b> \land <var:O0> = <nat:9> \land <var:Y> = <nat:6> * <var:b> } | . Next , \verb | { <var:V> = <var:b> } <var:O0> := <nat:9> { <var:V> = <var:b> \land <var:O0> = <nat:9> } | . This is known to be sound with the scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:V> = <var:b> }} <var:O0> := <nat:9> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:V> ; <var:Y> := <var:O1> ; <var:Y> := <var:Y> + <var:O0> {{ <var:Y> = <nat:6> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:O0> = <nat:9> /\ <var:O1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:O0> = <nat:9> /\ <var:O1> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:O0> = <nat:9> /\ <var:Y> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:Y> = <nat:6> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 