\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:o1> := <var:s> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:6> ; <var:I> := <var:o1> <var:I> := <var:I> + <var:o0> \end{verbatim} Allowing given all natural numbers $ <var:f> $ that we have $ <var:s> = <var:f> $ before the evaluation of the set of commands , it follows that $ <var:I> = <nat:6> * <var:f> + <nat:9> $ when set of commands has finished . \end{theorem} \begin{proof} The argument for the list of commands is done by standard Hoare reasoning . Next , \verb | { <var:s> = <var:f> } <var:o1> := <var:s> { <var:s> = <var:f> \land <var:o1> = <var:f> } | , \verb | { <var:s> = <var:f> \land <var:o1> = <var:f> } <var:o0> := <nat:9> { <var:s> = <var:f> \land <var:o1> = <var:f> \land <var:o0> = <nat:9> } | , \verb | { <var:s> = <var:f> \land <var:o1> = <var:f> \land <var:o0> = <nat:9> } <var:o1> := <var:o1> * <nat:6> { <var:s> = <var:f> \land <var:o1> = <nat:6> \cdot <var:f> \land <var:o0> = <nat:9> } | and \verb | { <var:s> = <var:f> \land <var:o1> = <nat:6> \cdot <var:f> \land <var:o0> = <nat:9> } <var:I> := <var:o1{ <var:s> = <var:f> \land <var:o0> = <nat:9> \land <var:I> = <nat:6> \cdot <var:f> } | . Immediately after , \verb | { <var:s> = <var:f> } <var:o1> := <var:s> { <var:s> = <var:f> \land <var:o1> = <var:f> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <var:o1> := <var:s> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:6> ; <var:I> := <var:o1> <var:I> := <var:I> + <var:o0> {{ <var:I> = <nat:6> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:o1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:o1> = <var:f> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:o1> = <nat:6> * <var:f> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:o0> = <nat:9> /\ <var:I> = <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:I> = <nat:6> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 