\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:t0> := <nat:1> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:T> ; <var:t2> := <var:t2> * <var:T> ; <var:t3> := <nat:5> ; <var:t3> := <var:t3> * <var:T> ; <var:t3> := <var:t3> * <var:T> ; <var:t3> := <var:t3> * <var:T> ; <var:U> := <var:t3> ; <var:U> := <var:U> + <var:t2> ; <var:U> := <var:U> + <var:t0> \end{verbatim} Allowing --- given positive numbers $ <var:N> $ --- $ <var:T> = <var:N> $ prior to interpreting our set of instructions then $ <var:U> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> + <nat:1> $ when segment of code exits . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:T> = <var:N> \} \\ <var:t0> := <nat:1> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \} \\ <var:t2> := <nat:7> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \} \\ <var:t2> := <var:t2> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> \} \\ <var:t2> := <var:t2> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> ^ <nat:2> \} \\ <var:t3> := <nat:5> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:t3> = <nat:5> \} \\ <var:t3> := <var:t3> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:t3> = <nat:5> \cdot <var:N> \} \\ <var:t3> := <var:t3> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:t3> = <nat:5> \cdot <var:N> ^ <nat:2> \} \\ <var:t3> := <var:t3> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:t3> = <nat:5> \cdot <var:N> ^ <nat:3> \} \\ <var:U> := <var:t3> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:t2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:U> = <nat:5> \cdot <var:N> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:t2> ; \\ \{ <var:T> = <var:N> \land <var:t0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:t0> \\ \{ <var:T> = <var:N> \land <var:U> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> + <nat:1> \} \end{eqnarray} Considering the preceding argument , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:T> = <var:N> }} <var:t0> := <nat:1> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:T> ; <var:t2> := <var:t2> * <var:T> ; <var:t3> := <nat:5> ; <var:t3> := <var:t3> * <var:T> ; <var:t3> := <var:t3> * <var:T> ; <var:t3> := <var:t3> * <var:T> ; <var:U> := <var:t3> ; <var:U> := <var:U> + <var:t2> ; <var:U> := <var:U> + <var:t0> {{ <var:U> = <nat:5> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:t2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:U> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:t0> = <nat:1> /\ <var:U> = <nat:5> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:U> = <nat:5> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 