\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:O> ; <var:A> := <var:o1> ; <var:A> := <var:A> + <var:o0> \end{verbatim} Assume it to be that $ <var:O> = <var:V> $ before executing this code segment it holds that $ <var:A> = <nat:3> * <var:V> + <nat:3> $ after list of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be seen with Hoare reasoning . Taking a look at the proceeding statements found in the set of commands , \[ \begin{tabular} {rcl} \{ <var:O> = <var:V> \} & <var:o0> := <nat:3> & \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \} \\ \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \} & <var:o1> := <nat:3> & \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \\ \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} & <var:o1> := <var:o1> * <var:O> & \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:V> \} \end{tabular} This is given by the binding law obtained from standard Hoare reasoning . Going forward , \[ \begin{tabular} {rcl} \{ <var:O> = <var:V> \} & <var:o0> := <nat:3> & \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \} \end{tabular} Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:O> = <var:V> \} & <var:o0> := <nat:3> & \{ <var:O> = <var:V> \land <var:o0> = <nat:3> \} \end{tabular} This is sound by the law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:O> = <var:V> }} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:O> ; <var:A> := <var:o1> ; <var:A> := <var:A> + <var:o0> {{ <var:A> = <nat:3> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:o0> = <nat:3> /\ <var:A> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:A> = <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 