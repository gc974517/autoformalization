\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:B> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:B> ; <var:K2> := <var:K2> * <var:B> ; <var:P> := <var:K2> ; <var:P> := <var:P> + <var:K1> ; <var:P> := <var:P> + <var:K0> \end{verbatim} Assuming that we have $ <var:B> = <var:e> $ prior to running the set of commands , it holds that $ <var:P> = <nat:9> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:4> $ when program executes . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:B> = <var:e> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \} \\ <var:K1> := <nat:9> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> \} \\ <var:K1> := <var:K1> * <var:B> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:e> \} \\ <var:K2> := <nat:9> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:e> \land <var:K2> = <nat:9> \} \\ <var:K2> := <var:K2> * <var:B> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:e> \land <var:K2> = <nat:9> * <var:e> \} \\ <var:K2> := <var:K2> * <var:B> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:e> \land <var:K2> = <nat:9> * <var:e> ^ <nat:2> \} \\ <var:P> := <var:K2> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:e> \land <var:P> = <nat:9> * <var:e> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:K1> ; \\ \{ <var:B> = <var:e> \land <var:K0> = <nat:4> \land <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} \\ <var:P> := <var:P> + <var:K0> \\ \{ <var:B> = <var:e> \land <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:4> \} \end{eqnarray} Thusly , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:B> = <var:e> }} <var:K0> := <nat:4> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:B> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:B> ; <var:K2> := <var:K2> * <var:B> ; <var:P> := <var:K2> ; <var:P> := <var:P> + <var:K1> ; <var:P> := <var:P> + <var:K0> {{ <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:e> /\ <var:K2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:e> /\ <var:K2> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:e> /\ <var:K2> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:e> /\ <var:P> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:K0> = <nat:4> /\ <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 