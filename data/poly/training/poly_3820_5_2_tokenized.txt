\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:W> ; <var:s> := <var:s> * <var:W> ; <var:s> := <nat:1> + <var:s> * <var:W> ; <var:s> := <nat:2> + <var:s> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Allow that $ <var:W> = <var:o> $ ahead of executing our code it follows that we have $ <var:s> = <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> $ once program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands can be done by usual Hoare techniques . Looking at the next step contained in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:o> \} & <var:s> := <nat:4> & \{ <var:W> = <var:o> \land <var:s> = <nat:4> \} \end{tabular} Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:o> \} & <var:s> := <nat:4> & \{ <var:W> = <var:o> \land <var:s> = <nat:4> \} \\ \{ <var:W> = <var:o> \land <var:s> = <nat:4> \} & <var:s> := <nat:3> + <var:s> * <var:W> & \{ <var:W> = <var:o> \land <var:s> = <nat:4> \times <var:o> + <nat:3> \} \\ \{ <var:W> = <var:o> \land <var:s> = <nat:4> \times <var:o> + <nat:3> \} & <var:s> := <var:s> * <var:W> & \{ <var:W> = <var:o> \land <var:s> = <nat:4> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + \} \\ \{ <var:W> = <var:o> \land <var:s> = <nat:4> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + \} & <var:s> := <nat:1> + <var:s> * <var:W> & \{ <var:W> = <var:o> \land <var:s> = <nat:4> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:1> \} \end{tabular} This is known to be sound through the assignment law given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:W> ; <var:s> := <var:s> * <var:W> ; <var:s> := <nat:1> + <var:s> * <var:W> ; <var:s> := <nat:2> + <var:s> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:W> = <var:o> }} <def:poly> {{ <var:s> = <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:s> = <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:s> = <nat:4> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:s> = <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:s> = <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 