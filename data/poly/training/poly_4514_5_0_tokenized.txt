\begin{document} \begin{theorem} Define a program as \begin{verbatim} <var:h0> := <nat:8> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:c> ; <var:e> := <var:h1> ; <var:e> := <var:e> + <var:h0> \end{verbatim} Allowing that we have $ <var:c> = <var:R> $ before evaluating our program , it must be that we see $ <var:e> = <nat:4> \times <var:R> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:c> = <var:R> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:c> = <var:R> \land <var:h0> = <nat:8> \} \\ <var:h1> := <nat:4> ; \\ \{ <var:c> = <var:R> \land <var:h0> = <nat:8> \land <var:h1> = <nat:4> \} \\ <var:h1> := <var:h1> * <var:c> ; \\ \{ <var:c> = <var:R> \land <var:h0> = <nat:8> \land <var:h1> = <nat:4> \cdot <var:R> \} \\ <var:e> := <var:h1> ; \\ \{ <var:c> = <var:R> \land <var:h0> = <nat:8> \land <var:e> = <nat:4> \cdot <var:R> \} \\ <var:e> := <var:e> + <var:h0> \\ \{ <var:c> = <var:R> \land <var:e> = <nat:4> \cdot <var:R> + <nat:8> \} \end{eqnarray} Thus , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:c> = <var:R> }} <var:h0> := <nat:8> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:c> ; <var:e> := <var:h1> ; <var:e> := <var:e> + <var:h0> {{ <var:e> = <nat:4> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:h0> = <nat:8> /\ <var:e> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:e> = <nat:4> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 