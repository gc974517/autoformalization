\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:U> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:U> ; <var:K2> := <var:K2> * <var:U> ; <var:C> := <var:K2> ; <var:C> := <var:C> + <var:K1> ; <var:C> := <var:C> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:U> = <var:r> $ prior to executing the list of commands , it holds that we see $ <var:C> = <nat:1> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our segment of code can be shown by Hoare reasoning . Advancing , \begin{eqnarray} \{ <var:U> = <var:r> \} \, <var:K0> := <nat:4> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \} \, <var:K1> := <nat:9> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> \} \, <var:K1> := <var:K1> * <var:U> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \} \, <var:K2> := <nat:1> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \land <var:K2> = <nat:1> \} \end{eqnarray} This is given with the environment update rule defined by standard Hoare reasoning . Moving forward to the proceeding pieces of code seen in our series of instructions , we have \begin{eqnarray} \{ <var:U> = <var:r> \} \, <var:K0> := <nat:4> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \} \, <var:K1> := <nat:9> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> \} \, <var:K1> := <var:K1> * <var:U> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \} \, <var:K2> := <nat:1> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \land <var:K2> = <nat:1> \} \\ \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \land <var:K2> = <nat:1> \} \, <var:K2> := <var:K2> * <var:U> \, \{ <var:U> = <var:r> \land <var:K0> = <nat:4> \land <var:K1> = <nat:9> * <var:r> \land <var:K2> = <nat:1> * <var:r> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:4> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:U> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:U> ; <var:K2> := <var:K2> * <var:U> ; <var:C> := <var:K2> ; <var:C> := <var:C> + <var:K1> ; <var:C> := <var:C> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <def:poly> {{ <var:C> = <nat:1> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:r> /\ <var:K2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:r> /\ <var:K2> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:r> /\ <var:K2> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:9> * <var:r> /\ <var:C> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:K0> = <nat:4> /\ <var:C> = <nat:1> * <var:r> ^ <nat:2> + <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:C> = <nat:1> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 