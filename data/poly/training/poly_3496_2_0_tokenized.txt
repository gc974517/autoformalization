\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:3> ; <var:Z> := <var:N0> \end{verbatim} Given --- given positive numbers $ <var:H> $ --- it to be that $ <var:C> = <var:H> $ prior to executing this code it must be that we see $ <var:Z> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is demonstrated through usual Hoare logic . Immediately after , we have \verb | { <var:C> = <var:H> } <var:N0> := <nat:3> { <var:C> = <var:H> \land <var:N0> = <nat:3> } | and \verb | { <var:C> = <var:H> \land <var:N0> = <nat:3> } <var:Z> := <var:N0{ <var:C> = <var:H> \land <var:Z> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:C> = <var:H> }} <var:N0> := <nat:3> ; <var:Z> := <var:N0> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 