\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:6> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:h> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:h> ; <var:r2> := <var:r2> * <var:h> ; <var:A> := <var:r2> ; <var:A> := <var:A> + <var:r1> ; <var:A> := <var:A> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume , for any $ <var:P> \in \mathbb{Z}^+ $ , it to hold that $ <var:h> = <var:P> $ ahead of evaluating our series of commands , then $ <var:A> = <nat:7> \cdot <var:P> ^ <nat:2> + <nat:9> \cdot <var:P> + <nat:6> $ after set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:P> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \} \\ <var:r1> := <nat:9> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \} \\ <var:r1> := <var:r1> * <var:h> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> * <var:P> \} \\ <var:r2> := <nat:7> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> * <var:P> \land <var:r2> = <nat:7> \} \\ <var:r2> := <var:r2> * <var:h> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> * <var:P> \land <var:r2> = <nat:7> * <var:P> \} \\ <var:r2> := <var:r2> * <var:h> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> * <var:P> \land <var:r2> = <nat:7> * <var:P> ^ <nat:2> \} \\ <var:A> := <var:r2> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> * <var:P> \land <var:A> = <nat:7> * <var:P> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:r1> ; \\ \{ <var:h> = <var:P> \land <var:r0> = <nat:6> \land <var:A> = <nat:7> * <var:P> ^ <nat:2> + <nat:9> * <var:P> \} \\ <var:A> := <var:A> + <var:r0> \\ \{ <var:h> = <var:P> \land <var:A> = <nat:7> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:6> \} \end{eqnarray} Applying typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:6> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:h> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:h> ; <var:r2> := <var:r2> * <var:h> ; <var:A> := <var:r2> ; <var:A> := <var:A> + <var:r1> ; <var:A> := <var:A> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:h> = <var:P> }} <def:poly> {{ <var:A> = <nat:7> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:P> /\ <var:r2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:P> /\ <var:r2> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:P> /\ <var:r2> = <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:P> /\ <var:A> = <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:r0> = <nat:6> /\ <var:A> = <nat:7> * <var:P> ^ <nat:2> + <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:A> = <nat:7> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 