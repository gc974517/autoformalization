\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:2> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:S> ; <var:b> := <var:r1> ; <var:b> := <var:b> + <var:r0> \end{verbatim} Given for every positive integer coefficients $ <var:s> $ it to be that $ <var:S> = <var:s> $ before executing this list of commands then $ <var:b> = <nat:1> * <var:s> + <nat:2> $ after series of commands finishes . \end{theorem} \begin{proof} The course of logic for our list of instructions is done by standard Hoare reasoning . Going to the next step , we see \begin{verbatim} { <var:S> = <var:s> } <var:r0> := <nat:2> { <var:S> = <var:s> \land <var:r0> = <nat:2> } \end{verbatim} Honing in on the following line seen in our series of commands , we have \begin{verbatim} { <var:S> = <var:s> } <var:r0> := <nat:2> { <var:S> = <var:s> \land <var:r0> = <nat:2> } \end{verbatim} This is rigorously given through the environment update rule of standard Hoare techniques . Observing the following bits of codecontained in our series of commands , we have \begin{verbatim} { <var:S> = <var:s> } <var:r0> := <nat:2> { <var:S> = <var:s> \land <var:r0> = <nat:2> } { <var:S> = <var:s> \land <var:r0> = <nat:2> } <var:r1> := <nat:1> { <var:S> = <var:s> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> } \end{verbatim} This is rigorously given using the inference rule from standard Hoare techniques . Advancing to the next step , we have \begin{verbatim} { <var:S> = <var:s> } <var:r0> := <nat:2> { <var:S> = <var:s> \land <var:r0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:S> = <var:s> }} <var:r0> := <nat:2> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:S> ; <var:b> := <var:r1> ; <var:b> := <var:b> + <var:r0> {{ <var:b> = <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:2> /\ <var:b> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:b> = <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 