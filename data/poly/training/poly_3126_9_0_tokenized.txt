\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:4> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:U> ; <var:h2> := <nat:3> ; <var:h2> := <var:h2> * <var:U> ; <var:h2> := <var:h2> * <var:U> ; <var:m> := <var:h2> ; <var:m> := <var:m> + <var:h1> ; <var:m> := <var:m> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Assuming it to be that $ <var:U> = <var:o> $ ahead of the evaluation of this list of instructions then we have $ <var:m> = <nat:3> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is accomplished through typical Hoare reasoning . Advancing to the upcoming piece of code in our series of instructions , we have the line \verb | <var:h0> := <nat:4> ; | . This forwards the condition $ \{ <var:U> = <var:o> \} $ toward the postcondition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \} $ . This is sound through the assignment law of typical Hoare reasoning . Advancing to the next step , we have the statement \verb | <var:h1> := <nat:5> ; | . This takes the condition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \} $ into $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \} $ . This is sound using the assignment law given in standard Hoare logic . Keeping momentum , the variable assignmet line letting $ <var:h1> * <var:U> $ to $ <var:h1>$ . This forwards $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \} $ into the postcondition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \} $ . Moving forward , the variable assignmet code giving $ <nat:3> $ into $ <var:h2>$ . This code moves the precondition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \} $ as the postcondition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:h2> = <nat:3> \} $ . This is given by the assignment scheme defined in typical Hoare logic . Considering the upcoming piece of code contained in our segment of code , we see the variable update code \verb | <var:h2> := <var:h2> * <var:U> ; | . This statement redefines the condition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:h2> = <nat:3> \} $ as $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:h2> = <nat:3> \times <var:o> \} $ . Now , the environment update code giving $ <var:h2> * <var:U> $ to $ <var:h2>$ . This line moves the condition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:h2> = <nat:3> \times <var:o> \} $ into the condition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:h2> = <nat:3> \times <var:o> ^ <nat:2> \} $ . Moving onward , we have the variable assignmet command defining $ <var:h2> $ to $ <var:m>$ . This advances the condition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:h2> = <nat:3> \times <var:o> ^ <nat:2> \} $ into $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:m> = <nat:3> \times <var:o> ^ <nat:2> \} $ . This is given using the assignment rule in usual Hoare reasoning . Honing in on the following piece of code in the series of instructions , we have the environment update statement defining $ <var:m> + <var:h1> $ as $ <var:m>$ . This statement advances the precondition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:h1> = <nat:5> \times <var:o> \land <var:m> = <nat:3> \times <var:o> ^ <nat:2> \} $ to $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:m> = <nat:3> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> \} $ . This is given using the assignment law given in Hoare reasoning . Paying attention to the subsequent statement found in our set of commands , the variable update line assigning $ <var:m> + <var:h0$ as $ <var:m>$ . This advances the condition $ \{ <var:U> = <var:o> \land <var:h0> = <nat:4> \land <var:m> = <nat:3> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> \} $ as the postcondition $ \{ <var:U> = <var:o> \land <var:m> = <nat:3> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:4> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:U> ; <var:h2> := <nat:3> ; <var:h2> := <var:h2> * <var:U> ; <var:h2> := <var:h2> * <var:U> ; <var:m> := <var:h2> ; <var:m> := <var:m> + <var:h1> ; <var:m> := <var:m> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:U> = <var:o> }} <def:poly> {{ <var:m> = <nat:3> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h2> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h2> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:5> * <var:o> /\ <var:m> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:h0> = <nat:4> /\ <var:m> = <nat:3> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:m> = <nat:3> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 