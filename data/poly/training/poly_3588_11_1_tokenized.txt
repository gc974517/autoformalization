\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:Z> ; <var:e2> := <var:e1> * <var:Z> ; <var:e3> := <var:e2> * <var:Z> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:7> ; <var:X> := <var:e3> <var:X> := <var:X> + <var:e2> <var:X> := <var:X> + <var:e1> <var:X> := <var:X> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Allow $ <var:Z> = <var:K> $ ( given every natural numbers $ <var:K> $ ) prior to interpreting our set of commands , it follows that $ <var:X> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the program can be given using usual Hoare reasoning . After , we have \verb | { <var:Z> = <var:K> } <var:e1> := <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> } | , \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> } <var:e2> := <var:e1> * <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> } | and \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> } <var:e3> := <var:e2> * <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> } | . Advancing on , \verb | { <var:Z> = <var:K> } <var:e1> := <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> } | and \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> } <var:e2> := <var:e1> * <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> } | . This is shown using the variable update inference rule in standard Hoare techniques . Taking a look at the upcoming lines contained in the segment of code , we see \verb | { <var:Z> = <var:K> } <var:e1> := <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> } | , \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> } <var:e2> := <var:e1> * <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> } | , \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> } <var:e3> := <var:e2> * <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> } | and \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> } <var:e0> := <nat:2> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> \land <var:e0> = <nat:2> } | . This is given using the variable update inference rule obtained from typical Hoare logic . After , we see \verb | { <var:Z> = <var:K> } <var:e1> := <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> } | and \verb | { <var:Z> = <var:K> \land <var:e1> = <var:K> } <var:e2> := <var:e1> * <var:Z> { <var:Z> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:Z> ; <var:e2> := <var:e1> * <var:Z> ; <var:e3> := <var:e2> * <var:Z> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:7> ; <var:X> := <var:e3> <var:X> := <var:X> + <var:e2> <var:X> := <var:X> + <var:e1> <var:X> := <var:X> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Z> = <var:K> }} <def:poly> {{ <var:X> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <var:K> /\ <var:e2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <var:K> /\ <var:e2> = <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <var:K> /\ <var:e2> = <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:X> = <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e0> = <nat:2> /\ <var:X> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:e0> = <nat:2> /\ <var:X> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:X> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 