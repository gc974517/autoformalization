\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:3> ; <var:z> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assume for every $ <var:K> \in \mathbb{Z}^+ $ that $ <var:D> = <var:K> $ prior to running this set of instructions , it follows that we have $ <var:z> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be given by Hoare logic . Paying attention to the following line found in the list of commands , the binding code yielding $ <nat:3> $ as $ <var:Q0>$ . This statement moves the precondition $ \{ <var:D> = <var:K> \} $ as the postcondition $ \{ <var:D> = <var:K> \land <var:Q0> = <nat:3> \} $ . Observing the following line contained in our program , we have the assignment line yielding $ <var:Q0$ as $ <var:z>$ . This transfers the precondition $ \{ <var:D> = <var:K> \land <var:Q0> = <nat:3> \} $ to $ \{ <var:D> = <var:K> \land <var:z> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:z> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:D> = <var:K> }} <def:poly> {{ <var:z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 