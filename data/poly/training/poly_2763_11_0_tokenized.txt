\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:8> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:p> ; <var:d2> := <var:d2> * <var:p> ; <var:d3> := <nat:9> ; <var:d3> := <var:d3> * <var:p> ; <var:d3> := <var:d3> * <var:p> ; <var:d3> := <var:d3> * <var:p> ; <var:j> := <var:d3> ; <var:j> := <var:j> + <var:d2> ; <var:j> := <var:j> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing that $ <var:p> = <var:a> $ , given positive integers $ <var:a> $ , prior to evaluating this series of instructions , it holds that we see $ <var:j> = <nat:9> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions is accomplished through standard Hoare techniques . Taking another step toward the proceeding step in the series of instructions , we see the binding command \verb | <var:d0> := <nat:8> ; | . This line moves the precondition $ \{ <var:p> = <var:a> \} $ into the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \} $ . This is shown to be logically sound using the assignment scheme given in usual Hoare reasoning . Further , we see the environment update command \verb | <var:d2> := <nat:5> ; | . This transfers the precondition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \} $ as $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \} $ . This is shown using the assignment law given by standard Hoare techniques . Jumping to the subsequent line seen in the list of instructions , we have the command yielding $ <var:d2> * <var:p> $ as $ <var:d2>$ . This command takes $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \} $ into the postcondition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> \} $ . This is guaranteed through the assignment inference rule defined by usual Hoare logic . Immediately following , we have the variable assignmet code assigning $ <var:d2> * <var:p> $ to $ <var:d2>$ . This takes the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> \} $ into the postcondition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \} $ . Keeping momentum , the assignment code \verb | <var:d3> := <nat:9> ; | . This line redefines the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \} $ as the postcondition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \} $ . This is guaranteed by the assignment inference rule given in typical Hoare reasoning . Moving forward to the upcoming piece of code seen in the series of instructions , the variable update code \verb | <var:d3> := <var:d3> * <var:p> ; | . This forwards $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \} $ toward the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:a> \} $ . This is sound through the assignment scheme of standard Hoare reasoning . Now , we see the assignment statement assigning $ <var:d3> * <var:p> $ toward $ <var:d3>$ . This line moves $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:a> \} $ as $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:a> ^ <nat:2> \} $ . Taking a look at the proceeding command found in our segment of code , we see the variable assignmet statement letting $ <var:d3> * <var:p> $ as $ <var:d3>$ . This redefines the precondition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:a> ^ <nat:2> \} $ toward the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:a> ^ <nat:3> \} $ . Stepping forward , we see the assignment statement \verb | <var:j> := <var:d3> ; | . This line transfers the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:a> ^ <nat:3> \} $ into the condition $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:j> = <nat:9> \cdot <var:a> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment rule defined in usual Hoare reasoning . Honing in on the proceeding command in the list of instructions , the binding code \verb | <var:j> := <var:j> + <var:d2> ; | . This code forwards $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:d2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:j> = <nat:9> \cdot <var:a> ^ <nat:3> \} $ toward $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:j> = <nat:9> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> \} $ . This is given using the assignment rule from usual Hoare logic . Jumping to the proceeding step seen in the series of instructions , we see the code \verb | <var:j> := <var:j> + <var:d0> | . This command forwards $ \{ <var:p> = <var:a> \land <var:d0> = <nat:8> \land <var:j> = <nat:9> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> \} $ as the condition $ \{ <var:p> = <var:a> \land <var:j> = <nat:9> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:8> \} $ . This is deduced by the assignment law found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d0> := <nat:8> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:p> ; <var:d2> := <var:d2> * <var:p> ; <var:d3> := <nat:9> ; <var:d3> := <var:d3> * <var:p> ; <var:d3> := <var:d3> * <var:p> ; <var:d3> := <var:d3> * <var:p> ; <var:j> := <var:d3> ; <var:j> := <var:j> + <var:d2> ; <var:j> := <var:j> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:p> = <var:a> }} <def:poly> {{ <var:j> = <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:d3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:d2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:j> = <nat:9> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:d0> = <nat:8> /\ <var:j> = <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:j> = <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 