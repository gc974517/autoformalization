\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:1> ; <var:m> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Given that $ <var:L> = <var:i> $ ahead of the evaluation of our code segment it follows that $ <var:m> = <nat:1> $ after list of commands has finished . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:i> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:L> = <var:i> \land <var:s0> = <nat:1> \} \\ <var:m> := <var:s0> \\ \{ <var:L> = <var:i> \land <var:m> = <nat:1> \} \end{eqnarray} As a result , our series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:1> ; <var:m> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:L> = <var:i> }} <def:poly> {{ <var:m> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:m> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 