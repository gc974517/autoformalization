\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:S> ; <var:g> := <var:u1> ; <var:g> := <var:g> + <var:u0> \end{verbatim} Allowing that $ <var:S> = <var:b> $ ( given natural coefficients $ <var:b> $ ) ahead of the evaluation of the series of commands , then we see $ <var:g> = <nat:5> * <var:b> + <nat:5> $ when segment of code terminates . \end{theorem} \begin{proof} Proving correctness for the series of commands is clear using standard Hoare reasoning . Looking at the upcoming step in the segment of code , we have \begin{verbatim} { <var:S> = <var:b> } <var:u0> := <nat:5> { <var:S> = <var:b> \land <var:u0> = <nat:5> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:S> = <var:b> } <var:u0> := <nat:5> { <var:S> = <var:b> \land <var:u0> = <nat:5> } { <var:S> = <var:b> \land <var:u0> = <nat:5> } <var:u1> := <nat:5> { <var:S> = <var:b> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> } { <var:S> = <var:b> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> } <var:u1> := <var:u1> * <var:S> { <var:S> = <var:b> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> * <var:b> } \end{verbatim} Moving forward to the next step , we see \begin{verbatim} { <var:S> = <var:b> } <var:u0> := <nat:5> { <var:S> = <var:b> \land <var:u0> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:S> = <var:b> }} <var:u0> := <nat:5> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:S> ; <var:g> := <var:u1> ; <var:g> := <var:g> + <var:u0> {{ <var:g> = <nat:5> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:u0> = <nat:5> /\ <var:g> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:g> = <nat:5> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 