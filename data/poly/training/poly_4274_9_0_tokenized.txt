\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:f> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:f> ; <var:g2> := <var:g2> * <var:f> ; <var:s> := <var:g2> ; <var:s> := <var:s> + <var:g1> ; <var:s> := <var:s> + <var:g0> \end{verbatim} Given that we have $ <var:f> = <var:X> $ --- given some $ <var:X> \in \mathbb{Z}^+ $ --- before the evaluation of the series of instructions then we have $ <var:s> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be seen by Hoare techniques . After , we see \begin{eqnarray} \{ <var:f> = <var:X> \} \, <var:g0> := <nat:7> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \} \, <var:g1> := <nat:1> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> \} \, <var:g1> := <var:g1> * <var:f> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \} \, <var:g2> := <nat:3> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \land <var:g2> = <nat:3> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \land <var:g2> = <nat:3> \} \, <var:g2> := <var:g2> * <var:f> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \land <var:g2> = <nat:3> * <var:X> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \land <var:g2> = <nat:3> * <var:X> \} \, <var:g2> := <var:g2> * <var:f> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \land <var:g2> = <nat:3> * <var:X> ^ <nat:2> \} \end{eqnarray} Going forward , we see \begin{eqnarray} \{ <var:f> = <var:X> \} \, <var:g0> := <nat:7> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \} \, <var:g1> := <nat:1> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> \} \\ \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> \} \, <var:g1> := <var:g1> * <var:f> \, \{ <var:f> = <var:X> \land <var:g0> = <nat:7> \land <var:g1> = <nat:1> * <var:X> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <var:g0> := <nat:7> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:f> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:f> ; <var:g2> := <var:g2> * <var:f> ; <var:s> := <var:g2> ; <var:s> := <var:s> + <var:g1> ; <var:s> := <var:s> + <var:g0> {{ <var:s> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:1> * <var:X> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:1> * <var:X> /\ <var:g2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:1> * <var:X> /\ <var:g2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:1> * <var:X> /\ <var:s> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:g0> = <nat:7> /\ <var:s> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:s> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 