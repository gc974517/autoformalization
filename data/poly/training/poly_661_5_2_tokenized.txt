\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p> := <nat:2> ; <var:p> := <nat:2> + <var:p> * <var:D> ; <var:p> := <nat:4> + <var:p> * <var:D> ; <var:p> := <var:p> * <var:D> ; <var:p> := <nat:3> + <var:p> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given ( given any positive integers $ <var:z> $ ) it to hold that $ <var:D> = <var:z> $ before the evaluation of this set of commands it must be that $ <var:p> = <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> $ when set of instructions is done . \end{theorem} \begin{proof} Let this decorated series of instructions . \begin{eqnarray} \{ <var:D> = <var:z> \} \\ <var:p> := <nat:2> ; \\ \{ <var:D> = <var:z> \land <var:p> = <nat:2> \} \\ <var:p> := <nat:2> + <var:p> * <var:D> ; \\ \{ <var:D> = <var:z> \land <var:p> = <nat:2> * <var:z> + <nat:2> \} \\ <var:p> := <nat:4> + <var:p> * <var:D> ; \\ \{ <var:D> = <var:z> \land <var:p> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> \} \\ <var:p> := <var:p> * <var:D> ; \\ \{ <var:D> = <var:z> \land <var:p> = <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + \} \\ <var:p> := <nat:3> + <var:p> * <var:D> \\ \{ <var:D> = <var:z> \land <var:p> = <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:2> ; <var:p> := <nat:2> + <var:p> * <var:D> ; <var:p> := <nat:4> + <var:p> * <var:D> ; <var:p> := <var:p> * <var:D> ; <var:p> := <nat:3> + <var:p> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:D> = <var:z> }} <def:poly> {{ <var:p> = <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:p> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:p> = <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:p> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:p> = <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:p> = <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 