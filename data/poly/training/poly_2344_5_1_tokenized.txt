\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:H> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:m> := <var:Y1> <var:m> := <var:m> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:H> = <var:v> $ for $ <var:v> \in \mathbb{Z}^+ $ prior to running the code , it holds that we have $ <var:m> = <nat:1> \times <var:v> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our code is clear using standard Hoare techniques . Taking another step toward the next pieces of code in the list of instructions , \begin{verbatim} { <var:H> = <var:v> } <var:Y1> := <var:H> { <var:H> = <var:v> \land <var:Y1> = <var:v> } { <var:H> = <var:v> \land <var:Y1> = <var:v> } <var:Y0> := <nat:8> { <var:H> = <var:v> \land <var:Y1> = <var:v> \land <var:Y0> = <nat:8> } { <var:H> = <var:v> \land <var:Y1> = <var:v> \land <var:Y0> = <nat:8> } <var:Y1> := <var:Y1> * <nat:1> { <var:H> = <var:v> \land <var:Y1> = <nat:1> \cdot <var:v> \land <var:Y0> = <nat:8> } { <var:H> = <var:v> \land <var:Y1> = <nat:1> \cdot <var:v> \land <var:Y0> = <nat:8> } <var:m> := <var:Y1{ <var:H> = <var:v> \land <var:Y0> = <nat:8> \land <var:m> = <nat:1> \cdot <var:v> } { <var:H> = <var:v> \land <var:Y0> = <nat:8> \land <var:m> = <nat:1> \cdot <var:v> } <var:m> := <var:m> + <var:Y0{ <var:H> = <var:v> \land <var:m> = <nat:1> \cdot <var:v> + <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:H> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:m> := <var:Y1> <var:m> := <var:m> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:H> = <var:v> }} <def:poly> {{ <var:m> = <nat:1> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:Y1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:Y1> = <nat:1> * <var:v> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:Y0> = <nat:8> /\ <var:m> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:m> = <nat:1> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 