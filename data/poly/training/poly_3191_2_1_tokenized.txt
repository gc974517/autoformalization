\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:4> ; <var:s> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:i> = <var:u> $ prior to evaluating this list of commands , then we have $ <var:s> = <nat:4> $ when series of instructions is done . \end{theorem} \begin{proof} Notice this decorated series of instructions . \begin{eqnarray} \{ <var:i> = <var:u> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:i> = <var:u> \land <var:Q0> = <nat:4> \} \\ <var:s> := <var:Q0> \\ \{ <var:i> = <var:u> \land <var:s> = <nat:4> \} \end{eqnarray} Using typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:s> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:i> = <var:u> }} <def:poly> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 