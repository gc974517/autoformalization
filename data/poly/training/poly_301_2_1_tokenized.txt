\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:3> ; <var:K> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allowing it to hold that $ <var:M> = <var:q> $ prior to the execution of this series of instructions , it follows that $ <var:K> = <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:M> = <var:q> \} \\ <var:B0> := <nat:3> ; \\ \{ <var:M> = <var:q> \land <var:B0> = <nat:3> \} \\ <var:K> := <var:B0> \\ \{ <var:M> = <var:q> \land <var:K> = <nat:3> \} \end{eqnarray} As a consequence , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:K> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <def:poly> {{ <var:K> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:K> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 