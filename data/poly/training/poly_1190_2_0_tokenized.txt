\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:l0> := <nat:1> ; <var:F> := <var:l0> \end{verbatim} Given , for any $ <var:T> \in \mathbb{Z}^+ $ , that $ <var:L> = <var:T> $ prior to evaluating our set of instructions it must be that we have $ <var:F> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is clear through usual Hoare reasoning . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:T> \} & <var:l0> := <nat:1> & \{ <var:L> = <var:T> \land <var:l0> = <nat:1> \} \\ \{ <var:L> = <var:T> \land <var:l0> = <nat:1> \} & <var:F> := <var:l0& \{ <var:L> = <var:T> \land <var:F> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:L> = <var:T> }} <var:l0> := <nat:1> ; <var:F> := <var:l0> {{ <var:F> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:F> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 