\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:Q> ; <var:Y> := <var:X1> ; <var:Y> := <var:Y> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Q> = <var:f> $ ( for whole numbers $ <var:f> $ ) ahead of the execution of the series of instructions , it follows that $ <var:Y> = <nat:3> \cdot <var:f> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be shown by standard Hoare reasoning . Moving on to the subsequent statements in the code , \begin{verbatim} { <var:Q> = <var:f> } <var:X0> := <nat:2> { <var:Q> = <var:f> \land <var:X0> = <nat:2> } { <var:Q> = <var:f> \land <var:X0> = <nat:2> } <var:X1> := <nat:3> { <var:Q> = <var:f> \land <var:X0> = <nat:2> \land <var:X1> = <nat:3> } \end{verbatim} This is guaranteed with the variable update inference rule from typical Hoare techniques . Advancing on , \begin{verbatim} { <var:Q> = <var:f> } <var:X0> := <nat:2> { <var:Q> = <var:f> \land <var:X0> = <nat:2> } { <var:Q> = <var:f> \land <var:X0> = <nat:2> } <var:X1> := <nat:3> { <var:Q> = <var:f> \land <var:X0> = <nat:2> \land <var:X1> = <nat:3> } \end{verbatim} This is guaranteed by the rule obtained from standard Hoare reasoning . Immediately after , we have \begin{verbatim} { <var:Q> = <var:f> } <var:X0> := <nat:2> { <var:Q> = <var:f> \land <var:X0> = <nat:2> } \end{verbatim} This is rigorously given through the assignment inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:2> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:Q> ; <var:Y> := <var:X1> ; <var:Y> := <var:Y> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Q> = <var:f> }} <def:poly> {{ <var:Y> = <nat:3> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:X0> = <nat:2> /\ <var:Y> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:Y> = <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 