\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:1> ; <var:r> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:P> = <var:n> $ --- for positive integers $ <var:n> $ --- prior to running this segment of code it follows that we see $ <var:r> = <nat:1> $ once list of instructions executes . \end{theorem} \begin{proof} Notice the below decorated list of instructions . \begin{eqnarray} \{ <var:P> = <var:n> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:P> = <var:n> \land <var:j0> = <nat:1> \} \\ <var:r> := <var:j0> \\ \{ <var:P> = <var:n> \land <var:r> = <nat:1> \} \end{eqnarray} Using typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:1> ; <var:r> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:P> = <var:n> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 