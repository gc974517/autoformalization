\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:1> ; <var:E> := <var:R0> \end{verbatim} Allow that $ <var:f> = <var:p> $ prior to the execution of the series of instructions it holds that we have $ <var:E> = <nat:1> $ when set of commands has executed . \end{theorem} \begin{proof} Applying usual Hoare reasoning produces : \begin{eqnarray} \{ <var:f> = <var:p> \} \\ <var:R0> := <nat:1> ; \\ \{ <var:f> = <var:p> \land <var:R0> = <nat:1> \} \\ <var:E> := <var:R0> \\ \{ <var:f> = <var:p> \land <var:E> = <nat:1> \} \end{eqnarray} Thusly , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:f> = <var:p> }} <var:R0> := <nat:1> ; <var:E> := <var:R0> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 