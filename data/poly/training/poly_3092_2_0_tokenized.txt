\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:3> ; <var:V> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow , given any positive numbers $ <var:K> $ , it to be that $ <var:t> = <var:K> $ prior to running our segment of code it must be that we see $ <var:V> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:K> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:t> = <var:K> \land <var:m0> = <nat:3> \} \\ <var:V> := <var:m0> \\ \{ <var:t> = <var:K> \land <var:V> = <nat:3> \} \end{eqnarray} The application of standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:V> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:t> = <var:K> }} <def:poly> {{ <var:V> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:V> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 