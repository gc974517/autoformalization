\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:u1> := <var:v> ; <var:u2> := <var:u1> * <var:v> ; <var:u3> := <var:u2> * <var:v> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:6> ; <var:u3> := <var:u3> * <nat:3> ; <var:l> := <var:u3> <var:l> := <var:l> + <var:u2> <var:l> := <var:l> + <var:u1> <var:l> := <var:l> + <var:u0> \end{verbatim} Assuming that $ <var:v> = <var:b> $ before interpreting the series of instructions , it must be that $ <var:l> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:6> \cdot <var:b> ^ <nat:2> + <nat:9> \cdot <var:b> + <nat:5> $ once segment of code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:b> \} \\ <var:u1> := <var:v> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <var:b> \} \\ <var:u2> := <var:u1> * <var:v> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <var:b> \land <var:u2> = <var:b> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:v> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <var:b> \land <var:u2> = <var:b> ^ <nat:2> \land <var:u3> = <var:b> ^ <nat:3> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <var:b> \land <var:u2> = <var:b> ^ <nat:2> \land <var:u3> = <var:b> ^ <nat:3> \land <var:u0> = <nat:5> \} \\ <var:u1> := <var:u1> * <nat:9> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <nat:9> \cdot <var:b> \land <var:u2> = <var:b> ^ <nat:2> \land <var:u3> = <var:b> ^ <nat:3> \land <var:u0> = <nat:5> \} \\ <var:u2> := <var:u2> * <nat:6> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <nat:9> \cdot <var:b> \land <var:u2> = <nat:6> \cdot <var:b> ^ <nat:2> \land <var:u3> = <var:b> ^ <nat:3> \land <var:u0> = <nat:5> \} \\ <var:u3> := <var:u3> * <nat:3> ; \\ \{ <var:v> = <var:b> \land <var:u1> = <nat:9> \cdot <var:b> \land <var:u2> = <nat:6> \cdot <var:b> ^ <nat:2> \land <var:u3> = <nat:3> \cdot <var:b> ^ <nat:3> \land <var:u0> = <nat:5> \} \\ <var:l> := <var:u3> \\ \{ <var:v> = <var:b> \land <var:u1> = <nat:9> \cdot <var:b> \land <var:u2> = <nat:6> \cdot <var:b> ^ <nat:2> \land <var:u0> = <nat:5> \land <var:l> = <nat:3> \cdot <var:b> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:u2> \\ \{ <var:v> = <var:b> \land <var:u1> = <nat:9> \cdot <var:b> \land <var:u0> = <nat:5> \land <var:l> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:6> \cdot <var:b> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:u1> \\ \{ <var:v> = <var:b> \land <var:u0> = <nat:5> \land <var:l> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:6> \cdot <var:b> ^ <nat:2> + <nat:9> \cdot <var:b> \} \\ <var:l> := <var:l> + <var:u0> \\ \{ <var:v> = <var:b> \land <var:l> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:6> \cdot <var:b> ^ <nat:2> + <nat:9> \cdot <var:b> + <nat:5> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:v> = <var:b> }} <var:u1> := <var:v> ; <var:u2> := <var:u1> * <var:v> ; <var:u3> := <var:u2> * <var:v> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:6> ; <var:u3> := <var:u3> * <nat:3> ; <var:l> := <var:u3> <var:l> := <var:l> + <var:u2> <var:l> := <var:l> + <var:u1> <var:l> := <var:l> + <var:u0> {{ <var:l> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <var:b> /\ <var:u2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <var:b> /\ <var:u2> = <var:b> ^ <nat:2> /\ <var:u3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <var:b> /\ <var:u2> = <var:b> ^ <nat:2> /\ <var:u3> = <var:b> ^ <nat:3> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <nat:9> * <var:b> /\ <var:u2> = <var:b> ^ <nat:2> /\ <var:u3> = <var:b> ^ <nat:3> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <nat:9> * <var:b> /\ <var:u2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:u3> = <var:b> ^ <nat:3> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <nat:9> * <var:b> /\ <var:u2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <nat:9> * <var:b> /\ <var:u2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:u0> = <nat:5> /\ <var:l> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u1> = <nat:9> * <var:b> /\ <var:u0> = <nat:5> /\ <var:l> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:u0> = <nat:5> /\ <var:l> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:l> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 