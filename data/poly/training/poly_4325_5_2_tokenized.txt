\begin{document} \begin{theorem} Consider the following code segment as follows \begin{verbatim} <var:z> := <nat:1> ; <var:z> := <nat:1> + <var:z> * <var:l> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:1> + <var:z> * <var:l> ; <var:z> := <nat:1> + <var:z> * <var:l> \end{verbatim} Assuming $ <var:l> = <var:m> $ ( for some positive coefficients $ <var:m> $ ) prior to the execution of the set of commands , then $ <var:z> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands can be accomplished using usual Hoare reasoning . Advancing on , \begin{verbatim} { <var:l> = <var:m> } <var:z> := <nat:1> { <var:l> = <var:m> \land <var:z> = <nat:1> } { <var:l> = <var:m> \land <var:z> = <nat:1> } <var:z> := <nat:1> + <var:z> * <var:l> { <var:l> = <var:m> \land <var:z> = <nat:1> * <var:m> + <nat:1> } \end{verbatim} This is shown with the inference rule defined in standard Hoare techniques . Stepping through , \begin{verbatim} { <var:l> = <var:m> } <var:z> := <nat:1> { <var:l> = <var:m> \land <var:z> = <nat:1> } \end{verbatim} This is shown through the binding law defined by Hoare reasoning . Taking another step toward the following bit of code seen in the code , we have \begin{verbatim} { <var:l> = <var:m> } <var:z> := <nat:1> { <var:l> = <var:m> \land <var:z> = <nat:1> } \end{verbatim} This is known to be sound by the variable update law found in standard Hoare techniques . Moving on to the next step , we see \begin{verbatim} { <var:l> = <var:m> } <var:z> := <nat:1> { <var:l> = <var:m> \land <var:z> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:l> = <var:m> }} <var:z> := <nat:1> ; <var:z> := <nat:1> + <var:z> * <var:l> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:1> + <var:z> * <var:l> ; <var:z> := <nat:1> + <var:z> * <var:l> {{ <var:z> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:z> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:z> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:z> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:z> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 