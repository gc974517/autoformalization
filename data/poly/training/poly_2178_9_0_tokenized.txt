\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:T> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:T> ; <var:S2> := <var:S2> * <var:T> ; <var:m> := <var:S2> ; <var:m> := <var:m> + <var:S1> ; <var:m> := <var:m> + <var:S0> \end{verbatim} Allowing that $ <var:T> = <var:t> $ ( given every positive coefficients $ <var:t> $ ) ahead of executing this set of instructions it follows that $ <var:m> = <nat:9> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is clear with typical Hoare logic . Moving on to the next step , we see the variable update command binding $ <nat:9> $ into $ <var:S0>$ . This takes the condition $ \{ <var:T> = <var:t> \} $ to the postcondition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \} $ . This is known to be sound with the assignment scheme in Hoare techniques . After , we have the variable update line \verb | <var:S1> := <nat:6> ; | . This line takes $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \} $ toward the postcondition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \} $ . Paying attention to the subsequent line seen in the set of instructions , the environment update line \verb | <var:S1> := <var:S1> * <var:T> ; | . This transfers the condition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \} $ as $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \} $ . Advancing on , we have the variable assignmet statement \verb | <var:S2> := <nat:9> ; | . This code advances the condition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \} $ as the condition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:S2> = <nat:9> \} $ . Looking at the following line of code found in the list of instructions , we see the variable update statement \verb | <var:S2> := <var:S2> * <var:T> ; | . This transfers $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:S2> = <nat:9> \} $ as the postcondition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:S2> = <nat:9> \times <var:t> \} $ . Looking at the proceeding line seen in our set of commands , we see the variable binding command \verb | <var:S2> := <var:S2> * <var:T> ; | . This forwards the condition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:S2> = <nat:9> \times <var:t> \} $ into the postcondition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:S2> = <nat:9> \times <var:t> ^ <nat:2> \} $ . This is guaranteed with the assignment scheme defined in usual Hoare reasoning . Considering the upcoming command contained in the list of instructions , we have the binding code yielding $ <var:S2> $ toward $ <var:m>$ . This advances the condition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:S2> = <nat:9> \times <var:t> ^ <nat:2> \} $ to $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:m> = <nat:9> \times <var:t> ^ <nat:2> \} $ . Advancing to the next step , we have the binding statement yielding $ <var:m> + <var:S1> $ into $ <var:m>$ . This moves the precondition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \times <var:t> \land <var:m> = <nat:9> \times <var:t> ^ <nat:2> \} $ to $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:m> = <nat:9> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> \} $ . Going to the next step , we have the variable assignmet line defining $ <var:m> + <var:S0$ toward $ <var:m>$ . This statement advances the precondition $ \{ <var:T> = <var:t> \land <var:S0> = <nat:9> \land <var:m> = <nat:9> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> \} $ toward the postcondition $ \{ <var:T> = <var:t> \land <var:m> = <nat:9> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> + <nat:9> \} $ . This is shown using the assignment scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:T> = <var:t> }} <var:S0> := <nat:9> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:T> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:T> ; <var:S2> := <var:S2> * <var:T> ; <var:m> := <var:S2> ; <var:m> := <var:m> + <var:S1> ; <var:m> := <var:m> + <var:S0> {{ <var:m> = <nat:9> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:t> /\ <var:S2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:t> /\ <var:S2> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:t> /\ <var:S2> = <nat:9> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:t> /\ <var:m> = <nat:9> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:S0> = <nat:9> /\ <var:m> = <nat:9> * <var:t> ^ <nat:2> + <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:m> = <nat:9> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 