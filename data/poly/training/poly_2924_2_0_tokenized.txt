\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:1> ; <var:Z> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:S> = <var:C> $ before executing the list of instructions it follows that we have $ <var:Z> = <nat:1> $ once list of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for our program is accomplished using standard Hoare logic . Focusing on the next step found in our program , the line defining $ <nat:1> $ to $ <var:Q0>$ . This forwards $ \{ <var:S> = <var:C> \} $ toward $ \{ <var:S> = <var:C> \land <var:Q0> = <nat:1> \} $ . This is deduced through the assignment rule given by typical Hoare reasoning . Taking a look at the next statement contained in our series of instructions , the variable assignmet code \verb | <var:Z> := <var:Q0> | . This redefines the condition $ \{ <var:S> = <var:C> \land <var:Q0> = <nat:1> \} $ to the condition $ \{ <var:S> = <var:C> \land <var:Z> = <nat:1> \} $ . This is guaranteed by the assignment inference rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:Z> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <def:poly> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 