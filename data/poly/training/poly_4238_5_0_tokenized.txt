\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:T> ; <var:z> := <var:F1> ; <var:z> := <var:z> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:T> = <var:v> $ , given natural coefficients $ <var:v> $ , before the evaluation of our segment of code it holds that $ <var:z> = <nat:8> * <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:T> = <var:v> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:T> = <var:v> \land <var:F0> = <nat:4> \} \\ <var:F1> := <nat:8> ; \\ \{ <var:T> = <var:v> \land <var:F0> = <nat:4> \land <var:F1> = <nat:8> \} \\ <var:F1> := <var:F1> * <var:T> ; \\ \{ <var:T> = <var:v> \land <var:F0> = <nat:4> \land <var:F1> = <nat:8> \cdot <var:v> \} \\ <var:z> := <var:F1> ; \\ \{ <var:T> = <var:v> \land <var:F0> = <nat:4> \land <var:z> = <nat:8> \cdot <var:v> \} \\ <var:z> := <var:z> + <var:F0> \\ \{ <var:T> = <var:v> \land <var:z> = <nat:8> \cdot <var:v> + <nat:4> \} \end{eqnarray} Thusly , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:T> ; <var:z> := <var:F1> ; <var:z> := <var:z> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:T> = <var:v> }} <def:poly> {{ <var:z> = <nat:8> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:F0> = <nat:4> /\ <var:z> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:z> = <nat:8> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 