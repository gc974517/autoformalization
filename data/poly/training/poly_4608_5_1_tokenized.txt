\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:c> ; <var:U0> := <nat:8> ; <var:U1> := <var:U1> * <nat:4> ; <var:I> := <var:U1> <var:I> := <var:I> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:c> = <var:b> $ --- for positive integers $ <var:b> $ --- ahead of evaluating the set of commands , it holds that $ <var:I> = <nat:4> * <var:b> + <nat:8> $ . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:c> = <var:b> \} \\ <var:U1> := <var:c> ; \\ \{ <var:c> = <var:b> \land <var:U1> = <var:b> \} \\ <var:U0> := <nat:8> ; \\ \{ <var:c> = <var:b> \land <var:U1> = <var:b> \land <var:U0> = <nat:8> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:c> = <var:b> \land <var:U1> = <nat:4> \cdot <var:b> \land <var:U0> = <nat:8> \} \\ <var:I> := <var:U1> \\ \{ <var:c> = <var:b> \land <var:U0> = <nat:8> \land <var:I> = <nat:4> \cdot <var:b> \} \\ <var:I> := <var:I> + <var:U0> \\ \{ <var:c> = <var:b> \land <var:I> = <nat:4> \cdot <var:b> + <nat:8> \} \end{eqnarray} Given the above , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:c> ; <var:U0> := <nat:8> ; <var:U1> := <var:U1> * <nat:4> ; <var:I> := <var:U1> <var:I> := <var:I> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:c> = <var:b> }} <def:poly> {{ <var:I> = <nat:4> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:U1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:U1> = <var:b> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:U1> = <nat:4> * <var:b> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:U0> = <nat:8> /\ <var:I> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:I> = <nat:4> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 