\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:b0> := <nat:8> ; <var:n> := <var:b0> \end{verbatim} Allowing that we have $ <var:t> = <var:P> $ before executing the code segment , it holds that we see $ <var:n> = <nat:8> $ after set of commands has finished executing . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:t> = <var:P> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:t> = <var:P> \land <var:b0> = <nat:8> \} \\ <var:n> := <var:b0> \\ \{ <var:t> = <var:P> \land <var:n> = <nat:8> \} \end{eqnarray} Considering the preceding argument , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:t> = <var:P> }} <var:b0> := <nat:8> ; <var:n> := <var:b0> {{ <var:n> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:n> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 