\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:V> ; <var:O> := <nat:2> + <var:O> * <var:V> ; <var:O> := <nat:4> + <var:O> * <var:V> ; <var:O> := <nat:2> + <var:O> * <var:V> ; <var:O> := <nat:1> + <var:O> * <var:V> ; <var:O> := <nat:2> + <var:O> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:V> = <var:L> $ before running our set of commands , it holds that $ <var:O> = <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> $ after series of instructions finishes . \end{theorem} \begin{proof} The course of logic for this list of commands is done through this decorated set of instructions . \begin{eqnarray} \{ <var:V> = <var:L> \} \\ <var:O> := <nat:3> ; \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> \} \\ <var:O> := <nat:3> + <var:O> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> * <var:L> + <nat:3> \} \\ <var:O> := <nat:2> + <var:O> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> \} \\ <var:O> := <nat:4> + <var:O> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> \} \\ <var:O> := <nat:1> + <var:O> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> \} \\ <var:O> := <nat:2> + <var:O> * <var:V> \\ \{ <var:V> = <var:L> \land <var:O> = <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> \} \end{eqnarray} Using usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:V> ; <var:O> := <nat:2> + <var:O> * <var:V> ; <var:O> := <nat:4> + <var:O> * <var:V> ; <var:O> := <nat:2> + <var:O> * <var:V> ; <var:O> := <nat:1> + <var:O> * <var:V> ; <var:O> := <nat:2> + <var:O> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:V> = <var:L> }} <def:poly> {{ <var:O> = <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:O> = <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 