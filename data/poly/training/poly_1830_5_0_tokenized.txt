\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:t> ; <var:v> := <var:J1> ; <var:v> := <var:v> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allowing that $ <var:t> = <var:q> $ prior to running this series of commands it follows that we have $ <var:v> = <nat:4> \cdot <var:q> + <nat:6> $ once series of commands has finished executing . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:t> = <var:q> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:t> = <var:q> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:4> ; \\ \{ <var:t> = <var:q> \land <var:J0> = <nat:6> \land <var:J1> = <nat:4> \} \\ <var:J1> := <var:J1> * <var:t> ; \\ \{ <var:t> = <var:q> \land <var:J0> = <nat:6> \land <var:J1> = <nat:4> * <var:q> \} \\ <var:v> := <var:J1> ; \\ \{ <var:t> = <var:q> \land <var:J0> = <nat:6> \land <var:v> = <nat:4> * <var:q> \} \\ <var:v> := <var:v> + <var:J0> \\ \{ <var:t> = <var:q> \land <var:v> = <nat:4> * <var:q> + <nat:6> \} \end{eqnarray} As a consequence , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:t> ; <var:v> := <var:J1> ; <var:v> := <var:v> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:t> = <var:q> }} <def:poly> {{ <var:v> = <nat:4> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:J0> = <nat:6> /\ <var:v> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:v> = <nat:4> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 