\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:6> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:o> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:o> ; <var:z2> := <var:z2> * <var:o> ; <var:c> := <var:z2> ; <var:c> := <var:c> + <var:z1> ; <var:c> := <var:c> + <var:z0> \end{verbatim} Allowing $ <var:o> = <var:i> $ before executing the segment of code , it holds that we see $ <var:c> = <nat:6> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:6> $ once list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:i> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \} \\ <var:z1> := <nat:6> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:z1> = <nat:6> \} \\ <var:z1> := <var:z1> * <var:o> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:z1> = <nat:6> \times <var:i> \} \\ <var:z2> := <nat:6> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:z1> = <nat:6> \times <var:i> \land <var:z2> = <nat:6> \} \\ <var:z2> := <var:z2> * <var:o> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:z1> = <nat:6> \times <var:i> \land <var:z2> = <nat:6> \times <var:i> \} \\ <var:z2> := <var:z2> * <var:o> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:z1> = <nat:6> \times <var:i> \land <var:z2> = <nat:6> \times <var:i> ^ <nat:2> \} \\ <var:c> := <var:z2> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:z1> = <nat:6> \times <var:i> \land <var:c> = <nat:6> \times <var:i> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:z1> ; \\ \{ <var:o> = <var:i> \land <var:z0> = <nat:6> \land <var:c> = <nat:6> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> \} \\ <var:c> := <var:c> + <var:z0> \\ \{ <var:o> = <var:i> \land <var:c> = <nat:6> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:o> = <var:i> }} <var:z0> := <nat:6> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:o> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:o> ; <var:z2> := <var:z2> * <var:o> ; <var:c> := <var:z2> ; <var:c> := <var:c> + <var:z1> ; <var:c> := <var:c> + <var:z0> {{ <var:c> = <nat:6> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:6> * <var:i> /\ <var:z2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:6> * <var:i> /\ <var:z2> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:6> * <var:i> /\ <var:z2> = <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:6> * <var:i> /\ <var:c> = <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:z0> = <nat:6> /\ <var:c> = <nat:6> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:c> = <nat:6> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 