\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:Y> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:1> ; <var:X> := <var:W1> <var:X> := <var:X> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume --- taking natural numbers $ <var:E> $ --- it to be that $ <var:Y> = <var:E> $ ahead of the execution of the code it holds that we see $ <var:X> = <nat:1> \cdot <var:E> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions can be done using standard Hoare reasoning . Moving on , we have \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:W1> := <var:Y> \, \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \} \\ \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \} \, <var:W0> := <nat:7> \, \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \land <var:W0> = <nat:7> \} \\ \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \land <var:W0> = <nat:7> \} \, <var:W1> := <var:W1> * <nat:1> \, \{ <var:Y> = <var:E> \land <var:W1> = <nat:1> \times <var:E> \land <var:W0> = <nat:7> \} \end{eqnarray} This is known to be sound through the binding inference rule defined in Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:W1> := <var:Y> \, \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \} \\ \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \} \, <var:W0> := <nat:7> \, \{ <var:Y> = <var:E> \land <var:W1> = <var:E> \land <var:W0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:Y> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:1> ; <var:X> := <var:W1> <var:X> := <var:X> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <def:poly> {{ <var:X> = <nat:1> * <var:E> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:W1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:W1> = <var:E> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:W1> = <nat:1> * <var:E> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:W0> = <nat:7> /\ <var:X> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:X> = <nat:1> * <var:E> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 