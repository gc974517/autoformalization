\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:8> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:V> ; <var:P> := <var:t1> ; <var:P> := <var:P> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:V> = <var:b> $ ( given any positive coefficients $ <var:b> $ ) prior to evaluating this series of commands , then we have $ <var:P> = <nat:8> \cdot <var:b> + <nat:8> $ . \end{theorem} \begin{proof} Observe this decorated series of instructions . \begin{eqnarray} \{ <var:V> = <var:b> \} \\ <var:t0> := <nat:8> ; \\ \{ <var:V> = <var:b> \land <var:t0> = <nat:8> \} \\ <var:t1> := <nat:8> ; \\ \{ <var:V> = <var:b> \land <var:t0> = <nat:8> \land <var:t1> = <nat:8> \} \\ <var:t1> := <var:t1> * <var:V> ; \\ \{ <var:V> = <var:b> \land <var:t0> = <nat:8> \land <var:t1> = <nat:8> \times <var:b> \} \\ <var:P> := <var:t1> ; \\ \{ <var:V> = <var:b> \land <var:t0> = <nat:8> \land <var:P> = <nat:8> \times <var:b> \} \\ <var:P> := <var:P> + <var:t0> \\ \{ <var:V> = <var:b> \land <var:P> = <nat:8> \times <var:b> + <nat:8> \} \end{eqnarray} The application of typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:8> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:V> ; <var:P> := <var:t1> ; <var:P> := <var:P> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:V> = <var:b> }} <def:poly> {{ <var:P> = <nat:8> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:t0> = <nat:8> /\ <var:P> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:P> = <nat:8> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 