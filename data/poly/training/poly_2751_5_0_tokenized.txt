\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:8> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:E> ; <var:I> := <var:D1> ; <var:I> := <var:I> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for $ <var:i> $ ) that $ <var:E> = <var:i> $ ahead of interpreting our code , it follows that we see $ <var:I> = <nat:7> * <var:i> + <nat:8> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is given using typical Hoare techniques . Following , we have \begin{eqnarray} \{ <var:E> = <var:i> \} \, <var:D0> := <nat:8> \, \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \} \end{eqnarray} Immediately after , \begin{eqnarray} \{ <var:E> = <var:i> \} \, <var:D0> := <nat:8> \, \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \} \\ \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \} \, <var:D1> := <nat:7> \, \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> \} \\ \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> \} \, <var:D1> := <var:D1> * <var:E> \, \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> \times <var:i> \} \\ \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> \times <var:i> \} \, <var:I> := <var:D1> \, \{ <var:E> = <var:i> \land <var:D0> = <nat:8> \land <var:I> = <nat:7> \times <var:i> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:8> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:E> ; <var:I> := <var:D1> ; <var:I> := <var:I> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:E> = <var:i> }} <def:poly> {{ <var:I> = <nat:7> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:D0> = <nat:8> /\ <var:I> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:I> = <nat:7> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 