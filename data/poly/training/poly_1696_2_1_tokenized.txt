\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:2> ; <var:r> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:X> = <var:U> $ for all positive integers $ <var:U> $ before executing the code segment , then $ <var:r> = <nat:2> $ once program finishes . \end{theorem} \begin{proof} The course of logic for the program can be given with typical Hoare logic . Observing the proceeding line contained in our set of commands , \[ \begin{tabular} {rcl} \{ <var:X> = <var:U> \} & <var:g0> := <nat:2> & \{ <var:X> = <var:U> \land <var:g0> = <nat:2> \} \end{tabular} Focusing on the proceeding statement contained in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:U> \} & <var:g0> := <nat:2> & \{ <var:X> = <var:U> \land <var:g0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:r> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:X> = <var:U> }} <def:poly> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 