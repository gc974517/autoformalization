\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:e1> := <var:z> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:7> ; <var:t> := <var:e1> <var:t> := <var:t> + <var:e0> \end{verbatim} Allow that we have $ <var:z> = <var:w> $ prior to executing our series of commands it follows that we have $ <var:t> = <nat:7> * <var:w> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:z> = <var:w> \} \\ <var:e1> := <var:z> ; \\ \{ <var:z> = <var:w> \land <var:e1> = <var:w> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:z> = <var:w> \land <var:e1> = <var:w> \land <var:e0> = <nat:5> \} \\ <var:e1> := <var:e1> * <nat:7> ; \\ \{ <var:z> = <var:w> \land <var:e1> = <nat:7> \times <var:w> \land <var:e0> = <nat:5> \} \\ <var:t> := <var:e1> \\ \{ <var:z> = <var:w> \land <var:e0> = <nat:5> \land <var:t> = <nat:7> \times <var:w> \} \\ <var:t> := <var:t> + <var:e0> \\ \{ <var:z> = <var:w> \land <var:t> = <nat:7> \times <var:w> + <nat:5> \} \end{eqnarray} Thusly , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:z> = <var:w> }} <var:e1> := <var:z> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:7> ; <var:t> := <var:e1> <var:t> := <var:t> + <var:e0> {{ <var:t> = <nat:7> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:e1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:e1> = <var:w> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:e1> = <nat:7> * <var:w> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:e0> = <nat:5> /\ <var:t> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:t> = <nat:7> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 