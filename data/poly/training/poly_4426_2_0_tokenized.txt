\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:2> ; <var:N> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Given ( assuming some $ <var:k> $ ) that $ <var:o> = <var:k> $ before running our set of commands , it follows that $ <var:N> = <nat:2> $ after segment of code exits . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:o> = <var:k> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:o> = <var:k> \land <var:z0> = <nat:2> \} \\ <var:N> := <var:z0> \\ \{ <var:o> = <var:k> \land <var:N> = <nat:2> \} \end{eqnarray} Considering the above , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:N> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:o> = <var:k> }} <def:poly> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 