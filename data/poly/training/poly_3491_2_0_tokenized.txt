\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:Z0> := <nat:5> ; <var:m> := <var:Z0> \end{verbatim} Assuming it to be that $ <var:N> = <var:c> $ prior to the execution of the code segment , it follows that we see $ <var:m> = <nat:5> $ . \end{theorem} \begin{proof} We can see that the below decorated segment of code . \begin{eqnarray} \{ <var:N> = <var:c> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:N> = <var:c> \land <var:Z0> = <nat:5> \} \\ <var:m> := <var:Z0> \\ \{ <var:N> = <var:c> \land <var:m> = <nat:5> \} \end{eqnarray} The application of standard Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:N> = <var:c> }} <var:Z0> := <nat:5> ; <var:m> := <var:Z0> {{ <var:m> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:m> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 