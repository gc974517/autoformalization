\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:a1> := <var:G> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:6> ; <var:s> := <var:a1> <var:s> := <var:s> + <var:a0> \end{verbatim} Assume it to hold that $ <var:G> = <var:v> $ before interpreting our series of commands then we have $ <var:s> = <nat:6> \times <var:v> + <nat:5> $ once series of instructions has exited . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives : \begin{eqnarray} \{ <var:G> = <var:v> \} \\ <var:a1> := <var:G> ; \\ \{ <var:G> = <var:v> \land <var:a1> = <var:v> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:G> = <var:v> \land <var:a1> = <var:v> \land <var:a0> = <nat:5> \} \\ <var:a1> := <var:a1> * <nat:6> ; \\ \{ <var:G> = <var:v> \land <var:a1> = <nat:6> \cdot <var:v> \land <var:a0> = <nat:5> \} \\ <var:s> := <var:a1> \\ \{ <var:G> = <var:v> \land <var:a0> = <nat:5> \land <var:s> = <nat:6> \cdot <var:v> \} \\ <var:s> := <var:s> + <var:a0> \\ \{ <var:G> = <var:v> \land <var:s> = <nat:6> \cdot <var:v> + <nat:5> \} \end{eqnarray} As a result , our program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:G> = <var:v> }} <var:a1> := <var:G> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:6> ; <var:s> := <var:a1> <var:s> := <var:s> + <var:a0> {{ <var:s> = <nat:6> * <var:v> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:a1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:a1> = <var:v> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:a0> = <nat:5> /\ <var:s> = <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:s> = <nat:6> * <var:v> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 