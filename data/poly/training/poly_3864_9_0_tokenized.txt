\begin{document} \begin{theorem} Define the following segment of code : \begin{verbatim} <var:R0> := <nat:8> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:y> ; <var:R2> := <nat:6> ; <var:R2> := <var:R2> * <var:y> ; <var:R2> := <var:R2> * <var:y> ; <var:z> := <var:R2> ; <var:z> := <var:z> + <var:R1> ; <var:z> := <var:z> + <var:R0> \end{verbatim} Allow it to hold that $ <var:y> = <var:n> $ prior to the execution of the program then we have $ <var:z> = <nat:6> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:8> $ when program terminates . \end{theorem} \begin{proof} Observe that the following decorated code . \begin{eqnarray} \{ <var:y> = <var:n> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \} \\ <var:R1> := <nat:2> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \} \\ <var:R1> := <var:R1> * <var:y> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \cdot <var:n> \} \\ <var:R2> := <nat:6> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \cdot <var:n> \land <var:R2> = <nat:6> \} \\ <var:R2> := <var:R2> * <var:y> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \cdot <var:n> \land <var:R2> = <nat:6> \cdot <var:n> \} \\ <var:R2> := <var:R2> * <var:y> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \cdot <var:n> \land <var:R2> = <nat:6> \cdot <var:n> ^ <nat:2> \} \\ <var:z> := <var:R2> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \cdot <var:n> \land <var:z> = <nat:6> \cdot <var:n> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:R1> ; \\ \{ <var:y> = <var:n> \land <var:R0> = <nat:8> \land <var:z> = <nat:6> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> \} \\ <var:z> := <var:z> + <var:R0> \\ \{ <var:y> = <var:n> \land <var:z> = <nat:6> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:8> \} \end{eqnarray} The application of typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:y> = <var:n> }} <var:R0> := <nat:8> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:y> ; <var:R2> := <nat:6> ; <var:R2> := <var:R2> * <var:y> ; <var:R2> := <var:R2> * <var:y> ; <var:z> := <var:R2> ; <var:z> := <var:z> + <var:R1> ; <var:z> := <var:z> + <var:R0> {{ <var:z> = <nat:6> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> * <var:n> /\ <var:R2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> * <var:n> /\ <var:R2> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> * <var:n> /\ <var:R2> = <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> * <var:n> /\ <var:z> = <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:R0> = <nat:8> /\ <var:z> = <nat:6> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:z> = <nat:6> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 