\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:l1> := <var:L> ; <var:l2> := <var:l1> * <var:L> ; <var:l3> := <var:l2> * <var:L> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:3> ; <var:l3> := <var:l3> * <nat:9> ; <var:w> := <var:l3> <var:w> := <var:w> + <var:l2> <var:w> := <var:w> + <var:l1> <var:w> := <var:w> + <var:l0> \end{verbatim} Allowing $ <var:L> = <var:S> $ , given any $ <var:S> $ , ahead of interpreting this series of instructions , it must be that we see $ <var:w> = <nat:9> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our code segment can be demonstrated with usual Hoare logic . Following , we have \verb | { <var:L> = <var:S> } <var:l1> := <var:L> { <var:L> = <var:S> \land <var:l1> = <var:S> } | , \verb | { <var:L> = <var:S> \land <var:l1> = <var:S> } <var:l2> := <var:l1> * <var:L> { <var:L> = <var:S> \land <var:l1> = <var:S> \land <var:l2> = <var:S> ^ <nat:2> } | , \verb | { <var:L> = <var:S> \land <var:l1> = <var:S> \land <var:l2> = <var:S> ^ <nat:2> } <var:l3> := <var:l2> * <var:L> { <var:L> = <var:S> \land <var:l1> = <var:S> \land <var:l2> = <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> } | , \verb | { <var:L> = <var:S> \land <var:l1> = <var:S> \land <var:l2> = <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> } <var:l0> := <nat:3> { <var:L> = <var:S> \land <var:l1> = <var:S> \land <var:l2> = <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } | , \verb | { <var:L> = <var:S> \land <var:l1> = <var:S> \land <var:l2> = <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } <var:l1> := <var:l1> * <nat:3> { <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } | , \verb | { <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } <var:l2> := <var:l2> * <nat:3> { <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <nat:3> * <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } | , \verb | { <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <nat:3> * <var:S> ^ <nat:2> \land <var:l3> = <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } <var:l3> := <var:l3> * <nat:9> { <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <nat:3> * <var:S> ^ <nat:2> \land <var:l3> = <nat:9> * <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } | and \verb | { <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <nat:3> * <var:S> ^ <nat:2> \land <var:l3> = <nat:9> * <var:S> ^ <nat:3> \land <var:l0> = <nat:3> } <var:w> := <var:l3{ <var:L> = <var:S> \land <var:l1> = <nat:3> * <var:S> \land <var:l2> = <nat:3> * <var:S> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:w> = <nat:9> * <var:S> ^ <nat:3> } | . Taking a look at the proceeding step contained in the list of commands , we see \verb | { <var:L> = <var:S> } <var:l1> := <var:L> { <var:L> = <var:S> \land <var:l1> = <var:S> } | . Going forward , we see \verb | { <var:L> = <var:S> } <var:l1> := <var:L> { <var:L> = <var:S> \land <var:l1> = <var:S> } | . Advancing , we have \verb | { <var:L> = <var:S> } <var:l1> := <var:L> { <var:L> = <var:S> \land <var:l1> = <var:S> } | . This is known to be sound with the environment update scheme defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:L> = <var:S> }} <var:l1> := <var:L> ; <var:l2> := <var:l1> * <var:L> ; <var:l3> := <var:l2> * <var:L> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:3> ; <var:l3> := <var:l3> * <nat:9> ; <var:w> := <var:l3> <var:w> := <var:w> + <var:l2> <var:w> := <var:w> + <var:l1> <var:w> := <var:w> + <var:l0> {{ <var:w> = <nat:9> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <var:S> /\ <var:l2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <var:S> /\ <var:l2> = <var:S> ^ <nat:2> /\ <var:l3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <var:S> /\ <var:l2> = <var:S> ^ <nat:2> /\ <var:l3> = <var:S> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <nat:3> * <var:S> /\ <var:l2> = <var:S> ^ <nat:2> /\ <var:l3> = <var:S> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <nat:3> * <var:S> /\ <var:l2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:l3> = <var:S> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <nat:3> * <var:S> /\ <var:l2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:l3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <nat:3> * <var:S> /\ <var:l2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:w> = <nat:9> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l1> = <nat:3> * <var:S> /\ <var:l0> = <nat:3> /\ <var:w> = <nat:9> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l0> = <nat:3> /\ <var:w> = <nat:9> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:w> = <nat:9> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 