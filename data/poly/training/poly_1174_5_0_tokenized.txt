\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:7> ; <var:C1> := <nat:8> ; <var:C1> := <var:C1> * <var:K> ; <var:Z> := <var:C1> ; <var:Z> := <var:Z> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:K> = <var:r> $ for every positive integer coefficients $ <var:r> $ before interpreting our code , it holds that we have $ <var:Z> = <nat:8> \cdot <var:r> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for this series of instructions is demonstrated with the following decorated list of instructions . \begin{eqnarray} \{ <var:K> = <var:r> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:K> = <var:r> \land <var:C0> = <nat:7> \} \\ <var:C1> := <nat:8> ; \\ \{ <var:K> = <var:r> \land <var:C0> = <nat:7> \land <var:C1> = <nat:8> \} \\ <var:C1> := <var:C1> * <var:K> ; \\ \{ <var:K> = <var:r> \land <var:C0> = <nat:7> \land <var:C1> = <nat:8> \cdot <var:r> \} \\ <var:Z> := <var:C1> ; \\ \{ <var:K> = <var:r> \land <var:C0> = <nat:7> \land <var:Z> = <nat:8> \cdot <var:r> \} \\ <var:Z> := <var:Z> + <var:C0> \\ \{ <var:K> = <var:r> \land <var:Z> = <nat:8> \cdot <var:r> + <nat:7> \} \end{eqnarray} Using typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:7> ; <var:C1> := <nat:8> ; <var:C1> := <var:C1> * <var:K> ; <var:Z> := <var:C1> ; <var:Z> := <var:Z> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:K> = <var:r> }} <def:poly> {{ <var:Z> = <nat:8> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:C0> = <nat:7> /\ <var:Z> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:Z> = <nat:8> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 