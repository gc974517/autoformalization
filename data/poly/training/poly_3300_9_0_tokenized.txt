\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:2> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:x> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:x> ; <var:S2> := <var:S2> * <var:x> ; <var:a> := <var:S2> ; <var:a> := <var:a> + <var:S1> ; <var:a> := <var:a> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allow , for every positive numbers $ <var:z> $ , $ <var:x> = <var:z> $ before the evaluation of the program it follows that $ <var:a> = <nat:4> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> + <nat:2> $ when code has terminated . \end{theorem} \begin{proof} The argument for our series of commands is shown using usual Hoare logic . Jumping to the following pieces of code in our series of commands , we see \verb | { <var:x> = <var:z> } <var:S0> := <nat:2> { <var:x> = <var:z> \land <var:S0> = <nat:2> } | and \verb | { <var:x> = <var:z> \land <var:S0> = <nat:2> } <var:S1> := <nat:6> { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> } | . This is given using the binding rule obtained from usual Hoare techniques . Moving forward to the next step , we see \verb | { <var:x> = <var:z> } <var:S0> := <nat:2> { <var:x> = <var:z> \land <var:S0> = <nat:2> } | , \verb | { <var:x> = <var:z> \land <var:S0> = <nat:2> } <var:S1> := <nat:6> { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> } | , \verb | { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> } <var:S1> := <var:S1> * <var:x> { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> } | , \verb | { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> } <var:S2> := <nat:4> { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> \land <var:S2> = <nat:4> } | , \verb | { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> \land <var:S2> = <nat:4> } <var:S2> := <var:S2> * <var:x> { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> \land <var:S2> = <nat:4> * <var:z> } | and \verb | { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> \land <var:S2> = <nat:4> * <var:z> } <var:S2> := <var:S2> * <var:x> { <var:x> = <var:z> \land <var:S0> = <nat:2> \land <var:S1> = <nat:6> * <var:z> \land <var:S2> = <nat:4> * <var:z> ^ <nat:2> } | . Advancing on , we have \verb | { <var:x> = <var:z> } <var:S0> := <nat:2> { <var:x> = <var:z> \land <var:S0> = <nat:2> } | . This is sound by the variable assignmet scheme found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:2> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:x> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:x> ; <var:S2> := <var:S2> * <var:x> ; <var:a> := <var:S2> ; <var:a> := <var:a> + <var:S1> ; <var:a> := <var:a> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:x> = <var:z> }} <def:poly> {{ <var:a> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:6> * <var:z> /\ <var:S2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:6> * <var:z> /\ <var:S2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:6> * <var:z> /\ <var:S2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:6> * <var:z> /\ <var:a> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:2> /\ <var:a> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:a> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 