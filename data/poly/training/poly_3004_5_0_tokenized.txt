\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:M> ; <var:q> := <var:c1> ; <var:q> := <var:q> + <var:c0> \end{verbatim} Assume that $ <var:M> = <var:z> $ ( letting positive numbers $ <var:z> $ ) ahead of evaluating our set of instructions , it holds that $ <var:q> = <nat:8> \cdot <var:z> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions can be given by Hoare logic . Advancing to the next step , the assignment code \verb | <var:c0> := <nat:9> ; | . This statement transfers the precondition $ \{ <var:M> = <var:z> \} $ into $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \} $ . Stepping forward , we have the variable assignmet line defining $ <nat:8> $ into $ <var:c1>$ . This command moves the condition $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \} $ into the postcondition $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:8> \} $ . This is ensured by the assignment inference rule found in standard Hoare techniques . Stepping forward , the binding line giving $ <var:c1> * <var:M> $ as $ <var:c1>$ . This redefines the condition $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:8> \} $ as the postcondition $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:8> \times <var:z> \} $ . This is shown to be logically sound with the assignment scheme from typical Hoare techniques . After , the binding command yielding $ <var:c1> $ as $ <var:q>$ . This code forwards the precondition $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:8> \times <var:z> \} $ toward $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \land <var:q> = <nat:8> \times <var:z> \} $ . Taking another step toward the following step contained in our series of commands , the code yielding $ <var:q> + <var:c0$ toward $ <var:q>$ . This command forwards $ \{ <var:M> = <var:z> \land <var:c0> = <nat:9> \land <var:q> = <nat:8> \times <var:z> \} $ as $ \{ <var:M> = <var:z> \land <var:q> = <nat:8> \times <var:z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:M> = <var:z> }} <var:c0> := <nat:9> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:M> ; <var:q> := <var:c1> ; <var:q> := <var:q> + <var:c0> {{ <var:q> = <nat:8> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c0> = <nat:9> /\ <var:q> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:q> = <nat:8> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 