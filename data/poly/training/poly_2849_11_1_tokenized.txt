\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:B1> := <var:u> ; <var:B2> := <var:B1> * <var:u> ; <var:B3> := <var:B2> * <var:u> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:8> ; <var:B2> := <var:B2> * <nat:2> ; <var:B3> := <var:B3> * <nat:5> ; <var:g> := <var:B3> <var:g> := <var:g> + <var:B2> <var:g> := <var:g> + <var:B1> <var:g> := <var:g> + <var:B0> \end{verbatim} Given that we have $ <var:u> = <var:K> $ before interpreting our series of commands , it must be that $ <var:g> = <nat:5> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands can be shown using typical Hoare logic . Going forward , the environment update line yielding $ <var:u> $ into $ <var:B1>$ . This takes the precondition $ \{ <var:u> = <var:K> \} $ into the condition $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \} $ . This is rigorously given using the assignment rule given by typical Hoare logic . Taking another step toward the next piece of code found in our code segment , we see the variable binding command giving $ <var:B1> * <var:u> $ toward $ <var:B2>$ . This command takes $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \} $ as $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \} $ . Considering the subsequent line of code contained in our set of commands , we have the variable binding statement \verb | <var:B3> := <var:B2> * <var:u> ; | . This redefines the precondition $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \} $ toward $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \} $ . Immediately following , we see the line \verb | <var:B0> := <nat:8> ; | . This takes $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \} $ as the postcondition $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ . Considering the next step found in the set of commands , we see the variable assignmet line giving $ <var:B1> * <nat:8> $ toward $ <var:B1>$ . This statement moves $ \{ <var:u> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ as $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ . This is ensured by the assignment law found in typical Hoare logic . Looking at the subsequent piece of code seen in our list of commands , we see the binding command \verb | <var:B2> := <var:B2> * <nat:2> ; | . This command takes the precondition $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ into $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ . Going to the next step , the binding code \verb | <var:B3> := <var:B3> * <nat:5> ; | . This code redefines the precondition $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ toward $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:B3> = <nat:5> \cdot <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ . This is shown through the assignment law obtained from Hoare logic . Shifting focus toward the upcoming piece of code in the list of instructions , we have the binding code defining $ <var:B3$ as $ <var:g>$ . This line moves $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:B3> = <nat:5> \cdot <var:K> ^ <nat:3> \land <var:B0> = <nat:8> \} $ as the postcondition $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:B0> = <nat:8> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> \} $ . Stepping forward , we have the variable update line letting $ <var:g> + <var:B2$ toward $ <var:g>$ . This redefines $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:B0> = <nat:8> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> \} $ as the postcondition $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B0> = <nat:8> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> \} $ . This is known to be sound by the assignment scheme given by usual Hoare logic . Following , the command \verb | <var:g> := <var:g> + <var:B1> | . This command redefines the precondition $ \{ <var:u> = <var:K> \land <var:B1> = <nat:8> \cdot <var:K> \land <var:B0> = <nat:8> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> \} $ to the condition $ \{ <var:u> = <var:K> \land <var:B0> = <nat:8> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:8> \cdot <var:K> \} $ . This is known to be sound using the assignment rule found in usual Hoare reasoning . Looking at the next command seen in our series of instructions , we have the assignment command \verb | <var:g> := <var:g> + <var:B0> | . This advances the condition $ \{ <var:u> = <var:K> \land <var:B0> = <nat:8> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:8> \cdot <var:K> \} $ into the condition $ \{ <var:u> = <var:K> \land <var:g> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:8> \cdot <var:K> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:u> = <var:K> }} <var:B1> := <var:u> ; <var:B2> := <var:B1> * <var:u> ; <var:B3> := <var:B2> * <var:u> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:8> ; <var:B2> := <var:B2> * <nat:2> ; <var:B3> := <var:B3> * <nat:5> ; <var:g> := <var:B3> <var:g> := <var:g> + <var:B2> <var:g> := <var:g> + <var:B1> <var:g> := <var:g> + <var:B0> {{ <var:g> = <nat:5> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <nat:8> * <var:K> /\ <var:B2> = <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <nat:8> * <var:K> /\ <var:B2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <nat:8> * <var:K> /\ <var:B2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:B3> = <nat:5> * <var:K> ^ <nat:3> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <nat:8> * <var:K> /\ <var:B2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:B0> = <nat:8> /\ <var:g> = <nat:5> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B1> = <nat:8> * <var:K> /\ <var:B0> = <nat:8> /\ <var:g> = <nat:5> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:B0> = <nat:8> /\ <var:g> = <nat:5> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:g> = <nat:5> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 