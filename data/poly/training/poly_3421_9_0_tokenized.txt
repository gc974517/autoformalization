\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:e> ; <var:g2> := <nat:7> ; <var:g2> := <var:g2> * <var:e> ; <var:g2> := <var:g2> * <var:e> ; <var:Z> := <var:g2> ; <var:Z> := <var:Z> + <var:g1> ; <var:Z> := <var:Z> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:e> = <var:Q> $ ahead of running our list of commands it holds that $ <var:Z> = <nat:7> \cdot <var:Q> ^ <nat:2> + <nat:8> \cdot <var:Q> + <nat:8> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:e> = <var:Q> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \} \\ <var:g1> := <nat:8> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:8> \} \\ <var:g1> := <var:g1> * <var:e> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:8> \cdot <var:Q> \} \\ <var:g2> := <nat:7> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:8> \cdot <var:Q> \land <var:g2> = <nat:7> \} \\ <var:g2> := <var:g2> * <var:e> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:8> \cdot <var:Q> \land <var:g2> = <nat:7> \cdot <var:Q> \} \\ <var:g2> := <var:g2> * <var:e> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:8> \cdot <var:Q> \land <var:g2> = <nat:7> \cdot <var:Q> ^ <nat:2> \} \\ <var:Z> := <var:g2> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:8> \cdot <var:Q> \land <var:Z> = <nat:7> \cdot <var:Q> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:g1> ; \\ \{ <var:e> = <var:Q> \land <var:g0> = <nat:8> \land <var:Z> = <nat:7> \cdot <var:Q> ^ <nat:2> + <nat:8> \cdot <var:Q> \} \\ <var:Z> := <var:Z> + <var:g0> \\ \{ <var:e> = <var:Q> \land <var:Z> = <nat:7> \cdot <var:Q> ^ <nat:2> + <nat:8> \cdot <var:Q> + <nat:8> \} \end{eqnarray} Given the above , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <def:poly> := <var:g0> := <nat:8> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:e> ; <var:g2> := <nat:7> ; <var:g2> := <var:g2> * <var:e> ; <var:g2> := <var:g2> * <var:e> ; <var:Z> := <var:g2> ; <var:Z> := <var:Z> + <var:g1> ; <var:Z> := <var:Z> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:e> = <var:Q> }} <def:poly> {{ <var:Z> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:g2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:g2> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:g2> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:Z> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:Z> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:Z> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 