\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <var:y> * <var:X> ; <var:y> := <nat:2> + <var:y> * <var:X> ; <var:y> := <nat:3> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:4> + <var:y> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:X> = <var:O> $ --- given every integers $ <var:O> $ --- ahead of the evaluation of this program , it holds that we see $ <var:y> = <nat:4> \times <var:O> ^ <nat:10> + <nat:2> \times <var:O> ^ <nat:9> + <nat:1> \times <var:O> ^ <nat:8> + <nat:1> \times <var:O> ^ <nat:7> + <nat:1> \times <var:O> ^ <nat:6> + <nat:1> \times <var:O> ^ <nat:5> + <nat:2> \times <var:O> ^ <nat:3> + <nat:3> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:y> := <nat:4> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \} \\ <var:y> := <nat:2> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> + <nat:2> \} \\ <var:y> := <nat:1> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:2> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:5> + <nat:2> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:1> \} \\ <var:y> := <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:6> + <nat:2> \cdot <var:O> ^ <nat:5> + <nat:1> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + \} \\ <var:y> := <nat:2> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:7> + <nat:2> \cdot <var:O> ^ <nat:6> + <nat:1> \cdot <var:O> ^ <nat:5> + <nat:1> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:2> \} \\ <var:y> := <nat:3> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:8> + <nat:2> \cdot <var:O> ^ <nat:7> + <nat:1> \cdot <var:O> ^ <nat:6> + <nat:1> \cdot <var:O> ^ <nat:5> + <nat:1> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> + <nat:3> \} \\ <var:y> := <nat:1> + <var:y> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:9> + <nat:2> \cdot <var:O> ^ <nat:8> + <nat:1> \cdot <var:O> ^ <nat:7> + <nat:1> \cdot <var:O> ^ <nat:6> + <nat:1> \cdot <var:O> ^ <nat:5> + <nat:1> \cdot <var:O> ^ <nat:4> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:1> \} \\ <var:y> := <nat:4> + <var:y> * <var:X> \\ \{ <var:X> = <var:O> \land <var:y> = <nat:4> \cdot <var:O> ^ <nat:10> + <nat:2> \cdot <var:O> ^ <nat:9> + <nat:1> \cdot <var:O> ^ <nat:8> + <nat:1> \cdot <var:O> ^ <nat:7> + <nat:1> \cdot <var:O> ^ <nat:6> + <nat:1> \cdot <var:O> ^ <nat:5> + <nat:2> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:4> \} \end{eqnarray} Given the above , our set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <var:y> * <var:X> ; <var:y> := <nat:2> + <var:y> * <var:X> ; <var:y> := <nat:3> + <var:y> * <var:X> ; <var:y> := <nat:1> + <var:y> * <var:X> ; <var:y> := <nat:4> + <var:y> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <def:poly> {{ <var:y> = <nat:4> * <var:O> ^ <nat:10> + <nat:2> * <var:O> ^ <nat:9> + <nat:1> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:6> + <nat:2> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:8> + <nat:2> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:9> + <nat:2> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:4> * <var:O> ^ <nat:10> + <nat:2> * <var:O> ^ <nat:9> + <nat:1> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 