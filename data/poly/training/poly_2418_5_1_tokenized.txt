\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:z1> := <var:Q> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:2> ; <var:S> := <var:z1> <var:S> := <var:S> + <var:z0> \end{verbatim} Given --- given all positive integers $ <var:B> $ --- that $ <var:Q> = <var:B> $ prior to the execution of the program , it holds that we have $ <var:S> = <nat:2> \cdot <var:B> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the set of instructions can be given by typical Hoare techniques . Jumping to the next line contained in the code , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:B> \} & <var:z1> := <var:Q> & \{ <var:Q> = <var:B> \land <var:z1> = <var:B> \} \end{tabular} Following , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:B> \} & <var:z1> := <var:Q> & \{ <var:Q> = <var:B> \land <var:z1> = <var:B> \} \\ \{ <var:Q> = <var:B> \land <var:z1> = <var:B> \} & <var:z0> := <nat:2> & \{ <var:Q> = <var:B> \land <var:z1> = <var:B> \land <var:z0> = <nat:2> \} \end{tabular} Moving onward , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:B> \} & <var:z1> := <var:Q> & \{ <var:Q> = <var:B> \land <var:z1> = <var:B> \} \end{tabular} Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:Q> = <var:B> \} & <var:z1> := <var:Q> & \{ <var:Q> = <var:B> \land <var:z1> = <var:B> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Q> = <var:B> }} <var:z1> := <var:Q> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:2> ; <var:S> := <var:z1> <var:S> := <var:S> + <var:z0> {{ <var:S> = <nat:2> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:z1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:z1> = <var:B> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:z1> = <nat:2> * <var:B> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:z0> = <nat:2> /\ <var:S> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:S> = <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 