\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:v> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:6> ; <var:C> := <var:P1> <var:C> := <var:C> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Assume $ <var:v> = <var:U> $ ( for every integers $ <var:U> $ ) prior to the execution of the series of instructions it must be that we see $ <var:C> = <nat:6> \cdot <var:U> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the series of commands can be shown with typical Hoare reasoning . After , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:U> \} & <var:P1> := <var:v> & \{ <var:v> = <var:U> \land <var:P1> = <var:U> \} \\ \{ <var:v> = <var:U> \land <var:P1> = <var:U> \} & <var:P0> := <nat:9> & \{ <var:v> = <var:U> \land <var:P1> = <var:U> \land <var:P0> = <nat:9> \} \\ \{ <var:v> = <var:U> \land <var:P1> = <var:U> \land <var:P0> = <nat:9> \} & <var:P1> := <var:P1> * <nat:6> & \{ <var:v> = <var:U> \land <var:P1> = <nat:6> * <var:U> \land <var:P0> = <nat:9> \} \end{tabular} Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:U> \} & <var:P1> := <var:v> & \{ <var:v> = <var:U> \land <var:P1> = <var:U> \} \\ \{ <var:v> = <var:U> \land <var:P1> = <var:U> \} & <var:P0> := <nat:9> & \{ <var:v> = <var:U> \land <var:P1> = <var:U> \land <var:P0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:v> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:6> ; <var:C> := <var:P1> <var:C> := <var:C> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:v> = <var:U> }} <def:poly> {{ <var:C> = <nat:6> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P1> = <var:U> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P1> = <nat:6> * <var:U> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P0> = <nat:9> /\ <var:C> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:C> = <nat:6> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 