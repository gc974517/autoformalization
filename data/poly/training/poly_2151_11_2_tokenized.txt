\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:4> + <var:l> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assuming it to hold that $ <var:j> = <var:K> $ ahead of running this set of commands it holds that we see $ <var:l> = <nat:2> \cdot <var:K> ^ <nat:10> + <nat:1> \cdot <var:K> ^ <nat:7> + <nat:1> \cdot <var:K> ^ <nat:6> + <nat:2> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:4> $ after code has finished executing . \end{theorem} \begin{proof} Proving correctness for our series of commands is demonstrated by typical Hoare techniques . Now , we have \begin{verbatim} { <var:j> = <var:K> } <var:l> := <nat:2> { <var:j> = <var:K> \land <var:l> = <nat:2> } { <var:j> = <var:K> \land <var:l> = <nat:2> } <var:l> := <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> + } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> + } <var:l> := <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:2> + } \end{verbatim} This is rigorously given using the variable assignmet law in typical Hoare reasoning . Considering the subsequent lines of codecontained in the code segment , we have \begin{verbatim} { <var:j> = <var:K> } <var:l> := <nat:2> { <var:j> = <var:K> \land <var:l> = <nat:2> } { <var:j> = <var:K> \land <var:l> = <nat:2> } <var:l> := <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> + } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> + } <var:l> := <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:2> + } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:2> + } <var:l> := <nat:1> + <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> } <var:l> := <nat:1> + <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> + <nat:1> } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> + <nat:1> } <var:l> := <nat:2> + <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:2> } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:2> } <var:l> := <nat:3> + <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> } { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> } <var:l> := <nat:2> + <var:l> * <var:j> { <var:j> = <var:K> \land <var:l> = <nat:2> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:4> + <var:l> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:j> = <var:K> }} <def:poly> {{ <var:l> = <nat:2> * <var:K> ^ <nat:10> + <nat:1> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:8> + <nat:1> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:9> + <nat:1> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:l> = <nat:2> * <var:K> ^ <nat:10> + <nat:1> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 