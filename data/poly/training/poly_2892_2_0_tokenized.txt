\begin{document} \begin{theorem} Define a series of commands as follows \begin{verbatim} <var:U0> := <nat:4> ; <var:r> := <var:U0> \end{verbatim} Assuming that we have $ <var:o> = <var:R> $ before interpreting our series of instructions it follows that $ <var:r> = <nat:4> $ after list of commands executes . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:o> = <var:R> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:o> = <var:R> \land <var:U0> = <nat:4> \} \\ <var:r> := <var:U0> \\ \{ <var:o> = <var:R> \land <var:r> = <nat:4> \} \end{eqnarray} Thus , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:o> = <var:R> }} <var:U0> := <nat:4> ; <var:r> := <var:U0> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 