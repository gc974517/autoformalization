\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:n> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:8> ; <var:a> := <var:b1> <var:a> := <var:a> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assume given whole numbers $ <var:M> $ $ <var:n> = <var:M> $ ahead of running the set of instructions , then we see $ <var:a> = <nat:8> * <var:M> + <nat:2> $ once code finishes . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:n> = <var:M> \} \\ <var:b1> := <var:n> ; \\ \{ <var:n> = <var:M> \land <var:b1> = <var:M> \} \\ <var:b0> := <nat:2> ; \\ \{ <var:n> = <var:M> \land <var:b1> = <var:M> \land <var:b0> = <nat:2> \} \\ <var:b1> := <var:b1> * <nat:8> ; \\ \{ <var:n> = <var:M> \land <var:b1> = <nat:8> \cdot <var:M> \land <var:b0> = <nat:2> \} \\ <var:a> := <var:b1> \\ \{ <var:n> = <var:M> \land <var:b0> = <nat:2> \land <var:a> = <nat:8> \cdot <var:M> \} \\ <var:a> := <var:a> + <var:b0> \\ \{ <var:n> = <var:M> \land <var:a> = <nat:8> \cdot <var:M> + <nat:2> \} \end{eqnarray} Hence , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:n> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:8> ; <var:a> := <var:b1> <var:a> := <var:a> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:n> = <var:M> }} <def:poly> {{ <var:a> = <nat:8> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:b1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:b1> = <var:M> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:b1> = <nat:8> * <var:M> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:b0> = <nat:2> /\ <var:a> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:a> = <nat:8> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 