\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:9> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:p> ; <var:T> := <var:L1> ; <var:T> := <var:T> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for some natural coefficients $ <var:i> $ ) it to hold that $ <var:p> = <var:i> $ ahead of the evaluation of the series of commands , it must be that we have $ <var:T> = <nat:6> \times <var:i> + <nat:9> $ once set of commands terminates . \end{theorem} \begin{proof} Arguing the correctness of our code can be done using Hoare logic . Considering the subsequent steps in our segment of code , \[ \begin{tabular} {rcl} \{ <var:p> = <var:i> \} & <var:L0> := <nat:9> & \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \} \\ \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \} & <var:L1> := <nat:6> & \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \land <var:L1> = <nat:6> \} \end{tabular} Following , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:i> \} & <var:L0> := <nat:9> & \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \} \\ \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \} & <var:L1> := <nat:6> & \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \land <var:L1> = <nat:6> \} \end{tabular} This is ensured with the variable binding scheme from Hoare reasoning . Looking at the upcoming bit of code found in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:i> \} & <var:L0> := <nat:9> & \{ <var:p> = <var:i> \land <var:L0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:p> ; <var:T> := <var:L1> ; <var:T> := <var:T> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:p> = <var:i> }} <def:poly> {{ <var:T> = <nat:6> * <var:i> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:L0> = <nat:9> /\ <var:T> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:T> = <nat:6> * <var:i> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 