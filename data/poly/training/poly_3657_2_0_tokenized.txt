\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:6> ; <var:z> := <var:I0> \end{verbatim} Allowing $ <var:y> = <var:Q> $ ahead of interpreting the series of instructions , it follows that $ <var:z> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be seen using Hoare logic . Shifting focus toward the next command seen in the set of commands , \begin{verbatim} { <var:y> = <var:Q> } <var:I0> := <nat:6> { <var:y> = <var:Q> \land <var:I0> = <nat:6> } \end{verbatim} This is shown using the variable assignmet law given by usual Hoare reasoning . Advancing to the subsequent step found in our code segment , we see \begin{verbatim} { <var:y> = <var:Q> } <var:I0> := <nat:6> { <var:y> = <var:Q> \land <var:I0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:y> = <var:Q> }} <var:I0> := <nat:6> ; <var:z> := <var:I0> {{ <var:z> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:z> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 