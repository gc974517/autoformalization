\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:3> ; <var:T> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:i> = <var:B> $ , for every integers $ <var:B> $ , ahead of evaluating the series of commands it must be that we see $ <var:T> = <nat:3> $ after set of commands has terminated . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:i> = <var:B> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:i> = <var:B> \land <var:V0> = <nat:3> \} \\ <var:T> := <var:V0> \\ \{ <var:i> = <var:B> \land <var:T> = <nat:3> \} \end{eqnarray} As a result , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:T> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:i> = <var:B> }} <def:poly> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 