\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:g> := <nat:1> ; <var:g> := <nat:2> + <var:g> * <var:P> \end{verbatim} Allow that $ <var:P> = <var:b> $ before the execution of our program it holds that we have $ <var:g> = <nat:1> \times <var:b> + <nat:2> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:P> = <var:b> \} \\ <var:g> := <nat:1> ; \\ \{ <var:P> = <var:b> \land <var:g> = <nat:1> \} \\ <var:g> := <nat:2> + <var:g> * <var:P> \\ \{ <var:P> = <var:b> \land <var:g> = <nat:1> \times <var:b> + <nat:2> \} \end{eqnarray} Given the preceding argument , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:P> = <var:b> }} <var:g> := <nat:1> ; <var:g> := <nat:2> + <var:g> * <var:P> {{ <var:g> = <nat:1> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:g> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:g> = <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 