\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:5> ; <var:A> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Given taking positive integer coefficients $ <var:j> $ it to hold that $ <var:l> = <var:j> $ ahead of the execution of our series of instructions , it follows that we have $ <var:A> = <nat:5> $ once list of instructions has exited . \end{theorem} \begin{proof} The flow of logic for our program can be demonstrated with standard Hoare reasoning . Immediately following , we see the code assigning $ <nat:5> $ to $ <var:k0>$ . This command advances the precondition $ \{ <var:l> = <var:j> \} $ as the condition $ \{ <var:l> = <var:j> \land <var:k0> = <nat:5> \} $ . Advancing , we see the variable update code \verb | <var:A> := <var:k0> | . This forwards $ \{ <var:l> = <var:j> \land <var:k0> = <nat:5> \} $ toward $ \{ <var:l> = <var:j> \land <var:A> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:5> ; <var:A> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:l> = <var:j> }} <def:poly> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 