\begin{document} \begin{theorem} We define the following segment of code : \begin{verbatim} <var:u0> := <nat:1> ; <var:l> := <var:u0> \end{verbatim} Assume that $ <var:X> = <var:w> $ ahead of interpreting the series of commands , it must be that we have $ <var:l> = <nat:1> $ when set of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be demonstrated by Hoare reasoning . Advancing to the next step , we see the binding line yielding $ <nat:1> $ as $ <var:u0>$ . This takes $ \{ <var:X> = <var:w> \} $ to the postcondition $ \{ <var:X> = <var:w> \land <var:u0> = <nat:1> \} $ . Moving forward to the following line of code in the list of commands , we have the variable update command yielding $ <var:u0$ into $ <var:l>$ . This moves the precondition $ \{ <var:X> = <var:w> \land <var:u0> = <nat:1> \} $ into $ \{ <var:X> = <var:w> \land <var:l> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:X> = <var:w> }} <var:u0> := <nat:1> ; <var:l> := <var:u0> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 