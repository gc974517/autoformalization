\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:1> ; <var:y> := <var:P0> \end{verbatim} Allow ( given all integers $ <var:b> $ ) $ <var:R> = <var:b> $ before running this series of commands , then $ <var:y> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands can be demonstrated using standard Hoare logic . Honing in on the subsequent step seen in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:b> \} & <var:P0> := <nat:1> & \{ <var:R> = <var:b> \land <var:P0> = <nat:1> \} \end{tabular} Considering the next line of code found in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:b> \} & <var:P0> := <nat:1> & \{ <var:R> = <var:b> \land <var:P0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:R> = <var:b> }} <var:P0> := <nat:1> ; <var:y> := <var:P0> {{ <var:y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 