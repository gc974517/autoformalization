\begin{document} \begin{theorem} Consider the following series of commands as \begin{verbatim} <var:c0> := <nat:4> ; <var:T> := <var:c0> \end{verbatim} Allow it to hold that $ <var:O> = <var:S> $ , given any $ <var:S> \in \mathbb{N} $ , before evaluating our list of instructions it must be that we have $ <var:T> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:S> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:O> = <var:S> \land <var:c0> = <nat:4> \} \\ <var:T> := <var:c0> \\ \{ <var:O> = <var:S> \land <var:T> = <nat:4> \} \end{eqnarray} The application of standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:O> = <var:S> }} <var:c0> := <nat:4> ; <var:T> := <var:c0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 