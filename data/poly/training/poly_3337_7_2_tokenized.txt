\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:j> := <nat:1> ; <var:j> := <nat:1> + <var:j> * <var:K> ; <var:j> := <nat:3> + <var:j> * <var:K> ; <var:j> := <nat:4> + <var:j> * <var:K> ; <var:j> := <nat:1> + <var:j> * <var:K> ; <var:j> := <var:j> * <var:K> ; <var:j> := <nat:4> + <var:j> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:K> = <var:l> $ , given some natural numbers $ <var:l> $ , before the evaluation of the series of commands it follows that we see $ <var:j> = <nat:1> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:4> $ after list of commands has exited . \end{theorem} \begin{proof} The method of proof for our set of commands can be done by the following decorated series of commands . \begin{eqnarray} \{ <var:K> = <var:l> \} \\ <var:j> := <nat:1> ; \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \} \\ <var:j> := <nat:1> + <var:j> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \times <var:l> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:3> \} \\ <var:j> := <nat:4> + <var:j> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> \} \\ <var:j> := <nat:1> + <var:j> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:1> \} \\ <var:j> := <var:j> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + \} \\ <var:j> := <nat:4> + <var:j> * <var:K> \\ \{ <var:K> = <var:l> \land <var:j> = <nat:1> \times <var:l> ^ <nat:6> + <nat:1> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:1> ; <var:j> := <nat:1> + <var:j> * <var:K> ; <var:j> := <nat:3> + <var:j> * <var:K> ; <var:j> := <nat:4> + <var:j> * <var:K> ; <var:j> := <nat:1> + <var:j> * <var:K> ; <var:j> := <var:j> * <var:K> ; <var:j> := <nat:4> + <var:j> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:K> = <var:l> }} <def:poly> {{ <var:j> = <nat:1> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:j> = <nat:1> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 