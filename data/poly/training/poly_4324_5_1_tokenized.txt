\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u1> := <var:X> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:8> ; <var:t> := <var:u1> <var:t> := <var:t> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Assume $ <var:X> = <var:B> $ letting natural numbers $ <var:B> $ prior to evaluating our series of instructions it follows that we have $ <var:t> = <nat:8> \cdot <var:B> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions can be accomplished through Hoare logic . Moving on , \begin{verbatim} { <var:X> = <var:B> } <var:u1> := <var:X> { <var:X> = <var:B> \land <var:u1> = <var:B> } { <var:X> = <var:B> \land <var:u1> = <var:B> } <var:u0> := <nat:3> { <var:X> = <var:B> \land <var:u1> = <var:B> \land <var:u0> = <nat:3> } { <var:X> = <var:B> \land <var:u1> = <var:B> \land <var:u0> = <nat:3> } <var:u1> := <var:u1> * <nat:8> { <var:X> = <var:B> \land <var:u1> = <nat:8> \times <var:B> \land <var:u0> = <nat:3> } \end{verbatim} Taking another step toward the upcoming line of code seen in the code , \begin{verbatim} { <var:X> = <var:B> } <var:u1> := <var:X> { <var:X> = <var:B> \land <var:u1> = <var:B> } \end{verbatim} This is ensured using the variable assignmet rule of typical Hoare reasoning . Shifting focus toward the proceeding statement contained in our program , we have \begin{verbatim} { <var:X> = <var:B> } <var:u1> := <var:X> { <var:X> = <var:B> \land <var:u1> = <var:B> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:X> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:8> ; <var:t> := <var:u1> <var:t> := <var:t> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:X> = <var:B> }} <def:poly> {{ <var:t> = <nat:8> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:u1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:u1> = <var:B> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:u1> = <nat:8> * <var:B> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:u0> = <nat:3> /\ <var:t> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:t> = <nat:8> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 