\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:6> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:s> ; <var:W2> := <nat:7> ; <var:W2> := <var:W2> * <var:s> ; <var:W2> := <var:W2> * <var:s> ; <var:X> := <var:W2> ; <var:X> := <var:X> + <var:W1> ; <var:X> := <var:X> + <var:W0> \end{verbatim} Assuming ( for some $ <var:x> \in \mathbb{Z}^+ $ ) it to be that $ <var:s> = <var:x> $ prior to interpreting this program , it follows that we have $ <var:X> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:6> $ when series of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:x> \} \\ <var:W0> := <nat:6> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \} \\ <var:W1> := <nat:1> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \} \\ <var:W1> := <var:W1> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:x> \} \\ <var:W2> := <nat:7> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:x> \land <var:W2> = <nat:7> \} \\ <var:W2> := <var:W2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:x> \land <var:W2> = <nat:7> \cdot <var:x> \} \\ <var:W2> := <var:W2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:x> \land <var:W2> = <nat:7> \cdot <var:x> ^ <nat:2> \} \\ <var:X> := <var:W2> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:x> \land <var:X> = <nat:7> \cdot <var:x> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:W1> ; \\ \{ <var:s> = <var:x> \land <var:W0> = <nat:6> \land <var:X> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:X> := <var:X> + <var:W0> \\ \{ <var:s> = <var:x> \land <var:X> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:6> \} \end{eqnarray} Applying standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:s> = <var:x> }} <var:W0> := <nat:6> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:s> ; <var:W2> := <nat:7> ; <var:W2> := <var:W2> * <var:s> ; <var:W2> := <var:W2> * <var:s> ; <var:X> := <var:W2> ; <var:X> := <var:X> + <var:W1> ; <var:X> := <var:X> + <var:W0> {{ <var:X> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:x> /\ <var:W2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:x> /\ <var:W2> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:x> /\ <var:W2> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:x> /\ <var:X> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:W0> = <nat:6> /\ <var:X> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:X> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 