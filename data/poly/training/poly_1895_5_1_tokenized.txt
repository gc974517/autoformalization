\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:n> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:u> := <var:Q1> <var:u> := <var:u> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:n> = <var:l> $ ahead of executing the series of commands , it must be that $ <var:u> = <nat:6> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions can be accomplished using standard Hoare logic . Moving on , we see \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:Q1> := <var:n> \, \{ <var:n> = <var:l> \land <var:Q1> = <var:l> \} \end{eqnarray} Moving onward , we have \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:Q1> := <var:n> \, \{ <var:n> = <var:l> \land <var:Q1> = <var:l> \} \\ \{ <var:n> = <var:l> \land <var:Q1> = <var:l> \} \, <var:Q0> := <nat:4> \, \{ <var:n> = <var:l> \land <var:Q1> = <var:l> \land <var:Q0> = <nat:4> \} \\ \{ <var:n> = <var:l> \land <var:Q1> = <var:l> \land <var:Q0> = <nat:4> \} \, <var:Q1> := <var:Q1> * <nat:6> \, \{ <var:n> = <var:l> \land <var:Q1> = <nat:6> \cdot <var:l> \land <var:Q0> = <nat:4> \} \\ \{ <var:n> = <var:l> \land <var:Q1> = <nat:6> \cdot <var:l> \land <var:Q0> = <nat:4> \} \, <var:u> := <var:Q1\, \{ <var:n> = <var:l> \land <var:Q0> = <nat:4> \land <var:u> = <nat:6> \cdot <var:l> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:n> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:u> := <var:Q1> <var:u> := <var:u> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <def:poly> {{ <var:u> = <nat:6> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:Q1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:Q1> = <var:l> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:Q1> = <nat:6> * <var:l> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:Q0> = <nat:4> /\ <var:u> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:u> = <nat:6> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 