\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:H0> := <nat:3> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:u> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:u> ; <var:H2> := <var:H2> * <var:u> ; <var:h> := <var:H2> ; <var:h> := <var:h> + <var:H1> ; <var:h> := <var:h> + <var:H0> \end{verbatim} Assume it to be that $ <var:u> = <var:F> $ given any whole numbers $ <var:F> $ prior to evaluating this program , it holds that we have $ <var:h> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> $ after list of instructions has terminated . \end{theorem} \begin{proof} The proof of our list of instructions is accomplished with typical Hoare techniques . Paying attention to the next bit of code found in the list of instructions , the binding line defining $ <nat:3> $ to $ <var:H0>$ . This line takes the precondition $ \{ <var:u> = <var:F> \} $ to the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \} $ . This is given through the assignment inference rule obtained from standard Hoare techniques . Taking a look at the proceeding piece of code in our set of instructions , we see the line \verb | <var:H1> := <nat:2> ; | . This transfers the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \} $ into the postcondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \} $ . This is deduced through the assignment inference rule defined by Hoare techniques . Stepping through , the binding statement binding $ <var:H1> * <var:u> $ into $ <var:H1>$ . This line advances the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \} $ . This is rigorously given with the assignment rule obtained from typical Hoare techniques . Now , we have the assignment code \verb | <var:H2> := <nat:4> ; | . This takes the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \} $ into the postcondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:H2> = <nat:4> \} $ . Keeping momentum , we have the variable assignmet statement \verb | <var:H2> := <var:H2> * <var:u> ; | . This line moves $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:H2> = <nat:4> \} $ into the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:H2> = <nat:4> \times <var:F> \} $ . Paying attention to the following statement seen in our code , we have the assignment line assigning $ <var:H2> * <var:u> $ toward $ <var:H2>$ . This line advances the precondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:H2> = <nat:4> \times <var:F> \} $ to $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:H2> = <nat:4> \times <var:F> ^ <nat:2> \} $ . Now , we have the assignment statement \verb | <var:h> := <var:H2> ; | . This statement moves the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:H2> = <nat:4> \times <var:F> ^ <nat:2> \} $ toward the postcondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:h> = <nat:4> \times <var:F> ^ <nat:2> \} $ . Paying attention to the proceeding step found in the segment of code , we have the variable binding statement yielding $ <var:h> + <var:H1> $ as $ <var:h>$ . This statement forwards the precondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \times <var:F> \land <var:h> = <nat:4> \times <var:F> ^ <nat:2> \} $ to the condition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:h> = <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> \} $ . Considering the next line in the segment of code , we have the variable update line \verb | <var:h> := <var:h> + <var:H0> | . This redefines the precondition $ \{ <var:u> = <var:F> \land <var:H0> = <nat:3> \land <var:h> = <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> \} $ into $ \{ <var:u> = <var:F> \land <var:h> = <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:u> = <var:F> }} <var:H0> := <nat:3> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:u> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:u> ; <var:H2> := <var:H2> * <var:u> ; <var:h> := <var:H2> ; <var:h> := <var:h> + <var:H1> ; <var:h> := <var:h> + <var:H0> {{ <var:h> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:F> /\ <var:H2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:F> /\ <var:H2> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:F> /\ <var:H2> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:F> /\ <var:h> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:H0> = <nat:3> /\ <var:h> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:h> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 