\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:b0> := <nat:2> ; <var:P> := <var:b0> \end{verbatim} Allow , for all integers $ <var:a> $ , that $ <var:t> = <var:a> $ prior to the execution of the series of instructions it must be that we have $ <var:P> = <nat:2> $ when code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code can be accomplished by Hoare logic . Moving forward to the upcoming line of code in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:a> \} & <var:b0> := <nat:2> & \{ <var:t> = <var:a> \land <var:b0> = <nat:2> \} \end{tabular} This is sound by the assignment inference rule in Hoare reasoning . Moving on to the upcoming line found in the series of commands , \[ \begin{tabular} {rcl} \{ <var:t> = <var:a> \} & <var:b0> := <nat:2> & \{ <var:t> = <var:a> \land <var:b0> = <nat:2> \} \end{tabular} This is given using the law in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:t> = <var:a> }} <var:b0> := <nat:2> ; <var:P> := <var:b0> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 