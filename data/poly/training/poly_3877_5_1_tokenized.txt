\begin{document} \begin{theorem} We define the following list of instructions as follows \begin{verbatim} <var:t1> := <var:d> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:5> ; <var:k> := <var:t1> <var:k> := <var:k> + <var:t0> \end{verbatim} Assuming that $ <var:d> = <var:l> $ prior to evaluating this code it holds that we see $ <var:k> = <nat:5> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:l> \} \\ <var:t1> := <var:d> ; \\ \{ <var:d> = <var:l> \land <var:t1> = <var:l> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:d> = <var:l> \land <var:t1> = <var:l> \land <var:t0> = <nat:4> \} \\ <var:t1> := <var:t1> * <nat:5> ; \\ \{ <var:d> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t0> = <nat:4> \} \\ <var:k> := <var:t1> \\ \{ <var:d> = <var:l> \land <var:t0> = <nat:4> \land <var:k> = <nat:5> \cdot <var:l> \} \\ <var:k> := <var:k> + <var:t0> \\ \{ <var:d> = <var:l> \land <var:k> = <nat:5> \cdot <var:l> + <nat:4> \} \end{eqnarray} Applying standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <var:t1> := <var:d> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:5> ; <var:k> := <var:t1> <var:k> := <var:k> + <var:t0> {{ <var:k> = <nat:5> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:t1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:t1> = <var:l> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:t1> = <nat:5> * <var:l> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:t0> = <nat:4> /\ <var:k> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:k> = <nat:5> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 