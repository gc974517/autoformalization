\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v1> := <var:D> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:4> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:D> = <var:b> $ --- for any $ <var:b> \in \mathbb{Z}^+ $ --- ahead of running this set of instructions , then $ <var:g> = <nat:4> \cdot <var:b> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our code is evident with the following decorated set of commands . \begin{eqnarray} \{ <var:D> = <var:b> \} \\ <var:v1> := <var:D> ; \\ \{ <var:D> = <var:b> \land <var:v1> = <var:b> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:D> = <var:b> \land <var:v1> = <var:b> \land <var:v0> = <nat:3> \} \\ <var:v1> := <var:v1> * <nat:4> ; \\ \{ <var:D> = <var:b> \land <var:v1> = <nat:4> \times <var:b> \land <var:v0> = <nat:3> \} \\ <var:g> := <var:v1> \\ \{ <var:D> = <var:b> \land <var:v0> = <nat:3> \land <var:g> = <nat:4> \times <var:b> \} \\ <var:g> := <var:g> + <var:v0> \\ \{ <var:D> = <var:b> \land <var:g> = <nat:4> \times <var:b> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:D> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:4> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <def:poly> {{ <var:g> = <nat:4> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:v1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:v1> = <var:b> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:v0> = <nat:3> /\ <var:g> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:g> = <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 