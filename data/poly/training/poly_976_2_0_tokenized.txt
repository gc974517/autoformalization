\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:1> ; <var:S> := <var:R0> \end{verbatim} Assuming that we have $ <var:g> = <var:q> $ ahead of evaluating the series of commands it follows that $ <var:S> = <nat:1> $ . \end{theorem} \begin{proof} Observe the following decorated series of commands . \begin{eqnarray} \{ <var:g> = <var:q> \} \\ <var:R0> := <nat:1> ; \\ \{ <var:g> = <var:q> \land <var:R0> = <nat:1> \} \\ <var:S> := <var:R0> \\ \{ <var:g> = <var:q> \land <var:S> = <nat:1> \} \end{eqnarray} The application of Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:g> = <var:q> }} <var:R0> := <nat:1> ; <var:S> := <var:R0> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 