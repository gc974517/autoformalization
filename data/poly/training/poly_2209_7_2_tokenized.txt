\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M> := <nat:3> ; <var:M> := <var:M> * <var:f> ; <var:M> := <nat:2> + <var:M> * <var:f> ; <var:M> := <var:M> * <var:f> ; <var:M> := <nat:2> + <var:M> * <var:f> ; <var:M> := <nat:4> + <var:M> * <var:f> ; <var:M> := <nat:3> + <var:M> * <var:f> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Assuming ( for positive integer coefficients $ <var:u> $ ) it to be that $ <var:f> = <var:u> $ before executing our set of instructions it must be that we have $ <var:M> = <nat:3> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:u> \} \\ <var:M> := <nat:3> ; \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> \} \\ <var:M> := <var:M> * <var:f> ; \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> * <var:u> + \} \\ <var:M> := <nat:2> + <var:M> * <var:f> ; \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> \} \\ <var:M> := <var:M> * <var:f> ; \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + \} \\ <var:M> := <nat:2> + <var:M> * <var:f> ; \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> \} \\ <var:M> := <nat:4> + <var:M> * <var:f> ; \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:4> \} \\ <var:M> := <nat:3> + <var:M> * <var:f> \\ \{ <var:f> = <var:u> \land <var:M> = <nat:3> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> \} \end{eqnarray} Using typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:3> ; <var:M> := <var:M> * <var:f> ; <var:M> := <nat:2> + <var:M> * <var:f> ; <var:M> := <var:M> * <var:f> ; <var:M> := <nat:2> + <var:M> * <var:f> ; <var:M> := <nat:4> + <var:M> * <var:f> ; <var:M> := <nat:3> + <var:M> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:f> = <var:u> }} <def:poly> {{ <var:M> = <nat:3> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:M> = <nat:3> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 