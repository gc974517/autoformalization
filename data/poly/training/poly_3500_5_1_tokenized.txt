\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x1> := <var:w> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:4> ; <var:v> := <var:x1> <var:v> := <var:v> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:w> = <var:V> $ ahead of running the series of commands , then $ <var:v> = <nat:4> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:V> \} \\ <var:x1> := <var:w> ; \\ \{ <var:w> = <var:V> \land <var:x1> = <var:V> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:w> = <var:V> \land <var:x1> = <var:V> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:4> ; \\ \{ <var:w> = <var:V> \land <var:x1> = <nat:4> \cdot <var:V> \land <var:x0> = <nat:1> \} \end{eqnarray} Advancing running the series of commands gives : \begin{eqnarray} <var:v> := <var:x1> \\ \{ <var:w> = <var:V> \land <var:x0> = <nat:1> \land <var:v> = <nat:4> \cdot <var:V> \} \\ <var:v> := <var:v> + <var:x0> \\ \{ <var:w> = <var:V> \land <var:v> = <nat:4> \cdot <var:V> + <nat:1> \} \end{eqnarray} The application of Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:w> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:4> ; <var:v> := <var:x1> <var:v> := <var:v> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:w> = <var:V> }} <def:poly> {{ <var:v> = <nat:4> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:x1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:x1> = <var:V> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:x1> = <nat:4> * <var:V> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:x0> = <nat:1> /\ <var:v> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:v> = <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 