\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:1> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:S> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:S> ; <var:T2> := <var:T2> * <var:S> ; <var:D> := <var:T2> ; <var:D> := <var:D> + <var:T1> ; <var:D> := <var:D> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:S> = <var:Q> $ given all natural numbers $ <var:Q> $ prior to evaluating our list of instructions , it must be that $ <var:D> = <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> $ after series of instructions has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this program is demonstrated with standard Hoare reasoning . Now , \begin{eqnarray} \{ <var:S> = <var:Q> \} \, <var:T0> := <nat:1> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \} \, <var:T1> := <nat:1> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \} \, <var:T1> := <var:T1> * <var:S> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \} \, <var:T2> := <nat:8> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:T2> = <nat:8> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:T2> = <nat:8> \} \, <var:T2> := <var:T2> * <var:S> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:T2> = <nat:8> * <var:Q> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:T2> = <nat:8> * <var:Q> \} \, <var:T2> := <var:T2> * <var:S> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:T2> = <nat:8> * <var:Q> ^ <nat:2> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:T2> = <nat:8> * <var:Q> ^ <nat:2> \} \, <var:D> := <var:T2> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:Q> \land <var:D> = <nat:8> * <var:Q> ^ <nat:2> \} \end{eqnarray} This is rigorously given through the binding scheme obtained from Hoare logic . Honing in on the subsequent statements contained in our series of commands , \begin{eqnarray} \{ <var:S> = <var:Q> \} \, <var:T0> := <nat:1> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \} \\ \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \} \, <var:T1> := <nat:1> \, \{ <var:S> = <var:Q> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:1> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:S> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:S> ; <var:T2> := <var:T2> * <var:S> ; <var:D> := <var:T2> ; <var:D> := <var:D> + <var:T1> ; <var:D> := <var:D> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:S> = <var:Q> }} <def:poly> {{ <var:D> = <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:Q> /\ <var:T2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:Q> /\ <var:T2> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:Q> /\ <var:T2> = <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:Q> /\ <var:D> = <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:T0> = <nat:1> /\ <var:D> = <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:D> = <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 