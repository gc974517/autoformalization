\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:a> ; <var:T> := <var:w1> ; <var:T> := <var:T> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:a> = <var:g> $ prior to interpreting this series of commands , it follows that we have $ <var:T> = <nat:4> \cdot <var:g> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our code segment is given with usual Hoare techniques . Going to the next step , the environment update statement giving $ <nat:3> $ as $ <var:w0>$ . This redefines the condition $ \{ <var:a> = <var:g> \} $ to the postcondition $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \} $ . After , we have the binding command letting $ <nat:4> $ toward $ <var:w1>$ . This forwards $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \} $ into the postcondition $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \} $ . This is known to be sound through the assignment scheme given by typical Hoare techniques . Moving on to the next step , we see the variable binding command \verb | <var:w1> := <var:w1> * <var:a> ; | . This redefines the condition $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \} $ toward the condition $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \times <var:g> \} $ . This is shown through the assignment law obtained from typical Hoare logic . Observing the next command seen in our code segment , we see the code \verb | <var:T> := <var:w1> ; | . This transfers $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \times <var:g> \} $ to the condition $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \land <var:T> = <nat:4> \times <var:g> \} $ . Keeping momentum , we see the assignment command \verb | <var:T> := <var:T> + <var:w0> | . This line advances the precondition $ \{ <var:a> = <var:g> \land <var:w0> = <nat:3> \land <var:T> = <nat:4> \times <var:g> \} $ as $ \{ <var:a> = <var:g> \land <var:T> = <nat:4> \times <var:g> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:a> ; <var:T> := <var:w1> ; <var:T> := <var:T> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:a> = <var:g> }} <def:poly> {{ <var:T> = <nat:4> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:w0> = <nat:3> /\ <var:T> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:T> = <nat:4> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 