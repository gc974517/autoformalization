\begin{document} \begin{theorem} We define a set of instructions as \begin{verbatim} <var:q1> := <var:R> ; <var:q2> := <var:q1> * <var:R> ; <var:q3> := <var:q2> * <var:R> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:5> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:6> ; <var:H> := <var:q3> <var:H> := <var:H> + <var:q2> <var:H> := <var:H> + <var:q1> <var:H> := <var:H> + <var:q0> \end{verbatim} Assume that we have $ <var:R> = <var:A> $ ahead of executing the list of commands then we have $ <var:H> = <nat:6> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> + <nat:4> $ after list of instructions has executed . \end{theorem} \begin{proof} The method of proof for our list of instructions is evident using standard Hoare techniques . After , we see the variable binding code giving $ <var:R> $ toward $ <var:q1>$ . This moves $ \{ <var:R> = <var:A> \} $ to $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \} $ . Moving on , we see the assignment code giving $ <var:q1> * <var:R> $ as $ <var:q2>$ . This advances $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \} $ as the condition $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \land <var:q2> = <var:A> ^ <nat:2> \} $ . Now , we have the variable update statement letting $ <var:q2> * <var:R> $ toward $ <var:q3>$ . This takes $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \land <var:q2> = <var:A> ^ <nat:2> \} $ as the condition $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \land <var:q2> = <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \} $ . Moving forward to the subsequent statement found in the series of instructions , we have the binding statement \verb | <var:q0> := <nat:4> ; | . This redefines $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \land <var:q2> = <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \} $ into $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \land <var:q2> = <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ . This is ensured with the assignment inference rule defined in standard Hoare techniques . Looking at the proceeding statement found in our program , we have the binding code letting $ <var:q1> * <nat:5> $ as $ <var:q1>$ . This command advances the precondition $ \{ <var:R> = <var:A> \land <var:q1> = <var:A> \land <var:q2> = <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ as $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ . Immediately following , we have the variable binding command yielding $ <var:q2> * <nat:2> $ toward $ <var:q2>$ . This advances the precondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ toward the postcondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <nat:2> * <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ . Stepping forward , we have the environment update command letting $ <var:q3> * <nat:6> $ as $ <var:q3>$ . This statement forwards the precondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <nat:2> * <var:A> ^ <nat:2> \land <var:q3> = <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ as $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <nat:2> * <var:A> ^ <nat:2> \land <var:q3> = <nat:6> * <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ . Taking another step toward the subsequent statement contained in our set of commands , we have the code letting $ <var:q3$ into $ <var:H>$ . This code advances the precondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <nat:2> * <var:A> ^ <nat:2> \land <var:q3> = <nat:6> * <var:A> ^ <nat:3> \land <var:q0> = <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <nat:2> * <var:A> ^ <nat:2> \land <var:q0> = <nat:4> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> \} $ . Advancing on , we see the variable assignmet statement \verb | <var:H> := <var:H> + <var:q2> | . This code advances the condition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q2> = <nat:2> * <var:A> ^ <nat:2> \land <var:q0> = <nat:4> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q0> = <nat:4> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> \} $ . This is known to be sound with the assignment scheme defined in standard Hoare reasoning . Observing the next line of code contained in the set of instructions , we have the variable update statement \verb | <var:H> := <var:H> + <var:q1> | . This takes the precondition $ \{ <var:R> = <var:A> \land <var:q1> = <nat:5> * <var:A> \land <var:q0> = <nat:4> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> \} $ into $ \{ <var:R> = <var:A> \land <var:q0> = <nat:4> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> \} $ . Advancing on , we see the statement binding $ <var:H> + <var:q0$ into $ <var:H>$ . This takes the precondition $ \{ <var:R> = <var:A> \land <var:q0> = <nat:4> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> \} $ to the postcondition $ \{ <var:R> = <var:A> \land <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> \} $ . This is rigorously given by the assignment law of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:R> = <var:A> }} <var:q1> := <var:R> ; <var:q2> := <var:q1> * <var:R> ; <var:q3> := <var:q2> * <var:R> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:5> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:6> ; <var:H> := <var:q3> <var:H> := <var:H> + <var:q2> <var:H> := <var:H> + <var:q1> <var:H> := <var:H> + <var:q0> {{ <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <var:A> /\ <var:q2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <var:A> /\ <var:q2> = <var:A> ^ <nat:2> /\ <var:q3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <var:A> /\ <var:q2> = <var:A> ^ <nat:2> /\ <var:q3> = <var:A> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <nat:5> * <var:A> /\ <var:q2> = <var:A> ^ <nat:2> /\ <var:q3> = <var:A> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <nat:5> * <var:A> /\ <var:q2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:q3> = <var:A> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <nat:5> * <var:A> /\ <var:q2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:A> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <nat:5> * <var:A> /\ <var:q2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:q0> = <nat:4> /\ <var:H> = <nat:6> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q1> = <nat:5> * <var:A> /\ <var:q0> = <nat:4> /\ <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:q0> = <nat:4> /\ <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:H> = <nat:6> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 