\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:c> ; <var:Q2> := <var:Q1> * <var:c> ; <var:Q3> := <var:Q2> * <var:c> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:U> := <var:Q3> <var:U> := <var:U> + <var:Q2> <var:U> := <var:U> + <var:Q1> <var:U> := <var:U> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:c> = <var:F> $ prior to evaluating our series of commands then we see $ <var:U> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> + <nat:4> $ after list of instructions has executed . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:c> = <var:F> \} \\ <var:Q1> := <var:c> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <var:F> \} \\ <var:Q2> := <var:Q1> * <var:c> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <var:F> \land <var:Q2> = <var:F> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:c> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <var:F> \land <var:Q2> = <var:F> ^ <nat:2> \land <var:Q3> = <var:F> ^ <nat:3> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <var:F> \land <var:Q2> = <var:F> ^ <nat:2> \land <var:Q3> = <var:F> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:5> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <nat:5> \cdot <var:F> \land <var:Q2> = <var:F> ^ <nat:2> \land <var:Q3> = <var:F> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:Q2> := <var:Q2> * <nat:2> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <nat:5> \cdot <var:F> \land <var:Q2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Q3> = <var:F> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:Q3> := <var:Q3> * <nat:7> ; \\ \{ <var:c> = <var:F> \land <var:Q1> = <nat:5> \cdot <var:F> \land <var:Q2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Q3> = <nat:7> \cdot <var:F> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:U> := <var:Q3> \\ \{ <var:c> = <var:F> \land <var:Q1> = <nat:5> \cdot <var:F> \land <var:Q2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Q0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:F> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:Q2> \\ \{ <var:c> = <var:F> \land <var:Q1> = <nat:5> \cdot <var:F> \land <var:Q0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:Q1> \\ \{ <var:c> = <var:F> \land <var:Q0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> \} \\ <var:U> := <var:U> + <var:Q0> \\ \{ <var:c> = <var:F> \land <var:U> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> + <nat:4> \} \end{eqnarray} Given the preceding argument , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:c> ; <var:Q2> := <var:Q1> * <var:c> ; <var:Q3> := <var:Q2> * <var:c> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:U> := <var:Q3> <var:U> := <var:U> + <var:Q2> <var:U> := <var:U> + <var:Q1> <var:U> := <var:U> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:c> = <var:F> }} <def:poly> {{ <var:U> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <var:F> /\ <var:Q2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <var:F> /\ <var:Q2> = <var:F> ^ <nat:2> /\ <var:Q3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <var:F> /\ <var:Q2> = <var:F> ^ <nat:2> /\ <var:Q3> = <var:F> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <nat:5> * <var:F> /\ <var:Q2> = <var:F> ^ <nat:2> /\ <var:Q3> = <var:F> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <nat:5> * <var:F> /\ <var:Q2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:Q3> = <var:F> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <nat:5> * <var:F> /\ <var:Q2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:F> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <nat:5> * <var:F> /\ <var:Q2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:Q0> = <nat:4> /\ <var:U> = <nat:7> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q1> = <nat:5> * <var:F> /\ <var:Q0> = <nat:4> /\ <var:U> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:Q0> = <nat:4> /\ <var:U> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 