\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:g0> := <nat:2> ; <var:o> := <var:g0> \end{verbatim} Given that $ <var:T> = <var:j> $ before the evaluation of this series of instructions , it must be that we have $ <var:o> = <nat:2> $ once list of instructions executes . \end{theorem} \begin{proof} The method of proof for our code segment can be seen by Hoare reasoning . Immediately after , the variable binding command \verb | <var:g0> := <nat:2> ; | . This code advances the condition $ \{ <var:T> = <var:j> \} $ as the condition $ \{ <var:T> = <var:j> \land <var:g0> = <nat:2> \} $ . This is ensured with the assignment rule in standard Hoare reasoning . Honing in on the next piece of code found in our set of instructions , the binding command yielding $ <var:g0$ toward $ <var:o>$ . This line redefines the condition $ \{ <var:T> = <var:j> \land <var:g0> = <nat:2> \} $ into $ \{ <var:T> = <var:j> \land <var:o> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:T> = <var:j> }} <var:g0> := <nat:2> ; <var:o> := <var:g0> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 