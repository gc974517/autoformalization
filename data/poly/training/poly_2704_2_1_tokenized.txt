\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:6> ; <var:W> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:c> = <var:i> $ --- for every positive integer coefficients $ <var:i> $ --- ahead of the evaluation of this series of commands it holds that we see $ <var:W> = <nat:6> $ . \end{theorem} \begin{proof} The argument for the list of instructions is given using typical Hoare techniques . Paying attention to the next lines found in our series of instructions , we see \begin{verbatim} { <var:c> = <var:i> } <var:D0> := <nat:6> { <var:c> = <var:i> \land <var:D0> = <nat:6> } { <var:c> = <var:i> \land <var:D0> = <nat:6> } <var:W> := <var:D0{ <var:c> = <var:i> \land <var:W> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:6> ; <var:W> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <def:poly> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 