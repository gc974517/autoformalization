\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:Q> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:8> ; <var:W> := <var:l1> <var:W> := <var:W> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Given that we have $ <var:Q> = <var:k> $ --- taking positive numbers $ <var:k> $ --- ahead of the execution of the set of commands it follows that $ <var:W> = <nat:8> \cdot <var:k> + <nat:9> $ when set of instructions executes . \end{theorem} \begin{proof} Proving correctness for our list of commands is given through typical Hoare reasoning . Advancing to the following lines of codeseen in our code segment , we have \begin{eqnarray} \{ <var:Q> = <var:k> \} \, <var:l1> := <var:Q> \, \{ <var:Q> = <var:k> \land <var:l1> = <var:k> \} \\ \{ <var:Q> = <var:k> \land <var:l1> = <var:k> \} \, <var:l0> := <nat:9> \, \{ <var:Q> = <var:k> \land <var:l1> = <var:k> \land <var:l0> = <nat:9> \} \\ \{ <var:Q> = <var:k> \land <var:l1> = <var:k> \land <var:l0> = <nat:9> \} \, <var:l1> := <var:l1> * <nat:8> \, \{ <var:Q> = <var:k> \land <var:l1> = <nat:8> \times <var:k> \land <var:l0> = <nat:9> \} \\ \{ <var:Q> = <var:k> \land <var:l1> = <nat:8> \times <var:k> \land <var:l0> = <nat:9> \} \, <var:W> := <var:l1\, \{ <var:Q> = <var:k> \land <var:l0> = <nat:9> \land <var:W> = <nat:8> \times <var:k> \} \\ \{ <var:Q> = <var:k> \land <var:l0> = <nat:9> \land <var:W> = <nat:8> \times <var:k> \} \, <var:W> := <var:W> + <var:l0\, \{ <var:Q> = <var:k> \land <var:W> = <nat:8> \times <var:k> + <nat:9> \} \end{eqnarray} This is guaranteed using the binding law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:Q> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:8> ; <var:W> := <var:l1> <var:W> := <var:W> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Q> = <var:k> }} <def:poly> {{ <var:W> = <nat:8> * <var:k> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l1> = <var:k> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l1> = <nat:8> * <var:k> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l0> = <nat:9> /\ <var:W> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:W> = <nat:8> * <var:k> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 