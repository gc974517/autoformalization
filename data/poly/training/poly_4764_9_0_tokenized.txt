\begin{document} \begin{theorem} Define the following series of commands : \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:o> ; <var:k2> := <nat:8> ; <var:k2> := <var:k2> * <var:o> ; <var:k2> := <var:k2> * <var:o> ; <var:r> := <var:k2> ; <var:r> := <var:r> + <var:k1> ; <var:r> := <var:r> + <var:k0> \end{verbatim} Assuming that $ <var:o> = <var:G> $ prior to executing our segment of code , it follows that we see $ <var:r> = <nat:8> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:G> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \} \\ <var:k1> := <nat:4> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \} \\ <var:k1> := <var:k1> * <var:o> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \times <var:G> \} \\ <var:k2> := <nat:8> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \times <var:G> \land <var:k2> = <nat:8> \} \\ <var:k2> := <var:k2> * <var:o> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \times <var:G> \land <var:k2> = <nat:8> \times <var:G> \} \\ <var:k2> := <var:k2> * <var:o> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \times <var:G> \land <var:k2> = <nat:8> \times <var:G> ^ <nat:2> \} \\ <var:r> := <var:k2> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \times <var:G> \land <var:r> = <nat:8> \times <var:G> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:k1> ; \\ \{ <var:o> = <var:G> \land <var:k0> = <nat:2> \land <var:r> = <nat:8> \times <var:G> ^ <nat:2> + <nat:4> \times <var:G> \} \\ <var:r> := <var:r> + <var:k0> \\ \{ <var:o> = <var:G> \land <var:r> = <nat:8> \times <var:G> ^ <nat:2> + <nat:4> \times <var:G> + <nat:2> \} \end{eqnarray} Utilizing Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:o> = <var:G> }} <var:k0> := <nat:2> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:o> ; <var:k2> := <nat:8> ; <var:k2> := <var:k2> * <var:o> ; <var:k2> := <var:k2> * <var:o> ; <var:r> := <var:k2> ; <var:r> := <var:r> + <var:k1> ; <var:r> := <var:r> + <var:k0> {{ <var:r> = <nat:8> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:G> /\ <var:k2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:G> /\ <var:k2> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:G> /\ <var:k2> = <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:G> /\ <var:r> = <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:k0> = <nat:2> /\ <var:r> = <nat:8> * <var:G> ^ <nat:2> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r> = <nat:8> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 