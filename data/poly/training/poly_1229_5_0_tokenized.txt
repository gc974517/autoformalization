\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:D> ; <var:Q> := <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Given it to hold that $ <var:D> = <var:k> $ prior to interpreting this code , it holds that we have $ <var:Q> = <nat:3> * <var:k> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for this code can be seen by usual Hoare logic . Following , we have the environment update statement binding $ <nat:8> $ into $ <var:Z0>$ . This forwards $ \{ <var:D> = <var:k> \} $ toward the postcondition $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \} $ . Moving on to the next step , we have the variable assignmet code defining $ <nat:3> $ into $ <var:Z1>$ . This code advances the condition $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \} $ toward the postcondition $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \} $ . Moving forward to the next step , the variable binding code \verb | <var:Z1> := <var:Z1> * <var:D> ; | . This moves the condition $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \} $ toward the postcondition $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \times <var:k> \} $ . Going to the next step , the binding statement yielding $ <var:Z1> $ as $ <var:Q>$ . This code takes the precondition $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \times <var:k> \} $ toward $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \land <var:Q> = <nat:3> \times <var:k> \} $ . This is guaranteed by the assignment rule obtained from typical Hoare reasoning . Focusing on the proceeding command contained in the list of instructions , we have the code assigning $ <var:Q> + <var:Z0$ into $ <var:Q>$ . This command transfers $ \{ <var:D> = <var:k> \land <var:Z0> = <nat:8> \land <var:Q> = <nat:3> \times <var:k> \} $ toward the postcondition $ \{ <var:D> = <var:k> \land <var:Q> = <nat:3> \times <var:k> + <nat:8> \} $ . This is shown with the assignment inference rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:D> ; <var:Q> := <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:D> = <var:k> }} <def:poly> {{ <var:Q> = <nat:3> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:Z0> = <nat:8> /\ <var:Q> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:Q> = <nat:3> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 