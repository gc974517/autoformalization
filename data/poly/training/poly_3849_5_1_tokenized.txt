\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:A> ; <var:U0> := <nat:8> ; <var:U1> := <var:U1> * <nat:1> ; <var:p> := <var:U1> <var:p> := <var:p> + <var:U0> \end{verbatim} Assume that $ <var:A> = <var:j> $ ( assuming some positive integers $ <var:j> $ ) prior to the execution of this code , then we see $ <var:p> = <nat:1> \times <var:j> + <nat:8> $ when set of instructions has finished . \end{theorem} \begin{proof} The flow of logic for the list of commands is demonstrated with standard Hoare reasoning . Jumping to the upcoming piece of code found in the set of commands , we have the variable update command \verb | <var:U1> := <var:A> ; | . This advances the condition $ \{ <var:A> = <var:j> \} $ toward the condition $ \{ <var:A> = <var:j> \land <var:U1> = <var:j> \} $ . Moving on to the upcoming command seen in our series of instructions , we have the variable binding line defining $ <nat:8> $ into $ <var:U0>$ . This command advances the condition $ \{ <var:A> = <var:j> \land <var:U1> = <var:j> \} $ as the condition $ \{ <var:A> = <var:j> \land <var:U1> = <var:j> \land <var:U0> = <nat:8> \} $ . This is guaranteed using the assignment scheme given in usual Hoare logic . Moving onward , we have the variable update statement \verb | <var:U1> := <var:U1> * <nat:1> ; | . This code forwards $ \{ <var:A> = <var:j> \land <var:U1> = <var:j> \land <var:U0> = <nat:8> \} $ to the condition $ \{ <var:A> = <var:j> \land <var:U1> = <nat:1> \times <var:j> \land <var:U0> = <nat:8> \} $ . Shifting focus toward the next bit of code found in the set of commands , we have the environment update line letting $ <var:U1$ into $ <var:p>$ . This statement redefines the condition $ \{ <var:A> = <var:j> \land <var:U1> = <nat:1> \times <var:j> \land <var:U0> = <nat:8> \} $ to the postcondition $ \{ <var:A> = <var:j> \land <var:U0> = <nat:8> \land <var:p> = <nat:1> \times <var:j> \} $ . Moving on to the following bit of code contained in our segment of code , we see the environment update line \verb | <var:p> := <var:p> + <var:U0> | . This statement takes the precondition $ \{ <var:A> = <var:j> \land <var:U0> = <nat:8> \land <var:p> = <nat:1> \times <var:j> \} $ as the condition $ \{ <var:A> = <var:j> \land <var:p> = <nat:1> \times <var:j> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <var:U1> := <var:A> ; <var:U0> := <nat:8> ; <var:U1> := <var:U1> * <nat:1> ; <var:p> := <var:U1> <var:p> := <var:p> + <var:U0> {{ <var:p> = <nat:1> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U1> = <var:j> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U1> = <nat:1> * <var:j> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:8> /\ <var:p> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:p> = <nat:1> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 