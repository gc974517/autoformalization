\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:1> ; <var:H> := <var:X0> \end{verbatim} Allowing , for any integers $ <var:y> $ , that we have $ <var:T> = <var:y> $ before interpreting this code it holds that $ <var:H> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:y> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:T> = <var:y> \land <var:X0> = <nat:1> \} \\ <var:H> := <var:X0> \\ \{ <var:T> = <var:y> \land <var:H> = <nat:1> \} \end{eqnarray} Using Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:T> = <var:y> }} <var:X0> := <nat:1> ; <var:H> := <var:X0> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 