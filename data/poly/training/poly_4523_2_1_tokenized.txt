\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:h0> := <nat:1> ; <var:y> := <var:h0> \end{verbatim} Allow that $ <var:Y> = <var:J> $ ahead of interpreting this series of commands , it holds that we see $ <var:y> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be shown using usual Hoare logic . Stepping forward , we see \begin{verbatim} { <var:Y> = <var:J> } <var:h0> := <nat:1> { <var:Y> = <var:J> \land <var:h0> = <nat:1> } { <var:Y> = <var:J> \land <var:h0> = <nat:1> } <var:y> := <var:h0{ <var:Y> = <var:J> \land <var:y> = <nat:1> } \end{verbatim} This is deduced with the assignment rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Y> = <var:J> }} <var:h0> := <nat:1> ; <var:y> := <var:h0> {{ <var:y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 