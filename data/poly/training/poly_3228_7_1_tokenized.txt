\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:q> ; <var:O2> := <var:O1> * <var:q> ; <var:O3> := <var:O2> * <var:q> ; <var:O0> := <nat:2> ; <var:O3> := <var:O3> * <nat:1> ; <var:u> := <var:O3> <var:u> := <var:u> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:q> = <var:o> $ prior to the execution of this list of commands , it holds that $ <var:u> = <nat:1> \times <var:o> ^ <nat:3> + <nat:2> $ when program has finished . \end{theorem} \begin{proof} The way to prove correctness for our code segment is demonstrated using typical Hoare reasoning . Moving forward , the variable update command \verb | <var:O1> := <var:q> ; | . This advances the condition $ \{ <var:q> = <var:o> \} $ toward the condition $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \} $ . Advancing on , we see the variable update statement \verb | <var:O2> := <var:O1> * <var:q> ; | . This advances the condition $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \} $ as $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \} $ . This is given with the assignment law given in Hoare logic . Moving on to the next line of code found in our set of instructions , we have the variable binding command yielding $ <var:O2> * <var:q> $ toward $ <var:O3>$ . This transfers the precondition $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \} $ into $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \} $ . Advancing to the following command seen in the series of commands , the command \verb | <var:O0> := <nat:2> ; | . This transfers $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O0> = <nat:2> \} $ . Taking a look at the next bit of code in our series of instructions , the variable update code \verb | <var:O3> := <var:O3> * <nat:1> ; | . This transfers $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O0> = <nat:2> \} $ into $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <nat:1> * <var:o> ^ <nat:3> \land <var:O0> = <nat:2> \} $ . This is guaranteed through the assignment rule from typical Hoare techniques . Taking a look at the next command found in our code segment , we see the assignment statement assigning $ <var:O3$ into $ <var:u>$ . This transfers $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <nat:1> * <var:o> ^ <nat:3> \land <var:O0> = <nat:2> \} $ as the postcondition $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:u> = <nat:1> * <var:o> ^ <nat:3> \} $ . This is rigorously given through the assignment scheme defined in usual Hoare reasoning . Advancing , we see the variable update statement assigning $ <var:u> + <var:O0$ to $ <var:u>$ . This moves the precondition $ \{ <var:q> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:u> = <nat:1> * <var:o> ^ <nat:3> \} $ as the condition $ \{ <var:q> = <var:o> \land <var:u> = <nat:1> * <var:o> ^ <nat:3> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:q> ; <var:O2> := <var:O1> * <var:q> ; <var:O3> := <var:O2> * <var:q> ; <var:O0> := <nat:2> ; <var:O3> := <var:O3> * <nat:1> ; <var:u> := <var:O3> <var:u> := <var:u> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:q> = <var:o> }} <def:poly> {{ <var:u> = <nat:1> * <var:o> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:O1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O0> = <nat:2> /\ <var:u> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:u> = <nat:1> * <var:o> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 