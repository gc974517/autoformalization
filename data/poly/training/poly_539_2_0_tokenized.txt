\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:1> ; <var:k> := <var:G0> \end{verbatim} Given it to hold that $ <var:W> = <var:H> $ before running this series of instructions then $ <var:k> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program can be demonstrated by typical Hoare reasoning . Going to the next step , the assignment statement \verb | <var:G0> := <nat:1> ; | . This code advances the condition $ \{ <var:W> = <var:H> \} $ toward the condition $ \{ <var:W> = <var:H> \land <var:G0> = <nat:1> \} $ . This is known to be sound using the assignment scheme defined by Hoare techniques . Considering the following piece of code contained in the segment of code , we have the binding statement \verb | <var:k> := <var:G0> | . This line transfers $ \{ <var:W> = <var:H> \land <var:G0> = <nat:1> \} $ into the postcondition $ \{ <var:W> = <var:H> \land <var:k> = <nat:1> \} $ . This is deduced by the assignment inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:W> = <var:H> }} <var:G0> := <nat:1> ; <var:k> := <var:G0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 