\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:m1> := <var:D> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:4> ; <var:F> := <var:m1> <var:F> := <var:F> + <var:m0> \end{verbatim} Allow it to be that $ <var:D> = <var:P> $ prior to evaluating our series of commands it must be that we see $ <var:F> = <nat:4> * <var:P> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the code segment can be done through usual Hoare techniques . Looking at the upcoming command seen in our list of instructions , the variable binding command binding $ <var:D> $ into $ <var:m1>$ . This advances the condition $ \{ <var:D> = <var:P> \} $ as $ \{ <var:D> = <var:P> \land <var:m1> = <var:P> \} $ . This is known to be sound through the assignment inference rule obtained from Hoare techniques . Jumping to the next statement in the series of commands , we have the environment update code giving $ <nat:3> $ toward $ <var:m0>$ . This redefines $ \{ <var:D> = <var:P> \land <var:m1> = <var:P> \} $ as $ \{ <var:D> = <var:P> \land <var:m1> = <var:P> \land <var:m0> = <nat:3> \} $ . Moving onward , we see the variable assignmet statement binding $ <var:m1> * <nat:4> $ into $ <var:m1>$ . This code takes $ \{ <var:D> = <var:P> \land <var:m1> = <var:P> \land <var:m0> = <nat:3> \} $ into the condition $ \{ <var:D> = <var:P> \land <var:m1> = <nat:4> \times <var:P> \land <var:m0> = <nat:3> \} $ . This is known to be sound through the assignment rule given by standard Hoare logic . Going forward , we see the assignment line binding $ <var:m1$ into $ <var:F>$ . This command forwards the precondition $ \{ <var:D> = <var:P> \land <var:m1> = <nat:4> \times <var:P> \land <var:m0> = <nat:3> \} $ to the postcondition $ \{ <var:D> = <var:P> \land <var:m0> = <nat:3> \land <var:F> = <nat:4> \times <var:P> \} $ . This is shown through the assignment rule obtained from typical Hoare reasoning . Paying attention to the next piece of code seen in the program , we have the assignment command \verb | <var:F> := <var:F> + <var:m0> | . This command redefines $ \{ <var:D> = <var:P> \land <var:m0> = <nat:3> \land <var:F> = <nat:4> \times <var:P> \} $ into the condition $ \{ <var:D> = <var:P> \land <var:F> = <nat:4> \times <var:P> + <nat:3> \} $ . This is given by the assignment inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:D> = <var:P> }} <var:m1> := <var:D> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:4> ; <var:F> := <var:m1> <var:F> := <var:F> + <var:m0> {{ <var:F> = <nat:4> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:m1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:m1> = <var:P> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:m1> = <nat:4> * <var:P> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:m0> = <nat:3> /\ <var:F> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:F> = <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 