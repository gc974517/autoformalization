\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:9> ; <var:y> := <var:i0> \end{verbatim} Allowing --- for some whole numbers $ <var:p> $ --- that $ <var:X> = <var:p> $ prior to executing this set of commands it must be that we see $ <var:y> = <nat:9> $ when code segment has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is done through usual Hoare reasoning . Taking a look at the upcoming lines in the code , we see \begin{verbatim} { <var:X> = <var:p> } <var:i0> := <nat:9> { <var:X> = <var:p> \land <var:i0> = <nat:9> } { <var:X> = <var:p> \land <var:i0> = <nat:9> } <var:y> := <var:i0{ <var:X> = <var:p> \land <var:y> = <nat:9> } \end{verbatim} This is known to be sound with the rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:X> = <var:p> }} <var:i0> := <nat:9> ; <var:y> := <var:i0> {{ <var:y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:p> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:p> /\ <var:y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 