\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:9> ; <var:d> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:L> = <var:Q> $ ahead of executing our list of instructions it must be that $ <var:d> = <nat:9> $ . \end{theorem} \begin{proof} Notice the below decorated list of instructions . \begin{eqnarray} \{ <var:L> = <var:Q> \} \\ <var:p0> := <nat:9> ; \\ \{ <var:L> = <var:Q> \land <var:p0> = <nat:9> \} \\ <var:d> := <var:p0> \\ \{ <var:L> = <var:Q> \land <var:d> = <nat:9> \} \end{eqnarray} Utilizing Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:9> ; <var:d> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:L> = <var:Q> }} <def:poly> {{ <var:d> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:d> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 