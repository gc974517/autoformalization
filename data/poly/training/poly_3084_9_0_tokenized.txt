\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:5> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:j> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:j> ; <var:U2> := <var:U2> * <var:j> ; <var:e> := <var:U2> ; <var:e> := <var:e> + <var:U1> ; <var:e> := <var:e> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Allowing that $ <var:j> = <var:f> $ , for all positive integer coefficients $ <var:f> $ , prior to the evaluation of our set of instructions , it follows that $ <var:e> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:5> $ . \end{theorem} \begin{proof} The proof of our program is given using the below decorated segment of code . \begin{eqnarray} \{ <var:j> = <var:f> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \} \\ <var:U1> := <nat:1> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:U1> = <nat:1> \} \\ <var:U1> := <var:U1> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:U1> = <nat:1> \cdot <var:f> \} \\ <var:U2> := <nat:4> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:U1> = <nat:1> \cdot <var:f> \land <var:U2> = <nat:4> \} \\ <var:U2> := <var:U2> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:U1> = <nat:1> \cdot <var:f> \land <var:U2> = <nat:4> \cdot <var:f> \} \\ <var:U2> := <var:U2> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:U1> = <nat:1> \cdot <var:f> \land <var:U2> = <nat:4> \cdot <var:f> ^ <nat:2> \} \\ <var:e> := <var:U2> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:U1> = <nat:1> \cdot <var:f> \land <var:e> = <nat:4> \cdot <var:f> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:U1> ; \\ \{ <var:j> = <var:f> \land <var:U0> = <nat:5> \land <var:e> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> \} \\ <var:e> := <var:e> + <var:U0> \\ \{ <var:j> = <var:f> \land <var:e> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:5> \} \end{eqnarray} The application of typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:j> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:j> ; <var:U2> := <var:U2> * <var:j> ; <var:e> := <var:U2> ; <var:e> := <var:e> + <var:U1> ; <var:e> := <var:e> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:j> = <var:f> }} <def:poly> {{ <var:e> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:1> * <var:f> /\ <var:U2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:1> * <var:f> /\ <var:U2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:1> * <var:f> /\ <var:U2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:1> * <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:U0> = <nat:5> /\ <var:e> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 