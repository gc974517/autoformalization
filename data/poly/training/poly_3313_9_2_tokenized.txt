\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:J> := <nat:1> ; <var:J> := <var:J> * <var:y> ; <var:J> := <nat:2> + <var:J> * <var:y> ; <var:J> := <nat:3> + <var:J> * <var:y> ; <var:J> := <nat:4> + <var:J> * <var:y> ; <var:J> := <nat:3> + <var:J> * <var:y> ; <var:J> := <nat:2> + <var:J> * <var:y> ; <var:J> := <nat:4> + <var:J> * <var:y> ; <var:J> := <nat:4> + <var:J> * <var:y> \end{verbatim} Assuming that we have $ <var:y> = <var:Q> $ given all positive coefficients $ <var:Q> $ before executing this set of commands , it must be that $ <var:J> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> $ when list of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for our code is accomplished with standard Hoare logic . Moving forward to the following bit of code found in our list of commands , the assignment command defining $ <nat:1> $ into $ <var:J>$ . This code redefines $ \{ <var:y> = <var:Q> \} $ to $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> \} $ . This is sound by the assignment law found in usual Hoare techniques . Going to the next step , we see the line giving $ <var:J> * <var:y> $ into $ <var:J>$ . This transfers $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> \} $ toward the postcondition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> + \} $ . This is given through the assignment scheme obtained from typical Hoare reasoning . Advancing to the subsequent step found in the program , we see the environment update statement defining $ <nat:2> + <var:J> * <var:y> $ into $ <var:J>$ . This code advances the precondition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> + \} $ as $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:2> + <nat:2> \} $ . Moving forward to the following line seen in our program , the binding statement defining $ <nat:3> + <var:J> * <var:y> $ into $ <var:J>$ . This transfers the precondition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:2> + <nat:2> \} $ toward the condition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:3> \} $ . Moving on to the next line found in the list of commands , the variable assignmet code \verb | <var:J> := <nat:4> + <var:J> * <var:y> ; | . This moves $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:3> \} $ as $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> \} $ . This is guaranteed through the assignment law from typical Hoare techniques . Focusing on the next piece of code in our set of instructions , the command yielding $ <nat:3> + <var:J> * <var:y> $ as $ <var:J>$ . This forwards the condition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> \} $ toward $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> \} $ . This is ensured by the assignment law defined in usual Hoare reasoning . Paying attention to the following command seen in the segment of code , we see the assignment code binding $ <nat:2> + <var:J> * <var:y> $ into $ <var:J>$ . This command transfers $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> \} $ into the condition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> \} $ . Looking at the subsequent statement in the set of commands , we see the variable binding line defining $ <nat:4> + <var:J> * <var:y> $ as $ <var:J>$ . This moves the precondition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> \} $ toward the postcondition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> \} $ . This is given through the assignment law obtained from standard Hoare techniques . Moving forward , we have the environment update statement \verb | <var:J> := <nat:4> + <var:J> * <var:y> | . This advances the condition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> \} $ toward the postcondition $ \{ <var:y> = <var:Q> \land <var:J> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> \} $ . This is rigorously given through the assignment scheme given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:y> = <var:Q> }} <var:J> := <nat:1> ; <var:J> := <var:J> * <var:y> ; <var:J> := <nat:2> + <var:J> * <var:y> ; <var:J> := <nat:3> + <var:J> * <var:y> ; <var:J> := <nat:4> + <var:J> * <var:y> ; <var:J> := <nat:3> + <var:J> * <var:y> ; <var:J> := <nat:2> + <var:J> * <var:y> ; <var:J> := <nat:4> + <var:J> * <var:y> ; <var:J> := <nat:4> + <var:J> * <var:y> {{ <var:J> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:J> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 