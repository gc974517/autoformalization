\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:3> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:A> ; <var:M> := <var:S1> ; <var:M> := <var:M> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assume , for positive integer coefficients $ <var:w> $ , $ <var:A> = <var:w> $ ahead of evaluating our list of commands it follows that we see $ <var:M> = <nat:8> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions is shown through Hoare reasoning . Going forward , we have the environment update command \verb | <var:S0> := <nat:3> ; | . This forwards the precondition $ \{ <var:A> = <var:w> \} $ as $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \} $ . This is given through the assignment law of usual Hoare techniques . Taking another step toward the upcoming step contained in the series of instructions , the variable update code \verb | <var:S1> := <nat:8> ; | . This advances $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \} $ toward the condition $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \land <var:S1> = <nat:8> \} $ . Moving on , the binding code yielding $ <var:S1> * <var:A> $ toward $ <var:S1>$ . This takes the condition $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \land <var:S1> = <nat:8> \} $ as the postcondition $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \land <var:S1> = <nat:8> * <var:w> \} $ . This is rigorously given using the assignment inference rule found in typical Hoare techniques . Paying attention to the next command contained in our program , we see the variable assignmet code defining $ <var:S1> $ toward $ <var:M>$ . This advances the precondition $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \land <var:S1> = <nat:8> * <var:w> \} $ as the postcondition $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \land <var:M> = <nat:8> * <var:w> \} $ . This is shown through the assignment law given in typical Hoare logic . Keeping momentum , we have the variable assignmet line binding $ <var:M> + <var:S0$ as $ <var:M>$ . This moves the condition $ \{ <var:A> = <var:w> \land <var:S0> = <nat:3> \land <var:M> = <nat:8> * <var:w> \} $ to the condition $ \{ <var:A> = <var:w> \land <var:M> = <nat:8> * <var:w> + <nat:3> \} $ . This is shown by the assignment law of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:3> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:A> ; <var:M> := <var:S1> ; <var:M> := <var:M> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:A> = <var:w> }} <def:poly> {{ <var:M> = <nat:8> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:S0> = <nat:3> /\ <var:M> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:M> = <nat:8> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 