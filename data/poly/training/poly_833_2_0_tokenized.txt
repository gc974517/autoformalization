\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:3> ; <var:q> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:I> = <var:W> $ ahead of interpreting this list of commands , it must be that we see $ <var:q> = <nat:3> $ when code exits . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:I> = <var:W> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:I> = <var:W> \land <var:R0> = <nat:3> \} \\ <var:q> := <var:R0> \\ \{ <var:I> = <var:W> \land <var:q> = <nat:3> \} \end{eqnarray} Therefore , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:3> ; <var:q> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:I> = <var:W> }} <def:poly> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 