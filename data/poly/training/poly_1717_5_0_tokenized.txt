\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:g> ; <var:B> := <var:m1> ; <var:B> := <var:B> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:g> = <var:e> $ --- for any whole numbers $ <var:e> $ --- before executing the series of commands it holds that we see $ <var:B> = <nat:2> \times <var:e> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:g> = <var:e> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:g> = <var:e> \land <var:m0> = <nat:3> \} \\ <var:m1> := <nat:2> ; \\ \{ <var:g> = <var:e> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \} \\ <var:m1> := <var:m1> * <var:g> ; \\ \{ <var:g> = <var:e> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \cdot <var:e> \} \\ <var:B> := <var:m1> ; \\ \{ <var:g> = <var:e> \land <var:m0> = <nat:3> \land <var:B> = <nat:2> \cdot <var:e> \} \\ <var:B> := <var:B> + <var:m0> \\ \{ <var:g> = <var:e> \land <var:B> = <nat:2> \cdot <var:e> + <nat:3> \} \end{eqnarray} Thusly , our list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:g> ; <var:B> := <var:m1> ; <var:B> := <var:B> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:g> = <var:e> }} <def:poly> {{ <var:B> = <nat:2> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:m0> = <nat:3> /\ <var:B> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:B> = <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 