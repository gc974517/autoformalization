\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:6> ; <var:k1> := <nat:3> ; <var:k1> := <var:k1> * <var:v> ; <var:d> := <var:k1> ; <var:d> := <var:d> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:v> = <var:D> $ ( with some $ <var:D> $ ) prior to running our program then $ <var:d> = <nat:3> \cdot <var:D> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for our code segment is clear by usual Hoare logic . Taking a look at the subsequent line of code in our list of commands , the assignment line defining $ <nat:6> $ toward $ <var:k0>$ . This line redefines the precondition $ \{ <var:v> = <var:D> \} $ as $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \} $ . Taking a look at the following statement in our set of commands , we have the line \verb | <var:k1> := <nat:3> ; | . This advances $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \} $ into $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \land <var:k1> = <nat:3> \} $ . Considering the next bit of code in the set of instructions , the statement yielding $ <var:k1> * <var:v> $ toward $ <var:k1>$ . This forwards the condition $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \land <var:k1> = <nat:3> \} $ to the condition $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \land <var:k1> = <nat:3> \cdot <var:D> \} $ . Advancing to the following line contained in the series of instructions , the environment update command \verb | <var:d> := <var:k1> ; | . This code moves the condition $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \land <var:k1> = <nat:3> \cdot <var:D> \} $ toward the condition $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \land <var:d> = <nat:3> \cdot <var:D> \} $ . This is rigorously given through the assignment scheme obtained from standard Hoare techniques . Following , the environment update statement assigning $ <var:d> + <var:k0$ into $ <var:d>$ . This redefines the condition $ \{ <var:v> = <var:D> \land <var:k0> = <nat:6> \land <var:d> = <nat:3> \cdot <var:D> \} $ toward the condition $ \{ <var:v> = <var:D> \land <var:d> = <nat:3> \cdot <var:D> + <nat:6> \} $ . This is given by the assignment scheme defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:k1> := <nat:3> ; <var:k1> := <var:k1> * <var:v> ; <var:d> := <var:k1> ; <var:d> := <var:d> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:v> = <var:D> }} <def:poly> {{ <var:d> = <nat:3> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:k0> = <nat:6> /\ <var:d> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:d> = <nat:3> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 