\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:8> ; <var:A> := <var:N0> \end{verbatim} Allow ( given some natural numbers $ <var:o> $ ) it to be that $ <var:r> = <var:o> $ ahead of interpreting this list of instructions , it follows that we have $ <var:A> = <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for the code can be seen using typical Hoare logic . Taking a look at the next statement seen in our list of commands , the binding command yielding $ <nat:8> $ into $ <var:N0>$ . This line transfers the precondition $ \{ <var:r> = <var:o> \} $ toward the condition $ \{ <var:r> = <var:o> \land <var:N0> = <nat:8> \} $ . Moving forward to the following line contained in our list of commands , we have the variable binding command \verb | <var:A> := <var:N0> | . This moves $ \{ <var:r> = <var:o> \land <var:N0> = <nat:8> \} $ toward the postcondition $ \{ <var:r> = <var:o> \land <var:A> = <nat:8> \} $ . This is known to be sound with the assignment rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:r> = <var:o> }} <var:N0> := <nat:8> ; <var:A> := <var:N0> {{ <var:A> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:A> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 