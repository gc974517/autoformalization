\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:4> ; <var:X> := <var:d0> \end{verbatim} Allowing ( for some positive coefficients $ <var:l> $ ) it to be that $ <var:D> = <var:l> $ ahead of interpreting our list of instructions , it holds that we have $ <var:X> = <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:D> = <var:l> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:D> = <var:l> \land <var:d0> = <nat:4> \} \\ <var:X> := <var:d0> \\ \{ <var:D> = <var:l> \land <var:X> = <nat:4> \} \end{eqnarray} Considering the preceding argument , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:D> = <var:l> }} <var:d0> := <nat:4> ; <var:X> := <var:d0> {{ <var:X> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:X> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 