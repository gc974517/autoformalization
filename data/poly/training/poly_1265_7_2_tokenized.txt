\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <nat:1> + <var:G> * <var:C> ; <var:G> := <nat:2> + <var:G> * <var:C> ; <var:G> := <nat:1> + <var:G> * <var:C> ; <var:G> := <nat:3> + <var:G> * <var:C> ; <var:G> := <nat:2> + <var:G> * <var:C> ; <var:G> := <nat:2> + <var:G> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:C> = <var:c> $ prior to running our code segment , it must be that we see $ <var:G> = <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions can be done by usual Hoare logic . Moving forward to the next piece of code found in the segment of code , we see the variable update line \verb | <var:G> := <nat:2> ; | . This statement takes the condition $ \{ <var:C> = <var:c> \} $ toward the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \} $ . Taking another step toward the proceeding line of code contained in the series of commands , we see the variable update statement \verb | <var:G> := <nat:1> + <var:G> * <var:C> ; | . This code takes the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \} $ as the postcondition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> + <nat:1> \} $ . Jumping to the next bit of code in our segment of code , we see the variable binding code \verb | <var:G> := <nat:2> + <var:G> * <var:C> ; | . This redefines the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> + <nat:1> \} $ as the postcondition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:2> \} $ . This is guaranteed by the assignment law found in standard Hoare reasoning . Going to the next step , the binding code assigning $ <nat:1> + <var:G> * <var:C> $ as $ <var:G>$ . This command moves the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:2> \} $ to the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:1> \} $ . This is given using the assignment inference rule found in Hoare logic . Focusing on the proceeding line of code seen in our segment of code , we see the assignment statement \verb | <var:G> := <nat:3> + <var:G> * <var:C> ; | . This line moves the precondition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:1> \} $ into the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:3> \} $ . This is shown to be logically sound with the assignment law from typical Hoare logic . Moving forward to the following command contained in our segment of code , the command \verb | <var:G> := <nat:2> + <var:G> * <var:C> ; | . This code redefines the precondition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:2> \} $ . Moving on to the proceeding statement in our set of instructions , we see the assignment statement \verb | <var:G> := <nat:2> + <var:G> * <var:C> | . This moves $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:2> \} $ as the condition $ \{ <var:C> = <var:c> \land <var:G> = <nat:2> \times <var:c> ^ <nat:6> + <nat:1> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:2> \} $ . This is guaranteed with the assignment inference rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:2> ; <var:G> := <nat:1> + <var:G> * <var:C> ; <var:G> := <nat:2> + <var:G> * <var:C> ; <var:G> := <nat:1> + <var:G> * <var:C> ; <var:G> := <nat:3> + <var:G> * <var:C> ; <var:G> := <nat:2> + <var:G> * <var:C> ; <var:G> := <nat:2> + <var:G> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:C> = <var:c> }} <def:poly> {{ <var:G> = <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:G> = <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 