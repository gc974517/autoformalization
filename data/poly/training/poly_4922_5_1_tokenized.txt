\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:f> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:1> ; <var:A> := <var:r1> <var:A> := <var:A> + <var:r0> \end{verbatim} Given that we have $ <var:f> = <var:j> $ --- for all whole numbers $ <var:j> $ --- prior to the evaluation of this list of commands , it must be that we see $ <var:A> = <nat:1> \times <var:j> + <nat:6> $ . \end{theorem} \begin{proof} Let the following decorated set of commands . \begin{eqnarray} \{ <var:f> = <var:j> \} \\ <var:r1> := <var:f> ; \\ \{ <var:f> = <var:j> \land <var:r1> = <var:j> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:f> = <var:j> \land <var:r1> = <var:j> \land <var:r0> = <nat:6> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:f> = <var:j> \land <var:r1> = <nat:1> * <var:j> \land <var:r0> = <nat:6> \} \\ <var:A> := <var:r1> \\ \{ <var:f> = <var:j> \land <var:r0> = <nat:6> \land <var:A> = <nat:1> * <var:j> \} \\ <var:A> := <var:A> + <var:r0> \\ \{ <var:f> = <var:j> \land <var:A> = <nat:1> * <var:j> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:f> = <var:j> }} <var:r1> := <var:f> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:1> ; <var:A> := <var:r1> <var:A> := <var:A> + <var:r0> {{ <var:A> = <nat:1> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:r1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:r1> = <var:j> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:r1> = <nat:1> * <var:j> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:r0> = <nat:6> /\ <var:A> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:A> = <nat:1> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 