\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:R> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:4> ; <var:p> := <var:I1> <var:p> := <var:p> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:R> = <var:C> $ , for all positive integers $ <var:C> $ , prior to executing this set of instructions , it holds that $ <var:p> = <nat:4> \cdot <var:C> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:C> \} \\ <var:I1> := <var:R> ; \\ \{ <var:R> = <var:C> \land <var:I1> = <var:C> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:R> = <var:C> \land <var:I1> = <var:C> \land <var:I0> = <nat:9> \} \\ <var:I1> := <var:I1> * <nat:4> ; \\ \{ <var:R> = <var:C> \land <var:I1> = <nat:4> \times <var:C> \land <var:I0> = <nat:9> \} \\ <var:p> := <var:I1> \\ \{ <var:R> = <var:C> \land <var:I0> = <nat:9> \land <var:p> = <nat:4> \times <var:C> \} \\ <var:p> := <var:p> + <var:I0> \\ \{ <var:R> = <var:C> \land <var:p> = <nat:4> \times <var:C> + <nat:9> \} \end{eqnarray} Using standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:R> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:4> ; <var:p> := <var:I1> <var:p> := <var:p> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:R> = <var:C> }} <def:poly> {{ <var:p> = <nat:4> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:I1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:I1> = <var:C> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:I1> = <nat:4> * <var:C> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:I0> = <nat:9> /\ <var:p> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:p> = <nat:4> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 