\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:V1> := <var:l> ; <var:V2> := <var:V1> * <var:l> ; <var:V3> := <var:V2> * <var:l> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:1> ; <var:V3> := <var:V3> * <nat:7> ; <var:h> := <var:V3> <var:h> := <var:h> + <var:V2> <var:h> := <var:h> + <var:V1> <var:h> := <var:h> + <var:V0> \end{verbatim} Assume $ <var:l> = <var:z> $ ahead of the execution of the segment of code , it holds that $ <var:h> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> $ once list of commands is done executing . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:l> = <var:z> \} \\ <var:V1> := <var:l> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <var:z> \} \\ <var:V2> := <var:V1> * <var:l> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <var:z> \land <var:V2> = <var:z> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:l> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <var:z> \land <var:V2> = <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <var:z> \land <var:V2> = <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \land <var:V0> = <nat:1> \} \\ <var:V1> := <var:V1> * <nat:8> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <nat:8> \times <var:z> \land <var:V2> = <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \land <var:V0> = <nat:1> \} \\ <var:V2> := <var:V2> * <nat:1> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <nat:8> \times <var:z> \land <var:V2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \land <var:V0> = <nat:1> \} \\ <var:V3> := <var:V3> * <nat:7> ; \\ \{ <var:l> = <var:z> \land <var:V1> = <nat:8> \times <var:z> \land <var:V2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:V3> = <nat:7> \times <var:z> ^ <nat:3> \land <var:V0> = <nat:1> \} \\ <var:h> := <var:V3> \\ \{ <var:l> = <var:z> \land <var:V1> = <nat:8> \times <var:z> \land <var:V2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:V0> = <nat:1> \land <var:h> = <nat:7> \times <var:z> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:V2> \\ \{ <var:l> = <var:z> \land <var:V1> = <nat:8> \times <var:z> \land <var:V0> = <nat:1> \land <var:h> = <nat:7> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:V1> \\ \{ <var:l> = <var:z> \land <var:V0> = <nat:1> \land <var:h> = <nat:7> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:8> \times <var:z> \} \\ <var:h> := <var:h> + <var:V0> \\ \{ <var:l> = <var:z> \land <var:h> = <nat:7> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:8> \times <var:z> + <nat:1> \} \end{eqnarray} Thusly , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:l> = <var:z> }} <var:V1> := <var:l> ; <var:V2> := <var:V1> * <var:l> ; <var:V3> := <var:V2> * <var:l> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:1> ; <var:V3> := <var:V3> * <nat:7> ; <var:h> := <var:V3> <var:h> := <var:h> + <var:V2> <var:h> := <var:h> + <var:V1> <var:h> := <var:h> + <var:V0> {{ <var:h> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <var:z> /\ <var:V2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <var:z> /\ <var:V2> = <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <var:z> /\ <var:V2> = <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <nat:8> * <var:z> /\ <var:V2> = <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <nat:8> * <var:z> /\ <var:V2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <nat:8> * <var:z> /\ <var:V2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:V3> = <nat:7> * <var:z> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <nat:8> * <var:z> /\ <var:V2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:V0> = <nat:1> /\ <var:h> = <nat:7> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V1> = <nat:8> * <var:z> /\ <var:V0> = <nat:1> /\ <var:h> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:V0> = <nat:1> /\ <var:h> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:h> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 