\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:j> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:9> ; <var:q> := <var:k1> <var:q> := <var:q> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:j> = <var:L> $ prior to the evaluation of our program it holds that we have $ <var:q> = <nat:9> \times <var:L> + <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:j> = <var:L> \} \\ <var:k1> := <var:j> ; \\ \{ <var:j> = <var:L> \land <var:k1> = <var:L> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:j> = <var:L> \land <var:k1> = <var:L> \land <var:k0> = <nat:3> \} \\ <var:k1> := <var:k1> * <nat:9> ; \\ \{ <var:j> = <var:L> \land <var:k1> = <nat:9> * <var:L> \land <var:k0> = <nat:3> \} \\ <var:q> := <var:k1> \\ \{ <var:j> = <var:L> \land <var:k0> = <nat:3> \land <var:q> = <nat:9> * <var:L> \} \\ <var:q> := <var:q> + <var:k0> \\ \{ <var:j> = <var:L> \land <var:q> = <nat:9> * <var:L> + <nat:3> \} \end{eqnarray} Thusly , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:j> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:9> ; <var:q> := <var:k1> <var:q> := <var:q> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:j> = <var:L> }} <def:poly> {{ <var:q> = <nat:9> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:k1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:k1> = <var:L> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:k1> = <nat:9> * <var:L> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:k0> = <nat:3> /\ <var:q> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:q> = <nat:9> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 