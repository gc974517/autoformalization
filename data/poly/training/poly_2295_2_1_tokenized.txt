\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:i0> := <nat:4> ; <var:T> := <var:i0> \end{verbatim} Assume --- for every positive numbers $ <var:p> $ --- it to hold that $ <var:m> = <var:p> $ prior to executing the code segment it holds that we have $ <var:T> = <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is clear with Hoare logic . Considering the upcoming piece of code in the segment of code , we have the variable binding statement assigning $ <nat:4> $ into $ <var:i0>$ . This code takes the precondition $ \{ <var:m> = <var:p> \} $ toward $ \{ <var:m> = <var:p> \land <var:i0> = <nat:4> \} $ . Considering the subsequent step in our list of commands , the variable update code binding $ <var:i0$ to $ <var:T>$ . This command transfers the precondition $ \{ <var:m> = <var:p> \land <var:i0> = <nat:4> \} $ into the postcondition $ \{ <var:m> = <var:p> \land <var:T> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:m> = <var:p> }} <var:i0> := <nat:4> ; <var:T> := <var:i0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 