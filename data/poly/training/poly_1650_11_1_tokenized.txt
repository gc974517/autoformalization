\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:r> ; <var:H2> := <var:H1> * <var:r> ; <var:H3> := <var:H2> * <var:r> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:5> ; <var:H2> := <var:H2> * <nat:4> ; <var:H3> := <var:H3> * <nat:9> ; <var:Z> := <var:H3> <var:Z> := <var:Z> + <var:H2> <var:Z> := <var:Z> + <var:H1> <var:Z> := <var:Z> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:r> = <var:j> $ prior to interpreting this set of commands , it follows that we have $ <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:6> $ once list of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions can be shown using usual Hoare reasoning . Moving onward , the variable assignmet code defining $ <var:r> $ as $ <var:H1>$ . This statement forwards $ \{ <var:r> = <var:j> \} $ as the postcondition $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \} $ . Advancing , we have the command \verb | <var:H2> := <var:H1> * <var:r> ; | . This code transfers $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \} $ into $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \} $ . This is shown with the assignment law defined by Hoare logic . Going forward , we have the environment update code \verb | <var:H3> := <var:H2> * <var:r> ; | . This code transfers $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \} $ toward the condition $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \} $ . This is sound through the assignment law from standard Hoare reasoning . Moving on , we have the variable assignmet command binding $ <nat:6> $ toward $ <var:H0>$ . This redefines the condition $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \} $ into the condition $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ . Honing in on the following statement found in our list of instructions , we see the variable assignmet code yielding $ <var:H1> * <nat:5> $ toward $ <var:H1>$ . This statement redefines the precondition $ \{ <var:r> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ into the postcondition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ . Jumping to the following piece of code seen in the list of instructions , the environment update command giving $ <var:H2> * <nat:4> $ as $ <var:H2>$ . This advances the condition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ toward the postcondition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ . Jumping to the proceeding statement found in the segment of code , the variable assignmet statement binding $ <var:H3> * <nat:9> $ as $ <var:H3>$ . This advances the precondition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ to the condition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ . Observing the proceeding statement found in the series of instructions , we have the variable binding statement \verb | <var:Z> := <var:H3> | . This command transfers the condition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:j> ^ <nat:3> \land <var:H0> = <nat:6> \} $ to $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> \} $ . Shifting focus toward the upcoming line of code found in our code segment , we have the binding code \verb | <var:Z> := <var:Z> + <var:H2> | . This code moves the precondition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> \} $ to the postcondition $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H0> = <nat:6> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> \} $ . This is shown by the assignment scheme found in Hoare logic . Taking another step toward the following step found in our code segment , we have the variable update line \verb | <var:Z> := <var:Z> + <var:H1> | . This redefines $ \{ <var:r> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H0> = <nat:6> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> \} $ into the condition $ \{ <var:r> = <var:j> \land <var:H0> = <nat:6> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> \} $ . This is rigorously given using the assignment rule found in usual Hoare reasoning . Paying attention to the upcoming statement seen in our code , the binding command \verb | <var:Z> := <var:Z> + <var:H0> | . This redefines the precondition $ \{ <var:r> = <var:j> \land <var:H0> = <nat:6> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> \} $ toward the postcondition $ \{ <var:r> = <var:j> \land <var:Z> = <nat:9> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:6> \} $ . This is shown to be logically sound by the assignment law from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H1> := <var:r> ; <var:H2> := <var:H1> * <var:r> ; <var:H3> := <var:H2> * <var:r> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:5> ; <var:H2> := <var:H2> * <nat:4> ; <var:H3> := <var:H3> * <nat:9> ; <var:Z> := <var:H3> <var:Z> := <var:Z> + <var:H2> <var:Z> := <var:Z> + <var:H1> <var:Z> := <var:Z> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:r> = <var:j> }} <def:poly> {{ <var:Z> = <nat:9> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:j> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:H0> = <nat:6> /\ <var:Z> = <nat:9> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H0> = <nat:6> /\ <var:Z> = <nat:9> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:H0> = <nat:6> /\ <var:Z> = <nat:9> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:Z> = <nat:9> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 