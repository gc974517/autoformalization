\begin{document} \begin{theorem} Let the following list of instructions as \begin{verbatim} <var:X0> := <nat:3> ; <var:B> := <var:X0> \end{verbatim} Assuming given natural numbers $ <var:f> $ $ <var:W> = <var:f> $ before executing the code segment then we see $ <var:B> = <nat:3> $ . \end{theorem} \begin{proof} The argument for this program is done using usual Hoare reasoning . Looking at the subsequent pieces of code contained in the series of commands , \begin{eqnarray} \{ <var:W> = <var:f> \} \, <var:X0> := <nat:3> \, \{ <var:W> = <var:f> \land <var:X0> = <nat:3> \} \\ \{ <var:W> = <var:f> \land <var:X0> = <nat:3> \} \, <var:B> := <var:X0\, \{ <var:W> = <var:f> \land <var:B> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:W> = <var:f> }} <var:X0> := <nat:3> ; <var:B> := <var:X0> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:f> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:f> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 