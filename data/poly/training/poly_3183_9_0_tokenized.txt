\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:G> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:G> ; <var:Y2> := <var:Y2> * <var:G> ; <var:j> := <var:Y2> ; <var:j> := <var:j> + <var:Y1> ; <var:j> := <var:j> + <var:Y0> \end{verbatim} Allow that $ <var:G> = <var:K> $ for some positive integers $ <var:K> $ prior to running our series of instructions it follows that we see $ <var:j> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:2> $ when code is done executing . \end{theorem} \begin{proof} The proof of this list of instructions is clear through the following decorated code . \begin{eqnarray} \{ <var:G> = <var:K> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <nat:2> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \} \\ <var:Y1> := <var:Y1> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> * <var:K> \} \\ <var:Y2> := <nat:3> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> * <var:K> \land <var:Y2> = <nat:3> \} \\ <var:Y2> := <var:Y2> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> * <var:K> \land <var:Y2> = <nat:3> * <var:K> \} \\ <var:Y2> := <var:Y2> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> * <var:K> \land <var:Y2> = <nat:3> * <var:K> ^ <nat:2> \} \\ <var:j> := <var:Y2> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> * <var:K> \land <var:j> = <nat:3> * <var:K> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:Y1> ; \\ \{ <var:G> = <var:K> \land <var:Y0> = <nat:2> \land <var:j> = <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> \} \\ <var:j> := <var:j> + <var:Y0> \\ \{ <var:G> = <var:K> \land <var:j> = <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:G> = <var:K> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:G> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:G> ; <var:Y2> := <var:Y2> * <var:G> ; <var:j> := <var:Y2> ; <var:j> := <var:j> + <var:Y1> ; <var:j> := <var:j> + <var:Y0> {{ <var:j> = <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:K> /\ <var:Y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:K> /\ <var:Y2> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:K> /\ <var:Y2> = <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:K> /\ <var:j> = <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:Y0> = <nat:2> /\ <var:j> = <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:j> = <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 