\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:5> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:x> ; <var:O> := <var:t1> ; <var:O> := <var:O> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Assuming --- given $ <var:y> $ --- it to hold that $ <var:x> = <var:y> $ before evaluating the set of instructions , it holds that $ <var:O> = <nat:4> \cdot <var:y> + <nat:5> $ once list of commands executes . \end{theorem} \begin{proof} The way to prove correctness for our code is shown using Hoare techniques . Considering the subsequent line of code seen in our series of commands , we see the code \verb | <var:t0> := <nat:5> ; | . This forwards $ \{ <var:x> = <var:y> \} $ into $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \} $ . Going to the next step , we see the variable update statement \verb | <var:t1> := <nat:4> ; | . This moves the precondition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \} $ toward the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> \} $ . This is deduced using the assignment rule of typical Hoare reasoning . Looking at the upcoming line found in the program , the binding command yielding $ <var:t1> * <var:x> $ to $ <var:t1>$ . This code takes $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> \} $ into the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:y> \} $ . Advancing on , we have the binding command \verb | <var:O> := <var:t1> ; | . This redefines the precondition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:y> \} $ as $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \land <var:O> = <nat:4> * <var:y> \} $ . After , we see the variable assignmet statement yielding $ <var:O> + <var:t0$ to $ <var:O>$ . This transfers the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:5> \land <var:O> = <nat:4> * <var:y> \} $ toward the postcondition $ \{ <var:x> = <var:y> \land <var:O> = <nat:4> * <var:y> + <nat:5> \} $ . This is shown to be logically sound through the assignment law in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:5> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:x> ; <var:O> := <var:t1> ; <var:O> := <var:O> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:x> = <var:y> }} <def:poly> {{ <var:O> = <nat:4> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:5> /\ <var:O> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:O> = <nat:4> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 