\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:F1> := <var:s> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:5> ; <var:c> := <var:F1> <var:c> := <var:c> + <var:F0> \end{verbatim} Allow it to hold that $ <var:s> = <var:M> $ assuming some $ <var:M> \in \mathbb{Z}^+ $ before interpreting the code it follows that we see $ <var:c> = <nat:5> \times <var:M> + <nat:8> $ once set of instructions has finished executing . \end{theorem} \begin{proof} The proof of our set of instructions can be done by standard Hoare techniques . After , the command \verb | <var:F1> := <var:s> ; | . This command transfers the precondition $ \{ <var:s> = <var:M> \} $ into $ \{ <var:s> = <var:M> \land <var:F1> = <var:M> \} $ . Jumping to the upcoming piece of code contained in the series of commands , we see the binding code assigning $ <nat:8> $ as $ <var:F0>$ . This code redefines the precondition $ \{ <var:s> = <var:M> \land <var:F1> = <var:M> \} $ into $ \{ <var:s> = <var:M> \land <var:F1> = <var:M> \land <var:F0> = <nat:8> \} $ . Observing the upcoming piece of code seen in our set of instructions , we see the binding statement giving $ <var:F1> * <nat:5> $ to $ <var:F1>$ . This command redefines the condition $ \{ <var:s> = <var:M> \land <var:F1> = <var:M> \land <var:F0> = <nat:8> \} $ to the condition $ \{ <var:s> = <var:M> \land <var:F1> = <nat:5> * <var:M> \land <var:F0> = <nat:8> \} $ . Next , we see the variable binding code giving $ <var:F1$ as $ <var:c>$ . This transfers the condition $ \{ <var:s> = <var:M> \land <var:F1> = <nat:5> * <var:M> \land <var:F0> = <nat:8> \} $ as the postcondition $ \{ <var:s> = <var:M> \land <var:F0> = <nat:8> \land <var:c> = <nat:5> * <var:M> \} $ . Moving on , we have the variable assignmet statement defining $ <var:c> + <var:F0$ as $ <var:c>$ . This line redefines the precondition $ \{ <var:s> = <var:M> \land <var:F0> = <nat:8> \land <var:c> = <nat:5> * <var:M> \} $ into $ \{ <var:s> = <var:M> \land <var:c> = <nat:5> * <var:M> + <nat:8> \} $ . This is guaranteed through the assignment inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:s> = <var:M> }} <var:F1> := <var:s> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:5> ; <var:c> := <var:F1> <var:c> := <var:c> + <var:F0> {{ <var:c> = <nat:5> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:F1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:F1> = <var:M> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:F1> = <nat:5> * <var:M> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:F0> = <nat:8> /\ <var:c> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:c> = <nat:5> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 