\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:v> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:6> ; <var:o> := <var:P1> <var:o> := <var:o> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Given that $ <var:v> = <var:U> $ given any positive integer coefficients $ <var:U> $ before executing our code segment then we have $ <var:o> = <nat:6> * <var:U> + <nat:2> $ after list of commands executes . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be demonstrated with usual Hoare techniques . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:U> \} & <var:P1> := <var:v> & \{ <var:v> = <var:U> \land <var:P1> = <var:U> \} \\ \{ <var:v> = <var:U> \land <var:P1> = <var:U> \} & <var:P0> := <nat:2> & \{ <var:v> = <var:U> \land <var:P1> = <var:U> \land <var:P0> = <nat:2> \} \\ \{ <var:v> = <var:U> \land <var:P1> = <var:U> \land <var:P0> = <nat:2> \} & <var:P1> := <var:P1> * <nat:6> & \{ <var:v> = <var:U> \land <var:P1> = <nat:6> \times <var:U> \land <var:P0> = <nat:2> \} \\ \{ <var:v> = <var:U> \land <var:P1> = <nat:6> \times <var:U> \land <var:P0> = <nat:2> \} & <var:o> := <var:P1& \{ <var:v> = <var:U> \land <var:P0> = <nat:2> \land <var:o> = <nat:6> \times <var:U> \} \\ \{ <var:v> = <var:U> \land <var:P0> = <nat:2> \land <var:o> = <nat:6> \times <var:U> \} & <var:o> := <var:o> + <var:P0& \{ <var:v> = <var:U> \land <var:o> = <nat:6> \times <var:U> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:v> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:6> ; <var:o> := <var:P1> <var:o> := <var:o> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:v> = <var:U> }} <def:poly> {{ <var:o> = <nat:6> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P1> = <var:U> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P1> = <nat:6> * <var:U> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P0> = <nat:2> /\ <var:o> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:o> = <nat:6> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 