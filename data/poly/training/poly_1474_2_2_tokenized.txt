\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:2> ; <var:D> := <nat:1> + <var:D> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:X> = <var:I> $ --- given some whole numbers $ <var:I> $ --- before the evaluation of our list of instructions , it follows that $ <var:D> = <nat:2> \times <var:I> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the code is given with Hoare techniques . Jumping to the subsequent line in our list of commands , we see the variable update code \verb | <var:D> := <nat:2> ; | . This redefines the precondition $ \{ <var:X> = <var:I> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:D> = <nat:2> \} $ . Now , the variable binding code giving $ <nat:1> + <var:D> * <var:X$ toward $ <var:D>$ . This command transfers the condition $ \{ <var:X> = <var:I> \land <var:D> = <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:I> \land <var:D> = <nat:2> * <var:I> + <nat:1> \} $ . This is shown with the assignment law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:2> ; <var:D> := <nat:1> + <var:D> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <def:poly> {{ <var:D> = <nat:2> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:D> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:D> = <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 