\begin{document} \begin{theorem} Consider a program in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:8> ; <var:l> := <var:W0> \end{verbatim} Allow given any whole numbers $ <var:J> $ that we have $ <var:a> = <var:J> $ prior to evaluating this series of instructions , it must be that $ <var:l> = <nat:8> $ after code is done . \end{theorem} \begin{proof} Proving correctness for this code segment can be demonstrated through Hoare reasoning . Next , we have the assignment code defining $ <nat:8> $ into $ <var:W0>$ . This code moves the condition $ \{ <var:a> = <var:J> \} $ as $ \{ <var:a> = <var:J> \land <var:W0> = <nat:8> \} $ . This is shown to be logically sound through the assignment inference rule given in standard Hoare reasoning . Moving on to the next step , the assignment code \verb | <var:l> := <var:W0> | . This command takes $ \{ <var:a> = <var:J> \land <var:W0> = <nat:8> \} $ as $ \{ <var:a> = <var:J> \land <var:l> = <nat:8> \} $ . This is deduced using the assignment scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <var:W0> := <nat:8> ; <var:l> := <var:W0> {{ <var:l> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:l> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 