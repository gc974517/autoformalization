\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:T> ; <var:k> := <var:X1> ; <var:k> := <var:k> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Assume ( for any positive integers $ <var:q> $ ) $ <var:T> = <var:q> $ ahead of the evaluation of the list of commands then $ <var:k> = <nat:8> \cdot <var:q> + <nat:3> $ after code is done . \end{theorem} \begin{proof} The proof of our code segment is clear with Hoare logic . Going forward , we have \begin{verbatim} { <var:T> = <var:q> } <var:X0> := <nat:3> { <var:T> = <var:q> \land <var:X0> = <nat:3> } { <var:T> = <var:q> \land <var:X0> = <nat:3> } <var:X1> := <nat:8> { <var:T> = <var:q> \land <var:X0> = <nat:3> \land <var:X1> = <nat:8> } { <var:T> = <var:q> \land <var:X0> = <nat:3> \land <var:X1> = <nat:8> } <var:X1> := <var:X1> * <var:T> { <var:T> = <var:q> \land <var:X0> = <nat:3> \land <var:X1> = <nat:8> * <var:q> } { <var:T> = <var:q> \land <var:X0> = <nat:3> \land <var:X1> = <nat:8> * <var:q> } <var:k> := <var:X1> { <var:T> = <var:q> \land <var:X0> = <nat:3> \land <var:k> = <nat:8> * <var:q> } \end{verbatim} This is rigorously given using the environment update scheme given in Hoare logic . Going to the next step , we have \begin{verbatim} { <var:T> = <var:q> } <var:X0> := <nat:3> { <var:T> = <var:q> \land <var:X0> = <nat:3> } \end{verbatim} This is known to be sound using the binding law defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:T> ; <var:k> := <var:X1> ; <var:k> := <var:k> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:T> = <var:q> }} <def:poly> {{ <var:k> = <nat:8> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:3> /\ <var:k> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:k> = <nat:8> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 