\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:P> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:P> ; <var:w2> := <var:w2> * <var:P> ; <var:X> := <var:w2> ; <var:X> := <var:X> + <var:w1> ; <var:X> := <var:X> + <var:w0> \end{verbatim} Given that we have $ <var:P> = <var:E> $ ahead of running our set of instructions it must be that we see $ <var:X> = <nat:7> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this set of commands is done with Hoare techniques . Observing the upcoming bit of code seen in the list of commands , we have the environment update command \verb | <var:w0> := <nat:9> ; | . This transfers the precondition $ \{ <var:P> = <var:E> \} $ to the postcondition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \} $ . Moving forward , we see the variable update statement \verb | <var:w1> := <nat:3> ; | . This line advances the condition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \} $ as $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \} $ . Immediately following , the environment update code yielding $ <var:w1> * <var:P> $ into $ <var:w1>$ . This forwards $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \} $ to the postcondition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \} $ . Moving forward to the proceeding line contained in the list of commands , we have the environment update code binding $ <nat:7> $ as $ <var:w2>$ . This transfers $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \} $ to the condition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:w2> = <nat:7> \} $ . Moving onward , we have the environment update line \verb | <var:w2> := <var:w2> * <var:P> ; | . This redefines $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:w2> = <nat:7> \} $ into the postcondition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:w2> = <nat:7> \cdot <var:E> \} $ . This is shown through the assignment law given in Hoare reasoning . Taking another step toward the following line of code seen in the set of commands , we have the variable update command binding $ <var:w2> * <var:P> $ to $ <var:w2>$ . This redefines $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:w2> = <nat:7> \cdot <var:E> \} $ toward the condition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:w2> = <nat:7> \cdot <var:E> ^ <nat:2> \} $ . This is given using the assignment rule given in Hoare techniques . Advancing on , we have the assignment statement defining $ <var:w2> $ to $ <var:X>$ . This code moves the precondition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:w2> = <nat:7> \cdot <var:E> ^ <nat:2> \} $ into the postcondition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:X> = <nat:7> \cdot <var:E> ^ <nat:2> \} $ . This is given through the assignment inference rule defined in typical Hoare techniques . Further , we see the variable binding line yielding $ <var:X> + <var:w1> $ toward $ <var:X>$ . This code forwards $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:w1> = <nat:3> \cdot <var:E> \land <var:X> = <nat:7> \cdot <var:E> ^ <nat:2> \} $ as the condition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:X> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> \} $ . This is shown to be logically sound using the assignment law given in Hoare techniques . Moving on to the upcoming step contained in our series of commands , the code letting $ <var:X> + <var:w0$ into $ <var:X>$ . This command takes the condition $ \{ <var:P> = <var:E> \land <var:w0> = <nat:9> \land <var:X> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> \} $ as the postcondition $ \{ <var:P> = <var:E> \land <var:X> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:P> = <var:E> }} <var:w0> := <nat:9> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:P> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:P> ; <var:w2> := <var:w2> * <var:P> ; <var:X> := <var:w2> ; <var:X> := <var:X> + <var:w1> ; <var:X> := <var:X> + <var:w0> {{ <var:X> = <nat:7> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:3> * <var:E> /\ <var:w2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:3> * <var:E> /\ <var:w2> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:3> * <var:E> /\ <var:w2> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:3> * <var:E> /\ <var:X> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:w0> = <nat:9> /\ <var:X> = <nat:7> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:X> = <nat:7> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 