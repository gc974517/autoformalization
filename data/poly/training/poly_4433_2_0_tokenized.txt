\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:R0> := <nat:7> ; <var:G> := <var:R0> \end{verbatim} Assume it to hold that $ <var:o> = <var:T> $ ( letting integers $ <var:T> $ ) ahead of the execution of our segment of code then $ <var:G> = <nat:7> $ once list of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:T> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:o> = <var:T> \land <var:R0> = <nat:7> \} \\ <var:G> := <var:R0> \\ \{ <var:o> = <var:T> \land <var:G> = <nat:7> \} \end{eqnarray} Utilizing usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:o> = <var:T> }} <var:R0> := <nat:7> ; <var:G> := <var:R0> {{ <var:G> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:G> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 