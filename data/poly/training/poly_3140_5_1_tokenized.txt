\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z1> := <var:b> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:1> ; <var:v> := <var:z1> <var:v> := <var:v> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given --- assuming some natural numbers $ <var:g> $ --- $ <var:b> = <var:g> $ prior to evaluating the code it must be that we have $ <var:v> = <nat:1> \cdot <var:g> + <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} The argument for the code segment is shown through usual Hoare reasoning . Honing in on the next pieces of code found in the segment of code , we see \begin{verbatim} { <var:b> = <var:g> } <var:z1> := <var:b> { <var:b> = <var:g> \land <var:z1> = <var:g> } { <var:b> = <var:g> \land <var:z1> = <var:g> } <var:z0> := <nat:6> { <var:b> = <var:g> \land <var:z1> = <var:g> \land <var:z0> = <nat:6> } { <var:b> = <var:g> \land <var:z1> = <var:g> \land <var:z0> = <nat:6> } <var:z1> := <var:z1> * <nat:1> { <var:b> = <var:g> \land <var:z1> = <nat:1> \times <var:g> \land <var:z0> = <nat:6> } { <var:b> = <var:g> \land <var:z1> = <nat:1> \times <var:g> \land <var:z0> = <nat:6> } <var:v> := <var:z1{ <var:b> = <var:g> \land <var:z0> = <nat:6> \land <var:v> = <nat:1> \times <var:g> } \end{verbatim} This is shown to be logically sound through the variable update scheme given in usual Hoare techniques . Immediately following , \begin{verbatim} { <var:b> = <var:g> } <var:z1> := <var:b> { <var:b> = <var:g> \land <var:z1> = <var:g> } \end{verbatim} This is given by the assignment law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:b> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:1> ; <var:v> := <var:z1> <var:v> := <var:v> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:b> = <var:g> }} <def:poly> {{ <var:v> = <nat:1> * <var:g> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:z1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:z1> = <var:g> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:z1> = <nat:1> * <var:g> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:z0> = <nat:6> /\ <var:v> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:v> = <nat:1> * <var:g> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 