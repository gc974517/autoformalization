\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:E> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:6> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:E> = <var:M> $ prior to interpreting this segment of code it follows that we see $ <var:D> = <nat:6> \times <var:M> + <nat:2> $ when set of commands terminates . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:E> = <var:M> \} \\ <var:y1> := <var:E> ; \\ \{ <var:E> = <var:M> \land <var:y1> = <var:M> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:E> = <var:M> \land <var:y1> = <var:M> \land <var:y0> = <nat:2> \} \\ <var:y1> := <var:y1> * <nat:6> ; \\ \{ <var:E> = <var:M> \land <var:y1> = <nat:6> * <var:M> \land <var:y0> = <nat:2> \} \\ <var:D> := <var:y1> \\ \{ <var:E> = <var:M> \land <var:y0> = <nat:2> \land <var:D> = <nat:6> * <var:M> \} \\ <var:D> := <var:D> + <var:y0> \\ \{ <var:E> = <var:M> \land <var:D> = <nat:6> * <var:M> + <nat:2> \} \end{eqnarray} Hence , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:E> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:6> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:E> = <var:M> }} <def:poly> {{ <var:D> = <nat:6> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:y1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:y1> = <var:M> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:y1> = <nat:6> * <var:M> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:y0> = <nat:2> /\ <var:D> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:D> = <nat:6> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 