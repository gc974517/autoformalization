\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:9> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:S> ; <var:H> := <var:X1> ; <var:H> := <var:H> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:S> = <var:l> $ before running this code it follows that $ <var:H> = <nat:8> * <var:l> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is demonstrated with typical Hoare techniques . Honing in on the proceeding statements in the set of commands , we have \begin{verbatim} { <var:S> = <var:l> } <var:X0> := <nat:9> { <var:S> = <var:l> \land <var:X0> = <nat:9> } { <var:S> = <var:l> \land <var:X0> = <nat:9> } <var:X1> := <nat:8> { <var:S> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> } \end{verbatim} Focusing on the subsequent steps found in the code , we have \begin{verbatim} { <var:S> = <var:l> } <var:X0> := <nat:9> { <var:S> = <var:l> \land <var:X0> = <nat:9> } { <var:S> = <var:l> \land <var:X0> = <nat:9> } <var:X1> := <nat:8> { <var:S> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> } { <var:S> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> } <var:X1> := <var:X1> * <var:S> { <var:S> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> \times <var:l> } \end{verbatim} This is deduced through the variable binding rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:9> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:S> ; <var:H> := <var:X1> ; <var:H> := <var:H> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:S> = <var:l> }} <def:poly> {{ <var:H> = <nat:8> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:X0> = <nat:9> /\ <var:H> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:H> = <nat:8> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 