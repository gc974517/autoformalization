\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:1> ; <var:l> := <var:z0> \end{verbatim} Assume that we have $ <var:X> = <var:s> $ , for some positive integers $ <var:s> $ , prior to the execution of our set of instructions , it must be that $ <var:l> = <nat:1> $ once list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:s> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:X> = <var:s> \land <var:z0> = <nat:1> \} \\ <var:l> := <var:z0> \\ \{ <var:X> = <var:s> \land <var:l> = <nat:1> \} \end{eqnarray} The application of standard Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:X> = <var:s> }} <var:z0> := <nat:1> ; <var:l> := <var:z0> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 