\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:F> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:a> = <var:z> $ for positive integer coefficients $ <var:z> $ ahead of evaluating this set of instructions , then we have $ <var:F> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions is shown with usual Hoare logic . Jumping to the following step in our series of instructions , we see the variable assignmet command \verb | <var:k0> := <nat:2> ; | . This advances the condition $ \{ <var:a> = <var:z> \} $ toward the postcondition $ \{ <var:a> = <var:z> \land <var:k0> = <nat:2> \} $ . Keeping momentum , the binding code \verb | <var:F> := <var:k0> | . This command forwards $ \{ <var:a> = <var:z> \land <var:k0> = <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:z> \land <var:F> = <nat:2> \} $ . This is known to be sound by the assignment rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:F> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:a> = <var:z> }} <def:poly> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:z> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:z> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 