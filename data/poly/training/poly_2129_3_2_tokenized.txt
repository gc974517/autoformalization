\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <var:k> * <var:A> ; <var:k> := <nat:4> + <var:k> * <var:A> \end{verbatim} Given it to hold that $ <var:A> = <var:O> $ --- given positive integers $ <var:O> $ --- before running our code segment , it follows that we have $ <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:4> $ once series of commands terminates . \end{theorem} \begin{proof} The flow of logic for our code segment is demonstrated using Hoare logic . Shifting focus toward the following step in the set of commands , the binding command \verb | <var:k> := <nat:1> ; | . This advances the precondition $ \{ <var:A> = <var:O> \} $ to the condition $ \{ <var:A> = <var:O> \land <var:k> = <nat:1> \} $ . This is rigorously given through the assignment scheme of usual Hoare reasoning . Advancing on , we see the variable update line giving $ <var:k> * <var:A> $ into $ <var:k>$ . This command redefines the precondition $ \{ <var:A> = <var:O> \land <var:k> = <nat:1> \} $ to the condition $ \{ <var:A> = <var:O> \land <var:k> = <nat:1> * <var:O> + \} $ . This is rigorously given using the assignment rule obtained from usual Hoare logic . Now , we have the line \verb | <var:k> := <nat:4> + <var:k> * <var:A> | . This line redefines $ \{ <var:A> = <var:O> \land <var:k> = <nat:1> * <var:O> + \} $ toward the condition $ \{ <var:A> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:4> \} $ . This is given by the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:A> = <var:O> }} <var:k> := <nat:1> ; <var:k> := <var:k> * <var:A> ; <var:k> := <nat:4> + <var:k> * <var:A> {{ <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:k> = <nat:1> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 