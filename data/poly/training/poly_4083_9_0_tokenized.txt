\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:6> ; <var:e1> := <var:e1> * <var:Q> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:Q> ; <var:e2> := <var:e2> * <var:Q> ; <var:O> := <var:e2> ; <var:O> := <var:O> + <var:e1> ; <var:O> := <var:O> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Assume it to be that $ <var:Q> = <var:V> $ ahead of executing our series of commands , it must be that we have $ <var:O> = <nat:3> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> + <nat:2> $ after program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:V> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \} \\ <var:e1> := <nat:6> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:e1> = <nat:6> \} \\ <var:e1> := <var:e1> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:e1> = <nat:6> \cdot <var:V> \} \\ <var:e2> := <nat:3> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:e1> = <nat:6> \cdot <var:V> \land <var:e2> = <nat:3> \} \\ <var:e2> := <var:e2> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:e1> = <nat:6> \cdot <var:V> \land <var:e2> = <nat:3> \cdot <var:V> \} \\ <var:e2> := <var:e2> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:e1> = <nat:6> \cdot <var:V> \land <var:e2> = <nat:3> \cdot <var:V> ^ <nat:2> \} \\ <var:O> := <var:e2> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:e1> = <nat:6> \cdot <var:V> \land <var:O> = <nat:3> \cdot <var:V> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:e1> ; \\ \{ <var:Q> = <var:V> \land <var:e0> = <nat:2> \land <var:O> = <nat:3> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> \} \\ <var:O> := <var:O> + <var:e0> \\ \{ <var:Q> = <var:V> \land <var:O> = <nat:3> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> + <nat:2> \} \end{eqnarray} Allowing interpreting the program returns : \begin{eqnarray} \end{eqnarray} Utilizing standard Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:e1> := <nat:6> ; <var:e1> := <var:e1> * <var:Q> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:Q> ; <var:e2> := <var:e2> * <var:Q> ; <var:O> := <var:e2> ; <var:O> := <var:O> + <var:e1> ; <var:O> := <var:O> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Q> = <var:V> }} <def:poly> {{ <var:O> = <nat:3> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:6> * <var:V> /\ <var:e2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:6> * <var:V> /\ <var:e2> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:6> * <var:V> /\ <var:e2> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:6> * <var:V> /\ <var:O> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:e0> = <nat:2> /\ <var:O> = <nat:3> * <var:V> ^ <nat:2> + <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:O> = <nat:3> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 