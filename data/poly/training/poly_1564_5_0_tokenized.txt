\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:r> ; <var:J> := <var:y1> ; <var:J> := <var:J> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Assuming it to hold that $ <var:r> = <var:p> $ before the evaluation of this set of instructions , it holds that we have $ <var:J> = <nat:2> \cdot <var:p> + <nat:1> $ . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:r> = <var:p> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:r> = <var:p> \land <var:y0> = <nat:1> \} \\ <var:y1> := <nat:2> ; \\ \{ <var:r> = <var:p> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \} \\ <var:y1> := <var:y1> * <var:r> ; \\ \{ <var:r> = <var:p> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \cdot <var:p> \} \\ <var:J> := <var:y1> ; \\ \{ <var:r> = <var:p> \land <var:y0> = <nat:1> \land <var:J> = <nat:2> \cdot <var:p> \} \\ <var:J> := <var:J> + <var:y0> \\ \{ <var:r> = <var:p> \land <var:J> = <nat:2> \cdot <var:p> + <nat:1> \} \end{eqnarray} Therefore , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:r> ; <var:J> := <var:y1> ; <var:J> := <var:J> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:r> = <var:p> }} <def:poly> {{ <var:J> = <nat:2> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:y0> = <nat:1> /\ <var:J> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:J> = <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 