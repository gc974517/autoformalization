\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:G1> := <var:r> ; <var:G2> := <var:G1> * <var:r> ; <var:G3> := <var:G2> * <var:r> ; <var:G4> := <var:G3> * <var:r> ; <var:G5> := <var:G4> * <var:r> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:3> ; <var:G5> := <var:G5> * <nat:1> ; <var:V> := <var:G5> <var:V> := <var:V> + <var:G1> <var:V> := <var:V> + <var:G0> \end{verbatim} Allowing it to hold that $ <var:r> = <var:y> $ ahead of running our series of instructions then we have $ <var:V> = <nat:1> \times <var:y> ^ <nat:5> + <nat:3> \times <var:y> + <nat:5> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this series of commands is done using this decorated set of instructions . \begin{eqnarray} \{ <var:r> = <var:y> \} \\ <var:G1> := <var:r> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <var:y> \} \\ <var:G2> := <var:G1> * <var:r> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:r> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \} \\ <var:G4> := <var:G3> * <var:r> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \} \\ <var:G5> := <var:G4> * <var:r> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \land <var:G5> = <var:y> ^ <nat:5> \} \\ <var:G0> := <nat:5> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \land <var:G5> = <var:y> ^ <nat:5> \land <var:G0> = <nat:5> \} \\ <var:G1> := <var:G1> * <nat:3> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <nat:3> \cdot <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \land <var:G5> = <var:y> ^ <nat:5> \land <var:G0> = <nat:5> \} \\ <var:G5> := <var:G5> * <nat:1> ; \\ \{ <var:r> = <var:y> \land <var:G1> = <nat:3> \cdot <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \land <var:G5> = <nat:1> \cdot <var:y> ^ <nat:5> \land <var:G0> = <nat:5> \} \\ <var:V> := <var:G5> \\ \{ <var:r> = <var:y> \land <var:G1> = <nat:3> \cdot <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \land <var:G0> = <nat:5> \land <var:V> = <nat:1> \cdot <var:y> ^ <nat:5> \} \\ <var:V> := <var:V> + <var:G1> \\ \{ <var:r> = <var:y> \land <var:G0> = <nat:5> \land <var:V> = <nat:1> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> \} \\ <var:V> := <var:V> + <var:G0> \\ \{ <var:r> = <var:y> \land <var:V> = <nat:1> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> + <nat:5> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Definition <var:G5> : string := " <var:G5> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:r> = <var:y> }} <var:G1> := <var:r> ; <var:G2> := <var:G1> * <var:r> ; <var:G3> := <var:G2> * <var:r> ; <var:G4> := <var:G3> * <var:r> ; <var:G5> := <var:G4> * <var:r> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:3> ; <var:G5> := <var:G5> * <nat:1> ; <var:V> := <var:G5> <var:V> := <var:V> + <var:G1> <var:V> := <var:V> + <var:G0> {{ <var:V> = <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G5> = <var:y> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G5> = <var:y> ^ <nat:5> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <nat:3> * <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G5> = <var:y> ^ <nat:5> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <nat:3> * <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G5> = <nat:1> * <var:y> ^ <nat:5> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G1> = <nat:3> * <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G0> = <nat:5> /\ <var:V> = <nat:1> * <var:y> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G0> = <nat:5> /\ <var:V> = <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:V> = <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 