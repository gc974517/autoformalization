\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:6> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:h> ; <var:x2> := <nat:7> ; <var:x2> := <var:x2> * <var:h> ; <var:x2> := <var:x2> * <var:h> ; <var:E> := <var:x2> ; <var:E> := <var:E> + <var:x1> ; <var:E> := <var:E> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:h> = <var:g> $ --- for positive numbers $ <var:g> $ --- before the execution of our set of instructions , then we have $ <var:E> = <nat:7> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:g> \} \\ <var:x0> := <nat:6> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \} \\ <var:x1> := <nat:9> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:x1> = <nat:9> \} \\ <var:x1> := <var:x1> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:x1> = <nat:9> * <var:g> \} \\ <var:x2> := <nat:7> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:x1> = <nat:9> * <var:g> \land <var:x2> = <nat:7> \} \\ <var:x2> := <var:x2> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:x1> = <nat:9> * <var:g> \land <var:x2> = <nat:7> * <var:g> \} \\ <var:x2> := <var:x2> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:x1> = <nat:9> * <var:g> \land <var:x2> = <nat:7> * <var:g> ^ <nat:2> \} \\ <var:E> := <var:x2> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:x1> = <nat:9> * <var:g> \land <var:E> = <nat:7> * <var:g> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:x1> ; \\ \{ <var:h> = <var:g> \land <var:x0> = <nat:6> \land <var:E> = <nat:7> * <var:g> ^ <nat:2> + <nat:9> * <var:g> \} \\ <var:E> := <var:E> + <var:x0> \\ \{ <var:h> = <var:g> \land <var:E> = <nat:7> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:6> \} \end{eqnarray} As a consequence , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:6> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:h> ; <var:x2> := <nat:7> ; <var:x2> := <var:x2> * <var:h> ; <var:x2> := <var:x2> * <var:h> ; <var:E> := <var:x2> ; <var:E> := <var:E> + <var:x1> ; <var:E> := <var:E> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <def:poly> {{ <var:E> = <nat:7> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:9> * <var:g> /\ <var:x2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:9> * <var:g> /\ <var:x2> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:9> * <var:g> /\ <var:x2> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:9> * <var:g> /\ <var:E> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:x0> = <nat:6> /\ <var:E> = <nat:7> * <var:g> ^ <nat:2> + <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:E> = <nat:7> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 