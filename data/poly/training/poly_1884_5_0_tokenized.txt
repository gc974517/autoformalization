\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:K> ; <var:u> := <var:g1> ; <var:u> := <var:u> + <var:g0> \end{verbatim} Given it to be that $ <var:K> = <var:S> $ ahead of executing our code then we have $ <var:u> = <nat:3> \cdot <var:S> + <nat:8> $ once list of instructions has terminated . \end{theorem} \begin{proof} The method of proof for this series of commands is evident using standard Hoare techniques . Moving on , we see the command \verb | <var:g0> := <nat:8> ; | . This command redefines $ \{ <var:K> = <var:S> \} $ toward the condition $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \} $ . Honing in on the subsequent line found in our set of instructions , we have the code \verb | <var:g1> := <nat:3> ; | . This command forwards $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \} $ into the condition $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \land <var:g1> = <nat:3> \} $ . Moving on to the following bit of code found in our list of commands , we have the assignment line binding $ <var:g1> * <var:K> $ as $ <var:g1>$ . This line advances the condition $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \land <var:g1> = <nat:3> \} $ to $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \land <var:g1> = <nat:3> * <var:S> \} $ . This is rigorously given using the assignment law found in standard Hoare techniques . Moving on , the variable binding line \verb | <var:u> := <var:g1> ; | . This advances $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \land <var:g1> = <nat:3> * <var:S> \} $ as $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \land <var:u> = <nat:3> * <var:S> \} $ . Stepping through , we have the assignment statement defining $ <var:u> + <var:g0$ to $ <var:u>$ . This code advances $ \{ <var:K> = <var:S> \land <var:g0> = <nat:8> \land <var:u> = <nat:3> * <var:S> \} $ to $ \{ <var:K> = <var:S> \land <var:u> = <nat:3> * <var:S> + <nat:8> \} $ . This is sound through the assignment scheme found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:K> = <var:S> }} <var:g0> := <nat:8> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:K> ; <var:u> := <var:g1> ; <var:u> := <var:u> + <var:g0> {{ <var:u> = <nat:3> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:g0> = <nat:8> /\ <var:u> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:u> = <nat:3> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 