\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:3> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:y> ; <var:D> := <var:B1> ; <var:D> := <var:D> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:y> = <var:k> $ ( for some natural coefficients $ <var:k> $ ) ahead of evaluating this list of instructions it must be that we have $ <var:D> = <nat:6> \cdot <var:k> + <nat:3> $ when program is done executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:k> \} \\ <var:B0> := <nat:3> ; \\ \{ <var:y> = <var:k> \land <var:B0> = <nat:3> \} \\ <var:B1> := <nat:6> ; \\ \{ <var:y> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:6> \} \\ <var:B1> := <var:B1> * <var:y> ; \\ \{ <var:y> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:6> * <var:k> \} \\ <var:D> := <var:B1> ; \\ \{ <var:y> = <var:k> \land <var:B0> = <nat:3> \land <var:D> = <nat:6> * <var:k> \} \\ <var:D> := <var:D> + <var:B0> \\ \{ <var:y> = <var:k> \land <var:D> = <nat:6> * <var:k> + <nat:3> \} \end{eqnarray} Therefore , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:y> ; <var:D> := <var:B1> ; <var:D> := <var:D> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:y> = <var:k> }} <def:poly> {{ <var:D> = <nat:6> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B0> = <nat:3> /\ <var:D> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:D> = <nat:6> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 