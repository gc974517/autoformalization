\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:Q> ; <var:O> := <var:e1> ; <var:O> := <var:O> + <var:e0> \end{verbatim} Given $ <var:Q> = <var:M> $ prior to executing the series of instructions , it holds that we have $ <var:O> = <nat:2> \cdot <var:M> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic results in : \begin{eqnarray} \{ <var:Q> = <var:M> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:Q> = <var:M> \land <var:e0> = <nat:3> \} \\ <var:e1> := <nat:2> ; \\ \{ <var:Q> = <var:M> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \} \\ <var:e1> := <var:e1> * <var:Q> ; \\ \{ <var:Q> = <var:M> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \cdot <var:M> \} \end{eqnarray} Furthering running the list of commands gives us : \begin{eqnarray} <var:O> := <var:e1> ; \\ \{ <var:Q> = <var:M> \land <var:e0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:M> \} \\ <var:O> := <var:O> + <var:e0> \\ \{ <var:Q> = <var:M> \land <var:O> = <nat:2> \cdot <var:M> + <nat:3> \} \end{eqnarray} Thusly , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Q> = <var:M> }} <var:e0> := <nat:3> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:Q> ; <var:O> := <var:e1> ; <var:O> := <var:O> + <var:e0> {{ <var:O> = <nat:2> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:e0> = <nat:3> /\ <var:O> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:O> = <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 