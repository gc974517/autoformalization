\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:D> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:9> ; <var:Z> := <var:F1> <var:Z> := <var:Z> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Assume --- for all positive coefficients $ <var:Q> $ --- that we have $ <var:D> = <var:Q> $ prior to interpreting our list of instructions , then we see $ <var:Z> = <nat:9> \cdot <var:Q> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands is given using usual Hoare reasoning . Focusing on the subsequent statements found in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:D> = <var:Q> \} & <var:F1> := <var:D> & \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \} \\ \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \} & <var:F0> := <nat:4> & \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \land <var:F0> = <nat:4> \} \end{tabular} Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:Q> \} & <var:F1> := <var:D> & \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \} \\ \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \} & <var:F0> := <nat:4> & \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \land <var:F0> = <nat:4> \} \\ \{ <var:D> = <var:Q> \land <var:F1> = <var:Q> \land <var:F0> = <nat:4> \} & <var:F1> := <var:F1> * <nat:9> & \{ <var:D> = <var:Q> \land <var:F1> = <nat:9> \cdot <var:Q> \land <var:F0> = <nat:4> \} \end{tabular} This is shown through the variable binding law found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:D> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:9> ; <var:Z> := <var:F1> <var:Z> := <var:Z> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:D> = <var:Q> }} <def:poly> {{ <var:Z> = <nat:9> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:F1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:F1> = <var:Q> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:F1> = <nat:9> * <var:Q> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:F0> = <nat:4> /\ <var:Z> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:Z> = <nat:9> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 