\begin{document} \begin{theorem} Take a segment of code as follows \begin{verbatim} <var:Y1> := <var:T> ; <var:Y2> := <var:Y1> * <var:T> ; <var:Y3> := <var:Y2> * <var:T> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:7> ; <var:Y3> := <var:Y3> * <nat:8> ; <var:Z> := <var:Y3> <var:Z> := <var:Z> + <var:Y2> <var:Z> := <var:Z> + <var:Y1> <var:Z> := <var:Z> + <var:Y0> \end{verbatim} Allow with some $ <var:B> \in \mathbb{N} $ that $ <var:T> = <var:B> $ prior to the evaluation of this set of instructions , it holds that we have $ <var:Z> = <nat:8> * <var:B> ^ <nat:3> + <nat:7> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is accomplished through standard Hoare logic . Taking another step toward the subsequent line of code contained in our code , we have the variable binding statement \verb | <var:Y1> := <var:T> ; | . This advances the condition $ \{ <var:T> = <var:B> \} $ to the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \} $ . This is given with the assignment rule defined by standard Hoare reasoning . Advancing , the environment update line \verb | <var:Y2> := <var:Y1> * <var:T> ; | . This command forwards the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \} $ toward the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \} $ . This is ensured using the assignment scheme from Hoare techniques . Moving forward , we see the assignment code \verb | <var:Y3> := <var:Y2> * <var:T> ; | . This code transfers the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \} $ toward the postcondition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \} $ . Taking another step toward the next line of code in the list of commands , the variable update command assigning $ <nat:2> $ into $ <var:Y0>$ . This advances the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \} $ to the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ . Observing the subsequent piece of code found in our set of instructions , the assignment statement \verb | <var:Y1> := <var:Y1> * <nat:9> ; | . This statement advances $ \{ <var:T> = <var:B> \land <var:Y1> = <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ into the postcondition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ . Observing the upcoming line contained in the series of instructions , we see the variable update code \verb | <var:Y2> := <var:Y2> * <nat:7> ; | . This code redefines the precondition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ into $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <nat:7> \times <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ . Looking at the following command found in our series of instructions , the variable update command \verb | <var:Y3> := <var:Y3> * <nat:8> ; | . This forwards the precondition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <nat:7> \times <var:B> ^ <nat:2> \land <var:Y3> = <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ toward the postcondition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <nat:7> \times <var:B> ^ <nat:2> \land <var:Y3> = <nat:8> \times <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ . This is guaranteed by the assignment inference rule in standard Hoare techniques . After , we have the line \verb | <var:Z> := <var:Y3> | . This command takes the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <nat:7> \times <var:B> ^ <nat:2> \land <var:Y3> = <nat:8> \times <var:B> ^ <nat:3> \land <var:Y0> = <nat:2> \} $ toward the postcondition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <nat:7> \times <var:B> ^ <nat:2> \land <var:Y0> = <nat:2> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> \} $ . This is shown by the assignment rule defined by Hoare techniques . Advancing to the next step , we have the assignment statement \verb | <var:Z> := <var:Z> + <var:Y2> | . This code advances the precondition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y2> = <nat:7> \times <var:B> ^ <nat:2> \land <var:Y0> = <nat:2> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> \} $ as the condition $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y0> = <nat:2> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> + <nat:7> \times <var:B> ^ <nat:2> \} $ . This is deduced through the assignment rule of Hoare logic . Looking at the next bit of code seen in our segment of code , we see the assignment code \verb | <var:Z> := <var:Z> + <var:Y1> | . This moves $ \{ <var:T> = <var:B> \land <var:Y1> = <nat:9> \times <var:B> \land <var:Y0> = <nat:2> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> + <nat:7> \times <var:B> ^ <nat:2> \} $ as $ \{ <var:T> = <var:B> \land <var:Y0> = <nat:2> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> + <nat:7> \times <var:B> ^ <nat:2> + <nat:9> \times <var:B> \} $ . After , we see the assignment code \verb | <var:Z> := <var:Z> + <var:Y0> | . This transfers $ \{ <var:T> = <var:B> \land <var:Y0> = <nat:2> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> + <nat:7> \times <var:B> ^ <nat:2> + <nat:9> \times <var:B> \} $ toward $ \{ <var:T> = <var:B> \land <var:Z> = <nat:8> \times <var:B> ^ <nat:3> + <nat:7> \times <var:B> ^ <nat:2> + <nat:9> \times <var:B> + <nat:2> \} $ . This is deduced through the assignment law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <var:Y1> := <var:T> ; <var:Y2> := <var:Y1> * <var:T> ; <var:Y3> := <var:Y2> * <var:T> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:7> ; <var:Y3> := <var:Y3> * <nat:8> ; <var:Z> := <var:Y3> <var:Z> := <var:Z> + <var:Y2> <var:Z> := <var:Z> + <var:Y1> <var:Z> := <var:Z> + <var:Y0> {{ <var:Z> = <nat:8> * <var:B> ^ <nat:3> + <nat:7> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <nat:9> * <var:B> /\ <var:Y2> = <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <nat:9> * <var:B> /\ <var:Y2> = <nat:7> * <var:B> ^ <nat:2> /\ <var:Y3> = <var:B> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <nat:9> * <var:B> /\ <var:Y2> = <nat:7> * <var:B> ^ <nat:2> /\ <var:Y3> = <nat:8> * <var:B> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <nat:9> * <var:B> /\ <var:Y2> = <nat:7> * <var:B> ^ <nat:2> /\ <var:Y0> = <nat:2> /\ <var:Z> = <nat:8> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y1> = <nat:9> * <var:B> /\ <var:Y0> = <nat:2> /\ <var:Z> = <nat:8> * <var:B> ^ <nat:3> + <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Y0> = <nat:2> /\ <var:Z> = <nat:8> * <var:B> ^ <nat:3> + <nat:7> * <var:B> ^ <nat:2> + <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:Z> = <nat:8> * <var:B> ^ <nat:3> + <nat:7> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 