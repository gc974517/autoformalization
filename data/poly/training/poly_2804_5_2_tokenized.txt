\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:X> := <nat:2> ; <var:X> := <nat:3> + <var:X> * <var:Y> ; <var:X> := <nat:3> + <var:X> * <var:Y> ; <var:X> := <nat:1> + <var:X> * <var:Y> ; <var:X> := <nat:4> + <var:X> * <var:Y> \end{verbatim} Given it to be that $ <var:Y> = <var:s> $ , letting positive integer coefficients $ <var:s> $ , ahead of running our set of instructions it follows that $ <var:X> = <nat:2> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:4> $ once program terminates . \end{theorem} \begin{proof} The method of proof for the program is evident using usual Hoare techniques . Moving forward to the upcoming line seen in our program , the environment update line yielding $ <nat:2> $ into $ <var:X>$ . This redefines the condition $ \{ <var:Y> = <var:s> \} $ into the condition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \} $ . Following , we have the variable binding code \verb | <var:X> := <nat:3> + <var:X> * <var:Y> ; | . This line advances the precondition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \} $ toward the condition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> + <nat:3> \} $ . This is known to be sound through the assignment scheme in typical Hoare logic . Next , we have the variable assignmet line \verb | <var:X> := <nat:3> + <var:X> * <var:Y> ; | . This line advances the precondition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> + <nat:3> \} $ into the postcondition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:3> \} $ . Following , we see the statement giving $ <nat:1> + <var:X> * <var:Y> $ toward $ <var:X>$ . This moves the condition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:3> \} $ to $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:1> \} $ . This is known to be sound by the assignment inference rule given by usual Hoare reasoning . Now , we see the assignment code assigning $ <nat:4> + <var:X> * <var:Y$ toward $ <var:X>$ . This transfers the condition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:1> \} $ to the postcondition $ \{ <var:Y> = <var:s> \land <var:X> = <nat:2> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Y> = <var:s> }} <var:X> := <nat:2> ; <var:X> := <nat:3> + <var:X> * <var:Y> ; <var:X> := <nat:3> + <var:X> * <var:Y> ; <var:X> := <nat:1> + <var:X> * <var:Y> ; <var:X> := <nat:4> + <var:X> * <var:Y> {{ <var:X> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:X> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:X> = <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:X> = <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:X> = <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:X> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 