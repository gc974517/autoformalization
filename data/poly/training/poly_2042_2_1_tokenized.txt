\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:2> ; <var:o> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:a> = <var:P> $ prior to executing the set of instructions , it holds that we have $ <var:o> = <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions is accomplished by typical Hoare techniques . Taking another step toward the next line of code found in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:P> \} & <var:U0> := <nat:2> & \{ <var:a> = <var:P> \land <var:U0> = <nat:2> \} \end{tabular} Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:P> \} & <var:U0> := <nat:2> & \{ <var:a> = <var:P> \land <var:U0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:2> ; <var:o> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:a> = <var:P> }} <def:poly> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 