\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:w> ; <var:F> := <var:U1> ; <var:F> := <var:F> + <var:U0> \end{verbatim} Allowing , for some $ <var:D> \in \mathbb{N} $ , that we have $ <var:w> = <var:D> $ before executing the set of instructions , it follows that we see $ <var:F> = <nat:5> * <var:D> + <nat:4> $ after series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:D> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:w> = <var:D> \land <var:U0> = <nat:4> \} \\ <var:U1> := <nat:5> ; \\ \{ <var:w> = <var:D> \land <var:U0> = <nat:4> \land <var:U1> = <nat:5> \} \\ <var:U1> := <var:U1> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:U0> = <nat:4> \land <var:U1> = <nat:5> \cdot <var:D> \} \\ <var:F> := <var:U1> ; \\ \{ <var:w> = <var:D> \land <var:U0> = <nat:4> \land <var:F> = <nat:5> \cdot <var:D> \} \\ <var:F> := <var:F> + <var:U0> \\ \{ <var:w> = <var:D> \land <var:F> = <nat:5> \cdot <var:D> + <nat:4> \} \end{eqnarray} Using typical Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <var:U0> := <nat:4> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:w> ; <var:F> := <var:U1> ; <var:F> := <var:F> + <var:U0> {{ <var:F> = <nat:5> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:U0> = <nat:4> /\ <var:F> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:F> = <nat:5> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 