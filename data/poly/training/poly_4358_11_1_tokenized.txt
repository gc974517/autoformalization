\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} : \begin{verbatim} <var:K1> := <var:T> ; <var:K2> := <var:K1> * <var:T> ; <var:K3> := <var:K2> * <var:T> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:2> ; <var:K3> := <var:K3> * <nat:9> ; <var:W> := <var:K3> <var:W> := <var:W> + <var:K2> <var:W> := <var:W> + <var:K1> <var:W> := <var:W> + <var:K0> \end{verbatim} Allowing $ <var:T> = <var:Q> $ , with some whole numbers $ <var:Q> $ , before evaluating our program it follows that we see $ <var:W> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands is shown with usual Hoare logic . Further , we see the binding line \verb | <var:K1> := <var:T> ; | . This forwards the precondition $ \{ <var:T> = <var:Q> \} $ into the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \} $ . Going forward , we have the binding line assigning $ <var:K1> * <var:T> $ to $ <var:K2>$ . This command advances the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \} $ into $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \} $ . Looking at the upcoming statement contained in the code segment , we have the environment update statement \verb | <var:K3> := <var:K2> * <var:T> ; | . This moves $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \} $ as the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \} $ . This is ensured using the assignment rule of typical Hoare logic . Observing the upcoming step in the program , the variable assignmet command letting $ <nat:2> $ to $ <var:K0>$ . This code redefines the precondition $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \} $ to $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ . This is rigorously given by the assignment inference rule obtained from standard Hoare logic . Moving on to the next step , we see the code \verb | <var:K1> := <var:K1> * <nat:8> ; | . This forwards the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ toward the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ . This is given through the assignment scheme given by typical Hoare reasoning . Moving on to the next step , we see the code \verb | <var:K2> := <var:K2> * <nat:2> ; | . This forwards the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ toward the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ . Observing the subsequent step found in our list of commands , we see the assignment line letting $ <var:K3> * <nat:9> $ to $ <var:K3>$ . This takes the precondition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ into $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:K3> = <nat:9> * <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ . Honing in on the subsequent command seen in the code segment , the command \verb | <var:W> := <var:K3> | . This line transfers the precondition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:K3> = <nat:9> * <var:Q> ^ <nat:3> \land <var:K0> = <nat:2> \} $ toward the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:K0> = <nat:2> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> \} $ . Focusing on the following piece of code found in our code , the variable update line \verb | <var:W> := <var:W> + <var:K2> | . This redefines $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:K0> = <nat:2> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> \} $ toward the condition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K0> = <nat:2> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> \} $ . This is rigorously given with the assignment scheme of usual Hoare techniques . Moving on , the assignment line assigning $ <var:W> + <var:K1$ to $ <var:W>$ . This advances the precondition $ \{ <var:T> = <var:Q> \land <var:K1> = <nat:8> * <var:Q> \land <var:K0> = <nat:2> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> \} $ into $ \{ <var:T> = <var:Q> \land <var:K0> = <nat:2> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> \} $ . Honing in on the proceeding line found in our series of commands , we have the environment update line assigning $ <var:W> + <var:K0$ as $ <var:W>$ . This forwards the precondition $ \{ <var:T> = <var:Q> \land <var:K0> = <nat:2> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> \} $ to the postcondition $ \{ <var:T> = <var:Q> \land <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:T> = <var:Q> }} <var:K1> := <var:T> ; <var:K2> := <var:K1> * <var:T> ; <var:K3> := <var:K2> * <var:T> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:2> ; <var:K3> := <var:K3> * <nat:9> ; <var:W> := <var:K3> <var:W> := <var:W> + <var:K2> <var:W> := <var:W> + <var:K1> <var:W> := <var:W> + <var:K0> {{ <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <nat:8> * <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <nat:8> * <var:Q> /\ <var:K2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <nat:8> * <var:Q> /\ <var:K2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:Q> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <nat:8> * <var:Q> /\ <var:K2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:K0> = <nat:2> /\ <var:W> = <nat:9> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K1> = <nat:8> * <var:Q> /\ <var:K0> = <nat:2> /\ <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:K0> = <nat:2> /\ <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:W> = <nat:9> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 