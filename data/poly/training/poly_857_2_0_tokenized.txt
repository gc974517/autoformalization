\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:6> ; <var:A> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:B> = <var:u> $ , given whole numbers $ <var:u> $ , ahead of the evaluation of the series of commands it follows that $ <var:A> = <nat:6> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:B> = <var:u> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:B> = <var:u> \land <var:k0> = <nat:6> \} \\ <var:A> := <var:k0> \\ \{ <var:B> = <var:u> \land <var:A> = <nat:6> \} \end{eqnarray} As a result , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:A> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:B> = <var:u> }} <def:poly> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 