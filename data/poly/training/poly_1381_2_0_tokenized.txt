\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:6> ; <var:C> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assume it to be that $ <var:Q> = <var:J> $ assuming some integers $ <var:J> $ ahead of running this list of commands it follows that $ <var:C> = <nat:6> $ once code segment has terminated . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:Q> = <var:J> \} \\ <var:p0> := <nat:6> ; \\ \{ <var:Q> = <var:J> \land <var:p0> = <nat:6> \} \\ <var:C> := <var:p0> \\ \{ <var:Q> = <var:J> \land <var:C> = <nat:6> \} \end{eqnarray} Given the above , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:6> ; <var:C> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Q> = <var:J> }} <def:poly> {{ <var:C> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:C> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 