\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} : \begin{verbatim} <var:i1> := <var:T> ; <var:i0> := <nat:4> ; <var:i1> := <var:i1> * <nat:2> ; <var:M> := <var:i1> <var:M> := <var:M> + <var:i0> \end{verbatim} Assume that $ <var:T> = <var:E> $ before executing our list of commands , it follows that $ <var:M> = <nat:2> \times <var:E> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:E> \} \\ <var:i1> := <var:T> ; \\ \{ <var:T> = <var:E> \land <var:i1> = <var:E> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:T> = <var:E> \land <var:i1> = <var:E> \land <var:i0> = <nat:4> \} \\ <var:i1> := <var:i1> * <nat:2> ; \\ \{ <var:T> = <var:E> \land <var:i1> = <nat:2> \times <var:E> \land <var:i0> = <nat:4> \} \\ <var:M> := <var:i1> \\ \{ <var:T> = <var:E> \land <var:i0> = <nat:4> \land <var:M> = <nat:2> \times <var:E> \} \\ <var:M> := <var:M> + <var:i0> \\ \{ <var:T> = <var:E> \land <var:M> = <nat:2> \times <var:E> + <nat:4> \} \end{eqnarray} Applying standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:T> = <var:E> }} <var:i1> := <var:T> ; <var:i0> := <nat:4> ; <var:i1> := <var:i1> * <nat:2> ; <var:M> := <var:i1> <var:M> := <var:M> + <var:i0> {{ <var:M> = <nat:2> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:i1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:i1> = <var:E> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:i1> = <nat:2> * <var:E> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:i0> = <nat:4> /\ <var:M> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:M> = <nat:2> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 