\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:Z> ; <var:Y2> := <var:Y1> * <var:Z> ; <var:Y3> := <var:Y2> * <var:Z> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:Y3> := <var:Y3> * <nat:4> ; <var:U> := <var:Y3> <var:U> := <var:U> + <var:Y2> <var:U> := <var:U> + <var:Y1> <var:U> := <var:U> + <var:Y0> \end{verbatim} Allowing that we have $ <var:Z> = <var:v> $ --- taking natural numbers $ <var:v> $ --- ahead of interpreting our code segment , it follows that $ <var:U> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:Z> = <var:v> \} \\ <var:Y1> := <var:Z> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <var:v> \} \\ <var:Y2> := <var:Y1> * <var:Z> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:Z> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <nat:3> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y2> := <var:Y2> * <nat:3> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <nat:3> \cdot <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y3> := <var:Y3> * <nat:4> ; \\ \{ <var:Z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <nat:3> \cdot <var:v> ^ <nat:2> \land <var:Y3> = <nat:4> \cdot <var:v> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:U> := <var:Y3> \\ \{ <var:Z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <nat:3> \cdot <var:v> ^ <nat:2> \land <var:Y0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:v> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:Y2> \\ \{ <var:Z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:Y1> \\ \{ <var:Z> = <var:v> \land <var:Y0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> \} \\ <var:U> := <var:U> + <var:Y0> \\ \{ <var:Z> = <var:v> \land <var:U> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} \end{eqnarray} As a result , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Z> = <var:v> }} <var:Y1> := <var:Z> ; <var:Y2> := <var:Y1> * <var:Z> ; <var:Y3> := <var:Y2> * <var:Z> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:Y3> := <var:Y3> * <nat:4> ; <var:U> := <var:Y3> <var:U> := <var:U> + <var:Y2> <var:U> := <var:U> + <var:Y1> <var:U> := <var:U> + <var:Y0> {{ <var:U> = <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y3> = <var:v> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y3> = <var:v> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:Y3> = <var:v> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:Y3> = <nat:4> * <var:v> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:Y0> = <nat:4> /\ <var:U> = <nat:4> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y0> = <nat:4> /\ <var:U> = <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:Y0> = <nat:4> /\ <var:U> = <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:U> = <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 