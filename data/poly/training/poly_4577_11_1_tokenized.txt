\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:y> ; <var:n2> := <var:n1> * <var:y> ; <var:n3> := <var:n2> * <var:y> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:2> ; <var:N> := <var:n3> <var:N> := <var:N> + <var:n2> <var:N> := <var:N> + <var:n1> <var:N> := <var:N> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:y> = <var:U> $ prior to executing the program , it holds that we have $ <var:N> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> $ when set of commands finishes . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:y> = <var:U> \} \\ <var:n1> := <var:y> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <var:U> \} \\ <var:n2> := <var:n1> * <var:y> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <var:U> \land <var:n2> = <var:U> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:y> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <var:U> \land <var:n2> = <var:U> ^ <nat:2> \land <var:n3> = <var:U> ^ <nat:3> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <var:U> \land <var:n2> = <var:U> ^ <nat:2> \land <var:n3> = <var:U> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:n1> := <var:n1> * <nat:3> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <nat:3> \times <var:U> \land <var:n2> = <var:U> ^ <nat:2> \land <var:n3> = <var:U> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:n2> := <var:n2> * <nat:2> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <nat:3> \times <var:U> \land <var:n2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:n3> = <var:U> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:n3> := <var:n3> * <nat:2> ; \\ \{ <var:y> = <var:U> \land <var:n1> = <nat:3> \times <var:U> \land <var:n2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:n3> = <nat:2> \times <var:U> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:N> := <var:n3> \\ \{ <var:y> = <var:U> \land <var:n1> = <nat:3> \times <var:U> \land <var:n2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:n0> = <nat:1> \land <var:N> = <nat:2> \times <var:U> ^ <nat:3> \} \end{eqnarray} Advancing the evaluation of our program returns : \begin{eqnarray} <var:N> := <var:N> + <var:n2> \\ \{ <var:y> = <var:U> \land <var:n1> = <nat:3> \times <var:U> \land <var:n0> = <nat:1> \land <var:N> = <nat:2> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> \} \end{eqnarray} Furthering the evaluation of the segment of code results in : \begin{eqnarray} <var:N> := <var:N> + <var:n1> \\ \{ <var:y> = <var:U> \land <var:n0> = <nat:1> \land <var:N> = <nat:2> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> \} \\ <var:N> := <var:N> + <var:n0> \\ \{ <var:y> = <var:U> \land <var:N> = <nat:2> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:1> \} \end{eqnarray} Thusly , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:y> ; <var:n2> := <var:n1> * <var:y> ; <var:n3> := <var:n2> * <var:y> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:2> ; <var:N> := <var:n3> <var:N> := <var:N> + <var:n2> <var:N> := <var:N> + <var:n1> <var:N> := <var:N> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:y> = <var:U> }} <def:poly> {{ <var:N> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <var:U> /\ <var:n2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <var:U> /\ <var:n2> = <var:U> ^ <nat:2> /\ <var:n3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <var:U> /\ <var:n2> = <var:U> ^ <nat:2> /\ <var:n3> = <var:U> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <var:U> ^ <nat:2> /\ <var:n3> = <var:U> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:n3> = <var:U> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:U> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:n0> = <nat:1> /\ <var:N> = <nat:2> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n0> = <nat:1> /\ <var:N> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:n0> = <nat:1> /\ <var:N> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:N> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 