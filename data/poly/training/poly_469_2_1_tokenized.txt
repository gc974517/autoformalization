\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:M0> := <nat:5> ; <var:D> := <var:M0> \end{verbatim} Given it to hold that $ <var:O> = <var:e> $ ahead of interpreting our program it holds that we see $ <var:D> = <nat:5> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:O> = <var:e> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:O> = <var:e> \land <var:M0> = <nat:5> \} \\ <var:D> := <var:M0> \\ \{ <var:O> = <var:e> \land <var:D> = <nat:5> \} \end{eqnarray} As a result , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:O> = <var:e> }} <var:M0> := <nat:5> ; <var:D> := <var:M0> {{ <var:D> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:D> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 