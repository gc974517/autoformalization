\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p1> := <var:M> ; <var:p2> := <var:p1> * <var:M> ; <var:p3> := <var:p2> * <var:M> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:4> ; <var:b> := <var:p3> <var:b> := <var:b> + <var:p2> <var:b> := <var:b> + <var:p1> <var:b> := <var:b> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:M> = <var:l> $ prior to the execution of this code , it follows that we see $ <var:b> = <nat:4> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:8> $ once series of commands has terminated . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:M> = <var:l> \} \\ <var:p1> := <var:M> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <var:l> \} \\ <var:p2> := <var:p1> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:p1> := <var:p1> * <nat:2> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <nat:2> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:p2> := <var:p2> * <nat:4> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <nat:2> \cdot <var:l> \land <var:p2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:p3> := <var:p3> * <nat:4> ; \\ \{ <var:M> = <var:l> \land <var:p1> = <nat:2> \cdot <var:l> \land <var:p2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:p3> = <nat:4> \cdot <var:l> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:b> := <var:p3> \\ \{ <var:M> = <var:l> \land <var:p1> = <nat:2> \cdot <var:l> \land <var:p2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:p0> = <nat:8> \land <var:b> = <nat:4> \cdot <var:l> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:p2> \\ \{ <var:M> = <var:l> \land <var:p1> = <nat:2> \cdot <var:l> \land <var:p0> = <nat:8> \land <var:b> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:p1> \\ \{ <var:M> = <var:l> \land <var:p0> = <nat:8> \land <var:b> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> \} \\ <var:b> := <var:b> + <var:p0> \\ \{ <var:M> = <var:l> \land <var:b> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:8> \} \end{eqnarray} Therefore , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:M> ; <var:p2> := <var:p1> * <var:M> ; <var:p3> := <var:p2> * <var:M> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:4> ; <var:b> := <var:p3> <var:b> := <var:b> + <var:p2> <var:b> := <var:b> + <var:p1> <var:b> := <var:b> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:M> = <var:l> }} <def:poly> {{ <var:b> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p0> = <nat:8> /\ <var:b> = <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p0> = <nat:8> /\ <var:b> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:p0> = <nat:8> /\ <var:b> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:b> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 