\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:Z> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:9> ; <var:c> := <var:B1> <var:c> := <var:c> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Given that we have $ <var:Z> = <var:t> $ prior to the execution of this set of commands , it follows that $ <var:c> = <nat:9> \cdot <var:t> + <nat:2> $ once series of instructions has finished . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is shown using typical Hoare reasoning . Jumping to the subsequent pieces of code found in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:t> \} & <var:B1> := <var:Z> & \{ <var:Z> = <var:t> \land <var:B1> = <var:t> \} \\ \{ <var:Z> = <var:t> \land <var:B1> = <var:t> \} & <var:B0> := <nat:2> & \{ <var:Z> = <var:t> \land <var:B1> = <var:t> \land <var:B0> = <nat:2> \} \\ \{ <var:Z> = <var:t> \land <var:B1> = <var:t> \land <var:B0> = <nat:2> \} & <var:B1> := <var:B1> * <nat:9> & \{ <var:Z> = <var:t> \land <var:B1> = <nat:9> \times <var:t> \land <var:B0> = <nat:2> \} \end{tabular} This is known to be sound through the environment update law defined by typical Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:t> \} & <var:B1> := <var:Z> & \{ <var:Z> = <var:t> \land <var:B1> = <var:t> \} \end{tabular} This is given using the assignment rule from standard Hoare logic . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:t> \} & <var:B1> := <var:Z> & \{ <var:Z> = <var:t> \land <var:B1> = <var:t> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:Z> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:9> ; <var:c> := <var:B1> <var:c> := <var:c> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Z> = <var:t> }} <def:poly> {{ <var:c> = <nat:9> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:B1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:B1> = <var:t> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:B1> = <nat:9> * <var:t> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:B0> = <nat:2> /\ <var:c> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:c> = <nat:9> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 