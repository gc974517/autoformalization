\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <nat:4> + <var:X> * <var:l> ; <var:X> := <var:X> * <var:l> ; <var:X> := <nat:1> + <var:X> * <var:l> ; <var:X> := <nat:2> + <var:X> * <var:l> ; <var:X> := <nat:1> + <var:X> * <var:l> ; <var:X> := <nat:2> + <var:X> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Given given whole numbers $ <var:x> $ that $ <var:l> = <var:x> $ ahead of the execution of our code , it must be that we see $ <var:X> = <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> $ when program has finished . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions can be accomplished with standard Hoare techniques . Jumping to the upcoming pieces of code seen in our series of instructions , we have \begin{verbatim} { <var:l> = <var:x> } <var:X> := <nat:4> { <var:l> = <var:x> \land <var:X> = <nat:4> } { <var:l> = <var:x> \land <var:X> = <nat:4> } <var:X> := <nat:4> + <var:X> * <var:l> { <var:l> = <var:x> \land <var:X> = <nat:4> \times <var:x> + <nat:4> } { <var:l> = <var:x> \land <var:X> = <nat:4> \times <var:x> + <nat:4> } <var:X> := <var:X> * <var:l> { <var:l> = <var:x> \land <var:X> = <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + } \end{verbatim} This is ensured with the variable update law of Hoare techniques . Advancing , \begin{verbatim} { <var:l> = <var:x> } <var:X> := <nat:4> { <var:l> = <var:x> \land <var:X> = <nat:4> } { <var:l> = <var:x> \land <var:X> = <nat:4> } <var:X> := <nat:4> + <var:X> * <var:l> { <var:l> = <var:x> \land <var:X> = <nat:4> \times <var:x> + <nat:4> } \end{verbatim} This is ensured through the assignment scheme given in standard Hoare logic . Moving on to the proceeding step in the program , we see \begin{verbatim} { <var:l> = <var:x> } <var:X> := <nat:4> { <var:l> = <var:x> \land <var:X> = <nat:4> } \end{verbatim} This is deduced with the binding inference rule of typical Hoare logic . Looking at the following bit of code seen in the list of commands , we see \begin{verbatim} { <var:l> = <var:x> } <var:X> := <nat:4> { <var:l> = <var:x> \land <var:X> = <nat:4> } \end{verbatim} This is known to be sound using the environment update rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:4> ; <var:X> := <nat:4> + <var:X> * <var:l> ; <var:X> := <var:X> * <var:l> ; <var:X> := <nat:1> + <var:X> * <var:l> ; <var:X> := <nat:2> + <var:X> * <var:l> ; <var:X> := <nat:1> + <var:X> * <var:l> ; <var:X> := <nat:2> + <var:X> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:l> = <var:x> }} <def:poly> {{ <var:X> = <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:X> = <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 