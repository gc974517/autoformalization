\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:h0> := <nat:7> ; <var:Y> := <var:h0> \end{verbatim} Allow it to hold that $ <var:P> = <var:M> $ ( given any $ <var:M> $ ) prior to evaluating this list of commands then $ <var:Y> = <nat:7> $ when set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is evident with standard Hoare techniques . Taking another step toward the subsequent commands contained in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:M> \} & <var:h0> := <nat:7> & \{ <var:P> = <var:M> \land <var:h0> = <nat:7> \} \\ \{ <var:P> = <var:M> \land <var:h0> = <nat:7> \} & <var:Y> := <var:h0& \{ <var:P> = <var:M> \land <var:Y> = <nat:7> \} \end{tabular} This is deduced through the variable assignmet scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:P> = <var:M> }} <var:h0> := <nat:7> ; <var:Y> := <var:h0> {{ <var:Y> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:Y> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 