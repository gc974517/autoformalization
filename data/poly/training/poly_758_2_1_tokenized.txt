\begin{document} \begin{theorem} Define the following code in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:3> ; <var:Y> := <var:u0> \end{verbatim} Given that $ <var:n> = <var:F> $ prior to the execution of this segment of code it follows that we see $ <var:Y> = <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:n> = <var:F> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:n> = <var:F> \land <var:u0> = <nat:3> \} \\ <var:Y> := <var:u0> \\ \{ <var:n> = <var:F> \land <var:Y> = <nat:3> \} \end{eqnarray} Considering the above , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:n> = <var:F> }} <var:u0> := <nat:3> ; <var:Y> := <var:u0> {{ <var:Y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:Y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 