\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k1> := <var:Q> ; <var:k2> := <var:k1> * <var:Q> ; <var:k3> := <var:k2> * <var:Q> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:2> ; <var:D> := <var:k3> <var:D> := <var:D> + <var:k2> <var:D> := <var:D> + <var:k1> <var:D> := <var:D> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Allowing that $ <var:Q> = <var:E> $ prior to running our program it holds that $ <var:D> = <nat:2> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:2> $ after list of instructions finishes . \end{theorem} \begin{proof} The flow of logic for our code segment can be given through standard Hoare reasoning . Honing in on the upcoming bits of codecontained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:E> \} & <var:k1> := <var:Q> & \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \} & <var:k2> := <var:k1> * <var:Q> & \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} & <var:k3> := <var:k2> * <var:Q> & \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} & <var:k0> := <nat:2> & \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} & <var:k1> := <var:k1> * <nat:4> & \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} & <var:k2> := <var:k2> * <nat:3> & \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <nat:3> * <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <nat:3> * <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} & <var:k3> := <var:k3> * <nat:2> & \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <nat:3> * <var:E> ^ <nat:2> \land <var:k3> = <nat:2> * <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <nat:3> * <var:E> ^ <nat:2> \land <var:k3> = <nat:2> * <var:E> ^ <nat:3> \land <var:k0> = <nat:2> \} & <var:D> := <var:k3& \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <nat:3> * <var:E> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <nat:3> * <var:E> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> \} & <var:D> := <var:D> + <var:k2& \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k0> = <nat:2> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> \} \\ \{ <var:Q> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k0> = <nat:2> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> \} & <var:D> := <var:D> + <var:k1& \{ <var:Q> = <var:E> \land <var:k0> = <nat:2> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> \} \\ \{ <var:Q> = <var:E> \land <var:k0> = <nat:2> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> \} & <var:D> := <var:D> + <var:k0& \{ <var:Q> = <var:E> \land <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:Q> ; <var:k2> := <var:k1> * <var:Q> ; <var:k3> := <var:k2> * <var:Q> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:2> ; <var:D> := <var:k3> <var:D> := <var:D> + <var:k2> <var:D> := <var:D> + <var:k1> <var:D> := <var:D> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Q> = <var:E> }} <def:poly> {{ <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:k0> = <nat:2> /\ <var:D> = <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k0> = <nat:2> /\ <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:k0> = <nat:2> /\ <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:D> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 