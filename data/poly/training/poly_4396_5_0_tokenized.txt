\begin{document} \begin{theorem} Let the following series of instructions as follows \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:b> ; <var:y> := <var:s1> ; <var:y> := <var:y> + <var:s0> \end{verbatim} Allow $ <var:b> = <var:k> $ before executing our set of instructions it must be that we see $ <var:y> = <nat:3> \times <var:k> + <nat:5> $ . \end{theorem} \begin{proof} The proof of our set of instructions can be shown through Hoare techniques . Taking a look at the subsequent step in our list of instructions , we see the assignment code assigning $ <nat:5> $ to $ <var:s0>$ . This command takes $ \{ <var:b> = <var:k> \} $ to the postcondition $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \} $ . This is shown to be logically sound with the assignment law given in Hoare logic . Keeping momentum , we see the variable update line \verb | <var:s1> := <nat:3> ; | . This line redefines the condition $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \} $ into the condition $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \land <var:s1> = <nat:3> \} $ . Advancing to the following command found in our series of commands , we have the assignment statement binding $ <var:s1> * <var:b> $ into $ <var:s1>$ . This line transfers $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \land <var:s1> = <nat:3> \} $ into $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \land <var:s1> = <nat:3> \cdot <var:k> \} $ . This is shown with the assignment law defined in usual Hoare reasoning . Following , we have the variable binding line giving $ <var:s1> $ to $ <var:y>$ . This statement transfers the condition $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \land <var:s1> = <nat:3> \cdot <var:k> \} $ toward the condition $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \land <var:y> = <nat:3> \cdot <var:k> \} $ . This is deduced with the assignment law of typical Hoare logic . Jumping to the next command contained in our segment of code , we have the variable assignmet statement yielding $ <var:y> + <var:s0$ as $ <var:y>$ . This command moves the condition $ \{ <var:b> = <var:k> \land <var:s0> = <nat:5> \land <var:y> = <nat:3> \cdot <var:k> \} $ as the postcondition $ \{ <var:b> = <var:k> \land <var:y> = <nat:3> \cdot <var:k> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:b> = <var:k> }} <var:s0> := <nat:5> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:b> ; <var:y> := <var:s1> ; <var:y> := <var:y> + <var:s0> {{ <var:y> = <nat:3> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:s0> = <nat:5> /\ <var:y> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:y> = <nat:3> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 