\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:8> ; <var:L> := <var:k0> \end{verbatim} Assuming it to be that $ <var:p> = <var:J> $ before executing this list of instructions it holds that $ <var:L> = <nat:8> $ once series of instructions is done executing . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:p> = <var:J> \} \\ <var:k0> := <nat:8> ; \\ \{ <var:p> = <var:J> \land <var:k0> = <nat:8> \} \\ <var:L> := <var:k0> \\ \{ <var:p> = <var:J> \land <var:L> = <nat:8> \} \end{eqnarray} Therefore , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:p> = <var:J> }} <var:k0> := <nat:8> ; <var:L> := <var:k0> {{ <var:L> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:L> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 