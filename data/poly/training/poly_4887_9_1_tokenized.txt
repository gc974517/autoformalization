\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:L> ; <var:u2> := <var:u1> * <var:L> ; <var:u3> := <var:u2> * <var:L> ; <var:u0> := <nat:1> ; <var:u2> := <var:u2> * <nat:5> ; <var:u3> := <var:u3> * <nat:3> ; <var:K> := <var:u3> <var:K> := <var:K> + <var:u2> <var:K> := <var:K> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:L> = <var:g> $ ahead of running this list of commands it holds that $ <var:K> = <nat:3> \times <var:g> ^ <nat:3> + <nat:5> \times <var:g> ^ <nat:2> + <nat:1> $ once list of commands executes . \end{theorem} \begin{proof} Demonstrating correctness of this code is given using typical Hoare techniques . Stepping through , we see \begin{verbatim} { <var:L> = <var:g> } <var:u1> := <var:L> { <var:L> = <var:g> \land <var:u1> = <var:g> } { <var:L> = <var:g> \land <var:u1> = <var:g> } <var:u2> := <var:u1> * <var:L> { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> } { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> } <var:u3> := <var:u2> * <var:L> { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> } { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> } <var:u0> := <nat:1> { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \land <var:u0> = <nat:1> } { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \land <var:u0> = <nat:1> } <var:u2> := <var:u2> * <nat:5> { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <nat:5> \times <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \land <var:u0> = <nat:1> } { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <nat:5> \times <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \land <var:u0> = <nat:1> } <var:u3> := <var:u3> * <nat:3> { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <nat:5> \times <var:g> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:g> ^ <nat:3> \land <var:u0> = <nat:1> } { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <nat:5> \times <var:g> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:g> ^ <nat:3> \land <var:u0> = <nat:1> } <var:K> := <var:u3{ <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <nat:5> \times <var:g> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:K> = <nat:3> \times <var:g> ^ <nat:3> } { <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <nat:5> \times <var:g> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:K> = <nat:3> \times <var:g> ^ <nat:3> } <var:K> := <var:K> + <var:u2{ <var:L> = <var:g> \land <var:u1> = <var:g> \land <var:u0> = <nat:1> \land <var:K> = <nat:3> \times <var:g> ^ <nat:3> + <nat:5> \times <var:g> ^ <nat:2> } \end{verbatim} Following , we see \begin{verbatim} { <var:L> = <var:g> } <var:u1> := <var:L> { <var:L> = <var:g> \land <var:u1> = <var:g> } \end{verbatim} This is ensured through the variable assignmet scheme found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:L> ; <var:u2> := <var:u1> * <var:L> ; <var:u3> := <var:u2> * <var:L> ; <var:u0> := <nat:1> ; <var:u2> := <var:u2> * <nat:5> ; <var:u3> := <var:u3> * <nat:3> ; <var:K> := <var:u3> <var:K> := <var:K> + <var:u2> <var:K> := <var:K> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:L> = <var:g> }} <def:poly> {{ <var:K> = <nat:3> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u3> = <var:g> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:u3> = <var:g> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:g> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:K> = <nat:3> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:u1> = <var:g> /\ <var:u0> = <nat:1> /\ <var:K> = <nat:3> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:K> = <nat:3> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 