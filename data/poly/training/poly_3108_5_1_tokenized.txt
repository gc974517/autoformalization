\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:t> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:9> ; <var:L> := <var:F1> <var:L> := <var:L> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:t> = <var:r> $ , for every positive numbers $ <var:r> $ , before evaluating our list of commands , it holds that we see $ <var:L> = <nat:9> * <var:r> + <nat:8> $ . \end{theorem} \begin{proof} The proof of our code segment can be demonstrated using Hoare logic . Moving forward to the next line found in the segment of code , we have the code defining $ <var:t> $ into $ <var:F1>$ . This statement takes the precondition $ \{ <var:t> = <var:r> \} $ to the condition $ \{ <var:t> = <var:r> \land <var:F1> = <var:r> \} $ . This is deduced using the assignment inference rule from usual Hoare techniques . After , we have the assignment line letting $ <nat:8> $ into $ <var:F0>$ . This line moves $ \{ <var:t> = <var:r> \land <var:F1> = <var:r> \} $ into $ \{ <var:t> = <var:r> \land <var:F1> = <var:r> \land <var:F0> = <nat:8> \} $ . This is ensured with the assignment scheme in usual Hoare techniques . After , we see the assignment code assigning $ <var:F1> * <nat:9> $ to $ <var:F1>$ . This statement forwards the condition $ \{ <var:t> = <var:r> \land <var:F1> = <var:r> \land <var:F0> = <nat:8> \} $ toward the condition $ \{ <var:t> = <var:r> \land <var:F1> = <nat:9> \times <var:r> \land <var:F0> = <nat:8> \} $ . Taking a look at the following line seen in the code segment , we have the variable assignmet statement \verb | <var:L> := <var:F1> | . This forwards the precondition $ \{ <var:t> = <var:r> \land <var:F1> = <nat:9> \times <var:r> \land <var:F0> = <nat:8> \} $ to $ \{ <var:t> = <var:r> \land <var:F0> = <nat:8> \land <var:L> = <nat:9> \times <var:r> \} $ . Advancing to the next step , we have the environment update code \verb | <var:L> := <var:L> + <var:F0> | . This forwards $ \{ <var:t> = <var:r> \land <var:F0> = <nat:8> \land <var:L> = <nat:9> \times <var:r> \} $ toward $ \{ <var:t> = <var:r> \land <var:L> = <nat:9> \times <var:r> + <nat:8> \} $ . This is rigorously given using the assignment inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:t> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:9> ; <var:L> := <var:F1> <var:L> := <var:L> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:t> = <var:r> }} <def:poly> {{ <var:L> = <nat:9> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:F1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:F1> = <var:r> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:F1> = <nat:9> * <var:r> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:F0> = <nat:8> /\ <var:L> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:L> = <nat:9> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 