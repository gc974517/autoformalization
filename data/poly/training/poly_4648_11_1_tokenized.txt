\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:u1> := <var:V> ; <var:u2> := <var:u1> * <var:V> ; <var:u3> := <var:u2> * <var:V> ; <var:u0> := <nat:7> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:7> ; <var:u3> := <var:u3> * <nat:4> ; <var:A> := <var:u3> <var:A> := <var:A> + <var:u2> <var:A> := <var:A> + <var:u1> <var:A> := <var:A> + <var:u0> \end{verbatim} Allow that we have $ <var:V> = <var:U> $ ahead of evaluating the list of commands it follows that we see $ <var:A> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be done through typical Hoare reasoning . Paying attention to the following command seen in our series of commands , the variable update line \verb | <var:u1> := <var:V> ; | . This line redefines the condition $ \{ <var:V> = <var:U> \} $ as the postcondition $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \} $ . This is guaranteed through the assignment inference rule found in usual Hoare reasoning . Moving on , the environment update code \verb | <var:u2> := <var:u1> * <var:V> ; | . This moves $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \} $ toward $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \land <var:u2> = <var:U> ^ <nat:2> \} $ . This is known to be sound by the assignment scheme from typical Hoare techniques . Moving forward to the proceeding line seen in the segment of code , we see the variable binding code \verb | <var:u3> := <var:u2> * <var:V> ; | . This line redefines $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \land <var:u2> = <var:U> ^ <nat:2> \} $ to the postcondition $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \land <var:u2> = <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \} $ . This is ensured by the assignment inference rule obtained from standard Hoare reasoning . Advancing to the next step , we have the assignment command defining $ <nat:7> $ to $ <var:u0>$ . This code moves $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \land <var:u2> = <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \} $ toward the condition $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \land <var:u2> = <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ . Moving on to the next step , we see the line defining $ <var:u1> * <nat:4> $ into $ <var:u1>$ . This statement forwards the condition $ \{ <var:V> = <var:U> \land <var:u1> = <var:U> \land <var:u2> = <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ toward the condition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ . Paying attention to the subsequent step found in our set of commands , we see the assignment line assigning $ <var:u2> * <nat:7> $ to $ <var:u2>$ . This transfers $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ to the condition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <nat:7> \cdot <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ . This is sound with the assignment law found in standard Hoare reasoning . Now , the binding line \verb | <var:u3> := <var:u3> * <nat:4> ; | . This moves the condition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <nat:7> \cdot <var:U> ^ <nat:2> \land <var:u3> = <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ toward the postcondition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <nat:7> \cdot <var:U> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ . This is given with the assignment rule given in Hoare reasoning . Moving forward , we see the variable assignmet code \verb | <var:A> := <var:u3> | . This line advances the precondition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <nat:7> \cdot <var:U> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:U> ^ <nat:3> \land <var:u0> = <nat:7> \} $ to $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <nat:7> \cdot <var:U> ^ <nat:2> \land <var:u0> = <nat:7> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> \} $ . This is known to be sound through the assignment scheme given in typical Hoare reasoning . Stepping forward , we see the variable binding statement \verb | <var:A> := <var:A> + <var:u2> | . This redefines the precondition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u2> = <nat:7> \cdot <var:U> ^ <nat:2> \land <var:u0> = <nat:7> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u0> = <nat:7> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> ^ <nat:2> \} $ . This is known to be sound with the assignment inference rule defined in usual Hoare logic . Honing in on the proceeding bit of code seen in the segment of code , we see the assignment line \verb | <var:A> := <var:A> + <var:u1> | . This takes the condition $ \{ <var:V> = <var:U> \land <var:u1> = <nat:4> \cdot <var:U> \land <var:u0> = <nat:7> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> ^ <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:U> \land <var:u0> = <nat:7> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} $ . Going forward , the assignment code \verb | <var:A> := <var:A> + <var:u0> | . This statement takes the condition $ \{ <var:V> = <var:U> \land <var:u0> = <nat:7> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} $ as $ \{ <var:V> = <var:U> \land <var:A> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:V> = <var:U> }} <var:u1> := <var:V> ; <var:u2> := <var:u1> * <var:V> ; <var:u3> := <var:u2> * <var:V> ; <var:u0> := <nat:7> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:7> ; <var:u3> := <var:u3> * <nat:4> ; <var:A> := <var:u3> <var:A> := <var:A> + <var:u2> <var:A> := <var:A> + <var:u1> <var:A> := <var:A> + <var:u0> {{ <var:A> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <var:U> /\ <var:u2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <var:U> /\ <var:u2> = <var:U> ^ <nat:2> /\ <var:u3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <var:U> /\ <var:u2> = <var:U> ^ <nat:2> /\ <var:u3> = <var:U> ^ <nat:3> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <nat:4> * <var:U> /\ <var:u2> = <var:U> ^ <nat:2> /\ <var:u3> = <var:U> ^ <nat:3> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <nat:4> * <var:U> /\ <var:u2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:u3> = <var:U> ^ <nat:3> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <nat:4> * <var:U> /\ <var:u2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:U> ^ <nat:3> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <nat:4> * <var:U> /\ <var:u2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:u0> = <nat:7> /\ <var:A> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u1> = <nat:4> * <var:U> /\ <var:u0> = <nat:7> /\ <var:A> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:u0> = <nat:7> /\ <var:A> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:A> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 