\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:2> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Q> := <var:Z3> ; <var:Q> := <var:Q> + <var:Z2> ; <var:Q> := <var:Q> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Given $ <var:B> = <var:u> $ ahead of evaluating our series of instructions , it holds that we see $ <var:Q> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:2> $ once program terminates . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:B> = <var:u> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \} \\ <var:Z2> := <nat:4> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> \} \\ <var:Z2> := <var:Z2> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> \} \\ <var:Z2> := <var:Z2> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> ^ <nat:2> \} \\ <var:Z3> := <nat:2> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> ^ <nat:2> \land <var:Z3> = <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:u> \} \\ <var:Z3> := <var:Z3> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:u> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:u> ^ <nat:3> \} \\ <var:Q> := <var:Z3> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Z2> = <nat:4> * <var:u> ^ <nat:2> \land <var:Q> = <nat:2> * <var:u> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:Z2> ; \\ \{ <var:B> = <var:u> \land <var:Z0> = <nat:2> \land <var:Q> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:Z0> \\ \{ <var:B> = <var:u> \land <var:Q> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> \} \end{eqnarray} Given the preceding argument , this series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Q> := <var:Z3> ; <var:Q> := <var:Q> + <var:Z2> ; <var:Q> := <var:Q> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:B> = <var:u> }} <def:poly> {{ <var:Q> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:Z3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Z2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:Q> = <nat:2> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Z0> = <nat:2> /\ <var:Q> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:Q> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 