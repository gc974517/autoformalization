\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v> := <nat:2> ; <var:v> := <nat:2> + <var:v> * <var:M> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Assuming $ <var:M> = <var:g> $ given all positive integers $ <var:g> $ before executing our set of instructions it holds that we see $ <var:v> = <nat:2> \times <var:g> + <nat:2> $ once series of commands finishes . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands can be done by standard Hoare logic . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:g> \} & <var:v> := <nat:2> & \{ <var:M> = <var:g> \land <var:v> = <nat:2> \} \end{tabular} This is guaranteed through the variable assignmet law from Hoare logic . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:M> = <var:g> \} & <var:v> := <nat:2> & \{ <var:M> = <var:g> \land <var:v> = <nat:2> \} \end{tabular} This is sound by the variable binding rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:2> ; <var:v> := <nat:2> + <var:v> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:M> = <var:g> }} <def:poly> {{ <var:v> = <nat:2> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:v> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:v> = <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 