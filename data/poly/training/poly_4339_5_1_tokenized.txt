\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:n> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:9> ; <var:e> := <var:V1> <var:e> := <var:e> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Assuming that $ <var:n> = <var:k> $ , taking positive numbers $ <var:k> $ , prior to executing this series of instructions , it holds that we see $ <var:e> = <nat:9> * <var:k> + <nat:8> $ when list of commands has exited . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be demonstrated through usual Hoare techniques . Immediately after , we have the variable binding line \verb | <var:V1> := <var:n> ; | . This command takes the precondition $ \{ <var:n> = <var:k> \} $ toward $ \{ <var:n> = <var:k> \land <var:V1> = <var:k> \} $ . This is shown through the assignment law of Hoare logic . Immediately after , we see the variable update statement binding $ <nat:8> $ to $ <var:V0>$ . This command takes the precondition $ \{ <var:n> = <var:k> \land <var:V1> = <var:k> \} $ to $ \{ <var:n> = <var:k> \land <var:V1> = <var:k> \land <var:V0> = <nat:8> \} $ . This is given by the assignment law of Hoare techniques . Stepping forward , we have the binding line letting $ <var:V1> * <nat:9> $ as $ <var:V1>$ . This advances the condition $ \{ <var:n> = <var:k> \land <var:V1> = <var:k> \land <var:V0> = <nat:8> \} $ into the condition $ \{ <var:n> = <var:k> \land <var:V1> = <nat:9> \cdot <var:k> \land <var:V0> = <nat:8> \} $ . Moving forward , the binding command \verb | <var:e> := <var:V1> | . This moves the precondition $ \{ <var:n> = <var:k> \land <var:V1> = <nat:9> \cdot <var:k> \land <var:V0> = <nat:8> \} $ as the condition $ \{ <var:n> = <var:k> \land <var:V0> = <nat:8> \land <var:e> = <nat:9> \cdot <var:k> \} $ . Considering the proceeding step seen in our code segment , the variable binding command assigning $ <var:e> + <var:V0$ to $ <var:e>$ . This advances the condition $ \{ <var:n> = <var:k> \land <var:V0> = <nat:8> \land <var:e> = <nat:9> \cdot <var:k> \} $ toward $ \{ <var:n> = <var:k> \land <var:e> = <nat:9> \cdot <var:k> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:n> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:9> ; <var:e> := <var:V1> <var:e> := <var:e> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:n> = <var:k> }} <def:poly> {{ <var:e> = <nat:9> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:V1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:V1> = <var:k> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:V1> = <nat:9> * <var:k> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:V0> = <nat:8> /\ <var:e> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:e> = <nat:9> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 