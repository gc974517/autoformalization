\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:F> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:6> ; <var:g> := <var:y1> <var:g> := <var:g> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assume it to be that $ <var:F> = <var:L> $ before the execution of our code segment , then we see $ <var:g> = <nat:6> * <var:L> + <nat:4> $ once segment of code executes . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is given by typical Hoare logic . After , \begin{verbatim} { <var:F> = <var:L> } <var:y1> := <var:F> { <var:F> = <var:L> \land <var:y1> = <var:L> } { <var:F> = <var:L> \land <var:y1> = <var:L> } <var:y0> := <nat:4> { <var:F> = <var:L> \land <var:y1> = <var:L> \land <var:y0> = <nat:4> } \end{verbatim} Moving forward to the next step , \begin{verbatim} { <var:F> = <var:L> } <var:y1> := <var:F> { <var:F> = <var:L> \land <var:y1> = <var:L> } { <var:F> = <var:L> \land <var:y1> = <var:L> } <var:y0> := <nat:4> { <var:F> = <var:L> \land <var:y1> = <var:L> \land <var:y0> = <nat:4> } { <var:F> = <var:L> \land <var:y1> = <var:L> \land <var:y0> = <nat:4> } <var:y1> := <var:y1> * <nat:6> { <var:F> = <var:L> \land <var:y1> = <nat:6> \cdot <var:L> \land <var:y0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:F> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:6> ; <var:g> := <var:y1> <var:g> := <var:g> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:F> = <var:L> }} <def:poly> {{ <var:g> = <nat:6> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:L> /\ <var:y1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:L> /\ <var:y1> = <var:L> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:L> /\ <var:y1> = <nat:6> * <var:L> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:L> /\ <var:y0> = <nat:4> /\ <var:g> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:L> /\ <var:g> = <nat:6> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 