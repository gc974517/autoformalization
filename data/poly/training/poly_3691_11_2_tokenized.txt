\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:4> + <var:h> * <var:D> ; <var:h> := <var:h> * <var:D> ; <var:h> := <nat:4> + <var:h> * <var:D> ; <var:h> := <nat:2> + <var:h> * <var:D> ; <var:h> := <var:h> * <var:D> ; <var:h> := <nat:2> + <var:h> * <var:D> ; <var:h> := <nat:3> + <var:h> * <var:D> ; <var:h> := <var:h> * <var:D> ; <var:h> := <nat:1> + <var:h> * <var:D> ; <var:h> := <nat:3> + <var:h> * <var:D> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow that $ <var:D> = <var:V> $ before the evaluation of the series of instructions then we have $ <var:h> = <nat:1> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code can be seen through typical Hoare techniques . Immediately following , we see the assignment statement \verb | <var:h> := <nat:1> ; | . This moves the precondition $ \{ <var:D> = <var:V> \} $ to the postcondition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \} $ . Moving onward , we see the variable update statement letting $ <nat:4> + <var:h> * <var:D> $ into $ <var:h>$ . This transfers the condition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \} $ toward the condition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> + <nat:4> \} $ . Jumping to the upcoming line of code contained in our list of commands , the code \verb | <var:h> := <var:h> * <var:D> ; | . This line moves the condition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> + <nat:4> \} $ toward $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + \} $ . Looking at the upcoming bit of code found in the segment of code , we see the line \verb | <var:h> := <nat:4> + <var:h> * <var:D> ; | . This forwards the condition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + \} $ toward $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:4> \} $ . This is deduced using the assignment law of Hoare reasoning . Moving on to the following step in our series of instructions , the environment update code defining $ <nat:2> + <var:h> * <var:D> $ into $ <var:h>$ . This forwards $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:4> \} $ toward the condition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> + <nat:2> \} $ . Stepping through , the variable update command \verb | <var:h> := <var:h> * <var:D> ; | . This redefines $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> + <nat:2> \} $ toward $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:5> + <nat:4> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + \} $ . Now , we see the variable binding command \verb | <var:h> := <nat:2> + <var:h> * <var:D> ; | . This statement moves the precondition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:5> + <nat:4> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + \} $ toward $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:6> + <nat:4> \cdot <var:V> ^ <nat:5> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:2> \} $ . This is known to be sound by the assignment law from typical Hoare techniques . Stepping forward , we see the variable update statement \verb | <var:h> := <nat:3> + <var:h> * <var:D> ; | . This line moves the precondition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:6> + <nat:4> \cdot <var:V> ^ <nat:5> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:2> \} $ as the condition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:7> + <nat:4> \cdot <var:V> ^ <nat:6> + <nat:4> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> + <nat:3> \} $ . After , we have the variable update statement letting $ <var:h> * <var:D> $ toward $ <var:h>$ . This code transfers the precondition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:7> + <nat:4> \cdot <var:V> ^ <nat:6> + <nat:4> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> + <nat:3> \} $ as the postcondition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:8> + <nat:4> \cdot <var:V> ^ <nat:7> + <nat:4> \cdot <var:V> ^ <nat:5> + <nat:2> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:3> \cdot <var:V> + \} $ . This is shown to be logically sound using the assignment rule found in typical Hoare techniques . Now , the environment update line binding $ <nat:1> + <var:h> * <var:D> $ into $ <var:h>$ . This statement takes the precondition $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:8> + <nat:4> \cdot <var:V> ^ <nat:7> + <nat:4> \cdot <var:V> ^ <nat:5> + <nat:2> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:3> \cdot <var:V> + \} $ toward $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:9> + <nat:4> \cdot <var:V> ^ <nat:8> + <nat:4> \cdot <var:V> ^ <nat:6> + <nat:2> \cdot <var:V> ^ <nat:5> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:1> \} $ . This is known to be sound by the assignment rule given by standard Hoare logic . Now , we have the variable update line yielding $ <nat:3> + <var:h> * <var:D$ toward $ <var:h>$ . This takes $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:9> + <nat:4> \cdot <var:V> ^ <nat:8> + <nat:4> \cdot <var:V> ^ <nat:6> + <nat:2> \cdot <var:V> ^ <nat:5> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:1> \} $ into $ \{ <var:D> = <var:V> \land <var:h> = <nat:1> \cdot <var:V> ^ <nat:10> + <nat:4> \cdot <var:V> ^ <nat:9> + <nat:4> \cdot <var:V> ^ <nat:7> + <nat:2> \cdot <var:V> ^ <nat:6> + <nat:2> \cdot <var:V> ^ <nat:4> + <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> + <nat:3> \} $ . This is known to be sound using the assignment scheme in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:1> ; <var:h> := <nat:4> + <var:h> * <var:D> ; <var:h> := <var:h> * <var:D> ; <var:h> := <nat:4> + <var:h> * <var:D> ; <var:h> := <nat:2> + <var:h> * <var:D> ; <var:h> := <var:h> * <var:D> ; <var:h> := <nat:2> + <var:h> * <var:D> ; <var:h> := <nat:3> + <var:h> * <var:D> ; <var:h> := <var:h> * <var:D> ; <var:h> := <nat:1> + <var:h> * <var:D> ; <var:h> := <nat:3> + <var:h> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:D> = <var:V> }} <def:poly> {{ <var:h> = <nat:1> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:h> = <nat:1> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 