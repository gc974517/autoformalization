\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:a> ; <var:Q2> := <var:Q1> * <var:a> ; <var:Q3> := <var:Q2> * <var:a> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:e> := <var:Q3> <var:e> := <var:e> + <var:Q2> <var:e> := <var:e> + <var:Q1> <var:e> := <var:e> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- for some $ <var:l> \in \mathbb{N} $ --- $ <var:a> = <var:l> $ ahead of executing our set of commands it must be that we have $ <var:e> = <nat:1> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:9> $ once list of commands exits . \end{theorem} \begin{proof} The course of logic for our list of commands is evident using the below decorated set of commands . \begin{eqnarray} \{ <var:a> = <var:l> \} \\ <var:Q1> := <var:a> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <var:l> \} \\ <var:Q2> := <var:Q1> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <var:l> \land <var:Q2> = <var:l> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <var:l> \land <var:Q2> = <var:l> ^ <nat:2> \land <var:Q3> = <var:l> ^ <nat:3> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <var:l> \land <var:Q2> = <var:l> ^ <nat:2> \land <var:Q3> = <var:l> ^ <nat:3> \land <var:Q0> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <nat:5> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <nat:5> \times <var:l> \land <var:Q2> = <var:l> ^ <nat:2> \land <var:Q3> = <var:l> ^ <nat:3> \land <var:Q0> = <nat:9> \} \\ <var:Q2> := <var:Q2> * <nat:8> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <nat:5> \times <var:l> \land <var:Q2> = <nat:8> \times <var:l> ^ <nat:2> \land <var:Q3> = <var:l> ^ <nat:3> \land <var:Q0> = <nat:9> \} \\ <var:Q3> := <var:Q3> * <nat:1> ; \\ \{ <var:a> = <var:l> \land <var:Q1> = <nat:5> \times <var:l> \land <var:Q2> = <nat:8> \times <var:l> ^ <nat:2> \land <var:Q3> = <nat:1> \times <var:l> ^ <nat:3> \land <var:Q0> = <nat:9> \} \\ <var:e> := <var:Q3> \\ \{ <var:a> = <var:l> \land <var:Q1> = <nat:5> \times <var:l> \land <var:Q2> = <nat:8> \times <var:l> ^ <nat:2> \land <var:Q0> = <nat:9> \land <var:e> = <nat:1> \times <var:l> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:Q2> \\ \{ <var:a> = <var:l> \land <var:Q1> = <nat:5> \times <var:l> \land <var:Q0> = <nat:9> \land <var:e> = <nat:1> \times <var:l> ^ <nat:3> + <nat:8> \times <var:l> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:Q1> \\ \{ <var:a> = <var:l> \land <var:Q0> = <nat:9> \land <var:e> = <nat:1> \times <var:l> ^ <nat:3> + <nat:8> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> \} \end{eqnarray} Furthering running the set of commands yields : \begin{eqnarray} <var:e> := <var:e> + <var:Q0> \\ \{ <var:a> = <var:l> \land <var:e> = <nat:1> \times <var:l> ^ <nat:3> + <nat:8> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> + <nat:9> \} \end{eqnarray} Applying usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:a> ; <var:Q2> := <var:Q1> * <var:a> ; <var:Q3> := <var:Q2> * <var:a> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:e> := <var:Q3> <var:e> := <var:e> + <var:Q2> <var:e> := <var:e> + <var:Q1> <var:e> := <var:e> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:a> = <var:l> }} <def:poly> {{ <var:e> = <nat:1> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <var:l> /\ <var:Q2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <var:l> /\ <var:Q2> = <var:l> ^ <nat:2> /\ <var:Q3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <var:l> /\ <var:Q2> = <var:l> ^ <nat:2> /\ <var:Q3> = <var:l> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <nat:5> * <var:l> /\ <var:Q2> = <var:l> ^ <nat:2> /\ <var:Q3> = <var:l> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <nat:5> * <var:l> /\ <var:Q2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:Q3> = <var:l> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <nat:5> * <var:l> /\ <var:Q2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:Q3> = <nat:1> * <var:l> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <nat:5> * <var:l> /\ <var:Q2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:Q0> = <nat:9> /\ <var:e> = <nat:1> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q1> = <nat:5> * <var:l> /\ <var:Q0> = <nat:9> /\ <var:e> = <nat:1> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:Q0> = <nat:9> /\ <var:e> = <nat:1> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:e> = <nat:1> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 