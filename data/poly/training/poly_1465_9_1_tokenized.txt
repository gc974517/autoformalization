\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:c> ; <var:g2> := <var:g1> * <var:c> ; <var:g3> := <var:g2> * <var:c> ; <var:g0> := <nat:8> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:4> ; <var:K> := <var:g3> <var:K> := <var:K> + <var:g2> <var:K> := <var:K> + <var:g0> \end{verbatim} Allowing it to hold that $ <var:c> = <var:G> $ prior to executing the program then $ <var:K> = <nat:4> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> + <nat:8> $ once code segment is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:G> \} \\ <var:g1> := <var:c> ; \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \} \\ <var:g2> := <var:g1> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g2> = <var:G> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g2> = <var:G> ^ <nat:2> \land <var:g3> = <var:G> ^ <nat:3> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g2> = <var:G> ^ <nat:2> \land <var:g3> = <var:G> ^ <nat:3> \land <var:g0> = <nat:8> \} \\ <var:g2> := <var:g2> * <nat:9> ; \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g2> = <nat:9> * <var:G> ^ <nat:2> \land <var:g3> = <var:G> ^ <nat:3> \land <var:g0> = <nat:8> \} \\ <var:g3> := <var:g3> * <nat:4> ; \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g2> = <nat:9> * <var:G> ^ <nat:2> \land <var:g3> = <nat:4> * <var:G> ^ <nat:3> \land <var:g0> = <nat:8> \} \\ <var:K> := <var:g3> \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g2> = <nat:9> * <var:G> ^ <nat:2> \land <var:g0> = <nat:8> \land <var:K> = <nat:4> * <var:G> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:g2> \\ \{ <var:c> = <var:G> \land <var:g1> = <var:G> \land <var:g0> = <nat:8> \land <var:K> = <nat:4> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:g0> \\ \{ <var:c> = <var:G> \land <var:K> = <nat:4> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:8> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:c> = <var:G> }} <var:g1> := <var:c> ; <var:g2> := <var:g1> * <var:c> ; <var:g3> := <var:g2> * <var:c> ; <var:g0> := <nat:8> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:4> ; <var:K> := <var:g3> <var:K> := <var:K> + <var:g2> <var:K> := <var:K> + <var:g0> {{ <var:K> = <nat:4> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g2> = <var:G> ^ <nat:2> /\ <var:g3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g2> = <var:G> ^ <nat:2> /\ <var:g3> = <var:G> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:g3> = <var:G> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:g3> = <nat:4> * <var:G> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:g0> = <nat:8> /\ <var:K> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:g1> = <var:G> /\ <var:g0> = <nat:8> /\ <var:K> = <nat:4> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:K> = <nat:4> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 