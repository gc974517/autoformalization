\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:Z3> := <var:Z3> * <nat:5> ; <var:U> := <var:Z3> <var:U> := <var:U> + <var:Z1> <var:U> := <var:U> + <var:Z0> \end{verbatim} Allowing that $ <var:h> = <var:V> $ prior to running our list of instructions it holds that $ <var:U> = <nat:5> \times <var:V> ^ <nat:3> + <nat:8> \times <var:V> + <nat:3> $ after list of instructions exits . \end{theorem} \begin{proof} The way to prove correctness for this program can be given through usual Hoare techniques . Focusing on the following piece of code seen in the series of commands , we have the statement \verb | <var:Z1> := <var:h> ; | . This command moves the condition $ \{ <var:h> = <var:V> \} $ as the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \} $ . This is known to be sound with the assignment inference rule of typical Hoare logic . Honing in on the upcoming line of code seen in the code , the command \verb | <var:Z2> := <var:Z1> * <var:h> ; | . This transfers the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \} $ toward $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \} $ . Advancing to the subsequent line seen in our set of instructions , we have the variable assignmet code \verb | <var:Z3> := <var:Z2> * <var:h> ; | . This line forwards the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \} $ toward the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \} $ . This is shown using the assignment scheme defined by usual Hoare reasoning . Focusing on the proceeding piece of code in the series of commands , we have the binding code \verb | <var:Z0> := <nat:3> ; | . This code moves the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \} $ toward the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ . Considering the next line in our segment of code , the binding command \verb | <var:Z1> := <var:Z1> * <nat:8> ; | . This statement redefines the precondition $ \{ <var:h> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ into $ \{ <var:h> = <var:V> \land <var:Z1> = <nat:8> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ . After , the variable update command \verb | <var:Z3> := <var:Z3> * <nat:5> ; | . This code takes the precondition $ \{ <var:h> = <var:V> \land <var:Z1> = <nat:8> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ to the postcondition $ \{ <var:h> = <var:V> \land <var:Z1> = <nat:8> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <nat:5> \cdot <var:V> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ . Taking another step toward the subsequent statement contained in the segment of code , we have the variable assignmet statement binding $ <var:Z3$ toward $ <var:U>$ . This code advances $ \{ <var:h> = <var:V> \land <var:Z1> = <nat:8> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <nat:5> \cdot <var:V> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:V> \land <var:Z1> = <nat:8> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:V> ^ <nat:3> \} $ . This is guaranteed using the assignment rule from standard Hoare reasoning . Going forward , we see the variable binding statement \verb | <var:U> := <var:U> + <var:Z1> | . This code redefines the condition $ \{ <var:h> = <var:V> \land <var:Z1> = <nat:8> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:V> ^ <nat:3> \} $ toward $ \{ <var:h> = <var:V> \land <var:Z0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:V> ^ <nat:3> + <nat:8> \cdot <var:V> \} $ . This is deduced with the assignment law in usual Hoare reasoning . Paying attention to the upcoming command found in our segment of code , we have the assignment command binding $ <var:U> + <var:Z0$ into $ <var:U>$ . This takes the precondition $ \{ <var:h> = <var:V> \land <var:Z0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:V> ^ <nat:3> + <nat:8> \cdot <var:V> \} $ into the condition $ \{ <var:h> = <var:V> \land <var:U> = <nat:5> \cdot <var:V> ^ <nat:3> + <nat:8> \cdot <var:V> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:Z3> := <var:Z3> * <nat:5> ; <var:U> := <var:Z3> <var:U> := <var:U> + <var:Z1> <var:U> := <var:U> + <var:Z0> {{ <var:U> = <nat:5> * <var:V> ^ <nat:3> + <nat:8> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <nat:8> * <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <nat:8> * <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:V> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z1> = <nat:8> * <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z0> = <nat:3> /\ <var:U> = <nat:5> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Z0> = <nat:3> /\ <var:U> = <nat:5> * <var:V> ^ <nat:3> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:U> = <nat:5> * <var:V> ^ <nat:3> + <nat:8> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 