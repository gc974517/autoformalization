\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:P1> := <var:l> ; <var:P2> := <var:P1> * <var:l> ; <var:P3> := <var:P2> * <var:l> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:8> ; <var:P2> := <var:P2> * <nat:2> ; <var:P3> := <var:P3> * <nat:5> ; <var:p> := <var:P3> <var:p> := <var:p> + <var:P2> <var:p> := <var:p> + <var:P1> <var:p> := <var:p> + <var:P0> \end{verbatim} Allow that we have $ <var:l> = <var:o> $ ( assuming some $ <var:o> \in \mathbb{N} $ ) prior to the execution of the code segment it follows that $ <var:p> = <nat:5> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:8> \cdot <var:o> + <nat:5> $ after code executes . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions can be seen using usual Hoare techniques . Observing the following line found in the list of instructions , the variable binding statement \verb | <var:P1> := <var:l> ; | . This statement forwards $ \{ <var:l> = <var:o> \} $ as the condition $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \} $ . Going to the next step , we see the assignment statement \verb | <var:P2> := <var:P1> * <var:l> ; | . This code redefines $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \} $ as the condition $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \} $ . This is deduced with the assignment rule from Hoare reasoning . Taking another step toward the proceeding line contained in our series of commands , we have the statement giving $ <var:P2> * <var:l> $ as $ <var:P3>$ . This transfers the precondition $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \} $ toward the condition $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \} $ . Going to the next step , we see the binding line assigning $ <nat:5> $ toward $ <var:P0>$ . This advances $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \} $ to the condition $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ . Moving onward , we have the assignment code binding $ <var:P1> * <nat:8> $ into $ <var:P1>$ . This code forwards $ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ toward the condition $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ . This is rigorously given with the assignment scheme defined in standard Hoare reasoning . Observing the next line found in our program , the statement \verb | <var:P2> := <var:P2> * <nat:2> ; | . This advances $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ into the postcondition $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <nat:2> \times <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ . Immediately following , the variable update statement \verb | <var:P3> := <var:P3> * <nat:5> ; | . This transfers the condition $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <nat:2> \times <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ as the condition $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <nat:2> \times <var:o> ^ <nat:2> \land <var:P3> = <nat:5> \times <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ . This is shown through the assignment scheme given in usual Hoare logic . Taking a look at the upcoming command found in the list of instructions , we see the variable binding command \verb | <var:p> := <var:P3> | . This transfers $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <nat:2> \times <var:o> ^ <nat:2> \land <var:P3> = <nat:5> \times <var:o> ^ <nat:3> \land <var:P0> = <nat:5> \} $ into the postcondition $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <nat:2> \times <var:o> ^ <nat:2> \land <var:P0> = <nat:5> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> \} $ . This is deduced with the assignment inference rule defined by typical Hoare logic . Further , we see the variable binding statement yielding $ <var:p> + <var:P2$ toward $ <var:p>$ . This takes the condition $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P2> = <nat:2> \times <var:o> ^ <nat:2> \land <var:P0> = <nat:5> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> \} $ into $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P0> = <nat:5> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> \} $ . This is ensured by the assignment scheme given by typical Hoare techniques . Advancing to the next step , the binding code \verb | <var:p> := <var:p> + <var:P1> | . This moves $ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> \times <var:o> \land <var:P0> = <nat:5> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> \} $ as $ \{ <var:l> = <var:o> \land <var:P0> = <nat:5> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> \} $ . This is rigorously given using the assignment law given by usual Hoare reasoning . Following , the variable update line binding $ <var:p> + <var:P0$ toward $ <var:p>$ . This takes the precondition $ \{ <var:l> = <var:o> \land <var:P0> = <nat:5> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> \} $ to the postcondition $ \{ <var:l> = <var:o> \land <var:p> = <nat:5> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> + <nat:5> \} $ . This is rigorously given through the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:l> = <var:o> }} <var:P1> := <var:l> ; <var:P2> := <var:P1> * <var:l> ; <var:P3> := <var:P2> * <var:l> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:8> ; <var:P2> := <var:P2> * <nat:2> ; <var:P3> := <var:P3> * <nat:5> ; <var:p> := <var:P3> <var:p> := <var:p> + <var:P2> <var:p> := <var:p> + <var:P1> <var:p> := <var:p> + <var:P0> {{ <var:p> = <nat:5> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P3> = <var:o> ^ <nat:3> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <nat:8> * <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P3> = <var:o> ^ <nat:3> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <nat:8> * <var:o> /\ <var:P2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:P3> = <var:o> ^ <nat:3> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <nat:8> * <var:o> /\ <var:P2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:o> ^ <nat:3> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <nat:8> * <var:o> /\ <var:P2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:P0> = <nat:5> /\ <var:p> = <nat:5> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <nat:8> * <var:o> /\ <var:P0> = <nat:5> /\ <var:p> = <nat:5> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P0> = <nat:5> /\ <var:p> = <nat:5> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:p> = <nat:5> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 