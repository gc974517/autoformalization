\begin{document} \begin{theorem} Define the following list of commands such that \begin{verbatim} <var:u0> := <nat:6> ; <var:w> := <var:u0> \end{verbatim} Assuming that we have $ <var:j> = <var:P> $ before running the set of commands it follows that $ <var:w> = <nat:6> $ . \end{theorem} \begin{proof} The proof of this series of commands is done with Hoare logic . Observing the upcoming command found in our series of commands , we see the environment update command \verb | <var:u0> := <nat:6> ; | . This code redefines $ \{ <var:j> = <var:P> \} $ into the condition $ \{ <var:j> = <var:P> \land <var:u0> = <nat:6> \} $ . This is guaranteed using the assignment scheme of typical Hoare logic . Moving on to the next step , we see the code assigning $ <var:u0$ as $ <var:w>$ . This code takes the precondition $ \{ <var:j> = <var:P> \land <var:u0> = <nat:6> \} $ toward $ \{ <var:j> = <var:P> \land <var:w> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:j> = <var:P> }} <var:u0> := <nat:6> ; <var:w> := <var:u0> {{ <var:w> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:w> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 