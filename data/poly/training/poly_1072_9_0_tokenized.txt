\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:d> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:d> ; <var:U2> := <var:U2> * <var:d> ; <var:M> := <var:U2> ; <var:M> := <var:M> + <var:U1> ; <var:M> := <var:M> + <var:U0> \end{verbatim} Given that we have $ <var:d> = <var:e> $ before interpreting the set of commands , it holds that we have $ <var:M> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:4> $ after series of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be accomplished using usual Hoare reasoning . Considering the upcoming lines of codecontained in our list of instructions , we have \begin{eqnarray} \{ <var:d> = <var:e> \} \, <var:U0> := <nat:4> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \} \\ \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \} \, <var:U1> := <nat:7> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \} \end{eqnarray} Further , we see \begin{eqnarray} \{ <var:d> = <var:e> \} \, <var:U0> := <nat:4> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \} \\ \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \} \, <var:U1> := <nat:7> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \} \\ \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \} \, <var:U1> := <var:U1> * <var:d> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \} \\ \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \} \, <var:U2> := <nat:7> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \land <var:U2> = <nat:7> \} \\ \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \land <var:U2> = <nat:7> \} \, <var:U2> := <var:U2> * <var:d> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \land <var:U2> = <nat:7> * <var:e> \} \\ \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \land <var:U2> = <nat:7> * <var:e> \} \, <var:U2> := <var:U2> * <var:d> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> * <var:e> \land <var:U2> = <nat:7> * <var:e> ^ <nat:2> \} \end{eqnarray} Focusing on the upcoming line seen in our program , \begin{eqnarray} \{ <var:d> = <var:e> \} \, <var:U0> := <nat:4> \, \{ <var:d> = <var:e> \land <var:U0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:d> = <var:e> }} <var:U0> := <nat:4> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:d> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:d> ; <var:U2> := <var:U2> * <var:d> ; <var:M> := <var:U2> ; <var:M> := <var:M> + <var:U1> ; <var:M> := <var:M> + <var:U0> {{ <var:M> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:e> /\ <var:U2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:e> /\ <var:U2> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:e> /\ <var:U2> = <nat:7> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:e> /\ <var:M> = <nat:7> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U0> = <nat:4> /\ <var:M> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:M> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 