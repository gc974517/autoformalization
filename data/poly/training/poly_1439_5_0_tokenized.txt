\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:y> ; <var:r> := <var:c1> ; <var:r> := <var:r> + <var:c0> \end{verbatim} Assuming it to be that $ <var:y> = <var:i> $ --- for $ <var:i> \in \mathbb{N} $ --- before the execution of the series of commands it follows that $ <var:r> = <nat:7> * <var:i> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:i> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:y> = <var:i> \land <var:c0> = <nat:4> \} \\ <var:c1> := <nat:7> ; \\ \{ <var:y> = <var:i> \land <var:c0> = <nat:4> \land <var:c1> = <nat:7> \} \\ <var:c1> := <var:c1> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:c0> = <nat:4> \land <var:c1> = <nat:7> * <var:i> \} \\ <var:r> := <var:c1> ; \\ \{ <var:y> = <var:i> \land <var:c0> = <nat:4> \land <var:r> = <nat:7> * <var:i> \} \\ <var:r> := <var:r> + <var:c0> \\ \{ <var:y> = <var:i> \land <var:r> = <nat:7> * <var:i> + <nat:4> \} \end{eqnarray} Using typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <var:c0> := <nat:4> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:y> ; <var:r> := <var:c1> ; <var:r> := <var:r> + <var:c0> {{ <var:r> = <nat:7> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:c0> = <nat:4> /\ <var:r> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:r> = <nat:7> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 