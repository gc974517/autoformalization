\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:3> ; <var:Z> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:O> = <var:k> $ ( with some $ <var:k> \in \mathbb{N} $ ) ahead of evaluating this list of instructions , then we have $ <var:Z> = <nat:3> $ when segment of code has finished executing . \end{theorem} \begin{proof} The flow of logic for our program can be demonstrated using Hoare techniques . Immediately following , \begin{verbatim} { <var:O> = <var:k> } <var:S0> := <nat:3> { <var:O> = <var:k> \land <var:S0> = <nat:3> } { <var:O> = <var:k> \land <var:S0> = <nat:3> } <var:Z> := <var:S0{ <var:O> = <var:k> \land <var:Z> = <nat:3> } \end{verbatim} This is shown through the variable binding law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:3> ; <var:Z> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:O> = <var:k> }} <def:poly> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:k> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:k> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 