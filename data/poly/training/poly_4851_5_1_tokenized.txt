\begin{document} \begin{theorem} We define the following list of commands as \begin{verbatim} <var:l1> := <var:K> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:5> ; <var:Z> := <var:l1> <var:Z> := <var:Z> + <var:l0> \end{verbatim} Assume that we have $ <var:K> = <var:d> $ given all positive numbers $ <var:d> $ before evaluating the set of commands it follows that we have $ <var:Z> = <nat:5> * <var:d> + <nat:6> $ after list of instructions is done executing . \end{theorem} \begin{proof} The method of proof for this series of commands is shown through usual Hoare reasoning . Further , the binding command assigning $ <var:K> $ as $ <var:l1>$ . This moves the condition $ \{ <var:K> = <var:d> \} $ into $ \{ <var:K> = <var:d> \land <var:l1> = <var:d> \} $ . Taking another step toward the upcoming statement contained in our list of instructions , we have the variable assignmet code \verb | <var:l0> := <nat:6> ; | . This code redefines the condition $ \{ <var:K> = <var:d> \land <var:l1> = <var:d> \} $ toward the condition $ \{ <var:K> = <var:d> \land <var:l1> = <var:d> \land <var:l0> = <nat:6> \} $ . This is sound with the assignment scheme given by Hoare logic . Paying attention to the following command found in our list of instructions , we have the binding line \verb | <var:l1> := <var:l1> * <nat:5> ; | . This takes the precondition $ \{ <var:K> = <var:d> \land <var:l1> = <var:d> \land <var:l0> = <nat:6> \} $ to $ \{ <var:K> = <var:d> \land <var:l1> = <nat:5> \times <var:d> \land <var:l0> = <nat:6> \} $ . This is known to be sound with the assignment scheme defined in standard Hoare reasoning . Considering the following piece of code seen in the code segment , we have the environment update line giving $ <var:l1$ toward $ <var:Z>$ . This code transfers the condition $ \{ <var:K> = <var:d> \land <var:l1> = <nat:5> \times <var:d> \land <var:l0> = <nat:6> \} $ to $ \{ <var:K> = <var:d> \land <var:l0> = <nat:6> \land <var:Z> = <nat:5> \times <var:d> \} $ . This is given using the assignment rule obtained from standard Hoare logic . Immediately following , the assignment command assigning $ <var:Z> + <var:l0$ toward $ <var:Z>$ . This code advances the precondition $ \{ <var:K> = <var:d> \land <var:l0> = <nat:6> \land <var:Z> = <nat:5> \times <var:d> \} $ as the postcondition $ \{ <var:K> = <var:d> \land <var:Z> = <nat:5> \times <var:d> + <nat:6> \} $ . This is shown to be logically sound with the assignment rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:K> = <var:d> }} <var:l1> := <var:K> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:5> ; <var:Z> := <var:l1> <var:Z> := <var:Z> + <var:l0> {{ <var:Z> = <nat:5> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:l1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:l1> = <var:d> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:l1> = <nat:5> * <var:d> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:l0> = <nat:6> /\ <var:Z> = <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:Z> = <nat:5> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 