\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:M> ; <var:g2> := <var:g1> * <var:M> ; <var:g3> := <var:g2> * <var:M> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:3> ; <var:g3> := <var:g3> * <nat:4> ; <var:w> := <var:g3> <var:w> := <var:w> + <var:g2> <var:w> := <var:w> + <var:g1> <var:w> := <var:w> + <var:g0> \end{verbatim} Given ( letting positive integer coefficients $ <var:t> $ ) $ <var:M> = <var:t> $ ahead of the evaluation of the series of commands it must be that we see $ <var:w> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> $ once list of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is accomplished by usual Hoare techniques . Paying attention to the upcoming line of code found in the series of instructions , the variable update command \verb | <var:g1> := <var:M> ; | . This advances the precondition $ \{ <var:M> = <var:t> \} $ toward $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \} $ . Shifting focus toward the upcoming step contained in our series of instructions , we have the environment update command yielding $ <var:g1> * <var:M> $ as $ <var:g2>$ . This transfers the condition $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \} $ as the postcondition $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \} $ . Taking a look at the upcoming piece of code seen in our code , we see the variable update line \verb | <var:g3> := <var:g2> * <var:M> ; | . This redefines the precondition $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \} $ into $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \} $ . This is ensured with the assignment rule defined in standard Hoare techniques . Moving forward to the next step , the assignment code \verb | <var:g0> := <nat:2> ; | . This statement moves $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \} $ toward the postcondition $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ . This is known to be sound by the assignment scheme from standard Hoare techniques . Moving on to the next line seen in our program , we see the variable update line assigning $ <var:g1> * <nat:4> $ toward $ <var:g1>$ . This code forwards the precondition $ \{ <var:M> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ toward the postcondition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ . This is shown by the assignment law in typical Hoare techniques . Moving forward to the next line found in the segment of code , the variable update code \verb | <var:g2> := <var:g2> * <nat:3> ; | . This statement redefines the precondition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ as the postcondition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ . Moving forward to the subsequent piece of code contained in our series of instructions , we have the environment update statement assigning $ <var:g3> * <nat:4> $ to $ <var:g3>$ . This redefines the condition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ toward the postcondition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:g3> = <nat:4> \times <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ . This is known to be sound using the assignment scheme given in Hoare techniques . Going forward , we see the binding statement \verb | <var:w> := <var:g3> | . This line moves $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:g3> = <nat:4> \times <var:t> ^ <nat:3> \land <var:g0> = <nat:2> \} $ as the condition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> \} $ . Looking at the subsequent line of code contained in the program , we have the variable update code \verb | <var:w> := <var:w> + <var:g2> | . This advances the precondition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> \} $ to the postcondition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g0> = <nat:2> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> \} $ . Now , we see the binding statement assigning $ <var:w> + <var:g1$ into $ <var:w>$ . This forwards the condition $ \{ <var:M> = <var:t> \land <var:g1> = <nat:4> \times <var:t> \land <var:g0> = <nat:2> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> \} $ to $ \{ <var:M> = <var:t> \land <var:g0> = <nat:2> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> \} $ . Immediately following , we see the variable assignmet statement \verb | <var:w> := <var:w> + <var:g0> | . This command transfers $ \{ <var:M> = <var:t> \land <var:g0> = <nat:2> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> \} $ to the condition $ \{ <var:M> = <var:t> \land <var:w> = <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:2> \} $ . This is shown to be logically sound with the assignment law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:M> = <var:t> }} <var:g1> := <var:M> ; <var:g2> := <var:g1> * <var:M> ; <var:g3> := <var:g2> * <var:M> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:3> ; <var:g3> := <var:g3> * <nat:4> ; <var:w> := <var:g3> <var:w> := <var:w> + <var:g2> <var:w> := <var:w> + <var:g1> <var:w> := <var:w> + <var:g0> {{ <var:w> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <var:t> /\ <var:g2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <var:t> /\ <var:g2> = <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <var:t> /\ <var:g2> = <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:g3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:w> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g0> = <nat:2> /\ <var:w> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:g0> = <nat:2> /\ <var:w> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 