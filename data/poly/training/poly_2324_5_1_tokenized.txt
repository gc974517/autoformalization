\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:b> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:4> ; <var:s> := <var:O1> <var:s> := <var:s> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:b> = <var:Q> $ , given any positive integer coefficients $ <var:Q> $ , before interpreting this code segment it must be that we have $ <var:s> = <nat:4> \times <var:Q> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code can be accomplished with the below decorated series of instructions . \begin{eqnarray} \{ <var:b> = <var:Q> \} \\ <var:O1> := <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:O1> = <var:Q> \} \\ <var:O0> := <nat:8> ; \\ \{ <var:b> = <var:Q> \land <var:O1> = <var:Q> \land <var:O0> = <nat:8> \} \\ <var:O1> := <var:O1> * <nat:4> ; \\ \{ <var:b> = <var:Q> \land <var:O1> = <nat:4> * <var:Q> \land <var:O0> = <nat:8> \} \\ <var:s> := <var:O1> \\ \{ <var:b> = <var:Q> \land <var:O0> = <nat:8> \land <var:s> = <nat:4> * <var:Q> \} \\ <var:s> := <var:s> + <var:O0> \\ \{ <var:b> = <var:Q> \land <var:s> = <nat:4> * <var:Q> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:b> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:4> ; <var:s> := <var:O1> <var:s> := <var:s> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:b> = <var:Q> }} <def:poly> {{ <var:s> = <nat:4> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:O1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:O1> = <var:Q> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:O1> = <nat:4> * <var:Q> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:O0> = <nat:8> /\ <var:s> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 