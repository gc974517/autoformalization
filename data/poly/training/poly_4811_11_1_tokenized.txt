\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:X> ; <var:t2> := <var:t1> * <var:X> ; <var:t3> := <var:t2> * <var:X> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:2> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:3> ; <var:J> := <var:t3> <var:J> := <var:J> + <var:t2> <var:J> := <var:J> + <var:t1> <var:J> := <var:J> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:X> = <var:e> $ before executing the series of commands it follows that we see $ <var:J> = <nat:3> * <var:e> ^ <nat:3> + <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> $ once series of instructions has executed . \end{theorem} \begin{proof} The method of proof for the list of commands is done by typical Hoare techniques . Stepping through , we see \begin{eqnarray} \{ <var:X> = <var:e> \} \, <var:t1> := <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \, <var:t2> := <var:t1> * <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} \, <var:t3> := <var:t2> * <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t3> = <var:e> ^ <nat:3> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t3> = <var:e> ^ <nat:3> \} \, <var:t0> := <nat:3> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t3> = <var:e> ^ <nat:3> \land <var:t0> = <nat:3> \} \end{eqnarray} This is rigorously given through the variable update inference rule from standard Hoare techniques . Next , \begin{eqnarray} \{ <var:X> = <var:e> \} \, <var:t1> := <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \, <var:t2> := <var:t1> * <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} \, <var:t3> := <var:t2> * <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t3> = <var:e> ^ <nat:3> \} \end{eqnarray} This is sound through the variable assignmet rule obtained from standard Hoare techniques . Moving on , we have \begin{eqnarray} \{ <var:X> = <var:e> \} \, <var:t1> := <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \, <var:t2> := <var:t1> * <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} \\ \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} \, <var:t3> := <var:t2> * <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t3> = <var:e> ^ <nat:3> \} \end{eqnarray} Further , we have \begin{eqnarray} \{ <var:X> = <var:e> \} \, <var:t1> := <var:X> \, \{ <var:X> = <var:e> \land <var:t1> = <var:e> \} \end{eqnarray} This is rigorously given by the variable update inference rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:X> ; <var:t2> := <var:t1> * <var:X> ; <var:t3> := <var:t2> * <var:X> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:2> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:3> ; <var:J> := <var:t3> <var:J> := <var:J> + <var:t2> <var:J> := <var:J> + <var:t1> <var:J> := <var:J> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:X> = <var:e> }} <def:poly> {{ <var:J> = <nat:3> * <var:e> ^ <nat:3> + <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <var:e> /\ <var:t2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <var:e> /\ <var:t2> = <var:e> ^ <nat:2> /\ <var:t3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <var:e> /\ <var:t2> = <var:e> ^ <nat:2> /\ <var:t3> = <var:e> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <nat:2> * <var:e> /\ <var:t2> = <var:e> ^ <nat:2> /\ <var:t3> = <var:e> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <nat:2> * <var:e> /\ <var:t2> = <nat:5> * <var:e> ^ <nat:2> /\ <var:t3> = <var:e> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <nat:2> * <var:e> /\ <var:t2> = <nat:5> * <var:e> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:e> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <nat:2> * <var:e> /\ <var:t2> = <nat:5> * <var:e> ^ <nat:2> /\ <var:t0> = <nat:3> /\ <var:J> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t1> = <nat:2> * <var:e> /\ <var:t0> = <nat:3> /\ <var:J> = <nat:3> * <var:e> ^ <nat:3> + <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:t0> = <nat:3> /\ <var:J> = <nat:3> * <var:e> ^ <nat:3> + <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:J> = <nat:3> * <var:e> ^ <nat:3> + <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 