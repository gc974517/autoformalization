\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:Q1> := <var:n> ; <var:Q2> := <var:Q1> * <var:n> ; <var:Q3> := <var:Q2> * <var:n> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:E> := <var:Q3> <var:E> := <var:E> + <var:Q1> <var:E> := <var:E> + <var:Q0> \end{verbatim} Given it to hold that $ <var:n> = <var:C> $ ahead of evaluating the code it holds that we have $ <var:E> = <nat:8> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> + <nat:6> $ once list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:C> \} \\ <var:Q1> := <var:n> ; \\ \{ <var:n> = <var:C> \land <var:Q1> = <var:C> \} \\ <var:Q2> := <var:Q1> * <var:n> ; \\ \{ <var:n> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:n> ; \\ \{ <var:n> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \} \\ <var:Q0> := <nat:6> ; \\ \{ <var:n> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \land <var:Q0> = <nat:6> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:n> = <var:C> \land <var:Q1> = <nat:4> \cdot <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \land <var:Q0> = <nat:6> \} \\ <var:Q3> := <var:Q3> * <nat:8> ; \\ \{ <var:n> = <var:C> \land <var:Q1> = <nat:4> \cdot <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <nat:8> \cdot <var:C> ^ <nat:3> \land <var:Q0> = <nat:6> \} \\ <var:E> := <var:Q3> \\ \{ <var:n> = <var:C> \land <var:Q1> = <nat:4> \cdot <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q0> = <nat:6> \land <var:E> = <nat:8> \cdot <var:C> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:Q1> \\ \{ <var:n> = <var:C> \land <var:Q0> = <nat:6> \land <var:E> = <nat:8> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> \} \\ <var:E> := <var:E> + <var:Q0> \\ \{ <var:n> = <var:C> \land <var:E> = <nat:8> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> + <nat:6> \} \end{eqnarray} Allowing the execution of this program produces : \begin{eqnarray} \end{eqnarray} Using usual Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:n> = <var:C> }} <var:Q1> := <var:n> ; <var:Q2> := <var:Q1> * <var:n> ; <var:Q3> := <var:Q2> * <var:n> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:E> := <var:Q3> <var:E> := <var:E> + <var:Q1> <var:E> := <var:E> + <var:Q0> {{ <var:E> = <nat:8> * <var:C> ^ <nat:3> + <nat:4> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <nat:4> * <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <nat:4> * <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <nat:8> * <var:C> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q1> = <nat:4> * <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q0> = <nat:6> /\ <var:E> = <nat:8> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Q0> = <nat:6> /\ <var:E> = <nat:8> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:E> = <nat:8> * <var:C> ^ <nat:3> + <nat:4> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 