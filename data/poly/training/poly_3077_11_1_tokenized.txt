\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:L> ; <var:q2> := <var:q1> * <var:L> ; <var:q3> := <var:q2> * <var:L> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:9> ; <var:q2> := <var:q2> * <nat:4> ; <var:q3> := <var:q3> * <nat:1> ; <var:j> := <var:q3> <var:j> := <var:j> + <var:q2> <var:j> := <var:j> + <var:q1> <var:j> := <var:j> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for positive integers $ <var:t> $ --- that $ <var:L> = <var:t> $ prior to evaluating our series of instructions it follows that $ <var:j> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is evident through typical Hoare logic . Immediately after , we see the environment update code \verb | <var:q1> := <var:L> ; | . This moves the precondition $ \{ <var:L> = <var:t> \} $ into the postcondition $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \} $ . This is shown by the assignment rule from typical Hoare logic . Next , the variable update line defining $ <var:q1> * <var:L> $ to $ <var:q2>$ . This statement advances the condition $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \} $ as the condition $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \land <var:q2> = <var:t> ^ <nat:2> \} $ . Moving forward to the following line of code seen in the segment of code , the binding line \verb | <var:q3> := <var:q2> * <var:L> ; | . This line forwards $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \land <var:q2> = <var:t> ^ <nat:2> \} $ into the condition $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \land <var:q2> = <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \} $ . This is deduced with the assignment rule defined in typical Hoare reasoning . Honing in on the following bit of code found in the list of instructions , we see the variable binding command giving $ <nat:5> $ into $ <var:q0>$ . This forwards the condition $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \land <var:q2> = <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \} $ to the condition $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \land <var:q2> = <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ . Taking a look at the upcoming bit of code seen in the list of commands , the code \verb | <var:q1> := <var:q1> * <nat:9> ; | . This statement advances $ \{ <var:L> = <var:t> \land <var:q1> = <var:t> \land <var:q2> = <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ into $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ . Moving on , we see the variable binding statement \verb | <var:q2> := <var:q2> * <nat:4> ; | . This statement advances $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ toward the postcondition $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ . Going forward , the variable binding code \verb | <var:q3> := <var:q3> * <nat:1> ; | . This moves the precondition $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:q3> = <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ to the postcondition $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:q3> = <nat:1> \cdot <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ . This is guaranteed through the assignment rule given by usual Hoare logic . Further , we see the line \verb | <var:j> := <var:q3> | . This transfers the precondition $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:q3> = <nat:1> \cdot <var:t> ^ <nat:3> \land <var:q0> = <nat:5> \} $ toward the postcondition $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:q0> = <nat:5> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> \} $ . Now , the variable binding line \verb | <var:j> := <var:j> + <var:q2> | . This statement moves $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:q0> = <nat:5> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> \} $ toward $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q0> = <nat:5> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> \} $ . Next , we have the variable assignmet line \verb | <var:j> := <var:j> + <var:q1> | . This redefines the condition $ \{ <var:L> = <var:t> \land <var:q1> = <nat:9> \cdot <var:t> \land <var:q0> = <nat:5> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> \} $ as the condition $ \{ <var:L> = <var:t> \land <var:q0> = <nat:5> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} $ . This is sound through the assignment inference rule found in standard Hoare techniques . Moving forward to the proceeding command found in the code , we have the assignment statement binding $ <var:j> + <var:q0$ toward $ <var:j>$ . This command transfers the precondition $ \{ <var:L> = <var:t> \land <var:q0> = <nat:5> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} $ as the condition $ \{ <var:L> = <var:t> \land <var:j> = <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:L> ; <var:q2> := <var:q1> * <var:L> ; <var:q3> := <var:q2> * <var:L> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:9> ; <var:q2> := <var:q2> * <nat:4> ; <var:q3> := <var:q3> * <nat:1> ; <var:j> := <var:q3> <var:j> := <var:j> + <var:q2> <var:j> := <var:j> + <var:q1> <var:j> := <var:j> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:L> = <var:t> }} <def:poly> {{ <var:j> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <var:t> /\ <var:q2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <var:t> /\ <var:q2> = <var:t> ^ <nat:2> /\ <var:q3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <var:t> /\ <var:q2> = <var:t> ^ <nat:2> /\ <var:q3> = <var:t> ^ <nat:3> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <nat:9> * <var:t> /\ <var:q2> = <var:t> ^ <nat:2> /\ <var:q3> = <var:t> ^ <nat:3> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <nat:9> * <var:t> /\ <var:q2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:q3> = <var:t> ^ <nat:3> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <nat:9> * <var:t> /\ <var:q2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:t> ^ <nat:3> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <nat:9> * <var:t> /\ <var:q2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:q0> = <nat:5> /\ <var:j> = <nat:1> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q1> = <nat:9> * <var:t> /\ <var:q0> = <nat:5> /\ <var:j> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:q0> = <nat:5> /\ <var:j> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:j> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 