\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:1> ; <var:x> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:R> = <var:W> $ before running this series of instructions it follows that we have $ <var:x> = <nat:1> $ after list of instructions has executed . \end{theorem} \begin{proof} Proving correctness for the code segment is shown through Hoare reasoning . Stepping forward , the variable binding code letting $ <nat:1> $ to $ <var:Q0>$ . This statement moves $ \{ <var:R> = <var:W> \} $ toward $ \{ <var:R> = <var:W> \land <var:Q0> = <nat:1> \} $ . Moving forward , we have the variable binding line assigning $ <var:Q0$ into $ <var:x>$ . This advances the condition $ \{ <var:R> = <var:W> \land <var:Q0> = <nat:1> \} $ into the condition $ \{ <var:R> = <var:W> \land <var:x> = <nat:1> \} $ . This is deduced with the assignment scheme given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:x> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:R> = <var:W> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 