\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:R1> := <var:U> ; <var:R2> := <var:R1> * <var:U> ; <var:R3> := <var:R2> * <var:U> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:9> ; <var:i> := <var:R3> <var:i> := <var:i> + <var:R2> <var:i> := <var:i> + <var:R1> <var:i> := <var:i> + <var:R0> \end{verbatim} Assume --- given some whole numbers $ <var:D> $ --- it to be that $ <var:U> = <var:D> $ prior to executing the series of commands , it follows that we have $ <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:8> \cdot <var:D> + <nat:5> $ after series of commands has exited . \end{theorem} \begin{proof} The flow of logic for the segment of code can be done with standard Hoare logic . Immediately following , we have the assignment code \verb | <var:R1> := <var:U> ; | . This takes the condition $ \{ <var:U> = <var:D> \} $ into the condition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \} $ . This is known to be sound by the assignment inference rule given in standard Hoare reasoning . Moving on to the next step , the assignment statement defining $ <var:R1> * <var:U> $ as $ <var:R2>$ . This code transfers the condition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \} $ into the condition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law defined by standard Hoare techniques . Advancing to the next step , we see the binding line giving $ <var:R2> * <var:U> $ as $ <var:R3>$ . This takes the precondition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \} $ . This is shown through the assignment scheme in usual Hoare techniques . Focusing on the next line of code found in the set of instructions , we have the variable update command \verb | <var:R0> := <nat:5> ; | . This forwards the precondition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \} $ as the condition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . Paying attention to the following command found in our code segment , we have the variable binding code binding $ <var:R1> * <nat:8> $ as $ <var:R1>$ . This statement transfers the precondition $ \{ <var:U> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ into the condition $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . Shifting focus toward the proceeding statement found in the series of commands , the assignment line assigning $ <var:R2> * <nat:1> $ as $ <var:R2>$ . This command redefines $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ as the condition $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <nat:1> \cdot <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . This is known to be sound by the assignment scheme of Hoare logic . Moving forward to the upcoming step in our code segment , we see the variable update line \verb | <var:R3> := <var:R3> * <nat:9> ; | . This advances the precondition $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <nat:1> \cdot <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ as $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <nat:1> \cdot <var:D> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . This is guaranteed through the assignment inference rule given by typical Hoare reasoning . Immediately after , we see the assignment line binding $ <var:R3$ into $ <var:i>$ . This command forwards $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <nat:1> \cdot <var:D> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:D> ^ <nat:3> \land <var:R0> = <nat:5> \} $ toward $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <nat:1> \cdot <var:D> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule found in usual Hoare logic . Advancing to the upcoming statement in the list of instructions , we see the variable update line \verb | <var:i> := <var:i> + <var:R2> | . This line takes the precondition $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R2> = <nat:1> \cdot <var:D> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> \} $ toward the condition $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> \} $ . This is shown through the assignment law given by typical Hoare logic . Moving forward to the proceeding command seen in the series of instructions , the variable update command defining $ <var:i> + <var:R1$ into $ <var:i>$ . This statement redefines $ \{ <var:U> = <var:D> \land <var:R1> = <nat:8> \cdot <var:D> \land <var:R0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> \} $ toward the condition $ \{ <var:U> = <var:D> \land <var:R0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:8> \cdot <var:D> \} $ . This is given through the assignment law in usual Hoare reasoning . Taking a look at the subsequent line found in our set of commands , we have the environment update statement \verb | <var:i> := <var:i> + <var:R0> | . This code takes the precondition $ \{ <var:U> = <var:D> \land <var:R0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:8> \cdot <var:D> \} $ toward $ \{ <var:U> = <var:D> \land <var:i> = <nat:9> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:8> \cdot <var:D> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <var:R1> := <var:U> ; <var:R2> := <var:R1> * <var:U> ; <var:R3> := <var:R2> * <var:U> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:9> ; <var:i> := <var:R3> <var:i> := <var:i> + <var:R2> <var:i> := <var:i> + <var:R1> <var:i> := <var:i> + <var:R0> {{ <var:i> = <nat:9> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <var:D> /\ <var:R2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <var:D> /\ <var:R2> = <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <var:D> /\ <var:R2> = <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <nat:8> * <var:D> /\ <var:R2> = <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <nat:8> * <var:D> /\ <var:R2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <nat:8> * <var:D> /\ <var:R2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:D> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <nat:8> * <var:D> /\ <var:R2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:R0> = <nat:5> /\ <var:i> = <nat:9> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R1> = <nat:8> * <var:D> /\ <var:R0> = <nat:5> /\ <var:i> = <nat:9> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:R0> = <nat:5> /\ <var:i> = <nat:9> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:i> = <nat:9> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 