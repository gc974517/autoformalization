\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:4> ; <var:T> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Allowing --- for some integers $ <var:p> $ --- that we have $ <var:S> = <var:p> $ before running the list of instructions it follows that we have $ <var:T> = <nat:4> $ when segment of code terminates . \end{theorem} \begin{proof} The proof of the program is shown with usual Hoare reasoning . Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:S> = <var:p> \} & <var:E0> := <nat:4> & \{ <var:S> = <var:p> \land <var:E0> = <nat:4> \} \end{tabular} Going forward , \[ \begin{tabular} {rcl} \{ <var:S> = <var:p> \} & <var:E0> := <nat:4> & \{ <var:S> = <var:p> \land <var:E0> = <nat:4> \} \end{tabular} This is deduced with the binding law obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:T> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:S> = <var:p> }} <def:poly> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 