\begin{document} \begin{theorem} We define a series of instructions such that \begin{verbatim} <var:l0> := <nat:2> ; <var:G> := <var:l0> \end{verbatim} Assume it to hold that $ <var:V> = <var:B> $ ( with some positive integer coefficients $ <var:B> $ ) prior to executing the series of commands it holds that we have $ <var:G> = <nat:2> $ after code has terminated . \end{theorem} \begin{proof} The flow of logic for our list of commands can be seen using usual Hoare techniques . Now , \verb | { <var:V> = <var:B> } <var:l0> := <nat:2> { <var:V> = <var:B> \land <var:l0> = <nat:2> } | . Going to the next step , we have \verb | { <var:V> = <var:B> } <var:l0> := <nat:2> { <var:V> = <var:B> \land <var:l0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:V> = <var:B> }} <var:l0> := <nat:2> ; <var:G> := <var:l0> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 