\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:4> ; <var:Z> := <nat:4> + <var:Z> * <var:w> ; <var:Z> := <var:Z> * <var:w> ; <var:Z> := <nat:3> + <var:Z> * <var:w> ; <var:Z> := <nat:4> + <var:Z> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Assuming that $ <var:w> = <var:D> $ ( letting positive coefficients $ <var:D> $ ) ahead of the evaluation of the set of commands , it must be that $ <var:Z> = <nat:4> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is shown through Hoare reasoning . Advancing to the proceeding pieces of code seen in the list of commands , \[ \begin{tabular} {rcl} \{ <var:w> = <var:D> \} & <var:Z> := <nat:4> & \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \} \\ \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \} & <var:Z> := <nat:4> + <var:Z> * <var:w> & \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \cdot <var:D> + <nat:4> \} \\ \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \cdot <var:D> + <nat:4> \} & <var:Z> := <var:Z> * <var:w> & \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + \} \end{tabular} Observing the next line contained in our code , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:D> \} & <var:Z> := <nat:4> & \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \} \end{tabular} Moving on to the proceeding command contained in our segment of code , \[ \begin{tabular} {rcl} \{ <var:w> = <var:D> \} & <var:Z> := <nat:4> & \{ <var:w> = <var:D> \land <var:Z> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:4> ; <var:Z> := <nat:4> + <var:Z> * <var:w> ; <var:Z> := <var:Z> * <var:w> ; <var:Z> := <nat:3> + <var:Z> * <var:w> ; <var:Z> := <nat:4> + <var:Z> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <def:poly> {{ <var:Z> = <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:Z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:Z> = <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:Z> = <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:Z> = <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:Z> = <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 