\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:9> ; <var:Q> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:C> = <var:K> $ before executing the set of instructions it holds that $ <var:Q> = <nat:9> $ . \end{theorem} \begin{proof} The application of Hoare reasoning gives : \begin{eqnarray} \{ <var:C> = <var:K> \} \\ <var:R0> := <nat:9> ; \\ \{ <var:C> = <var:K> \land <var:R0> = <nat:9> \} \\ <var:Q> := <var:R0> \\ \{ <var:C> = <var:K> \land <var:Q> = <nat:9> \} \end{eqnarray} Given the above , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:9> ; <var:Q> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <def:poly> {{ <var:Q> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Q> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 