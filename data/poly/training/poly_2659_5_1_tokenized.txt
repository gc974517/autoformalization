\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:M1> := <var:z> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:2> ; <var:Q> := <var:M1> <var:Q> := <var:Q> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:z> = <var:X> $ given positive integers $ <var:X> $ before running our program , it must be that we see $ <var:Q> = <nat:2> \cdot <var:X> + <nat:5> $ when list of instructions is done . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:z> = <var:X> \} \\ <var:M1> := <var:z> ; \\ \{ <var:z> = <var:X> \land <var:M1> = <var:X> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:z> = <var:X> \land <var:M1> = <var:X> \land <var:M0> = <nat:5> \} \\ <var:M1> := <var:M1> * <nat:2> ; \\ \{ <var:z> = <var:X> \land <var:M1> = <nat:2> \cdot <var:X> \land <var:M0> = <nat:5> \} \\ <var:Q> := <var:M1> \\ \{ <var:z> = <var:X> \land <var:M0> = <nat:5> \land <var:Q> = <nat:2> \cdot <var:X> \} \\ <var:Q> := <var:Q> + <var:M0> \\ \{ <var:z> = <var:X> \land <var:Q> = <nat:2> \cdot <var:X> + <nat:5> \} \end{eqnarray} Therefore , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:z> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:2> ; <var:Q> := <var:M1> <var:Q> := <var:Q> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:z> = <var:X> }} <def:poly> {{ <var:Q> = <nat:2> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:X> /\ <var:M1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:X> /\ <var:M1> = <var:X> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:X> /\ <var:M1> = <nat:2> * <var:X> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:X> /\ <var:M0> = <nat:5> /\ <var:Q> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:X> /\ <var:Q> = <nat:2> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 