\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:j0> := <nat:4> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:i> ; <var:Y> := <var:j1> ; <var:Y> := <var:Y> + <var:j0> \end{verbatim} Assuming it to hold that $ <var:i> = <var:L> $ prior to the evaluation of our code segment , then $ <var:Y> = <nat:1> * <var:L> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this series of commands is shown through the following decorated list of commands . \begin{eqnarray} \{ <var:i> = <var:L> \} \\ <var:j0> := <nat:4> ; \\ \{ <var:i> = <var:L> \land <var:j0> = <nat:4> \} \\ <var:j1> := <nat:1> ; \\ \{ <var:i> = <var:L> \land <var:j0> = <nat:4> \land <var:j1> = <nat:1> \} \\ <var:j1> := <var:j1> * <var:i> ; \\ \{ <var:i> = <var:L> \land <var:j0> = <nat:4> \land <var:j1> = <nat:1> * <var:L> \} \\ <var:Y> := <var:j1> ; \\ \{ <var:i> = <var:L> \land <var:j0> = <nat:4> \land <var:Y> = <nat:1> * <var:L> \} \\ <var:Y> := <var:Y> + <var:j0> \\ \{ <var:i> = <var:L> \land <var:Y> = <nat:1> * <var:L> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:i> = <var:L> }} <var:j0> := <nat:4> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:i> ; <var:Y> := <var:j1> ; <var:Y> := <var:Y> + <var:j0> {{ <var:Y> = <nat:1> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:j0> = <nat:4> /\ <var:Y> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:Y> = <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 