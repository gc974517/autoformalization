\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:P> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:P> ; <var:z2> := <var:z2> * <var:P> ; <var:G> := <var:z2> ; <var:G> := <var:G> + <var:z1> ; <var:G> := <var:G> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:P> = <var:Y> $ --- for every whole numbers $ <var:Y> $ --- before running the set of commands then $ <var:G> = <nat:1> \times <var:Y> ^ <nat:2> + <nat:8> \times <var:Y> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be shown by Hoare techniques . Advancing , we have the binding line \verb | <var:z0> := <nat:8> ; | . This statement forwards the condition $ \{ <var:P> = <var:Y> \} $ toward $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \} $ . Taking a look at the subsequent piece of code in the program , we see the variable binding line \verb | <var:z1> := <nat:8> ; | . This advances the precondition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \} $ into the postcondition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \} $ . This is ensured using the assignment law found in typical Hoare techniques . Advancing on , we have the variable assignmet line giving $ <var:z1> * <var:P> $ toward $ <var:z1>$ . This line transfers the condition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \} $ toward the condition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \} $ . This is known to be sound with the assignment scheme defined in Hoare techniques . Advancing on , we have the binding line assigning $ <nat:1> $ toward $ <var:z2>$ . This transfers $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \} $ toward the condition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:z2> = <nat:1> \} $ . Moving on to the following piece of code in the set of commands , we see the binding code \verb | <var:z2> := <var:z2> * <var:P> ; | . This takes $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:z2> = <nat:1> \} $ as $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:z2> = <nat:1> * <var:Y> \} $ . This is guaranteed with the assignment rule obtained from standard Hoare logic . Moving forward to the upcoming line of code in the series of instructions , the variable update line yielding $ <var:z2> * <var:P> $ to $ <var:z2>$ . This forwards the condition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:z2> = <nat:1> * <var:Y> \} $ toward the postcondition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:z2> = <nat:1> * <var:Y> ^ <nat:2> \} $ . Looking at the upcoming line contained in the code , we see the environment update line \verb | <var:G> := <var:z2> ; | . This line redefines the precondition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:z2> = <nat:1> * <var:Y> ^ <nat:2> \} $ into the postcondition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:G> = <nat:1> * <var:Y> ^ <nat:2> \} $ . Shifting focus toward the proceeding statement seen in our list of commands , we have the variable assignmet code \verb | <var:G> := <var:G> + <var:z1> ; | . This statement redefines $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> * <var:Y> \land <var:G> = <nat:1> * <var:Y> ^ <nat:2> \} $ as the condition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:G> = <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> \} $ . This is guaranteed through the assignment law given by standard Hoare techniques . Moving forward to the upcoming step found in the code segment , we see the binding statement letting $ <var:G> + <var:z0$ toward $ <var:G>$ . This command transfers the precondition $ \{ <var:P> = <var:Y> \land <var:z0> = <nat:8> \land <var:G> = <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> \} $ as $ \{ <var:P> = <var:Y> \land <var:G> = <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:8> \} $ . This is known to be sound by the assignment law defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:8> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:P> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:P> ; <var:z2> := <var:z2> * <var:P> ; <var:G> := <var:z2> ; <var:G> := <var:G> + <var:z1> ; <var:G> := <var:G> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:P> = <var:Y> }} <def:poly> {{ <var:G> = <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:Y> /\ <var:z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:Y> /\ <var:z2> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:Y> /\ <var:z2> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:Y> /\ <var:G> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:z0> = <nat:8> /\ <var:G> = <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Y> /\ <var:G> = <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 