\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:y> ; <var:U2> := <var:U1> * <var:y> ; <var:U3> := <var:U2> * <var:y> ; <var:U0> := <nat:4> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:4> ; <var:U3> := <var:U3> * <nat:1> ; <var:S> := <var:U3> <var:S> := <var:S> + <var:U2> <var:S> := <var:S> + <var:U1> <var:S> := <var:S> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Assuming , with some positive coefficients $ <var:j> $ , that $ <var:y> = <var:j> $ before executing this set of commands it follows that $ <var:S> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> $ once list of commands terminates . \end{theorem} \begin{proof} Using typical Hoare logic produces : \begin{eqnarray} \{ <var:y> = <var:j> \} \\ <var:U1> := <var:y> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <var:j> \} \\ <var:U2> := <var:U1> * <var:y> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <var:j> \land <var:U2> = <var:j> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:y> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <var:j> \land <var:U2> = <var:j> ^ <nat:2> \land <var:U3> = <var:j> ^ <nat:3> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <var:j> \land <var:U2> = <var:j> ^ <nat:2> \land <var:U3> = <var:j> ^ <nat:3> \land <var:U0> = <nat:4> \} \\ <var:U1> := <var:U1> * <nat:1> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <nat:1> \cdot <var:j> \land <var:U2> = <var:j> ^ <nat:2> \land <var:U3> = <var:j> ^ <nat:3> \land <var:U0> = <nat:4> \} \\ <var:U2> := <var:U2> * <nat:4> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <nat:1> \cdot <var:j> \land <var:U2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:U3> = <var:j> ^ <nat:3> \land <var:U0> = <nat:4> \} \\ <var:U3> := <var:U3> * <nat:1> ; \\ \{ <var:y> = <var:j> \land <var:U1> = <nat:1> \cdot <var:j> \land <var:U2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:U3> = <nat:1> \cdot <var:j> ^ <nat:3> \land <var:U0> = <nat:4> \} \\ <var:S> := <var:U3> \\ \{ <var:y> = <var:j> \land <var:U1> = <nat:1> \cdot <var:j> \land <var:U2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:U0> = <nat:4> \land <var:S> = <nat:1> \cdot <var:j> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:U2> \\ \{ <var:y> = <var:j> \land <var:U1> = <nat:1> \cdot <var:j> \land <var:U0> = <nat:4> \land <var:S> = <nat:1> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:U1> \\ \{ <var:y> = <var:j> \land <var:U0> = <nat:4> \land <var:S> = <nat:1> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> \} \\ <var:S> := <var:S> + <var:U0> \\ \{ <var:y> = <var:j> \land <var:S> = <nat:1> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:4> \} \end{eqnarray} Hence , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:y> ; <var:U2> := <var:U1> * <var:y> ; <var:U3> := <var:U2> * <var:y> ; <var:U0> := <nat:4> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:4> ; <var:U3> := <var:U3> * <nat:1> ; <var:S> := <var:U3> <var:S> := <var:S> + <var:U2> <var:S> := <var:S> + <var:U1> <var:S> := <var:S> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:y> = <var:j> }} <def:poly> {{ <var:S> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <var:j> /\ <var:U2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <var:j> /\ <var:U2> = <var:j> ^ <nat:2> /\ <var:U3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <var:j> /\ <var:U2> = <var:j> ^ <nat:2> /\ <var:U3> = <var:j> ^ <nat:3> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <nat:1> * <var:j> /\ <var:U2> = <var:j> ^ <nat:2> /\ <var:U3> = <var:j> ^ <nat:3> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <nat:1> * <var:j> /\ <var:U2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:U3> = <var:j> ^ <nat:3> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <nat:1> * <var:j> /\ <var:U2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:j> ^ <nat:3> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <nat:1> * <var:j> /\ <var:U2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:U0> = <nat:4> /\ <var:S> = <nat:1> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U1> = <nat:1> * <var:j> /\ <var:U0> = <nat:4> /\ <var:S> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:U0> = <nat:4> /\ <var:S> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:S> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 