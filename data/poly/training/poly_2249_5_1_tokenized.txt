\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:a1> := <var:A> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:8> ; <var:G> := <var:a1> <var:G> := <var:G> + <var:a0> \end{verbatim} Assume it to hold that $ <var:A> = <var:v> $ prior to evaluating the program then we see $ <var:G> = <nat:8> \cdot <var:v> + <nat:2> $ after code is done executing . \end{theorem} \begin{proof} See that this decorated series of instructions . \begin{eqnarray} \{ <var:A> = <var:v> \} \\ <var:a1> := <var:A> ; \\ \{ <var:A> = <var:v> \land <var:a1> = <var:v> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:A> = <var:v> \land <var:a1> = <var:v> \land <var:a0> = <nat:2> \} \\ <var:a1> := <var:a1> * <nat:8> ; \\ \{ <var:A> = <var:v> \land <var:a1> = <nat:8> \cdot <var:v> \land <var:a0> = <nat:2> \} \\ <var:G> := <var:a1> \\ \{ <var:A> = <var:v> \land <var:a0> = <nat:2> \land <var:G> = <nat:8> \cdot <var:v> \} \\ <var:G> := <var:G> + <var:a0> \\ \{ <var:A> = <var:v> \land <var:G> = <nat:8> \cdot <var:v> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:A> = <var:v> }} <var:a1> := <var:A> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:8> ; <var:G> := <var:a1> <var:G> := <var:G> + <var:a0> {{ <var:G> = <nat:8> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:a1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:a1> = <var:v> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:a1> = <nat:8> * <var:v> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:a0> = <nat:2> /\ <var:G> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:G> = <nat:8> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 