\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I1> := <var:k> ; <var:I2> := <var:I1> * <var:k> ; <var:I3> := <var:I2> * <var:k> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:1> ; <var:I3> := <var:I3> * <nat:4> ; <var:b> := <var:I3> <var:b> := <var:b> + <var:I2> <var:b> := <var:b> + <var:I1> <var:b> := <var:b> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:k> = <var:L> $ before the execution of this series of commands it must be that $ <var:b> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:9> $ once list of instructions has exited . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:k> = <var:L> \} \\ <var:I1> := <var:k> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <var:L> \} \\ <var:I2> := <var:I1> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <var:L> \land <var:I2> = <var:L> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <var:L> \land <var:I2> = <var:L> ^ <nat:2> \land <var:I3> = <var:L> ^ <nat:3> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <var:L> \land <var:I2> = <var:L> ^ <nat:2> \land <var:I3> = <var:L> ^ <nat:3> \land <var:I0> = <nat:9> \} \end{eqnarray} Furthering the evaluation of the code gives us : \begin{eqnarray} <var:I1> := <var:I1> * <nat:4> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <nat:4> \times <var:L> \land <var:I2> = <var:L> ^ <nat:2> \land <var:I3> = <var:L> ^ <nat:3> \land <var:I0> = <nat:9> \} \\ <var:I2> := <var:I2> * <nat:1> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <nat:4> \times <var:L> \land <var:I2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:I3> = <var:L> ^ <nat:3> \land <var:I0> = <nat:9> \} \\ <var:I3> := <var:I3> * <nat:4> ; \\ \{ <var:k> = <var:L> \land <var:I1> = <nat:4> \times <var:L> \land <var:I2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:I3> = <nat:4> \times <var:L> ^ <nat:3> \land <var:I0> = <nat:9> \} \\ <var:b> := <var:I3> \\ \{ <var:k> = <var:L> \land <var:I1> = <nat:4> \times <var:L> \land <var:I2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:I0> = <nat:9> \land <var:b> = <nat:4> \times <var:L> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:I2> \\ \{ <var:k> = <var:L> \land <var:I1> = <nat:4> \times <var:L> \land <var:I0> = <nat:9> \land <var:b> = <nat:4> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:I1> \\ \{ <var:k> = <var:L> \land <var:I0> = <nat:9> \land <var:b> = <nat:4> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> \} \\ <var:b> := <var:b> + <var:I0> \\ \{ <var:k> = <var:L> \land <var:b> = <nat:4> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:9> \} \end{eqnarray} As a result , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:k> ; <var:I2> := <var:I1> * <var:k> ; <var:I3> := <var:I2> * <var:k> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:1> ; <var:I3> := <var:I3> * <nat:4> ; <var:b> := <var:I3> <var:b> := <var:b> + <var:I2> <var:b> := <var:b> + <var:I1> <var:b> := <var:b> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:k> = <var:L> }} <def:poly> {{ <var:b> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <var:L> /\ <var:I2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <var:L> /\ <var:I2> = <var:L> ^ <nat:2> /\ <var:I3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <var:L> /\ <var:I2> = <var:L> ^ <nat:2> /\ <var:I3> = <var:L> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <nat:4> * <var:L> /\ <var:I2> = <var:L> ^ <nat:2> /\ <var:I3> = <var:L> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <nat:4> * <var:L> /\ <var:I2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:I3> = <var:L> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <nat:4> * <var:L> /\ <var:I2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:I3> = <nat:4> * <var:L> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <nat:4> * <var:L> /\ <var:I2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:I0> = <nat:9> /\ <var:b> = <nat:4> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I1> = <nat:4> * <var:L> /\ <var:I0> = <nat:9> /\ <var:b> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:I0> = <nat:9> /\ <var:b> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:b> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 