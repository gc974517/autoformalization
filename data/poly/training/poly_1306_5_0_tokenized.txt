\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:9> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:Z> ; <var:D> := <var:z1> ; <var:D> := <var:D> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:Z> = <var:O> $ , with some $ <var:O> $ , before interpreting this set of commands it follows that we see $ <var:D> = <nat:2> * <var:O> + <nat:9> $ once code has exited . \end{theorem} \begin{proof} The proof of the list of instructions is clear through usual Hoare techniques . Honing in on the proceeding command seen in our list of instructions , the variable assignmet line \verb | <var:z0> := <nat:9> ; | . This statement moves $ \{ <var:Z> = <var:O> \} $ into the postcondition $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \} $ . This is shown through the assignment scheme obtained from typical Hoare reasoning . Observing the next piece of code seen in our series of commands , the binding command assigning $ <nat:2> $ to $ <var:z1>$ . This forwards the precondition $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \} $ toward $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \land <var:z1> = <nat:2> \} $ . Paying attention to the upcoming line in the series of commands , we have the assignment command \verb | <var:z1> := <var:z1> * <var:Z> ; | . This statement advances $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \land <var:z1> = <nat:2> \} $ as the postcondition $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \land <var:z1> = <nat:2> \times <var:O> \} $ . Moving forward , the variable assignmet code letting $ <var:z1> $ toward $ <var:D>$ . This takes the precondition $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \land <var:z1> = <nat:2> \times <var:O> \} $ to the postcondition $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \land <var:D> = <nat:2> \times <var:O> \} $ . This is ensured with the assignment law obtained from standard Hoare techniques . Moving on to the subsequent piece of code seen in our segment of code , we see the command letting $ <var:D> + <var:z0$ into $ <var:D>$ . This takes the precondition $ \{ <var:Z> = <var:O> \land <var:z0> = <nat:9> \land <var:D> = <nat:2> \times <var:O> \} $ toward the postcondition $ \{ <var:Z> = <var:O> \land <var:D> = <nat:2> \times <var:O> + <nat:9> \} $ . This is shown to be logically sound by the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:Z> ; <var:D> := <var:z1> ; <var:D> := <var:D> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Z> = <var:O> }} <def:poly> {{ <var:D> = <nat:2> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:z0> = <nat:9> /\ <var:D> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:D> = <nat:2> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 