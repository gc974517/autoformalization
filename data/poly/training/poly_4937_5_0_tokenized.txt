\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:Q> ; <var:P> := <var:r1> ; <var:P> := <var:P> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Allowing $ <var:Q> = <var:B> $ ( for all natural numbers $ <var:B> $ ) prior to running our list of instructions it must be that we see $ <var:P> = <nat:3> \cdot <var:B> + <nat:9> $ . \end{theorem} \begin{proof} See that the below decorated code segment . \begin{eqnarray} \{ <var:Q> = <var:B> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:Q> = <var:B> \land <var:r0> = <nat:9> \} \\ <var:r1> := <nat:3> ; \\ \{ <var:Q> = <var:B> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \} \\ <var:r1> := <var:r1> * <var:Q> ; \\ \{ <var:Q> = <var:B> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> * <var:B> \} \\ <var:P> := <var:r1> ; \\ \{ <var:Q> = <var:B> \land <var:r0> = <nat:9> \land <var:P> = <nat:3> * <var:B> \} \\ <var:P> := <var:P> + <var:r0> \\ \{ <var:Q> = <var:B> \land <var:P> = <nat:3> * <var:B> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:9> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:Q> ; <var:P> := <var:r1> ; <var:P> := <var:P> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Q> = <var:B> }} <def:poly> {{ <var:P> = <nat:3> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:r0> = <nat:9> /\ <var:P> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:P> = <nat:3> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 