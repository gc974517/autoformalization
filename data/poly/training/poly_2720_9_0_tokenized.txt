\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:8> ; <var:B1> := <nat:3> ; <var:B1> := <var:B1> * <var:J> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:J> ; <var:B2> := <var:B2> * <var:J> ; <var:b> := <var:B2> ; <var:b> := <var:b> + <var:B1> ; <var:b> := <var:b> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given all natural coefficients $ <var:G> $ ) that $ <var:J> = <var:G> $ before the execution of the program it must be that $ <var:b> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:8> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for this program can be demonstrated by typical Hoare techniques . Now , we have the variable update code \verb | <var:B0> := <nat:8> ; | . This line redefines the condition $ \{ <var:J> = <var:G> \} $ toward the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \} $ . This is ensured by the assignment inference rule found in standard Hoare reasoning . Advancing to the subsequent statement found in our program , the assignment code giving $ <nat:3> $ into $ <var:B1>$ . This line advances $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \} $ as the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \} $ . Further , we have the code \verb | <var:B1> := <var:B1> * <var:J> ; | . This moves the precondition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \} $ toward the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \} $ . This is known to be sound through the assignment rule in usual Hoare logic . Immediately after , the variable binding command yielding $ <nat:3> $ toward $ <var:B2>$ . This line advances $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \} $ toward the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:B2> = <nat:3> \} $ . Shifting focus toward the proceeding step contained in our series of commands , the variable binding line \verb | <var:B2> := <var:B2> * <var:J> ; | . This line moves the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:B2> = <nat:3> \} $ into $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:B2> = <nat:3> \cdot <var:G> \} $ . This is known to be sound through the assignment scheme in usual Hoare techniques . Taking another step toward the following step found in our code segment , we see the environment update line letting $ <var:B2> * <var:J> $ toward $ <var:B2>$ . This takes the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:B2> = <nat:3> \cdot <var:G> \} $ as $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:B2> = <nat:3> \cdot <var:G> ^ <nat:2> \} $ . Immediately after , the assignment code \verb | <var:b> := <var:B2> ; | . This redefines $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:B2> = <nat:3> \cdot <var:G> ^ <nat:2> \} $ to $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:b> = <nat:3> \cdot <var:G> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule from Hoare logic . Observing the proceeding piece of code contained in the code segment , we see the variable assignmet line \verb | <var:b> := <var:b> + <var:B1> ; | . This statement transfers $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:B1> = <nat:3> \cdot <var:G> \land <var:b> = <nat:3> \cdot <var:G> ^ <nat:2> \} $ to the postcondition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:b> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> \} $ . This is sound by the assignment rule defined by typical Hoare reasoning . Moving forward to the next line contained in our code , we see the variable assignmet command yielding $ <var:b> + <var:B0$ to $ <var:b>$ . This statement takes the condition $ \{ <var:J> = <var:G> \land <var:B0> = <nat:8> \land <var:b> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> \} $ to the condition $ \{ <var:J> = <var:G> \land <var:b> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:8> \} $ . This is ensured using the assignment rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:8> ; <var:B1> := <nat:3> ; <var:B1> := <var:B1> * <var:J> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:J> ; <var:B2> := <var:B2> * <var:J> ; <var:b> := <var:B2> ; <var:b> := <var:b> + <var:B1> ; <var:b> := <var:b> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:J> = <var:G> }} <def:poly> {{ <var:b> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:3> * <var:G> /\ <var:B2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:3> * <var:G> /\ <var:B2> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:3> * <var:G> /\ <var:B2> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:3> * <var:G> /\ <var:b> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:B0> = <nat:8> /\ <var:b> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:b> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 