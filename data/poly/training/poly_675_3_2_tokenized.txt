\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:x> := <nat:2> ; <var:x> := <var:x> * <var:f> ; <var:x> := <nat:1> + <var:x> * <var:f> \end{verbatim} Allow --- given any positive coefficients $ <var:M> $ --- it to be that $ <var:f> = <var:M> $ ahead of running the code segment it holds that $ <var:x> = <nat:2> \cdot <var:M> ^ <nat:2> + <nat:1> $ when program executes . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:M> \} \\ <var:x> := <nat:2> ; \\ \{ <var:f> = <var:M> \land <var:x> = <nat:2> \} \\ <var:x> := <var:x> * <var:f> ; \\ \{ <var:f> = <var:M> \land <var:x> = <nat:2> * <var:M> + \} \\ <var:x> := <nat:1> + <var:x> * <var:f> \\ \{ <var:f> = <var:M> \land <var:x> = <nat:2> * <var:M> ^ <nat:2> + <nat:1> \} \end{eqnarray} Hence , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <var:x> := <nat:2> ; <var:x> := <var:x> * <var:f> ; <var:x> := <nat:1> + <var:x> * <var:f> {{ <var:x> = <nat:2> * <var:M> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:x> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:x> = <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:x> = <nat:2> * <var:M> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 