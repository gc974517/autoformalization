\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:4> ; <var:D> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:E> = <var:S> $ ( given some $ <var:S> $ ) before executing our list of instructions then $ <var:D> = <nat:4> $ once series of commands executes . \end{theorem} \begin{proof} Applying typical Hoare techniques yields : \begin{eqnarray} \{ <var:E> = <var:S> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:E> = <var:S> \land <var:H0> = <nat:4> \} \\ <var:D> := <var:H0> \\ \{ <var:E> = <var:S> \land <var:D> = <nat:4> \} \end{eqnarray} Thusly , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:4> ; <var:D> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:E> = <var:S> }} <def:poly> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 