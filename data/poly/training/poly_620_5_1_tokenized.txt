\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:S> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:3> ; <var:D> := <var:T1> <var:D> := <var:D> + <var:T0> \end{verbatim} Assuming given all positive numbers $ <var:N> $ it to be that $ <var:S> = <var:N> $ before evaluating our set of commands then we see $ <var:D> = <nat:3> \cdot <var:N> + <nat:8> $ . \end{theorem} \begin{proof} The argument for the program is demonstrated through Hoare reasoning . Moving on , we have \verb | { <var:S> = <var:N> } <var:T1> := <var:S> { <var:S> = <var:N> \land <var:T1> = <var:N> } | . This is known to be sound with the environment update rule found in standard Hoare reasoning . Stepping forward , we have \verb | { <var:S> = <var:N> } <var:T1> := <var:S> { <var:S> = <var:N> \land <var:T1> = <var:N> } | , \verb | { <var:S> = <var:N> \land <var:T1> = <var:N> } <var:T0> := <nat:8> { <var:S> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:8> } | , \verb | { <var:S> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:8> } <var:T1> := <var:T1> * <nat:3> { <var:S> = <var:N> \land <var:T1> = <nat:3> \cdot <var:N> \land <var:T0> = <nat:8> } | and \verb | { <var:S> = <var:N> \land <var:T1> = <nat:3> \cdot <var:N> \land <var:T0> = <nat:8> } <var:D> := <var:T1{ <var:S> = <var:N> \land <var:T0> = <nat:8> \land <var:D> = <nat:3> \cdot <var:N> } | . This is ensured by the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:S> = <var:N> }} <var:T1> := <var:S> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:3> ; <var:D> := <var:T1> <var:D> := <var:D> + <var:T0> {{ <var:D> = <nat:3> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:T1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:T1> = <var:N> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:T1> = <nat:3> * <var:N> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:T0> = <nat:8> /\ <var:D> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:D> = <nat:3> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 