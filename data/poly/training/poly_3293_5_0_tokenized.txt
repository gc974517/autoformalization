\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:e> ; <var:I> := <var:L1> ; <var:I> := <var:I> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:e> = <var:A> $ before executing our series of commands , it must be that we see $ <var:I> = <nat:8> * <var:A> + <nat:2> $ when code segment executes . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:e> = <var:A> \} \\ <var:L0> := <nat:2> ; \\ \{ <var:e> = <var:A> \land <var:L0> = <nat:2> \} \\ <var:L1> := <nat:8> ; \\ \{ <var:e> = <var:A> \land <var:L0> = <nat:2> \land <var:L1> = <nat:8> \} \\ <var:L1> := <var:L1> * <var:e> ; \\ \{ <var:e> = <var:A> \land <var:L0> = <nat:2> \land <var:L1> = <nat:8> * <var:A> \} \\ <var:I> := <var:L1> ; \\ \{ <var:e> = <var:A> \land <var:L0> = <nat:2> \land <var:I> = <nat:8> * <var:A> \} \\ <var:I> := <var:I> + <var:L0> \\ \{ <var:e> = <var:A> \land <var:I> = <nat:8> * <var:A> + <nat:2> \} \end{eqnarray} Thus , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:2> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:e> ; <var:I> := <var:L1> ; <var:I> := <var:I> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:e> = <var:A> }} <def:poly> {{ <var:I> = <nat:8> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:L0> = <nat:2> /\ <var:I> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:I> = <nat:8> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 