\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <nat:4> + <var:Z> * <var:a> \end{verbatim} Assuming that $ <var:a> = <var:g> $ ( given integers $ <var:g> $ ) before the execution of our series of commands , it holds that we have $ <var:Z> = <nat:1> * <var:g> + <nat:4> $ after program finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be accomplished using Hoare techniques . After , we have the binding command yielding $ <nat:1> $ toward $ <var:Z>$ . This transfers the precondition $ \{ <var:a> = <var:g> \} $ toward $ \{ <var:a> = <var:g> \land <var:Z> = <nat:1> \} $ . This is ensured by the assignment inference rule obtained from Hoare reasoning . Shifting focus toward the proceeding line seen in our program , we have the command \verb | <var:Z> := <nat:4> + <var:Z> * <var:a> | . This forwards the precondition $ \{ <var:a> = <var:g> \land <var:Z> = <nat:1> \} $ as the postcondition $ \{ <var:a> = <var:g> \land <var:Z> = <nat:1> * <var:g> + <nat:4> \} $ . This is deduced through the assignment law given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:a> = <var:g> }} <var:Z> := <nat:1> ; <var:Z> := <nat:4> + <var:Z> * <var:a> {{ <var:Z> = <nat:1> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z> = <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 