\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:X> ; <var:g2> := <var:g1> * <var:X> ; <var:g3> := <var:g2> * <var:X> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:g2> := <var:g2> * <nat:4> ; <var:g3> := <var:g3> * <nat:4> ; <var:A> := <var:g3> <var:A> := <var:A> + <var:g2> <var:A> := <var:A> + <var:g1> <var:A> := <var:A> + <var:g0> \end{verbatim} Allowing $ <var:X> = <var:C> $ before interpreting our series of instructions , it holds that we see $ <var:A> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the code segment can be shown using typical Hoare reasoning . After , \[ \begin{tabular} {rcl} \{ <var:X> = <var:C> \} & <var:g1> := <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <var:C> \} & <var:g2> := <var:g1> * <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \} & <var:g3> := <var:g2> * <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \} \end{tabular} This is ensured through the rule of standard Hoare logic . Taking a look at the next commands seen in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:X> = <var:C> \} & <var:g1> := <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <var:C> \} & <var:g2> := <var:g1> * <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \} & <var:g3> := <var:g2> * <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \} & <var:g0> := <nat:2> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} & <var:g1> := <var:g1> * <nat:3> & \{ <var:X> = <var:C> \land <var:g1> = <nat:3> * <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <nat:3> * <var:C> \land <var:g2> = <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} & <var:g2> := <var:g2> * <nat:4> & \{ <var:X> = <var:C> \land <var:g1> = <nat:3> * <var:C> \land <var:g2> = <nat:4> * <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:X> = <var:C> \land <var:g1> = <nat:3> * <var:C> \land <var:g2> = <nat:4> * <var:C> ^ <nat:2> \land <var:g3> = <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} & <var:g3> := <var:g3> * <nat:4> & \{ <var:X> = <var:C> \land <var:g1> = <nat:3> * <var:C> \land <var:g2> = <nat:4> * <var:C> ^ <nat:2> \land <var:g3> = <nat:4> * <var:C> ^ <nat:3> \land <var:g0> = <nat:2> \} \end{tabular} Moving on to the subsequent command contained in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:X> = <var:C> \} & <var:g1> := <var:X> & \{ <var:X> = <var:C> \land <var:g1> = <var:C> \} \end{tabular} This is shown to be logically sound with the variable assignmet inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <var:g1> := <var:X> ; <var:g2> := <var:g1> * <var:X> ; <var:g3> := <var:g2> * <var:X> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:g2> := <var:g2> * <nat:4> ; <var:g3> := <var:g3> * <nat:4> ; <var:A> := <var:g3> <var:A> := <var:A> + <var:g2> <var:A> := <var:A> + <var:g1> <var:A> := <var:A> + <var:g0> {{ <var:A> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <var:C> /\ <var:g2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <var:C> /\ <var:g2> = <var:C> ^ <nat:2> /\ <var:g3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <var:C> /\ <var:g2> = <var:C> ^ <nat:2> /\ <var:g3> = <var:C> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <nat:3> * <var:C> /\ <var:g2> = <var:C> ^ <nat:2> /\ <var:g3> = <var:C> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <nat:3> * <var:C> /\ <var:g2> = <nat:4> * <var:C> ^ <nat:2> /\ <var:g3> = <var:C> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <nat:3> * <var:C> /\ <var:g2> = <nat:4> * <var:C> ^ <nat:2> /\ <var:g3> = <nat:4> * <var:C> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <nat:3> * <var:C> /\ <var:g2> = <nat:4> * <var:C> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:A> = <nat:4> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g1> = <nat:3> * <var:C> /\ <var:g0> = <nat:2> /\ <var:A> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g0> = <nat:2> /\ <var:A> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:A> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 