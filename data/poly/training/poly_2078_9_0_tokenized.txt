\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:2> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:L> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:L> ; <var:b2> := <var:b2> * <var:L> ; <var:Z> := <var:b2> ; <var:Z> := <var:Z> + <var:b1> ; <var:Z> := <var:Z> + <var:b0> \end{verbatim} Allow that we have $ <var:L> = <var:X> $ , given some positive integer coefficients $ <var:X> $ , ahead of the evaluation of this code , it holds that we see $ <var:Z> = <nat:2> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be accomplished using typical Hoare techniques . Moving on to the proceeding pieces of code found in our series of commands , we see \verb | { <var:L> = <var:X> } <var:b0> := <nat:2> { <var:L> = <var:X> \land <var:b0> = <nat:2> } | , \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> } <var:b1> := <nat:3> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> } | , \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> } <var:b1> := <var:b1> * <var:L> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> } | , \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> } <var:b2> := <nat:2> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:b2> = <nat:2> } | , \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:b2> = <nat:2> } <var:b2> := <var:b2> * <var:L> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:b2> = <nat:2> \times <var:X> } | , \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:b2> = <nat:2> \times <var:X> } <var:b2> := <var:b2> * <var:L> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:b2> = <nat:2> \times <var:X> ^ <nat:2> } | , \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:b2> = <nat:2> \times <var:X> ^ <nat:2> } <var:Z> := <var:b2> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:Z> = <nat:2> \times <var:X> ^ <nat:2> } | and \verb | { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:b1> = <nat:3> \times <var:X> \land <var:Z> = <nat:2> \times <var:X> ^ <nat:2> } <var:Z> := <var:Z> + <var:b1> { <var:L> = <var:X> \land <var:b0> = <nat:2> \land <var:Z> = <nat:2> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> } | . This is deduced with the environment update scheme given in usual Hoare reasoning . Looking at the subsequent bit of code found in the code segment , \verb | { <var:L> = <var:X> } <var:b0> := <nat:2> { <var:L> = <var:X> \land <var:b0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:L> = <var:X> }} <var:b0> := <nat:2> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:L> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:L> ; <var:b2> := <var:b2> * <var:L> ; <var:Z> := <var:b2> ; <var:Z> := <var:Z> + <var:b1> ; <var:Z> := <var:Z> + <var:b0> {{ <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:3> * <var:X> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:3> * <var:X> /\ <var:b2> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:3> * <var:X> /\ <var:b2> = <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:3> * <var:X> /\ <var:Z> = <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:b0> = <nat:2> /\ <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 