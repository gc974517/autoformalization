\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J2> := <nat:1> ; <var:J2> := <var:J2> * <var:T> ; <var:J2> := <var:J2> * <var:T> ; <var:J3> := <nat:4> ; <var:J3> := <var:J3> * <var:T> ; <var:J3> := <var:J3> * <var:T> ; <var:J3> := <var:J3> * <var:T> ; <var:U> := <var:J3> ; <var:U> := <var:U> + <var:J2> ; <var:U> := <var:U> + <var:J0> \end{verbatim} Given that $ <var:T> = <var:e> $ ( given any whole numbers $ <var:e> $ ) before evaluating our segment of code it must be that we see $ <var:U> = <nat:4> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> $ when list of commands terminates . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is given using Hoare logic . Moving on to the next step , the variable binding statement giving $ <nat:1> $ as $ <var:J0>$ . This code moves the precondition $ \{ <var:T> = <var:e> \} $ to $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \} $ . This is rigorously given with the assignment rule given by Hoare reasoning . Moving on to the next step , the command defining $ <nat:1> $ into $ <var:J2>$ . This command redefines the precondition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \} $ toward the condition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> \} $ . This is sound by the assignment rule given in usual Hoare reasoning . Moving on , we see the variable update line letting $ <var:J2> * <var:T> $ as $ <var:J2>$ . This code advances $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> \} $ toward $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> \} $ . This is deduced through the assignment rule defined in typical Hoare reasoning . Keeping momentum , the variable binding statement \verb | <var:J2> := <var:J2> * <var:T> ; | . This code takes $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> \} $ to the postcondition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \} $ . This is rigorously given using the assignment scheme given in Hoare logic . Going forward , the variable binding line \verb | <var:J3> := <nat:4> ; | . This redefines the condition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \} $ as the condition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> \} $ . Now , we have the variable assignmet line \verb | <var:J3> := <var:J3> * <var:T> ; | . This statement transfers $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> \} $ to the condition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> * <var:e> \} $ . This is ensured with the assignment scheme obtained from Hoare techniques . Focusing on the proceeding command found in our set of commands , we have the variable binding line defining $ <var:J3> * <var:T> $ toward $ <var:J3>$ . This transfers the condition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> * <var:e> \} $ into $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> * <var:e> ^ <nat:2> \} $ . Further , we see the environment update command \verb | <var:J3> := <var:J3> * <var:T> ; | . This line moves the precondition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> * <var:e> ^ <nat:2> \} $ toward the postcondition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> * <var:e> ^ <nat:3> \} $ . Moving forward to the upcoming line found in the list of instructions , the variable update code yielding $ <var:J3> $ as $ <var:U>$ . This command forwards the condition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:J3> = <nat:4> * <var:e> ^ <nat:3> \} $ to $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:U> = <nat:4> * <var:e> ^ <nat:3> \} $ . Advancing to the next line of code found in the series of instructions , we see the variable assignmet command yielding $ <var:U> + <var:J2> $ into $ <var:U>$ . This line advances the precondition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:J2> = <nat:1> * <var:e> ^ <nat:2> \land <var:U> = <nat:4> * <var:e> ^ <nat:3> \} $ as $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:U> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> \} $ . Taking another step toward the next bit of code found in the series of instructions , we see the environment update command binding $ <var:U> + <var:J0$ toward $ <var:U>$ . This command redefines the precondition $ \{ <var:T> = <var:e> \land <var:J0> = <nat:1> \land <var:U> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> \} $ to the postcondition $ \{ <var:T> = <var:e> \land <var:U> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> \} $ . This is deduced using the assignment law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:T> = <var:e> }} <var:J0> := <nat:1> ; <var:J2> := <nat:1> ; <var:J2> := <var:J2> * <var:T> ; <var:J2> := <var:J2> * <var:T> ; <var:J3> := <nat:4> ; <var:J3> := <var:J3> * <var:T> ; <var:J3> := <var:J3> * <var:T> ; <var:J3> := <var:J3> * <var:T> ; <var:U> := <var:J3> ; <var:U> := <var:U> + <var:J2> ; <var:U> := <var:U> + <var:J0> {{ <var:U> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:J3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:U> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:J0> = <nat:1> /\ <var:U> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:U> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 