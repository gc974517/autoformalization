\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:x> ; <var:b> := <var:Y1> ; <var:b> := <var:b> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:x> = <var:k> $ for every $ <var:k> \in \mathbb{N} $ ahead of evaluating our set of commands it follows that we have $ <var:b> = <nat:4> * <var:k> + <nat:7> $ . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:k> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:x> = <var:k> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <nat:4> ; \\ \{ <var:x> = <var:k> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <var:x> ; \\ \{ <var:x> = <var:k> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> * <var:k> \} \\ <var:b> := <var:Y1> ; \\ \{ <var:x> = <var:k> \land <var:Y0> = <nat:7> \land <var:b> = <nat:4> * <var:k> \} \\ <var:b> := <var:b> + <var:Y0> \\ \{ <var:x> = <var:k> \land <var:b> = <nat:4> * <var:k> + <nat:7> \} \end{eqnarray} As a consequence , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:7> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:x> ; <var:b> := <var:Y1> ; <var:b> := <var:b> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:x> = <var:k> }} <def:poly> {{ <var:b> = <nat:4> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:Y0> = <nat:7> /\ <var:b> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:b> = <nat:4> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 