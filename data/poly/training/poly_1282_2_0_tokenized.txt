\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:2> ; <var:c> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Assume it to be that $ <var:V> = <var:j> $ given some positive coefficients $ <var:j> $ ahead of the evaluation of the set of commands it follows that we see $ <var:c> = <nat:2> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The method of proof for this set of commands can be done using Hoare reasoning . Stepping through , we have \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:U0> := <nat:2> \, \{ <var:V> = <var:j> \land <var:U0> = <nat:2> \} \\ \{ <var:V> = <var:j> \land <var:U0> = <nat:2> \} \, <var:c> := <var:U0\, \{ <var:V> = <var:j> \land <var:c> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:2> ; <var:c> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:V> = <var:j> }} <def:poly> {{ <var:c> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:c> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 