\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:k1> := <var:B> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:6> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:B> = <var:q> $ ahead of interpreting the code , it must be that we have $ <var:n> = <nat:6> \times <var:q> + <nat:2> $ once list of commands is done . \end{theorem} \begin{proof} The method of proof for our code segment can be accomplished through Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:B> = <var:q> \} & <var:k1> := <var:B> & \{ <var:B> = <var:q> \land <var:k1> = <var:q> \} \end{tabular} Focusing on the following commands seen in the segment of code , \[ \begin{tabular} {rcl} \{ <var:B> = <var:q> \} & <var:k1> := <var:B> & \{ <var:B> = <var:q> \land <var:k1> = <var:q> \} \\ \{ <var:B> = <var:q> \land <var:k1> = <var:q> \} & <var:k0> := <nat:2> & \{ <var:B> = <var:q> \land <var:k1> = <var:q> \land <var:k0> = <nat:2> \} \\ \{ <var:B> = <var:q> \land <var:k1> = <var:q> \land <var:k0> = <nat:2> \} & <var:k1> := <var:k1> * <nat:6> & \{ <var:B> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k0> = <nat:2> \} \\ \{ <var:B> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k0> = <nat:2> \} & <var:n> := <var:k1& \{ <var:B> = <var:q> \land <var:k0> = <nat:2> \land <var:n> = <nat:6> * <var:q> \} \end{tabular} This is given using the law obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:B> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:6> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:B> = <var:q> }} <def:poly> {{ <var:n> = <nat:6> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:k1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:k1> = <var:q> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:k0> = <nat:2> /\ <var:n> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:n> = <nat:6> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 