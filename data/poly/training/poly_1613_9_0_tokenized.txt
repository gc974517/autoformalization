\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:9> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:O> ; <var:G2> := <nat:7> ; <var:G2> := <var:G2> * <var:O> ; <var:G2> := <var:G2> * <var:O> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:O> = <var:D> $ , given any $ <var:D> $ , ahead of running the list of instructions , it follows that we see $ <var:i> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:D> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \} \\ <var:G1> := <nat:2> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:G1> = <nat:2> \} \\ <var:G1> := <var:G1> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:G1> = <nat:2> \cdot <var:D> \} \\ <var:G2> := <nat:7> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:G1> = <nat:2> \cdot <var:D> \land <var:G2> = <nat:7> \} \\ <var:G2> := <var:G2> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:G1> = <nat:2> \cdot <var:D> \land <var:G2> = <nat:7> \cdot <var:D> \} \\ <var:G2> := <var:G2> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:G1> = <nat:2> \cdot <var:D> \land <var:G2> = <nat:7> \cdot <var:D> ^ <nat:2> \} \\ <var:i> := <var:G2> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:G1> = <nat:2> \cdot <var:D> \land <var:i> = <nat:7> \cdot <var:D> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:G1> ; \\ \{ <var:O> = <var:D> \land <var:G0> = <nat:9> \land <var:i> = <nat:7> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> \} \\ <var:i> := <var:i> + <var:G0> \\ \{ <var:O> = <var:D> \land <var:i> = <nat:7> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:9> \} \end{eqnarray} Applying standard Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:9> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:O> ; <var:G2> := <nat:7> ; <var:G2> := <var:G2> * <var:O> ; <var:G2> := <var:G2> * <var:O> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:O> = <var:D> }} <def:poly> {{ <var:i> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:2> * <var:D> /\ <var:G2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:2> * <var:D> /\ <var:G2> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:2> * <var:D> /\ <var:G2> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:2> * <var:D> /\ <var:i> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:G0> = <nat:9> /\ <var:i> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:i> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 