\begin{document} \begin{theorem} We define the following set of instructions : \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:k> ; <var:S> := <var:r1> ; <var:S> := <var:S> + <var:r0> \end{verbatim} Allowing --- letting $ <var:U> \in \mathbb{Z}^+ $ --- it to hold that $ <var:k> = <var:U> $ ahead of the execution of our code segment , it holds that we have $ <var:S> = <nat:6> * <var:U> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is done with typical Hoare logic . Now , we see the variable update statement defining $ <nat:9> $ to $ <var:r0>$ . This takes $ \{ <var:k> = <var:U> \} $ into the condition $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \} $ . This is given with the assignment scheme defined in standard Hoare reasoning . Moving onward , the variable assignmet code \verb | <var:r1> := <nat:6> ; | . This transfers $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \} $ toward $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> \} $ . This is shown to be logically sound using the assignment inference rule defined in typical Hoare techniques . Advancing to the following line of code found in the set of instructions , we have the variable update code defining $ <var:r1> * <var:k> $ into $ <var:r1>$ . This advances the condition $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> \} $ into the condition $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:U> \} $ . This is rigorously given with the assignment inference rule given by typical Hoare techniques . Advancing , we have the assignment line \verb | <var:S> := <var:r1> ; | . This moves the condition $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:U> \} $ into the postcondition $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \land <var:S> = <nat:6> * <var:U> \} $ . This is rigorously given by the assignment law of standard Hoare logic . Honing in on the upcoming command seen in our set of commands , we have the assignment code \verb | <var:S> := <var:S> + <var:r0> | . This transfers the condition $ \{ <var:k> = <var:U> \land <var:r0> = <nat:9> \land <var:S> = <nat:6> * <var:U> \} $ to $ \{ <var:k> = <var:U> \land <var:S> = <nat:6> * <var:U> + <nat:9> \} $ . This is deduced through the assignment scheme given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:k> = <var:U> }} <var:r0> := <nat:9> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:k> ; <var:S> := <var:r1> ; <var:S> := <var:S> + <var:r0> {{ <var:S> = <nat:6> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:r0> = <nat:9> /\ <var:S> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:S> = <nat:6> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 