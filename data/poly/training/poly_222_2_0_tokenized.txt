\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:9> ; <var:l> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Given --- for any positive integer coefficients $ <var:K> $ --- $ <var:R> = <var:K> $ ahead of evaluating this series of instructions it must be that we see $ <var:l> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our code is given with typical Hoare reasoning . Moving on , the code assigning $ <nat:9> $ into $ <var:c0>$ . This transfers the precondition $ \{ <var:R> = <var:K> \} $ as the postcondition $ \{ <var:R> = <var:K> \land <var:c0> = <nat:9> \} $ . This is given through the assignment rule obtained from typical Hoare reasoning . Honing in on the upcoming statement in our program , the binding code \verb | <var:l> := <var:c0> | . This forwards the condition $ \{ <var:R> = <var:K> \land <var:c0> = <nat:9> \} $ toward $ \{ <var:R> = <var:K> \land <var:l> = <nat:9> \} $ . This is shown to be logically sound through the assignment rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:9> ; <var:l> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:R> = <var:K> }} <def:poly> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 