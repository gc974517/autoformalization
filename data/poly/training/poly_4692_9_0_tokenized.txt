\begin{document} \begin{theorem} Take the following series of commands as follows \begin{verbatim} <var:j0> := <nat:8> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:d> ; <var:j2> := <nat:2> ; <var:j2> := <var:j2> * <var:d> ; <var:j2> := <var:j2> * <var:d> ; <var:M> := <var:j2> ; <var:M> := <var:M> + <var:j1> ; <var:M> := <var:M> + <var:j0> \end{verbatim} Assuming it to hold that $ <var:d> = <var:S> $ prior to interpreting this set of instructions it must be that $ <var:M> = <nat:2> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:8> $ when list of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions is accomplished with usual Hoare logic . Moving forward to the next step , the variable assignmet statement \verb | <var:j0> := <nat:8> ; | . This redefines $ \{ <var:d> = <var:S> \} $ into the condition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \} $ . This is shown to be logically sound through the assignment law from Hoare techniques . Moving on , we see the variable assignmet command defining $ <nat:1> $ toward $ <var:j1>$ . This advances the precondition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \} $ to the condition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \} $ . Advancing , we have the statement \verb | <var:j1> := <var:j1> * <var:d> ; | . This line advances $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \} $ as $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \} $ . Moving forward to the next step , we have the variable binding command letting $ <nat:2> $ into $ <var:j2>$ . This advances the condition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \} $ toward the condition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:j2> = <nat:2> \} $ . Moving on , we have the variable update command giving $ <var:j2> * <var:d> $ to $ <var:j2>$ . This code takes $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:j2> = <nat:2> \} $ as the postcondition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:j2> = <nat:2> \times <var:S> \} $ . This is deduced with the assignment inference rule found in typical Hoare reasoning . Going forward , we see the variable assignmet code letting $ <var:j2> * <var:d> $ into $ <var:j2>$ . This command transfers the condition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:j2> = <nat:2> \times <var:S> \} $ into $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:j2> = <nat:2> \times <var:S> ^ <nat:2> \} $ . Keeping momentum , the variable update statement \verb | <var:M> := <var:j2> ; | . This code moves the precondition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:j2> = <nat:2> \times <var:S> ^ <nat:2> \} $ to $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:M> = <nat:2> \times <var:S> ^ <nat:2> \} $ . Immediately following , we see the assignment command binding $ <var:M> + <var:j1> $ toward $ <var:M>$ . This code moves the precondition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:j1> = <nat:1> \times <var:S> \land <var:M> = <nat:2> \times <var:S> ^ <nat:2> \} $ to the condition $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:M> = <nat:2> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> \} $ . Further , we see the assignment code \verb | <var:M> := <var:M> + <var:j0> | . This advances $ \{ <var:d> = <var:S> \land <var:j0> = <nat:8> \land <var:M> = <nat:2> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> \} $ into $ \{ <var:d> = <var:S> \land <var:M> = <nat:2> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:d> = <var:S> }} <var:j0> := <nat:8> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:d> ; <var:j2> := <nat:2> ; <var:j2> := <var:j2> * <var:d> ; <var:j2> := <var:j2> * <var:d> ; <var:M> := <var:j2> ; <var:M> := <var:M> + <var:j1> ; <var:M> := <var:M> + <var:j0> {{ <var:M> = <nat:2> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:1> * <var:S> /\ <var:j2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:1> * <var:S> /\ <var:j2> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:1> * <var:S> /\ <var:j2> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:1> * <var:S> /\ <var:M> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:j0> = <nat:8> /\ <var:M> = <nat:2> * <var:S> ^ <nat:2> + <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:M> = <nat:2> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 