\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:g1> := <var:f> ; <var:g2> := <var:g1> * <var:f> ; <var:g3> := <var:g2> * <var:f> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:3> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:8> ; <var:V> := <var:g3> <var:V> := <var:V> + <var:g2> <var:V> := <var:V> + <var:g1> <var:V> := <var:V> + <var:g0> \end{verbatim} Allowing it to be that $ <var:f> = <var:S> $ , for every positive integers $ <var:S> $ , before interpreting our code , it holds that we have $ <var:V> = <nat:8> \times <var:S> ^ <nat:3> + <nat:7> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our code segment is clear by standard Hoare techniques . Looking at the next line seen in the segment of code , the variable binding code defining $ <var:f> $ to $ <var:g1>$ . This statement advances the condition $ \{ <var:f> = <var:S> \} $ into the postcondition $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \} $ . Immediately following , we have the binding code defining $ <var:g1> * <var:f> $ into $ <var:g2>$ . This code advances the condition $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \} $ into the condition $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \land <var:g2> = <var:S> ^ <nat:2> \} $ . Considering the next piece of code seen in our code segment , we see the statement letting $ <var:g2> * <var:f> $ into $ <var:g3>$ . This moves $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \land <var:g2> = <var:S> ^ <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \land <var:g2> = <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment scheme given in standard Hoare techniques . Honing in on the upcoming line of code contained in the segment of code , the variable update statement \verb | <var:g0> := <nat:5> ; | . This forwards $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \land <var:g2> = <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \} $ as $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \land <var:g2> = <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . This is shown to be logically sound by the assignment rule in Hoare logic . Paying attention to the subsequent line of code seen in our code , the assignment statement letting $ <var:g1> * <nat:3> $ toward $ <var:g1>$ . This redefines the condition $ \{ <var:f> = <var:S> \land <var:g1> = <var:S> \land <var:g2> = <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ to $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . This is rigorously given with the assignment scheme defined by Hoare techniques . Paying attention to the upcoming statement found in our list of instructions , we see the variable update code letting $ <var:g2> * <nat:7> $ to $ <var:g2>$ . This moves $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ toward the postcondition $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <nat:7> * <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . Keeping momentum , we see the environment update line \verb | <var:g3> := <var:g3> * <nat:8> ; | . This code advances the condition $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <nat:7> * <var:S> ^ <nat:2> \land <var:g3> = <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ to $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <nat:7> * <var:S> ^ <nat:2> \land <var:g3> = <nat:8> * <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . This is given using the assignment rule obtained from Hoare techniques . Jumping to the subsequent command found in our series of commands , we have the binding code \verb | <var:V> := <var:g3> | . This code redefines the condition $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <nat:7> * <var:S> ^ <nat:2> \land <var:g3> = <nat:8> * <var:S> ^ <nat:3> \land <var:g0> = <nat:5> \} $ into the condition $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <nat:7> * <var:S> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> \} $ . This is deduced by the assignment rule of typical Hoare techniques . Advancing to the subsequent statement contained in our code segment , we see the variable binding statement \verb | <var:V> := <var:V> + <var:g2> | . This code transfers $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g2> = <nat:7> * <var:S> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> \} $ toward $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g0> = <nat:5> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment law defined in Hoare logic . Advancing to the next step , the environment update statement letting $ <var:V> + <var:g1$ into $ <var:V>$ . This advances the precondition $ \{ <var:f> = <var:S> \land <var:g1> = <nat:3> * <var:S> \land <var:g0> = <nat:5> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> \} $ as the condition $ \{ <var:f> = <var:S> \land <var:g0> = <nat:5> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:3> * <var:S> \} $ . This is shown with the assignment rule defined by standard Hoare reasoning . After , we have the assignment command \verb | <var:V> := <var:V> + <var:g0> | . This takes the condition $ \{ <var:f> = <var:S> \land <var:g0> = <nat:5> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:3> * <var:S> \} $ to $ \{ <var:f> = <var:S> \land <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:5> \} $ . This is shown to be logically sound by the assignment inference rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:f> = <var:S> }} <var:g1> := <var:f> ; <var:g2> := <var:g1> * <var:f> ; <var:g3> := <var:g2> * <var:f> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:3> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:8> ; <var:V> := <var:g3> <var:V> := <var:V> + <var:g2> <var:V> := <var:V> + <var:g1> <var:V> := <var:V> + <var:g0> {{ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <var:S> /\ <var:g2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <var:S> /\ <var:g2> = <var:S> ^ <nat:2> /\ <var:g3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <var:S> /\ <var:g2> = <var:S> ^ <nat:2> /\ <var:g3> = <var:S> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <nat:3> * <var:S> /\ <var:g2> = <var:S> ^ <nat:2> /\ <var:g3> = <var:S> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <nat:3> * <var:S> /\ <var:g2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:g3> = <var:S> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <nat:3> * <var:S> /\ <var:g2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:S> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <nat:3> * <var:S> /\ <var:g2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:g0> = <nat:5> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g1> = <nat:3> * <var:S> /\ <var:g0> = <nat:5> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:g0> = <nat:5> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 