\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:6> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:F> ; <var:X2> := <nat:1> ; <var:X2> := <var:X2> * <var:F> ; <var:X2> := <var:X2> * <var:F> ; <var:i> := <var:X2> ; <var:i> := <var:i> + <var:X1> ; <var:i> := <var:i> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Given it to be that $ <var:F> = <var:P> $ , given any $ <var:P> \in \mathbb{Z}^+ $ , before evaluating our segment of code , it holds that we have $ <var:i> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is clear by Hoare techniques . Advancing to the next piece of code found in our list of instructions , we see the variable assignmet line \verb | <var:X0> := <nat:6> ; | . This command redefines the precondition $ \{ <var:F> = <var:P> \} $ toward the postcondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \} $ . This is rigorously given by the assignment inference rule obtained from standard Hoare techniques . Advancing on , we see the variable binding command letting $ <nat:2> $ into $ <var:X1>$ . This line takes the precondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \} $ as $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \} $ . This is ensured by the assignment rule found in usual Hoare techniques . Further , the assignment code \verb | <var:X1> := <var:X1> * <var:F> ; | . This statement advances the precondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \} $ toward $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \} $ . Jumping to the upcoming statement seen in the set of instructions , we have the binding line letting $ <nat:1> $ toward $ <var:X2>$ . This redefines the precondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \} $ toward the postcondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:X2> = <nat:1> \} $ . Immediately following , we see the line \verb | <var:X2> := <var:X2> * <var:F> ; | . This redefines $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:X2> = <nat:1> \} $ to $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:X2> = <nat:1> \times <var:P> \} $ . Immediately after , we have the binding line \verb | <var:X2> := <var:X2> * <var:F> ; | . This advances the condition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:X2> = <nat:1> \times <var:P> \} $ into the postcondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:X2> = <nat:1> \times <var:P> ^ <nat:2> \} $ . Advancing on , we see the binding code binding $ <var:X2> $ as $ <var:i>$ . This statement redefines the precondition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:X2> = <nat:1> \times <var:P> ^ <nat:2> \} $ into $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:i> = <nat:1> \times <var:P> ^ <nat:2> \} $ . This is known to be sound with the assignment rule from standard Hoare techniques . Moving onward , we have the assignment code letting $ <var:i> + <var:X1> $ toward $ <var:i>$ . This code moves the condition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \times <var:P> \land <var:i> = <nat:1> \times <var:P> ^ <nat:2> \} $ to the condition $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:i> = <nat:1> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> \} $ . This is shown to be logically sound using the assignment scheme from Hoare techniques . Looking at the following piece of code in the set of commands , the command assigning $ <var:i> + <var:X0$ as $ <var:i>$ . This advances $ \{ <var:F> = <var:P> \land <var:X0> = <nat:6> \land <var:i> = <nat:1> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> \} $ as the condition $ \{ <var:F> = <var:P> \land <var:i> = <nat:1> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X0> := <nat:6> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:F> ; <var:X2> := <nat:1> ; <var:X2> := <var:X2> * <var:F> ; <var:X2> := <var:X2> * <var:F> ; <var:i> := <var:X2> ; <var:i> := <var:i> + <var:X1> ; <var:i> := <var:i> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:F> = <var:P> }} <def:poly> {{ <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> * <var:P> /\ <var:X2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> * <var:P> /\ <var:X2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> * <var:P> /\ <var:X2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> * <var:P> /\ <var:i> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:X0> = <nat:6> /\ <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 