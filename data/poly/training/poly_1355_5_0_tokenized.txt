\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:3> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:Q> ; <var:H> := <var:z1> ; <var:H> := <var:H> + <var:z0> \end{verbatim} Given it to hold that $ <var:Q> = <var:a> $ given any positive coefficients $ <var:a> $ before the execution of our segment of code it must be that $ <var:H> = <nat:2> * <var:a> + <nat:3> $ once code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:a> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:Q> = <var:a> \land <var:z0> = <nat:3> \} \\ <var:z1> := <nat:2> ; \\ \{ <var:Q> = <var:a> \land <var:z0> = <nat:3> \land <var:z1> = <nat:2> \} \\ <var:z1> := <var:z1> * <var:Q> ; \\ \{ <var:Q> = <var:a> \land <var:z0> = <nat:3> \land <var:z1> = <nat:2> \cdot <var:a> \} \\ <var:H> := <var:z1> ; \\ \{ <var:Q> = <var:a> \land <var:z0> = <nat:3> \land <var:H> = <nat:2> \cdot <var:a> \} \\ <var:H> := <var:H> + <var:z0> \\ \{ <var:Q> = <var:a> \land <var:H> = <nat:2> \cdot <var:a> + <nat:3> \} \end{eqnarray} The application of usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Q> = <var:a> }} <var:z0> := <nat:3> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:Q> ; <var:H> := <var:z1> ; <var:H> := <var:H> + <var:z0> {{ <var:H> = <nat:2> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:z0> = <nat:3> /\ <var:H> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:H> = <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 