\begin{document} \begin{theorem} Consider the following code in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:A> ; <var:a2> := <nat:6> ; <var:a2> := <var:a2> * <var:A> ; <var:a2> := <var:a2> * <var:A> ; <var:O> := <var:a2> ; <var:O> := <var:O> + <var:a1> ; <var:O> := <var:O> + <var:a0> \end{verbatim} Given , for every integers $ <var:t> $ , it to hold that $ <var:A> = <var:t> $ ahead of the evaluation of the set of instructions it must be that we see $ <var:O> = <nat:6> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques produces : \begin{eqnarray} \{ <var:A> = <var:t> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \} \\ <var:a1> := <nat:1> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \} \\ <var:a1> := <var:a1> * <var:A> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \cdot <var:t> \} \\ <var:a2> := <nat:6> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \cdot <var:t> \land <var:a2> = <nat:6> \} \\ <var:a2> := <var:a2> * <var:A> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \cdot <var:t> \land <var:a2> = <nat:6> \cdot <var:t> \} \\ <var:a2> := <var:a2> * <var:A> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \cdot <var:t> \land <var:a2> = <nat:6> \cdot <var:t> ^ <nat:2> \} \\ <var:O> := <var:a2> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \cdot <var:t> \land <var:O> = <nat:6> \cdot <var:t> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:a1> ; \\ \{ <var:A> = <var:t> \land <var:a0> = <nat:4> \land <var:O> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> \} \\ <var:O> := <var:O> + <var:a0> \\ \{ <var:A> = <var:t> \land <var:O> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:A> = <var:t> }} <var:a0> := <nat:4> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:A> ; <var:a2> := <nat:6> ; <var:a2> := <var:a2> * <var:A> ; <var:a2> := <var:a2> * <var:A> ; <var:O> := <var:a2> ; <var:O> := <var:O> + <var:a1> ; <var:O> := <var:O> + <var:a0> {{ <var:O> = <nat:6> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:t> /\ <var:a2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:t> /\ <var:a2> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:t> /\ <var:a2> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:t> /\ <var:O> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:a0> = <nat:4> /\ <var:O> = <nat:6> * <var:t> ^ <nat:2> + <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:O> = <nat:6> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 