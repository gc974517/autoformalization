\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:9> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:B> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:B> ; <var:t2> := <var:t2> * <var:B> ; <var:i> := <var:t2> ; <var:i> := <var:i> + <var:t1> ; <var:i> := <var:i> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Given --- assuming some $ <var:Z> \in \mathbb{Z}^+ $ --- that $ <var:B> = <var:Z> $ prior to evaluating this list of instructions , then we have $ <var:i> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:9> $ once list of instructions is done executing . \end{theorem} \begin{proof} The method of proof for the program is evident by standard Hoare techniques . Going forward , \begin{verbatim} { <var:B> = <var:Z> } <var:t0> := <nat:9> { <var:B> = <var:Z> \land <var:t0> = <nat:9> } { <var:B> = <var:Z> \land <var:t0> = <nat:9> } <var:t1> := <nat:4> { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> } { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> } <var:t1> := <var:t1> * <var:B> { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> * <var:Z> } { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> * <var:Z> } <var:t2> := <nat:2> { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> * <var:Z> \land <var:t2> = <nat:2> } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:B> = <var:Z> } <var:t0> := <nat:9> { <var:B> = <var:Z> \land <var:t0> = <nat:9> } { <var:B> = <var:Z> \land <var:t0> = <nat:9> } <var:t1> := <nat:4> { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> } { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> } <var:t1> := <var:t1> * <var:B> { <var:B> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:4> * <var:Z> } \end{verbatim} Moving on to the upcoming command in our set of commands , we have \begin{verbatim} { <var:B> = <var:Z> } <var:t0> := <nat:9> { <var:B> = <var:Z> \land <var:t0> = <nat:9> } \end{verbatim} Following , \begin{verbatim} { <var:B> = <var:Z> } <var:t0> := <nat:9> { <var:B> = <var:Z> \land <var:t0> = <nat:9> } \end{verbatim} This is shown by the binding scheme given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:9> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:B> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:B> ; <var:t2> := <var:t2> * <var:B> ; <var:i> := <var:t2> ; <var:i> := <var:i> + <var:t1> ; <var:i> := <var:i> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:B> = <var:Z> }} <def:poly> {{ <var:i> = <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:4> * <var:Z> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:4> * <var:Z> /\ <var:t2> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:4> * <var:Z> /\ <var:t2> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:4> * <var:Z> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 