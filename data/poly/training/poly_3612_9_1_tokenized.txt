\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:v> ; <var:r2> := <var:r1> * <var:v> ; <var:r3> := <var:r2> * <var:v> ; <var:r0> := <nat:4> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:3> ; <var:B> := <var:r3> <var:B> := <var:B> + <var:r2> <var:B> := <var:B> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Given , taking $ <var:c> \in \mathbb{Z}^+ $ , it to hold that $ <var:v> = <var:c> $ prior to evaluating this program , it must be that we have $ <var:B> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be shown with Hoare techniques . Immediately after , the command \verb | <var:r1> := <var:v> ; | . This statement takes the condition $ \{ <var:v> = <var:c> \} $ into $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \} $ . This is shown using the assignment inference rule given in standard Hoare logic . Moving on to the next step , we see the variable assignmet command \verb | <var:r2> := <var:r1> * <var:v> ; | . This line advances the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \} $ into the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <var:c> ^ <nat:2> \} $ . This is rigorously given with the assignment law defined in Hoare logic . Moving forward to the proceeding line found in the program , we see the assignment statement assigning $ <var:r2> * <var:v> $ toward $ <var:r3>$ . This statement transfers the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <var:c> ^ <nat:2> \} $ to the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <var:c> ^ <nat:2> \land <var:r3> = <var:c> ^ <nat:3> \} $ . Immediately after , we have the binding command \verb | <var:r0> := <nat:4> ; | . This line advances the precondition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <var:c> ^ <nat:2> \land <var:r3> = <var:c> ^ <nat:3> \} $ into the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <var:c> ^ <nat:2> \land <var:r3> = <var:c> ^ <nat:3> \land <var:r0> = <nat:4> \} $ . Jumping to the next statement found in the code , the binding code giving $ <var:r2> * <nat:3> $ toward $ <var:r2>$ . This code forwards $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <var:c> ^ <nat:2> \land <var:r3> = <var:c> ^ <nat:3> \land <var:r0> = <nat:4> \} $ as the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:r3> = <var:c> ^ <nat:3> \land <var:r0> = <nat:4> \} $ . This is rigorously given by the assignment rule from typical Hoare logic . Stepping forward , we see the variable binding command \verb | <var:r3> := <var:r3> * <nat:3> ; | . This line forwards the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:r3> = <var:c> ^ <nat:3> \land <var:r0> = <nat:4> \} $ to $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:r3> = <nat:3> \cdot <var:c> ^ <nat:3> \land <var:r0> = <nat:4> \} $ . This is ensured by the assignment scheme given by usual Hoare logic . Observing the subsequent statement found in our list of commands , the variable assignmet statement \verb | <var:B> := <var:r3> | . This code transfers the precondition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:r3> = <nat:3> \cdot <var:c> ^ <nat:3> \land <var:r0> = <nat:4> \} $ to the condition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:r0> = <nat:4> \land <var:B> = <nat:3> \cdot <var:c> ^ <nat:3> \} $ . This is shown by the assignment inference rule obtained from usual Hoare logic . Focusing on the upcoming piece of code found in our series of instructions , we have the binding code letting $ <var:B> + <var:r2$ into $ <var:B>$ . This forwards the precondition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:r0> = <nat:4> \land <var:B> = <nat:3> \cdot <var:c> ^ <nat:3> \} $ into $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r0> = <nat:4> \land <var:B> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> \} $ . Looking at the following bit of code contained in the set of instructions , we have the assignment line binding $ <var:B> + <var:r0$ into $ <var:B>$ . This code advances the precondition $ \{ <var:v> = <var:c> \land <var:r1> = <var:c> \land <var:r0> = <nat:4> \land <var:B> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> \} $ to the condition $ \{ <var:v> = <var:c> \land <var:B> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:v> ; <var:r2> := <var:r1> * <var:v> ; <var:r3> := <var:r2> * <var:v> ; <var:r0> := <nat:4> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:3> ; <var:B> := <var:r3> <var:B> := <var:B> + <var:r2> <var:B> := <var:B> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:v> = <var:c> }} <def:poly> {{ <var:B> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r2> = <var:c> ^ <nat:2> /\ <var:r3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r2> = <var:c> ^ <nat:2> /\ <var:r3> = <var:c> ^ <nat:3> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:r3> = <var:c> ^ <nat:3> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:c> ^ <nat:3> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:r0> = <nat:4> /\ <var:B> = <nat:3> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:r1> = <var:c> /\ <var:r0> = <nat:4> /\ <var:B> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:B> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 