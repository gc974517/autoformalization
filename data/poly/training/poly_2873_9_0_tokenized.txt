\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:v> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:v> ; <var:e2> := <var:e2> * <var:v> ; <var:T> := <var:e2> ; <var:T> := <var:T> + <var:e1> ; <var:T> := <var:T> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Allowing , given positive coefficients $ <var:y> $ , that we have $ <var:v> = <var:y> $ prior to interpreting this program , then we have $ <var:T> = <nat:1> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> + <nat:7> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:v> = <var:y> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:7> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \} \\ <var:e1> := <var:e1> * <var:v> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \times <var:y> \} \\ <var:e2> := <nat:1> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \times <var:y> \land <var:e2> = <nat:1> \} \\ <var:e2> := <var:e2> * <var:v> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \times <var:y> \land <var:e2> = <nat:1> \times <var:y> \} \\ <var:e2> := <var:e2> * <var:v> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \times <var:y> \land <var:e2> = <nat:1> \times <var:y> ^ <nat:2> \} \\ <var:T> := <var:e2> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \times <var:y> \land <var:T> = <nat:1> \times <var:y> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:e1> ; \\ \{ <var:v> = <var:y> \land <var:e0> = <nat:7> \land <var:T> = <nat:1> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> \} \\ <var:T> := <var:T> + <var:e0> \\ \{ <var:v> = <var:y> \land <var:T> = <nat:1> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> + <nat:7> \} \end{eqnarray} Considering the preceding argument , this code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:v> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:v> ; <var:e2> := <var:e2> * <var:v> ; <var:T> := <var:e2> ; <var:T> := <var:T> + <var:e1> ; <var:T> := <var:T> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:v> = <var:y> }} <def:poly> {{ <var:T> = <nat:1> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:y> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:y> /\ <var:e2> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:y> /\ <var:e2> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:y> /\ <var:T> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:e0> = <nat:7> /\ <var:T> = <nat:1> * <var:y> ^ <nat:2> + <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:T> = <nat:1> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 