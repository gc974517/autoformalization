\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:2> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:C> ; <var:b> := <var:E1> ; <var:b> := <var:b> + <var:E0> \end{verbatim} Allow that we have $ <var:C> = <var:N> $ ahead of the execution of our set of instructions , then we see $ <var:b> = <nat:9> \cdot <var:N> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:N> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:C> = <var:N> \land <var:E0> = <nat:2> \} \\ <var:E1> := <nat:9> ; \\ \{ <var:C> = <var:N> \land <var:E0> = <nat:2> \land <var:E1> = <nat:9> \} \\ <var:E1> := <var:E1> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:E0> = <nat:2> \land <var:E1> = <nat:9> \times <var:N> \} \\ <var:b> := <var:E1> ; \\ \{ <var:C> = <var:N> \land <var:E0> = <nat:2> \land <var:b> = <nat:9> \times <var:N> \} \\ <var:b> := <var:b> + <var:E0> \\ \{ <var:C> = <var:N> \land <var:b> = <nat:9> \times <var:N> + <nat:2> \} \end{eqnarray} Using usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:C> = <var:N> }} <var:E0> := <nat:2> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:C> ; <var:b> := <var:E1> ; <var:b> := <var:b> + <var:E0> {{ <var:b> = <nat:9> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:E0> = <nat:2> /\ <var:b> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b> = <nat:9> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 