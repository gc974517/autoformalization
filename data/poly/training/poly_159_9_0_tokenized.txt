\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:l> ; <var:y2> := <nat:2> ; <var:y2> := <var:y2> * <var:l> ; <var:y2> := <var:y2> * <var:l> ; <var:H> := <var:y2> ; <var:H> := <var:H> + <var:y1> ; <var:H> := <var:H> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming given some natural coefficients $ <var:i> $ that $ <var:l> = <var:i> $ ahead of the execution of this series of commands , it holds that $ <var:H> = <nat:2> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands can be done with Hoare techniques . Moving onward , we have \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | . Advancing to the subsequent commands in our list of instructions , we have \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | , \verb | { <var:l> = <var:i> \land <var:y0> = <nat:2> } <var:y1> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> } | and \verb | { <var:l> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> } <var:y1> := <var:y1> * <var:l> { <var:l> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \times <var:i> } | . This is shown to be logically sound by the assignment inference rule defined in typical Hoare logic . Moving forward to the upcoming bit of code in our set of commands , \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | . This is ensured with the binding law given by usual Hoare techniques . Looking at the subsequent statement in the set of commands , we have \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | . This is given through the assignment scheme defined by standard Hoare reasoning . Jumping to the following statement in the series of commands , \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | . Moving onward , we have \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | . Keeping momentum , \verb | { <var:l> = <var:i> } <var:y0> := <nat:2> { <var:l> = <var:i> \land <var:y0> = <nat:2> } | . This is ensured with the variable update law found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:l> ; <var:y2> := <nat:2> ; <var:y2> := <var:y2> * <var:l> ; <var:y2> := <var:y2> * <var:l> ; <var:H> := <var:y2> ; <var:H> := <var:H> + <var:y1> ; <var:H> := <var:H> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:l> = <var:i> }} <def:poly> {{ <var:H> = <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:i> /\ <var:y2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:i> /\ <var:y2> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:i> /\ <var:y2> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:i> /\ <var:H> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:y0> = <nat:2> /\ <var:H> = <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:H> = <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 