\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:x> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:7> ; <var:v> := <var:p1> <var:v> := <var:v> + <var:p0> \end{verbatim} Assuming --- for any positive numbers $ <var:A> $ --- that $ <var:x> = <var:A> $ ahead of interpreting our set of instructions it must be that we see $ <var:v> = <nat:7> * <var:A> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:A> \} \\ <var:p1> := <var:x> ; \\ \{ <var:x> = <var:A> \land <var:p1> = <var:A> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:x> = <var:A> \land <var:p1> = <var:A> \land <var:p0> = <nat:4> \} \\ <var:p1> := <var:p1> * <nat:7> ; \\ \{ <var:x> = <var:A> \land <var:p1> = <nat:7> \cdot <var:A> \land <var:p0> = <nat:4> \} \\ <var:v> := <var:p1> \\ \{ <var:x> = <var:A> \land <var:p0> = <nat:4> \land <var:v> = <nat:7> \cdot <var:A> \} \end{eqnarray} Allowing running this series of instructions gives us : \begin{eqnarray} <var:v> := <var:v> + <var:p0> \\ \{ <var:x> = <var:A> \land <var:v> = <nat:7> \cdot <var:A> + <nat:4> \} \end{eqnarray} Applying standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:x> = <var:A> }} <var:p1> := <var:x> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:7> ; <var:v> := <var:p1> <var:v> := <var:v> + <var:p0> {{ <var:v> = <nat:7> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:p1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:p1> = <var:A> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:p1> = <nat:7> * <var:A> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:p0> = <nat:4> /\ <var:v> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:v> = <nat:7> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 