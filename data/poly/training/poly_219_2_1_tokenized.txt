\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:8> ; <var:n> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for every natural numbers $ <var:B> $ ) it to hold that $ <var:U> = <var:B> $ ahead of interpreting our set of commands , it follows that $ <var:n> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be seen through the following decorated segment of code . \begin{eqnarray} \{ <var:U> = <var:B> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:U> = <var:B> \land <var:W0> = <nat:8> \} \\ <var:n> := <var:W0> \\ \{ <var:U> = <var:B> \land <var:n> = <nat:8> \} \end{eqnarray} Using standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:8> ; <var:n> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:U> = <var:B> }} <def:poly> {{ <var:n> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:n> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 