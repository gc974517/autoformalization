\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:e> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:e> ; <var:o2> := <var:o2> * <var:e> ; <var:F> := <var:o2> ; <var:F> := <var:F> + <var:o1> ; <var:F> := <var:F> + <var:o0> \end{verbatim} Assume , assuming some positive numbers $ <var:B> $ , that $ <var:e> = <var:B> $ before interpreting our series of commands then we have $ <var:F> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the segment of code is clear through Hoare techniques . Moving forward , the assignment statement letting $ <nat:8> $ into $ <var:o0>$ . This redefines the precondition $ \{ <var:e> = <var:B> \} $ into the postcondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \} $ . This is shown to be logically sound through the assignment scheme in usual Hoare reasoning . Advancing , we have the environment update code \verb | <var:o1> := <nat:7> ; | . This redefines $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \} $ as the condition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> \} $ . Moving forward , we have the variable update code \verb | <var:o1> := <var:o1> * <var:e> ; | . This advances the precondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> \} $ into the postcondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \} $ . This is known to be sound through the assignment rule of Hoare reasoning . Next , we have the variable binding line \verb | <var:o2> := <nat:9> ; | . This advances the precondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \} $ into $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:o2> = <nat:9> \} $ . After , the binding statement \verb | <var:o2> := <var:o2> * <var:e> ; | . This takes the precondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:o2> = <nat:9> \} $ toward the condition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:o2> = <nat:9> * <var:B> \} $ . Going forward , we see the variable binding command assigning $ <var:o2> * <var:e> $ into $ <var:o2>$ . This transfers $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:o2> = <nat:9> * <var:B> \} $ toward $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:o2> = <nat:9> * <var:B> ^ <nat:2> \} $ . This is shown using the assignment rule given in usual Hoare reasoning . Jumping to the upcoming step in the list of commands , we see the assignment statement \verb | <var:F> := <var:o2> ; | . This moves the condition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:o2> = <nat:9> * <var:B> ^ <nat:2> \} $ as the postcondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:F> = <nat:9> * <var:B> ^ <nat:2> \} $ . This is sound using the assignment inference rule in standard Hoare reasoning . Considering the upcoming statement found in the set of instructions , we have the assignment command binding $ <var:F> + <var:o1> $ into $ <var:F>$ . This code redefines the condition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:o1> = <nat:7> * <var:B> \land <var:F> = <nat:9> * <var:B> ^ <nat:2> \} $ to the condition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:F> = <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} $ . This is ensured with the assignment rule defined in typical Hoare reasoning . Keeping momentum , we have the code \verb | <var:F> := <var:F> + <var:o0> | . This transfers the precondition $ \{ <var:e> = <var:B> \land <var:o0> = <nat:8> \land <var:F> = <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} $ as $ \{ <var:e> = <var:B> \land <var:F> = <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:e> = <var:B> }} <var:o0> := <nat:8> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:e> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:e> ; <var:o2> := <var:o2> * <var:e> ; <var:F> := <var:o2> ; <var:F> := <var:F> + <var:o1> ; <var:F> := <var:F> + <var:o0> {{ <var:F> = <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:7> * <var:B> /\ <var:o2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:7> * <var:B> /\ <var:o2> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:7> * <var:B> /\ <var:o2> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:7> * <var:B> /\ <var:F> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:8> /\ <var:F> = <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:F> = <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 