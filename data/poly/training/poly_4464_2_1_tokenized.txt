\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:4> ; <var:z> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allow for all whole numbers $ <var:v> $ that $ <var:U> = <var:v> $ ahead of interpreting our segment of code , it follows that $ <var:z> = <nat:4> $ after series of instructions terminates . \end{theorem} \begin{proof} The argument for our segment of code is clear using usual Hoare reasoning . Moving onward , we have \begin{eqnarray} \{ <var:U> = <var:v> \} \, <var:q0> := <nat:4> \, \{ <var:U> = <var:v> \land <var:q0> = <nat:4> \} \\ \{ <var:U> = <var:v> \land <var:q0> = <nat:4> \} \, <var:z> := <var:q0\, \{ <var:U> = <var:v> \land <var:z> = <nat:4> \} \end{eqnarray} This is known to be sound through the binding law of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:z> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <def:poly> {{ <var:z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 