\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:H> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:4> ; <var:M> := <var:K1> <var:M> := <var:M> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Assuming , given any positive integer coefficients $ <var:O> $ , $ <var:H> = <var:O> $ before executing our list of commands , it holds that $ <var:M> = <nat:4> \times <var:O> + <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:H> = <var:O> \} \\ <var:K1> := <var:H> ; \\ \{ <var:H> = <var:O> \land <var:K1> = <var:O> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:H> = <var:O> \land <var:K1> = <var:O> \land <var:K0> = <nat:6> \} \\ <var:K1> := <var:K1> * <nat:4> ; \\ \{ <var:H> = <var:O> \land <var:K1> = <nat:4> * <var:O> \land <var:K0> = <nat:6> \} \\ <var:M> := <var:K1> \\ \{ <var:H> = <var:O> \land <var:K0> = <nat:6> \land <var:M> = <nat:4> * <var:O> \} \\ <var:M> := <var:M> + <var:K0> \\ \{ <var:H> = <var:O> \land <var:M> = <nat:4> * <var:O> + <nat:6> \} \end{eqnarray} Therefore , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:H> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:4> ; <var:M> := <var:K1> <var:M> := <var:M> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:H> = <var:O> }} <def:poly> {{ <var:M> = <nat:4> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:K1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:K1> = <var:O> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:K1> = <nat:4> * <var:O> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:K0> = <nat:6> /\ <var:M> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:M> = <nat:4> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 