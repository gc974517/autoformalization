\begin{document} \begin{theorem} Take a list of instructions as follows \begin{verbatim} <var:X1> := <var:a> ; <var:X2> := <var:X1> * <var:a> ; <var:X3> := <var:X2> * <var:a> ; <var:X0> := <nat:1> ; <var:X2> := <var:X2> * <nat:6> ; <var:X3> := <var:X3> * <nat:7> ; <var:d> := <var:X3> <var:d> := <var:d> + <var:X2> <var:d> := <var:d> + <var:X0> \end{verbatim} Allowing $ <var:a> = <var:V> $ , given all positive numbers $ <var:V> $ , prior to interpreting the series of commands , then we see $ <var:d> = <nat:7> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is evident by usual Hoare logic . After , we have the environment update statement yielding $ <var:a> $ toward $ <var:X1>$ . This redefines the condition $ \{ <var:a> = <var:V> \} $ into the postcondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \} $ . Observing the following statement contained in our code segment , the environment update code \verb | <var:X2> := <var:X1> * <var:a> ; | . This line takes the precondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \} $ toward $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment rule in Hoare logic . Going forward , we have the assignment statement \verb | <var:X3> := <var:X2> * <var:a> ; | . This moves the condition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \} $ to $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \land <var:X3> = <var:V> ^ <nat:3> \} $ . Looking at the upcoming line of code found in our set of instructions , the variable assignmet command binding $ <nat:1> $ as $ <var:X0>$ . This forwards $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \land <var:X3> = <var:V> ^ <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \land <var:X3> = <var:V> ^ <nat:3> \land <var:X0> = <nat:1> \} $ . This is shown with the assignment inference rule defined in standard Hoare logic . Next , we see the variable assignmet code letting $ <var:X2> * <nat:6> $ toward $ <var:X2>$ . This advances the precondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \land <var:X3> = <var:V> ^ <nat:3> \land <var:X0> = <nat:1> \} $ as the postcondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:X3> = <var:V> ^ <nat:3> \land <var:X0> = <nat:1> \} $ . Moving forward , we see the variable update command \verb | <var:X3> := <var:X3> * <nat:7> ; | . This code redefines the condition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:X3> = <var:V> ^ <nat:3> \land <var:X0> = <nat:1> \} $ as the condition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:X3> = <nat:7> \cdot <var:V> ^ <nat:3> \land <var:X0> = <nat:1> \} $ . Following , the code \verb | <var:d> := <var:X3> | . This takes $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:X3> = <nat:7> \cdot <var:V> ^ <nat:3> \land <var:X0> = <nat:1> \} $ into the postcondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:X0> = <nat:1> \land <var:d> = <nat:7> \cdot <var:V> ^ <nat:3> \} $ . This is ensured by the assignment scheme from typical Hoare techniques . Jumping to the proceeding line of code in our list of commands , we see the code \verb | <var:d> := <var:d> + <var:X2> | . This takes the precondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:X0> = <nat:1> \land <var:d> = <nat:7> \cdot <var:V> ^ <nat:3> \} $ toward the postcondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X0> = <nat:1> \land <var:d> = <nat:7> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> \} $ . Advancing to the following bit of code found in our series of instructions , the command defining $ <var:d> + <var:X0$ to $ <var:d>$ . This line transfers the precondition $ \{ <var:a> = <var:V> \land <var:X1> = <var:V> \land <var:X0> = <nat:1> \land <var:d> = <nat:7> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:V> \land <var:d> = <nat:7> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <var:X1> := <var:a> ; <var:X2> := <var:X1> * <var:a> ; <var:X3> := <var:X2> * <var:a> ; <var:X0> := <nat:1> ; <var:X2> := <var:X2> * <nat:6> ; <var:X3> := <var:X3> * <nat:7> ; <var:d> := <var:X3> <var:d> := <var:d> + <var:X2> <var:d> := <var:d> + <var:X0> {{ <var:d> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <var:V> ^ <nat:2> /\ <var:X3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <var:V> ^ <nat:2> /\ <var:X3> = <var:V> ^ <nat:3> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:X3> = <var:V> ^ <nat:3> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:X3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:X0> = <nat:1> /\ <var:d> = <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X1> = <var:V> /\ <var:X0> = <nat:1> /\ <var:d> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:d> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 