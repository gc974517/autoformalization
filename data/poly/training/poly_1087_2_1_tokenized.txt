\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:J0> := <nat:9> ; <var:B> := <var:J0> \end{verbatim} Assume that we have $ <var:j> = <var:t> $ ( given every $ <var:t> \in \mathbb{Z}^+ $ ) ahead of interpreting the segment of code it must be that $ <var:B> = <nat:9> $ when set of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of our code segment is accomplished using typical Hoare reasoning . After , \verb | { <var:j> = <var:t> } <var:J0> := <nat:9> { <var:j> = <var:t> \land <var:J0> = <nat:9> } | . This is guaranteed with the variable binding law in usual Hoare techniques . Observing the proceeding line seen in the set of commands , we have \verb | { <var:j> = <var:t> } <var:J0> := <nat:9> { <var:j> = <var:t> \land <var:J0> = <nat:9> } | . This is deduced with the environment update scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:j> = <var:t> }} <var:J0> := <nat:9> ; <var:B> := <var:J0> {{ <var:B> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:t> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:t> /\ <var:B> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 