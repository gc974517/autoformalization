\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:8> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:z> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:z> ; <var:i2> := <var:i2> * <var:z> ; <var:L> := <var:i2> ; <var:L> := <var:L> + <var:i1> ; <var:L> := <var:L> + <var:i0> \end{verbatim} Allowing $ <var:z> = <var:R> $ prior to interpreting this segment of code it holds that we have $ <var:L> = <nat:9> \times <var:R> ^ <nat:2> + <nat:8> \times <var:R> + <nat:8> $ . \end{theorem} \begin{proof} The argument for this series of commands is clear through usual Hoare logic . Looking at the upcoming statement in our list of instructions , we see the variable update command yielding $ <nat:8> $ to $ <var:i0>$ . This command takes the precondition $ \{ <var:z> = <var:R> \} $ as $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \} $ . This is shown using the assignment rule found in Hoare logic . Moving forward to the next step , we have the command \verb | <var:i1> := <nat:8> ; | . This code advances the condition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \} $ toward the postcondition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> \} $ . Honing in on the next line contained in our series of commands , we see the assignment line \verb | <var:i1> := <var:i1> * <var:z> ; | . This line takes the condition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> \} $ as $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \} $ . This is deduced using the assignment scheme defined by standard Hoare logic . Honing in on the following step seen in the series of instructions , the command yielding $ <nat:9> $ into $ <var:i2>$ . This takes the precondition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \} $ to the condition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:i2> = <nat:9> \} $ . Now , we see the variable binding line \verb | <var:i2> := <var:i2> * <var:z> ; | . This command moves the condition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:i2> = <nat:9> \} $ to $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:i2> = <nat:9> * <var:R> \} $ . This is shown to be logically sound with the assignment law given by Hoare logic . Moving forward to the subsequent command seen in the code segment , the binding line \verb | <var:i2> := <var:i2> * <var:z> ; | . This advances the condition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:i2> = <nat:9> * <var:R> \} $ to the postcondition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:i2> = <nat:9> * <var:R> ^ <nat:2> \} $ . This is ensured using the assignment inference rule defined in usual Hoare reasoning . Moving forward to the upcoming bit of code found in the set of commands , we see the binding command \verb | <var:L> := <var:i2> ; | . This redefines the precondition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:i2> = <nat:9> * <var:R> ^ <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:L> = <nat:9> * <var:R> ^ <nat:2> \} $ . This is deduced by the assignment rule defined by Hoare techniques . Taking a look at the subsequent command found in the segment of code , we see the environment update statement defining $ <var:L> + <var:i1> $ as $ <var:L>$ . This statement redefines $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:i1> = <nat:8> * <var:R> \land <var:L> = <nat:9> * <var:R> ^ <nat:2> \} $ to the postcondition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:L> = <nat:9> * <var:R> ^ <nat:2> + <nat:8> * <var:R> \} $ . This is guaranteed using the assignment scheme in typical Hoare logic . Moving on , we see the binding code binding $ <var:L> + <var:i0$ to $ <var:L>$ . This takes the condition $ \{ <var:z> = <var:R> \land <var:i0> = <nat:8> \land <var:L> = <nat:9> * <var:R> ^ <nat:2> + <nat:8> * <var:R> \} $ to the condition $ \{ <var:z> = <var:R> \land <var:L> = <nat:9> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:8> \} $ . This is sound using the assignment inference rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:z> = <var:R> }} <var:i0> := <nat:8> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:z> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:z> ; <var:i2> := <var:i2> * <var:z> ; <var:L> := <var:i2> ; <var:L> := <var:L> + <var:i1> ; <var:L> := <var:L> + <var:i0> {{ <var:L> = <nat:9> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:8> * <var:R> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:8> * <var:R> /\ <var:i2> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:8> * <var:R> /\ <var:i2> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:8> * <var:R> /\ <var:L> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:i0> = <nat:8> /\ <var:L> = <nat:9> * <var:R> ^ <nat:2> + <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:L> = <nat:9> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 