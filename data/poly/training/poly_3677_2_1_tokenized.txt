\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:8> ; <var:b> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing given every positive integers $ <var:Q> $ it to be that $ <var:u> = <var:Q> $ prior to evaluating this set of commands , then we have $ <var:b> = <nat:8> $ when list of commands terminates . \end{theorem} \begin{proof} Proving correctness for the program is demonstrated using Hoare logic . Taking a look at the subsequent line of code seen in our series of commands , we have the environment update statement defining $ <nat:8> $ into $ <var:x0>$ . This command moves the condition $ \{ <var:u> = <var:Q> \} $ as the postcondition $ \{ <var:u> = <var:Q> \land <var:x0> = <nat:8> \} $ . Moving on to the next step , we see the binding statement yielding $ <var:x0$ toward $ <var:b>$ . This moves the precondition $ \{ <var:u> = <var:Q> \land <var:x0> = <nat:8> \} $ toward $ \{ <var:u> = <var:Q> \land <var:b> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:8> ; <var:b> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:u> = <var:Q> }} <def:poly> {{ <var:b> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:b> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 