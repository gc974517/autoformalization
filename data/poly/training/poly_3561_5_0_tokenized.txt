\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:i0> := <nat:1> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:D> ; <var:Q> := <var:i1> ; <var:Q> := <var:Q> + <var:i0> \end{verbatim} Assuming that we have $ <var:D> = <var:O> $ before interpreting our series of instructions it holds that we have $ <var:Q> = <nat:2> \cdot <var:O> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the code can be accomplished using usual Hoare techniques . Keeping momentum , we have \verb | { <var:D> = <var:O> } <var:i0> := <nat:1> { <var:D> = <var:O> \land <var:i0> = <nat:1> } | , \verb | { <var:D> = <var:O> \land <var:i0> = <nat:1> } <var:i1> := <nat:2> { <var:D> = <var:O> \land <var:i0> = <nat:1> \land <var:i1> = <nat:2> } | and \verb | { <var:D> = <var:O> \land <var:i0> = <nat:1> \land <var:i1> = <nat:2> } <var:i1> := <var:i1> * <var:D> { <var:D> = <var:O> \land <var:i0> = <nat:1> \land <var:i1> = <nat:2> * <var:O> } | . This is deduced with the inference rule found in typical Hoare logic . Looking at the next line of code in the list of commands , we have \verb | { <var:D> = <var:O> } <var:i0> := <nat:1> { <var:D> = <var:O> \land <var:i0> = <nat:1> } | . Going to the next step , we see \verb | { <var:D> = <var:O> } <var:i0> := <nat:1> { <var:D> = <var:O> \land <var:i0> = <nat:1> } | . This is known to be sound with the scheme defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:D> = <var:O> }} <var:i0> := <nat:1> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:D> ; <var:Q> := <var:i1> ; <var:Q> := <var:Q> + <var:i0> {{ <var:Q> = <nat:2> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:O> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:O> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:O> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:O> /\ <var:i0> = <nat:1> /\ <var:Q> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:O> /\ <var:Q> = <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 