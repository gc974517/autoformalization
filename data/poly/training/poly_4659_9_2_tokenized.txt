\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:t> := <nat:1> ; <var:t> := <var:t> * <var:z> ; <var:t> := <nat:3> + <var:t> * <var:z> ; <var:t> := <nat:4> + <var:t> * <var:z> ; <var:t> := <nat:1> + <var:t> * <var:z> ; <var:t> := <nat:3> + <var:t> * <var:z> ; <var:t> := <nat:4> + <var:t> * <var:z> ; <var:t> := <nat:2> + <var:t> * <var:z> ; <var:t> := <nat:3> + <var:t> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:z> = <var:i> $ , given any natural numbers $ <var:i> $ , ahead of interpreting this code segment , then $ <var:t> = <nat:1> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> $ when segment of code has exited . \end{theorem} \begin{proof} The method of proof for the list of commands is accomplished using Hoare reasoning . Further , we see the variable assignmet statement giving $ <nat:1> $ to $ <var:t>$ . This statement forwards $ \{ <var:z> = <var:i> \} $ as the postcondition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \} $ . This is ensured using the assignment scheme defined in standard Hoare techniques . Immediately following , the environment update statement assigning $ <var:t> * <var:z> $ as $ <var:t>$ . This moves the precondition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \} $ to the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> + \} $ . Jumping to the upcoming step found in the series of commands , we see the code \verb | <var:t> := <nat:3> + <var:t> * <var:z> ; | . This takes the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> + \} $ into the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:2> + <nat:3> \} $ . This is known to be sound through the assignment scheme obtained from Hoare logic . Moving on to the next step , we see the variable assignmet code giving $ <nat:4> + <var:t> * <var:z> $ into $ <var:t>$ . This code redefines the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:2> + <nat:3> \} $ into the postcondition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> + <nat:4> \} $ . Advancing on , we see the variable binding command \verb | <var:t> := <nat:1> + <var:t> * <var:z> ; | . This advances the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> + <nat:4> \} $ as $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:1> \} $ . This is known to be sound with the assignment law defined in usual Hoare techniques . Next , we see the statement letting $ <nat:3> + <var:t> * <var:z> $ toward $ <var:t>$ . This command redefines $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:1> \} $ as $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + <nat:3> \} $ . This is given with the assignment law found in Hoare techniques . Focusing on the next bit of code seen in the code , we have the statement binding $ <nat:4> + <var:t> * <var:z> $ as $ <var:t>$ . This advances $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + <nat:3> \} $ toward the postcondition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:4> \} $ . This is rigorously given by the assignment inference rule obtained from standard Hoare reasoning . Jumping to the following step contained in our series of commands , we have the variable update statement giving $ <nat:2> + <var:t> * <var:z> $ as $ <var:t>$ . This line moves $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:4> \} $ to $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:2> \} $ . Jumping to the upcoming statement seen in our code segment , the binding statement letting $ <nat:3> + <var:t> * <var:z$ into $ <var:t>$ . This line transfers the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:2> \} $ toward the condition $ \{ <var:z> = <var:i> \land <var:t> = <nat:1> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:1> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> + <nat:3> \} $ . This is rigorously given by the assignment scheme given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:1> ; <var:t> := <var:t> * <var:z> ; <var:t> := <nat:3> + <var:t> * <var:z> ; <var:t> := <nat:4> + <var:t> * <var:z> ; <var:t> := <nat:1> + <var:t> * <var:z> ; <var:t> := <nat:3> + <var:t> * <var:z> ; <var:t> := <nat:4> + <var:t> * <var:z> ; <var:t> := <nat:2> + <var:t> * <var:z> ; <var:t> := <nat:3> + <var:t> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:z> = <var:i> }} <def:poly> {{ <var:t> = <nat:1> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 