\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:J0> := <nat:8> ; <var:j> := <var:J0> \end{verbatim} Assume $ <var:L> = <var:K> $ --- taking $ <var:K> \in \mathbb{Z}^+ $ --- before executing the segment of code it holds that $ <var:j> = <nat:8> $ . \end{theorem} \begin{proof} The argument for this code segment can be accomplished with the below decorated segment of code . \begin{eqnarray} \{ <var:L> = <var:K> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:L> = <var:K> \land <var:J0> = <nat:8> \} \\ <var:j> := <var:J0> \\ \{ <var:L> = <var:K> \land <var:j> = <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:L> = <var:K> }} <var:J0> := <nat:8> ; <var:j> := <var:J0> {{ <var:j> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:j> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 