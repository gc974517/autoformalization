\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:M> ; <var:K> := <var:y1> ; <var:K> := <var:K> + <var:y0> \end{verbatim} Allowing it to be that $ <var:M> = <var:s> $ prior to the execution of this list of instructions , it follows that we have $ <var:K> = <nat:2> * <var:s> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be demonstrated using Hoare reasoning . Considering the upcoming line seen in the list of instructions , we see the statement \verb | <var:y0> := <nat:1> ; | . This line transfers $ \{ <var:M> = <var:s> \} $ toward $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \} $ . Next , we see the assignment command \verb | <var:y1> := <nat:2> ; | . This code forwards the condition $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \} $ toward the postcondition $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \} $ . Taking another step toward the subsequent step contained in the series of instructions , we have the variable binding code assigning $ <var:y1> * <var:M> $ toward $ <var:y1>$ . This transfers the condition $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \} $ toward $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> * <var:s> \} $ . This is shown using the assignment law found in Hoare techniques . Keeping momentum , the environment update code giving $ <var:y1> $ toward $ <var:K>$ . This line transfers $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> * <var:s> \} $ to $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \land <var:K> = <nat:2> * <var:s> \} $ . Immediately following , the binding statement \verb | <var:K> := <var:K> + <var:y0> | . This moves the precondition $ \{ <var:M> = <var:s> \land <var:y0> = <nat:1> \land <var:K> = <nat:2> * <var:s> \} $ as the postcondition $ \{ <var:M> = <var:s> \land <var:K> = <nat:2> * <var:s> + <nat:1> \} $ . This is shown to be logically sound with the assignment rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:M> = <var:s> }} <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:M> ; <var:K> := <var:y1> ; <var:K> := <var:K> + <var:y0> {{ <var:K> = <nat:2> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:y0> = <nat:1> /\ <var:K> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:K> = <nat:2> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 