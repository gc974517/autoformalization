\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:v> ; <var:w> := <var:A1> ; <var:w> := <var:w> + <var:A0> \end{verbatim} Allowing that we have $ <var:v> = <var:o> $ ahead of evaluating our code segment , it holds that $ <var:w> = <nat:2> \cdot <var:o> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the code can be demonstrated by this decorated segment of code . \begin{eqnarray} \{ <var:v> = <var:o> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:v> = <var:o> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:2> ; \\ \{ <var:v> = <var:o> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> \} \\ <var:A1> := <var:A1> * <var:v> ; \\ \{ <var:v> = <var:o> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> \cdot <var:o> \} \\ <var:w> := <var:A1> ; \\ \{ <var:v> = <var:o> \land <var:A0> = <nat:4> \land <var:w> = <nat:2> \cdot <var:o> \} \\ <var:w> := <var:w> + <var:A0> \\ \{ <var:v> = <var:o> \land <var:w> = <nat:2> \cdot <var:o> + <nat:4> \} \end{eqnarray} Continuing the execution of our series of instructions returns : \begin{eqnarray} \end{eqnarray} Using standard Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:v> = <var:o> }} <var:A0> := <nat:4> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:v> ; <var:w> := <var:A1> ; <var:w> := <var:w> + <var:A0> {{ <var:w> = <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:A0> = <nat:4> /\ <var:w> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:w> = <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 