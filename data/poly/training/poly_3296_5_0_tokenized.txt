\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:6> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:D> ; <var:P> := <var:Q1> ; <var:P> := <var:P> + <var:Q0> \end{verbatim} Assume it to be that $ <var:D> = <var:f> $ before the evaluation of our series of instructions , it must be that $ <var:P> = <nat:7> \times <var:f> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for this code is accomplished using standard Hoare techniques . Honing in on the next statements seen in the list of instructions , we have \begin{verbatim} { <var:D> = <var:f> } <var:Q0> := <nat:6> { <var:D> = <var:f> \land <var:Q0> = <nat:6> } { <var:D> = <var:f> \land <var:Q0> = <nat:6> } <var:Q1> := <nat:7> { <var:D> = <var:f> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:7> } { <var:D> = <var:f> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:7> } <var:Q1> := <var:Q1> * <var:D> { <var:D> = <var:f> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:7> * <var:f> } { <var:D> = <var:f> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:7> * <var:f> } <var:P> := <var:Q1> { <var:D> = <var:f> \land <var:Q0> = <nat:6> \land <var:P> = <nat:7> * <var:f> } \end{verbatim} This is guaranteed using the assignment rule defined by typical Hoare reasoning . Advancing to the next step , we see \begin{verbatim} { <var:D> = <var:f> } <var:Q0> := <nat:6> { <var:D> = <var:f> \land <var:Q0> = <nat:6> } \end{verbatim} This is sound with the rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:D> = <var:f> }} <var:Q0> := <nat:6> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:D> ; <var:P> := <var:Q1> ; <var:P> := <var:P> + <var:Q0> {{ <var:P> = <nat:7> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:Q0> = <nat:6> /\ <var:P> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:P> = <nat:7> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 