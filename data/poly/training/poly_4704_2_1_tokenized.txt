\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:1> ; <var:q> := <var:W0> \end{verbatim} Assuming it to hold that $ <var:o> = <var:y> $ before interpreting our program , it follows that we see $ <var:q> = <nat:1> $ when series of instructions finishes . \end{theorem} \begin{proof} The course of logic for our code segment is evident using standard Hoare techniques . Moving onward , \verb | { <var:o> = <var:y> } <var:W0> := <nat:1> { <var:o> = <var:y> \land <var:W0> = <nat:1> } | . Immediately after , \verb | { <var:o> = <var:y> } <var:W0> := <nat:1> { <var:o> = <var:y> \land <var:W0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <var:W0> := <nat:1> ; <var:q> := <var:W0> {{ <var:q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 