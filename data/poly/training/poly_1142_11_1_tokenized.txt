\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:F1> := <var:L> ; <var:F2> := <var:F1> * <var:L> ; <var:F3> := <var:F2> * <var:L> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:3> ; <var:U> := <var:F3> <var:U> := <var:U> + <var:F2> <var:U> := <var:U> + <var:F1> <var:U> := <var:U> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:L> = <var:J> $ , for any $ <var:J> \in \mathbb{N} $ , before the evaluation of the list of instructions it holds that we have $ <var:U> = <nat:3> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:L> = <var:J> \} \\ <var:F1> := <var:L> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <var:J> \} \\ <var:F2> := <var:F1> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <var:J> \land <var:F2> = <var:J> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <var:J> \land <var:F2> = <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <var:J> \land <var:F2> = <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <nat:2> * <var:J> \land <var:F2> = <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:F2> := <var:F2> * <nat:4> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <nat:2> * <var:J> \land <var:F2> = <nat:4> * <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:F3> := <var:F3> * <nat:3> ; \\ \{ <var:L> = <var:J> \land <var:F1> = <nat:2> * <var:J> \land <var:F2> = <nat:4> * <var:J> ^ <nat:2> \land <var:F3> = <nat:3> * <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:U> := <var:F3> \\ \{ <var:L> = <var:J> \land <var:F1> = <nat:2> * <var:J> \land <var:F2> = <nat:4> * <var:J> ^ <nat:2> \land <var:F0> = <nat:1> \land <var:U> = <nat:3> * <var:J> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:F2> \\ \{ <var:L> = <var:J> \land <var:F1> = <nat:2> * <var:J> \land <var:F0> = <nat:1> \land <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:F1> \\ \{ <var:L> = <var:J> \land <var:F0> = <nat:1> \land <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} \\ <var:U> := <var:U> + <var:F0> \\ \{ <var:L> = <var:J> \land <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> \} \end{eqnarray} As a consequence , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:L> ; <var:F2> := <var:F1> * <var:L> ; <var:F3> := <var:F2> * <var:L> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:3> ; <var:U> := <var:F3> <var:U> := <var:U> + <var:F2> <var:U> := <var:U> + <var:F1> <var:U> := <var:U> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:L> = <var:J> }} <def:poly> {{ <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <var:J> /\ <var:F2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <var:J> /\ <var:F2> = <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <var:J> /\ <var:F2> = <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <nat:2> * <var:J> /\ <var:F2> = <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <nat:2> * <var:J> /\ <var:F2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <nat:2> * <var:J> /\ <var:F2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <nat:2> * <var:J> /\ <var:F2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:F0> = <nat:1> /\ <var:U> = <nat:3> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F1> = <nat:2> * <var:J> /\ <var:F0> = <nat:1> /\ <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:F0> = <nat:1> /\ <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:U> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 