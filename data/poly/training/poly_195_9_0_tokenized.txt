\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:f> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:f> ; <var:g2> := <var:g2> * <var:f> ; <var:r> := <var:g2> ; <var:r> := <var:r> + <var:g1> ; <var:r> := <var:r> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:f> = <var:Q> $ , letting natural coefficients $ <var:Q> $ , prior to interpreting this code , then we see $ <var:r> = <nat:6> \cdot <var:Q> ^ <nat:2> + <nat:6> \cdot <var:Q> + <nat:2> $ after list of instructions finishes . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives : \begin{eqnarray} \{ <var:f> = <var:Q> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \} \\ <var:g1> := <nat:6> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:6> \} \\ <var:g1> := <var:g1> * <var:f> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:6> * <var:Q> \} \\ <var:g2> := <nat:6> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:6> * <var:Q> \land <var:g2> = <nat:6> \} \\ <var:g2> := <var:g2> * <var:f> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:6> * <var:Q> \land <var:g2> = <nat:6> * <var:Q> \} \\ <var:g2> := <var:g2> * <var:f> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:6> * <var:Q> \land <var:g2> = <nat:6> * <var:Q> ^ <nat:2> \} \\ <var:r> := <var:g2> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:6> * <var:Q> \land <var:r> = <nat:6> * <var:Q> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:g1> ; \\ \{ <var:f> = <var:Q> \land <var:g0> = <nat:2> \land <var:r> = <nat:6> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> \} \\ <var:r> := <var:r> + <var:g0> \\ \{ <var:f> = <var:Q> \land <var:r> = <nat:6> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:2> \} \end{eqnarray} Allowing executing the list of commands results in : \begin{eqnarray} \end{eqnarray} Given the above , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:f> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:f> ; <var:g2> := <var:g2> * <var:f> ; <var:r> := <var:g2> ; <var:r> := <var:r> + <var:g1> ; <var:r> := <var:r> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:f> = <var:Q> }} <def:poly> {{ <var:r> = <nat:6> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:6> * <var:Q> /\ <var:g2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:6> * <var:Q> /\ <var:g2> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:6> * <var:Q> /\ <var:g2> = <nat:6> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:6> * <var:Q> /\ <var:r> = <nat:6> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:g0> = <nat:2> /\ <var:r> = <nat:6> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:r> = <nat:6> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 