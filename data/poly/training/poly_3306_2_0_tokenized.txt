\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:1> ; <var:f> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing , letting whole numbers $ <var:B> $ , that $ <var:x> = <var:B> $ prior to running this list of instructions , it follows that we have $ <var:f> = <nat:1> $ once list of commands has finished executing . \end{theorem} \begin{proof} Observe the following decorated program . \begin{eqnarray} \{ <var:x> = <var:B> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:x> = <var:B> \land <var:G0> = <nat:1> \} \\ <var:f> := <var:G0> \\ \{ <var:x> = <var:B> \land <var:f> = <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:f> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:x> = <var:B> }} <def:poly> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 