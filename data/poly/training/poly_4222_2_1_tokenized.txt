\begin{document} \begin{theorem} Take a segment of code such that \begin{verbatim} <var:T0> := <nat:9> ; <var:s> := <var:T0> \end{verbatim} Assume , given some whole numbers $ <var:K> $ , it to hold that $ <var:q> = <var:K> $ prior to running our list of instructions it follows that $ <var:s> = <nat:9> $ . \end{theorem} \begin{proof} Applying Hoare techniques produces : \begin{eqnarray} \{ <var:q> = <var:K> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:q> = <var:K> \land <var:T0> = <nat:9> \} \\ <var:s> := <var:T0> \\ \{ <var:q> = <var:K> \land <var:s> = <nat:9> \} \end{eqnarray} As a result , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:q> = <var:K> }} <var:T0> := <nat:9> ; <var:s> := <var:T0> {{ <var:s> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:s> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 