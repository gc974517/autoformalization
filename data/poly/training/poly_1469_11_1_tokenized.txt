\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:H> ; <var:R2> := <var:R1> * <var:H> ; <var:R3> := <var:R2> * <var:H> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:1> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:9> ; <var:d> := <var:R3> <var:d> := <var:d> + <var:R2> <var:d> := <var:d> + <var:R1> <var:d> := <var:d> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:H> = <var:x> $ given all natural numbers $ <var:x> $ before running this list of commands it holds that $ <var:d> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:2> $ once set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:x> \} \\ <var:R1> := <var:H> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <var:x> \} \\ <var:R2> := <var:R1> * <var:H> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:H> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <nat:1> \cdot <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R2> := <var:R2> * <nat:1> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <nat:1> \cdot <var:x> \land <var:R2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R3> := <var:R3> * <nat:9> ; \\ \{ <var:H> = <var:x> \land <var:R1> = <nat:1> \cdot <var:x> \land <var:R2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:x> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:d> := <var:R3> \\ \{ <var:H> = <var:x> \land <var:R1> = <nat:1> \cdot <var:x> \land <var:R2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:R0> = <nat:2> \land <var:d> = <nat:9> \cdot <var:x> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:R2> \\ \{ <var:H> = <var:x> \land <var:R1> = <nat:1> \cdot <var:x> \land <var:R0> = <nat:2> \land <var:d> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:R1> \\ \{ <var:H> = <var:x> \land <var:R0> = <nat:2> \land <var:d> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:d> := <var:d> + <var:R0> \\ \{ <var:H> = <var:x> \land <var:d> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:2> \} \end{eqnarray} The application of Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:H> ; <var:R2> := <var:R1> * <var:H> ; <var:R3> := <var:R2> * <var:H> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:1> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:9> ; <var:d> := <var:R3> <var:d> := <var:d> + <var:R2> <var:d> := <var:d> + <var:R1> <var:d> := <var:d> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <def:poly> {{ <var:d> = <nat:9> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <var:x> /\ <var:R2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <var:x> /\ <var:R2> = <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <var:x> /\ <var:R2> = <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <nat:1> * <var:x> /\ <var:R2> = <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <nat:1> * <var:x> /\ <var:R2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <nat:1> * <var:x> /\ <var:R2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:x> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <nat:1> * <var:x> /\ <var:R2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:R0> = <nat:2> /\ <var:d> = <nat:9> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R1> = <nat:1> * <var:x> /\ <var:R0> = <nat:2> /\ <var:d> = <nat:9> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:R0> = <nat:2> /\ <var:d> = <nat:9> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:d> = <nat:9> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 