\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:8> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:J> ; <var:k> := <var:M1> ; <var:k> := <var:k> + <var:M0> \end{verbatim} Assume it to be that $ <var:J> = <var:K> $ before the execution of our list of instructions it holds that we have $ <var:k> = <nat:4> * <var:K> + <nat:8> $ once series of commands exits . \end{theorem} \begin{proof} Utilizing typical Hoare techniques results in : \begin{eqnarray} \{ <var:J> = <var:K> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:J> = <var:K> \land <var:M0> = <nat:8> \} \end{eqnarray} Allowing evaluating the segment of code gives us : \begin{eqnarray} <var:M1> := <nat:4> ; \\ \{ <var:J> = <var:K> \land <var:M0> = <nat:8> \land <var:M1> = <nat:4> \} \\ <var:M1> := <var:M1> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:M0> = <nat:8> \land <var:M1> = <nat:4> * <var:K> \} \\ <var:k> := <var:M1> ; \\ \{ <var:J> = <var:K> \land <var:M0> = <nat:8> \land <var:k> = <nat:4> * <var:K> \} \\ <var:k> := <var:k> + <var:M0> \\ \{ <var:J> = <var:K> \land <var:k> = <nat:4> * <var:K> + <nat:8> \} \end{eqnarray} Therefore , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <var:M0> := <nat:8> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:J> ; <var:k> := <var:M1> ; <var:k> := <var:k> + <var:M0> {{ <var:k> = <nat:4> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:M0> = <nat:8> /\ <var:k> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:k> = <nat:4> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 