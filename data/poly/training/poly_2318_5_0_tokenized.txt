\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:8> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:Z> ; <var:f> := <var:j1> ; <var:f> := <var:f> + <var:j0> \end{verbatim} Assuming $ <var:Z> = <var:g> $ ( with some positive integers $ <var:g> $ ) ahead of the evaluation of the code segment , it must be that $ <var:f> = <nat:8> \cdot <var:g> + <nat:8> $ after code segment executes . \end{theorem} \begin{proof} The proof of the series of commands is evident by standard Hoare logic . Stepping forward , we have \begin{eqnarray} \{ <var:Z> = <var:g> \} \, <var:j0> := <nat:8> \, \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \} \\ \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \} \, <var:j1> := <nat:8> \, \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \land <var:j1> = <nat:8> \} \\ \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \land <var:j1> = <nat:8> \} \, <var:j1> := <var:j1> * <var:Z> \, \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \land <var:j1> = <nat:8> \times <var:g> \} \end{eqnarray} This is rigorously given with the variable binding law obtained from usual Hoare techniques . Moving onward , \begin{eqnarray} \{ <var:Z> = <var:g> \} \, <var:j0> := <nat:8> \, \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \} \\ \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \} \, <var:j1> := <nat:8> \, \{ <var:Z> = <var:g> \land <var:j0> = <nat:8> \land <var:j1> = <nat:8> \} \end{eqnarray} This is sound through the variable update inference rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Z> = <var:g> }} <var:j0> := <nat:8> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:Z> ; <var:f> := <var:j1> ; <var:f> := <var:f> + <var:j0> {{ <var:f> = <nat:8> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:j0> = <nat:8> /\ <var:f> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:f> = <nat:8> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 