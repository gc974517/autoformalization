\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:R> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:6> ; <var:b> := <var:B1> <var:b> := <var:b> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Assume that $ <var:R> = <var:m> $ ahead of evaluating this series of commands , it holds that we see $ <var:b> = <nat:6> \times <var:m> + <nat:7> $ . \end{theorem} \begin{proof} The proof of our code segment is clear through standard Hoare techniques . Moving forward to the following line found in the series of instructions , we have the line yielding $ <var:R> $ as $ <var:B1>$ . This forwards the precondition $ \{ <var:R> = <var:m> \} $ into $ \{ <var:R> = <var:m> \land <var:B1> = <var:m> \} $ . Looking at the upcoming line found in the set of commands , we see the variable binding statement \verb | <var:B0> := <nat:7> ; | . This forwards the precondition $ \{ <var:R> = <var:m> \land <var:B1> = <var:m> \} $ to $ \{ <var:R> = <var:m> \land <var:B1> = <var:m> \land <var:B0> = <nat:7> \} $ . This is deduced through the assignment law of standard Hoare logic . Paying attention to the upcoming statement contained in the code , we see the variable binding command \verb | <var:B1> := <var:B1> * <nat:6> ; | . This moves $ \{ <var:R> = <var:m> \land <var:B1> = <var:m> \land <var:B0> = <nat:7> \} $ toward $ \{ <var:R> = <var:m> \land <var:B1> = <nat:6> * <var:m> \land <var:B0> = <nat:7> \} $ . This is deduced through the assignment inference rule obtained from standard Hoare reasoning . Advancing to the proceeding bit of code seen in our set of instructions , we see the variable assignmet line \verb | <var:b> := <var:B1> | . This redefines the condition $ \{ <var:R> = <var:m> \land <var:B1> = <nat:6> * <var:m> \land <var:B0> = <nat:7> \} $ to the condition $ \{ <var:R> = <var:m> \land <var:B0> = <nat:7> \land <var:b> = <nat:6> * <var:m> \} $ . This is given by the assignment inference rule defined by typical Hoare techniques . Focusing on the next step found in our list of commands , we have the environment update code binding $ <var:b> + <var:B0$ into $ <var:b>$ . This statement takes $ \{ <var:R> = <var:m> \land <var:B0> = <nat:7> \land <var:b> = <nat:6> * <var:m> \} $ into $ \{ <var:R> = <var:m> \land <var:b> = <nat:6> * <var:m> + <nat:7> \} $ . This is deduced using the assignment inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:R> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:6> ; <var:b> := <var:B1> <var:b> := <var:b> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <def:poly> {{ <var:b> = <nat:6> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:B1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:B1> = <var:m> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:B1> = <nat:6> * <var:m> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:B0> = <nat:7> /\ <var:b> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:b> = <nat:6> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 