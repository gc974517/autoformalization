\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:3> ; <var:i> := <var:z0> \end{verbatim} Assume it to hold that $ <var:t> = <var:Y> $ given some natural coefficients $ <var:Y> $ prior to interpreting this set of commands it must be that we see $ <var:i> = <nat:3> $ after code has terminated . \end{theorem} \begin{proof} The method of proof for this list of commands can be given by typical Hoare logic . Immediately after , we see the assignment command letting $ <nat:3> $ as $ <var:z0>$ . This takes $ \{ <var:t> = <var:Y> \} $ toward the postcondition $ \{ <var:t> = <var:Y> \land <var:z0> = <nat:3> \} $ . This is shown through the assignment scheme given by typical Hoare techniques . Jumping to the subsequent line seen in our program , we have the variable assignmet line \verb | <var:i> := <var:z0> | . This transfers the condition $ \{ <var:t> = <var:Y> \land <var:z0> = <nat:3> \} $ to the condition $ \{ <var:t> = <var:Y> \land <var:i> = <nat:3> \} $ . This is guaranteed through the assignment scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:t> = <var:Y> }} <var:z0> := <nat:3> ; <var:i> := <var:z0> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 