\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:P> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:2> ; <var:X> := <var:d1> <var:X> := <var:X> + <var:d0> \end{verbatim} Allow $ <var:P> = <var:g> $ before interpreting this program , then we see $ <var:X> = <nat:2> \cdot <var:g> + <nat:4> $ once set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:g> \} \\ <var:d1> := <var:P> ; \\ \{ <var:P> = <var:g> \land <var:d1> = <var:g> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:P> = <var:g> \land <var:d1> = <var:g> \land <var:d0> = <nat:4> \} \\ <var:d1> := <var:d1> * <nat:2> ; \\ \{ <var:P> = <var:g> \land <var:d1> = <nat:2> * <var:g> \land <var:d0> = <nat:4> \} \\ <var:X> := <var:d1> \\ \{ <var:P> = <var:g> \land <var:d0> = <nat:4> \land <var:X> = <nat:2> * <var:g> \} \\ <var:X> := <var:X> + <var:d0> \\ \{ <var:P> = <var:g> \land <var:X> = <nat:2> * <var:g> + <nat:4> \} \end{eqnarray} Using Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:P> = <var:g> }} <var:d1> := <var:P> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:2> ; <var:X> := <var:d1> <var:X> := <var:X> + <var:d0> {{ <var:X> = <nat:2> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:d1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:d1> = <var:g> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:d1> = <nat:2> * <var:g> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:d0> = <nat:4> /\ <var:X> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:X> = <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 