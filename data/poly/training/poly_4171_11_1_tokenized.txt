\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as \begin{verbatim} <var:b1> := <var:g> ; <var:b2> := <var:b1> * <var:g> ; <var:b3> := <var:b2> * <var:g> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:3> ; <var:x> := <var:b3> <var:x> := <var:x> + <var:b2> <var:x> := <var:x> + <var:b1> <var:x> := <var:x> + <var:b0> \end{verbatim} Assuming that we have $ <var:g> = <var:t> $ --- taking $ <var:t> \in \mathbb{N} $ --- prior to running this segment of code , it holds that $ <var:x> = <nat:3> \times <var:t> ^ <nat:3> + <nat:1> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:g> = <var:t> \} \\ <var:b1> := <var:g> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <var:t> \} \\ <var:b2> := <var:b1> * <var:g> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <var:t> \land <var:b2> = <var:t> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:g> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <var:t> \land <var:b2> = <var:t> ^ <nat:2> \land <var:b3> = <var:t> ^ <nat:3> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <var:t> \land <var:b2> = <var:t> ^ <nat:2> \land <var:b3> = <var:t> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b1> := <var:b1> * <nat:4> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <nat:4> * <var:t> \land <var:b2> = <var:t> ^ <nat:2> \land <var:b3> = <var:t> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b2> := <var:b2> * <nat:1> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <nat:4> * <var:t> \land <var:b2> = <nat:1> * <var:t> ^ <nat:2> \land <var:b3> = <var:t> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b3> := <var:b3> * <nat:3> ; \\ \{ <var:g> = <var:t> \land <var:b1> = <nat:4> * <var:t> \land <var:b2> = <nat:1> * <var:t> ^ <nat:2> \land <var:b3> = <nat:3> * <var:t> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:x> := <var:b3> \\ \{ <var:g> = <var:t> \land <var:b1> = <nat:4> * <var:t> \land <var:b2> = <nat:1> * <var:t> ^ <nat:2> \land <var:b0> = <nat:3> \land <var:x> = <nat:3> * <var:t> ^ <nat:3> \} \end{eqnarray} Allowing the evaluation of our set of instructions results in : \begin{eqnarray} <var:x> := <var:x> + <var:b2> \\ \{ <var:g> = <var:t> \land <var:b1> = <nat:4> * <var:t> \land <var:b0> = <nat:3> \land <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:b1> \\ \{ <var:g> = <var:t> \land <var:b0> = <nat:3> \land <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> \} \\ <var:x> := <var:x> + <var:b0> \\ \{ <var:g> = <var:t> \land <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> \} \end{eqnarray} Advancing the execution of our program produces : \begin{eqnarray} \end{eqnarray} Hence , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:g> = <var:t> }} <var:b1> := <var:g> ; <var:b2> := <var:b1> * <var:g> ; <var:b3> := <var:b2> * <var:g> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:3> ; <var:x> := <var:b3> <var:x> := <var:x> + <var:b2> <var:x> := <var:x> + <var:b1> <var:x> := <var:x> + <var:b0> {{ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <var:t> /\ <var:b2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <var:t> /\ <var:b2> = <var:t> ^ <nat:2> /\ <var:b3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <var:t> /\ <var:b2> = <var:t> ^ <nat:2> /\ <var:b3> = <var:t> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <nat:4> * <var:t> /\ <var:b2> = <var:t> ^ <nat:2> /\ <var:b3> = <var:t> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <nat:4> * <var:t> /\ <var:b2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:b3> = <var:t> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <nat:4> * <var:t> /\ <var:b2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <nat:4> * <var:t> /\ <var:b2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:b0> = <nat:3> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b1> = <nat:4> * <var:t> /\ <var:b0> = <nat:3> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:b0> = <nat:3> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 