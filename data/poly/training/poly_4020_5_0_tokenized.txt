\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:g> ; <var:x> := <var:Y1> ; <var:x> := <var:x> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assume , given any natural numbers $ <var:B> $ , $ <var:g> = <var:B> $ before the evaluation of our list of instructions then we see $ <var:x> = <nat:9> \cdot <var:B> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is given using this decorated segment of code . \begin{eqnarray} \{ <var:g> = <var:B> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:g> = <var:B> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <nat:9> ; \\ \{ <var:g> = <var:B> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:9> \} \\ <var:Y1> := <var:Y1> * <var:g> ; \\ \{ <var:g> = <var:B> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:9> \cdot <var:B> \} \\ <var:x> := <var:Y1> ; \\ \{ <var:g> = <var:B> \land <var:Y0> = <nat:2> \land <var:x> = <nat:9> \cdot <var:B> \} \\ <var:x> := <var:x> + <var:Y0> \\ \{ <var:g> = <var:B> \land <var:x> = <nat:9> \cdot <var:B> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:g> ; <var:x> := <var:Y1> ; <var:x> := <var:x> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:g> = <var:B> }} <def:poly> {{ <var:x> = <nat:9> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:Y0> = <nat:2> /\ <var:x> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:x> = <nat:9> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 