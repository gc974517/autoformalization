\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:7> ; <var:k> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Given --- assuming some $ <var:D> \in \mathbb{Z}^+ $ --- it to hold that $ <var:U> = <var:D> $ prior to executing our code it follows that we see $ <var:k> = <nat:7> $ when series of commands has terminated . \end{theorem} \begin{proof} Using typical Hoare logic gives : \begin{eqnarray} \{ <var:U> = <var:D> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:U> = <var:D> \land <var:w0> = <nat:7> \} \\ <var:k> := <var:w0> \\ \{ <var:U> = <var:D> \land <var:k> = <nat:7> \} \end{eqnarray} As a result , this set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:7> ; <var:k> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <def:poly> {{ <var:k> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:k> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 