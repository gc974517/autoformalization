\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:1> ; <var:F> := <var:E0> \end{verbatim} Allow it to hold that $ <var:g> = <var:f> $ ahead of evaluating this list of commands , then $ <var:F> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our program can be accomplished through the following decorated set of instructions . \begin{eqnarray} \{ <var:g> = <var:f> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:g> = <var:f> \land <var:E0> = <nat:1> \} \\ <var:F> := <var:E0> \\ \{ <var:g> = <var:f> \land <var:F> = <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:g> = <var:f> }} <var:E0> := <nat:1> ; <var:F> := <var:E0> {{ <var:F> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:F> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 