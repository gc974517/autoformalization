\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:l> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:3> ; <var:e> := <var:g1> <var:e> := <var:e> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:l> = <var:h> $ ( given some $ <var:h> \in \mathbb{Z}^+ $ ) ahead of the evaluation of the code , then we see $ <var:e> = <nat:3> * <var:h> + <nat:1> $ when series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:h> \} \\ <var:g1> := <var:l> ; \\ \{ <var:l> = <var:h> \land <var:g1> = <var:h> \} \end{eqnarray} Advancing the evaluation of the list of instructions yields : \begin{eqnarray} <var:g0> := <nat:1> ; \\ \{ <var:l> = <var:h> \land <var:g1> = <var:h> \land <var:g0> = <nat:1> \} \end{eqnarray} Advancing evaluating this set of commands produces : \begin{eqnarray} <var:g1> := <var:g1> * <nat:3> ; \\ \{ <var:l> = <var:h> \land <var:g1> = <nat:3> \times <var:h> \land <var:g0> = <nat:1> \} \\ <var:e> := <var:g1> \\ \{ <var:l> = <var:h> \land <var:g0> = <nat:1> \land <var:e> = <nat:3> \times <var:h> \} \\ <var:e> := <var:e> + <var:g0> \\ \{ <var:l> = <var:h> \land <var:e> = <nat:3> \times <var:h> + <nat:1> \} \end{eqnarray} Using Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:l> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:3> ; <var:e> := <var:g1> <var:e> := <var:e> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:l> = <var:h> }} <def:poly> {{ <var:e> = <nat:3> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:g1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:g1> = <var:h> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:g1> = <nat:3> * <var:h> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:g0> = <nat:1> /\ <var:e> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:e> = <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 