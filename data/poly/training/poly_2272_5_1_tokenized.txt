\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as \begin{verbatim} <var:c1> := <var:u> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:7> ; <var:A> := <var:c1> <var:A> := <var:A> + <var:c0> \end{verbatim} Assuming , given any positive numbers $ <var:R> $ , that $ <var:u> = <var:R> $ prior to executing this series of instructions it holds that we see $ <var:A> = <nat:7> * <var:R> + <nat:6> $ . \end{theorem} \begin{proof} The argument for this list of instructions is demonstrated through Hoare techniques . Looking at the next bits of codeseen in our set of instructions , we have \begin{eqnarray} \{ <var:u> = <var:R> \} \, <var:c1> := <var:u> \, \{ <var:u> = <var:R> \land <var:c1> = <var:R> \} \\ \{ <var:u> = <var:R> \land <var:c1> = <var:R> \} \, <var:c0> := <nat:6> \, \{ <var:u> = <var:R> \land <var:c1> = <var:R> \land <var:c0> = <nat:6> \} \\ \{ <var:u> = <var:R> \land <var:c1> = <var:R> \land <var:c0> = <nat:6> \} \, <var:c1> := <var:c1> * <nat:7> \, \{ <var:u> = <var:R> \land <var:c1> = <nat:7> * <var:R> \land <var:c0> = <nat:6> \} \\ \{ <var:u> = <var:R> \land <var:c1> = <nat:7> * <var:R> \land <var:c0> = <nat:6> \} \, <var:A> := <var:c1\, \{ <var:u> = <var:R> \land <var:c0> = <nat:6> \land <var:A> = <nat:7> * <var:R> \} \end{eqnarray} Advancing to the following piece of code found in the list of instructions , we see \begin{eqnarray} \{ <var:u> = <var:R> \} \, <var:c1> := <var:u> \, \{ <var:u> = <var:R> \land <var:c1> = <var:R> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:u> = <var:R> }} <var:c1> := <var:u> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:7> ; <var:A> := <var:c1> <var:A> := <var:A> + <var:c0> {{ <var:A> = <nat:7> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:c1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:c1> = <var:R> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:c1> = <nat:7> * <var:R> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:c0> = <nat:6> /\ <var:A> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:A> = <nat:7> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 