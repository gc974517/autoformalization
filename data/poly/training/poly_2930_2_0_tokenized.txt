\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:9> ; <var:O> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:q> = <var:v> $ prior to the execution of the set of instructions , it must be that we have $ <var:O> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be given by standard Hoare logic . Immediately after , we have the variable binding code giving $ <nat:9> $ as $ <var:H0>$ . This statement takes the condition $ \{ <var:q> = <var:v> \} $ toward the condition $ \{ <var:q> = <var:v> \land <var:H0> = <nat:9> \} $ . This is rigorously given using the assignment inference rule defined in Hoare logic . Taking a look at the subsequent line contained in our series of commands , we see the variable assignmet command yielding $ <var:H0$ to $ <var:O>$ . This statement transfers $ \{ <var:q> = <var:v> \land <var:H0> = <nat:9> \} $ as $ \{ <var:q> = <var:v> \land <var:O> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:O> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:q> = <var:v> }} <def:poly> {{ <var:O> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:O> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 