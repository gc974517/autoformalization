\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G1> := <var:h> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:5> ; <var:o> := <var:G1> <var:o> := <var:o> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allow it to hold that $ <var:h> = <var:g> $ before evaluating the series of instructions , it follows that we have $ <var:o> = <nat:5> \cdot <var:g> + <nat:2> $ when list of instructions terminates . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:h> = <var:g> \} \\ <var:G1> := <var:h> ; \\ \{ <var:h> = <var:g> \land <var:G1> = <var:g> \} \\ <var:G0> := <nat:2> ; \\ \{ <var:h> = <var:g> \land <var:G1> = <var:g> \land <var:G0> = <nat:2> \} \\ <var:G1> := <var:G1> * <nat:5> ; \\ \{ <var:h> = <var:g> \land <var:G1> = <nat:5> * <var:g> \land <var:G0> = <nat:2> \} \\ <var:o> := <var:G1> \\ \{ <var:h> = <var:g> \land <var:G0> = <nat:2> \land <var:o> = <nat:5> * <var:g> \} \\ <var:o> := <var:o> + <var:G0> \\ \{ <var:h> = <var:g> \land <var:o> = <nat:5> * <var:g> + <nat:2> \} \end{eqnarray} Considering the above , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:h> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:5> ; <var:o> := <var:G1> <var:o> := <var:o> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <def:poly> {{ <var:o> = <nat:5> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:G1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:G1> = <var:g> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:G1> = <nat:5> * <var:g> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:G0> = <nat:2> /\ <var:o> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:o> = <nat:5> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 