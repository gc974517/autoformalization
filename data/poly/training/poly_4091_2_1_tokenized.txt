\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:6> ; <var:f> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Given that $ <var:L> = <var:g> $ before executing this program it holds that we see $ <var:f> = <nat:6> $ after series of instructions has terminated . \end{theorem} \begin{proof} Note that the following decorated segment of code . \begin{eqnarray} \{ <var:L> = <var:g> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:L> = <var:g> \land <var:b0> = <nat:6> \} \\ <var:f> := <var:b0> \\ \{ <var:L> = <var:g> \land <var:f> = <nat:6> \} \end{eqnarray} Using typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:6> ; <var:f> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:L> = <var:g> }} <def:poly> {{ <var:f> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:f> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 