\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:6> ; <var:Z> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:s> = <var:c> $ prior to running our code segment it follows that we have $ <var:Z> = <nat:6> $ after segment of code executes . \end{theorem} \begin{proof} The proof of our code segment is done with typical Hoare techniques . Shifting focus toward the subsequent bit of code contained in the program , we have the environment update line \verb | <var:M0> := <nat:6> ; | . This transfers the condition $ \{ <var:s> = <var:c> \} $ as $ \{ <var:s> = <var:c> \land <var:M0> = <nat:6> \} $ . This is given by the assignment inference rule given in Hoare logic . Jumping to the upcoming line of code seen in our series of commands , the assignment line giving $ <var:M0$ into $ <var:Z>$ . This redefines $ \{ <var:s> = <var:c> \land <var:M0> = <nat:6> \} $ to the postcondition $ \{ <var:s> = <var:c> \land <var:Z> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:Z> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:s> = <var:c> }} <def:poly> {{ <var:Z> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:Z> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 