\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p1> := <var:o> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:2> ; <var:J> := <var:p1> <var:J> := <var:J> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Allow $ <var:o> = <var:y> $ ahead of evaluating this list of commands then $ <var:J> = <nat:2> * <var:y> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our set of commands is accomplished using standard Hoare techniques . Shifting focus toward the upcoming statement in the series of commands , the assignment line letting $ <var:o> $ to $ <var:p1>$ . This statement forwards the precondition $ \{ <var:o> = <var:y> \} $ to $ \{ <var:o> = <var:y> \land <var:p1> = <var:y> \} $ . Keeping momentum , we see the binding command \verb | <var:p0> := <nat:4> ; | . This advances $ \{ <var:o> = <var:y> \land <var:p1> = <var:y> \} $ into the postcondition $ \{ <var:o> = <var:y> \land <var:p1> = <var:y> \land <var:p0> = <nat:4> \} $ . This is ensured using the assignment scheme obtained from usual Hoare reasoning . Moving onward , we see the binding code \verb | <var:p1> := <var:p1> * <nat:2> ; | . This redefines the condition $ \{ <var:o> = <var:y> \land <var:p1> = <var:y> \land <var:p0> = <nat:4> \} $ to the postcondition $ \{ <var:o> = <var:y> \land <var:p1> = <nat:2> \cdot <var:y> \land <var:p0> = <nat:4> \} $ . This is guaranteed through the assignment inference rule given by Hoare techniques . Moving forward to the next step , we see the line \verb | <var:J> := <var:p1> | . This line takes $ \{ <var:o> = <var:y> \land <var:p1> = <nat:2> \cdot <var:y> \land <var:p0> = <nat:4> \} $ as the condition $ \{ <var:o> = <var:y> \land <var:p0> = <nat:4> \land <var:J> = <nat:2> \cdot <var:y> \} $ . Focusing on the next line of code found in our list of instructions , we have the variable assignmet line binding $ <var:J> + <var:p0$ to $ <var:J>$ . This command redefines the condition $ \{ <var:o> = <var:y> \land <var:p0> = <nat:4> \land <var:J> = <nat:2> \cdot <var:y> \} $ to the postcondition $ \{ <var:o> = <var:y> \land <var:J> = <nat:2> \cdot <var:y> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p1> := <var:o> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:2> ; <var:J> := <var:p1> <var:J> := <var:J> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <def:poly> {{ <var:J> = <nat:2> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:p1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:p1> = <var:y> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:p1> = <nat:2> * <var:y> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:p0> = <nat:4> /\ <var:J> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:J> = <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 