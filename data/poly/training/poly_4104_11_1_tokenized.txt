\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:R> ; <var:n2> := <var:n1> * <var:R> ; <var:n3> := <var:n2> * <var:R> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:5> ; <var:h> := <var:n3> <var:h> := <var:h> + <var:n2> <var:h> := <var:h> + <var:n1> <var:h> := <var:h> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:R> = <var:k> $ --- for some whole numbers $ <var:k> $ --- prior to the evaluation of the program , it follows that $ <var:h> = <nat:5> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be shown with Hoare reasoning . Moving on to the next step , we see the variable update line \verb | <var:n1> := <var:R> ; | . This advances $ \{ <var:R> = <var:k> \} $ to the condition $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \} $ . This is shown to be logically sound by the assignment law found in Hoare techniques . Honing in on the following line of code in the set of instructions , we see the variable binding code giving $ <var:n1> * <var:R> $ into $ <var:n2>$ . This code forwards the precondition $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \} $ toward the condition $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \} $ . Considering the upcoming line of code contained in the code , we see the binding statement \verb | <var:n3> := <var:n2> * <var:R> ; | . This transfers the precondition $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \} $ toward $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \} $ . Paying attention to the next statement contained in the series of instructions , we see the binding line giving $ <nat:3> $ into $ <var:n0>$ . This takes the precondition $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \} $ into $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . This is guaranteed by the assignment scheme from standard Hoare techniques . Now , we see the variable assignmet line letting $ <var:n1> * <nat:3> $ as $ <var:n1>$ . This command moves the condition $ \{ <var:R> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . Moving on to the upcoming statement found in the set of instructions , we have the assignment command giving $ <var:n2> * <nat:2> $ as $ <var:n2>$ . This takes the precondition $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ as $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . Honing in on the following command seen in the series of commands , the variable binding line defining $ <var:n3> * <nat:5> $ into $ <var:n3>$ . This line advances the condition $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ to the condition $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:n3> = <nat:5> \times <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . Observing the proceeding piece of code in the set of commands , we have the statement \verb | <var:h> := <var:n3> | . This line advances the condition $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:n3> = <nat:5> \times <var:k> ^ <nat:3> \land <var:n0> = <nat:3> \} $ as $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:n0> = <nat:3> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> \} $ . This is shown through the assignment law from usual Hoare logic . Immediately following , the statement defining $ <var:h> + <var:n2$ into $ <var:h>$ . This redefines the precondition $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:n0> = <nat:3> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> \} $ into $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n0> = <nat:3> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> \} $ . Observing the proceeding line in our series of commands , we have the command \verb | <var:h> := <var:h> + <var:n1> | . This forwards $ \{ <var:R> = <var:k> \land <var:n1> = <nat:3> \times <var:k> \land <var:n0> = <nat:3> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> \} $ into the condition $ \{ <var:R> = <var:k> \land <var:n0> = <nat:3> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> \} $ . Taking another step toward the following line of code in our code , we see the variable binding statement giving $ <var:h> + <var:n0$ into $ <var:h>$ . This forwards the condition $ \{ <var:R> = <var:k> \land <var:n0> = <nat:3> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> \} $ to the condition $ \{ <var:R> = <var:k> \land <var:h> = <nat:5> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:R> ; <var:n2> := <var:n1> * <var:R> ; <var:n3> := <var:n2> * <var:R> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:5> ; <var:h> := <var:n3> <var:h> := <var:h> + <var:n2> <var:h> := <var:h> + <var:n1> <var:h> := <var:h> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <def:poly> {{ <var:h> = <nat:5> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <var:k> /\ <var:n2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <var:k> /\ <var:n2> = <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <var:k> /\ <var:n2> = <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <nat:3> * <var:k> /\ <var:n2> = <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <nat:3> * <var:k> /\ <var:n2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <nat:3> * <var:k> /\ <var:n2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:n3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <nat:3> * <var:k> /\ <var:n2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:n0> = <nat:3> /\ <var:h> = <nat:5> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n1> = <nat:3> * <var:k> /\ <var:n0> = <nat:3> /\ <var:h> = <nat:5> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:n0> = <nat:3> /\ <var:h> = <nat:5> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:h> = <nat:5> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 