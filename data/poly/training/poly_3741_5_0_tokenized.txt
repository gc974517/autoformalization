\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:1> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:w> ; <var:X> := <var:e1> ; <var:X> := <var:X> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:w> = <var:s> $ prior to executing our series of instructions , it must be that $ <var:X> = <nat:2> * <var:s> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this program can be shown using standard Hoare techniques . Focusing on the upcoming statements found in our code segment , we see \begin{verbatim} { <var:w> = <var:s> } <var:e0> := <nat:1> { <var:w> = <var:s> \land <var:e0> = <nat:1> } { <var:w> = <var:s> \land <var:e0> = <nat:1> } <var:e1> := <nat:2> { <var:w> = <var:s> \land <var:e0> = <nat:1> \land <var:e1> = <nat:2> } \end{verbatim} This is ensured by the assignment inference rule obtained from usual Hoare reasoning . Moving forward to the next commands in the set of instructions , \begin{verbatim} { <var:w> = <var:s> } <var:e0> := <nat:1> { <var:w> = <var:s> \land <var:e0> = <nat:1> } { <var:w> = <var:s> \land <var:e0> = <nat:1> } <var:e1> := <nat:2> { <var:w> = <var:s> \land <var:e0> = <nat:1> \land <var:e1> = <nat:2> } \end{verbatim} Observing the next step found in the program , we have \begin{verbatim} { <var:w> = <var:s> } <var:e0> := <nat:1> { <var:w> = <var:s> \land <var:e0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:1> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:w> ; <var:X> := <var:e1> ; <var:X> := <var:X> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:w> = <var:s> }} <def:poly> {{ <var:X> = <nat:2> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:e0> = <nat:1> /\ <var:X> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:X> = <nat:2> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 