\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:3> + <var:B> * <var:E> ; <var:B> := <nat:4> + <var:B> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Allow $ <var:E> = <var:G> $ before the execution of this list of instructions then $ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is done using the below decorated list of instructions . \begin{eqnarray} \{ <var:E> = <var:G> \} \\ <var:B> := <nat:3> ; \\ \{ <var:E> = <var:G> \land <var:B> = <nat:3> \} \\ <var:B> := <nat:3> + <var:B> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:B> = <nat:3> \cdot <var:G> + <nat:3> \} \\ <var:B> := <nat:4> + <var:B> * <var:E> \\ \{ <var:E> = <var:G> \land <var:B> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:3> ; <var:B> := <nat:3> + <var:B> * <var:E> ; <var:B> := <nat:4> + <var:B> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:E> = <var:G> }} <def:poly> {{ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:B> = <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 