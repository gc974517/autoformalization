\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:8> ; <var:r> := <var:m0> \end{verbatim} Assume it to hold that $ <var:k> = <var:l> $ ( for all positive numbers $ <var:l> $ ) ahead of running the set of commands it holds that we have $ <var:r> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:l> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:k> = <var:l> \land <var:m0> = <nat:8> \} \\ <var:r> := <var:m0> \\ \{ <var:k> = <var:l> \land <var:r> = <nat:8> \} \end{eqnarray} The application of typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:k> = <var:l> }} <var:m0> := <nat:8> ; <var:r> := <var:m0> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 