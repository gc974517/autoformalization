\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l3> := <var:l2> * <var:R> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:2> ; <var:l2> := <var:l2> * <nat:8> ; <var:l3> := <var:l3> * <nat:5> ; <var:O> := <var:l3> <var:O> := <var:O> + <var:l2> <var:O> := <var:O> + <var:l1> <var:O> := <var:O> + <var:l0> \end{verbatim} Allowing --- with some $ <var:g> \in \mathbb{N} $ --- that $ <var:R> = <var:g> $ prior to interpreting our code then we see $ <var:O> = <nat:5> \times <var:g> ^ <nat:3> + <nat:8> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> $ once list of commands executes . \end{theorem} \begin{proof} The method of proof for our program is accomplished through Hoare reasoning . Considering the subsequent pieces of code found in our code segment , we have \begin{verbatim} { <var:R> = <var:g> } <var:l1> := <var:R> { <var:R> = <var:g> \land <var:l1> = <var:g> } { <var:R> = <var:g> \land <var:l1> = <var:g> } <var:l2> := <var:l1> * <var:R> { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> } { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> } <var:l3> := <var:l2> * <var:R> { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> } { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> } <var:l0> := <nat:3> { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } <var:l1> := <var:l1> * <nat:2> { <var:R> = <var:g> \land <var:l1> = <nat:2> \cdot <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } { <var:R> = <var:g> \land <var:l1> = <nat:2> \cdot <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } <var:l2> := <var:l2> * <nat:8> { <var:R> = <var:g> \land <var:l1> = <nat:2> \cdot <var:g> \land <var:l2> = <nat:8> \cdot <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } { <var:R> = <var:g> \land <var:l1> = <nat:2> \cdot <var:g> \land <var:l2> = <nat:8> \cdot <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } <var:l3> := <var:l3> * <nat:5> { <var:R> = <var:g> \land <var:l1> = <nat:2> \cdot <var:g> \land <var:l2> = <nat:8> \cdot <var:g> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } \end{verbatim} This is deduced through the variable assignmet inference rule defined in usual Hoare logic . Following , we have \begin{verbatim} { <var:R> = <var:g> } <var:l1> := <var:R> { <var:R> = <var:g> \land <var:l1> = <var:g> } { <var:R> = <var:g> \land <var:l1> = <var:g> } <var:l2> := <var:l1> * <var:R> { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> } { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> } <var:l3> := <var:l2> * <var:R> { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> } { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> } <var:l0> := <nat:3> { <var:R> = <var:g> \land <var:l1> = <var:g> \land <var:l2> = <var:g> ^ <nat:2> \land <var:l3> = <var:g> ^ <nat:3> \land <var:l0> = <nat:3> } \end{verbatim} This is guaranteed with the variable assignmet inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:R> = <var:g> }} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l3> := <var:l2> * <var:R> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:2> ; <var:l2> := <var:l2> * <nat:8> ; <var:l3> := <var:l3> * <nat:5> ; <var:O> := <var:l3> <var:O> := <var:O> + <var:l2> <var:O> := <var:O> + <var:l1> <var:O> := <var:O> + <var:l0> {{ <var:O> = <nat:5> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <var:g> /\ <var:l2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <var:g> /\ <var:l2> = <var:g> ^ <nat:2> /\ <var:l3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <var:g> /\ <var:l2> = <var:g> ^ <nat:2> /\ <var:l3> = <var:g> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <nat:2> * <var:g> /\ <var:l2> = <var:g> ^ <nat:2> /\ <var:l3> = <var:g> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <nat:2> * <var:g> /\ <var:l2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:l3> = <var:g> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <nat:2> * <var:g> /\ <var:l2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:l3> = <nat:5> * <var:g> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <nat:2> * <var:g> /\ <var:l2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:O> = <nat:5> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l1> = <nat:2> * <var:g> /\ <var:l0> = <nat:3> /\ <var:O> = <nat:5> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:l0> = <nat:3> /\ <var:O> = <nat:5> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:g> /\ <var:O> = <nat:5> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 