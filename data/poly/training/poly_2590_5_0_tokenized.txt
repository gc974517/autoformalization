\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:9> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:c> ; <var:H> := <var:J1> ; <var:H> := <var:H> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Given that $ <var:c> = <var:q> $ ahead of the evaluation of this set of instructions it holds that we have $ <var:H> = <nat:2> * <var:q> + <nat:9> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:c> = <var:q> \} \\ <var:J0> := <nat:9> ; \\ \{ <var:c> = <var:q> \land <var:J0> = <nat:9> \} \\ <var:J1> := <nat:2> ; \\ \{ <var:c> = <var:q> \land <var:J0> = <nat:9> \land <var:J1> = <nat:2> \} \\ <var:J1> := <var:J1> * <var:c> ; \\ \{ <var:c> = <var:q> \land <var:J0> = <nat:9> \land <var:J1> = <nat:2> \cdot <var:q> \} \\ <var:H> := <var:J1> ; \\ \{ <var:c> = <var:q> \land <var:J0> = <nat:9> \land <var:H> = <nat:2> \cdot <var:q> \} \\ <var:H> := <var:H> + <var:J0> \\ \{ <var:c> = <var:q> \land <var:H> = <nat:2> \cdot <var:q> + <nat:9> \} \end{eqnarray} Considering the preceding argument , the series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:9> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:c> ; <var:H> := <var:J1> ; <var:H> := <var:H> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:c> = <var:q> }} <def:poly> {{ <var:H> = <nat:2> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:J0> = <nat:9> /\ <var:H> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:H> = <nat:2> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 