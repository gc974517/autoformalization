\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:1> ; <var:O> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Allow ( for any whole numbers $ <var:g> $ ) $ <var:x> = <var:g> $ prior to the evaluation of this code segment , it holds that $ <var:O> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands can be accomplished by usual Hoare logic . Focusing on the proceeding line of code contained in our segment of code , we see the environment update code binding $ <nat:1> $ into $ <var:b0>$ . This command transfers the condition $ \{ <var:x> = <var:g> \} $ to $ \{ <var:x> = <var:g> \land <var:b0> = <nat:1> \} $ . Moving onward , we see the variable binding command \verb | <var:O> := <var:b0> | . This line advances the condition $ \{ <var:x> = <var:g> \land <var:b0> = <nat:1> \} $ toward the condition $ \{ <var:x> = <var:g> \land <var:O> = <nat:1> \} $ . This is shown with the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:O> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:x> = <var:g> }} <def:poly> {{ <var:O> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:O> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 