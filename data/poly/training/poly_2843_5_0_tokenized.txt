\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:r> ; <var:I> := <var:k1> ; <var:I> := <var:I> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for all positive integer coefficients $ <var:b> $ --- that we have $ <var:r> = <var:b> $ before the evaluation of our set of commands , it holds that we see $ <var:I> = <nat:7> \times <var:b> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:b> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:r> = <var:b> \land <var:k0> = <nat:4> \} \\ <var:k1> := <nat:7> ; \\ \{ <var:r> = <var:b> \land <var:k0> = <nat:4> \land <var:k1> = <nat:7> \} \\ <var:k1> := <var:k1> * <var:r> ; \\ \{ <var:r> = <var:b> \land <var:k0> = <nat:4> \land <var:k1> = <nat:7> \times <var:b> \} \\ <var:I> := <var:k1> ; \\ \{ <var:r> = <var:b> \land <var:k0> = <nat:4> \land <var:I> = <nat:7> \times <var:b> \} \\ <var:I> := <var:I> + <var:k0> \\ \{ <var:r> = <var:b> \land <var:I> = <nat:7> \times <var:b> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:r> ; <var:I> := <var:k1> ; <var:I> := <var:I> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <def:poly> {{ <var:I> = <nat:7> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:k0> = <nat:4> /\ <var:I> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:I> = <nat:7> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 