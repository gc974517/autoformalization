\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:w> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:7> ; <var:c> := <var:N1> <var:c> := <var:c> + <var:N0> \end{verbatim} Allowing letting positive integer coefficients $ <var:V> $ it to be that $ <var:w> = <var:V> $ ahead of executing this segment of code then we have $ <var:c> = <nat:7> \times <var:V> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:V> \} \\ <var:N1> := <var:w> ; \\ \{ <var:w> = <var:V> \land <var:N1> = <var:V> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:w> = <var:V> \land <var:N1> = <var:V> \land <var:N0> = <nat:9> \} \\ <var:N1> := <var:N1> * <nat:7> ; \\ \{ <var:w> = <var:V> \land <var:N1> = <nat:7> \times <var:V> \land <var:N0> = <nat:9> \} \\ <var:c> := <var:N1> \\ \{ <var:w> = <var:V> \land <var:N0> = <nat:9> \land <var:c> = <nat:7> \times <var:V> \} \\ <var:c> := <var:c> + <var:N0> \\ \{ <var:w> = <var:V> \land <var:c> = <nat:7> \times <var:V> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:w> = <var:V> }} <var:N1> := <var:w> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:7> ; <var:c> := <var:N1> <var:c> := <var:c> + <var:N0> {{ <var:c> = <nat:7> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:N1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:N1> = <var:V> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:N1> = <nat:7> * <var:V> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:N0> = <nat:9> /\ <var:c> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:c> = <nat:7> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 