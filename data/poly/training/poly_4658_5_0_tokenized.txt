\begin{document} \begin{theorem} Consider the following program such that \begin{verbatim} <var:R0> := <nat:5> ; <var:R1> := <nat:1> ; <var:R1> := <var:R1> * <var:A> ; <var:a> := <var:R1> ; <var:a> := <var:a> + <var:R0> \end{verbatim} Allow $ <var:A> = <var:U> $ ( assuming some positive coefficients $ <var:U> $ ) prior to evaluating this set of commands , it holds that $ <var:a> = <nat:1> * <var:U> + <nat:5> $ after series of instructions has terminated . \end{theorem} \begin{proof} Observe that this decorated set of instructions . \begin{eqnarray} \{ <var:A> = <var:U> \} \\ <var:R0> := <nat:5> ; \\ \{ <var:A> = <var:U> \land <var:R0> = <nat:5> \} \\ <var:R1> := <nat:1> ; \\ \{ <var:A> = <var:U> \land <var:R0> = <nat:5> \land <var:R1> = <nat:1> \} \\ <var:R1> := <var:R1> * <var:A> ; \\ \{ <var:A> = <var:U> \land <var:R0> = <nat:5> \land <var:R1> = <nat:1> \cdot <var:U> \} \\ <var:a> := <var:R1> ; \\ \{ <var:A> = <var:U> \land <var:R0> = <nat:5> \land <var:a> = <nat:1> \cdot <var:U> \} \\ <var:a> := <var:a> + <var:R0> \\ \{ <var:A> = <var:U> \land <var:a> = <nat:1> \cdot <var:U> + <nat:5> \} \end{eqnarray} Utilizing usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:A> = <var:U> }} <var:R0> := <nat:5> ; <var:R1> := <nat:1> ; <var:R1> := <var:R1> * <var:A> ; <var:a> := <var:R1> ; <var:a> := <var:a> + <var:R0> {{ <var:a> = <nat:1> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:R0> = <nat:5> /\ <var:a> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:a> = <nat:1> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 