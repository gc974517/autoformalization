\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:Z> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:Z> ; <var:a2> := <var:a2> * <var:Z> ; <var:Q> := <var:a2> ; <var:Q> := <var:Q> + <var:a1> ; <var:Q> := <var:Q> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow ( with some integers $ <var:A> $ ) it to be that $ <var:Z> = <var:A> $ prior to running our list of instructions it follows that $ <var:Q> = <nat:3> \cdot <var:A> ^ <nat:2> + <nat:7> \cdot <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is clear using usual Hoare logic . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:A> \} & <var:a0> := <nat:4> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \} \end{tabular} Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:A> \} & <var:a0> := <nat:4> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \} \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \} & <var:a1> := <nat:7> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \} \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \} & <var:a1> := <var:a1> * <var:Z> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \} \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \} & <var:a2> := <nat:3> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:a2> = <nat:3> \} \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:a2> = <nat:3> \} & <var:a2> := <var:a2> * <var:Z> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:a2> = <nat:3> \cdot <var:A> \} \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:a2> = <nat:3> \cdot <var:A> \} & <var:a2> := <var:a2> * <var:Z> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:a2> = <nat:3> \cdot <var:A> ^ <nat:2> \} \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:a2> = <nat:3> \cdot <var:A> ^ <nat:2> \} & <var:Q> := <var:a2> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:7> \cdot <var:A> \land <var:Q> = <nat:3> \cdot <var:A> ^ <nat:2> \} \end{tabular} This is known to be sound using the variable assignmet rule in usual Hoare techniques . Observing the proceeding line seen in the code , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:A> \} & <var:a0> := <nat:4> & \{ <var:Z> = <var:A> \land <var:a0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:Z> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:Z> ; <var:a2> := <var:a2> * <var:Z> ; <var:Q> := <var:a2> ; <var:Q> := <var:Q> + <var:a1> ; <var:Q> := <var:Q> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Z> = <var:A> }} <def:poly> {{ <var:Q> = <nat:3> * <var:A> ^ <nat:2> + <nat:7> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:7> * <var:A> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:7> * <var:A> /\ <var:a2> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:7> * <var:A> /\ <var:a2> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:7> * <var:A> /\ <var:Q> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:4> /\ <var:Q> = <nat:3> * <var:A> ^ <nat:2> + <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Q> = <nat:3> * <var:A> ^ <nat:2> + <nat:7> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 