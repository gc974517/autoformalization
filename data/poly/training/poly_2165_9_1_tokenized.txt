\begin{document} \begin{theorem} Consider the following set of instructions : \begin{verbatim} <var:Y1> := <var:M> ; <var:Y2> := <var:Y1> * <var:M> ; <var:Y3> := <var:Y2> * <var:M> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y3> := <var:Y3> * <nat:3> ; <var:F> := <var:Y3> <var:F> := <var:F> + <var:Y1> <var:F> := <var:F> + <var:Y0> \end{verbatim} Allowing that $ <var:M> = <var:t> $ for positive integer coefficients $ <var:t> $ ahead of evaluating this list of commands , it must be that we see $ <var:F> = <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:M> = <var:t> \} \\ <var:Y1> := <var:M> ; \\ \{ <var:M> = <var:t> \land <var:Y1> = <var:t> \} \\ <var:Y2> := <var:Y1> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:Y1> = <var:t> \land <var:Y2> = <var:t> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:Y1> = <var:t> \land <var:Y2> = <var:t> ^ <nat:2> \land <var:Y3> = <var:t> ^ <nat:3> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:M> = <var:t> \land <var:Y1> = <var:t> \land <var:Y2> = <var:t> ^ <nat:2> \land <var:Y3> = <var:t> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <nat:2> ; \\ \{ <var:M> = <var:t> \land <var:Y1> = <nat:2> * <var:t> \land <var:Y2> = <var:t> ^ <nat:2> \land <var:Y3> = <var:t> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y3> := <var:Y3> * <nat:3> ; \\ \{ <var:M> = <var:t> \land <var:Y1> = <nat:2> * <var:t> \land <var:Y2> = <var:t> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:t> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:F> := <var:Y3> \\ \{ <var:M> = <var:t> \land <var:Y1> = <nat:2> * <var:t> \land <var:Y2> = <var:t> ^ <nat:2> \land <var:Y0> = <nat:4> \land <var:F> = <nat:3> * <var:t> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:Y1> \\ \{ <var:M> = <var:t> \land <var:Y0> = <nat:4> \land <var:F> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> \} \\ <var:F> := <var:F> + <var:Y0> \\ \{ <var:M> = <var:t> \land <var:F> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> + <nat:4> \} \end{eqnarray} As a result , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:M> = <var:t> }} <var:Y1> := <var:M> ; <var:Y2> := <var:Y1> * <var:M> ; <var:Y3> := <var:Y2> * <var:M> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y3> := <var:Y3> * <nat:3> ; <var:F> := <var:Y3> <var:F> := <var:F> + <var:Y1> <var:F> := <var:F> + <var:Y0> {{ <var:F> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <var:t> /\ <var:Y2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <var:t> /\ <var:Y2> = <var:t> ^ <nat:2> /\ <var:Y3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <var:t> /\ <var:Y2> = <var:t> ^ <nat:2> /\ <var:Y3> = <var:t> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <nat:2> * <var:t> /\ <var:Y2> = <var:t> ^ <nat:2> /\ <var:Y3> = <var:t> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <nat:2> * <var:t> /\ <var:Y2> = <var:t> ^ <nat:2> /\ <var:Y3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y1> = <nat:2> * <var:t> /\ <var:Y2> = <var:t> ^ <nat:2> /\ <var:Y0> = <nat:4> /\ <var:F> = <nat:3> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:Y0> = <nat:4> /\ <var:F> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:F> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 