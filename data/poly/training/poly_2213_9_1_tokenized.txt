\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:b> ; <var:n2> := <var:n1> * <var:b> ; <var:n3> := <var:n2> * <var:b> ; <var:n0> := <nat:4> ; <var:n2> := <var:n2> * <nat:3> ; <var:n3> := <var:n3> * <nat:1> ; <var:m> := <var:n3> <var:m> := <var:m> + <var:n2> <var:m> := <var:m> + <var:n0> \end{verbatim} Allow ( with some positive coefficients $ <var:Q> $ ) that $ <var:b> = <var:Q> $ prior to evaluating this segment of code , then we have $ <var:m> = <nat:1> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> $ after program has terminated . \end{theorem} \begin{proof} The proof of this code segment is shown using this decorated list of instructions . \begin{eqnarray} \{ <var:b> = <var:Q> \} \\ <var:n1> := <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \} \\ <var:n2> := <var:n1> * <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \land <var:n3> = <var:Q> ^ <nat:3> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \land <var:n3> = <var:Q> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:n2> := <var:n2> * <nat:3> ; \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <var:Q> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:n3> := <var:n3> * <nat:1> ; \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:1> \times <var:Q> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:m> := <var:n3> \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:m> = <nat:1> \times <var:Q> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:n2> \\ \{ <var:b> = <var:Q> \land <var:n1> = <var:Q> \land <var:n0> = <nat:4> \land <var:m> = <nat:1> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:n0> \\ \{ <var:b> = <var:Q> \land <var:m> = <nat:1> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:b> = <var:Q> }} <var:n1> := <var:b> ; <var:n2> := <var:n1> * <var:b> ; <var:n3> := <var:n2> * <var:b> ; <var:n0> := <nat:4> ; <var:n2> := <var:n2> * <nat:3> ; <var:n3> := <var:n3> * <nat:1> ; <var:m> := <var:n3> <var:m> := <var:m> + <var:n2> <var:m> := <var:m> + <var:n0> {{ <var:m> = <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <var:Q> ^ <nat:2> /\ <var:n3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <var:Q> ^ <nat:2> /\ <var:n3> = <var:Q> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n3> = <var:Q> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n3> = <nat:1> * <var:Q> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n0> = <nat:4> /\ <var:m> = <nat:1> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n0> = <nat:4> /\ <var:m> = <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:m> = <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 