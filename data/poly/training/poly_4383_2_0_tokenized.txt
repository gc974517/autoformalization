\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:2> ; <var:U> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Allowing it to hold that $ <var:A> = <var:k> $ before executing this series of commands it follows that $ <var:U> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is given using standard Hoare logic . After , the binding line \verb | <var:m0> := <nat:2> ; | . This line advances the condition $ \{ <var:A> = <var:k> \} $ to the postcondition $ \{ <var:A> = <var:k> \land <var:m0> = <nat:2> \} $ . Moving forward , we see the variable update code yielding $ <var:m0$ into $ <var:U>$ . This advances the precondition $ \{ <var:A> = <var:k> \land <var:m0> = <nat:2> \} $ into $ \{ <var:A> = <var:k> \land <var:U> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:U> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:A> = <var:k> }} <def:poly> {{ <var:U> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:U> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 