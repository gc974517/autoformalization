\begin{document} \begin{theorem} Define a list of instructions as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:S> ; <var:Z> := <var:x1> ; <var:Z> := <var:Z> + <var:x0> \end{verbatim} Given ( given every $ <var:k> $ ) that we have $ <var:S> = <var:k> $ before evaluating our list of commands , it follows that we have $ <var:Z> = <nat:6> * <var:k> + <nat:3> $ when set of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be accomplished through Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:k> \} & <var:x0> := <nat:3> & \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \} \\ \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \} & <var:x1> := <nat:6> & \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \land <var:x1> = <nat:6> \} \\ \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \land <var:x1> = <nat:6> \} & <var:x1> := <var:x1> * <var:S> & \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \land <var:x1> = <nat:6> * <var:k> \} \\ \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \land <var:x1> = <nat:6> * <var:k> \} & <var:Z> := <var:x1> & \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \land <var:Z> = <nat:6> * <var:k> \} \\ \{ <var:S> = <var:k> \land <var:x0> = <nat:3> \land <var:Z> = <nat:6> * <var:k> \} & <var:Z> := <var:Z> + <var:x0& \{ <var:S> = <var:k> \land <var:Z> = <nat:6> * <var:k> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:S> = <var:k> }} <var:x0> := <nat:3> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:S> ; <var:Z> := <var:x1> ; <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:6> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:x0> = <nat:3> /\ <var:Z> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:Z> = <nat:6> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 