\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:r0> := <nat:2> ; <var:x> := <var:r0> \end{verbatim} Given that we have $ <var:O> = <var:y> $ letting $ <var:y> \in \mathbb{Z}^+ $ prior to the execution of this program it must be that we have $ <var:x> = <nat:2> $ when series of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:y> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:O> = <var:y> \land <var:r0> = <nat:2> \} \\ <var:x> := <var:r0> \\ \{ <var:O> = <var:y> \land <var:x> = <nat:2> \} \end{eqnarray} The application of typical Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:O> = <var:y> }} <var:r0> := <nat:2> ; <var:x> := <var:r0> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 