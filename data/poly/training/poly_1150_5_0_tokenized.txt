\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:w> ; <var:g> := <var:z1> ; <var:g> := <var:g> + <var:z0> \end{verbatim} Given it to hold that $ <var:w> = <var:Q> $ prior to the evaluation of this set of instructions then we have $ <var:g> = <nat:1> \cdot <var:Q> + <nat:2> $ after list of commands has exited . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:w> = <var:Q> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:w> = <var:Q> \land <var:z0> = <nat:2> \} \\ <var:z1> := <nat:1> ; \\ \{ <var:w> = <var:Q> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \} \\ <var:z1> := <var:z1> * <var:w> ; \\ \{ <var:w> = <var:Q> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> * <var:Q> \} \\ <var:g> := <var:z1> ; \\ \{ <var:w> = <var:Q> \land <var:z0> = <nat:2> \land <var:g> = <nat:1> * <var:Q> \} \\ <var:g> := <var:g> + <var:z0> \\ \{ <var:w> = <var:Q> \land <var:g> = <nat:1> * <var:Q> + <nat:2> \} \end{eqnarray} As a result , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:w> = <var:Q> }} <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:w> ; <var:g> := <var:z1> ; <var:g> := <var:g> + <var:z0> {{ <var:g> = <nat:1> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Q> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Q> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Q> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Q> /\ <var:z0> = <nat:2> /\ <var:g> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Q> /\ <var:g> = <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 