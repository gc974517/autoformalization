\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:L> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:4> ; <var:u> := <var:v1> <var:u> := <var:u> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Assuming --- for any positive numbers $ <var:s> $ --- $ <var:L> = <var:s> $ prior to executing this series of instructions it holds that we see $ <var:u> = <nat:4> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this series of instructions can be shown with usual Hoare logic . Paying attention to the proceeding line of code found in the list of instructions , the variable binding code letting $ <var:L> $ as $ <var:v1>$ . This advances the precondition $ \{ <var:L> = <var:s> \} $ into $ \{ <var:L> = <var:s> \land <var:v1> = <var:s> \} $ . This is sound with the assignment inference rule in Hoare reasoning . Moving onward , the environment update command \verb | <var:v0> := <nat:2> ; | . This code advances the condition $ \{ <var:L> = <var:s> \land <var:v1> = <var:s> \} $ as the postcondition $ \{ <var:L> = <var:s> \land <var:v1> = <var:s> \land <var:v0> = <nat:2> \} $ . This is shown by the assignment rule defined in usual Hoare techniques . Moving onward , we have the variable binding line giving $ <var:v1> * <nat:4> $ into $ <var:v1>$ . This forwards $ \{ <var:L> = <var:s> \land <var:v1> = <var:s> \land <var:v0> = <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:s> \land <var:v1> = <nat:4> \times <var:s> \land <var:v0> = <nat:2> \} $ . Paying attention to the next line of code seen in the series of instructions , we see the variable update command defining $ <var:v1$ as $ <var:u>$ . This line redefines the condition $ \{ <var:L> = <var:s> \land <var:v1> = <nat:4> \times <var:s> \land <var:v0> = <nat:2> \} $ toward the postcondition $ \{ <var:L> = <var:s> \land <var:v0> = <nat:2> \land <var:u> = <nat:4> \times <var:s> \} $ . This is given using the assignment scheme of usual Hoare techniques . Advancing to the next command seen in the code segment , we see the binding line \verb | <var:u> := <var:u> + <var:v0> | . This takes $ \{ <var:L> = <var:s> \land <var:v0> = <nat:2> \land <var:u> = <nat:4> \times <var:s> \} $ as the condition $ \{ <var:L> = <var:s> \land <var:u> = <nat:4> \times <var:s> + <nat:2> \} $ . This is deduced using the assignment rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:L> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:4> ; <var:u> := <var:v1> <var:u> := <var:u> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:u> = <nat:4> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:v1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:v1> = <var:s> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:v1> = <nat:4> * <var:s> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:v0> = <nat:2> /\ <var:u> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:u> = <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 