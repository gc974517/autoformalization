\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:8> ; <var:X> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given all natural coefficients $ <var:f> $ ) that we have $ <var:l> = <var:f> $ prior to evaluating our set of instructions , it holds that we see $ <var:X> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is shown with Hoare reasoning . Moving forward to the subsequent command in our code segment , we have the assignment code \verb | <var:k0> := <nat:8> ; | . This moves the precondition $ \{ <var:l> = <var:f> \} $ into the condition $ \{ <var:l> = <var:f> \land <var:k0> = <nat:8> \} $ . This is deduced by the assignment inference rule found in typical Hoare techniques . Honing in on the upcoming piece of code seen in the segment of code , the environment update code \verb | <var:X> := <var:k0> | . This moves the condition $ \{ <var:l> = <var:f> \land <var:k0> = <nat:8> \} $ toward the condition $ \{ <var:l> = <var:f> \land <var:X> = <nat:8> \} $ . This is given by the assignment scheme obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:8> ; <var:X> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:l> = <var:f> }} <def:poly> {{ <var:X> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:X> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 