\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:9> ; <var:Z> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- for any integers $ <var:f> $ --- that we have $ <var:W> = <var:f> $ ahead of evaluating the series of commands , then $ <var:Z> = <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be done through typical Hoare techniques . After , \begin{eqnarray} \{ <var:W> = <var:f> \} \, <var:Y0> := <nat:9> \, \{ <var:W> = <var:f> \land <var:Y0> = <nat:9> \} \end{eqnarray} This is rigorously given by the variable binding rule given by Hoare reasoning . Immediately after , we see \begin{eqnarray} \{ <var:W> = <var:f> \} \, <var:Y0> := <nat:9> \, \{ <var:W> = <var:f> \land <var:Y0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:9> ; <var:Z> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:W> = <var:f> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:f> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:f> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 