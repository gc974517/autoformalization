\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:7> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:C> ; <var:R> := <var:L1> ; <var:R> := <var:R> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assuming that we have $ <var:C> = <var:Q> $ before executing the set of instructions , it must be that we have $ <var:R> = <nat:8> \times <var:Q> + <nat:7> $ once code segment is done . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be accomplished with usual Hoare techniques . Going to the next step , we have \verb | { <var:C> = <var:Q> } <var:L0> := <nat:7> { <var:C> = <var:Q> \land <var:L0> = <nat:7> } | . Taking another step toward the next statements in the code , \verb | { <var:C> = <var:Q> } <var:L0> := <nat:7> { <var:C> = <var:Q> \land <var:L0> = <nat:7> } | , \verb | { <var:C> = <var:Q> \land <var:L0> = <nat:7> } <var:L1> := <nat:8> { <var:C> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:8> } | , \verb | { <var:C> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:8> } <var:L1> := <var:L1> * <var:C> { <var:C> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:8> * <var:Q> } | and \verb | { <var:C> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:8> * <var:Q> } <var:R> := <var:L1> { <var:C> = <var:Q> \land <var:L0> = <nat:7> \land <var:R> = <nat:8> * <var:Q> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:C> ; <var:R> := <var:L1> ; <var:R> := <var:R> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:C> = <var:Q> }} <def:poly> {{ <var:R> = <nat:8> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:R> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:R> = <nat:8> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 