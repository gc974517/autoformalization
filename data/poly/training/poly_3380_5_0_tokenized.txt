\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:7> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:A> ; <var:N> := <var:p1> ; <var:N> := <var:N> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:A> = <var:B> $ ahead of executing this code it holds that $ <var:N> = <nat:8> \times <var:B> + <nat:7> $ once set of instructions has terminated . \end{theorem} \begin{proof} Applying standard Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:B> \} \\ <var:p0> := <nat:7> ; \\ \{ <var:A> = <var:B> \land <var:p0> = <nat:7> \} \\ <var:p1> := <nat:8> ; \\ \{ <var:A> = <var:B> \land <var:p0> = <nat:7> \land <var:p1> = <nat:8> \} \\ <var:p1> := <var:p1> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:p0> = <nat:7> \land <var:p1> = <nat:8> \times <var:B> \} \\ <var:N> := <var:p1> ; \\ \{ <var:A> = <var:B> \land <var:p0> = <nat:7> \land <var:N> = <nat:8> \times <var:B> \} \\ <var:N> := <var:N> + <var:p0> \\ \{ <var:A> = <var:B> \land <var:N> = <nat:8> \times <var:B> + <nat:7> \} \end{eqnarray} As a result , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:7> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:A> ; <var:N> := <var:p1> ; <var:N> := <var:N> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:A> = <var:B> }} <def:poly> {{ <var:N> = <nat:8> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:p0> = <nat:7> /\ <var:N> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:N> = <nat:8> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 