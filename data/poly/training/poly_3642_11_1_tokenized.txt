\begin{document} \begin{theorem} Define a code segment as \begin{verbatim} <var:t1> := <var:Z> ; <var:t2> := <var:t1> * <var:Z> ; <var:t3> := <var:t2> * <var:Z> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:7> ; <var:t3> := <var:t3> * <nat:1> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> \end{verbatim} Allow that $ <var:Z> = <var:c> $ before executing this segment of code it must be that we have $ <var:m> = <nat:1> \times <var:c> ^ <nat:3> + <nat:7> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:Z> = <var:c> \} \\ <var:t1> := <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <var:c> \} \\ <var:t2> := <var:t1> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <var:c> \land <var:t2> = <var:c> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <var:c> \land <var:t2> = <var:c> ^ <nat:2> \land <var:t3> = <var:c> ^ <nat:3> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <var:c> \land <var:t2> = <var:c> ^ <nat:2> \land <var:t3> = <var:c> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:t1> := <var:t1> * <nat:3> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <nat:3> * <var:c> \land <var:t2> = <var:c> ^ <nat:2> \land <var:t3> = <var:c> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:t2> := <var:t2> * <nat:7> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <nat:3> * <var:c> \land <var:t2> = <nat:7> * <var:c> ^ <nat:2> \land <var:t3> = <var:c> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:t3> := <var:t3> * <nat:1> ; \\ \{ <var:Z> = <var:c> \land <var:t1> = <nat:3> * <var:c> \land <var:t2> = <nat:7> * <var:c> ^ <nat:2> \land <var:t3> = <nat:1> * <var:c> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:m> := <var:t3> \\ \{ <var:Z> = <var:c> \land <var:t1> = <nat:3> * <var:c> \land <var:t2> = <nat:7> * <var:c> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> * <var:c> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:t2> \\ \{ <var:Z> = <var:c> \land <var:t1> = <nat:3> * <var:c> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:t1> \\ \{ <var:Z> = <var:c> \land <var:t0> = <nat:4> \land <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> \} \\ <var:m> := <var:m> + <var:t0> \\ \{ <var:Z> = <var:c> \land <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:4> \} \end{eqnarray} Thusly , the list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Z> = <var:c> }} <var:t1> := <var:Z> ; <var:t2> := <var:t1> * <var:Z> ; <var:t3> := <var:t2> * <var:Z> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:7> ; <var:t3> := <var:t3> * <nat:1> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> {{ <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <var:c> /\ <var:t2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <var:c> /\ <var:t2> = <var:c> ^ <nat:2> /\ <var:t3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <var:c> /\ <var:t2> = <var:c> ^ <nat:2> /\ <var:t3> = <var:c> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <nat:3> * <var:c> /\ <var:t2> = <var:c> ^ <nat:2> /\ <var:t3> = <var:c> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <nat:3> * <var:c> /\ <var:t2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:t3> = <var:c> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <nat:3> * <var:c> /\ <var:t2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:c> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <nat:3> * <var:c> /\ <var:t2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:m> = <nat:1> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t1> = <nat:3> * <var:c> /\ <var:t0> = <nat:4> /\ <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:t0> = <nat:4> /\ <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:m> = <nat:1> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 