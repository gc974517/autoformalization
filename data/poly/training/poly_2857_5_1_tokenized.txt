\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:H> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:1> ; <var:d> := <var:C1> <var:d> := <var:d> + <var:C0> \end{verbatim} Allowing --- with some $ <var:I> $ --- that $ <var:H> = <var:I> $ ahead of interpreting this code segment it holds that we see $ <var:d> = <nat:1> \cdot <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the code segment can be demonstrated using standard Hoare techniques . Further , \begin{eqnarray} \{ <var:H> = <var:I> \} \, <var:C1> := <var:H> \, \{ <var:H> = <var:I> \land <var:C1> = <var:I> \} \\ \{ <var:H> = <var:I> \land <var:C1> = <var:I> \} \, <var:C0> := <nat:4> \, \{ <var:H> = <var:I> \land <var:C1> = <var:I> \land <var:C0> = <nat:4> \} \\ \{ <var:H> = <var:I> \land <var:C1> = <var:I> \land <var:C0> = <nat:4> \} \, <var:C1> := <var:C1> * <nat:1> \, \{ <var:H> = <var:I> \land <var:C1> = <nat:1> * <var:I> \land <var:C0> = <nat:4> \} \\ \{ <var:H> = <var:I> \land <var:C1> = <nat:1> * <var:I> \land <var:C0> = <nat:4> \} \, <var:d> := <var:C1\, \{ <var:H> = <var:I> \land <var:C0> = <nat:4> \land <var:d> = <nat:1> * <var:I> \} \end{eqnarray} Advancing to the following piece of code seen in our list of commands , we see \begin{eqnarray} \{ <var:H> = <var:I> \} \, <var:C1> := <var:H> \, \{ <var:H> = <var:I> \land <var:C1> = <var:I> \} \end{eqnarray} This is rigorously given with the rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:H> = <var:I> }} <var:C1> := <var:H> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:1> ; <var:d> := <var:C1> <var:d> := <var:d> + <var:C0> {{ <var:d> = <nat:1> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:C1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:C1> = <var:I> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:C1> = <nat:1> * <var:I> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:C0> = <nat:4> /\ <var:d> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:d> = <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 