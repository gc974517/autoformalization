\begin{document} \begin{theorem} Consider the following set of commands as \begin{verbatim} <var:h1> := <var:t> ; <var:h2> := <var:h1> * <var:t> ; <var:h3> := <var:h2> * <var:t> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:8> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:5> ; <var:Z> := <var:h3> <var:Z> := <var:Z> + <var:h2> <var:Z> := <var:Z> + <var:h1> <var:Z> := <var:Z> + <var:h0> \end{verbatim} Assume it to be that $ <var:t> = <var:E> $ ( taking positive integers $ <var:E> $ ) prior to the execution of the program , it holds that we have $ <var:Z> = <nat:5> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> + <nat:8> \times <var:E> + <nat:1> $ after list of instructions has exited . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:t> = <var:E> \} \\ <var:h1> := <var:t> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <var:E> \} \\ <var:h2> := <var:h1> * <var:t> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <var:E> \land <var:h2> = <var:E> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:t> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <var:E> \land <var:h2> = <var:E> ^ <nat:2> \land <var:h3> = <var:E> ^ <nat:3> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <var:E> \land <var:h2> = <var:E> ^ <nat:2> \land <var:h3> = <var:E> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:h1> := <var:h1> * <nat:8> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <nat:8> \times <var:E> \land <var:h2> = <var:E> ^ <nat:2> \land <var:h3> = <var:E> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:h2> := <var:h2> * <nat:8> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <nat:8> \times <var:E> \land <var:h2> = <nat:8> \times <var:E> ^ <nat:2> \land <var:h3> = <var:E> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:h3> := <var:h3> * <nat:5> ; \\ \{ <var:t> = <var:E> \land <var:h1> = <nat:8> \times <var:E> \land <var:h2> = <nat:8> \times <var:E> ^ <nat:2> \land <var:h3> = <nat:5> \times <var:E> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:Z> := <var:h3> \\ \{ <var:t> = <var:E> \land <var:h1> = <nat:8> \times <var:E> \land <var:h2> = <nat:8> \times <var:E> ^ <nat:2> \land <var:h0> = <nat:1> \land <var:Z> = <nat:5> \times <var:E> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:h2> \\ \{ <var:t> = <var:E> \land <var:h1> = <nat:8> \times <var:E> \land <var:h0> = <nat:1> \land <var:Z> = <nat:5> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:h1> \\ \{ <var:t> = <var:E> \land <var:h0> = <nat:1> \land <var:Z> = <nat:5> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> + <nat:8> \times <var:E> \} \\ <var:Z> := <var:Z> + <var:h0> \\ \{ <var:t> = <var:E> \land <var:Z> = <nat:5> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> + <nat:8> \times <var:E> + <nat:1> \} \end{eqnarray} The application of standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:t> = <var:E> }} <var:h1> := <var:t> ; <var:h2> := <var:h1> * <var:t> ; <var:h3> := <var:h2> * <var:t> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:8> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:5> ; <var:Z> := <var:h3> <var:Z> := <var:Z> + <var:h2> <var:Z> := <var:Z> + <var:h1> <var:Z> := <var:Z> + <var:h0> {{ <var:Z> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <var:E> /\ <var:h2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <var:E> /\ <var:h2> = <var:E> ^ <nat:2> /\ <var:h3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <var:E> /\ <var:h2> = <var:E> ^ <nat:2> /\ <var:h3> = <var:E> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <nat:8> * <var:E> /\ <var:h2> = <var:E> ^ <nat:2> /\ <var:h3> = <var:E> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <nat:8> * <var:E> /\ <var:h2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:h3> = <var:E> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <nat:8> * <var:E> /\ <var:h2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:h3> = <nat:5> * <var:E> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <nat:8> * <var:E> /\ <var:h2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:h0> = <nat:1> /\ <var:Z> = <nat:5> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h1> = <nat:8> * <var:E> /\ <var:h0> = <nat:1> /\ <var:Z> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:h0> = <nat:1> /\ <var:Z> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:Z> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 