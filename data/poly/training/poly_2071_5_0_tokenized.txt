\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:G> ; <var:Z> := <var:D1> ; <var:Z> := <var:Z> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Given ( for every $ <var:m> $ ) that $ <var:G> = <var:m> $ before evaluating the series of instructions , it must be that we see $ <var:Z> = <nat:7> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this segment of code can be done by Hoare reasoning . Paying attention to the proceeding statements in our series of commands , we see \begin{verbatim} { <var:G> = <var:m> } <var:D0> := <nat:3> { <var:G> = <var:m> \land <var:D0> = <nat:3> } { <var:G> = <var:m> \land <var:D0> = <nat:3> } <var:D1> := <nat:7> { <var:G> = <var:m> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> } \end{verbatim} Next , \begin{verbatim} { <var:G> = <var:m> } <var:D0> := <nat:3> { <var:G> = <var:m> \land <var:D0> = <nat:3> } { <var:G> = <var:m> \land <var:D0> = <nat:3> } <var:D1> := <nat:7> { <var:G> = <var:m> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> } \end{verbatim} Observing the next command contained in our set of commands , we have \begin{verbatim} { <var:G> = <var:m> } <var:D0> := <nat:3> { <var:G> = <var:m> \land <var:D0> = <nat:3> } \end{verbatim} This is known to be sound by the variable assignmet rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:G> ; <var:Z> := <var:D1> ; <var:Z> := <var:Z> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:G> = <var:m> }} <def:poly> {{ <var:Z> = <nat:7> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:D0> = <nat:3> /\ <var:Z> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:Z> = <nat:7> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 