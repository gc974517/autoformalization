\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:s> ; <var:P2> := <nat:4> ; <var:P2> := <var:P2> * <var:s> ; <var:P2> := <var:P2> * <var:s> ; <var:K> := <var:P2> ; <var:K> := <var:K> + <var:P1> ; <var:K> := <var:K> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:s> = <var:j> $ ahead of the execution of our segment of code then we have $ <var:K> = <nat:4> \times <var:j> ^ <nat:2> + <nat:9> \times <var:j> + <nat:2> $ after set of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:j> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \} \\ <var:P1> := <nat:9> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:P1> = <nat:9> \} \\ <var:P1> := <var:P1> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:P1> = <nat:9> * <var:j> \} \\ <var:P2> := <nat:4> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:P1> = <nat:9> * <var:j> \land <var:P2> = <nat:4> \} \\ <var:P2> := <var:P2> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:P1> = <nat:9> * <var:j> \land <var:P2> = <nat:4> * <var:j> \} \\ <var:P2> := <var:P2> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:P1> = <nat:9> * <var:j> \land <var:P2> = <nat:4> * <var:j> ^ <nat:2> \} \\ <var:K> := <var:P2> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:P1> = <nat:9> * <var:j> \land <var:K> = <nat:4> * <var:j> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:P1> ; \\ \{ <var:s> = <var:j> \land <var:P0> = <nat:2> \land <var:K> = <nat:4> * <var:j> ^ <nat:2> + <nat:9> * <var:j> \} \\ <var:K> := <var:K> + <var:P0> \\ \{ <var:s> = <var:j> \land <var:K> = <nat:4> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:2> \} \end{eqnarray} The application of usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:s> ; <var:P2> := <nat:4> ; <var:P2> := <var:P2> * <var:s> ; <var:P2> := <var:P2> * <var:s> ; <var:K> := <var:P2> ; <var:K> := <var:K> + <var:P1> ; <var:K> := <var:K> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:s> = <var:j> }} <def:poly> {{ <var:K> = <nat:4> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:9> * <var:j> /\ <var:P2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:9> * <var:j> /\ <var:P2> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:9> * <var:j> /\ <var:P2> = <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:9> * <var:j> /\ <var:K> = <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:P0> = <nat:2> /\ <var:K> = <nat:4> * <var:j> ^ <nat:2> + <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:K> = <nat:4> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 