\begin{document} \begin{theorem} Consider a code as \begin{verbatim} <var:w0> := <nat:5> ; <var:q> := <var:w0> \end{verbatim} Assume , for some integers $ <var:v> $ , that we have $ <var:V> = <var:v> $ ahead of interpreting the series of instructions , it holds that we see $ <var:q> = <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this segment of code can be done with Hoare reasoning . Taking a look at the following command in our code , we have the binding statement letting $ <nat:5> $ toward $ <var:w0>$ . This forwards the condition $ \{ <var:V> = <var:v> \} $ into $ \{ <var:V> = <var:v> \land <var:w0> = <nat:5> \} $ . Immediately after , we have the binding code \verb | <var:q> := <var:w0> | . This transfers $ \{ <var:V> = <var:v> \land <var:w0> = <nat:5> \} $ toward the postcondition $ \{ <var:V> = <var:v> \land <var:q> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:V> = <var:v> }} <var:w0> := <nat:5> ; <var:q> := <var:w0> {{ <var:q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 