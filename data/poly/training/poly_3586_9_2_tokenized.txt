\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <var:r> * <var:q> ; <var:r> := <var:r> * <var:q> ; <var:r> := <nat:2> + <var:r> * <var:q> ; <var:r> := <nat:1> + <var:r> * <var:q> ; <var:r> := <nat:1> + <var:r> * <var:q> ; <var:r> := <nat:3> + <var:r> * <var:q> ; <var:r> := <nat:3> + <var:r> * <var:q> ; <var:r> := <nat:1> + <var:r> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assuming that $ <var:q> = <var:k> $ ahead of executing this set of instructions it must be that we have $ <var:r> = <nat:3> \cdot <var:k> ^ <nat:8> + <nat:2> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:1> $ when list of instructions has terminated . \end{theorem} \begin{proof} The proof of the list of commands can be given by usual Hoare reasoning . Jumping to the next bits of codeseen in our list of commands , \[ \begin{tabular} {rcl} \{ <var:q> = <var:k> \} & <var:r> := <nat:3> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \} \\ \{ <var:q> = <var:k> \land <var:r> = <nat:3> \} & <var:r> := <var:r> * <var:q> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> + \} \\ \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> + \} & <var:r> := <var:r> * <var:q> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:2> + \} \\ \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:2> + \} & <var:r> := <nat:2> + <var:r> * <var:q> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \} \\ \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \} & <var:r> := <nat:1> + <var:r> * <var:q> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> + <nat:1> \} \\ \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> + <nat:1> \} & <var:r> := <nat:1> + <var:r> * <var:q> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:1> \} \\ \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:1> \} & <var:r> := <nat:3> + <var:r> * <var:q> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \times <var:k> ^ <nat:6> + <nat:2> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> \} \end{tabular} This is shown to be logically sound using the variable binding scheme in usual Hoare reasoning . Following , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:k> \} & <var:r> := <nat:3> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \} \end{tabular} Taking a look at the subsequent line of code found in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:k> \} & <var:r> := <nat:3> & \{ <var:q> = <var:k> \land <var:r> = <nat:3> \} \end{tabular} This is rigorously given through the variable assignmet scheme defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:3> ; <var:r> := <var:r> * <var:q> ; <var:r> := <var:r> * <var:q> ; <var:r> := <nat:2> + <var:r> * <var:q> ; <var:r> := <nat:1> + <var:r> * <var:q> ; <var:r> := <nat:1> + <var:r> * <var:q> ; <var:r> := <nat:3> + <var:r> * <var:q> ; <var:r> := <nat:3> + <var:r> * <var:q> ; <var:r> := <nat:1> + <var:r> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:q> = <var:k> }} <def:poly> {{ <var:r> = <nat:3> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:r> = <nat:3> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 