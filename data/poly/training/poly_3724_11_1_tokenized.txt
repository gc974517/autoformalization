\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:a1> := <var:j> ; <var:a2> := <var:a1> * <var:j> ; <var:a3> := <var:a2> * <var:j> ; <var:a0> := <nat:6> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:9> ; <var:a3> := <var:a3> * <nat:5> ; <var:C> := <var:a3> <var:C> := <var:C> + <var:a2> <var:C> := <var:C> + <var:a1> <var:C> := <var:C> + <var:a0> \end{verbatim} Allow that we have $ <var:j> = <var:A> $ ahead of running this set of commands , it follows that we see $ <var:C> = <nat:5> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program can be accomplished using standard Hoare logic . Jumping to the proceeding lines of codefound in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:A> \} & <var:a1> := <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \} & <var:a2> := <var:a1> * <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \} & <var:a3> := <var:a2> * <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \} & <var:a0> := <nat:6> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:6> \} \end{tabular} This is ensured through the assignment law in Hoare logic . Taking a look at the upcoming bit of code seen in our list of commands , \[ \begin{tabular} {rcl} \{ <var:j> = <var:A> \} & <var:a1> := <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \} \end{tabular} This is shown by the law given by typical Hoare reasoning . Taking a look at the following commands in our program , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:A> \} & <var:a1> := <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \} & <var:a2> := <var:a1> * <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \} & <var:a3> := <var:a2> * <var:j> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \} & <var:a0> := <nat:6> & \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:6> \} & <var:a1> := <var:a1> * <nat:9> & \{ <var:j> = <var:A> \land <var:a1> = <nat:9> * <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ \{ <var:j> = <var:A> \land <var:a1> = <nat:9> * <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:6> \} & <var:a2> := <var:a2> * <nat:9> & \{ <var:j> = <var:A> \land <var:a1> = <nat:9> * <var:A> \land <var:a2> = <nat:9> * <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:j> = <var:A> }} <var:a1> := <var:j> ; <var:a2> := <var:a1> * <var:j> ; <var:a3> := <var:a2> * <var:j> ; <var:a0> := <nat:6> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:9> ; <var:a3> := <var:a3> * <nat:5> ; <var:C> := <var:a3> <var:C> := <var:C> + <var:a2> <var:C> := <var:C> + <var:a1> <var:C> := <var:C> + <var:a0> {{ <var:C> = <nat:5> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <var:A> /\ <var:a2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <var:A> /\ <var:a2> = <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <var:A> /\ <var:a2> = <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <nat:9> * <var:A> /\ <var:a2> = <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <nat:9> * <var:A> /\ <var:a2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <nat:9> * <var:A> /\ <var:a2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:A> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <nat:9> * <var:A> /\ <var:a2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:a0> = <nat:6> /\ <var:C> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a1> = <nat:9> * <var:A> /\ <var:a0> = <nat:6> /\ <var:C> = <nat:5> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:a0> = <nat:6> /\ <var:C> = <nat:5> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:C> = <nat:5> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 