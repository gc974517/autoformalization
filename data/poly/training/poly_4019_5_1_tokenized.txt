\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:h> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:1> ; <var:x> := <var:F1> <var:x> := <var:x> + <var:F0> \end{verbatim} Given that we have $ <var:h> = <var:G> $ ( for every whole numbers $ <var:G> $ ) prior to the execution of the list of commands it holds that we see $ <var:x> = <nat:1> \times <var:G> + <nat:5> $ after list of commands has executed . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be done with Hoare reasoning . Jumping to the subsequent command in our set of instructions , the variable assignmet line giving $ <var:h> $ to $ <var:F1>$ . This code moves the condition $ \{ <var:h> = <var:G> \} $ toward the postcondition $ \{ <var:h> = <var:G> \land <var:F1> = <var:G> \} $ . This is ensured through the assignment law obtained from usual Hoare techniques . Paying attention to the following piece of code found in the list of commands , we have the environment update statement defining $ <nat:5> $ toward $ <var:F0>$ . This command transfers $ \{ <var:h> = <var:G> \land <var:F1> = <var:G> \} $ toward the postcondition $ \{ <var:h> = <var:G> \land <var:F1> = <var:G> \land <var:F0> = <nat:5> \} $ . This is guaranteed through the assignment inference rule given by typical Hoare logic . Considering the following statement in the program , we see the environment update command defining $ <var:F1> * <nat:1> $ as $ <var:F1>$ . This statement moves the condition $ \{ <var:h> = <var:G> \land <var:F1> = <var:G> \land <var:F0> = <nat:5> \} $ toward the condition $ \{ <var:h> = <var:G> \land <var:F1> = <nat:1> \cdot <var:G> \land <var:F0> = <nat:5> \} $ . Keeping momentum , we have the assignment statement binding $ <var:F1$ to $ <var:x>$ . This command forwards the condition $ \{ <var:h> = <var:G> \land <var:F1> = <nat:1> \cdot <var:G> \land <var:F0> = <nat:5> \} $ to the condition $ \{ <var:h> = <var:G> \land <var:F0> = <nat:5> \land <var:x> = <nat:1> \cdot <var:G> \} $ . Now , we see the assignment statement \verb | <var:x> := <var:x> + <var:F0> | . This code forwards the condition $ \{ <var:h> = <var:G> \land <var:F0> = <nat:5> \land <var:x> = <nat:1> \cdot <var:G> \} $ into the condition $ \{ <var:h> = <var:G> \land <var:x> = <nat:1> \cdot <var:G> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <var:F1> := <var:h> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:1> ; <var:x> := <var:F1> <var:x> := <var:x> + <var:F0> {{ <var:x> = <nat:1> * <var:G> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:F1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:F1> = <var:G> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:F1> = <nat:1> * <var:G> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:F0> = <nat:5> /\ <var:x> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:x> = <nat:1> * <var:G> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 