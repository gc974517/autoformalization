\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:7> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:N> ; <var:D> := <var:w1> ; <var:D> := <var:D> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assuming it to hold that $ <var:N> = <var:j> $ prior to executing our code segment it holds that $ <var:D> = <nat:6> \cdot <var:j> + <nat:7> $ after set of instructions has finished . \end{theorem} \begin{proof} Observe that the following decorated series of instructions . \begin{eqnarray} \{ <var:N> = <var:j> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:N> = <var:j> \land <var:w0> = <nat:7> \} \\ <var:w1> := <nat:6> ; \\ \{ <var:N> = <var:j> \land <var:w0> = <nat:7> \land <var:w1> = <nat:6> \} \\ <var:w1> := <var:w1> * <var:N> ; \\ \{ <var:N> = <var:j> \land <var:w0> = <nat:7> \land <var:w1> = <nat:6> \cdot <var:j> \} \\ <var:D> := <var:w1> ; \\ \{ <var:N> = <var:j> \land <var:w0> = <nat:7> \land <var:D> = <nat:6> \cdot <var:j> \} \\ <var:D> := <var:D> + <var:w0> \\ \{ <var:N> = <var:j> \land <var:D> = <nat:6> \cdot <var:j> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:7> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:N> ; <var:D> := <var:w1> ; <var:D> := <var:D> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:N> = <var:j> }} <def:poly> {{ <var:D> = <nat:6> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:w0> = <nat:7> /\ <var:D> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:D> = <nat:6> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 