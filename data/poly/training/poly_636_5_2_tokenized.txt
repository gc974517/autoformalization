\begin{document} \begin{theorem} We define a code segment in \emph{Imp} such that \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:3> + <var:y> * <var:t> ; <var:y> := <nat:1> + <var:y> * <var:t> ; <var:y> := <nat:1> + <var:y> * <var:t> ; <var:y> := <nat:2> + <var:y> * <var:t> \end{verbatim} Given that we have $ <var:t> = <var:V> $ before evaluating our segment of code then $ <var:y> = <nat:3> \cdot <var:V> ^ <nat:4> + <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> + <nat:1> \cdot <var:V> + <nat:2> $ after code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:V> \} \\ <var:y> := <nat:3> ; \\ \{ <var:t> = <var:V> \land <var:y> = <nat:3> \} \\ <var:y> := <nat:3> + <var:y> * <var:t> ; \\ \{ <var:t> = <var:V> \land <var:y> = <nat:3> \times <var:V> + <nat:3> \} \\ <var:y> := <nat:1> + <var:y> * <var:t> ; \\ \{ <var:t> = <var:V> \land <var:y> = <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:t> ; \\ \{ <var:t> = <var:V> \land <var:y> = <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \\ <var:y> := <nat:2> + <var:y> * <var:t> \\ \{ <var:t> = <var:V> \land <var:y> = <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:2> \} \end{eqnarray} The application of typical Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:t> = <var:V> }} <var:y> := <nat:3> ; <var:y> := <nat:3> + <var:y> * <var:t> ; <var:y> := <nat:1> + <var:y> * <var:t> ; <var:y> := <nat:1> + <var:y> * <var:t> ; <var:y> := <nat:2> + <var:y> * <var:t> {{ <var:y> = <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:y> = <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:y> = <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:y> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:y> = <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 