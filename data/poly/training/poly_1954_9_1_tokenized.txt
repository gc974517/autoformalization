\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:R1> := <var:y> ; <var:R2> := <var:R1> * <var:y> ; <var:R3> := <var:R2> * <var:y> ; <var:R0> := <nat:1> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:2> ; <var:p> := <var:R3> <var:p> := <var:p> + <var:R2> <var:p> := <var:p> + <var:R0> \end{verbatim} Allow it to be that $ <var:y> = <var:d> $ ahead of the execution of the segment of code , it follows that we see $ <var:p> = <nat:2> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:1> $ after segment of code has finished . \end{theorem} \begin{proof} The flow of logic for the code can be given using usual Hoare reasoning . Now , \verb | { <var:y> = <var:d> } <var:R1> := <var:y> { <var:y> = <var:d> \land <var:R1> = <var:d> } | , \verb | { <var:y> = <var:d> \land <var:R1> = <var:d> } <var:R2> := <var:R1> * <var:y> { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> } | , \verb | { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> } <var:R3> := <var:R2> * <var:y> { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> } | , \verb | { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> } <var:R0> := <nat:1> { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:1> } | , \verb | { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:1> } <var:R2> := <var:R2> * <nat:6> { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <nat:6> \cdot <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:1> } | and \verb | { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <nat:6> \cdot <var:d> ^ <nat:2> \land <var:R3> = <var:d> ^ <nat:3> \land <var:R0> = <nat:1> } <var:R3> := <var:R3> * <nat:2> { <var:y> = <var:d> \land <var:R1> = <var:d> \land <var:R2> = <nat:6> \cdot <var:d> ^ <nat:2> \land <var:R3> = <nat:2> \cdot <var:d> ^ <nat:3> \land <var:R0> = <nat:1> } | . Taking a look at the next statement contained in our series of commands , \verb | { <var:y> = <var:d> } <var:R1> := <var:y> { <var:y> = <var:d> \land <var:R1> = <var:d> } | . This is shown by the assignment scheme obtained from usual Hoare techniques . Now , we have \verb | { <var:y> = <var:d> } <var:R1> := <var:y> { <var:y> = <var:d> \land <var:R1> = <var:d> } | . This is given using the rule in typical Hoare reasoning . Looking at the upcoming line of code seen in the set of commands , we have \verb | { <var:y> = <var:d> } <var:R1> := <var:y> { <var:y> = <var:d> \land <var:R1> = <var:d> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:y> = <var:d> }} <var:R1> := <var:y> ; <var:R2> := <var:R1> * <var:y> ; <var:R3> := <var:R2> * <var:y> ; <var:R0> := <nat:1> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:2> ; <var:p> := <var:R3> <var:p> := <var:p> + <var:R2> <var:p> := <var:p> + <var:R0> {{ <var:p> = <nat:2> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:R3> = <var:d> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:R3> = <nat:2> * <var:d> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:R0> = <nat:1> /\ <var:p> = <nat:2> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R1> = <var:d> /\ <var:R0> = <nat:1> /\ <var:p> = <nat:2> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:p> = <nat:2> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 