\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:4> ; <var:P> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Assuming it to be that $ <var:M> = <var:s> $ prior to executing this list of instructions it must be that we have $ <var:P> = <nat:4> $ after code has executed . \end{theorem} \begin{proof} The course of logic for the list of instructions is demonstrated through standard Hoare reasoning . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:M> = <var:s> \} & <var:m0> := <nat:4> & \{ <var:M> = <var:s> \land <var:m0> = <nat:4> \} \end{tabular} Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:s> \} & <var:m0> := <nat:4> & \{ <var:M> = <var:s> \land <var:m0> = <nat:4> \} \end{tabular} This is ensured through the environment update scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:P> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:M> = <var:s> }} <def:poly> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 