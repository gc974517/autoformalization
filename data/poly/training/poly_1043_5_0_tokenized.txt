\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:1> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:F> ; <var:r> := <var:u1> ; <var:r> := <var:r> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given ( for some positive numbers $ <var:E> $ ) $ <var:F> = <var:E> $ before running this set of instructions it follows that $ <var:r> = <nat:3> \cdot <var:E> + <nat:1> $ after program executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:E> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:F> = <var:E> \land <var:u0> = <nat:1> \} \\ <var:u1> := <nat:3> ; \\ \{ <var:F> = <var:E> \land <var:u0> = <nat:1> \land <var:u1> = <nat:3> \} \\ <var:u1> := <var:u1> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:u0> = <nat:1> \land <var:u1> = <nat:3> * <var:E> \} \\ <var:r> := <var:u1> ; \\ \{ <var:F> = <var:E> \land <var:u0> = <nat:1> \land <var:r> = <nat:3> * <var:E> \} \\ <var:r> := <var:r> + <var:u0> \\ \{ <var:F> = <var:E> \land <var:r> = <nat:3> * <var:E> + <nat:1> \} \end{eqnarray} Using usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:F> ; <var:r> := <var:u1> ; <var:r> := <var:r> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:F> = <var:E> }} <def:poly> {{ <var:r> = <nat:3> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:u0> = <nat:1> /\ <var:r> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:r> = <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 