\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:V> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:6> ; <var:F> := <var:s1> <var:F> := <var:F> + <var:s0> \end{verbatim} Given that $ <var:V> = <var:C> $ before interpreting our list of commands , then we have $ <var:F> = <nat:6> * <var:C> + <nat:2> $ when segment of code finishes . \end{theorem} \begin{proof} The course of logic for this list of commands can be seen using Hoare logic . Advancing to the upcoming line found in the program , we have the variable binding line binding $ <var:V> $ as $ <var:s1>$ . This takes the precondition $ \{ <var:V> = <var:C> \} $ into $ \{ <var:V> = <var:C> \land <var:s1> = <var:C> \} $ . Stepping forward , the environment update line yielding $ <nat:2> $ as $ <var:s0>$ . This code moves the condition $ \{ <var:V> = <var:C> \land <var:s1> = <var:C> \} $ to the condition $ \{ <var:V> = <var:C> \land <var:s1> = <var:C> \land <var:s0> = <nat:2> \} $ . Moving onward , we have the variable binding statement binding $ <var:s1> * <nat:6> $ to $ <var:s1>$ . This code redefines $ \{ <var:V> = <var:C> \land <var:s1> = <var:C> \land <var:s0> = <nat:2> \} $ to $ \{ <var:V> = <var:C> \land <var:s1> = <nat:6> \cdot <var:C> \land <var:s0> = <nat:2> \} $ . This is guaranteed by the assignment law obtained from typical Hoare techniques . Moving forward , the variable binding line letting $ <var:s1$ as $ <var:F>$ . This command redefines the condition $ \{ <var:V> = <var:C> \land <var:s1> = <nat:6> \cdot <var:C> \land <var:s0> = <nat:2> \} $ to $ \{ <var:V> = <var:C> \land <var:s0> = <nat:2> \land <var:F> = <nat:6> \cdot <var:C> \} $ . Focusing on the next line of code seen in the series of commands , we have the variable assignmet command binding $ <var:F> + <var:s0$ into $ <var:F>$ . This code takes $ \{ <var:V> = <var:C> \land <var:s0> = <nat:2> \land <var:F> = <nat:6> \cdot <var:C> \} $ to the postcondition $ \{ <var:V> = <var:C> \land <var:F> = <nat:6> \cdot <var:C> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <var:s1> := <var:V> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:6> ; <var:F> := <var:s1> <var:F> := <var:F> + <var:s0> {{ <var:F> = <nat:6> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:s1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:s1> = <var:C> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:s1> = <nat:6> * <var:C> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:s0> = <nat:2> /\ <var:F> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F> = <nat:6> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 