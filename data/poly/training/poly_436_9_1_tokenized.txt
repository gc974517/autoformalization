\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:D> ; <var:U2> := <var:U1> * <var:D> ; <var:U3> := <var:U2> * <var:D> ; <var:U0> := <nat:1> ; <var:U2> := <var:U2> * <nat:2> ; <var:U3> := <var:U3> * <nat:1> ; <var:d> := <var:U3> <var:d> := <var:d> + <var:U2> <var:d> := <var:d> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assuming it to be that $ <var:D> = <var:V> $ before running the program , then we see $ <var:d> = <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:D> = <var:V> \} \\ <var:U1> := <var:D> ; \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \} \\ <var:U2> := <var:U1> * <var:D> ; \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <var:V> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:D> ; \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <var:V> ^ <nat:2> \land <var:U3> = <var:V> ^ <nat:3> \} \\ <var:U0> := <nat:1> ; \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <var:V> ^ <nat:2> \land <var:U3> = <var:V> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:U2> := <var:U2> * <nat:2> ; \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:U3> = <var:V> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:U3> := <var:U3> * <nat:1> ; \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:V> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:d> := <var:U3> \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:U0> = <nat:1> \land <var:d> = <nat:1> \times <var:V> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:U2> \\ \{ <var:D> = <var:V> \land <var:U1> = <var:V> \land <var:U0> = <nat:1> \land <var:d> = <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:U0> \\ \{ <var:D> = <var:V> \land <var:d> = <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \} \end{eqnarray} Hence , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:D> ; <var:U2> := <var:U1> * <var:D> ; <var:U3> := <var:U2> * <var:D> ; <var:U0> := <nat:1> ; <var:U2> := <var:U2> * <nat:2> ; <var:U3> := <var:U3> * <nat:1> ; <var:d> := <var:U3> <var:d> := <var:d> + <var:U2> <var:d> := <var:d> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:D> = <var:V> }} <def:poly> {{ <var:d> = <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <var:V> ^ <nat:2> /\ <var:U3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <var:V> ^ <nat:2> /\ <var:U3> = <var:V> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:U3> = <var:V> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:V> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:U0> = <nat:1> /\ <var:d> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:U1> = <var:V> /\ <var:U0> = <nat:1> /\ <var:d> = <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:d> = <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 