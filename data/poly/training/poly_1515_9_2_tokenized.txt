\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:1> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:4> + <var:t> * <var:c> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <nat:4> + <var:t> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Allowing $ <var:c> = <var:f> $ before executing our series of commands , it holds that we have $ <var:t> = <nat:1> \times <var:f> ^ <nat:8> + <nat:1> \times <var:f> ^ <nat:6> + <nat:1> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:f> \} \\ <var:t> := <nat:1> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \} \\ <var:t> := <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> + \} \\ <var:t> := <nat:1> + <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \} \\ <var:t> := <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> + \} \\ <var:t> := <nat:1> + <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \} \\ <var:t> := <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> + \} \\ <var:t> := <nat:4> + <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \} \\ <var:t> := <nat:1> + <var:t> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:c> \\ \{ <var:c> = <var:f> \land <var:t> = <nat:1> \cdot <var:f> ^ <nat:8> + <nat:1> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:4> \} \end{eqnarray} Using Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:1> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:4> + <var:t> * <var:c> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <nat:4> + <var:t> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:c> = <var:f> }} <def:poly> {{ <var:t> = <nat:1> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:1> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 