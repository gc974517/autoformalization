\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:2> ; <var:z> := <var:n0> \end{verbatim} Allowing given $ <var:Z> \in \mathbb{N} $ that $ <var:B> = <var:Z> $ before running the list of instructions , it must be that $ <var:z> = <nat:2> $ when set of commands finishes . \end{theorem} \begin{proof} Applying standard Hoare techniques results in : \begin{eqnarray} \{ <var:B> = <var:Z> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:B> = <var:Z> \land <var:n0> = <nat:2> \} \\ <var:z> := <var:n0> \\ \{ <var:B> = <var:Z> \land <var:z> = <nat:2> \} \end{eqnarray} Given the preceding argument , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:B> = <var:Z> }} <var:n0> := <nat:2> ; <var:z> := <var:n0> {{ <var:z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 