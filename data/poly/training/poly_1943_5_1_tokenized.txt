\begin{document} \begin{theorem} We define the following set of instructions : \begin{verbatim} <var:R1> := <var:g> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:A> := <var:R1> <var:A> := <var:A> + <var:R0> \end{verbatim} Assume that we have $ <var:g> = <var:Z> $ prior to executing this segment of code , then we have $ <var:A> = <nat:6> \cdot <var:Z> + <nat:6> $ when code has finished executing . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:g> = <var:Z> \} \\ <var:R1> := <var:g> ; \\ \{ <var:g> = <var:Z> \land <var:R1> = <var:Z> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:g> = <var:Z> \land <var:R1> = <var:Z> \land <var:R0> = <nat:6> \} \\ <var:R1> := <var:R1> * <nat:6> ; \\ \{ <var:g> = <var:Z> \land <var:R1> = <nat:6> \times <var:Z> \land <var:R0> = <nat:6> \} \\ <var:A> := <var:R1> \\ \{ <var:g> = <var:Z> \land <var:R0> = <nat:6> \land <var:A> = <nat:6> \times <var:Z> \} \\ <var:A> := <var:A> + <var:R0> \\ \{ <var:g> = <var:Z> \land <var:A> = <nat:6> \times <var:Z> + <nat:6> \} \end{eqnarray} Thus , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:g> = <var:Z> }} <var:R1> := <var:g> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:A> := <var:R1> <var:A> := <var:A> + <var:R0> {{ <var:A> = <nat:6> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:R1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:R1> = <nat:6> * <var:Z> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:R0> = <nat:6> /\ <var:A> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:A> = <nat:6> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 