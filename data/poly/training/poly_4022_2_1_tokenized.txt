\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:3> ; <var:f> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Assuming that we have $ <var:l> = <var:b> $ ahead of executing this code segment , it must be that we have $ <var:f> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment can be accomplished through standard Hoare techniques . Immediately after , the variable update statement \verb | <var:t0> := <nat:3> ; | . This command moves the precondition $ \{ <var:l> = <var:b> \} $ into the condition $ \{ <var:l> = <var:b> \land <var:t0> = <nat:3> \} $ . This is rigorously given using the assignment inference rule obtained from usual Hoare logic . Stepping through , we see the line \verb | <var:f> := <var:t0> | . This redefines $ \{ <var:l> = <var:b> \land <var:t0> = <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:b> \land <var:f> = <nat:3> \} $ . This is ensured using the assignment inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:f> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:l> = <var:b> }} <def:poly> {{ <var:f> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:f> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 