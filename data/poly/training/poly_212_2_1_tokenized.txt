\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:A0> := <nat:7> ; <var:z> := <var:A0> \end{verbatim} Allowing , given positive numbers $ <var:w> $ , it to hold that $ <var:o> = <var:w> $ before running our series of instructions , it follows that $ <var:z> = <nat:7> $ once set of commands terminates . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:o> = <var:w> \land <var:A0> = <nat:7> \} \\ <var:z> := <var:A0> \\ \{ <var:o> = <var:w> \land <var:z> = <nat:7> \} \end{eqnarray} As a consequence , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <var:A0> := <nat:7> ; <var:z> := <var:A0> {{ <var:z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 