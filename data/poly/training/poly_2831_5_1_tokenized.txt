\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:m> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:3> ; <var:k> := <var:R1> <var:k> := <var:k> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Given $ <var:m> = <var:I> $ prior to the evaluation of our list of instructions it holds that we see $ <var:k> = <nat:3> \times <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this program can be demonstrated by standard Hoare techniques . Jumping to the subsequent line in the list of commands , the variable update statement \verb | <var:R1> := <var:m> ; | . This forwards the precondition $ \{ <var:m> = <var:I> \} $ to the postcondition $ \{ <var:m> = <var:I> \land <var:R1> = <var:I> \} $ . This is guaranteed by the assignment rule defined by typical Hoare techniques . Following , we see the variable update command \verb | <var:R0> := <nat:4> ; | . This transfers the precondition $ \{ <var:m> = <var:I> \land <var:R1> = <var:I> \} $ as the postcondition $ \{ <var:m> = <var:I> \land <var:R1> = <var:I> \land <var:R0> = <nat:4> \} $ . Going forward , we see the environment update command defining $ <var:R1> * <nat:3> $ toward $ <var:R1>$ . This code moves $ \{ <var:m> = <var:I> \land <var:R1> = <var:I> \land <var:R0> = <nat:4> \} $ into the postcondition $ \{ <var:m> = <var:I> \land <var:R1> = <nat:3> \cdot <var:I> \land <var:R0> = <nat:4> \} $ . Further , the variable update code \verb | <var:k> := <var:R1> | . This forwards $ \{ <var:m> = <var:I> \land <var:R1> = <nat:3> \cdot <var:I> \land <var:R0> = <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:I> \land <var:R0> = <nat:4> \land <var:k> = <nat:3> \cdot <var:I> \} $ . This is known to be sound with the assignment scheme from typical Hoare reasoning . Advancing to the next statement seen in our set of commands , we have the variable update command \verb | <var:k> := <var:k> + <var:R0> | . This statement forwards $ \{ <var:m> = <var:I> \land <var:R0> = <nat:4> \land <var:k> = <nat:3> \cdot <var:I> \} $ toward the postcondition $ \{ <var:m> = <var:I> \land <var:k> = <nat:3> \cdot <var:I> + <nat:4> \} $ . This is rigorously given with the assignment inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:m> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:3> ; <var:k> := <var:R1> <var:k> := <var:k> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:m> = <var:I> }} <def:poly> {{ <var:k> = <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:R1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:R1> = <var:I> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:R1> = <nat:3> * <var:I> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:R0> = <nat:4> /\ <var:k> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:k> = <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 