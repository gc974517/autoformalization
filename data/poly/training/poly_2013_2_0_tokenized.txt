\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:4> ; <var:U> := <var:r0> \end{verbatim} Assume , given some natural numbers $ <var:R> $ , it to hold that $ <var:g> = <var:R> $ ahead of running this list of commands it holds that we see $ <var:U> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:R> \} \\ <var:r0> := <nat:4> ; \\ \{ <var:g> = <var:R> \land <var:r0> = <nat:4> \} \\ <var:U> := <var:r0> \\ \{ <var:g> = <var:R> \land <var:U> = <nat:4> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:g> = <var:R> }} <var:r0> := <nat:4> ; <var:U> := <var:r0> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 