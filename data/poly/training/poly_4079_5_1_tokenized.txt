\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:g> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:4> ; <var:k> := <var:j1> <var:k> := <var:k> + <var:j0> \end{verbatim} Assume it to be that $ <var:g> = <var:S> $ before interpreting the code , then we see $ <var:k> = <nat:4> \times <var:S> + <nat:9> $ once program terminates . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be accomplished with standard Hoare logic . Taking another step toward the upcoming piece of code seen in our series of instructions , we see the assignment statement yielding $ <var:g> $ to $ <var:j1>$ . This code takes the precondition $ \{ <var:g> = <var:S> \} $ toward the postcondition $ \{ <var:g> = <var:S> \land <var:j1> = <var:S> \} $ . Moving on to the next step , we have the environment update line giving $ <nat:9> $ to $ <var:j0>$ . This transfers $ \{ <var:g> = <var:S> \land <var:j1> = <var:S> \} $ toward $ \{ <var:g> = <var:S> \land <var:j1> = <var:S> \land <var:j0> = <nat:9> \} $ . This is given through the assignment scheme of standard Hoare techniques . Moving forward to the following command contained in the series of commands , we see the command \verb | <var:j1> := <var:j1> * <nat:4> ; | . This moves $ \{ <var:g> = <var:S> \land <var:j1> = <var:S> \land <var:j0> = <nat:9> \} $ into the postcondition $ \{ <var:g> = <var:S> \land <var:j1> = <nat:4> * <var:S> \land <var:j0> = <nat:9> \} $ . Honing in on the following piece of code found in our code segment , we see the environment update code binding $ <var:j1$ into $ <var:k>$ . This command forwards the precondition $ \{ <var:g> = <var:S> \land <var:j1> = <nat:4> * <var:S> \land <var:j0> = <nat:9> \} $ toward $ \{ <var:g> = <var:S> \land <var:j0> = <nat:9> \land <var:k> = <nat:4> * <var:S> \} $ . Advancing to the upcoming statement contained in the series of instructions , the variable binding code binding $ <var:k> + <var:j0$ into $ <var:k>$ . This advances the precondition $ \{ <var:g> = <var:S> \land <var:j0> = <nat:9> \land <var:k> = <nat:4> * <var:S> \} $ toward the postcondition $ \{ <var:g> = <var:S> \land <var:k> = <nat:4> * <var:S> + <nat:9> \} $ . This is guaranteed with the assignment law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:g> = <var:S> }} <var:j1> := <var:g> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:4> ; <var:k> := <var:j1> <var:k> := <var:k> + <var:j0> {{ <var:k> = <nat:4> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:S> /\ <var:j1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:S> /\ <var:j1> = <var:S> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:S> /\ <var:j1> = <nat:4> * <var:S> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:S> /\ <var:j0> = <nat:9> /\ <var:k> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:S> /\ <var:k> = <nat:4> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 