\begin{document} \begin{theorem} Let the following list of commands as \begin{verbatim} <var:n0> := <nat:6> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:C> ; <var:n2> := <nat:9> ; <var:n2> := <var:n2> * <var:C> ; <var:n2> := <var:n2> * <var:C> ; <var:h> := <var:n2> ; <var:h> := <var:h> + <var:n1> ; <var:h> := <var:h> + <var:n0> \end{verbatim} Assume that $ <var:C> = <var:V> $ --- assuming some positive coefficients $ <var:V> $ --- before the execution of this code , it must be that $ <var:h> = <nat:9> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:6> $ after set of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for the list of commands can be shown through usual Hoare logic . Moving on , we see \verb | { <var:C> = <var:V> } <var:n0> := <nat:6> { <var:C> = <var:V> \land <var:n0> = <nat:6> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> } <var:n1> := <nat:1> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> } <var:n1> := <var:n1> * <var:C> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> } <var:n2> := <nat:9> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:9> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:9> } <var:n2> := <var:n2> * <var:C> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:9> * <var:V> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:9> * <var:V> } <var:n2> := <var:n2> * <var:C> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:9> * <var:V> ^ <nat:2> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:9> * <var:V> ^ <nat:2> } <var:h> := <var:n2> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:h> = <nat:9> * <var:V> ^ <nat:2> } | , \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:n1> = <nat:1> * <var:V> \land <var:h> = <nat:9> * <var:V> ^ <nat:2> } <var:h> := <var:h> + <var:n1> { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:h> = <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> } | and \verb | { <var:C> = <var:V> \land <var:n0> = <nat:6> \land <var:h> = <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> } <var:h> := <var:h> + <var:n0{ <var:C> = <var:V> \land <var:h> = <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:6> } | . This is rigorously given with the law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <var:n0> := <nat:6> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:C> ; <var:n2> := <nat:9> ; <var:n2> := <var:n2> * <var:C> ; <var:n2> := <var:n2> * <var:C> ; <var:h> := <var:n2> ; <var:h> := <var:h> + <var:n1> ; <var:h> := <var:h> + <var:n0> {{ <var:h> = <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:1> * <var:V> /\ <var:n2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:1> * <var:V> /\ <var:n2> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:1> * <var:V> /\ <var:n2> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:1> * <var:V> /\ <var:h> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:n0> = <nat:6> /\ <var:h> = <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:h> = <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 