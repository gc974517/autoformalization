\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:Y> ; <var:a> := <var:u1> ; <var:a> := <var:a> + <var:u0> \end{verbatim} Assume $ <var:Y> = <var:b> $ prior to interpreting the series of commands , it must be that we see $ <var:a> = <nat:9> \cdot <var:b> + <nat:2> $ once series of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment can be given using standard Hoare techniques . Advancing on , we see \verb | { <var:Y> = <var:b> } <var:u0> := <nat:2> { <var:Y> = <var:b> \land <var:u0> = <nat:2> } | , \verb | { <var:Y> = <var:b> \land <var:u0> = <nat:2> } <var:u1> := <nat:9> { <var:Y> = <var:b> \land <var:u0> = <nat:2> \land <var:u1> = <nat:9> } | and \verb | { <var:Y> = <var:b> \land <var:u0> = <nat:2> \land <var:u1> = <nat:9> } <var:u1> := <var:u1> * <var:Y> { <var:Y> = <var:b> \land <var:u0> = <nat:2> \land <var:u1> = <nat:9> * <var:b> } | . Paying attention to the subsequent bit of code seen in the series of instructions , we see \verb | { <var:Y> = <var:b> } <var:u0> := <nat:2> { <var:Y> = <var:b> \land <var:u0> = <nat:2> } | . This is shown to be logically sound by the variable update inference rule from usual Hoare logic . Considering the following piece of code contained in the set of commands , \verb | { <var:Y> = <var:b> } <var:u0> := <nat:2> { <var:Y> = <var:b> \land <var:u0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Y> = <var:b> }} <var:u0> := <nat:2> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:Y> ; <var:a> := <var:u1> ; <var:a> := <var:a> + <var:u0> {{ <var:a> = <nat:9> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:u0> = <nat:2> /\ <var:a> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:a> = <nat:9> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 