\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:O> ; <var:k> := <nat:2> + <var:k> * <var:O> \end{verbatim} Assume --- taking whole numbers $ <var:z> $ --- that we have $ <var:O> = <var:z> $ before evaluating the segment of code it must be that we see $ <var:k> = <nat:1> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> $ when code has terminated . \end{theorem} \begin{proof} We can see that the below decorated program . \begin{eqnarray} \{ <var:O> = <var:z> \} \\ <var:k> := <nat:1> ; \\ \{ <var:O> = <var:z> \land <var:k> = <nat:1> \} \\ <var:k> := <nat:1> + <var:k> * <var:O> ; \\ \{ <var:O> = <var:z> \land <var:k> = <nat:1> \cdot <var:z> + <nat:1> \} \\ <var:k> := <nat:2> + <var:k> * <var:O> \\ \{ <var:O> = <var:z> \land <var:k> = <nat:1> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:O> = <var:z> }} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:O> ; <var:k> := <nat:2> + <var:k> * <var:O> {{ <var:k> = <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k> = <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k> = <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 