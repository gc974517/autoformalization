\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:4> + <var:I> * <var:C> ; <var:I> := <var:I> * <var:C> ; <var:I> := <var:I> * <var:C> ; <var:I> := <nat:4> + <var:I> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Given ( given some $ <var:L> $ ) that we have $ <var:C> = <var:L> $ prior to executing the code segment it must be that we see $ <var:I> = <nat:4> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:4> $ after segment of code has executed . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be accomplished using standard Hoare logic . Advancing to the next step , we have the variable binding line \verb | <var:I> := <nat:4> ; | . This line advances the condition $ \{ <var:C> = <var:L> \} $ as $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> \} $ . Jumping to the next step found in the code , the assignment line giving $ <nat:4> + <var:I> * <var:C> $ into $ <var:I>$ . This line transfers the precondition $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> \} $ to $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> + <nat:4> \} $ . Keeping momentum , we see the statement \verb | <var:I> := <var:I> * <var:C> ; | . This line transfers the precondition $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> + <nat:4> \} $ into $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + \} $ . Next , the environment update command \verb | <var:I> := <var:I> * <var:C> ; | . This redefines the precondition $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + \} $ into the condition $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + \} $ . Moving on to the proceeding line contained in the segment of code , the binding code \verb | <var:I> := <nat:4> + <var:I> * <var:C> | . This statement forwards the precondition $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + \} $ as the postcondition $ \{ <var:C> = <var:L> \land <var:I> = <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:4> ; <var:I> := <nat:4> + <var:I> * <var:C> ; <var:I> := <var:I> * <var:C> ; <var:I> := <var:I> * <var:C> ; <var:I> := <nat:4> + <var:I> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:C> = <var:L> }} <def:poly> {{ <var:I> = <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:I> = <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:I> = <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:I> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:I> = <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 