\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:V> ; <var:D2> := <var:D1> * <var:V> ; <var:D3> := <var:D2> * <var:V> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:3> ; <var:D2> := <var:D2> * <nat:7> ; <var:D3> := <var:D3> * <nat:1> ; <var:l> := <var:D3> <var:l> := <var:l> + <var:D2> <var:l> := <var:l> + <var:D1> <var:l> := <var:l> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:V> = <var:z> $ before executing our set of commands , it holds that $ <var:l> = <nat:1> \cdot <var:z> ^ <nat:3> + <nat:7> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our code segment can be seen through the following decorated code segment . \begin{eqnarray} \{ <var:V> = <var:z> \} \\ <var:D1> := <var:V> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <var:z> \} \\ <var:D2> := <var:D1> * <var:V> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:V> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:4> \} \end{eqnarray} Advancing evaluating the code segment results in : \begin{eqnarray} <var:D1> := <var:D1> * <nat:3> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <nat:3> * <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:D2> := <var:D2> * <nat:7> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <nat:3> * <var:z> \land <var:D2> = <nat:7> * <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:D3> := <var:D3> * <nat:1> ; \\ \{ <var:V> = <var:z> \land <var:D1> = <nat:3> * <var:z> \land <var:D2> = <nat:7> * <var:z> ^ <nat:2> \land <var:D3> = <nat:1> * <var:z> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:l> := <var:D3> \\ \{ <var:V> = <var:z> \land <var:D1> = <nat:3> * <var:z> \land <var:D2> = <nat:7> * <var:z> ^ <nat:2> \land <var:D0> = <nat:4> \land <var:l> = <nat:1> * <var:z> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:D2> \\ \{ <var:V> = <var:z> \land <var:D1> = <nat:3> * <var:z> \land <var:D0> = <nat:4> \land <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:D1> \\ \{ <var:V> = <var:z> \land <var:D0> = <nat:4> \land <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:3> * <var:z> \} \\ <var:l> := <var:l> + <var:D0> \\ \{ <var:V> = <var:z> \land <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:V> ; <var:D2> := <var:D1> * <var:V> ; <var:D3> := <var:D2> * <var:V> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:3> ; <var:D2> := <var:D2> * <nat:7> ; <var:D3> := <var:D3> * <nat:1> ; <var:l> := <var:D3> <var:l> := <var:l> + <var:D2> <var:l> := <var:l> + <var:D1> <var:l> := <var:l> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:V> = <var:z> }} <def:poly> {{ <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <nat:3> * <var:z> /\ <var:D2> = <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <nat:3> * <var:z> /\ <var:D2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <nat:3> * <var:z> /\ <var:D2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <nat:3> * <var:z> /\ <var:D2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:D0> = <nat:4> /\ <var:l> = <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D1> = <nat:3> * <var:z> /\ <var:D0> = <nat:4> /\ <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:D0> = <nat:4> /\ <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:l> = <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 