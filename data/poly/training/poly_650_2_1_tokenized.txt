\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:4> ; <var:p> := <var:j0> \end{verbatim} Assuming --- letting whole numbers $ <var:D> $ --- that we have $ <var:U> = <var:D> $ prior to the execution of our series of commands , it holds that we see $ <var:p> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:D> \} \\ <var:j0> := <nat:4> ; \\ \{ <var:U> = <var:D> \land <var:j0> = <nat:4> \} \\ <var:p> := <var:j0> \\ \{ <var:U> = <var:D> \land <var:p> = <nat:4> \} \end{eqnarray} Utilizing Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <var:j0> := <nat:4> ; <var:p> := <var:j0> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 