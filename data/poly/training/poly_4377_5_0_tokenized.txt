\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:Y> ; <var:V> := <var:D1> ; <var:V> := <var:V> + <var:D0> \end{verbatim} Given --- for every integers $ <var:M> $ --- $ <var:Y> = <var:M> $ ahead of interpreting our list of instructions , it follows that we have $ <var:V> = <nat:2> \cdot <var:M> + <nat:6> $ when program finishes . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be given using usual Hoare logic . Keeping momentum , the assignment code \verb | <var:D0> := <nat:6> ; | . This statement advances $ \{ <var:Y> = <var:M> \} $ as the condition $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \} $ . Advancing to the upcoming statement seen in the program , the variable assignmet command letting $ <nat:2> $ to $ <var:D1>$ . This line transfers the condition $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \} $ to $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \} $ . Immediately following , the assignment line \verb | <var:D1> := <var:D1> * <var:Y> ; | . This statement advances the condition $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \} $ to the postcondition $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:M> \} $ . This is rigorously given with the assignment inference rule defined by Hoare reasoning . Moving on , we have the assignment code \verb | <var:V> := <var:D1> ; | . This transfers the condition $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:M> \} $ toward the postcondition $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \land <var:V> = <nat:2> \times <var:M> \} $ . This is shown by the assignment law given by Hoare techniques . Going to the next step , the variable binding line \verb | <var:V> := <var:V> + <var:D0> | . This advances $ \{ <var:Y> = <var:M> \land <var:D0> = <nat:6> \land <var:V> = <nat:2> \times <var:M> \} $ to the condition $ \{ <var:Y> = <var:M> \land <var:V> = <nat:2> \times <var:M> + <nat:6> \} $ . This is known to be sound through the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Y> = <var:M> }} <var:D0> := <nat:6> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:Y> ; <var:V> := <var:D1> ; <var:V> := <var:V> + <var:D0> {{ <var:V> = <nat:2> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:D0> = <nat:6> /\ <var:V> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:V> = <nat:2> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 