\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:e> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:8> ; <var:x> := <var:a1> <var:x> := <var:x> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Given $ <var:e> = <var:X> $ ahead of interpreting this series of instructions , then we have $ <var:x> = <nat:8> \cdot <var:X> + <nat:5> $ after segment of code has executed . \end{theorem} \begin{proof} Proving correctness for our series of instructions is evident by usual Hoare techniques . Immediately following , we have the environment update command assigning $ <var:e> $ toward $ <var:a1>$ . This line forwards $ \{ <var:e> = <var:X> \} $ toward $ \{ <var:e> = <var:X> \land <var:a1> = <var:X> \} $ . This is guaranteed using the assignment rule in standard Hoare techniques . After , we see the assignment code \verb | <var:a0> := <nat:5> ; | . This command redefines $ \{ <var:e> = <var:X> \land <var:a1> = <var:X> \} $ as the condition $ \{ <var:e> = <var:X> \land <var:a1> = <var:X> \land <var:a0> = <nat:5> \} $ . This is rigorously given by the assignment rule defined by standard Hoare reasoning . Honing in on the proceeding command found in the program , we see the environment update command \verb | <var:a1> := <var:a1> * <nat:8> ; | . This statement moves the precondition $ \{ <var:e> = <var:X> \land <var:a1> = <var:X> \land <var:a0> = <nat:5> \} $ as the postcondition $ \{ <var:e> = <var:X> \land <var:a1> = <nat:8> \cdot <var:X> \land <var:a0> = <nat:5> \} $ . Focusing on the subsequent step seen in the segment of code , we see the assignment statement giving $ <var:a1$ into $ <var:x>$ . This forwards $ \{ <var:e> = <var:X> \land <var:a1> = <nat:8> \cdot <var:X> \land <var:a0> = <nat:5> \} $ toward the postcondition $ \{ <var:e> = <var:X> \land <var:a0> = <nat:5> \land <var:x> = <nat:8> \cdot <var:X> \} $ . This is shown with the assignment rule obtained from Hoare logic . Stepping forward , the variable assignmet statement \verb | <var:x> := <var:x> + <var:a0> | . This statement forwards $ \{ <var:e> = <var:X> \land <var:a0> = <nat:5> \land <var:x> = <nat:8> \cdot <var:X> \} $ as the postcondition $ \{ <var:e> = <var:X> \land <var:x> = <nat:8> \cdot <var:X> + <nat:5> \} $ . This is rigorously given using the assignment rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:e> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:8> ; <var:x> := <var:a1> <var:x> := <var:x> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:e> = <var:X> }} <def:poly> {{ <var:x> = <nat:8> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:a1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:a1> = <var:X> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:a1> = <nat:8> * <var:X> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:a0> = <nat:5> /\ <var:x> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x> = <nat:8> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 