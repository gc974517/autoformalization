\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o1> := <var:H> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:9> ; <var:C> := <var:o1> <var:C> := <var:C> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:H> = <var:y> $ ( letting $ <var:y> \in \mathbb{N} $ ) before evaluating this code , it must be that we see $ <var:C> = <nat:9> \times <var:y> + <nat:2> $ . \end{theorem} \begin{proof} Observe this decorated list of commands . \begin{eqnarray} \{ <var:H> = <var:y> \} \\ <var:o1> := <var:H> ; \\ \{ <var:H> = <var:y> \land <var:o1> = <var:y> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:H> = <var:y> \land <var:o1> = <var:y> \land <var:o0> = <nat:2> \} \\ <var:o1> := <var:o1> * <nat:9> ; \\ \{ <var:H> = <var:y> \land <var:o1> = <nat:9> * <var:y> \land <var:o0> = <nat:2> \} \\ <var:C> := <var:o1> \\ \{ <var:H> = <var:y> \land <var:o0> = <nat:2> \land <var:C> = <nat:9> * <var:y> \} \\ <var:C> := <var:C> + <var:o0> \\ \{ <var:H> = <var:y> \land <var:C> = <nat:9> * <var:y> + <nat:2> \} \end{eqnarray} Applying typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:H> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:9> ; <var:C> := <var:o1> <var:C> := <var:C> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:H> = <var:y> }} <def:poly> {{ <var:C> = <nat:9> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:o1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:o1> = <var:y> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:o1> = <nat:9> * <var:y> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:o0> = <nat:2> /\ <var:C> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:C> = <nat:9> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 