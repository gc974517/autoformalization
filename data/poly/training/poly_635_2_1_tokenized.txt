\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:2> ; <var:y> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:K> = <var:O> $ before interpreting our code segment , it follows that we see $ <var:y> = <nat:2> $ once set of commands is done executing . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be given using usual Hoare logic . Shifting focus toward the subsequent statements contained in the series of instructions , we have \begin{verbatim} { <var:K> = <var:O> } <var:N0> := <nat:2> { <var:K> = <var:O> \land <var:N0> = <nat:2> } { <var:K> = <var:O> \land <var:N0> = <nat:2> } <var:y> := <var:N0{ <var:K> = <var:O> \land <var:y> = <nat:2> } \end{verbatim} This is guaranteed using the law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:2> ; <var:y> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:K> = <var:O> }} <def:poly> {{ <var:y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:O> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:O> /\ <var:y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 