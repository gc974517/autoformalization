\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:6> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:y> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:y> ; <var:x2> := <var:x2> * <var:y> ; <var:T> := <var:x2> ; <var:T> := <var:T> + <var:x1> ; <var:T> := <var:T> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:y> = <var:S> $ prior to evaluating the set of commands it follows that we have $ <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:6> $ after list of commands executes . \end{theorem} \begin{proof} The way to prove correctness for the list of commands is demonstrated with usual Hoare techniques . Immediately after , we have the statement \verb | <var:x0> := <nat:6> ; | . This command moves the precondition $ \{ <var:y> = <var:S> \} $ as the postcondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \} $ . Keeping momentum , we have the binding command defining $ <nat:2> $ into $ <var:x1>$ . This statement moves the precondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \} $ to the postcondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> \} $ . Stepping through , the assignment command letting $ <var:x1> * <var:y> $ as $ <var:x1>$ . This statement forwards the precondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> \} $ to the condition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \} $ . Honing in on the subsequent command seen in the list of instructions , we see the variable assignmet line assigning $ <nat:9> $ to $ <var:x2>$ . This redefines the condition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \} $ as the condition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:x2> = <nat:9> \} $ . Paying attention to the upcoming piece of code contained in the list of instructions , we see the variable update statement binding $ <var:x2> * <var:y> $ as $ <var:x2>$ . This moves the condition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:x2> = <nat:9> \} $ to $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:x2> = <nat:9> * <var:S> \} $ . Following , we have the command \verb | <var:x2> := <var:x2> * <var:y> ; | . This takes $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:x2> = <nat:9> * <var:S> \} $ as $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:x2> = <nat:9> * <var:S> ^ <nat:2> \} $ . This is deduced by the assignment inference rule given by usual Hoare reasoning . Observing the upcoming line in the list of commands , we see the binding command \verb | <var:T> := <var:x2> ; | . This forwards the condition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:x2> = <nat:9> * <var:S> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:T> = <nat:9> * <var:S> ^ <nat:2> \} $ . Next , we see the assignment line \verb | <var:T> := <var:T> + <var:x1> ; | . This transfers the precondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:x1> = <nat:2> * <var:S> \land <var:T> = <nat:9> * <var:S> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> \} $ . This is sound through the assignment law defined in standard Hoare reasoning . Paying attention to the following bit of code found in the set of instructions , the binding code \verb | <var:T> := <var:T> + <var:x0> | . This moves the condition $ \{ <var:y> = <var:S> \land <var:x0> = <nat:6> \land <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> \} $ into the condition $ \{ <var:y> = <var:S> \land <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:6> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:y> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:y> ; <var:x2> := <var:x2> * <var:y> ; <var:T> := <var:x2> ; <var:T> := <var:T> + <var:x1> ; <var:T> := <var:T> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:y> = <var:S> }} <def:poly> {{ <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:2> * <var:S> /\ <var:x2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:2> * <var:S> /\ <var:x2> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:2> * <var:S> /\ <var:x2> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:2> * <var:S> /\ <var:T> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:x0> = <nat:6> /\ <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:T> = <nat:9> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 