\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:1> + <var:y> * <var:l> \end{verbatim} Allowing $ <var:l> = <var:H> $ ahead of running our set of commands , then we see $ <var:y> = <nat:4> \times <var:H> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this program is shown with usual Hoare reasoning . Advancing , we have \begin{verbatim} { <var:l> = <var:H> } <var:y> := <nat:4> { <var:l> = <var:H> \land <var:y> = <nat:4> } \end{verbatim} This is ensured through the assignment law defined by typical Hoare reasoning . Moving forward , \begin{verbatim} { <var:l> = <var:H> } <var:y> := <nat:4> { <var:l> = <var:H> \land <var:y> = <nat:4> } \end{verbatim} This is given using the variable update rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:l> = <var:H> }} <var:y> := <nat:4> ; <var:y> := <nat:1> + <var:y> * <var:l> {{ <var:y> = <nat:4> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:y> = <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 