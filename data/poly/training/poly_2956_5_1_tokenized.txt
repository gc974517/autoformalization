\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:y> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:2> ; <var:H> := <var:T1> <var:H> := <var:H> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given ( with some $ <var:W> \in \mathbb{Z}^+ $ ) $ <var:y> = <var:W> $ ahead of executing this series of instructions , it must be that $ <var:H> = <nat:2> * <var:W> + <nat:3> $ when series of instructions terminates . \end{theorem} \begin{proof} Using standard Hoare reasoning yields : \begin{eqnarray} \{ <var:y> = <var:W> \} \\ <var:T1> := <var:y> ; \\ \{ <var:y> = <var:W> \land <var:T1> = <var:W> \} \\ <var:T0> := <nat:3> ; \\ \{ <var:y> = <var:W> \land <var:T1> = <var:W> \land <var:T0> = <nat:3> \} \\ <var:T1> := <var:T1> * <nat:2> ; \\ \{ <var:y> = <var:W> \land <var:T1> = <nat:2> \times <var:W> \land <var:T0> = <nat:3> \} \\ <var:H> := <var:T1> \\ \{ <var:y> = <var:W> \land <var:T0> = <nat:3> \land <var:H> = <nat:2> \times <var:W> \} \\ <var:H> := <var:H> + <var:T0> \\ \{ <var:y> = <var:W> \land <var:H> = <nat:2> \times <var:W> + <nat:3> \} \end{eqnarray} Given the preceding argument , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:y> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:2> ; <var:H> := <var:T1> <var:H> := <var:H> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:y> = <var:W> }} <def:poly> {{ <var:H> = <nat:2> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:T1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:T1> = <var:W> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:T1> = <nat:2> * <var:W> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:T0> = <nat:3> /\ <var:H> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:H> = <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 