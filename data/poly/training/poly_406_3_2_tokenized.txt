\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F> := <nat:3> ; <var:F> := <nat:3> + <var:F> * <var:z> ; <var:F> := <nat:3> + <var:F> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Given given $ <var:n> \in \mathbb{Z}^+ $ $ <var:z> = <var:n> $ ahead of the execution of this code , then $ <var:F> = <nat:3> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:3> $ when series of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of our code can be demonstrated using standard Hoare logic . Taking another step toward the upcoming line of code contained in our set of instructions , we have the variable binding line yielding $ <nat:3> $ into $ <var:F>$ . This statement advances the condition $ \{ <var:z> = <var:n> \} $ to the condition $ \{ <var:z> = <var:n> \land <var:F> = <nat:3> \} $ . This is shown to be logically sound through the assignment rule in Hoare reasoning . Advancing to the subsequent step found in the series of instructions , we see the assignment line defining $ <nat:3> + <var:F> * <var:z> $ toward $ <var:F>$ . This statement moves the condition $ \{ <var:z> = <var:n> \land <var:F> = <nat:3> \} $ toward the postcondition $ \{ <var:z> = <var:n> \land <var:F> = <nat:3> * <var:n> + <nat:3> \} $ . This is sound by the assignment rule defined in usual Hoare logic . Jumping to the proceeding piece of code in our list of instructions , the binding line assigning $ <nat:3> + <var:F> * <var:z$ toward $ <var:F>$ . This takes $ \{ <var:z> = <var:n> \land <var:F> = <nat:3> * <var:n> + <nat:3> \} $ into the condition $ \{ <var:z> = <var:n> \land <var:F> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:3> ; <var:F> := <nat:3> + <var:F> * <var:z> ; <var:F> := <nat:3> + <var:F> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:F> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:F> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:F> = <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:F> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 