\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:C0> := <nat:3> ; <var:a> := <var:C0> \end{verbatim} Given --- given every positive integer coefficients $ <var:J> $ --- it to be that $ <var:o> = <var:J> $ before interpreting our code segment , it follows that we see $ <var:a> = <nat:3> $ when set of commands is done . \end{theorem} \begin{proof} The flow of logic for our series of commands can be shown with usual Hoare techniques . Taking a look at the upcoming line of code contained in our code segment , the binding code letting $ <nat:3> $ as $ <var:C0>$ . This transfers the precondition $ \{ <var:o> = <var:J> \} $ as the condition $ \{ <var:o> = <var:J> \land <var:C0> = <nat:3> \} $ . Focusing on the subsequent command found in our code segment , we see the variable update statement binding $ <var:C0$ into $ <var:a>$ . This line forwards $ \{ <var:o> = <var:J> \land <var:C0> = <nat:3> \} $ toward the condition $ \{ <var:o> = <var:J> \land <var:a> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:o> = <var:J> }} <var:C0> := <nat:3> ; <var:a> := <var:C0> {{ <var:a> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:a> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 