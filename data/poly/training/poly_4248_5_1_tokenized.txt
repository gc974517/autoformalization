\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:R1> := <var:K> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:1> ; <var:w> := <var:R1> <var:w> := <var:w> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:K> = <var:Q> $ ahead of the evaluation of the code segment , then $ <var:w> = <nat:1> \times <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:K> = <var:Q> \} \\ <var:R1> := <var:K> ; \\ \{ <var:K> = <var:Q> \land <var:R1> = <var:Q> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:K> = <var:Q> \land <var:R1> = <var:Q> \land <var:R0> = <nat:2> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:K> = <var:Q> \land <var:R1> = <nat:1> * <var:Q> \land <var:R0> = <nat:2> \} \\ <var:w> := <var:R1> \\ \{ <var:K> = <var:Q> \land <var:R0> = <nat:2> \land <var:w> = <nat:1> * <var:Q> \} \\ <var:w> := <var:w> + <var:R0> \\ \{ <var:K> = <var:Q> \land <var:w> = <nat:1> * <var:Q> + <nat:2> \} \end{eqnarray} Thus , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:K> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:1> ; <var:w> := <var:R1> <var:w> := <var:w> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <def:poly> {{ <var:w> = <nat:1> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R1> = <var:Q> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R1> = <nat:1> * <var:Q> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R0> = <nat:2> /\ <var:w> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:w> = <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 