\begin{document} \begin{theorem} Define a set of instructions such that \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:N> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:N> ; <var:K2> := <var:K2> * <var:N> ; <var:p> := <var:K2> ; <var:p> := <var:p> + <var:K1> ; <var:p> := <var:p> + <var:K0> \end{verbatim} Assume $ <var:N> = <var:l> $ ahead of executing the set of commands , it follows that we have $ <var:p> = <nat:8> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> $ once set of commands has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands is evident using standard Hoare reasoning . Going to the next step , we have \begin{verbatim} { <var:N> = <var:l> } <var:K0> := <nat:1> { <var:N> = <var:l> \land <var:K0> = <nat:1> } { <var:N> = <var:l> \land <var:K0> = <nat:1> } <var:K1> := <nat:2> { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> } \end{verbatim} Observing the upcoming lines of codecontained in our segment of code , we see \begin{verbatim} { <var:N> = <var:l> } <var:K0> := <nat:1> { <var:N> = <var:l> \land <var:K0> = <nat:1> } { <var:N> = <var:l> \land <var:K0> = <nat:1> } <var:K1> := <nat:2> { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> } { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> } <var:K1> := <var:K1> * <var:N> { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> } { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> } <var:K2> := <nat:8> { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> \land <var:K2> = <nat:8> } { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> \land <var:K2> = <nat:8> } <var:K2> := <var:K2> * <var:N> { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> \land <var:K2> = <nat:8> * <var:l> } { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> \land <var:K2> = <nat:8> * <var:l> } <var:K2> := <var:K2> * <var:N> { <var:N> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> * <var:l> \land <var:K2> = <nat:8> * <var:l> ^ <nat:2> } \end{verbatim} This is shown with the assignment inference rule defined in usual Hoare techniques . Jumping to the next line found in the code segment , we see \begin{verbatim} { <var:N> = <var:l> } <var:K0> := <nat:1> { <var:N> = <var:l> \land <var:K0> = <nat:1> } \end{verbatim} This is rigorously given by the binding scheme of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:N> = <var:l> }} <var:K0> := <nat:1> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:N> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:N> ; <var:K2> := <var:K2> * <var:N> ; <var:p> := <var:K2> ; <var:p> := <var:p> + <var:K1> ; <var:p> := <var:p> + <var:K0> {{ <var:p> = <nat:8> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:l> /\ <var:K2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:l> /\ <var:K2> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:l> /\ <var:K2> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:l> /\ <var:p> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:K0> = <nat:1> /\ <var:p> = <nat:8> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:p> = <nat:8> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 