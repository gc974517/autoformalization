\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:3> + <var:P> * <var:H> ; <var:P> := <nat:4> + <var:P> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Allow $ <var:H> = <var:N> $ --- taking positive coefficients $ <var:N> $ --- before running the set of instructions , it holds that we have $ <var:P> = <nat:4> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:4> $ when program executes . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:H> = <var:N> \} \\ <var:P> := <nat:4> ; \\ \{ <var:H> = <var:N> \land <var:P> = <nat:4> \} \\ <var:P> := <nat:3> + <var:P> * <var:H> ; \\ \{ <var:H> = <var:N> \land <var:P> = <nat:4> \times <var:N> + <nat:3> \} \\ <var:P> := <nat:4> + <var:P> * <var:H> \\ \{ <var:H> = <var:N> \land <var:P> = <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> \} \end{eqnarray} Hence , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <nat:3> + <var:P> * <var:H> ; <var:P> := <nat:4> + <var:P> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:H> = <var:N> }} <def:poly> {{ <var:P> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:P> = <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:P> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 