\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:3> ; <var:L> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:f> = <var:j> $ before running our code segment it must be that we see $ <var:L> = <nat:3> $ once code has finished . \end{theorem} \begin{proof} The course of logic for our set of commands can be shown by the following decorated series of instructions . \begin{eqnarray} \{ <var:f> = <var:j> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:f> = <var:j> \land <var:b0> = <nat:3> \} \\ <var:L> := <var:b0> \\ \{ <var:f> = <var:j> \land <var:L> = <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:3> ; <var:L> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:f> = <var:j> }} <def:poly> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 