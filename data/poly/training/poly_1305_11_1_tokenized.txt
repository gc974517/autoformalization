\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:E> ; <var:y2> := <var:y1> * <var:E> ; <var:y3> := <var:y2> * <var:E> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:4> ; <var:y3> := <var:y3> * <nat:3> ; <var:s> := <var:y3> <var:s> := <var:s> + <var:y2> <var:s> := <var:s> + <var:y1> <var:s> := <var:s> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given every positive coefficients $ <var:k> $ , that we have $ <var:E> = <var:k> $ prior to the execution of our list of instructions , then $ <var:s> = <nat:3> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this set of commands is done through typical Hoare reasoning . Observing the next command contained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:k> \} & <var:y1> := <var:E> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \} \end{tabular} This is known to be sound through the environment update inference rule given in typical Hoare reasoning . Moving on , \[ \begin{tabular} {rcl} \{ <var:E> = <var:k> \} & <var:y1> := <var:E> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <var:k> \} & <var:y2> := <var:y1> * <var:E> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:E> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \} & <var:y0> := <nat:3> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} & <var:y1> := <var:y1> * <nat:4> & \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} & <var:y2> := <var:y2> * <nat:4> & \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <nat:4> * <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <nat:4> * <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} & <var:y3> := <var:y3> * <nat:3> & \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <nat:4> * <var:k> ^ <nat:2> \land <var:y3> = <nat:3> * <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <nat:4> * <var:k> ^ <nat:2> \land <var:y3> = <nat:3> * <var:k> ^ <nat:3> \land <var:y0> = <nat:3> \} & <var:s> := <var:y3& \{ <var:E> = <var:k> \land <var:y1> = <nat:4> * <var:k> \land <var:y2> = <nat:4> * <var:k> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:s> = <nat:3> * <var:k> ^ <nat:3> \} \end{tabular} This is rigorously given with the binding law defined by typical Hoare logic . Taking another step toward the next command contained in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:k> \} & <var:y1> := <var:E> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \} \end{tabular} This is rigorously given by the variable assignmet law of Hoare techniques . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:k> \} & <var:y1> := <var:E> & \{ <var:E> = <var:k> \land <var:y1> = <var:k> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:E> ; <var:y2> := <var:y1> * <var:E> ; <var:y3> := <var:y2> * <var:E> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:4> ; <var:y3> := <var:y3> * <nat:3> ; <var:s> := <var:y3> <var:s> := <var:s> + <var:y2> <var:s> := <var:s> + <var:y1> <var:s> := <var:s> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:E> = <var:k> }} <def:poly> {{ <var:s> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <var:k> /\ <var:y2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <var:k> /\ <var:y2> = <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <var:k> /\ <var:y2> = <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <nat:4> * <var:k> /\ <var:y2> = <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <nat:4> * <var:k> /\ <var:y2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <nat:4> * <var:k> /\ <var:y2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:y3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <nat:4> * <var:k> /\ <var:y2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:y0> = <nat:3> /\ <var:s> = <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y1> = <nat:4> * <var:k> /\ <var:y0> = <nat:3> /\ <var:s> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:y0> = <nat:3> /\ <var:s> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:s> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 