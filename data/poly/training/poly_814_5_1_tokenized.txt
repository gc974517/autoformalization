\begin{document} \begin{theorem} We define a series of instructions : \begin{verbatim} <var:v1> := <var:n> ; <var:v0> := <nat:4> ; <var:v1> := <var:v1> * <nat:1> ; <var:Z> := <var:v1> <var:Z> := <var:Z> + <var:v0> \end{verbatim} Allow assuming some positive integer coefficients $ <var:p> $ it to hold that $ <var:n> = <var:p> $ prior to the execution of this segment of code it must be that $ <var:Z> = <nat:1> \cdot <var:p> + <nat:4> $ once list of commands has terminated . \end{theorem} \begin{proof} Proving correctness for our program can be seen with Hoare logic . Stepping through , we have \verb | { <var:n> = <var:p> } <var:v1> := <var:n> { <var:n> = <var:p> \land <var:v1> = <var:p> } | . Shifting focus toward the upcoming pieces of code in our list of commands , we see \verb | { <var:n> = <var:p> } <var:v1> := <var:n> { <var:n> = <var:p> \land <var:v1> = <var:p> } | , \verb | { <var:n> = <var:p> \land <var:v1> = <var:p> } <var:v0> := <nat:4> { <var:n> = <var:p> \land <var:v1> = <var:p> \land <var:v0> = <nat:4> } | and \verb | { <var:n> = <var:p> \land <var:v1> = <var:p> \land <var:v0> = <nat:4> } <var:v1> := <var:v1> * <nat:1> { <var:n> = <var:p> \land <var:v1> = <nat:1> * <var:p> \land <var:v0> = <nat:4> } | . This is given by the scheme defined by Hoare reasoning . Paying attention to the following command contained in our series of commands , \verb | { <var:n> = <var:p> } <var:v1> := <var:n> { <var:n> = <var:p> \land <var:v1> = <var:p> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:n> = <var:p> }} <var:v1> := <var:n> ; <var:v0> := <nat:4> ; <var:v1> := <var:v1> * <nat:1> ; <var:Z> := <var:v1> <var:Z> := <var:Z> + <var:v0> {{ <var:Z> = <nat:1> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:v1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:v1> = <var:p> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:v0> = <nat:4> /\ <var:Z> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:Z> = <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 