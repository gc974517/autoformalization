\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:1> ; <var:K> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:u> = <var:d> $ prior to the evaluation of our series of instructions then $ <var:K> = <nat:1> $ when code segment is done executing . \end{theorem} \begin{proof} Notice the following decorated set of instructions . \begin{eqnarray} \{ <var:u> = <var:d> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:u> = <var:d> \land <var:g0> = <nat:1> \} \\ <var:K> := <var:g0> \\ \{ <var:u> = <var:d> \land <var:K> = <nat:1> \} \end{eqnarray} The application of Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:K> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:u> = <var:d> }} <def:poly> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 