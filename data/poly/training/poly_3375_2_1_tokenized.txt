\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:4> ; <var:K> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assume ( given every $ <var:q> \in \mathbb{N} $ ) that $ <var:P> = <var:q> $ prior to interpreting our code then $ <var:K> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic yields : \begin{eqnarray} \{ <var:P> = <var:q> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:P> = <var:q> \land <var:B0> = <nat:4> \} \\ <var:K> := <var:B0> \\ \{ <var:P> = <var:q> \land <var:K> = <nat:4> \} \end{eqnarray} Given the preceding argument , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:4> ; <var:K> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:P> = <var:q> }} <def:poly> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 