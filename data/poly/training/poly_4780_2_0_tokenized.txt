\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:h0> := <nat:4> ; <var:D> := <var:h0> \end{verbatim} Allow , assuming some positive numbers $ <var:Q> $ , that $ <var:K> = <var:Q> $ ahead of the execution of the set of commands then $ <var:D> = <nat:4> $ after program is done executing . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:K> = <var:Q> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:K> = <var:Q> \land <var:h0> = <nat:4> \} \\ <var:D> := <var:h0> \\ \{ <var:K> = <var:Q> \land <var:D> = <nat:4> \} \end{eqnarray} Therefore , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <var:h0> := <nat:4> ; <var:D> := <var:h0> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 