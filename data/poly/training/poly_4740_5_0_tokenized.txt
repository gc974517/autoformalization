\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:l> ; <var:n> := <var:u1> ; <var:n> := <var:n> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given --- taking positive integers $ <var:Y> $ --- it to hold that $ <var:l> = <var:Y> $ before interpreting the list of commands , it holds that $ <var:n> = <nat:6> \times <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our list of commands is evident using usual Hoare reasoning . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:Y> \} & <var:u0> := <nat:2> & \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \} \\ \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \} & <var:u1> := <nat:6> & \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \land <var:u1> = <nat:6> \} \\ \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \land <var:u1> = <nat:6> \} & <var:u1> := <var:u1> * <var:l> & \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \land <var:u1> = <nat:6> \cdot <var:Y> \} \\ \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \land <var:u1> = <nat:6> \cdot <var:Y> \} & <var:n> := <var:u1> & \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \land <var:n> = <nat:6> \cdot <var:Y> \} \\ \{ <var:l> = <var:Y> \land <var:u0> = <nat:2> \land <var:n> = <nat:6> \cdot <var:Y> \} & <var:n> := <var:n> + <var:u0& \{ <var:l> = <var:Y> \land <var:n> = <nat:6> \cdot <var:Y> + <nat:2> \} \end{tabular} This is ensured through the assignment rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:2> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:l> ; <var:n> := <var:u1> ; <var:n> := <var:n> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:l> = <var:Y> }} <def:poly> {{ <var:n> = <nat:6> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:u0> = <nat:2> /\ <var:n> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:n> = <nat:6> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 