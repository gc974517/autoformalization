\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:Z> ; <var:O> := <var:u1> ; <var:O> := <var:O> + <var:u0> \end{verbatim} Given that we have $ <var:Z> = <var:R> $ with some $ <var:R> $ before the evaluation of this series of instructions it follows that we have $ <var:O> = <nat:7> \times <var:R> + <nat:2> $ after set of instructions has exited . \end{theorem} \begin{proof} Let the below decorated program . \begin{eqnarray} \{ <var:Z> = <var:R> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:Z> = <var:R> \land <var:u0> = <nat:2> \} \\ <var:u1> := <nat:7> ; \\ \{ <var:Z> = <var:R> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \} \\ <var:u1> := <var:u1> * <var:Z> ; \\ \{ <var:Z> = <var:R> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> * <var:R> \} \\ <var:O> := <var:u1> ; \\ \{ <var:Z> = <var:R> \land <var:u0> = <nat:2> \land <var:O> = <nat:7> * <var:R> \} \\ <var:O> := <var:O> + <var:u0> \\ \{ <var:Z> = <var:R> \land <var:O> = <nat:7> * <var:R> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Z> = <var:R> }} <var:u0> := <nat:2> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:Z> ; <var:O> := <var:u1> ; <var:O> := <var:O> + <var:u0> {{ <var:O> = <nat:7> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:u0> = <nat:2> /\ <var:O> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:O> = <nat:7> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 