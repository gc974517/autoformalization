\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:k> ; <var:L2> := <nat:1> ; <var:L2> := <var:L2> * <var:k> ; <var:L2> := <var:L2> * <var:k> ; <var:A> := <var:L2> ; <var:A> := <var:A> + <var:L1> ; <var:A> := <var:A> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming for whole numbers $ <var:H> $ that $ <var:k> = <var:H> $ prior to evaluating this series of commands , it must be that we have $ <var:A> = <nat:1> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:4> $ once series of instructions executes . \end{theorem} \begin{proof} Demonstrating correctness of our code is clear through typical Hoare reasoning . Now , we see \begin{verbatim} { <var:k> = <var:H> } <var:L0> := <nat:4> { <var:k> = <var:H> \land <var:L0> = <nat:4> } \end{verbatim} This is given by the law defined in typical Hoare logic . Observing the next pieces of code found in our series of commands , \begin{verbatim} { <var:k> = <var:H> } <var:L0> := <nat:4> { <var:k> = <var:H> \land <var:L0> = <nat:4> } { <var:k> = <var:H> \land <var:L0> = <nat:4> } <var:L1> := <nat:2> { <var:k> = <var:H> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> } { <var:k> = <var:H> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> } <var:L1> := <var:L1> * <var:k> { <var:k> = <var:H> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:H> } { <var:k> = <var:H> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:H> } <var:L2> := <nat:1> { <var:k> = <var:H> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:H> \land <var:L2> = <nat:1> } \end{verbatim} This is rigorously given by the variable update scheme found in usual Hoare reasoning . Following , \begin{verbatim} { <var:k> = <var:H> } <var:L0> := <nat:4> { <var:k> = <var:H> \land <var:L0> = <nat:4> } \end{verbatim} Paying attention to the following lines contained in the list of commands , we see \begin{verbatim} { <var:k> = <var:H> } <var:L0> := <nat:4> { <var:k> = <var:H> \land <var:L0> = <nat:4> } { <var:k> = <var:H> \land <var:L0> = <nat:4> } <var:L1> := <nat:2> { <var:k> = <var:H> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> } \end{verbatim} This is rigorously given with the variable assignmet scheme given in typical Hoare techniques . Moving forward to the next step , we have \begin{verbatim} { <var:k> = <var:H> } <var:L0> := <nat:4> { <var:k> = <var:H> \land <var:L0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:4> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:k> ; <var:L2> := <nat:1> ; <var:L2> := <var:L2> * <var:k> ; <var:L2> := <var:L2> * <var:k> ; <var:A> := <var:L2> ; <var:A> := <var:A> + <var:L1> ; <var:A> := <var:A> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:k> = <var:H> }} <def:poly> {{ <var:A> = <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:H> /\ <var:L2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:H> /\ <var:L2> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:H> /\ <var:L2> = <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:H> /\ <var:A> = <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:L0> = <nat:4> /\ <var:A> = <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:A> = <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 