\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:9> ; <var:T> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:z> = <var:M> $ prior to running this list of commands then $ <var:T> = <nat:9> $ when code executes . \end{theorem} \begin{proof} The course of logic for this series of commands can be shown with this decorated list of instructions . \begin{eqnarray} \{ <var:z> = <var:M> \} \\ <var:a0> := <nat:9> ; \\ \{ <var:z> = <var:M> \land <var:a0> = <nat:9> \} \\ <var:T> := <var:a0> \\ \{ <var:z> = <var:M> \land <var:T> = <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:9> ; <var:T> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <def:poly> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 