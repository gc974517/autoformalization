\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:3> ; <var:p> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Assume $ <var:v> = <var:F> $ ahead of interpreting the list of commands , it holds that we see $ <var:p> = <nat:3> $ when series of commands is done . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:v> = <var:F> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:v> = <var:F> \land <var:V0> = <nat:3> \} \\ <var:p> := <var:V0> \\ \{ <var:v> = <var:F> \land <var:p> = <nat:3> \} \end{eqnarray} Given the preceding argument , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:p> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:v> = <var:F> }} <def:poly> {{ <var:p> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:p> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 