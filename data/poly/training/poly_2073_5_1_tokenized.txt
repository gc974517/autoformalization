\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:Z> ; <var:j0> := <nat:8> ; <var:j1> := <var:j1> * <nat:8> ; <var:h> := <var:j1> <var:h> := <var:h> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:Z> = <var:n> $ ahead of the evaluation of this segment of code it holds that $ <var:h> = <nat:8> \cdot <var:n> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques results in : \begin{eqnarray} \{ <var:Z> = <var:n> \} \\ <var:j1> := <var:Z> ; \\ \{ <var:Z> = <var:n> \land <var:j1> = <var:n> \} \\ <var:j0> := <nat:8> ; \\ \{ <var:Z> = <var:n> \land <var:j1> = <var:n> \land <var:j0> = <nat:8> \} \\ <var:j1> := <var:j1> * <nat:8> ; \\ \{ <var:Z> = <var:n> \land <var:j1> = <nat:8> \times <var:n> \land <var:j0> = <nat:8> \} \\ <var:h> := <var:j1> \\ \{ <var:Z> = <var:n> \land <var:j0> = <nat:8> \land <var:h> = <nat:8> \times <var:n> \} \\ <var:h> := <var:h> + <var:j0> \\ \{ <var:Z> = <var:n> \land <var:h> = <nat:8> \times <var:n> + <nat:8> \} \end{eqnarray} Therefore , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:Z> ; <var:j0> := <nat:8> ; <var:j1> := <var:j1> * <nat:8> ; <var:h> := <var:j1> <var:h> := <var:h> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <def:poly> {{ <var:h> = <nat:8> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:j1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:j1> = <var:n> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:j1> = <nat:8> * <var:n> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:j0> = <nat:8> /\ <var:h> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:h> = <nat:8> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 