\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:w> ; <var:t0> := <nat:5> ; <var:t1> := <var:t1> * <nat:7> ; <var:x> := <var:t1> <var:x> := <var:x> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Allow $ <var:w> = <var:U> $ , with some integers $ <var:U> $ , prior to evaluating this code , it holds that $ <var:x> = <nat:7> \times <var:U> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:w> = <var:U> \} \\ <var:t1> := <var:w> ; \\ \{ <var:w> = <var:U> \land <var:t1> = <var:U> \} \\ <var:t0> := <nat:5> ; \\ \{ <var:w> = <var:U> \land <var:t1> = <var:U> \land <var:t0> = <nat:5> \} \\ <var:t1> := <var:t1> * <nat:7> ; \\ \{ <var:w> = <var:U> \land <var:t1> = <nat:7> \cdot <var:U> \land <var:t0> = <nat:5> \} \\ <var:x> := <var:t1> \\ \{ <var:w> = <var:U> \land <var:t0> = <nat:5> \land <var:x> = <nat:7> \cdot <var:U> \} \\ <var:x> := <var:x> + <var:t0> \\ \{ <var:w> = <var:U> \land <var:x> = <nat:7> \cdot <var:U> + <nat:5> \} \end{eqnarray} Therefore , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:w> ; <var:t0> := <nat:5> ; <var:t1> := <var:t1> * <nat:7> ; <var:x> := <var:t1> <var:x> := <var:x> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <def:poly> {{ <var:x> = <nat:7> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:t1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:t1> = <var:U> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:t1> = <nat:7> * <var:U> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:t0> = <nat:5> /\ <var:x> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:x> = <nat:7> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 