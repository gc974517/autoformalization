\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:p0> := <nat:7> ; <var:B> := <var:p0> \end{verbatim} Assume that we have $ <var:X> = <var:x> $ before the execution of our series of instructions , it must be that we have $ <var:B> = <nat:7> $ when code terminates . \end{theorem} \begin{proof} The method of proof for the series of instructions is accomplished with typical Hoare techniques . Stepping forward , \verb | { <var:X> = <var:x> } <var:p0> := <nat:7> { <var:X> = <var:x> \land <var:p0> = <nat:7> } | . This is shown using the law defined by typical Hoare reasoning . Moving onward , we have \verb | { <var:X> = <var:x> } <var:p0> := <nat:7> { <var:X> = <var:x> \land <var:p0> = <nat:7> } | . This is rigorously given with the binding scheme in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:X> = <var:x> }} <var:p0> := <nat:7> ; <var:B> := <var:p0> {{ <var:B> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:B> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 