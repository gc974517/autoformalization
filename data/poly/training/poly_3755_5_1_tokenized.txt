\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:z> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:6> ; <var:J> := <var:q1> <var:J> := <var:J> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Allowing it to be that $ <var:z> = <var:R> $ before the evaluation of this series of commands it must be that we have $ <var:J> = <nat:6> \cdot <var:R> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the code is done with standard Hoare reasoning . Paying attention to the subsequent bits of codefound in the code segment , we see \begin{eqnarray} \{ <var:z> = <var:R> \} \, <var:q1> := <var:z> \, \{ <var:z> = <var:R> \land <var:q1> = <var:R> \} \\ \{ <var:z> = <var:R> \land <var:q1> = <var:R> \} \, <var:q0> := <nat:6> \, \{ <var:z> = <var:R> \land <var:q1> = <var:R> \land <var:q0> = <nat:6> \} \\ \{ <var:z> = <var:R> \land <var:q1> = <var:R> \land <var:q0> = <nat:6> \} \, <var:q1> := <var:q1> * <nat:6> \, \{ <var:z> = <var:R> \land <var:q1> = <nat:6> * <var:R> \land <var:q0> = <nat:6> \} \\ \{ <var:z> = <var:R> \land <var:q1> = <nat:6> * <var:R> \land <var:q0> = <nat:6> \} \, <var:J> := <var:q1\, \{ <var:z> = <var:R> \land <var:q0> = <nat:6> \land <var:J> = <nat:6> * <var:R> \} \\ \{ <var:z> = <var:R> \land <var:q0> = <nat:6> \land <var:J> = <nat:6> * <var:R> \} \, <var:J> := <var:J> + <var:q0\, \{ <var:z> = <var:R> \land <var:J> = <nat:6> * <var:R> + <nat:6> \} \end{eqnarray} This is deduced with the environment update inference rule in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:z> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:6> ; <var:J> := <var:q1> <var:J> := <var:J> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:z> = <var:R> }} <def:poly> {{ <var:J> = <nat:6> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:q1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:q1> = <var:R> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:q1> = <nat:6> * <var:R> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:q0> = <nat:6> /\ <var:J> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:J> = <nat:6> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 