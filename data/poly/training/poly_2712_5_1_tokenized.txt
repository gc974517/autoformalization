\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:o> ; <var:L0> := <nat:9> ; <var:L1> := <var:L1> * <nat:9> ; <var:d> := <var:L1> <var:d> := <var:d> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:o> = <var:D> $ before running our series of instructions it holds that we have $ <var:d> = <nat:9> \times <var:D> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be seen through usual Hoare reasoning . Moving on to the next step , we see \begin{eqnarray} \{ <var:o> = <var:D> \} \, <var:L1> := <var:o> \, \{ <var:o> = <var:D> \land <var:L1> = <var:D> \} \\ \{ <var:o> = <var:D> \land <var:L1> = <var:D> \} \, <var:L0> := <nat:9> \, \{ <var:o> = <var:D> \land <var:L1> = <var:D> \land <var:L0> = <nat:9> \} \\ \{ <var:o> = <var:D> \land <var:L1> = <var:D> \land <var:L0> = <nat:9> \} \, <var:L1> := <var:L1> * <nat:9> \, \{ <var:o> = <var:D> \land <var:L1> = <nat:9> * <var:D> \land <var:L0> = <nat:9> \} \\ \{ <var:o> = <var:D> \land <var:L1> = <nat:9> * <var:D> \land <var:L0> = <nat:9> \} \, <var:d> := <var:L1\, \{ <var:o> = <var:D> \land <var:L0> = <nat:9> \land <var:d> = <nat:9> * <var:D> \} \end{eqnarray} This is known to be sound using the environment update inference rule given by standard Hoare reasoning . Next , we see \begin{eqnarray} \{ <var:o> = <var:D> \} \, <var:L1> := <var:o> \, \{ <var:o> = <var:D> \land <var:L1> = <var:D> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:o> ; <var:L0> := <nat:9> ; <var:L1> := <var:L1> * <nat:9> ; <var:d> := <var:L1> <var:d> := <var:d> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:o> = <var:D> }} <def:poly> {{ <var:d> = <nat:9> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:D> /\ <var:L1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:D> /\ <var:L1> = <var:D> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:D> /\ <var:L1> = <nat:9> * <var:D> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:D> /\ <var:L0> = <nat:9> /\ <var:d> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:D> /\ <var:d> = <nat:9> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 