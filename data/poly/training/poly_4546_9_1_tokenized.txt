\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:D> ; <var:x2> := <var:x1> * <var:D> ; <var:x3> := <var:x2> * <var:D> ; <var:x0> := <nat:6> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:7> ; <var:G> := <var:x3> <var:G> := <var:G> + <var:x2> <var:G> := <var:G> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:D> = <var:X> $ before the evaluation of the segment of code then we have $ <var:G> = <nat:7> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:6> $ once set of commands terminates . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:D> = <var:X> \} \\ <var:x1> := <var:D> ; \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \} \\ <var:x2> := <var:x1> * <var:D> ; \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x2> = <var:X> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:D> ; \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x2> = <var:X> ^ <nat:2> \land <var:x3> = <var:X> ^ <nat:3> \} \\ <var:x0> := <nat:6> ; \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x2> = <var:X> ^ <nat:2> \land <var:x3> = <var:X> ^ <nat:3> \land <var:x0> = <nat:6> \} \\ <var:x2> := <var:x2> * <nat:4> ; \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x2> = <nat:4> * <var:X> ^ <nat:2> \land <var:x3> = <var:X> ^ <nat:3> \land <var:x0> = <nat:6> \} \\ <var:x3> := <var:x3> * <nat:7> ; \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x2> = <nat:4> * <var:X> ^ <nat:2> \land <var:x3> = <nat:7> * <var:X> ^ <nat:3> \land <var:x0> = <nat:6> \} \\ <var:G> := <var:x3> \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x2> = <nat:4> * <var:X> ^ <nat:2> \land <var:x0> = <nat:6> \land <var:G> = <nat:7> * <var:X> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:x2> \\ \{ <var:D> = <var:X> \land <var:x1> = <var:X> \land <var:x0> = <nat:6> \land <var:G> = <nat:7> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:x0> \\ \{ <var:D> = <var:X> \land <var:G> = <nat:7> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:6> \} \end{eqnarray} As a consequence , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:D> ; <var:x2> := <var:x1> * <var:D> ; <var:x3> := <var:x2> * <var:D> ; <var:x0> := <nat:6> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:7> ; <var:G> := <var:x3> <var:G> := <var:G> + <var:x2> <var:G> := <var:G> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:D> = <var:X> }} <def:poly> {{ <var:G> = <nat:7> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x2> = <var:X> ^ <nat:2> /\ <var:x3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x2> = <var:X> ^ <nat:2> /\ <var:x3> = <var:X> ^ <nat:3> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x2> = <nat:4> * <var:X> ^ <nat:2> /\ <var:x3> = <var:X> ^ <nat:3> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x2> = <nat:4> * <var:X> ^ <nat:2> /\ <var:x3> = <nat:7> * <var:X> ^ <nat:3> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x2> = <nat:4> * <var:X> ^ <nat:2> /\ <var:x0> = <nat:6> /\ <var:G> = <nat:7> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:x1> = <var:X> /\ <var:x0> = <nat:6> /\ <var:G> = <nat:7> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:G> = <nat:7> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 