\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:l> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:A> := <var:e1> <var:A> := <var:A> + <var:e0> \end{verbatim} Assume it to hold that $ <var:l> = <var:R> $ , letting integers $ <var:R> $ , prior to executing the list of instructions , it follows that $ <var:A> = <nat:2> \cdot <var:R> + <nat:4> $ once list of instructions executes . \end{theorem} \begin{proof} The course of logic for this code is done using Hoare logic . Advancing to the upcoming lines seen in the list of instructions , \begin{verbatim} { <var:l> = <var:R> } <var:e1> := <var:l> { <var:l> = <var:R> \land <var:e1> = <var:R> } { <var:l> = <var:R> \land <var:e1> = <var:R> } <var:e0> := <nat:4> { <var:l> = <var:R> \land <var:e1> = <var:R> \land <var:e0> = <nat:4> } { <var:l> = <var:R> \land <var:e1> = <var:R> \land <var:e0> = <nat:4> } <var:e1> := <var:e1> * <nat:2> { <var:l> = <var:R> \land <var:e1> = <nat:2> * <var:R> \land <var:e0> = <nat:4> } { <var:l> = <var:R> \land <var:e1> = <nat:2> * <var:R> \land <var:e0> = <nat:4> } <var:A> := <var:e1{ <var:l> = <var:R> \land <var:e0> = <nat:4> \land <var:A> = <nat:2> * <var:R> } \end{verbatim} This is sound using the binding rule found in typical Hoare logic . Further , \begin{verbatim} { <var:l> = <var:R> } <var:e1> := <var:l> { <var:l> = <var:R> \land <var:e1> = <var:R> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:l> = <var:R> }} <var:e1> := <var:l> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:A> := <var:e1> <var:A> := <var:A> + <var:e0> {{ <var:A> = <nat:2> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:e1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:e1> = <var:R> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:e1> = <nat:2> * <var:R> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:e0> = <nat:4> /\ <var:A> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:A> = <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 