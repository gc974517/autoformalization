\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:6> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:c> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:c> ; <var:T2> := <var:T2> * <var:c> ; <var:N> := <var:T2> ; <var:N> := <var:N> + <var:T1> ; <var:N> := <var:N> + <var:T0> \end{verbatim} Given it to hold that $ <var:c> = <var:y> $ ahead of evaluating our program it must be that we see $ <var:N> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:6> $ after series of instructions finishes . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:c> = <var:y> \} \\ <var:T0> := <nat:6> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \} \\ <var:T1> := <nat:6> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:T1> = <nat:6> \} \\ <var:T1> := <var:T1> * <var:c> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:T1> = <nat:6> \times <var:y> \} \\ <var:T2> := <nat:8> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:T1> = <nat:6> \times <var:y> \land <var:T2> = <nat:8> \} \\ <var:T2> := <var:T2> * <var:c> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:T1> = <nat:6> \times <var:y> \land <var:T2> = <nat:8> \times <var:y> \} \\ <var:T2> := <var:T2> * <var:c> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:T1> = <nat:6> \times <var:y> \land <var:T2> = <nat:8> \times <var:y> ^ <nat:2> \} \\ <var:N> := <var:T2> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:T1> = <nat:6> \times <var:y> \land <var:N> = <nat:8> \times <var:y> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:T1> ; \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:6> \land <var:N> = <nat:8> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> \} \\ <var:N> := <var:N> + <var:T0> \\ \{ <var:c> = <var:y> \land <var:N> = <nat:8> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> + <nat:6> \} \end{eqnarray} As a result , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:c> = <var:y> }} <var:T0> := <nat:6> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:c> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:c> ; <var:T2> := <var:T2> * <var:c> ; <var:N> := <var:T2> ; <var:N> := <var:N> + <var:T1> ; <var:N> := <var:N> + <var:T0> {{ <var:N> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:6> * <var:y> /\ <var:T2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:6> * <var:y> /\ <var:T2> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:6> * <var:y> /\ <var:T2> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:6> * <var:y> /\ <var:N> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:6> /\ <var:N> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:N> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 