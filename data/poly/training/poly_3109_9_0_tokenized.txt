\begin{document} \begin{theorem} Let the following program : \begin{verbatim} <var:B0> := <nat:2> ; <var:B1> := <nat:3> ; <var:B1> := <var:B1> * <var:n> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:n> ; <var:B2> := <var:B2> * <var:n> ; <var:g> := <var:B2> ; <var:g> := <var:g> + <var:B1> ; <var:g> := <var:g> + <var:B0> \end{verbatim} Allow it to be that $ <var:n> = <var:V> $ taking natural coefficients $ <var:V> $ prior to running our set of commands , then $ <var:g> = <nat:7> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be given through standard Hoare techniques . Going forward , we see the variable update line letting $ <nat:2> $ as $ <var:B0>$ . This forwards $ \{ <var:n> = <var:V> \} $ as $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \} $ . This is sound through the assignment inference rule given in usual Hoare techniques . Moving forward to the next step , we see the variable assignmet line \verb | <var:B1> := <nat:3> ; | . This takes the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \} $ as the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> \} $ . This is given by the assignment law defined in usual Hoare logic . Shifting focus toward the proceeding line of code seen in our set of commands , the variable update line \verb | <var:B1> := <var:B1> * <var:n> ; | . This transfers the precondition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> \} $ toward the postcondition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \} $ . Moving forward to the next step , the code \verb | <var:B2> := <nat:7> ; | . This statement forwards the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \} $ to the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:B2> = <nat:7> \} $ . Moving forward to the next step , the variable binding command \verb | <var:B2> := <var:B2> * <var:n> ; | . This code advances $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:B2> = <nat:7> \} $ to $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:B2> = <nat:7> * <var:V> \} $ . This is shown to be logically sound by the assignment inference rule in standard Hoare logic . Moving forward , we have the environment update line binding $ <var:B2> * <var:n> $ as $ <var:B2>$ . This line forwards the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:B2> = <nat:7> * <var:V> \} $ as the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:B2> = <nat:7> * <var:V> ^ <nat:2> \} $ . This is rigorously given through the assignment rule obtained from usual Hoare techniques . Shifting focus toward the next line of code seen in our series of instructions , we have the command yielding $ <var:B2> $ to $ <var:g>$ . This takes the precondition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:B2> = <nat:7> * <var:V> ^ <nat:2> \} $ as the condition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:g> = <nat:7> * <var:V> ^ <nat:2> \} $ . This is guaranteed using the assignment rule of typical Hoare logic . Moving forward to the next step , the variable binding command \verb | <var:g> := <var:g> + <var:B1> ; | . This transfers the precondition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:B1> = <nat:3> * <var:V> \land <var:g> = <nat:7> * <var:V> ^ <nat:2> \} $ into $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:g> = <nat:7> * <var:V> ^ <nat:2> + <nat:3> * <var:V> \} $ . Looking at the proceeding piece of code seen in the code segment , the variable binding line assigning $ <var:g> + <var:B0$ toward $ <var:g>$ . This redefines the precondition $ \{ <var:n> = <var:V> \land <var:B0> = <nat:2> \land <var:g> = <nat:7> * <var:V> ^ <nat:2> + <nat:3> * <var:V> \} $ to $ \{ <var:n> = <var:V> \land <var:g> = <nat:7> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> \} $ . This is guaranteed using the assignment law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:n> = <var:V> }} <var:B0> := <nat:2> ; <var:B1> := <nat:3> ; <var:B1> := <var:B1> * <var:n> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:n> ; <var:B2> := <var:B2> * <var:n> ; <var:g> := <var:B2> ; <var:g> := <var:g> + <var:B1> ; <var:g> := <var:g> + <var:B0> {{ <var:g> = <nat:7> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:3> * <var:V> /\ <var:B2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:3> * <var:V> /\ <var:B2> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:3> * <var:V> /\ <var:B2> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:3> * <var:V> /\ <var:g> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:B0> = <nat:2> /\ <var:g> = <nat:7> * <var:V> ^ <nat:2> + <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:g> = <nat:7> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 