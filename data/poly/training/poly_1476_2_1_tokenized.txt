\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:5> ; <var:G> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Assuming $ <var:e> = <var:m> $ --- given some positive coefficients $ <var:m> $ --- ahead of the evaluation of the list of instructions it holds that we see $ <var:G> = <nat:5> $ . \end{theorem} \begin{proof} Notice the below decorated list of commands . \begin{eqnarray} \{ <var:e> = <var:m> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:e> = <var:m> \land <var:W0> = <nat:5> \} \\ <var:G> := <var:W0> \\ \{ <var:e> = <var:m> \land <var:G> = <nat:5> \} \end{eqnarray} Applying typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:5> ; <var:G> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:e> = <var:m> }} <def:poly> {{ <var:G> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:m> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:m> /\ <var:G> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 