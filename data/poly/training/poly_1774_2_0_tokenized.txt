\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:4> ; <var:D> := <var:l0> \end{verbatim} Allow taking positive numbers $ <var:j> $ it to hold that $ <var:x> = <var:j> $ prior to the evaluation of our list of instructions then we see $ <var:D> = <nat:4> $ . \end{theorem} \begin{proof} Notice the following decorated code . \begin{eqnarray} \{ <var:x> = <var:j> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:x> = <var:j> \land <var:l0> = <nat:4> \} \\ <var:D> := <var:l0> \\ \{ <var:x> = <var:j> \land <var:D> = <nat:4> \} \end{eqnarray} Applying standard Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:x> = <var:j> }} <var:l0> := <nat:4> ; <var:D> := <var:l0> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 