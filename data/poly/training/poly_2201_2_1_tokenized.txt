\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:3> ; <var:J> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming that $ <var:G> = <var:r> $ --- for integers $ <var:r> $ --- prior to running the segment of code it holds that we have $ <var:J> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this program can be demonstrated using usual Hoare logic . After , the line giving $ <nat:3> $ as $ <var:Q0>$ . This redefines the condition $ \{ <var:G> = <var:r> \} $ to the condition $ \{ <var:G> = <var:r> \land <var:Q0> = <nat:3> \} $ . This is ensured using the assignment law given by usual Hoare techniques . Immediately after , we see the variable binding command \verb | <var:J> := <var:Q0> | . This command moves the precondition $ \{ <var:G> = <var:r> \land <var:Q0> = <nat:3> \} $ into $ \{ <var:G> = <var:r> \land <var:J> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:J> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:G> = <var:r> }} <def:poly> {{ <var:J> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:J> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 