\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:4> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:C> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:C> ; <var:W2> := <var:W2> * <var:C> ; <var:B> := <var:W2> ; <var:B> := <var:B> + <var:W1> ; <var:B> := <var:B> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:C> = <var:X> $ ( given all natural coefficients $ <var:X> $ ) prior to executing this series of commands it must be that we have $ <var:B> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> $ after code has terminated . \end{theorem} \begin{proof} The flow of logic for our list of instructions is accomplished through typical Hoare techniques . Considering the proceeding command in the list of commands , the binding statement \verb | <var:W0> := <nat:4> ; | . This transfers the condition $ \{ <var:C> = <var:X> \} $ toward the postcondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \} $ . This is guaranteed through the assignment law from usual Hoare reasoning . After , we have the variable update command defining $ <nat:4> $ into $ <var:W1>$ . This moves the precondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \} $ as the postcondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \} $ . Focusing on the proceeding piece of code in our series of commands , we have the environment update line \verb | <var:W1> := <var:W1> * <var:C> ; | . This code forwards $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \} $ to the condition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \} $ . Moving on to the next step , the variable assignmet statement defining $ <nat:6> $ as $ <var:W2>$ . This advances the condition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \} $ as the condition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:W2> = <nat:6> \} $ . Moving on , the statement assigning $ <var:W2> * <var:C> $ toward $ <var:W2>$ . This redefines the precondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:W2> = <nat:6> \} $ toward the postcondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:W2> = <nat:6> \cdot <var:X> \} $ . Further , we have the variable binding statement giving $ <var:W2> * <var:C> $ into $ <var:W2>$ . This line moves $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:W2> = <nat:6> \cdot <var:X> \} $ to the condition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:W2> = <nat:6> \cdot <var:X> ^ <nat:2> \} $ . Going forward , the variable assignmet line \verb | <var:B> := <var:W2> ; | . This advances the precondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:W2> = <nat:6> \cdot <var:X> ^ <nat:2> \} $ toward $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:B> = <nat:6> \cdot <var:X> ^ <nat:2> \} $ . Observing the following piece of code found in our series of commands , the environment update code defining $ <var:B> + <var:W1> $ into $ <var:B>$ . This advances the condition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \cdot <var:X> \land <var:B> = <nat:6> \cdot <var:X> ^ <nat:2> \} $ toward the postcondition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:B> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> \} $ . This is shown to be logically sound with the assignment rule of usual Hoare reasoning . Advancing to the next step , we have the variable assignmet command \verb | <var:B> := <var:B> + <var:W0> | . This code redefines the condition $ \{ <var:C> = <var:X> \land <var:W0> = <nat:4> \land <var:B> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> \} $ into the postcondition $ \{ <var:C> = <var:X> \land <var:B> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:4> \} $ . This is rigorously given through the assignment law of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:C> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:C> ; <var:W2> := <var:W2> * <var:C> ; <var:B> := <var:W2> ; <var:B> := <var:B> + <var:W1> ; <var:B> := <var:B> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:C> = <var:X> }} <def:poly> {{ <var:B> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:X> /\ <var:W2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:X> /\ <var:W2> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:X> /\ <var:W2> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:X> /\ <var:B> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:W0> = <nat:4> /\ <var:B> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:B> = <nat:6> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 