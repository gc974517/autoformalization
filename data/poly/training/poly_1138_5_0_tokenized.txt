\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:p> ; <var:v> := <var:b1> ; <var:v> := <var:v> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:p> = <var:o> $ for $ <var:o> \in \mathbb{Z}^+ $ before evaluating this segment of code , it must be that we see $ <var:v> = <nat:6> \times <var:o> + <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:p> = <var:o> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:p> = <var:o> \land <var:b0> = <nat:8> \} \\ <var:b1> := <nat:6> ; \\ \{ <var:p> = <var:o> \land <var:b0> = <nat:8> \land <var:b1> = <nat:6> \} \\ <var:b1> := <var:b1> * <var:p> ; \\ \{ <var:p> = <var:o> \land <var:b0> = <nat:8> \land <var:b1> = <nat:6> \times <var:o> \} \\ <var:v> := <var:b1> ; \\ \{ <var:p> = <var:o> \land <var:b0> = <nat:8> \land <var:v> = <nat:6> \times <var:o> \} \\ <var:v> := <var:v> + <var:b0> \\ \{ <var:p> = <var:o> \land <var:v> = <nat:6> \times <var:o> + <nat:8> \} \end{eqnarray} Thus , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:8> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:p> ; <var:v> := <var:b1> ; <var:v> := <var:v> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:p> = <var:o> }} <def:poly> {{ <var:v> = <nat:6> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:b0> = <nat:8> /\ <var:v> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:v> = <nat:6> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 