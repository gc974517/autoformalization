\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:j> ; <var:T2> := <var:T1> * <var:j> ; <var:T3> := <var:T2> * <var:j> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:5> ; <var:d> := <var:T3> <var:d> := <var:d> + <var:T2> <var:d> := <var:d> + <var:T1> <var:d> := <var:d> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:j> = <var:H> $ prior to executing the set of commands , it holds that we have $ <var:d> = <nat:5> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:5> $ once list of instructions has exited . \end{theorem} \begin{proof} Using Hoare techniques yields : \begin{eqnarray} \{ <var:j> = <var:H> \} \\ <var:T1> := <var:j> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <var:H> \} \\ <var:T2> := <var:T1> * <var:j> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <var:H> \land <var:T2> = <var:H> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:j> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <var:H> \land <var:T2> = <var:H> ^ <nat:2> \land <var:T3> = <var:H> ^ <nat:3> \} \\ <var:T0> := <nat:5> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <var:H> \land <var:T2> = <var:H> ^ <nat:2> \land <var:T3> = <var:H> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:T1> := <var:T1> * <nat:3> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <nat:3> * <var:H> \land <var:T2> = <var:H> ^ <nat:2> \land <var:T3> = <var:H> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:T2> := <var:T2> * <nat:1> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <nat:3> * <var:H> \land <var:T2> = <nat:1> * <var:H> ^ <nat:2> \land <var:T3> = <var:H> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:T3> := <var:T3> * <nat:5> ; \\ \{ <var:j> = <var:H> \land <var:T1> = <nat:3> * <var:H> \land <var:T2> = <nat:1> * <var:H> ^ <nat:2> \land <var:T3> = <nat:5> * <var:H> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:d> := <var:T3> \\ \{ <var:j> = <var:H> \land <var:T1> = <nat:3> * <var:H> \land <var:T2> = <nat:1> * <var:H> ^ <nat:2> \land <var:T0> = <nat:5> \land <var:d> = <nat:5> * <var:H> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:T2> \\ \{ <var:j> = <var:H> \land <var:T1> = <nat:3> * <var:H> \land <var:T0> = <nat:5> \land <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:T1> \\ \{ <var:j> = <var:H> \land <var:T0> = <nat:5> \land <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> \} \\ <var:d> := <var:d> + <var:T0> \\ \{ <var:j> = <var:H> \land <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:5> \} \end{eqnarray} Considering the above , the set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:j> ; <var:T2> := <var:T1> * <var:j> ; <var:T3> := <var:T2> * <var:j> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:5> ; <var:d> := <var:T3> <var:d> := <var:d> + <var:T2> <var:d> := <var:d> + <var:T1> <var:d> := <var:d> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:j> = <var:H> }} <def:poly> {{ <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <var:H> /\ <var:T2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <var:H> /\ <var:T2> = <var:H> ^ <nat:2> /\ <var:T3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <var:H> /\ <var:T2> = <var:H> ^ <nat:2> /\ <var:T3> = <var:H> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <nat:3> * <var:H> /\ <var:T2> = <var:H> ^ <nat:2> /\ <var:T3> = <var:H> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <nat:3> * <var:H> /\ <var:T2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:T3> = <var:H> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <nat:3> * <var:H> /\ <var:T2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:T3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <nat:3> * <var:H> /\ <var:T2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:T0> = <nat:5> /\ <var:d> = <nat:5> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T1> = <nat:3> * <var:H> /\ <var:T0> = <nat:5> /\ <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:T0> = <nat:5> /\ <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:d> = <nat:5> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 