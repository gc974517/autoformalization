\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:3> ; <var:C> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:H> = <var:Q> $ ahead of executing our code segment , then we have $ <var:C> = <nat:3> $ . \end{theorem} \begin{proof} The proof of the list of instructions is given using typical Hoare logic . Advancing on , the line defining $ <nat:3> $ as $ <var:v0>$ . This code forwards the condition $ \{ <var:H> = <var:Q> \} $ into the postcondition $ \{ <var:H> = <var:Q> \land <var:v0> = <nat:3> \} $ . Moving on to the following command seen in the program , the variable update command giving $ <var:v0$ as $ <var:C>$ . This moves $ \{ <var:H> = <var:Q> \land <var:v0> = <nat:3> \} $ to the postcondition $ \{ <var:H> = <var:Q> \land <var:C> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:3> ; <var:C> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:H> = <var:Q> }} <def:poly> {{ <var:C> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:C> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 