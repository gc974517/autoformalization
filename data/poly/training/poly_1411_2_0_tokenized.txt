\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:9> ; <var:g> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Assuming $ <var:N> = <var:k> $ --- given some integers $ <var:k> $ --- before the evaluation of this set of instructions it holds that we have $ <var:g> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is given by typical Hoare logic . Stepping through , the variable assignmet line giving $ <nat:9> $ to $ <var:j0>$ . This advances the precondition $ \{ <var:N> = <var:k> \} $ as $ \{ <var:N> = <var:k> \land <var:j0> = <nat:9> \} $ . Going to the next step , we see the assignment command \verb | <var:g> := <var:j0> | . This advances the condition $ \{ <var:N> = <var:k> \land <var:j0> = <nat:9> \} $ into $ \{ <var:N> = <var:k> \land <var:g> = <nat:9> \} $ . This is rigorously given with the assignment rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:9> ; <var:g> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:N> = <var:k> }} <def:poly> {{ <var:g> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:g> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 