\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:1> + <var:k> * <var:Y> ; <var:k> := <nat:2> + <var:k> * <var:Y> ; <var:k> := <nat:4> + <var:k> * <var:Y> ; <var:k> := <nat:4> + <var:k> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Given it to be that $ <var:Y> = <var:S> $ ( for positive integer coefficients $ <var:S> $ ) prior to running our set of commands , then $ <var:k> = <nat:3> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:4> $ after list of commands has executed . \end{theorem} \begin{proof} The proof of this program is shown with Hoare techniques . Observing the upcoming pieces of code in our series of instructions , \begin{verbatim} { <var:Y> = <var:S> } <var:k> := <nat:3> { <var:Y> = <var:S> \land <var:k> = <nat:3> } { <var:Y> = <var:S> \land <var:k> = <nat:3> } <var:k> := <nat:1> + <var:k> * <var:Y> { <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> + <nat:1> } { <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> + <nat:1> } <var:k> := <nat:2> + <var:k> * <var:Y> { <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:2> } { <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:2> } <var:k> := <nat:4> + <var:k> * <var:Y> { <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:4> } { <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:4> } <var:k> := <nat:4> + <var:k> * <var:Y{ <var:Y> = <var:S> \land <var:k> = <nat:3> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:1> + <var:k> * <var:Y> ; <var:k> := <nat:2> + <var:k> * <var:Y> ; <var:k> := <nat:4> + <var:k> * <var:Y> ; <var:k> := <nat:4> + <var:k> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Y> = <var:S> }} <def:poly> {{ <var:k> = <nat:3> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:k> = <nat:3> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:k> = <nat:3> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:k> = <nat:3> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:k> = <nat:3> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 