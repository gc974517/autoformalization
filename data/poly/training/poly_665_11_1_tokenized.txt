\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:H1> := <var:a> ; <var:H2> := <var:H1> * <var:a> ; <var:H3> := <var:H2> * <var:a> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:1> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:4> ; <var:z> := <var:H3> <var:z> := <var:z> + <var:H2> <var:z> := <var:z> + <var:H1> <var:z> := <var:z> + <var:H0> \end{verbatim} Allowing $ <var:a> = <var:C> $ ahead of evaluating the list of commands , then we have $ <var:z> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> $ after series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be accomplished by usual Hoare techniques . Observing the next statement contained in the set of instructions , we have the binding code defining $ <var:a> $ toward $ <var:H1>$ . This takes the condition $ \{ <var:a> = <var:C> \} $ toward the postcondition $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \} $ . Going to the next step , we have the variable binding code yielding $ <var:H1> * <var:a> $ into $ <var:H2>$ . This advances the condition $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \} $ as $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \land <var:H2> = <var:C> ^ <nat:2> \} $ . Going forward , the variable update statement \verb | <var:H3> := <var:H2> * <var:a> ; | . This moves $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \land <var:H2> = <var:C> ^ <nat:2> \} $ to $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \land <var:H2> = <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \} $ . This is rigorously given using the assignment scheme from usual Hoare reasoning . Advancing to the next step , the assignment code defining $ <nat:3> $ to $ <var:H0>$ . This transfers the precondition $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \land <var:H2> = <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \} $ toward the postcondition $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \land <var:H2> = <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ . Advancing to the subsequent piece of code found in the series of commands , we have the environment update command \verb | <var:H1> := <var:H1> * <nat:1> ; | . This line forwards the precondition $ \{ <var:a> = <var:C> \land <var:H1> = <var:C> \land <var:H2> = <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ into $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ . Advancing on , the environment update line letting $ <var:H2> * <nat:2> $ toward $ <var:H2>$ . This transfers the precondition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ to the postcondition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ . Immediately after , we see the variable binding statement \verb | <var:H3> := <var:H3> * <nat:4> ; | . This redefines $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:H3> = <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ to the condition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ . Now , the variable update line \verb | <var:z> := <var:H3> | . This advances the condition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:C> ^ <nat:3> \land <var:H0> = <nat:3> \} $ to the postcondition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:H0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> \} $ . Taking a look at the next command found in the set of instructions , we have the variable binding code \verb | <var:z> := <var:z> + <var:H2> | . This moves $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:H0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> \} $ into the postcondition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule given in typical Hoare techniques . Moving on to the upcoming command contained in our program , we have the variable assignmet line \verb | <var:z> := <var:z> + <var:H1> | . This moves the precondition $ \{ <var:a> = <var:C> \land <var:H1> = <nat:1> \cdot <var:C> \land <var:H0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:C> \land <var:H0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> \} $ . This is given by the assignment rule in standard Hoare reasoning . Considering the subsequent piece of code seen in the code , we see the statement assigning $ <var:z> + <var:H0$ as $ <var:z>$ . This code transfers $ \{ <var:a> = <var:C> \land <var:H0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> \} $ into the condition $ \{ <var:a> = <var:C> \land <var:z> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> + <nat:3> \} $ . This is shown to be logically sound by the assignment law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:a> = <var:C> }} <var:H1> := <var:a> ; <var:H2> := <var:H1> * <var:a> ; <var:H3> := <var:H2> * <var:a> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:1> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:4> ; <var:z> := <var:H3> <var:z> := <var:z> + <var:H2> <var:z> := <var:z> + <var:H1> <var:z> := <var:z> + <var:H0> {{ <var:z> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <var:C> /\ <var:H2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <var:C> /\ <var:H2> = <var:C> ^ <nat:2> /\ <var:H3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <var:C> /\ <var:H2> = <var:C> ^ <nat:2> /\ <var:H3> = <var:C> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <nat:1> * <var:C> /\ <var:H2> = <var:C> ^ <nat:2> /\ <var:H3> = <var:C> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <nat:1> * <var:C> /\ <var:H2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:H3> = <var:C> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <nat:1> * <var:C> /\ <var:H2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:C> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <nat:1> * <var:C> /\ <var:H2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:H0> = <nat:3> /\ <var:z> = <nat:4> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H1> = <nat:1> * <var:C> /\ <var:H0> = <nat:3> /\ <var:z> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:H0> = <nat:3> /\ <var:z> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:z> = <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 