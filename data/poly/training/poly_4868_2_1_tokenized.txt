\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:1> ; <var:Q> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Given that we have $ <var:y> = <var:B> $ --- for every whole numbers $ <var:B> $ --- before running this code segment then we see $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is done by standard Hoare techniques . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:B> \} & <var:E0> := <nat:1> & \{ <var:y> = <var:B> \land <var:E0> = <nat:1> \} \\ \{ <var:y> = <var:B> \land <var:E0> = <nat:1> \} & <var:Q> := <var:E0& \{ <var:y> = <var:B> \land <var:Q> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:1> ; <var:Q> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:y> = <var:B> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 