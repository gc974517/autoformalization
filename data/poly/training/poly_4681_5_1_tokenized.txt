\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:y> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:7> ; <var:f> := <var:g1> <var:f> := <var:f> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:y> = <var:R> $ for any positive numbers $ <var:R> $ prior to running the list of instructions it holds that $ <var:f> = <nat:7> \cdot <var:R> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:R> \} \\ <var:g1> := <var:y> ; \\ \{ <var:y> = <var:R> \land <var:g1> = <var:R> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:y> = <var:R> \land <var:g1> = <var:R> \land <var:g0> = <nat:3> \} \\ <var:g1> := <var:g1> * <nat:7> ; \\ \{ <var:y> = <var:R> \land <var:g1> = <nat:7> \cdot <var:R> \land <var:g0> = <nat:3> \} \\ <var:f> := <var:g1> \\ \{ <var:y> = <var:R> \land <var:g0> = <nat:3> \land <var:f> = <nat:7> \cdot <var:R> \} \\ <var:f> := <var:f> + <var:g0> \\ \{ <var:y> = <var:R> \land <var:f> = <nat:7> \cdot <var:R> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:y> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:7> ; <var:f> := <var:g1> <var:f> := <var:f> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:y> = <var:R> }} <def:poly> {{ <var:f> = <nat:7> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:g1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:g1> = <var:R> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:g1> = <nat:7> * <var:R> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:g0> = <nat:3> /\ <var:f> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:f> = <nat:7> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 