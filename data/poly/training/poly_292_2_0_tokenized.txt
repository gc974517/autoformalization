\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:9> ; <var:d> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:F> = <var:X> $ prior to the evaluation of our series of commands , then $ <var:d> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is demonstrated by standard Hoare reasoning . Moving forward , we have the assignment line \verb | <var:u0> := <nat:9> ; | . This command moves the precondition $ \{ <var:F> = <var:X> \} $ toward $ \{ <var:F> = <var:X> \land <var:u0> = <nat:9> \} $ . Immediately after , the assignment line binding $ <var:u0$ toward $ <var:d>$ . This moves the condition $ \{ <var:F> = <var:X> \land <var:u0> = <nat:9> \} $ to the postcondition $ \{ <var:F> = <var:X> \land <var:d> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:9> ; <var:d> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:F> = <var:X> }} <def:poly> {{ <var:d> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:d> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 