\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:m> ; <var:i> := <var:Y1> ; <var:i> := <var:i> + <var:Y0> \end{verbatim} Assume --- for any positive integers $ <var:h> $ --- it to hold that $ <var:m> = <var:h> $ prior to executing our code , then we see $ <var:i> = <nat:4> * <var:h> + <nat:2> $ once set of commands has finished . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:m> = <var:h> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:m> = <var:h> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <nat:4> ; \\ \{ <var:m> = <var:h> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> * <var:h> \} \\ <var:i> := <var:Y1> ; \\ \{ <var:m> = <var:h> \land <var:Y0> = <nat:2> \land <var:i> = <nat:4> * <var:h> \} \\ <var:i> := <var:i> + <var:Y0> \\ \{ <var:m> = <var:h> \land <var:i> = <nat:4> * <var:h> + <nat:2> \} \end{eqnarray} Therefore , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:m> = <var:h> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:m> ; <var:i> := <var:Y1> ; <var:i> := <var:i> + <var:Y0> {{ <var:i> = <nat:4> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:Y0> = <nat:2> /\ <var:i> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:i> = <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 