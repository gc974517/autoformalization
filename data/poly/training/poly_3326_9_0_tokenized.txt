\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:2> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:j> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:j> ; <var:t2> := <var:t2> * <var:j> ; <var:L> := <var:t2> ; <var:L> := <var:L> + <var:t1> ; <var:L> := <var:L> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for all $ <var:q> \in \mathbb{Z}^+ $ ) $ <var:j> = <var:q> $ prior to evaluating the segment of code , it holds that we have $ <var:L> = <nat:2> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be seen through Hoare techniques . Paying attention to the subsequent piece of code seen in our list of instructions , we see the variable binding line letting $ <nat:2> $ toward $ <var:t0>$ . This command redefines $ \{ <var:j> = <var:q> \} $ to $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \} $ . Shifting focus toward the upcoming line of code in the series of commands , we see the binding command binding $ <nat:9> $ as $ <var:t1>$ . This moves $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \} $ to $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> \} $ . Focusing on the upcoming step found in our list of instructions , we have the variable assignmet line \verb | <var:t1> := <var:t1> * <var:j> ; | . This forwards the condition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> \} $ as $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \} $ . This is sound through the assignment law in Hoare techniques . After , we have the assignment code \verb | <var:t2> := <nat:2> ; | . This command moves the condition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \} $ toward the postcondition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:t2> = <nat:2> \} $ . Shifting focus toward the subsequent line in our set of commands , the assignment statement defining $ <var:t2> * <var:j> $ into $ <var:t2>$ . This takes the precondition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:t2> = <nat:2> \} $ into the postcondition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:t2> = <nat:2> * <var:q> \} $ . This is shown to be logically sound through the assignment scheme given in Hoare reasoning . Honing in on the proceeding command in the code , we see the variable update statement \verb | <var:t2> := <var:t2> * <var:j> ; | . This advances the condition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:t2> = <nat:2> * <var:q> \} $ toward $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:t2> = <nat:2> * <var:q> ^ <nat:2> \} $ . This is deduced with the assignment scheme given by standard Hoare techniques . Stepping through , we have the variable binding line assigning $ <var:t2> $ to $ <var:L>$ . This moves the condition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:t2> = <nat:2> * <var:q> ^ <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:L> = <nat:2> * <var:q> ^ <nat:2> \} $ . This is ensured by the assignment rule in typical Hoare logic . Advancing to the next step , we see the binding code yielding $ <var:L> + <var:t1> $ to $ <var:L>$ . This command transfers the precondition $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:t1> = <nat:9> * <var:q> \land <var:L> = <nat:2> * <var:q> ^ <nat:2> \} $ toward $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:L> = <nat:2> * <var:q> ^ <nat:2> + <nat:9> * <var:q> \} $ . Immediately following , we see the variable update statement assigning $ <var:L> + <var:t0$ to $ <var:L>$ . This forwards $ \{ <var:j> = <var:q> \land <var:t0> = <nat:2> \land <var:L> = <nat:2> * <var:q> ^ <nat:2> + <nat:9> * <var:q> \} $ toward $ \{ <var:j> = <var:q> \land <var:L> = <nat:2> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:2> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:j> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:j> ; <var:t2> := <var:t2> * <var:j> ; <var:L> := <var:t2> ; <var:L> := <var:L> + <var:t1> ; <var:L> := <var:L> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:j> = <var:q> }} <def:poly> {{ <var:L> = <nat:2> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:9> * <var:q> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:9> * <var:q> /\ <var:t2> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:9> * <var:q> /\ <var:t2> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:9> * <var:q> /\ <var:L> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:t0> = <nat:2> /\ <var:L> = <nat:2> * <var:q> ^ <nat:2> + <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L> = <nat:2> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 