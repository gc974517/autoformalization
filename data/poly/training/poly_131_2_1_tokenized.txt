\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:9> ; <var:T> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given --- assuming some whole numbers $ <var:F> $ --- it to be that $ <var:n> = <var:F> $ prior to interpreting the series of commands , it follows that we see $ <var:T> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this code can be shown using usual Hoare logic . After , the code \verb | <var:D0> := <nat:9> ; | . This advances the condition $ \{ <var:n> = <var:F> \} $ to the condition $ \{ <var:n> = <var:F> \land <var:D0> = <nat:9> \} $ . Moving onward , we have the environment update command assigning $ <var:D0$ toward $ <var:T>$ . This code forwards the condition $ \{ <var:n> = <var:F> \land <var:D0> = <nat:9> \} $ to the postcondition $ \{ <var:n> = <var:F> \land <var:T> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:9> ; <var:T> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:n> = <var:F> }} <def:poly> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 