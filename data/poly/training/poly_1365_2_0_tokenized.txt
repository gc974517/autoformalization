\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:1> ; <var:v> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:V> = <var:p> $ ahead of executing the code segment , it holds that we have $ <var:v> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:p> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:V> = <var:p> \land <var:n0> = <nat:1> \} \\ <var:v> := <var:n0> \\ \{ <var:V> = <var:p> \land <var:v> = <nat:1> \} \end{eqnarray} The application of standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:v> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <def:poly> {{ <var:v> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:v> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 