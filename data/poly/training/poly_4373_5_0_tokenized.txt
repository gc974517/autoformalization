\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:3> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:C> ; <var:H> := <var:M1> ; <var:H> := <var:H> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assuming $ <var:C> = <var:K> $ , with some natural numbers $ <var:K> $ , before the execution of this series of commands it must be that $ <var:H> = <nat:2> * <var:K> + <nat:3> $ after set of instructions is done executing . \end{theorem} \begin{proof} Let the following decorated series of instructions . \begin{eqnarray} \{ <var:C> = <var:K> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:C> = <var:K> \land <var:M0> = <nat:3> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:C> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:C> ; \\ \{ <var:C> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:2> * <var:K> \} \\ <var:H> := <var:M1> ; \\ \{ <var:C> = <var:K> \land <var:M0> = <nat:3> \land <var:H> = <nat:2> * <var:K> \} \\ <var:H> := <var:H> + <var:M0> \\ \{ <var:C> = <var:K> \land <var:H> = <nat:2> * <var:K> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:3> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:C> ; <var:H> := <var:M1> ; <var:H> := <var:H> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <def:poly> {{ <var:H> = <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:M0> = <nat:3> /\ <var:H> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:H> = <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 