\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:1> ; <var:Z> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:b> = <var:P> $ ahead of executing the program it must be that we have $ <var:Z> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is evident through Hoare reasoning . Immediately after , we have \begin{eqnarray} \{ <var:b> = <var:P> \} \, <var:v0> := <nat:1> \, \{ <var:b> = <var:P> \land <var:v0> = <nat:1> \} \end{eqnarray} Honing in on the next step contained in the code , we see \begin{eqnarray} \{ <var:b> = <var:P> \} \, <var:v0> := <nat:1> \, \{ <var:b> = <var:P> \land <var:v0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:Z> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:b> = <var:P> }} <def:poly> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:P> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:P> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 