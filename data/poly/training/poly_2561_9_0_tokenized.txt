\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:4> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:I> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:I> ; <var:e2> := <var:e2> * <var:I> ; <var:X> := <var:e2> ; <var:X> := <var:X> + <var:e1> ; <var:X> := <var:X> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assume with some integers $ <var:o> $ it to hold that $ <var:I> = <var:o> $ prior to running the series of instructions it holds that we have $ <var:X> = <nat:1> \cdot <var:o> ^ <nat:2> + <nat:5> \cdot <var:o> + <nat:4> $ when series of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is given through Hoare logic . Honing in on the proceeding lines contained in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:o> \} & <var:e0> := <nat:4> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \} & <var:e1> := <nat:5> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \} & <var:e1> := <var:e1> * <var:I> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \} & <var:e2> := <nat:1> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:e2> = <nat:1> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:e2> = <nat:1> \} & <var:e2> := <var:e2> * <var:I> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:e2> = <nat:1> \times <var:o> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:e2> = <nat:1> \times <var:o> \} & <var:e2> := <var:e2> * <var:I> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:e2> = <nat:1> \times <var:o> ^ <nat:2> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:e2> = <nat:1> \times <var:o> ^ <nat:2> \} & <var:X> := <var:e2> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:X> = <nat:1> \times <var:o> ^ <nat:2> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:e1> = <nat:5> \times <var:o> \land <var:X> = <nat:1> \times <var:o> ^ <nat:2> \} & <var:X> := <var:X> + <var:e1> & \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:X> = <nat:1> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> \} \\ \{ <var:I> = <var:o> \land <var:e0> = <nat:4> \land <var:X> = <nat:1> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> \} & <var:X> := <var:X> + <var:e0& \{ <var:I> = <var:o> \land <var:X> = <nat:1> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> + <nat:4> \} \end{tabular} This is guaranteed with the variable assignmet inference rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:4> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:I> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:I> ; <var:e2> := <var:e2> * <var:I> ; <var:X> := <var:e2> ; <var:X> := <var:X> + <var:e1> ; <var:X> := <var:X> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:I> = <var:o> }} <def:poly> {{ <var:X> = <nat:1> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:5> * <var:o> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:5> * <var:o> /\ <var:e2> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:5> * <var:o> /\ <var:e2> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:5> * <var:o> /\ <var:X> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:e0> = <nat:4> /\ <var:X> = <nat:1> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:X> = <nat:1> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 