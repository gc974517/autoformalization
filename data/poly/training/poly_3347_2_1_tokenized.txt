\begin{document} \begin{theorem} We define a list of commands such that \begin{verbatim} <var:Q0> := <nat:4> ; <var:Z> := <var:Q0> \end{verbatim} Given that we have $ <var:k> = <var:H> $ prior to the evaluation of our series of commands , then we have $ <var:Z> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the code can be given with usual Hoare techniques . Stepping through , we see \begin{eqnarray} \{ <var:k> = <var:H> \} \, <var:Q0> := <nat:4> \, \{ <var:k> = <var:H> \land <var:Q0> = <nat:4> \} \end{eqnarray} Moving forward to the next line found in the code segment , \begin{eqnarray} \{ <var:k> = <var:H> \} \, <var:Q0> := <nat:4> \, \{ <var:k> = <var:H> \land <var:Q0> = <nat:4> \} \end{eqnarray} This is shown to be logically sound with the variable update inference rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:k> = <var:H> }} <var:Q0> := <nat:4> ; <var:Z> := <var:Q0> {{ <var:Z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:Z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 