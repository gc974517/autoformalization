\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:O> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:C> = <var:h> $ assuming some $ <var:h> \in \mathbb{N} $ ahead of the evaluation of this series of instructions , it holds that we see $ <var:O> = <nat:2> $ . \end{theorem} \begin{proof} The argument for our series of instructions is accomplished by typical Hoare logic . Stepping forward , we have the command \verb | <var:e0> := <nat:2> ; | . This statement transfers the precondition $ \{ <var:C> = <var:h> \} $ as the postcondition $ \{ <var:C> = <var:h> \land <var:e0> = <nat:2> \} $ . Immediately after , we have the environment update line binding $ <var:e0$ to $ <var:O>$ . This redefines the condition $ \{ <var:C> = <var:h> \land <var:e0> = <nat:2> \} $ toward $ \{ <var:C> = <var:h> \land <var:O> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:O> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:C> = <var:h> }} <def:poly> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:h> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:h> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 