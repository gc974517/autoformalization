\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:5> ; <var:L> := <var:P0> \end{verbatim} Allow it to hold that $ <var:G> = <var:b> $ prior to executing this series of commands it must be that we have $ <var:L> = <nat:5> $ . \end{theorem} \begin{proof} The proof of this list of commands is shown by usual Hoare reasoning . Moving on to the upcoming line found in the set of commands , the variable update command yielding $ <nat:5> $ into $ <var:P0>$ . This code moves $ \{ <var:G> = <var:b> \} $ to $ \{ <var:G> = <var:b> \land <var:P0> = <nat:5> \} $ . This is known to be sound using the assignment inference rule from usual Hoare techniques . Next , the variable update command \verb | <var:L> := <var:P0> | . This command advances the condition $ \{ <var:G> = <var:b> \land <var:P0> = <nat:5> \} $ toward the postcondition $ \{ <var:G> = <var:b> \land <var:L> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:G> = <var:b> }} <var:P0> := <nat:5> ; <var:L> := <var:P0> {{ <var:L> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:L> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 