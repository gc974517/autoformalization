\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:8> ; <var:i> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Given , given any $ <var:I> \in \mathbb{N} $ , it to hold that $ <var:P> = <var:I> $ ahead of the evaluation of this code segment it holds that $ <var:i> = <nat:8> $ . \end{theorem} \begin{proof} The argument for the code can be done through the following decorated code segment . \begin{eqnarray} \{ <var:P> = <var:I> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:P> = <var:I> \land <var:S0> = <nat:8> \} \\ <var:i> := <var:S0> \\ \{ <var:P> = <var:I> \land <var:i> = <nat:8> \} \end{eqnarray} The application of typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:i> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:P> = <var:I> }} <def:poly> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 