\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as \begin{verbatim} <var:C1> := <var:s> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:5> ; <var:M> := <var:C1> <var:M> := <var:M> + <var:C0> \end{verbatim} Allow $ <var:s> = <var:l> $ , given every whole numbers $ <var:l> $ , before interpreting this series of instructions , then $ <var:M> = <nat:5> * <var:l> + <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:s> = <var:l> \} \\ <var:C1> := <var:s> ; \\ \{ <var:s> = <var:l> \land <var:C1> = <var:l> \} \\ <var:C0> := <nat:8> ; \\ \{ <var:s> = <var:l> \land <var:C1> = <var:l> \land <var:C0> = <nat:8> \} \end{eqnarray} Allowing interpreting this list of commands gives us : \begin{eqnarray} <var:C1> := <var:C1> * <nat:5> ; \\ \{ <var:s> = <var:l> \land <var:C1> = <nat:5> \cdot <var:l> \land <var:C0> = <nat:8> \} \\ <var:M> := <var:C1> \\ \{ <var:s> = <var:l> \land <var:C0> = <nat:8> \land <var:M> = <nat:5> \cdot <var:l> \} \\ <var:M> := <var:M> + <var:C0> \\ \{ <var:s> = <var:l> \land <var:M> = <nat:5> \cdot <var:l> + <nat:8> \} \end{eqnarray} Therefore , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <var:C1> := <var:s> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:5> ; <var:M> := <var:C1> <var:M> := <var:M> + <var:C0> {{ <var:M> = <nat:5> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:C1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:C1> = <var:l> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:C1> = <nat:5> * <var:l> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:C0> = <nat:8> /\ <var:M> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:M> = <nat:5> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 