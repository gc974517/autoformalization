\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:3> + <var:y> * <var:Z> ; <var:y> := <nat:1> + <var:y> * <var:Z> \end{verbatim} Assuming $ <var:Z> = <var:T> $ ahead of the evaluation of the series of commands it holds that we see $ <var:y> = <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:1> $ once list of instructions has exited . \end{theorem} \begin{proof} Notice the below decorated series of instructions . \begin{eqnarray} \{ <var:Z> = <var:T> \} \\ <var:y> := <nat:3> ; \\ \{ <var:Z> = <var:T> \land <var:y> = <nat:3> \} \\ <var:y> := <nat:3> + <var:y> * <var:Z> ; \\ \{ <var:Z> = <var:T> \land <var:y> = <nat:3> * <var:T> + <nat:3> \} \\ <var:y> := <nat:1> + <var:y> * <var:Z> \\ \{ <var:Z> = <var:T> \land <var:y> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> \} \end{eqnarray} Furthering the evaluation of the program yields : \begin{eqnarray} \end{eqnarray} Using Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Z> = <var:T> }} <var:y> := <nat:3> ; <var:y> := <nat:3> + <var:y> * <var:Z> ; <var:y> := <nat:1> + <var:y> * <var:Z> {{ <var:y> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:y> = <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:y> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 