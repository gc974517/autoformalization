\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:o> ; <var:C2> := <var:C1> * <var:o> ; <var:C3> := <var:C2> * <var:o> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:5> ; <var:C2> := <var:C2> * <nat:8> ; <var:C3> := <var:C3> * <nat:6> ; <var:B> := <var:C3> <var:B> := <var:B> + <var:C2> <var:B> := <var:B> + <var:C1> <var:B> := <var:B> + <var:C0> \end{verbatim} Allowing it to be that $ <var:o> = <var:h> $ prior to executing the list of instructions , it follows that we see $ <var:B> = <nat:6> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> + <nat:1> $ when set of commands is done . \end{theorem} \begin{proof} Applying standard Hoare logic results in : \begin{eqnarray} \{ <var:o> = <var:h> \} \\ <var:C1> := <var:o> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <var:h> \} \\ <var:C2> := <var:C1> * <var:o> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <var:h> \land <var:C2> = <var:h> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:o> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <var:h> \land <var:C2> = <var:h> ^ <nat:2> \land <var:C3> = <var:h> ^ <nat:3> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <var:h> \land <var:C2> = <var:h> ^ <nat:2> \land <var:C3> = <var:h> ^ <nat:3> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:5> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <nat:5> * <var:h> \land <var:C2> = <var:h> ^ <nat:2> \land <var:C3> = <var:h> ^ <nat:3> \land <var:C0> = <nat:1> \} \\ <var:C2> := <var:C2> * <nat:8> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <nat:5> * <var:h> \land <var:C2> = <nat:8> * <var:h> ^ <nat:2> \land <var:C3> = <var:h> ^ <nat:3> \land <var:C0> = <nat:1> \} \\ <var:C3> := <var:C3> * <nat:6> ; \\ \{ <var:o> = <var:h> \land <var:C1> = <nat:5> * <var:h> \land <var:C2> = <nat:8> * <var:h> ^ <nat:2> \land <var:C3> = <nat:6> * <var:h> ^ <nat:3> \land <var:C0> = <nat:1> \} \\ <var:B> := <var:C3> \\ \{ <var:o> = <var:h> \land <var:C1> = <nat:5> * <var:h> \land <var:C2> = <nat:8> * <var:h> ^ <nat:2> \land <var:C0> = <nat:1> \land <var:B> = <nat:6> * <var:h> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:C2> \\ \{ <var:o> = <var:h> \land <var:C1> = <nat:5> * <var:h> \land <var:C0> = <nat:1> \land <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:C1> \\ \{ <var:o> = <var:h> \land <var:C0> = <nat:1> \land <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:5> * <var:h> \} \\ <var:B> := <var:B> + <var:C0> \\ \{ <var:o> = <var:h> \land <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:1> \} \end{eqnarray} Hence , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:o> = <var:h> }} <var:C1> := <var:o> ; <var:C2> := <var:C1> * <var:o> ; <var:C3> := <var:C2> * <var:o> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:5> ; <var:C2> := <var:C2> * <nat:8> ; <var:C3> := <var:C3> * <nat:6> ; <var:B> := <var:C3> <var:B> := <var:B> + <var:C2> <var:B> := <var:B> + <var:C1> <var:B> := <var:B> + <var:C0> {{ <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <var:h> /\ <var:C2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <var:h> /\ <var:C2> = <var:h> ^ <nat:2> /\ <var:C3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <var:h> /\ <var:C2> = <var:h> ^ <nat:2> /\ <var:C3> = <var:h> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <nat:5> * <var:h> /\ <var:C2> = <var:h> ^ <nat:2> /\ <var:C3> = <var:h> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <nat:5> * <var:h> /\ <var:C2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:C3> = <var:h> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <nat:5> * <var:h> /\ <var:C2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:C3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <nat:5> * <var:h> /\ <var:C2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:C0> = <nat:1> /\ <var:B> = <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C1> = <nat:5> * <var:h> /\ <var:C0> = <nat:1> /\ <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:C0> = <nat:1> /\ <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:B> = <nat:6> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 