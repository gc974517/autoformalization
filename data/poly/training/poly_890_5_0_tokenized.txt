\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:6> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:d> ; <var:E> := <var:r1> ; <var:E> := <var:E> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Assuming $ <var:d> = <var:w> $ for some $ <var:w> $ before the execution of this code segment , then $ <var:E> = <nat:4> \times <var:w> + <nat:6> $ once series of instructions executes . \end{theorem} \begin{proof} The proof of the code is clear by standard Hoare techniques . Paying attention to the following bit of code in the program , the environment update code letting $ <nat:6> $ to $ <var:r0>$ . This line advances the condition $ \{ <var:d> = <var:w> \} $ to $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \} $ . This is rigorously given using the assignment rule from typical Hoare reasoning . Further , we see the variable assignmet statement yielding $ <nat:4> $ toward $ <var:r1>$ . This code advances the precondition $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \} $ into the postcondition $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \land <var:r1> = <nat:4> \} $ . This is sound through the assignment law defined in standard Hoare reasoning . Observing the proceeding line contained in the code , we have the environment update command \verb | <var:r1> := <var:r1> * <var:d> ; | . This forwards the precondition $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \land <var:r1> = <nat:4> \} $ to $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \land <var:r1> = <nat:4> \times <var:w> \} $ . This is shown to be logically sound through the assignment scheme given by usual Hoare logic . Stepping forward , we have the variable binding command \verb | <var:E> := <var:r1> ; | . This statement redefines the precondition $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \land <var:r1> = <nat:4> \times <var:w> \} $ to $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \land <var:E> = <nat:4> \times <var:w> \} $ . Paying attention to the subsequent bit of code seen in the program , we have the environment update code \verb | <var:E> := <var:E> + <var:r0> | . This code advances the condition $ \{ <var:d> = <var:w> \land <var:r0> = <nat:6> \land <var:E> = <nat:4> \times <var:w> \} $ into the condition $ \{ <var:d> = <var:w> \land <var:E> = <nat:4> \times <var:w> + <nat:6> \} $ . This is rigorously given through the assignment inference rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:6> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:d> ; <var:E> := <var:r1> ; <var:E> := <var:E> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:d> = <var:w> }} <def:poly> {{ <var:E> = <nat:4> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:r0> = <nat:6> /\ <var:E> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:E> = <nat:4> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 