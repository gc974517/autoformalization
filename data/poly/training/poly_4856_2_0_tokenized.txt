\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:4> ; <var:P> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allowing it to hold that $ <var:w> = <var:h> $ before the execution of this set of commands it must be that we have $ <var:P> = <nat:4> $ when program exits . \end{theorem} \begin{proof} Arguing the correctness of the program is shown with standard Hoare reasoning . Shifting focus toward the proceeding command contained in the code , we see the variable binding code assigning $ <nat:4> $ into $ <var:M0>$ . This takes the condition $ \{ <var:w> = <var:h> \} $ into $ \{ <var:w> = <var:h> \land <var:M0> = <nat:4> \} $ . Following , the binding code yielding $ <var:M0$ as $ <var:P>$ . This advances the precondition $ \{ <var:w> = <var:h> \land <var:M0> = <nat:4> \} $ toward $ \{ <var:w> = <var:h> \land <var:P> = <nat:4> \} $ . This is given through the assignment rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:P> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:w> = <var:h> }} <def:poly> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 