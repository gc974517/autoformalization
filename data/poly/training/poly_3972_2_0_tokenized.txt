\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:D0> := <nat:3> ; <var:O> := <var:D0> \end{verbatim} Allow letting $ <var:j> $ that $ <var:g> = <var:j> $ before running this program it holds that we have $ <var:O> = <nat:3> $ after set of instructions executes . \end{theorem} \begin{proof} The method of proof for this series of commands can be given with the following decorated series of instructions . \begin{eqnarray} \{ <var:g> = <var:j> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:g> = <var:j> \land <var:D0> = <nat:3> \} \\ <var:O> := <var:D0> \\ \{ <var:g> = <var:j> \land <var:O> = <nat:3> \} \end{eqnarray} The application of Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:g> = <var:j> }} <var:D0> := <nat:3> ; <var:O> := <var:D0> {{ <var:O> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:O> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 