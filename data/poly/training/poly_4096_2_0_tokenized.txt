\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:4> ; <var:s> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:o> = <var:C> $ ahead of interpreting the program then we see $ <var:s> = <nat:4> $ once program exits . \end{theorem} \begin{proof} Demonstrating correctness of our program is done with Hoare logic . Moving forward , the assignment line \verb | <var:v0> := <nat:4> ; | . This moves the precondition $ \{ <var:o> = <var:C> \} $ toward the condition $ \{ <var:o> = <var:C> \land <var:v0> = <nat:4> \} $ . Stepping through , the variable update line \verb | <var:s> := <var:v0> | . This forwards the condition $ \{ <var:o> = <var:C> \land <var:v0> = <nat:4> \} $ into $ \{ <var:o> = <var:C> \land <var:s> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:s> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:o> = <var:C> }} <def:poly> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 