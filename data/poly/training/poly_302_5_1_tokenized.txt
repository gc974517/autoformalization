\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:l1> := <var:u> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:4> ; <var:G> := <var:l1> <var:G> := <var:G> + <var:l0> \end{verbatim} Assume taking positive integer coefficients $ <var:C> $ that we have $ <var:u> = <var:C> $ prior to executing this series of instructions it follows that we see $ <var:G> = <nat:4> * <var:C> + <nat:5> $ once series of instructions is done executing . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:u> = <var:C> \} \\ <var:l1> := <var:u> ; \\ \{ <var:u> = <var:C> \land <var:l1> = <var:C> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:u> = <var:C> \land <var:l1> = <var:C> \land <var:l0> = <nat:5> \} \\ <var:l1> := <var:l1> * <nat:4> ; \\ \{ <var:u> = <var:C> \land <var:l1> = <nat:4> * <var:C> \land <var:l0> = <nat:5> \} \\ <var:G> := <var:l1> \\ \{ <var:u> = <var:C> \land <var:l0> = <nat:5> \land <var:G> = <nat:4> * <var:C> \} \\ <var:G> := <var:G> + <var:l0> \\ \{ <var:u> = <var:C> \land <var:G> = <nat:4> * <var:C> + <nat:5> \} \end{eqnarray} Thus , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:u> = <var:C> }} <var:l1> := <var:u> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:4> ; <var:G> := <var:l1> <var:G> := <var:G> + <var:l0> {{ <var:G> = <nat:4> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:l1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:l1> = <var:C> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:l1> = <nat:4> * <var:C> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:l0> = <nat:5> /\ <var:G> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:G> = <nat:4> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 