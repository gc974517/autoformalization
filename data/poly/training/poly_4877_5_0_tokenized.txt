\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:2> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:X> ; <var:r> := <var:J1> ; <var:r> := <var:r> + <var:J0> \end{verbatim} Assume that we have $ <var:X> = <var:w> $ ahead of interpreting the program it holds that we see $ <var:r> = <nat:1> * <var:w> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be given with Hoare techniques . Stepping through , we have \begin{eqnarray} \{ <var:X> = <var:w> \} \, <var:J0> := <nat:2> \, \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \} \end{eqnarray} Looking at the following commands in our code , \begin{eqnarray} \{ <var:X> = <var:w> \} \, <var:J0> := <nat:2> \, \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \} \\ \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \} \, <var:J1> := <nat:1> \, \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \land <var:J1> = <nat:1> \} \\ \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \land <var:J1> = <nat:1> \} \, <var:J1> := <var:J1> * <var:X> \, \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \land <var:J1> = <nat:1> \times <var:w> \} \end{eqnarray} Shifting focus toward the subsequent step in our list of instructions , we see \begin{eqnarray} \{ <var:X> = <var:w> \} \, <var:J0> := <nat:2> \, \{ <var:X> = <var:w> \land <var:J0> = <nat:2> \} \end{eqnarray} This is deduced through the environment update rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:X> = <var:w> }} <var:J0> := <nat:2> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:X> ; <var:r> := <var:J1> ; <var:r> := <var:r> + <var:J0> {{ <var:r> = <nat:1> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:J0> = <nat:2> /\ <var:r> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:r> = <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 