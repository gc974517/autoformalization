\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:2> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:Y> ; <var:h> := <var:b1> ; <var:h> := <var:h> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allow that we have $ <var:Y> = <var:K> $ prior to interpreting our code , then we have $ <var:h> = <nat:7> * <var:K> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be done using usual Hoare techniques . Shifting focus toward the upcoming pieces of code contained in our program , \verb | { <var:Y> = <var:K> } <var:b0> := <nat:2> { <var:Y> = <var:K> \land <var:b0> = <nat:2> } | and \verb | { <var:Y> = <var:K> \land <var:b0> = <nat:2> } <var:b1> := <nat:7> { <var:Y> = <var:K> \land <var:b0> = <nat:2> \land <var:b1> = <nat:7> } | . This is deduced with the binding scheme of typical Hoare techniques . Considering the following piece of code found in the list of instructions , \verb | { <var:Y> = <var:K> } <var:b0> := <nat:2> { <var:Y> = <var:K> \land <var:b0> = <nat:2> } | . This is known to be sound through the variable update inference rule in usual Hoare reasoning . Moving on to the upcoming lines of codefound in the set of commands , we have \verb | { <var:Y> = <var:K> } <var:b0> := <nat:2> { <var:Y> = <var:K> \land <var:b0> = <nat:2> } | and \verb | { <var:Y> = <var:K> \land <var:b0> = <nat:2> } <var:b1> := <nat:7> { <var:Y> = <var:K> \land <var:b0> = <nat:2> \land <var:b1> = <nat:7> } | . This is ensured with the variable update law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:2> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:Y> ; <var:h> := <var:b1> ; <var:h> := <var:h> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Y> = <var:K> }} <def:poly> {{ <var:h> = <nat:7> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:K> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:K> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:K> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:K> /\ <var:b0> = <nat:2> /\ <var:h> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:K> /\ <var:h> = <nat:7> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 