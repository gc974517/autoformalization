\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as \begin{verbatim} <var:d1> := <var:K> ; <var:d2> := <var:d1> * <var:K> ; <var:d3> := <var:d2> * <var:K> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:7> ; <var:d3> := <var:d3> * <nat:9> ; <var:u> := <var:d3> <var:u> := <var:u> + <var:d2> <var:u> := <var:u> + <var:d1> <var:u> := <var:u> + <var:d0> \end{verbatim} Given it to hold that $ <var:K> = <var:N> $ prior to the execution of this set of commands , it follows that we see $ <var:u> = <nat:9> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> + <nat:5> \cdot <var:N> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the program can be done using typical Hoare logic . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:K> = <var:N> \} & <var:d1> := <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} & <var:d2> := <var:d1> * <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \} \end{tabular} This is rigorously given by the variable update rule defined in usual Hoare reasoning . Next , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:N> \} & <var:d1> := <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} & <var:d2> := <var:d1> * <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} \end{tabular} Paying attention to the subsequent piece of code contained in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:N> \} & <var:d1> := <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} \end{tabular} Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:N> \} & <var:d1> := <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \} & <var:d2> := <var:d1> * <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:K> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \} & <var:d0> := <nat:7> & \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:7> \} \\ \{ <var:K> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:7> \} & <var:d1> := <var:d1> * <nat:5> & \{ <var:K> = <var:N> \land <var:d1> = <nat:5> \times <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:K> = <var:N> }} <var:d1> := <var:K> ; <var:d2> := <var:d1> * <var:K> ; <var:d3> := <var:d2> * <var:K> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:7> ; <var:d3> := <var:d3> * <nat:9> ; <var:u> := <var:d3> <var:u> := <var:u> + <var:d2> <var:u> := <var:u> + <var:d1> <var:u> := <var:u> + <var:d0> {{ <var:u> = <nat:9> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <nat:5> * <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <nat:5> * <var:N> /\ <var:d2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <nat:5> * <var:N> /\ <var:d2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:N> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <nat:5> * <var:N> /\ <var:d2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:d0> = <nat:7> /\ <var:u> = <nat:9> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d1> = <nat:5> * <var:N> /\ <var:d0> = <nat:7> /\ <var:u> = <nat:9> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:d0> = <nat:7> /\ <var:u> = <nat:9> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:u> = <nat:9> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 