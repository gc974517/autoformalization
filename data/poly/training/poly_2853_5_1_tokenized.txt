\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:H> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:3> ; <var:S> := <var:P1> <var:S> := <var:S> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:H> = <var:p> $ with some whole numbers $ <var:p> $ before the evaluation of our segment of code it follows that we have $ <var:S> = <nat:3> \times <var:p> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be accomplished by Hoare logic . Paying attention to the next statement found in our code segment , we see the variable assignmet line giving $ <var:H> $ as $ <var:P1>$ . This code redefines $ \{ <var:H> = <var:p> \} $ toward the postcondition $ \{ <var:H> = <var:p> \land <var:P1> = <var:p> \} $ . This is deduced using the assignment scheme given in Hoare reasoning . Honing in on the proceeding line seen in our list of commands , the variable update line binding $ <nat:1> $ as $ <var:P0>$ . This code transfers the precondition $ \{ <var:H> = <var:p> \land <var:P1> = <var:p> \} $ to the condition $ \{ <var:H> = <var:p> \land <var:P1> = <var:p> \land <var:P0> = <nat:1> \} $ . This is shown using the assignment rule obtained from usual Hoare logic . Following , we see the environment update statement \verb | <var:P1> := <var:P1> * <nat:3> ; | . This command takes the precondition $ \{ <var:H> = <var:p> \land <var:P1> = <var:p> \land <var:P0> = <nat:1> \} $ as $ \{ <var:H> = <var:p> \land <var:P1> = <nat:3> \cdot <var:p> \land <var:P0> = <nat:1> \} $ . Moving onward , the variable binding line \verb | <var:S> := <var:P1> | . This forwards $ \{ <var:H> = <var:p> \land <var:P1> = <nat:3> \cdot <var:p> \land <var:P0> = <nat:1> \} $ as the condition $ \{ <var:H> = <var:p> \land <var:P0> = <nat:1> \land <var:S> = <nat:3> \cdot <var:p> \} $ . This is guaranteed by the assignment scheme in typical Hoare reasoning . Advancing , we see the environment update command \verb | <var:S> := <var:S> + <var:P0> | . This redefines the precondition $ \{ <var:H> = <var:p> \land <var:P0> = <nat:1> \land <var:S> = <nat:3> \cdot <var:p> \} $ to the condition $ \{ <var:H> = <var:p> \land <var:S> = <nat:3> \cdot <var:p> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:H> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:3> ; <var:S> := <var:P1> <var:S> := <var:S> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <def:poly> {{ <var:S> = <nat:3> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:P1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:P1> = <var:p> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:P1> = <nat:3> * <var:p> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:P0> = <nat:1> /\ <var:S> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:S> = <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 