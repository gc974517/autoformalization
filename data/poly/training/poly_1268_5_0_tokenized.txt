\begin{document} \begin{theorem} We define the following series of commands as follows \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:Q> ; <var:k> := <var:W1> ; <var:k> := <var:k> + <var:W0> \end{verbatim} Allow --- given any integers $ <var:L> $ --- it to be that $ <var:Q> = <var:L> $ prior to running our series of instructions then we have $ <var:k> = <nat:2> \times <var:L> + <nat:3> $ after set of instructions is done . \end{theorem} \begin{proof} Proving correctness for our segment of code can be shown through usual Hoare techniques . Stepping through , the variable binding statement giving $ <nat:3> $ into $ <var:W0>$ . This takes the condition $ \{ <var:Q> = <var:L> \} $ into the postcondition $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \} $ . Moving on to the next step , we see the command \verb | <var:W1> := <nat:2> ; | . This code forwards $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \} $ to the postcondition $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \} $ . This is shown through the assignment rule found in typical Hoare logic . Advancing to the next step , we see the variable update command letting $ <var:W1> * <var:Q> $ into $ <var:W1>$ . This advances the precondition $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \} $ as the postcondition $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> * <var:L> \} $ . Shifting focus toward the subsequent bit of code found in our series of commands , the line yielding $ <var:W1> $ to $ <var:k>$ . This command forwards the condition $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> * <var:L> \} $ into $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \land <var:k> = <nat:2> * <var:L> \} $ . Observing the following piece of code seen in our series of commands , we see the variable binding line \verb | <var:k> := <var:k> + <var:W0> | . This code transfers the precondition $ \{ <var:Q> = <var:L> \land <var:W0> = <nat:3> \land <var:k> = <nat:2> * <var:L> \} $ as the postcondition $ \{ <var:Q> = <var:L> \land <var:k> = <nat:2> * <var:L> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <var:W0> := <nat:3> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:Q> ; <var:k> := <var:W1> ; <var:k> := <var:k> + <var:W0> {{ <var:k> = <nat:2> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:W0> = <nat:3> /\ <var:k> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:k> = <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 