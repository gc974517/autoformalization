\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:x> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:x> ; <var:t2> := <var:t2> * <var:x> ; <var:X> := <var:t2> ; <var:X> := <var:X> + <var:t1> ; <var:X> := <var:X> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assuming it to be that $ <var:x> = <var:y> $ for every natural coefficients $ <var:y> $ prior to the execution of the segment of code , it follows that we have $ <var:X> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:3> $ once list of commands has executed . \end{theorem} \begin{proof} The method of proof for our segment of code can be accomplished using usual Hoare techniques . After , we see the environment update statement \verb | <var:t0> := <nat:3> ; | . This takes $ \{ <var:x> = <var:y> \} $ to the postcondition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \} $ . Moving onward , we see the binding code \verb | <var:t1> := <nat:4> ; | . This line redefines the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \} $ to the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \} $ . This is rigorously given through the assignment scheme of usual Hoare logic . Honing in on the following bit of code contained in the series of instructions , we see the code \verb | <var:t1> := <var:t1> * <var:x> ; | . This statement redefines $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \} $ as the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \} $ . This is ensured with the assignment rule found in typical Hoare techniques . Moving on to the proceeding piece of code in the segment of code , we have the assignment command defining $ <nat:4> $ to $ <var:t2>$ . This takes $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \} $ into $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:t2> = <nat:4> \} $ . Jumping to the proceeding line in the code segment , we see the binding command letting $ <var:t2> * <var:x> $ into $ <var:t2>$ . This takes $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:t2> = <nat:4> \} $ into the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:t2> = <nat:4> \times <var:y> \} $ . This is deduced through the assignment rule from standard Hoare logic . Further , the variable update code letting $ <var:t2> * <var:x> $ into $ <var:t2>$ . This forwards the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:t2> = <nat:4> \times <var:y> \} $ to the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:t2> = <nat:4> \times <var:y> ^ <nat:2> \} $ . Taking another step toward the subsequent bit of code found in our series of instructions , we see the assignment line binding $ <var:t2> $ to $ <var:X>$ . This takes $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:t2> = <nat:4> \times <var:y> ^ <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:X> = <nat:4> \times <var:y> ^ <nat:2> \} $ . This is ensured using the assignment law found in typical Hoare logic . Advancing on , we see the variable update statement giving $ <var:X> + <var:t1> $ into $ <var:X>$ . This transfers $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:y> \land <var:X> = <nat:4> \times <var:y> ^ <nat:2> \} $ as $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:X> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> \} $ . This is shown to be logically sound using the assignment inference rule given in usual Hoare logic . Looking at the next bit of code contained in the list of instructions , we see the environment update command \verb | <var:X> := <var:X> + <var:t0> | . This advances the condition $ \{ <var:x> = <var:y> \land <var:t0> = <nat:3> \land <var:X> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> \} $ to the postcondition $ \{ <var:x> = <var:y> \land <var:X> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:3> \} $ . This is rigorously given with the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:x> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:x> ; <var:t2> := <var:t2> * <var:x> ; <var:X> := <var:t2> ; <var:X> := <var:X> + <var:t1> ; <var:X> := <var:X> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:x> = <var:y> }} <def:poly> {{ <var:X> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:y> /\ <var:t2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:y> /\ <var:t2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:y> /\ <var:t2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:y> /\ <var:X> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:t0> = <nat:3> /\ <var:X> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:y> /\ <var:X> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 