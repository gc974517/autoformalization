\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:3> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:O> ; <var:V> := <var:B1> ; <var:V> := <var:V> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allowing that $ <var:O> = <var:K> $ before the execution of the set of instructions , it follows that we see $ <var:V> = <nat:2> \times <var:K> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be given using usual Hoare techniques . Now , we have \begin{verbatim} { <var:O> = <var:K> } <var:B0> := <nat:3> { <var:O> = <var:K> \land <var:B0> = <nat:3> } { <var:O> = <var:K> \land <var:B0> = <nat:3> } <var:B1> := <nat:2> { <var:O> = <var:K> \land <var:B0> = <nat:3> \land <var:B1> = <nat:2> } { <var:O> = <var:K> \land <var:B0> = <nat:3> \land <var:B1> = <nat:2> } <var:B1> := <var:B1> * <var:O> { <var:O> = <var:K> \land <var:B0> = <nat:3> \land <var:B1> = <nat:2> \times <var:K> } \end{verbatim} This is sound using the variable update scheme from usual Hoare techniques . Paying attention to the subsequent lines contained in the code , \begin{verbatim} { <var:O> = <var:K> } <var:B0> := <nat:3> { <var:O> = <var:K> \land <var:B0> = <nat:3> } { <var:O> = <var:K> \land <var:B0> = <nat:3> } <var:B1> := <nat:2> { <var:O> = <var:K> \land <var:B0> = <nat:3> \land <var:B1> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:O> ; <var:V> := <var:B1> ; <var:V> := <var:V> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:O> = <var:K> }} <def:poly> {{ <var:V> = <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:B0> = <nat:3> /\ <var:V> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:V> = <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 