\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:3> ; <var:i> := <var:v0> \end{verbatim} Given it to hold that $ <var:g> = <var:u> $ ( for $ <var:u> \in \mathbb{N} $ ) ahead of running our list of instructions then we see $ <var:i> = <nat:3> $ . \end{theorem} \begin{proof} Observe that this decorated list of commands . \begin{eqnarray} \{ <var:g> = <var:u> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:g> = <var:u> \land <var:v0> = <nat:3> \} \\ <var:i> := <var:v0> \\ \{ <var:g> = <var:u> \land <var:i> = <nat:3> \} \end{eqnarray} Using typical Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:g> = <var:u> }} <var:v0> := <nat:3> ; <var:i> := <var:v0> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 