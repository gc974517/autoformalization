\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:2> + <var:J> * <var:c> ; <var:J> := <nat:1> + <var:J> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Allow , taking $ <var:T> $ , that $ <var:c> = <var:T> $ before running the segment of code it must be that $ <var:J> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:1> $ after list of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for this list of instructions is evident using the following decorated list of commands . \begin{eqnarray} \{ <var:c> = <var:T> \} \\ <var:J> := <nat:3> ; \\ \{ <var:c> = <var:T> \land <var:J> = <nat:3> \} \\ <var:J> := <nat:2> + <var:J> * <var:c> ; \\ \{ <var:c> = <var:T> \land <var:J> = <nat:3> * <var:T> + <nat:2> \} \\ <var:J> := <nat:1> + <var:J> * <var:c> \\ \{ <var:c> = <var:T> \land <var:J> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:3> ; <var:J> := <nat:2> + <var:J> * <var:c> ; <var:J> := <nat:1> + <var:J> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:c> = <var:T> }} <def:poly> {{ <var:J> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:J> = <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:J> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 