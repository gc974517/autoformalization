\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:3> ; <var:Y> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Assume for some positive integer coefficients $ <var:J> $ $ <var:Z> = <var:J> $ before evaluating the code segment it holds that we see $ <var:Y> = <nat:3> $ when code has exited . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:Z> = <var:J> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:Z> = <var:J> \land <var:Q0> = <nat:3> \} \\ <var:Y> := <var:Q0> \\ \{ <var:Z> = <var:J> \land <var:Y> = <nat:3> \} \end{eqnarray} Thusly , this code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:Y> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <def:poly> {{ <var:Y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:Y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 