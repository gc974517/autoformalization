\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g1> := <var:n> ; <var:g2> := <var:g1> * <var:n> ; <var:g3> := <var:g2> * <var:n> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:9> ; <var:g2> := <var:g2> * <nat:3> ; <var:g3> := <var:g3> * <nat:1> ; <var:F> := <var:g3> <var:F> := <var:F> + <var:g2> <var:F> := <var:F> + <var:g1> <var:F> := <var:F> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:n> = <var:v> $ ahead of the evaluation of this series of commands , it holds that we see $ <var:F> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is clear through typical Hoare logic . Focusing on the upcoming line contained in our code segment , the binding command yielding $ <var:n> $ to $ <var:g1>$ . This line transfers the condition $ \{ <var:n> = <var:v> \} $ to the condition $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \} $ . Taking another step toward the following bit of code contained in the set of instructions , we see the assignment code \verb | <var:g2> := <var:g1> * <var:n> ; | . This line redefines the precondition $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \} $ to $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \} $ . This is shown with the assignment inference rule of Hoare techniques . Shifting focus toward the proceeding piece of code contained in our code , we have the line assigning $ <var:g2> * <var:n> $ as $ <var:g3>$ . This code takes $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \} $ into the condition $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \} $ . This is given with the assignment scheme given in standard Hoare techniques . Taking another step toward the following command seen in our segment of code , the environment update statement binding $ <nat:4> $ to $ <var:g0>$ . This transfers the condition $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \} $ toward $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ . This is guaranteed with the assignment scheme obtained from Hoare logic . Moving on , the environment update code binding $ <var:g1> * <nat:9> $ as $ <var:g1>$ . This advances $ \{ <var:n> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ . Moving forward to the next step , the variable binding command letting $ <var:g2> * <nat:3> $ as $ <var:g2>$ . This statement advances the condition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ as the condition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <nat:3> \times <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ . This is shown to be logically sound using the assignment law found in Hoare logic . Honing in on the proceeding piece of code found in our program , the variable assignmet command letting $ <var:g3> * <nat:1> $ toward $ <var:g3>$ . This moves $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <nat:3> \times <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ into the condition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <nat:3> \times <var:v> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ . Stepping forward , we have the command giving $ <var:g3$ into $ <var:F>$ . This forwards the precondition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <nat:3> \times <var:v> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:g0> = <nat:4> \} $ into $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <nat:3> \times <var:v> ^ <nat:2> \land <var:g0> = <nat:4> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> \} $ . This is rigorously given using the assignment scheme of standard Hoare reasoning . Taking another step toward the upcoming command contained in the program , the variable binding code \verb | <var:F> := <var:F> + <var:g2> | . This line transfers the precondition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g2> = <nat:3> \times <var:v> ^ <nat:2> \land <var:g0> = <nat:4> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> \} $ as the postcondition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g0> = <nat:4> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> \} $ . Further , we have the variable assignmet code defining $ <var:F> + <var:g1$ as $ <var:F>$ . This line forwards the condition $ \{ <var:n> = <var:v> \land <var:g1> = <nat:9> \times <var:v> \land <var:g0> = <nat:4> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> \} $ as $ \{ <var:n> = <var:v> \land <var:g0> = <nat:4> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> \} $ . Moving onward , the statement letting $ <var:F> + <var:g0$ as $ <var:F>$ . This statement moves the condition $ \{ <var:n> = <var:v> \land <var:g0> = <nat:4> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> \} $ to the condition $ \{ <var:n> = <var:v> \land <var:F> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> + <nat:4> \} $ . This is ensured by the assignment law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:n> ; <var:g2> := <var:g1> * <var:n> ; <var:g3> := <var:g2> * <var:n> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:9> ; <var:g2> := <var:g2> * <nat:3> ; <var:g3> := <var:g3> * <nat:1> ; <var:F> := <var:g3> <var:F> := <var:F> + <var:g2> <var:F> := <var:F> + <var:g1> <var:F> := <var:F> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:n> = <var:v> }} <def:poly> {{ <var:F> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <nat:9> * <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <nat:9> * <var:v> /\ <var:g2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <nat:9> * <var:v> /\ <var:g2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <nat:9> * <var:v> /\ <var:g2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:g0> = <nat:4> /\ <var:F> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g1> = <nat:9> * <var:v> /\ <var:g0> = <nat:4> /\ <var:F> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:g0> = <nat:4> /\ <var:F> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:F> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 