\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:C0> := <nat:1> ; <var:X> := <var:C0> \end{verbatim} Given it to be that $ <var:j> = <var:D> $ ( for every $ <var:D> \in \mathbb{N} $ ) ahead of evaluating the list of instructions , it follows that we see $ <var:X> = <nat:1> $ once code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:D> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:j> = <var:D> \land <var:C0> = <nat:1> \} \\ <var:X> := <var:C0> \\ \{ <var:j> = <var:D> \land <var:X> = <nat:1> \} \end{eqnarray} Utilizing Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:j> = <var:D> }} <var:C0> := <nat:1> ; <var:X> := <var:C0> {{ <var:X> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:X> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 