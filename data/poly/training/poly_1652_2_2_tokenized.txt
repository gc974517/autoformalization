\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:d> \end{verbatim} Assuming it to be that $ <var:d> = <var:X> $ before the execution of the list of commands , then we have $ <var:O> = <nat:3> \times <var:X> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:d> = <var:X> \} \\ <var:O> := <nat:3> ; \\ \{ <var:d> = <var:X> \land <var:O> = <nat:3> \} \\ <var:O> := <nat:3> + <var:O> * <var:d> \\ \{ <var:d> = <var:X> \land <var:O> = <nat:3> \times <var:X> + <nat:3> \} \end{eqnarray} As a consequence , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:d> = <var:X> }} <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:d> {{ <var:O> = <nat:3> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:O> = <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 