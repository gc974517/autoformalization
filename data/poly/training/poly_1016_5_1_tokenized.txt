\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:U> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:7> ; <var:t> := <var:W1> <var:t> := <var:t> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:U> = <var:K> $ ahead of running the segment of code , it must be that $ <var:t> = <nat:7> * <var:K> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:U> = <var:K> \} \\ <var:W1> := <var:U> ; \\ \{ <var:U> = <var:K> \land <var:W1> = <var:K> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:U> = <var:K> \land <var:W1> = <var:K> \land <var:W0> = <nat:8> \} \\ <var:W1> := <var:W1> * <nat:7> ; \\ \{ <var:U> = <var:K> \land <var:W1> = <nat:7> * <var:K> \land <var:W0> = <nat:8> \} \\ <var:t> := <var:W1> \\ \{ <var:U> = <var:K> \land <var:W0> = <nat:8> \land <var:t> = <nat:7> * <var:K> \} \\ <var:t> := <var:t> + <var:W0> \\ \{ <var:U> = <var:K> \land <var:t> = <nat:7> * <var:K> + <nat:8> \} \end{eqnarray} Thusly , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:U> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:7> ; <var:t> := <var:W1> <var:t> := <var:t> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <def:poly> {{ <var:t> = <nat:7> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:W1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:W1> = <var:K> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:W1> = <nat:7> * <var:K> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:W0> = <nat:8> /\ <var:t> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:t> = <nat:7> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 