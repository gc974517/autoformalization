\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:p> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:p> ; <var:r2> := <var:r2> * <var:p> ; <var:k> := <var:r2> ; <var:k> := <var:k> + <var:r1> ; <var:k> := <var:k> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given for all positive numbers $ <var:E> $ it to hold that $ <var:p> = <var:E> $ ahead of evaluating our code segment it holds that we have $ <var:k> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> + <nat:8> $ when series of instructions has terminated . \end{theorem} \begin{proof} The argument for this code segment can be accomplished using typical Hoare logic . Focusing on the subsequent statements found in our segment of code , we have \begin{verbatim} { <var:p> = <var:E> } <var:r0> := <nat:8> { <var:p> = <var:E> \land <var:r0> = <nat:8> } { <var:p> = <var:E> \land <var:r0> = <nat:8> } <var:r1> := <nat:3> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> } { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> } <var:r1> := <var:r1> * <var:p> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> } { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> } <var:r2> := <nat:2> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:r2> = <nat:2> } { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:r2> = <nat:2> } <var:r2> := <var:r2> * <var:p> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:r2> = <nat:2> \times <var:E> } { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:r2> = <nat:2> \times <var:E> } <var:r2> := <var:r2> * <var:p> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:r2> = <nat:2> \times <var:E> ^ <nat:2> } { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:r2> = <nat:2> \times <var:E> ^ <nat:2> } <var:k> := <var:r2> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:k> = <nat:2> \times <var:E> ^ <nat:2> } { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \times <var:E> \land <var:k> = <nat:2> \times <var:E> ^ <nat:2> } <var:k> := <var:k> + <var:r1> { <var:p> = <var:E> \land <var:r0> = <nat:8> \land <var:k> = <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> } \end{verbatim} This is guaranteed using the binding scheme given in usual Hoare logic . Stepping through , we see \begin{verbatim} { <var:p> = <var:E> } <var:r0> := <nat:8> { <var:p> = <var:E> \land <var:r0> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:8> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:p> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:p> ; <var:r2> := <var:r2> * <var:p> ; <var:k> := <var:r2> ; <var:k> := <var:k> + <var:r1> ; <var:k> := <var:k> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <def:poly> {{ <var:k> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:E> /\ <var:r2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:E> /\ <var:r2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:E> /\ <var:r2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:E> /\ <var:k> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:r0> = <nat:8> /\ <var:k> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:k> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 