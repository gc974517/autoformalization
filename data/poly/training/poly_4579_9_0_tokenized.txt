\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:A0> := <nat:3> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:W> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:W> ; <var:A2> := <var:A2> * <var:W> ; <var:M> := <var:A2> ; <var:M> := <var:M> + <var:A1> ; <var:M> := <var:M> + <var:A0> \end{verbatim} Given it to hold that $ <var:W> = <var:p> $ ahead of running the list of commands , it follows that we see $ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> $ once list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:p> \} \\ <var:A0> := <nat:3> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \} \\ <var:A1> := <nat:5> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:A1> = <nat:5> \} \\ <var:A1> := <var:A1> * <var:W> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:A1> = <nat:5> * <var:p> \} \\ <var:A2> := <nat:3> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:A1> = <nat:5> * <var:p> \land <var:A2> = <nat:3> \} \\ <var:A2> := <var:A2> * <var:W> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:A1> = <nat:5> * <var:p> \land <var:A2> = <nat:3> * <var:p> \} \\ <var:A2> := <var:A2> * <var:W> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:A1> = <nat:5> * <var:p> \land <var:A2> = <nat:3> * <var:p> ^ <nat:2> \} \\ <var:M> := <var:A2> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:A1> = <nat:5> * <var:p> \land <var:M> = <nat:3> * <var:p> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:A1> ; \\ \{ <var:W> = <var:p> \land <var:A0> = <nat:3> \land <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> \} \\ <var:M> := <var:M> + <var:A0> \\ \{ <var:W> = <var:p> \land <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:W> = <var:p> }} <var:A0> := <nat:3> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:W> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:W> ; <var:A2> := <var:A2> * <var:W> ; <var:M> := <var:A2> ; <var:M> := <var:M> + <var:A1> ; <var:M> := <var:M> + <var:A0> {{ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:5> * <var:p> /\ <var:A2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:5> * <var:p> /\ <var:A2> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:5> * <var:p> /\ <var:A2> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:5> * <var:p> /\ <var:M> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:A0> = <nat:3> /\ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 