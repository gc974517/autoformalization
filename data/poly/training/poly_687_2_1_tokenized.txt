\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:1> ; <var:H> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Given , for some whole numbers $ <var:G> $ , it to hold that $ <var:F> = <var:G> $ before the execution of this program , it must be that we see $ <var:H> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:G> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:F> = <var:G> \land <var:u0> = <nat:1> \} \\ <var:H> := <var:u0> \\ \{ <var:F> = <var:G> \land <var:H> = <nat:1> \} \end{eqnarray} Utilizing usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:H> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:F> = <var:G> }} <def:poly> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 