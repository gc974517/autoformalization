\begin{document} \begin{theorem} We define the following program in \emph{Imp} : \begin{verbatim} <var:b> := <nat:2> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <nat:1> + <var:b> * <var:T> ; <var:b> := <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <var:b> * <var:T> ; <var:b> := <nat:3> + <var:b> * <var:T> \end{verbatim} Assume --- given natural coefficients $ <var:J> $ --- that we have $ <var:T> = <var:J> $ ahead of evaluating this list of commands it must be that $ <var:b> = <nat:2> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:2> + <nat:3> $ once series of instructions terminates . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:T> = <var:J> \} \\ <var:b> := <nat:2> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> + <nat:4> \} \\ <var:b> := <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + \} \\ <var:b> := <nat:4> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:4> \} \\ <var:b> := <nat:1> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> + <nat:1> \} \\ <var:b> := <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:5> + <nat:4> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + \} \\ <var:b> := <nat:4> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:6> + <nat:4> \cdot <var:J> ^ <nat:5> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \} \\ <var:b> := <var:b> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:7> + <nat:4> \cdot <var:J> ^ <nat:6> + <nat:4> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> + \} \\ <var:b> := <nat:3> + <var:b> * <var:T> \\ \{ <var:T> = <var:J> \land <var:b> = <nat:2> \cdot <var:J> ^ <nat:8> + <nat:4> \cdot <var:J> ^ <nat:7> + <nat:4> \cdot <var:J> ^ <nat:5> + <nat:1> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:3> \} \end{eqnarray} Given the preceding argument , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:T> = <var:J> }} <var:b> := <nat:2> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <nat:1> + <var:b> * <var:T> ; <var:b> := <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <var:b> * <var:T> ; <var:b> := <nat:3> + <var:b> * <var:T> {{ <var:b> = <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:b> = <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 