\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:4> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:H> ; <var:B> := <var:I1> ; <var:B> := <var:B> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:H> = <var:C> $ for any $ <var:C> $ prior to executing our set of commands , it must be that we see $ <var:B> = <nat:2> \cdot <var:C> + <nat:4> $ once series of commands executes . \end{theorem} \begin{proof} The method of proof for the series of commands is done through Hoare logic . Paying attention to the proceeding command seen in the list of commands , we see the variable binding line \verb | <var:I0> := <nat:4> ; | . This line takes the condition $ \{ <var:H> = <var:C> \} $ toward the condition $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \} $ . This is known to be sound by the assignment law obtained from usual Hoare techniques . Paying attention to the proceeding bit of code in the set of commands , the statement binding $ <nat:2> $ into $ <var:I1>$ . This takes the condition $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \} $ toward the condition $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \land <var:I1> = <nat:2> \} $ . Now , we have the environment update line \verb | <var:I1> := <var:I1> * <var:H> ; | . This line advances $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \land <var:I1> = <nat:2> \} $ to $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \land <var:I1> = <nat:2> * <var:C> \} $ . Advancing to the next step , we see the variable binding line \verb | <var:B> := <var:I1> ; | . This command redefines $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \land <var:I1> = <nat:2> * <var:C> \} $ to the postcondition $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \land <var:B> = <nat:2> * <var:C> \} $ . Advancing , the statement \verb | <var:B> := <var:B> + <var:I0> | . This takes the precondition $ \{ <var:H> = <var:C> \land <var:I0> = <nat:4> \land <var:B> = <nat:2> * <var:C> \} $ into $ \{ <var:H> = <var:C> \land <var:B> = <nat:2> * <var:C> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:H> ; <var:B> := <var:I1> ; <var:B> := <var:B> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:H> = <var:C> }} <def:poly> {{ <var:B> = <nat:2> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:I0> = <nat:4> /\ <var:B> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:B> = <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 