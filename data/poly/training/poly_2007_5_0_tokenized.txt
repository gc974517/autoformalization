\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:Q> ; <var:a> := <var:g1> ; <var:a> := <var:a> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for all whole numbers $ <var:q> $ , $ <var:Q> = <var:q> $ ahead of interpreting the list of commands , it follows that $ <var:a> = <nat:8> \cdot <var:q> + <nat:2> $ when code segment terminates . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:Q> = <var:q> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:Q> = <var:q> \land <var:g0> = <nat:2> \} \\ <var:g1> := <nat:8> ; \\ \{ <var:Q> = <var:q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:8> \} \\ <var:g1> := <var:g1> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:g0> = <nat:2> \land <var:g1> = <nat:8> \times <var:q> \} \\ <var:a> := <var:g1> ; \\ \{ <var:Q> = <var:q> \land <var:g0> = <nat:2> \land <var:a> = <nat:8> \times <var:q> \} \\ <var:a> := <var:a> + <var:g0> \\ \{ <var:Q> = <var:q> \land <var:a> = <nat:8> \times <var:q> + <nat:2> \} \end{eqnarray} Hence , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:Q> ; <var:a> := <var:g1> ; <var:a> := <var:a> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <def:poly> {{ <var:a> = <nat:8> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:g0> = <nat:2> /\ <var:a> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:a> = <nat:8> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 