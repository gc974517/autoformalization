\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:N> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:N> ; <var:J2> := <var:J2> * <var:N> ; <var:m> := <var:J2> ; <var:m> := <var:m> + <var:J1> ; <var:m> := <var:m> + <var:J0> \end{verbatim} Assuming , with some positive numbers $ <var:j> $ , it to hold that $ <var:N> = <var:j> $ before evaluating our set of instructions it holds that $ <var:m> = <nat:4> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:6> $ when code segment finishes . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:N> = <var:j> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:2> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:J1> = <nat:2> \} \end{eqnarray} Continuing the execution of this series of commands returns : \begin{eqnarray} <var:J1> := <var:J1> * <var:N> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:J1> = <nat:2> * <var:j> \} \\ <var:J2> := <nat:4> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:J1> = <nat:2> * <var:j> \land <var:J2> = <nat:4> \} \\ <var:J2> := <var:J2> * <var:N> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:J1> = <nat:2> * <var:j> \land <var:J2> = <nat:4> * <var:j> \} \\ <var:J2> := <var:J2> * <var:N> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:J1> = <nat:2> * <var:j> \land <var:J2> = <nat:4> * <var:j> ^ <nat:2> \} \\ <var:m> := <var:J2> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:J1> = <nat:2> * <var:j> \land <var:m> = <nat:4> * <var:j> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:J1> ; \\ \{ <var:N> = <var:j> \land <var:J0> = <nat:6> \land <var:m> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> \} \\ <var:m> := <var:m> + <var:J0> \\ \{ <var:N> = <var:j> \land <var:m> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:6> \} \end{eqnarray} Hence , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:N> = <var:j> }} <var:J0> := <nat:6> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:N> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:N> ; <var:J2> := <var:J2> * <var:N> ; <var:m> := <var:J2> ; <var:m> := <var:m> + <var:J1> ; <var:m> := <var:m> + <var:J0> {{ <var:m> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:2> * <var:j> /\ <var:J2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:2> * <var:j> /\ <var:J2> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:2> * <var:j> /\ <var:J2> = <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:2> * <var:j> /\ <var:m> = <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:J0> = <nat:6> /\ <var:m> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:m> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 