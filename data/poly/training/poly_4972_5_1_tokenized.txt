\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:P> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:1> ; <var:K> := <var:g1> <var:K> := <var:K> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:P> = <var:x> $ ahead of the evaluation of our set of instructions , it must be that $ <var:K> = <nat:1> \times <var:x> + <nat:3> $ once series of commands has finished . \end{theorem} \begin{proof} The flow of logic for the code segment can be shown with usual Hoare techniques . Moving forward to the upcoming statements found in our list of commands , \begin{verbatim} { <var:P> = <var:x> } <var:g1> := <var:P> { <var:P> = <var:x> \land <var:g1> = <var:x> } { <var:P> = <var:x> \land <var:g1> = <var:x> } <var:g0> := <nat:3> { <var:P> = <var:x> \land <var:g1> = <var:x> \land <var:g0> = <nat:3> } { <var:P> = <var:x> \land <var:g1> = <var:x> \land <var:g0> = <nat:3> } <var:g1> := <var:g1> * <nat:1> { <var:P> = <var:x> \land <var:g1> = <nat:1> \times <var:x> \land <var:g0> = <nat:3> } { <var:P> = <var:x> \land <var:g1> = <nat:1> \times <var:x> \land <var:g0> = <nat:3> } <var:K> := <var:g1{ <var:P> = <var:x> \land <var:g0> = <nat:3> \land <var:K> = <nat:1> \times <var:x> } { <var:P> = <var:x> \land <var:g0> = <nat:3> \land <var:K> = <nat:1> \times <var:x> } <var:K> := <var:K> + <var:g0{ <var:P> = <var:x> \land <var:K> = <nat:1> \times <var:x> + <nat:3> } \end{verbatim} This is known to be sound with the variable binding scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:P> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:1> ; <var:K> := <var:g1> <var:K> := <var:K> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:P> = <var:x> }} <def:poly> {{ <var:K> = <nat:1> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:g1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:g1> = <var:x> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:g0> = <nat:3> /\ <var:K> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:K> = <nat:1> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 