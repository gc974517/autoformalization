\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:u> ; <var:n2> := <nat:9> ; <var:n2> := <var:n2> * <var:u> ; <var:n2> := <var:n2> * <var:u> ; <var:p> := <var:n2> ; <var:p> := <var:p> + <var:n1> ; <var:p> := <var:p> + <var:n0> \end{verbatim} Assuming that $ <var:u> = <var:R> $ --- given every natural numbers $ <var:R> $ --- ahead of the execution of this list of instructions , it must be that we see $ <var:p> = <nat:9> \cdot <var:R> ^ <nat:2> + <nat:7> \cdot <var:R> + <nat:1> $ when list of commands is done . \end{theorem} \begin{proof} The course of logic for this program can be shown using usual Hoare logic . Shifting focus toward the upcoming lines of codein the program , we have \verb | { <var:u> = <var:R> } <var:n0> := <nat:1> { <var:u> = <var:R> \land <var:n0> = <nat:1> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> } <var:n1> := <nat:7> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> } <var:n1> := <var:n1> * <var:u> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> } <var:n2> := <nat:9> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:n2> = <nat:9> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:n2> = <nat:9> } <var:n2> := <var:n2> * <var:u> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:n2> = <nat:9> \cdot <var:R> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:n2> = <nat:9> \cdot <var:R> } <var:n2> := <var:n2> * <var:u> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:n2> = <nat:9> \cdot <var:R> ^ <nat:2> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:n2> = <nat:9> \cdot <var:R> ^ <nat:2> } <var:p> := <var:n2> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:p> = <nat:9> \cdot <var:R> ^ <nat:2> } | , \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:n1> = <nat:7> \cdot <var:R> \land <var:p> = <nat:9> \cdot <var:R> ^ <nat:2> } <var:p> := <var:p> + <var:n1> { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:p> = <nat:9> \cdot <var:R> ^ <nat:2> + <nat:7> \cdot <var:R> } | and \verb | { <var:u> = <var:R> \land <var:n0> = <nat:1> \land <var:p> = <nat:9> \cdot <var:R> ^ <nat:2> + <nat:7> \cdot <var:R> } <var:p> := <var:p> + <var:n0{ <var:u> = <var:R> \land <var:p> = <nat:9> \cdot <var:R> ^ <nat:2> + <nat:7> \cdot <var:R> + <nat:1> } | . This is shown using the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:u> = <var:R> }} <var:n0> := <nat:1> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:u> ; <var:n2> := <nat:9> ; <var:n2> := <var:n2> * <var:u> ; <var:n2> := <var:n2> * <var:u> ; <var:p> := <var:n2> ; <var:p> := <var:p> + <var:n1> ; <var:p> := <var:p> + <var:n0> {{ <var:p> = <nat:9> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:7> * <var:R> /\ <var:n2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:7> * <var:R> /\ <var:n2> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:7> * <var:R> /\ <var:n2> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:7> * <var:R> /\ <var:p> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:n0> = <nat:1> /\ <var:p> = <nat:9> * <var:R> ^ <nat:2> + <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:p> = <nat:9> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 