\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:8> ; <var:D> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:S> = <var:q> $ , given every positive coefficients $ <var:q> $ , ahead of executing this series of instructions it holds that $ <var:D> = <nat:8> $ . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:S> = <var:q> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:S> = <var:q> \land <var:d0> = <nat:8> \} \\ <var:D> := <var:d0> \\ \{ <var:S> = <var:q> \land <var:D> = <nat:8> \} \end{eqnarray} Thusly , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:8> ; <var:D> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:S> = <var:q> }} <def:poly> {{ <var:D> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:D> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 