\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as \begin{verbatim} <var:u1> := <var:y> ; <var:u2> := <var:u1> * <var:y> ; <var:u3> := <var:u2> * <var:y> ; <var:u0> := <nat:8> ; <var:u1> := <var:u1> * <nat:4> ; <var:u3> := <var:u3> * <nat:1> ; <var:j> := <var:u3> <var:j> := <var:j> + <var:u1> <var:j> := <var:j> + <var:u0> \end{verbatim} Allowing that we have $ <var:y> = <var:N> $ ( for all positive integer coefficients $ <var:N> $ ) prior to interpreting the code , it holds that we have $ <var:j> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:8> $ once program has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions can be seen using Hoare techniques . Moving forward to the upcoming piece of code seen in our series of instructions , the assignment command giving $ <var:y> $ to $ <var:u1>$ . This moves the condition $ \{ <var:y> = <var:N> \} $ into $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \} $ . This is known to be sound with the assignment scheme given in Hoare logic . Immediately after , we see the binding statement letting $ <var:u1> * <var:y> $ toward $ <var:u2>$ . This advances the condition $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \} $ toward the postcondition $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \} $ . Considering the proceeding line of code contained in our series of instructions , we see the assignment code binding $ <var:u2> * <var:y> $ as $ <var:u3>$ . This transfers $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \} $ toward the condition $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule defined in Hoare techniques . Immediately after , the assignment code \verb | <var:u0> := <nat:8> ; | . This transfers the condition $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \} $ toward the condition $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:8> \} $ . Observing the following line in the code , we see the environment update command \verb | <var:u1> := <var:u1> * <nat:4> ; | . This transfers $ \{ <var:y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:8> \} $ as the condition $ \{ <var:y> = <var:N> \land <var:u1> = <nat:4> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:8> \} $ . This is sound with the assignment law given by Hoare reasoning . Stepping forward , we have the statement \verb | <var:u3> := <var:u3> * <nat:1> ; | . This code takes the condition $ \{ <var:y> = <var:N> \land <var:u1> = <nat:4> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:8> \} $ as the condition $ \{ <var:y> = <var:N> \land <var:u1> = <nat:4> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:u0> = <nat:8> \} $ . Shifting focus toward the proceeding line found in our series of instructions , the variable binding line \verb | <var:j> := <var:u3> | . This forwards the condition $ \{ <var:y> = <var:N> \land <var:u1> = <nat:4> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:u0> = <nat:8> \} $ toward the condition $ \{ <var:y> = <var:N> \land <var:u1> = <nat:4> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u0> = <nat:8> \land <var:j> = <nat:1> \times <var:N> ^ <nat:3> \} $ . Moving forward , the variable assignmet code binding $ <var:j> + <var:u1$ to $ <var:j>$ . This forwards the precondition $ \{ <var:y> = <var:N> \land <var:u1> = <nat:4> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u0> = <nat:8> \land <var:j> = <nat:1> \times <var:N> ^ <nat:3> \} $ to the condition $ \{ <var:y> = <var:N> \land <var:u0> = <nat:8> \land <var:j> = <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> \} $ . Advancing , the statement letting $ <var:j> + <var:u0$ toward $ <var:j>$ . This transfers the condition $ \{ <var:y> = <var:N> \land <var:u0> = <nat:8> \land <var:j> = <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> \} $ into the postcondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> + <nat:8> \} $ . This is known to be sound by the assignment law defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:y> = <var:N> }} <var:u1> := <var:y> ; <var:u2> := <var:u1> * <var:y> ; <var:u3> := <var:u2> * <var:y> ; <var:u0> := <nat:8> ; <var:u1> := <var:u1> * <nat:4> ; <var:u3> := <var:u3> * <nat:1> ; <var:j> := <var:u3> <var:j> := <var:j> + <var:u1> <var:j> := <var:j> + <var:u0> {{ <var:j> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <nat:4> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <nat:4> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:N> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u1> = <nat:4> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u0> = <nat:8> /\ <var:j> = <nat:1> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:u0> = <nat:8> /\ <var:j> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 