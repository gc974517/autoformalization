\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:L> := <nat:3> ; <var:L> := <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <nat:3> + <var:L> * <var:h> ; <var:L> := <nat:2> + <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <var:L> * <var:h> ; <var:L> := <nat:3> + <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <nat:4> + <var:L> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:h> = <var:C> $ ahead of the evaluation of the set of instructions , it follows that we see $ <var:L> = <nat:3> \cdot <var:C> ^ <nat:10> + <nat:1> \cdot <var:C> ^ <nat:8> + <nat:1> \cdot <var:C> ^ <nat:7> + <nat:3> \cdot <var:C> ^ <nat:6> + <nat:2> \cdot <var:C> ^ <nat:5> + <nat:1> \cdot <var:C> ^ <nat:4> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> + <nat:4> $ . \end{theorem} \begin{proof} The argument for this code is done through typical Hoare reasoning . Looking at the next steps seen in our code segment , \verb | { <var:h> = <var:C> } <var:L> := <nat:3> { <var:h> = <var:C> \land <var:L> = <nat:3> } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> } <var:L> := <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> + } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> + } <var:L> := <nat:1> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:2> + <nat:1> } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:2> + <nat:1> } <var:L> := <nat:1> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:1> } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:1> } <var:L> := <nat:3> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> } <var:L> := <nat:2> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> } <var:L> := <nat:1> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> } <var:L> := <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + } | , \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + } <var:L> := <nat:3> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> } | and \verb | { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> } <var:L> := <nat:1> + <var:L> * <var:h> { <var:h> = <var:C> \land <var:L> = <nat:3> * <var:C> ^ <nat:9> + <nat:1> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> + <nat:1> } | . Moving forward to the next step , we see \verb | { <var:h> = <var:C> } <var:L> := <nat:3> { <var:h> = <var:C> \land <var:L> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:3> ; <var:L> := <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <nat:3> + <var:L> * <var:h> ; <var:L> := <nat:2> + <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <var:L> * <var:h> ; <var:L> := <nat:3> + <var:L> * <var:h> ; <var:L> := <nat:1> + <var:L> * <var:h> ; <var:L> := <nat:4> + <var:L> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <def:poly> {{ <var:L> = <nat:3> * <var:C> ^ <nat:10> + <nat:1> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:9> + <nat:1> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:L> = <nat:3> * <var:C> ^ <nat:10> + <nat:1> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 