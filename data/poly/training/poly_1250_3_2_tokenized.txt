\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:1> + <var:v> * <var:a> ; <var:v> := <nat:1> + <var:v> * <var:a> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assuming that we have $ <var:a> = <var:Q> $ ahead of running the set of instructions it must be that $ <var:v> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} Observe that this decorated code . \begin{eqnarray} \{ <var:a> = <var:Q> \} \\ <var:v> := <nat:1> ; \\ \{ <var:a> = <var:Q> \land <var:v> = <nat:1> \} \\ <var:v> := <nat:1> + <var:v> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:v> = <nat:1> \times <var:Q> + <nat:1> \} \\ <var:v> := <nat:1> + <var:v> * <var:a> \\ \{ <var:a> = <var:Q> \land <var:v> = <nat:1> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:1> + <var:v> * <var:a> ; <var:v> := <nat:1> + <var:v> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <def:poly> {{ <var:v> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:v> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:v> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 