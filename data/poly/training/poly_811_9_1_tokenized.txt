\begin{document} \begin{theorem} We define a program in \emph{Imp} as \begin{verbatim} <var:A1> := <var:V> ; <var:A2> := <var:A1> * <var:V> ; <var:A3> := <var:A2> * <var:V> ; <var:A0> := <nat:9> ; <var:A2> := <var:A2> * <nat:6> ; <var:A3> := <var:A3> * <nat:8> ; <var:t> := <var:A3> <var:t> := <var:t> + <var:A2> <var:t> := <var:t> + <var:A0> \end{verbatim} Allowing it to be that $ <var:V> = <var:c> $ given all $ <var:c> \in \mathbb{N} $ ahead of evaluating our segment of code it follows that $ <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The argument for the code can be shown using usual Hoare logic . Immediately following , we see the variable update line giving $ <var:V> $ as $ <var:A1>$ . This advances $ \{ <var:V> = <var:c> \} $ as the postcondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \} $ . Stepping forward , the variable assignmet command defining $ <var:A1> * <var:V> $ into $ <var:A2>$ . This moves the precondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \} $ into the postcondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \} $ . This is guaranteed with the assignment law in Hoare logic . Following , we have the variable assignmet code defining $ <var:A2> * <var:V> $ as $ <var:A3>$ . This command transfers the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \} $ . Moving on to the subsequent line of code found in our series of instructions , the variable update line yielding $ <nat:9> $ toward $ <var:A0>$ . This forwards the precondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \} $ into the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . Going forward , the line giving $ <var:A2> * <nat:6> $ as $ <var:A2>$ . This code redefines the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \land <var:A0> = <nat:9> \} $ into the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <nat:6> * <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . Moving onward , the variable update statement \verb | <var:A3> := <var:A3> * <nat:8> ; | . This redefines $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <nat:6> * <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \land <var:A0> = <nat:9> \} $ as the postcondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <nat:6> * <var:c> ^ <nat:2> \land <var:A3> = <nat:8> * <var:c> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . This is sound through the assignment inference rule in standard Hoare reasoning . Moving on to the proceeding step in the code segment , we see the variable assignmet line \verb | <var:t> := <var:A3> | . This command redefines the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <nat:6> * <var:c> ^ <nat:2> \land <var:A3> = <nat:8> * <var:c> ^ <nat:3> \land <var:A0> = <nat:9> \} $ to the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <nat:6> * <var:c> ^ <nat:2> \land <var:A0> = <nat:9> \land <var:t> = <nat:8> * <var:c> ^ <nat:3> \} $ . Observing the proceeding piece of code found in our list of instructions , we see the code giving $ <var:t> + <var:A2$ into $ <var:t>$ . This statement takes the precondition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <nat:6> * <var:c> ^ <nat:2> \land <var:A0> = <nat:9> \land <var:t> = <nat:8> * <var:c> ^ <nat:3> \} $ toward the condition $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A0> = <nat:9> \land <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> \} $ . This is given by the assignment law found in typical Hoare logic . Honing in on the following line found in the code , we have the environment update line \verb | <var:t> := <var:t> + <var:A0> | . This transfers $ \{ <var:V> = <var:c> \land <var:A1> = <var:c> \land <var:A0> = <nat:9> \land <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:c> \land <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:9> \} $ . This is known to be sound by the assignment rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:V> = <var:c> }} <var:A1> := <var:V> ; <var:A2> := <var:A1> * <var:V> ; <var:A3> := <var:A2> * <var:V> ; <var:A0> := <nat:9> ; <var:A2> := <var:A2> * <nat:6> ; <var:A3> := <var:A3> * <nat:8> ; <var:t> := <var:A3> <var:t> := <var:t> + <var:A2> <var:t> := <var:t> + <var:A0> {{ <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A3> = <var:c> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:A3> = <var:c> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:A3> = <nat:8> * <var:c> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:A0> = <nat:9> /\ <var:t> = <nat:8> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A1> = <var:c> /\ <var:A0> = <nat:9> /\ <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:t> = <nat:8> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 