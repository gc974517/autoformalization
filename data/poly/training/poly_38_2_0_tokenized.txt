\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:1> ; <var:S> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:Z> = <var:H> $ --- for any positive integers $ <var:H> $ --- ahead of the evaluation of our code segment it must be that we have $ <var:S> = <nat:1> $ after set of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:H> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:Z> = <var:H> \land <var:m0> = <nat:1> \} \\ <var:S> := <var:m0> \\ \{ <var:Z> = <var:H> \land <var:S> = <nat:1> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:1> ; <var:S> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Z> = <var:H> }} <def:poly> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 