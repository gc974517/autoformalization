\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:t> := <nat:4> ; <var:t> := <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> ; <var:t> := <var:t> * <var:g> ; <var:t> := <nat:1> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> \end{verbatim} Given it to be that $ <var:g> = <var:n> $ ( for any positive integer coefficients $ <var:n> $ ) ahead of interpreting the program , it holds that we have $ <var:t> = <nat:4> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be done by standard Hoare techniques . After , we have \begin{verbatim} { <var:g> = <var:n> } <var:t> := <nat:4> { <var:g> = <var:n> \land <var:t> = <nat:4> } { <var:g> = <var:n> \land <var:t> = <nat:4> } <var:t> := <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> + } { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> + } <var:t> := <nat:4> + <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> } { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> } <var:t> := <nat:4> + <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> + <nat:4> } { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> + <nat:4> } <var:t> := <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + } { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + } <var:t> := <nat:1> + <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> } \end{verbatim} After , we have \begin{verbatim} { <var:g> = <var:n> } <var:t> := <nat:4> { <var:g> = <var:n> \land <var:t> = <nat:4> } { <var:g> = <var:n> \land <var:t> = <nat:4> } <var:t> := <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> + } { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> + } <var:t> := <nat:4> + <var:t> * <var:g> { <var:g> = <var:n> \land <var:t> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:g> = <var:n> }} <var:t> := <nat:4> ; <var:t> := <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> ; <var:t> := <var:t> * <var:g> ; <var:t> := <nat:1> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:2> + <var:t> * <var:g> ; <var:t> := <nat:4> + <var:t> * <var:g> {{ <var:t> = <nat:4> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:t> = <nat:4> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 