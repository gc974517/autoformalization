\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:G1> := <var:h> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:8> ; <var:d> := <var:G1> <var:d> := <var:d> + <var:G0> \end{verbatim} Given it to hold that $ <var:h> = <var:v> $ prior to the execution of the set of commands , it follows that $ <var:d> = <nat:8> * <var:v> + <nat:6> $ when code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:v> \} \\ <var:G1> := <var:h> ; \\ \{ <var:h> = <var:v> \land <var:G1> = <var:v> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:h> = <var:v> \land <var:G1> = <var:v> \land <var:G0> = <nat:6> \} \\ <var:G1> := <var:G1> * <nat:8> ; \\ \{ <var:h> = <var:v> \land <var:G1> = <nat:8> \times <var:v> \land <var:G0> = <nat:6> \} \\ <var:d> := <var:G1> \\ \{ <var:h> = <var:v> \land <var:G0> = <nat:6> \land <var:d> = <nat:8> \times <var:v> \} \\ <var:d> := <var:d> + <var:G0> \\ \{ <var:h> = <var:v> \land <var:d> = <nat:8> \times <var:v> + <nat:6> \} \end{eqnarray} Using typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:h> = <var:v> }} <var:G1> := <var:h> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:8> ; <var:d> := <var:G1> <var:d> := <var:d> + <var:G0> {{ <var:d> = <nat:8> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:G1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:G1> = <var:v> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:G1> = <nat:8> * <var:v> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:G0> = <nat:6> /\ <var:d> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:d> = <nat:8> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 