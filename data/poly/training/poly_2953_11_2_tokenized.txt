\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:a> := <nat:3> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> \end{verbatim} Given it to hold that $ <var:x> = <var:D> $ prior to interpreting this series of instructions , then $ <var:a> = <nat:3> \cdot <var:D> ^ <nat:10> + <nat:3> \cdot <var:D> ^ <nat:9> + <nat:4> \cdot <var:D> ^ <nat:8> + <nat:3> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:4> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:D> \} \\ <var:a> := <nat:3> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> \} \\ <var:a> := <nat:3> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> + <nat:3> \} \\ <var:a> := <nat:4> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} \\ <var:a> := <nat:3> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} \\ <var:a> := <nat:1> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> \} \\ <var:a> := <nat:4> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> \} \\ <var:a> := <nat:1> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> \} \\ <var:a> := <nat:1> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> \} \\ <var:a> := <nat:1> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> \} \\ <var:a> := <nat:4> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> \} \\ <var:a> := <nat:3> + <var:a> * <var:x> \\ \{ <var:x> = <var:D> \land <var:a> = <nat:3> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:x> = <var:D> }} <var:a> := <nat:3> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> {{ <var:a> = <nat:3> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:D> /\ <var:a> = <nat:3> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 