\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:4> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:q> ; <var:i> := <var:p1> ; <var:i> := <var:i> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Given ( for any natural numbers $ <var:E> $ ) $ <var:q> = <var:E> $ before the execution of the series of instructions , it must be that $ <var:i> = <nat:1> * <var:E> + <nat:4> $ when set of commands has finished . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:q> = <var:E> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:q> = <var:E> \land <var:p0> = <nat:4> \} \\ <var:p1> := <nat:1> ; \\ \{ <var:q> = <var:E> \land <var:p0> = <nat:4> \land <var:p1> = <nat:1> \} \\ <var:p1> := <var:p1> * <var:q> ; \\ \{ <var:q> = <var:E> \land <var:p0> = <nat:4> \land <var:p1> = <nat:1> * <var:E> \} \\ <var:i> := <var:p1> ; \\ \{ <var:q> = <var:E> \land <var:p0> = <nat:4> \land <var:i> = <nat:1> * <var:E> \} \\ <var:i> := <var:i> + <var:p0> \\ \{ <var:q> = <var:E> \land <var:i> = <nat:1> * <var:E> + <nat:4> \} \end{eqnarray} Thusly , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:4> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:q> ; <var:i> := <var:p1> ; <var:i> := <var:i> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:q> = <var:E> }} <def:poly> {{ <var:i> = <nat:1> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:p0> = <nat:4> /\ <var:i> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:i> = <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 