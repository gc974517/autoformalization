\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:u1> := <var:o> ; <var:u0> := <nat:8> ; <var:u1> := <var:u1> * <nat:8> ; <var:S> := <var:u1> <var:S> := <var:S> + <var:u0> \end{verbatim} Allow it to hold that $ <var:o> = <var:t> $ ahead of running this list of commands it must be that we have $ <var:S> = <nat:8> * <var:t> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be demonstrated by standard Hoare techniques . Jumping to the next command found in the list of commands , we see the assignment code \verb | <var:u1> := <var:o> ; | . This advances the precondition $ \{ <var:o> = <var:t> \} $ as $ \{ <var:o> = <var:t> \land <var:u1> = <var:t> \} $ . Further , we have the environment update command \verb | <var:u0> := <nat:8> ; | . This forwards $ \{ <var:o> = <var:t> \land <var:u1> = <var:t> \} $ into $ \{ <var:o> = <var:t> \land <var:u1> = <var:t> \land <var:u0> = <nat:8> \} $ . Immediately following , we see the variable binding code defining $ <var:u1> * <nat:8> $ into $ <var:u1>$ . This moves the condition $ \{ <var:o> = <var:t> \land <var:u1> = <var:t> \land <var:u0> = <nat:8> \} $ to $ \{ <var:o> = <var:t> \land <var:u1> = <nat:8> \times <var:t> \land <var:u0> = <nat:8> \} $ . Moving onward , we see the variable assignmet statement \verb | <var:S> := <var:u1> | . This line transfers $ \{ <var:o> = <var:t> \land <var:u1> = <nat:8> \times <var:t> \land <var:u0> = <nat:8> \} $ into the condition $ \{ <var:o> = <var:t> \land <var:u0> = <nat:8> \land <var:S> = <nat:8> \times <var:t> \} $ . This is shown using the assignment scheme found in usual Hoare logic . Advancing to the next step in our code segment , we have the variable update code giving $ <var:S> + <var:u0$ into $ <var:S>$ . This takes $ \{ <var:o> = <var:t> \land <var:u0> = <nat:8> \land <var:S> = <nat:8> \times <var:t> \} $ into $ \{ <var:o> = <var:t> \land <var:S> = <nat:8> \times <var:t> + <nat:8> \} $ . This is rigorously given through the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:o> = <var:t> }} <var:u1> := <var:o> ; <var:u0> := <nat:8> ; <var:u1> := <var:u1> * <nat:8> ; <var:S> := <var:u1> <var:S> := <var:S> + <var:u0> {{ <var:S> = <nat:8> * <var:t> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:u1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:u1> = <var:t> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:u1> = <nat:8> * <var:t> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:u0> = <nat:8> /\ <var:S> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:S> = <nat:8> * <var:t> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 