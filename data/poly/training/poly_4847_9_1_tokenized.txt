\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:f> ; <var:g2> := <var:g1> * <var:f> ; <var:g3> := <var:g2> * <var:f> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:9> ; <var:g3> := <var:g3> * <nat:5> ; <var:w> := <var:g3> <var:w> := <var:w> + <var:g1> <var:w> := <var:w> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:f> = <var:s> $ prior to executing the code segment it holds that $ <var:w> = <nat:5> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> + <nat:8> $ after list of instructions has executed . \end{theorem} \begin{proof} The proof of our list of commands is given by usual Hoare logic . Jumping to the upcoming piece of code in our series of commands , we see \begin{eqnarray} \{ <var:f> = <var:s> \} \, <var:g1> := <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \} \end{eqnarray} Observing the proceeding pieces of code found in the list of instructions , \begin{eqnarray} \{ <var:f> = <var:s> \} \, <var:g1> := <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \} \\ \{ <var:f> = <var:s> \land <var:g1> = <var:s> \} \, <var:g2> := <var:g1> * <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \} \\ \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \} \, <var:g3> := <var:g2> * <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g3> = <var:s> ^ <nat:3> \} \\ \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g3> = <var:s> ^ <nat:3> \} \, <var:g0> := <nat:8> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g3> = <var:s> ^ <nat:3> \land <var:g0> = <nat:8> \} \\ \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g3> = <var:s> ^ <nat:3> \land <var:g0> = <nat:8> \} \, <var:g1> := <var:g1> * <nat:9> \, \{ <var:f> = <var:s> \land <var:g1> = <nat:9> \times <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g3> = <var:s> ^ <nat:3> \land <var:g0> = <nat:8> \} \end{eqnarray} This is rigorously given through the variable binding scheme defined by usual Hoare logic . Moving forward to the following commands in our program , we see \begin{eqnarray} \{ <var:f> = <var:s> \} \, <var:g1> := <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \} \\ \{ <var:f> = <var:s> \land <var:g1> = <var:s> \} \, <var:g2> := <var:g1> * <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \} \\ \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \} \, <var:g3> := <var:g2> * <var:f> \, \{ <var:f> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g3> = <var:s> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:f> ; <var:g2> := <var:g1> * <var:f> ; <var:g3> := <var:g2> * <var:f> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:9> ; <var:g3> := <var:g3> * <nat:5> ; <var:w> := <var:g3> <var:w> := <var:w> + <var:g1> <var:w> := <var:w> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:f> = <var:s> }} <def:poly> {{ <var:w> = <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <var:s> /\ <var:g2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g3> = <var:s> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <nat:9> * <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g3> = <var:s> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <nat:9> * <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:s> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g1> = <nat:9> * <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g0> = <nat:8> /\ <var:w> = <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:g0> = <nat:8> /\ <var:w> = <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:w> = <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 