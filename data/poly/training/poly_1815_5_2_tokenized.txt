\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> \end{verbatim} Given --- taking $ <var:N> $ --- it to be that $ <var:z> = <var:N> $ prior to running the set of instructions then we have $ <var:f> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> $ when code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:N> \} \\ <var:f> := <nat:3> ; \\ \{ <var:z> = <var:N> \land <var:f> = <nat:3> \} \\ <var:f> := <var:f> * <var:z> ; \\ \{ <var:z> = <var:N> \land <var:f> = <nat:3> \cdot <var:N> + \} \\ <var:f> := <var:f> * <var:z> ; \\ \{ <var:z> = <var:N> \land <var:f> = <nat:3> \cdot <var:N> ^ <nat:2> + \} \\ <var:f> := <var:f> * <var:z> ; \\ \{ <var:z> = <var:N> \land <var:f> = <nat:3> \cdot <var:N> ^ <nat:3> + \} \\ <var:f> := <nat:3> + <var:f> * <var:z> \\ \{ <var:z> = <var:N> \land <var:f> = <nat:3> \cdot <var:N> ^ <nat:4> + <nat:3> \} \end{eqnarray} Applying usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:z> = <var:N> }} <var:f> := <nat:3> ; <var:f> := <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> {{ <var:f> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:f> = <nat:3> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 