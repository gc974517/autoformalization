\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:x0> := <nat:5> ; <var:x1> := <nat:5> ; <var:x1> := <var:x1> * <var:e> ; <var:x2> := <nat:2> ; <var:x2> := <var:x2> * <var:e> ; <var:x2> := <var:x2> * <var:e> ; <var:Z> := <var:x2> ; <var:Z> := <var:Z> + <var:x1> ; <var:Z> := <var:Z> + <var:x0> \end{verbatim} Allow , given all $ <var:X> \in \mathbb{N} $ , $ <var:e> = <var:X> $ before running this code segment it holds that we see $ <var:Z> = <nat:2> \times <var:X> ^ <nat:2> + <nat:5> \times <var:X> + <nat:5> $ after code terminates . \end{theorem} \begin{proof} Proving correctness for this code is evident using typical Hoare techniques . Stepping forward , we see the statement assigning $ <nat:5> $ toward $ <var:x0>$ . This code transfers the condition $ \{ <var:e> = <var:X> \} $ to the postcondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \} $ . This is deduced through the assignment scheme of usual Hoare reasoning . After , we have the variable update command giving $ <nat:5> $ into $ <var:x1>$ . This statement redefines the precondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \} $ to the condition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> \} $ . Looking at the subsequent command in the list of instructions , we see the binding line assigning $ <var:x1> * <var:e> $ into $ <var:x1>$ . This redefines the precondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> \} $ as the condition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \} $ . This is given with the assignment law found in typical Hoare techniques . Focusing on the proceeding command contained in our list of commands , we have the line \verb | <var:x2> := <nat:2> ; | . This line advances the precondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \} $ toward $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:x2> = <nat:2> \} $ . This is known to be sound by the assignment inference rule obtained from typical Hoare techniques . Keeping momentum , the variable update line \verb | <var:x2> := <var:x2> * <var:e> ; | . This line advances $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:x2> = <nat:2> \} $ into the postcondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:x2> = <nat:2> * <var:X> \} $ . This is sound using the assignment rule obtained from typical Hoare reasoning . Advancing , we have the line \verb | <var:x2> := <var:x2> * <var:e> ; | . This command redefines the precondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:x2> = <nat:2> * <var:X> \} $ as the postcondition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:x2> = <nat:2> * <var:X> ^ <nat:2> \} $ . This is shown with the assignment scheme defined by standard Hoare techniques . Shifting focus toward the upcoming statement in the series of commands , we have the assignment statement \verb | <var:Z> := <var:x2> ; | . This line advances the condition $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:x2> = <nat:2> * <var:X> ^ <nat:2> \} $ toward $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:Z> = <nat:2> * <var:X> ^ <nat:2> \} $ . This is deduced through the assignment scheme from usual Hoare logic . Moving onward , we have the assignment line yielding $ <var:Z> + <var:x1> $ as $ <var:Z>$ . This command forwards $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:5> * <var:X> \land <var:Z> = <nat:2> * <var:X> ^ <nat:2> \} $ as $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> \} $ . Considering the following line of code seen in our code segment , the code \verb | <var:Z> := <var:Z> + <var:x0> | . This advances $ \{ <var:e> = <var:X> \land <var:x0> = <nat:5> \land <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> \} $ into $ \{ <var:e> = <var:X> \land <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:5> \} $ . This is shown to be logically sound through the assignment rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:e> = <var:X> }} <var:x0> := <nat:5> ; <var:x1> := <nat:5> ; <var:x1> := <var:x1> * <var:e> ; <var:x2> := <nat:2> ; <var:x2> := <var:x2> * <var:e> ; <var:x2> := <var:x2> * <var:e> ; <var:Z> := <var:x2> ; <var:Z> := <var:Z> + <var:x1> ; <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:5> * <var:X> /\ <var:x2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:5> * <var:X> /\ <var:x2> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:5> * <var:X> /\ <var:x2> = <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:5> * <var:X> /\ <var:Z> = <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:x0> = <nat:5> /\ <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:Z> = <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 