\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:n> ; <var:E2> := <nat:3> ; <var:E2> := <var:E2> * <var:n> ; <var:E2> := <var:E2> * <var:n> ; <var:j> := <var:E2> ; <var:j> := <var:j> + <var:E1> ; <var:j> := <var:j> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Allow ( letting $ <var:x> $ ) it to be that $ <var:n> = <var:x> $ before the execution of our segment of code it follows that we see $ <var:j> = <nat:3> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:4> $ when program has finished . \end{theorem} \begin{proof} The course of logic for our code is given using standard Hoare logic . Taking another step toward the proceeding statements seen in our series of instructions , we see \verb | { <var:n> = <var:x> } <var:E0> := <nat:4> { <var:n> = <var:x> \land <var:E0> = <nat:4> } | , \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> } <var:E1> := <nat:5> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> } | , \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> } <var:E1> := <var:E1> * <var:n> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> } | , \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> } <var:E2> := <nat:3> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:E2> = <nat:3> } | , \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:E2> = <nat:3> } <var:E2> := <var:E2> * <var:n> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:E2> = <nat:3> * <var:x> } | , \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:E2> = <nat:3> * <var:x> } <var:E2> := <var:E2> * <var:n> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:E2> = <nat:3> * <var:x> ^ <nat:2> } | and \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:E2> = <nat:3> * <var:x> ^ <nat:2> } <var:j> := <var:E2> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> * <var:x> \land <var:j> = <nat:3> * <var:x> ^ <nat:2> } | . Taking another step toward the following lines of codefound in the list of commands , we see \verb | { <var:n> = <var:x> } <var:E0> := <nat:4> { <var:n> = <var:x> \land <var:E0> = <nat:4> } | and \verb | { <var:n> = <var:x> \land <var:E0> = <nat:4> } <var:E1> := <nat:5> { <var:n> = <var:x> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:n> ; <var:E2> := <nat:3> ; <var:E2> := <var:E2> * <var:n> ; <var:E2> := <var:E2> * <var:n> ; <var:j> := <var:E2> ; <var:j> := <var:j> + <var:E1> ; <var:j> := <var:j> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:n> = <var:x> }} <def:poly> {{ <var:j> = <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> * <var:x> /\ <var:E2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> * <var:x> /\ <var:E2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> * <var:x> /\ <var:E2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> * <var:x> /\ <var:j> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:E0> = <nat:4> /\ <var:j> = <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:j> = <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 