\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:9> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:W> ; <var:y> := <var:M1> ; <var:y> := <var:y> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:W> = <var:N> $ prior to evaluating our list of instructions , then we have $ <var:y> = <nat:3> \cdot <var:N> + <nat:9> $ after list of commands has executed . \end{theorem} \begin{proof} The course of logic for the set of commands can be given with typical Hoare reasoning . Moving forward to the next step , we have the statement \verb | <var:M0> := <nat:9> ; | . This command redefines the precondition $ \{ <var:W> = <var:N> \} $ into the postcondition $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \} $ . This is rigorously given with the assignment inference rule obtained from Hoare techniques . Now , we see the variable assignmet code \verb | <var:M1> := <nat:3> ; | . This takes the condition $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \} $ into $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \land <var:M1> = <nat:3> \} $ . Considering the following bit of code seen in the list of commands , we have the variable assignmet line defining $ <var:M1> * <var:W> $ toward $ <var:M1>$ . This code transfers the condition $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \land <var:M1> = <nat:3> \} $ into $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \land <var:M1> = <nat:3> * <var:N> \} $ . Moving on , we have the variable assignmet line binding $ <var:M1> $ into $ <var:y>$ . This code forwards $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \land <var:M1> = <nat:3> * <var:N> \} $ into the postcondition $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \land <var:y> = <nat:3> * <var:N> \} $ . Stepping forward , we have the variable assignmet statement \verb | <var:y> := <var:y> + <var:M0> | . This advances the condition $ \{ <var:W> = <var:N> \land <var:M0> = <nat:9> \land <var:y> = <nat:3> * <var:N> \} $ to the condition $ \{ <var:W> = <var:N> \land <var:y> = <nat:3> * <var:N> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:9> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:W> ; <var:y> := <var:M1> ; <var:y> := <var:y> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:W> = <var:N> }} <def:poly> {{ <var:y> = <nat:3> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:M0> = <nat:9> /\ <var:y> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:y> = <nat:3> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 