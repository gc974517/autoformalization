\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:e1> := <var:J> ; <var:e2> := <var:e1> * <var:J> ; <var:e3> := <var:e2> * <var:J> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:7> ; <var:e2> := <var:e2> * <nat:5> ; <var:e3> := <var:e3> * <nat:4> ; <var:f> := <var:e3> <var:f> := <var:f> + <var:e2> <var:f> := <var:f> + <var:e1> <var:f> := <var:f> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:J> = <var:w> $ ahead of interpreting the program then we see $ <var:f> = <nat:4> \times <var:w> ^ <nat:3> + <nat:5> \times <var:w> ^ <nat:2> + <nat:7> \times <var:w> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our series of commands can be accomplished by typical Hoare reasoning . Following , \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:e1> := <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \} & <var:e2> := <var:e1> * <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \} & <var:e3> := <var:e2> * <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \} & <var:e0> := <nat:2> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \land <var:e0> = <nat:2> \} \end{tabular} This is rigorously given through the assignment inference rule found in usual Hoare logic . Shifting focus toward the subsequent steps in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:e1> := <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \} & <var:e2> := <var:e1> * <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \} & <var:e3> := <var:e2> * <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \} & <var:e0> := <nat:2> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ \{ <var:J> = <var:w> \land <var:e1> = <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \land <var:e0> = <nat:2> \} & <var:e1> := <var:e1> * <nat:7> & \{ <var:J> = <var:w> \land <var:e1> = <nat:7> * <var:w> \land <var:e2> = <var:w> ^ <nat:2> \land <var:e3> = <var:w> ^ <nat:3> \land <var:e0> = <nat:2> \} \end{tabular} This is shown through the rule given in typical Hoare logic . Paying attention to the upcoming command contained in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:e1> := <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \} \end{tabular} Honing in on the next command contained in the program , \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:e1> := <var:J> & \{ <var:J> = <var:w> \land <var:e1> = <var:w> \} \end{tabular} This is deduced with the environment update scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:J> ; <var:e2> := <var:e1> * <var:J> ; <var:e3> := <var:e2> * <var:J> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:7> ; <var:e2> := <var:e2> * <nat:5> ; <var:e3> := <var:e3> * <nat:4> ; <var:f> := <var:e3> <var:f> := <var:f> + <var:e2> <var:f> := <var:f> + <var:e1> <var:f> := <var:f> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:J> = <var:w> }} <def:poly> {{ <var:f> = <nat:4> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <var:w> /\ <var:e2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <var:w> /\ <var:e2> = <var:w> ^ <nat:2> /\ <var:e3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <var:w> /\ <var:e2> = <var:w> ^ <nat:2> /\ <var:e3> = <var:w> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <nat:7> * <var:w> /\ <var:e2> = <var:w> ^ <nat:2> /\ <var:e3> = <var:w> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <nat:7> * <var:w> /\ <var:e2> = <nat:5> * <var:w> ^ <nat:2> /\ <var:e3> = <var:w> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <nat:7> * <var:w> /\ <var:e2> = <nat:5> * <var:w> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:w> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <nat:7> * <var:w> /\ <var:e2> = <nat:5> * <var:w> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:f> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e1> = <nat:7> * <var:w> /\ <var:e0> = <nat:2> /\ <var:f> = <nat:4> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:e0> = <nat:2> /\ <var:f> = <nat:4> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:f> = <nat:4> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 