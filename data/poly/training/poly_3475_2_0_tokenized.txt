\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:6> ; <var:S> := <var:t0> \end{verbatim} Given ( for some natural numbers $ <var:a> $ ) that we have $ <var:q> = <var:a> $ before evaluating this list of commands , it must be that we have $ <var:S> = <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:q> = <var:a> \} \\ <var:t0> := <nat:6> ; \\ \{ <var:q> = <var:a> \land <var:t0> = <nat:6> \} \\ <var:S> := <var:t0> \\ \{ <var:q> = <var:a> \land <var:S> = <nat:6> \} \end{eqnarray} Thusly , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:q> = <var:a> }} <var:t0> := <nat:6> ; <var:S> := <var:t0> {{ <var:S> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:S> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 