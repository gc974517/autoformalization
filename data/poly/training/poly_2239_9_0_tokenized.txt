\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:m> ; <var:b2> := <nat:5> ; <var:b2> := <var:b2> * <var:m> ; <var:b2> := <var:b2> * <var:m> ; <var:J> := <var:b2> ; <var:J> := <var:J> + <var:b1> ; <var:J> := <var:J> + <var:b0> \end{verbatim} Allow that we have $ <var:m> = <var:r> $ ahead of executing our code , it follows that we see $ <var:J> = <nat:5> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:8> $ when code segment is done executing . \end{theorem} \begin{proof} The flow of logic for our list of commands is given through Hoare reasoning . Taking another step toward the subsequent statement seen in our code , \[ \begin{tabular} {rcl} \{ <var:m> = <var:r> \} & <var:b0> := <nat:8> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \} \end{tabular} This is deduced by the environment update rule defined by typical Hoare logic . Moving on to the subsequent pieces of code seen in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:m> = <var:r> \} & <var:b0> := <nat:8> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \} \\ \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \} & <var:b1> := <nat:1> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \} \\ \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \} & <var:b1> := <var:b1> * <var:m> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> * <var:r> \} \\ \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> * <var:r> \} & <var:b2> := <nat:5> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> * <var:r> \land <var:b2> = <nat:5> \} \\ \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> * <var:r> \land <var:b2> = <nat:5> \} & <var:b2> := <var:b2> * <var:m> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> * <var:r> \land <var:b2> = <nat:5> * <var:r> \} \end{tabular} Advancing to the subsequent piece of code seen in the program , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:r> \} & <var:b0> := <nat:8> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \} \end{tabular} Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:m> = <var:r> \} & <var:b0> := <nat:8> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \} \end{tabular} Honing in on the upcoming piece of code found in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:r> \} & <var:b0> := <nat:8> & \{ <var:m> = <var:r> \land <var:b0> = <nat:8> \} \end{tabular} This is sound with the assignment inference rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:m> = <var:r> }} <var:b0> := <nat:8> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:m> ; <var:b2> := <nat:5> ; <var:b2> := <var:b2> * <var:m> ; <var:b2> := <var:b2> * <var:m> ; <var:J> := <var:b2> ; <var:J> := <var:J> + <var:b1> ; <var:J> := <var:J> + <var:b0> {{ <var:J> = <nat:5> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:r> /\ <var:b2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:r> /\ <var:b2> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:r> /\ <var:b2> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:r> /\ <var:J> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:b0> = <nat:8> /\ <var:J> = <nat:5> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:J> = <nat:5> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 