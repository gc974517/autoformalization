\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:7> ; <var:V> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allowing ( given some positive coefficients $ <var:U> $ ) that $ <var:K> = <var:U> $ prior to the evaluation of the code it follows that we have $ <var:V> = <nat:7> $ once set of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:U> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:K> = <var:U> \land <var:Q0> = <nat:7> \} \\ <var:V> := <var:Q0> \\ \{ <var:K> = <var:U> \land <var:V> = <nat:7> \} \end{eqnarray} Using standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:7> ; <var:V> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:K> = <var:U> }} <def:poly> {{ <var:V> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:V> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 