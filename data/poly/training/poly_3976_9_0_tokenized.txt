\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:7> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:n> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:n> ; <var:F2> := <var:F2> * <var:n> ; <var:K> := <var:F2> ; <var:K> := <var:K> + <var:F1> ; <var:K> := <var:K> + <var:F0> \end{verbatim} Assuming for every $ <var:y> \in \mathbb{Z}^+ $ $ <var:n> = <var:y> $ prior to evaluating this set of commands , it must be that we see $ <var:K> = <nat:1> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:7> $ when series of instructions has finished executing . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:n> = <var:y> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \} \\ <var:F1> := <nat:2> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:2> \} \\ <var:F1> := <var:F1> * <var:n> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:2> \cdot <var:y> \} \\ <var:F2> := <nat:1> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:2> \cdot <var:y> \land <var:F2> = <nat:1> \} \\ <var:F2> := <var:F2> * <var:n> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:2> \cdot <var:y> \land <var:F2> = <nat:1> \cdot <var:y> \} \\ <var:F2> := <var:F2> * <var:n> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:2> \cdot <var:y> \land <var:F2> = <nat:1> \cdot <var:y> ^ <nat:2> \} \\ <var:K> := <var:F2> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:2> \cdot <var:y> \land <var:K> = <nat:1> \cdot <var:y> ^ <nat:2> \} \end{eqnarray} Advancing the execution of our set of commands yields : \begin{eqnarray} <var:K> := <var:K> + <var:F1> ; \\ \{ <var:n> = <var:y> \land <var:F0> = <nat:7> \land <var:K> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> \} \end{eqnarray} Continuing the evaluation of the code segment results in : \begin{eqnarray} <var:K> := <var:K> + <var:F0> \\ \{ <var:n> = <var:y> \land <var:K> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:7> \} \end{eqnarray} As a result , this set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:n> = <var:y> }} <var:F0> := <nat:7> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:n> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:n> ; <var:F2> := <var:F2> * <var:n> ; <var:K> := <var:F2> ; <var:K> := <var:K> + <var:F1> ; <var:K> := <var:K> + <var:F0> {{ <var:K> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:2> * <var:y> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:2> * <var:y> /\ <var:F2> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:2> * <var:y> /\ <var:F2> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:2> * <var:y> /\ <var:K> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:F0> = <nat:7> /\ <var:K> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:K> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 