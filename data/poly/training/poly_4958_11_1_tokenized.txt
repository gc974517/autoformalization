\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:R> ; <var:n2> := <var:n1> * <var:R> ; <var:n3> := <var:n2> * <var:R> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:1> ; <var:F> := <var:n3> <var:F> := <var:F> + <var:n2> <var:F> := <var:F> + <var:n1> <var:F> := <var:F> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given some integers $ <var:Z> $ ) that $ <var:R> = <var:Z> $ ahead of the evaluation of this series of commands it must be that $ <var:F> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:9> \times <var:Z> + <nat:7> $ when set of commands has executed . \end{theorem} \begin{proof} The flow of logic for the set of commands can be given through standard Hoare techniques . Paying attention to the next piece of code seen in the set of commands , we have the assignment code \verb | <var:n1> := <var:R> ; | . This forwards the precondition $ \{ <var:R> = <var:Z> \} $ to the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \} $ . Observing the proceeding line found in the series of instructions , we have the variable assignmet statement giving $ <var:n1> * <var:R> $ into $ <var:n2>$ . This code redefines the precondition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \} $ toward the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \} $ . Advancing to the subsequent command found in the list of instructions , we have the assignment command \verb | <var:n3> := <var:n2> * <var:R> ; | . This code transfers the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \} $ toward the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \} $ . Moving forward to the proceeding command in the set of commands , the environment update line \verb | <var:n0> := <nat:7> ; | . This advances the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \} $ into the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ . Going to the next step , we have the assignment command \verb | <var:n1> := <var:n1> * <nat:9> ; | . This line moves the precondition $ \{ <var:R> = <var:Z> \land <var:n1> = <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ to the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ . This is deduced through the assignment scheme defined by usual Hoare reasoning . Moving forward to the next step , the assignment code yielding $ <var:n2> * <nat:2> $ to $ <var:n2>$ . This forwards the precondition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ as the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ . This is given by the assignment inference rule defined in standard Hoare techniques . Taking a look at the proceeding bit of code found in the segment of code , the assignment line \verb | <var:n3> := <var:n3> * <nat:1> ; | . This command redefines the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:n3> = <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ toward the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:n3> = <nat:1> \cdot <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ . This is sound with the assignment inference rule given by typical Hoare techniques . Advancing to the proceeding line seen in our segment of code , the variable binding line binding $ <var:n3$ to $ <var:F>$ . This forwards $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:n3> = <nat:1> \cdot <var:Z> ^ <nat:3> \land <var:n0> = <nat:7> \} $ as the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:n0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> \} $ . Following , we see the environment update code \verb | <var:F> := <var:F> + <var:n2> | . This code moves the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:n0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> \} $ toward the postcondition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> \} $ . Moving on to the upcoming piece of code found in the series of commands , the binding statement \verb | <var:F> := <var:F> + <var:n1> | . This transfers the condition $ \{ <var:R> = <var:Z> \land <var:n1> = <nat:9> \cdot <var:Z> \land <var:n0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> \} $ to the condition $ \{ <var:R> = <var:Z> \land <var:n0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> \} $ . Considering the next statement contained in the code segment , we have the variable binding line \verb | <var:F> := <var:F> + <var:n0> | . This transfers the precondition $ \{ <var:R> = <var:Z> \land <var:n0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> \} $ to the condition $ \{ <var:R> = <var:Z> \land <var:F> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:R> ; <var:n2> := <var:n1> * <var:R> ; <var:n3> := <var:n2> * <var:R> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:1> ; <var:F> := <var:n3> <var:F> := <var:F> + <var:n2> <var:F> := <var:F> + <var:n1> <var:F> := <var:F> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:R> = <var:Z> }} <def:poly> {{ <var:F> = <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <var:Z> /\ <var:n2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <var:Z> /\ <var:n2> = <var:Z> ^ <nat:2> /\ <var:n3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <var:Z> /\ <var:n2> = <var:Z> ^ <nat:2> /\ <var:n3> = <var:Z> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <nat:9> * <var:Z> /\ <var:n2> = <var:Z> ^ <nat:2> /\ <var:n3> = <var:Z> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <nat:9> * <var:Z> /\ <var:n2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:n3> = <var:Z> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <nat:9> * <var:Z> /\ <var:n2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:n3> = <nat:1> * <var:Z> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <nat:9> * <var:Z> /\ <var:n2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:n0> = <nat:7> /\ <var:F> = <nat:1> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n1> = <nat:9> * <var:Z> /\ <var:n0> = <nat:7> /\ <var:F> = <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:n0> = <nat:7> /\ <var:F> = <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Z> /\ <var:F> = <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 