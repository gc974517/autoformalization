\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:i> ; <var:C2> := <var:C1> * <var:i> ; <var:C3> := <var:C2> * <var:i> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:3> ; <var:C2> := <var:C2> * <nat:1> ; <var:C3> := <var:C3> * <nat:2> ; <var:d> := <var:C3> <var:d> := <var:d> + <var:C2> <var:d> := <var:d> + <var:C1> <var:d> := <var:d> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:i> = <var:Y> $ before interpreting the code segment , then we have $ <var:d> = <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our series of commands can be given through Hoare logic . Moving forward to the proceeding piece of code contained in our set of commands , we have \begin{eqnarray} \{ <var:i> = <var:Y> \} \, <var:C1> := <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \end{eqnarray} This is given using the variable assignmet law obtained from standard Hoare techniques . Moving on to the next step , \begin{eqnarray} \{ <var:i> = <var:Y> \} \, <var:C1> := <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \\ \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \, <var:C2> := <var:C1> * <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \} \end{eqnarray} This is deduced through the binding scheme in standard Hoare techniques . Moving onward , we see \begin{eqnarray} \{ <var:i> = <var:Y> \} \, <var:C1> := <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \\ \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \, <var:C2> := <var:C1> * <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \} \\ \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \} \, <var:C3> := <var:C2> * <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \} \\ \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \} \, <var:C0> := <nat:4> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C0> = <nat:4> \} \\ \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C0> = <nat:4> \} \, <var:C1> := <var:C1> * <nat:3> \, \{ <var:i> = <var:Y> \land <var:C1> = <nat:3> * <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C0> = <nat:4> \} \\ \{ <var:i> = <var:Y> \land <var:C1> = <nat:3> * <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C0> = <nat:4> \} \, <var:C2> := <var:C2> * <nat:1> \, \{ <var:i> = <var:Y> \land <var:C1> = <nat:3> * <var:Y> \land <var:C2> = <nat:1> * <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C0> = <nat:4> \} \end{eqnarray} This is rigorously given through the assignment inference rule given in standard Hoare logic . Following , we have \begin{eqnarray} \{ <var:i> = <var:Y> \} \, <var:C1> := <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \end{eqnarray} This is given through the inference rule given by Hoare logic . Observing the proceeding line of code contained in our segment of code , we see \begin{eqnarray} \{ <var:i> = <var:Y> \} \, <var:C1> := <var:i> \, \{ <var:i> = <var:Y> \land <var:C1> = <var:Y> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C1> := <var:i> ; <var:C2> := <var:C1> * <var:i> ; <var:C3> := <var:C2> * <var:i> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:3> ; <var:C2> := <var:C2> * <nat:1> ; <var:C3> := <var:C3> * <nat:2> ; <var:d> := <var:C3> <var:d> := <var:d> + <var:C2> <var:d> := <var:d> + <var:C1> <var:d> := <var:d> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:i> = <var:Y> }} <def:poly> {{ <var:d> = <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <nat:3> * <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <nat:3> * <var:Y> /\ <var:C2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <nat:3> * <var:Y> /\ <var:C2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <nat:3> * <var:Y> /\ <var:C2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:C0> = <nat:4> /\ <var:d> = <nat:2> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C1> = <nat:3> * <var:Y> /\ <var:C0> = <nat:4> /\ <var:d> = <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:C0> = <nat:4> /\ <var:d> = <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:d> = <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 