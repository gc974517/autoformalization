\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:5> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:d> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:d> ; <var:c2> := <var:c2> * <var:d> ; <var:j> := <var:c2> ; <var:j> := <var:j> + <var:c1> ; <var:j> := <var:j> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given $ <var:A> $ --- it to be that $ <var:d> = <var:A> $ ahead of running the set of commands then we have $ <var:j> = <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is evident with Hoare techniques . Taking another step toward the proceeding step in our program , we see the variable binding command letting $ <nat:5> $ toward $ <var:c0>$ . This advances $ \{ <var:d> = <var:A> \} $ toward the postcondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \} $ . This is known to be sound by the assignment rule of typical Hoare reasoning . Shifting focus toward the next step in the program , we see the line \verb | <var:c1> := <nat:1> ; | . This moves the precondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \} $ into $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \} $ . Looking at the upcoming piece of code contained in our series of commands , we see the variable assignmet command \verb | <var:c1> := <var:c1> * <var:d> ; | . This command forwards $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \} $ as the postcondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \} $ . This is deduced through the assignment inference rule obtained from usual Hoare techniques . Going to the next step , the environment update line \verb | <var:c2> := <nat:4> ; | . This redefines the precondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \} $ as the postcondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:c2> = <nat:4> \} $ . This is known to be sound by the assignment law from standard Hoare reasoning . Observing the subsequent bit of code in our series of instructions , we see the variable update statement \verb | <var:c2> := <var:c2> * <var:d> ; | . This statement advances the condition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:c2> = <nat:4> \} $ toward $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:c2> = <nat:4> \cdot <var:A> \} $ . This is given using the assignment law defined in usual Hoare techniques . Advancing , we have the assignment statement \verb | <var:c2> := <var:c2> * <var:d> ; | . This advances the precondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:c2> = <nat:4> \cdot <var:A> \} $ toward the postcondition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:c2> = <nat:4> \cdot <var:A> ^ <nat:2> \} $ . Moving on to the subsequent command in the segment of code , we see the variable assignmet code assigning $ <var:c2> $ to $ <var:j>$ . This takes $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:c2> = <nat:4> \cdot <var:A> ^ <nat:2> \} $ as $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:j> = <nat:4> \cdot <var:A> ^ <nat:2> \} $ . This is given using the assignment scheme of usual Hoare techniques . Moving forward , the variable binding line \verb | <var:j> := <var:j> + <var:c1> ; | . This forwards $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \cdot <var:A> \land <var:j> = <nat:4> \cdot <var:A> ^ <nat:2> \} $ toward the condition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:j> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> \} $ . This is known to be sound by the assignment rule from typical Hoare reasoning . Advancing to the upcoming command contained in the series of commands , we have the binding command \verb | <var:j> := <var:j> + <var:c0> | . This line redefines the condition $ \{ <var:d> = <var:A> \land <var:c0> = <nat:5> \land <var:j> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> \} $ toward $ \{ <var:d> = <var:A> \land <var:j> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:5> \} $ . This is known to be sound through the assignment inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:5> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:d> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:d> ; <var:c2> := <var:c2> * <var:d> ; <var:j> := <var:c2> ; <var:j> := <var:j> + <var:c1> ; <var:j> := <var:j> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:d> = <var:A> }} <def:poly> {{ <var:j> = <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:A> /\ <var:c2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:A> /\ <var:c2> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:A> /\ <var:c2> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:A> /\ <var:j> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:c0> = <nat:5> /\ <var:j> = <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:j> = <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 