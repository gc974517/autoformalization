\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:7> ; <var:t> := <var:a0> \end{verbatim} Assume it to hold that $ <var:L> = <var:g> $ before executing our list of instructions , it follows that $ <var:t> = <nat:7> $ after list of commands executes . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:g> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:L> = <var:g> \land <var:a0> = <nat:7> \} \\ <var:t> := <var:a0> \\ \{ <var:L> = <var:g> \land <var:t> = <nat:7> \} \end{eqnarray} As a consequence , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:L> = <var:g> }} <var:a0> := <nat:7> ; <var:t> := <var:a0> {{ <var:t> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:t> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 