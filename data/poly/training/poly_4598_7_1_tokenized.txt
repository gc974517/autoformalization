\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:M> ; <var:x2> := <var:x1> * <var:M> ; <var:x3> := <var:x2> * <var:M> ; <var:x0> := <nat:2> ; <var:x3> := <var:x3> * <nat:3> ; <var:u> := <var:x3> <var:u> := <var:u> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:M> = <var:P> $ ahead of interpreting our series of instructions , it holds that we see $ <var:u> = <nat:3> * <var:P> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our series of commands can be given through usual Hoare logic . Moving onward , we have the environment update statement \verb | <var:x1> := <var:M> ; | . This redefines the precondition $ \{ <var:M> = <var:P> \} $ toward the postcondition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \} $ . This is rigorously given with the assignment law of Hoare techniques . Advancing on , we have the variable binding code yielding $ <var:x1> * <var:M> $ to $ <var:x2>$ . This code redefines the condition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \} $ to the postcondition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment law defined by typical Hoare logic . Moving onward , the binding statement defining $ <var:x2> * <var:M> $ as $ <var:x3>$ . This redefines the condition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \} $ as $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x3> = <var:P> ^ <nat:3> \} $ . After , we have the code giving $ <nat:2> $ toward $ <var:x0>$ . This statement moves the condition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x3> = <var:P> ^ <nat:3> \} $ toward $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x3> = <var:P> ^ <nat:3> \land <var:x0> = <nat:2> \} $ . Taking a look at the next piece of code contained in our series of commands , the binding command \verb | <var:x3> := <var:x3> * <nat:3> ; | . This line transfers the precondition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x3> = <var:P> ^ <nat:3> \land <var:x0> = <nat:2> \} $ to the condition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:x0> = <nat:2> \} $ . Shifting focus toward the next line of code in the segment of code , the assignment statement \verb | <var:u> := <var:x3> | . This moves the condition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:x0> = <nat:2> \} $ as the postcondition $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:P> ^ <nat:3> \} $ . Advancing to the next piece of code found in the segment of code , we see the environment update line \verb | <var:u> := <var:u> + <var:x0> | . This code redefines $ \{ <var:M> = <var:P> \land <var:x1> = <var:P> \land <var:x2> = <var:P> ^ <nat:2> \land <var:x0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:P> ^ <nat:3> \} $ to $ \{ <var:M> = <var:P> \land <var:u> = <nat:3> \cdot <var:P> ^ <nat:3> + <nat:2> \} $ . This is shown with the assignment scheme given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:M> ; <var:x2> := <var:x1> * <var:M> ; <var:x3> := <var:x2> * <var:M> ; <var:x0> := <nat:2> ; <var:x3> := <var:x3> * <nat:3> ; <var:u> := <var:x3> <var:u> := <var:u> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:M> = <var:P> }} <def:poly> {{ <var:u> = <nat:3> * <var:P> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:x1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:x1> = <var:P> /\ <var:x2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:x1> = <var:P> /\ <var:x2> = <var:P> ^ <nat:2> /\ <var:x3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:x1> = <var:P> /\ <var:x2> = <var:P> ^ <nat:2> /\ <var:x3> = <var:P> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:x1> = <var:P> /\ <var:x2> = <var:P> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:P> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:x1> = <var:P> /\ <var:x2> = <var:P> ^ <nat:2> /\ <var:x0> = <nat:2> /\ <var:u> = <nat:3> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:u> = <nat:3> * <var:P> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 