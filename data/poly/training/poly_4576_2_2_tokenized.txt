\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:f> = <var:Z> $ before evaluating the list of commands , then $ <var:E> = <nat:4> \cdot <var:Z> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare logic produces : \begin{eqnarray} \{ <var:f> = <var:Z> \} \\ <var:E> := <nat:4> ; \\ \{ <var:f> = <var:Z> \land <var:E> = <nat:4> \} \\ <var:E> := <nat:1> + <var:E> * <var:f> \\ \{ <var:f> = <var:Z> \land <var:E> = <nat:4> \cdot <var:Z> + <nat:1> \} \end{eqnarray} As a result , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:f> = <var:Z> }} <def:poly> {{ <var:E> = <nat:4> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:E> = <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 