\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:D> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:D> ; <var:t2> := <var:t2> * <var:D> ; <var:m> := <var:t2> ; <var:m> := <var:m> + <var:t1> ; <var:m> := <var:m> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow , for all positive integers $ <var:x> $ , $ <var:D> = <var:x> $ ahead of running the set of commands , then we have $ <var:m> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:D> = <var:x> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \} \\ <var:t1> := <nat:4> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \} \\ <var:t1> := <var:t1> * <var:D> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:x> \} \\ <var:t2> := <nat:7> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:x> \land <var:t2> = <nat:7> \} \\ <var:t2> := <var:t2> * <var:D> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:x> \land <var:t2> = <nat:7> \times <var:x> \} \\ <var:t2> := <var:t2> * <var:D> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:x> \land <var:t2> = <nat:7> \times <var:x> ^ <nat:2> \} \\ <var:m> := <var:t2> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:x> \land <var:m> = <nat:7> \times <var:x> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:t1> ; \\ \{ <var:D> = <var:x> \land <var:t0> = <nat:3> \land <var:m> = <nat:7> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> \} \\ <var:m> := <var:m> + <var:t0> \\ \{ <var:D> = <var:x> \land <var:m> = <nat:7> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:3> \} \end{eqnarray} As a consequence , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:D> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:D> ; <var:t2> := <var:t2> * <var:D> ; <var:m> := <var:t2> ; <var:m> := <var:m> + <var:t1> ; <var:m> := <var:m> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:D> = <var:x> }} <def:poly> {{ <var:m> = <nat:7> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:x> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:x> /\ <var:t2> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:x> /\ <var:t2> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:x> /\ <var:m> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:t0> = <nat:3> /\ <var:m> = <nat:7> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:m> = <nat:7> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 