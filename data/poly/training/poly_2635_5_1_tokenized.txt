\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:y> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:2> ; <var:a> := <var:z1> <var:a> := <var:a> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Allowing given any natural numbers $ <var:m> $ $ <var:y> = <var:m> $ before running this code segment it holds that we see $ <var:a> = <nat:2> \cdot <var:m> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:m> \} \\ <var:z1> := <var:y> ; \\ \{ <var:y> = <var:m> \land <var:z1> = <var:m> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:y> = <var:m> \land <var:z1> = <var:m> \land <var:z0> = <nat:1> \} \\ <var:z1> := <var:z1> * <nat:2> ; \\ \{ <var:y> = <var:m> \land <var:z1> = <nat:2> \times <var:m> \land <var:z0> = <nat:1> \} \\ <var:a> := <var:z1> \\ \{ <var:y> = <var:m> \land <var:z0> = <nat:1> \land <var:a> = <nat:2> \times <var:m> \} \\ <var:a> := <var:a> + <var:z0> \\ \{ <var:y> = <var:m> \land <var:a> = <nat:2> \times <var:m> + <nat:1> \} \end{eqnarray} Hence , our list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:y> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:2> ; <var:a> := <var:z1> <var:a> := <var:a> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:a> = <nat:2> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:z1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:z1> = <var:m> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:z1> = <nat:2> * <var:m> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:z0> = <nat:1> /\ <var:a> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:a> = <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 