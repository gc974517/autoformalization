\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> ; <var:k> := <nat:3> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> ; <var:k> := <nat:3> + <var:k> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:D> = <var:y> $ before executing the segment of code it follows that $ <var:k> = <nat:3> \times <var:y> ^ <nat:8> + <nat:1> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:5> + <nat:3> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> $ after code is done . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:D> = <var:y> \} \\ <var:k> := <nat:3> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:1> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> + <nat:1> \} \\ <var:k> := <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + \} \\ <var:k> := <nat:2> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> \} \\ <var:k> := <nat:3> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> \} \\ <var:k> := <nat:2> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> \} \\ <var:k> := <nat:3> + <var:k> * <var:D> \\ \{ <var:D> = <var:y> \land <var:k> = <nat:3> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> \} \end{eqnarray} Hence , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> ; <var:k> := <nat:3> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> ; <var:k> := <nat:3> + <var:k> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <def:poly> {{ <var:k> = <nat:3> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 