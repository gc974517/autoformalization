\begin{document} \begin{theorem} Consider the following set of instructions as \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:g> ; <var:p> := <var:Q1> ; <var:p> := <var:p> + <var:Q0> \end{verbatim} Given it to hold that $ <var:g> = <var:N> $ ( taking integers $ <var:N> $ ) prior to the evaluation of our list of commands it must be that we see $ <var:p> = <nat:1> * <var:N> + <nat:1> $ after code finishes . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be given through the below decorated series of instructions . \begin{eqnarray} \{ <var:g> = <var:N> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:g> = <var:N> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <nat:1> ; \\ \{ <var:g> = <var:N> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <var:g> ; \\ \{ <var:g> = <var:N> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:1> * <var:N> \} \\ <var:p> := <var:Q1> ; \\ \{ <var:g> = <var:N> \land <var:Q0> = <nat:1> \land <var:p> = <nat:1> * <var:N> \} \\ <var:p> := <var:p> + <var:Q0> \\ \{ <var:g> = <var:N> \land <var:p> = <nat:1> * <var:N> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:g> = <var:N> }} <var:Q0> := <nat:1> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:g> ; <var:p> := <var:Q1> ; <var:p> := <var:p> + <var:Q0> {{ <var:p> = <nat:1> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:Q0> = <nat:1> /\ <var:p> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:p> = <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 