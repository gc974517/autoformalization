\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:X> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:2> ; <var:s> := <var:y1> <var:s> := <var:s> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assume that $ <var:X> = <var:a> $ assuming some positive numbers $ <var:a> $ ahead of running this series of instructions , it follows that we have $ <var:s> = <nat:2> \cdot <var:a> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be accomplished using Hoare techniques . Considering the following command in our program , we have the assignment statement \verb | <var:y1> := <var:X> ; | . This statement transfers the precondition $ \{ <var:X> = <var:a> \} $ into $ \{ <var:X> = <var:a> \land <var:y1> = <var:a> \} $ . This is known to be sound using the assignment rule defined in typical Hoare techniques . Looking at the proceeding command contained in our list of commands , we see the variable assignmet line \verb | <var:y0> := <nat:8> ; | . This code takes $ \{ <var:X> = <var:a> \land <var:y1> = <var:a> \} $ to the postcondition $ \{ <var:X> = <var:a> \land <var:y1> = <var:a> \land <var:y0> = <nat:8> \} $ . This is shown using the assignment inference rule of standard Hoare techniques . Stepping through , we have the binding statement \verb | <var:y1> := <var:y1> * <nat:2> ; | . This forwards the precondition $ \{ <var:X> = <var:a> \land <var:y1> = <var:a> \land <var:y0> = <nat:8> \} $ as $ \{ <var:X> = <var:a> \land <var:y1> = <nat:2> \times <var:a> \land <var:y0> = <nat:8> \} $ . This is deduced using the assignment law defined in usual Hoare techniques . Moving forward to the following line of code found in the set of commands , the assignment command \verb | <var:s> := <var:y1> | . This takes the precondition $ \{ <var:X> = <var:a> \land <var:y1> = <nat:2> \times <var:a> \land <var:y0> = <nat:8> \} $ as the postcondition $ \{ <var:X> = <var:a> \land <var:y0> = <nat:8> \land <var:s> = <nat:2> \times <var:a> \} $ . Taking a look at the subsequent line contained in the program , we see the command binding $ <var:s> + <var:y0$ to $ <var:s>$ . This command redefines the precondition $ \{ <var:X> = <var:a> \land <var:y0> = <nat:8> \land <var:s> = <nat:2> \times <var:a> \} $ into $ \{ <var:X> = <var:a> \land <var:s> = <nat:2> \times <var:a> + <nat:8> \} $ . This is known to be sound using the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:X> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:2> ; <var:s> := <var:y1> <var:s> := <var:s> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:X> = <var:a> }} <def:poly> {{ <var:s> = <nat:2> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:y1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:y1> = <var:a> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:y1> = <nat:2> * <var:a> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:y0> = <nat:8> /\ <var:s> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:s> = <nat:2> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 