\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:k> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:8> ; <var:m> := <var:K1> <var:m> := <var:m> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:k> = <var:x> $ prior to the evaluation of the list of instructions it follows that $ <var:m> = <nat:8> \times <var:x> + <nat:3> $ once segment of code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:x> \} \\ <var:K1> := <var:k> ; \\ \{ <var:k> = <var:x> \land <var:K1> = <var:x> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:k> = <var:x> \land <var:K1> = <var:x> \land <var:K0> = <nat:3> \} \\ <var:K1> := <var:K1> * <nat:8> ; \\ \{ <var:k> = <var:x> \land <var:K1> = <nat:8> * <var:x> \land <var:K0> = <nat:3> \} \\ <var:m> := <var:K1> \\ \{ <var:k> = <var:x> \land <var:K0> = <nat:3> \land <var:m> = <nat:8> * <var:x> \} \end{eqnarray} Advancing running the segment of code returns : \begin{eqnarray} <var:m> := <var:m> + <var:K0> \\ \{ <var:k> = <var:x> \land <var:m> = <nat:8> * <var:x> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:k> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:8> ; <var:m> := <var:K1> <var:m> := <var:m> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:k> = <var:x> }} <def:poly> {{ <var:m> = <nat:8> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:K1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:K1> = <var:x> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:K1> = <nat:8> * <var:x> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:K0> = <nat:3> /\ <var:m> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:m> = <nat:8> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 