\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:5> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:p> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:p> = <var:P> $ --- for some positive coefficients $ <var:P> $ --- prior to the execution of our list of instructions , then we see $ <var:z> = <nat:4> * <var:P> + <nat:5> $ after series of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is clear with standard Hoare reasoning . Taking a look at the following command in the series of commands , we see the statement \verb | <var:O0> := <nat:5> ; | . This advances $ \{ <var:p> = <var:P> \} $ to $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \} $ . This is rigorously given by the assignment rule from standard Hoare logic . Moving forward to the next step , we have the variable binding code \verb | <var:O1> := <nat:4> ; | . This takes the condition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \} $ into the postcondition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> \} $ . This is shown to be logically sound through the assignment inference rule defined in typical Hoare logic . Moving on to the upcoming piece of code seen in our segment of code , the variable assignmet line \verb | <var:O1> := <var:O1> * <var:p> ; | . This code forwards the precondition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> \} $ into the condition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> \cdot <var:P> \} $ . Advancing on , we see the variable binding line binding $ <var:O1> $ as $ <var:z>$ . This code takes the precondition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> \cdot <var:P> \} $ to the postcondition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \land <var:z> = <nat:4> \cdot <var:P> \} $ . Advancing on , the assignment code \verb | <var:z> := <var:z> + <var:O0> | . This redefines the condition $ \{ <var:p> = <var:P> \land <var:O0> = <nat:5> \land <var:z> = <nat:4> \cdot <var:P> \} $ into $ \{ <var:p> = <var:P> \land <var:z> = <nat:4> \cdot <var:P> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:5> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:p> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:p> = <var:P> }} <def:poly> {{ <var:z> = <nat:4> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:O0> = <nat:5> /\ <var:z> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:z> = <nat:4> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 