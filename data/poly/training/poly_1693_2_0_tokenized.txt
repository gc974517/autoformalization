\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:1> ; <var:r> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assuming $ <var:e> = <var:m> $ before running our code segment it follows that we have $ <var:r> = <nat:1> $ once list of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for this segment of code can be shown through usual Hoare logic . Jumping to the subsequent piece of code in the segment of code , we see the variable binding code \verb | <var:d0> := <nat:1> ; | . This takes the precondition $ \{ <var:e> = <var:m> \} $ into $ \{ <var:e> = <var:m> \land <var:d0> = <nat:1> \} $ . This is shown using the assignment inference rule obtained from usual Hoare reasoning . Moving on , the variable assignmet code giving $ <var:d0$ to $ <var:r>$ . This line takes $ \{ <var:e> = <var:m> \land <var:d0> = <nat:1> \} $ to $ \{ <var:e> = <var:m> \land <var:r> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:r> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:e> = <var:m> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:m> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:m> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 