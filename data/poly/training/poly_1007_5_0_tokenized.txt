\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:9> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:j> ; <var:V> := <var:Q1> ; <var:V> := <var:V> + <var:Q0> \end{verbatim} Allowing $ <var:j> = <var:p> $ ( given any $ <var:p> \in \mathbb{Z}^+ $ ) ahead of running the set of commands it follows that $ <var:V> = <nat:7> * <var:p> + <nat:9> $ . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:j> = <var:p> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:j> = <var:p> \land <var:Q0> = <nat:9> \} \\ <var:Q1> := <nat:7> ; \\ \{ <var:j> = <var:p> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:7> \} \\ <var:Q1> := <var:Q1> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:7> \cdot <var:p> \} \\ <var:V> := <var:Q1> ; \\ \{ <var:j> = <var:p> \land <var:Q0> = <nat:9> \land <var:V> = <nat:7> \cdot <var:p> \} \\ <var:V> := <var:V> + <var:Q0> \\ \{ <var:j> = <var:p> \land <var:V> = <nat:7> \cdot <var:p> + <nat:9> \} \end{eqnarray} Given the above , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:j> = <var:p> }} <var:Q0> := <nat:9> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:j> ; <var:V> := <var:Q1> ; <var:V> := <var:V> + <var:Q0> {{ <var:V> = <nat:7> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:Q0> = <nat:9> /\ <var:V> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:V> = <nat:7> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 