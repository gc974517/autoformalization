\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:y> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:y> ; <var:X2> := <var:X2> * <var:y> ; <var:t> := <var:X2> ; <var:t> := <var:t> + <var:X1> ; <var:t> := <var:t> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Assume ( given every natural coefficients $ <var:b> $ ) it to hold that $ <var:y> = <var:b> $ ahead of evaluating this segment of code then $ <var:t> = <nat:3> \cdot <var:b> ^ <nat:2> + <nat:8> \cdot <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be demonstrated through typical Hoare logic . Stepping through , \[ \begin{tabular} {rcl} \{ <var:y> = <var:b> \} & <var:X0> := <nat:2> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \} & <var:X1> := <nat:8> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> \} & <var:X1> := <var:X1> * <var:y> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \} & <var:X2> := <nat:3> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:X2> = <nat:3> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:X2> = <nat:3> \} & <var:X2> := <var:X2> * <var:y> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:X2> = <nat:3> * <var:b> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:X2> = <nat:3> * <var:b> \} & <var:X2> := <var:X2> * <var:y> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:X2> = <nat:3> * <var:b> ^ <nat:2> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:X2> = <nat:3> * <var:b> ^ <nat:2> \} & <var:t> := <var:X2> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:t> = <nat:3> * <var:b> ^ <nat:2> \} \\ \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:X1> = <nat:8> * <var:b> \land <var:t> = <nat:3> * <var:b> ^ <nat:2> \} & <var:t> := <var:t> + <var:X1> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \land <var:t> = <nat:3> * <var:b> ^ <nat:2> + <nat:8> * <var:b> \} \end{tabular} Taking a look at the following command in the set of commands , \[ \begin{tabular} {rcl} \{ <var:y> = <var:b> \} & <var:X0> := <nat:2> & \{ <var:y> = <var:b> \land <var:X0> = <nat:2> \} \end{tabular} This is given using the law obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X0> := <nat:2> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:y> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:y> ; <var:X2> := <var:X2> * <var:y> ; <var:t> := <var:X2> ; <var:t> := <var:t> + <var:X1> ; <var:t> := <var:t> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:y> = <var:b> }} <def:poly> {{ <var:t> = <nat:3> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:8> * <var:b> /\ <var:X2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:8> * <var:b> /\ <var:X2> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:8> * <var:b> /\ <var:X2> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:8> * <var:b> /\ <var:t> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:2> /\ <var:t> = <nat:3> * <var:b> ^ <nat:2> + <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:t> = <nat:3> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 