\begin{document} \begin{theorem} We define the following code as follows \begin{verbatim} <var:s0> := <nat:2> ; <var:R> := <var:s0> \end{verbatim} Assuming that $ <var:M> = <var:I> $ prior to evaluating this program then we see $ <var:R> = <nat:2> $ when list of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our code can be accomplished using Hoare techniques . Taking another step toward the following step in the segment of code , the environment update command \verb | <var:s0> := <nat:2> ; | . This takes $ \{ <var:M> = <var:I> \} $ as the condition $ \{ <var:M> = <var:I> \land <var:s0> = <nat:2> \} $ . Paying attention to the proceeding piece of code contained in the set of instructions , we see the statement giving $ <var:s0$ toward $ <var:R>$ . This redefines the condition $ \{ <var:M> = <var:I> \land <var:s0> = <nat:2> \} $ toward $ \{ <var:M> = <var:I> \land <var:R> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:M> = <var:I> }} <var:s0> := <nat:2> ; <var:R> := <var:s0> {{ <var:R> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:R> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 