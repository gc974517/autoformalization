\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:3> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:Y> ; <var:m> := <var:M1> ; <var:m> := <var:m> + <var:M0> \end{verbatim} Assume $ <var:Y> = <var:a> $ prior to running the program it holds that we have $ <var:m> = <nat:7> * <var:a> + <nat:3> $ after series of instructions has exited . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:Y> = <var:a> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:Y> = <var:a> \land <var:M0> = <nat:3> \} \\ <var:M1> := <nat:7> ; \\ \{ <var:Y> = <var:a> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \} \\ <var:M1> := <var:M1> * <var:Y> ; \\ \{ <var:Y> = <var:a> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> * <var:a> \} \\ <var:m> := <var:M1> ; \\ \{ <var:Y> = <var:a> \land <var:M0> = <nat:3> \land <var:m> = <nat:7> * <var:a> \} \\ <var:m> := <var:m> + <var:M0> \\ \{ <var:Y> = <var:a> \land <var:m> = <nat:7> * <var:a> + <nat:3> \} \end{eqnarray} As a result , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Y> = <var:a> }} <var:M0> := <nat:3> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:Y> ; <var:m> := <var:M1> ; <var:m> := <var:m> + <var:M0> {{ <var:m> = <nat:7> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:M0> = <nat:3> /\ <var:m> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:m> = <nat:7> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 