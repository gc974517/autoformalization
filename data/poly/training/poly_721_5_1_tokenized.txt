\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:T> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:4> ; <var:L> := <var:A1> <var:L> := <var:L> + <var:A0> \end{verbatim} Allow $ <var:T> = <var:E> $ letting $ <var:E> \in \mathbb{Z}^+ $ prior to the evaluation of the code it must be that $ <var:L> = <nat:4> \times <var:E> + <nat:8> $ . \end{theorem} \begin{proof} The proof of this set of commands is demonstrated through typical Hoare reasoning . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:E> \} & <var:A1> := <var:T> & \{ <var:T> = <var:E> \land <var:A1> = <var:E> \} \end{tabular} Honing in on the subsequent pieces of code seen in the code , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:E> \} & <var:A1> := <var:T> & \{ <var:T> = <var:E> \land <var:A1> = <var:E> \} \\ \{ <var:T> = <var:E> \land <var:A1> = <var:E> \} & <var:A0> := <nat:8> & \{ <var:T> = <var:E> \land <var:A1> = <var:E> \land <var:A0> = <nat:8> \} \\ \{ <var:T> = <var:E> \land <var:A1> = <var:E> \land <var:A0> = <nat:8> \} & <var:A1> := <var:A1> * <nat:4> & \{ <var:T> = <var:E> \land <var:A1> = <nat:4> \cdot <var:E> \land <var:A0> = <nat:8> \} \end{tabular} Moving forward to the proceeding step contained in the code , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:E> \} & <var:A1> := <var:T> & \{ <var:T> = <var:E> \land <var:A1> = <var:E> \} \end{tabular} This is sound with the variable assignmet scheme defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:T> = <var:E> }} <var:A1> := <var:T> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:4> ; <var:L> := <var:A1> <var:L> := <var:L> + <var:A0> {{ <var:L> = <nat:4> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:A1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:A1> = <var:E> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:A1> = <nat:4> * <var:E> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:A0> = <nat:8> /\ <var:L> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:L> = <nat:4> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 