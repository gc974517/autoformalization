\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:4> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:p> ; <var:y> := <var:h1> ; <var:y> := <var:y> + <var:h0> \end{verbatim} Given $ <var:p> = <var:e> $ before running this set of commands it must be that we see $ <var:y> = <nat:3> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is demonstrated by the below decorated series of commands . \begin{eqnarray} \{ <var:p> = <var:e> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:p> = <var:e> \land <var:h0> = <nat:4> \} \\ <var:h1> := <nat:3> ; \\ \{ <var:p> = <var:e> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \} \\ <var:h1> := <var:h1> * <var:p> ; \\ \{ <var:p> = <var:e> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \times <var:e> \} \\ <var:y> := <var:h1> ; \\ \{ <var:p> = <var:e> \land <var:h0> = <nat:4> \land <var:y> = <nat:3> \times <var:e> \} \\ <var:y> := <var:y> + <var:h0> \\ \{ <var:p> = <var:e> \land <var:y> = <nat:3> \times <var:e> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:p> = <var:e> }} <var:h0> := <nat:4> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:p> ; <var:y> := <var:h1> ; <var:y> := <var:y> + <var:h0> {{ <var:y> = <nat:3> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:e> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:e> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:e> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:e> /\ <var:h0> = <nat:4> /\ <var:y> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:e> /\ <var:y> = <nat:3> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 