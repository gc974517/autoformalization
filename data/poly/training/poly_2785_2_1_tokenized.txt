\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:1> ; <var:p> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:J> = <var:i> $ --- for all positive numbers $ <var:i> $ --- before executing this list of instructions , it follows that we see $ <var:p> = <nat:1> $ after code has executed . \end{theorem} \begin{proof} The argument for our series of commands can be demonstrated using typical Hoare techniques . Shifting focus toward the upcoming line of code found in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:i> \} & <var:b0> := <nat:1> & \{ <var:J> = <var:i> \land <var:b0> = <nat:1> \} \end{tabular} This is given with the assignment law found in standard Hoare logic . Immediately following , \[ \begin{tabular} {rcl} \{ <var:J> = <var:i> \} & <var:b0> := <nat:1> & \{ <var:J> = <var:i> \land <var:b0> = <nat:1> \} \end{tabular} This is rigorously given with the binding rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:p> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:J> = <var:i> }} <def:poly> {{ <var:p> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:i> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:i> /\ <var:p> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 