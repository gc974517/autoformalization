\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:5> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:R> ; <var:P2> := <nat:6> ; <var:P2> := <var:P2> * <var:R> ; <var:P2> := <var:P2> * <var:R> ; <var:r> := <var:P2> ; <var:r> := <var:r> + <var:P1> ; <var:r> := <var:r> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given ( for $ <var:I> $ ) that $ <var:R> = <var:I> $ prior to running the program , then we have $ <var:r> = <nat:6> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:5> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:R> = <var:I> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \} \\ <var:P1> := <nat:9> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:P1> = <nat:9> \} \\ <var:P1> := <var:P1> * <var:R> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:P1> = <nat:9> \times <var:I> \} \\ <var:P2> := <nat:6> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:P1> = <nat:9> \times <var:I> \land <var:P2> = <nat:6> \} \\ <var:P2> := <var:P2> * <var:R> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:P1> = <nat:9> \times <var:I> \land <var:P2> = <nat:6> \times <var:I> \} \\ <var:P2> := <var:P2> * <var:R> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:P1> = <nat:9> \times <var:I> \land <var:P2> = <nat:6> \times <var:I> ^ <nat:2> \} \\ <var:r> := <var:P2> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:P1> = <nat:9> \times <var:I> \land <var:r> = <nat:6> \times <var:I> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:P1> ; \\ \{ <var:R> = <var:I> \land <var:P0> = <nat:5> \land <var:r> = <nat:6> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> \} \\ <var:r> := <var:r> + <var:P0> \\ \{ <var:R> = <var:I> \land <var:r> = <nat:6> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:5> \} \end{eqnarray} As a consequence , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:5> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:R> ; <var:P2> := <nat:6> ; <var:P2> := <var:P2> * <var:R> ; <var:P2> := <var:P2> * <var:R> ; <var:r> := <var:P2> ; <var:r> := <var:r> + <var:P1> ; <var:r> := <var:r> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:R> = <var:I> }} <def:poly> {{ <var:r> = <nat:6> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:9> * <var:I> /\ <var:r> = <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:P0> = <nat:5> /\ <var:r> = <nat:6> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:r> = <nat:6> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 