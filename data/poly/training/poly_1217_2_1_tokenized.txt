\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:4> ; <var:O> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assume that $ <var:R> = <var:o> $ for every positive coefficients $ <var:o> $ before interpreting our series of commands , then $ <var:O> = <nat:4> $ after list of instructions has finished . \end{theorem} \begin{proof} The method of proof for this code segment is done with typical Hoare reasoning . Honing in on the upcoming statement in the set of commands , the statement giving $ <nat:4> $ toward $ <var:D0>$ . This takes the condition $ \{ <var:R> = <var:o> \} $ toward $ \{ <var:R> = <var:o> \land <var:D0> = <nat:4> \} $ . This is shown using the assignment inference rule obtained from Hoare reasoning . Next , we have the statement defining $ <var:D0$ as $ <var:O>$ . This line redefines the condition $ \{ <var:R> = <var:o> \land <var:D0> = <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:o> \land <var:O> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:4> ; <var:O> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:R> = <var:o> }} <def:poly> {{ <var:O> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:O> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 