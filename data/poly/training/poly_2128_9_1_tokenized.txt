\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:L> ; <var:p2> := <var:p1> * <var:L> ; <var:p3> := <var:p2> * <var:L> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:6> ; <var:p3> := <var:p3> * <nat:1> ; <var:U> := <var:p3> <var:U> := <var:U> + <var:p1> <var:U> := <var:U> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given every natural numbers $ <var:C> $ ) $ <var:L> = <var:C> $ ahead of the execution of our code segment it must be that we have $ <var:U> = <nat:1> \cdot <var:C> ^ <nat:3> + <nat:6> \cdot <var:C> + <nat:8> $ after program has terminated . \end{theorem} \begin{proof} The method of proof for our list of instructions is shown with usual Hoare techniques . Stepping through , we have \begin{verbatim} { <var:L> = <var:C> } <var:p1> := <var:L> { <var:L> = <var:C> \land <var:p1> = <var:C> } { <var:L> = <var:C> \land <var:p1> = <var:C> } <var:p2> := <var:p1> * <var:L> { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> } { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> } <var:p3> := <var:p2> * <var:L> { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> } { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> } <var:p0> := <nat:8> { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:8> } { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:8> } <var:p1> := <var:p1> * <nat:6> { <var:L> = <var:C> \land <var:p1> = <nat:6> * <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:8> } { <var:L> = <var:C> \land <var:p1> = <nat:6> * <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:8> } <var:p3> := <var:p3> * <nat:1> { <var:L> = <var:C> \land <var:p1> = <nat:6> * <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <nat:1> * <var:C> ^ <nat:3> \land <var:p0> = <nat:8> } \end{verbatim} This is known to be sound through the variable binding law in usual Hoare techniques . Honing in on the following bits of codeseen in our segment of code , \begin{verbatim} { <var:L> = <var:C> } <var:p1> := <var:L> { <var:L> = <var:C> \land <var:p1> = <var:C> } { <var:L> = <var:C> \land <var:p1> = <var:C> } <var:p2> := <var:p1> * <var:L> { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> } { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> } <var:p3> := <var:p2> * <var:L> { <var:L> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:L> ; <var:p2> := <var:p1> * <var:L> ; <var:p3> := <var:p2> * <var:L> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:6> ; <var:p3> := <var:p3> * <nat:1> ; <var:U> := <var:p3> <var:U> := <var:U> + <var:p1> <var:U> := <var:U> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:L> = <var:C> }} <def:poly> {{ <var:U> = <nat:1> * <var:C> ^ <nat:3> + <nat:6> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <var:C> /\ <var:p2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <nat:6> * <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <nat:6> * <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <nat:1> * <var:C> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p1> = <nat:6> * <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p0> = <nat:8> /\ <var:U> = <nat:1> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:p0> = <nat:8> /\ <var:U> = <nat:1> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:U> = <nat:1> * <var:C> ^ <nat:3> + <nat:6> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 