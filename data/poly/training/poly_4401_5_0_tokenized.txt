\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:4> ; <var:D1> := <nat:5> ; <var:D1> := <var:D1> * <var:O> ; <var:q> := <var:D1> ; <var:q> := <var:q> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allowing that we have $ <var:O> = <var:I> $ prior to running this list of commands , it holds that we see $ <var:q> = <nat:5> \times <var:I> + <nat:4> $ after list of commands is done executing . \end{theorem} \begin{proof} The flow of logic for the series of instructions is evident by this decorated series of instructions . \begin{eqnarray} \{ <var:O> = <var:I> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:O> = <var:I> \land <var:D0> = <nat:4> \} \\ <var:D1> := <nat:5> ; \\ \{ <var:O> = <var:I> \land <var:D0> = <nat:4> \land <var:D1> = <nat:5> \} \\ <var:D1> := <var:D1> * <var:O> ; \\ \{ <var:O> = <var:I> \land <var:D0> = <nat:4> \land <var:D1> = <nat:5> * <var:I> \} \\ <var:q> := <var:D1> ; \\ \{ <var:O> = <var:I> \land <var:D0> = <nat:4> \land <var:q> = <nat:5> * <var:I> \} \\ <var:q> := <var:q> + <var:D0> \\ \{ <var:O> = <var:I> \land <var:q> = <nat:5> * <var:I> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:4> ; <var:D1> := <nat:5> ; <var:D1> := <var:D1> * <var:O> ; <var:q> := <var:D1> ; <var:q> := <var:q> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:O> = <var:I> }} <def:poly> {{ <var:q> = <nat:5> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:D0> = <nat:4> /\ <var:q> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:q> = <nat:5> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 