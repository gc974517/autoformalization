\begin{document} \begin{theorem} Let the following series of commands : \begin{verbatim} <var:L0> := <nat:7> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:p> ; <var:m> := <var:L1> ; <var:m> := <var:m> + <var:L0> \end{verbatim} Allowing , given all whole numbers $ <var:y> $ , it to be that $ <var:p> = <var:y> $ prior to evaluating our code it follows that we have $ <var:m> = <nat:9> \cdot <var:y> + <nat:7> $ once series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:y> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:p> = <var:y> \land <var:L0> = <nat:7> \} \\ <var:L1> := <nat:9> ; \\ \{ <var:p> = <var:y> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \} \\ <var:L1> := <var:L1> * <var:p> ; \\ \{ <var:p> = <var:y> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> * <var:y> \} \\ <var:m> := <var:L1> ; \\ \{ <var:p> = <var:y> \land <var:L0> = <nat:7> \land <var:m> = <nat:9> * <var:y> \} \\ <var:m> := <var:m> + <var:L0> \\ \{ <var:p> = <var:y> \land <var:m> = <nat:9> * <var:y> + <nat:7> \} \end{eqnarray} Applying typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:p> = <var:y> }} <var:L0> := <nat:7> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:p> ; <var:m> := <var:L1> ; <var:m> := <var:m> + <var:L0> {{ <var:m> = <nat:9> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:L0> = <nat:7> /\ <var:m> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:m> = <nat:9> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 