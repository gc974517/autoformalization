\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:k0> := <nat:1> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:q> ; <var:k2> := <nat:2> ; <var:k2> := <var:k2> * <var:q> ; <var:k2> := <var:k2> * <var:q> ; <var:O> := <var:k2> ; <var:O> := <var:O> + <var:k1> ; <var:O> := <var:O> + <var:k0> \end{verbatim} Allow it to be that $ <var:q> = <var:g> $ before the evaluation of our list of commands then $ <var:O> = <nat:2> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:1> $ once program executes . \end{theorem} \begin{proof} Arguing the correctness of this program is clear by typical Hoare logic . Advancing to the next step , the code \verb | <var:k0> := <nat:1> ; | . This command redefines $ \{ <var:q> = <var:g> \} $ to the postcondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \} $ . This is guaranteed through the assignment law defined by typical Hoare reasoning . Immediately after , the environment update command yielding $ <nat:5> $ as $ <var:k1>$ . This redefines $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \} $ into the postcondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \} $ . Moving on to the next step , we see the binding command letting $ <var:k1> * <var:q> $ to $ <var:k1>$ . This line moves the precondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \} $ toward the postcondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \} $ . This is rigorously given through the assignment scheme obtained from Hoare reasoning . Shifting focus toward the following line of code seen in our segment of code , the environment update code assigning $ <nat:2> $ toward $ <var:k2>$ . This code takes the precondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \} $ to the postcondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:k2> = <nat:2> \} $ . Moving on to the upcoming bit of code contained in our segment of code , we have the line \verb | <var:k2> := <var:k2> * <var:q> ; | . This code forwards the condition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:k2> = <nat:2> \} $ toward $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:k2> = <nat:2> \cdot <var:g> \} $ . This is shown to be logically sound through the assignment law defined by typical Hoare logic . Advancing on , we see the variable assignmet command \verb | <var:k2> := <var:k2> * <var:q> ; | . This statement advances $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:k2> = <nat:2> \cdot <var:g> \} $ to $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:k2> = <nat:2> \cdot <var:g> ^ <nat:2> \} $ . Moving forward , we have the command \verb | <var:O> := <var:k2> ; | . This command advances the precondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:k2> = <nat:2> \cdot <var:g> ^ <nat:2> \} $ as $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:O> = <nat:2> \cdot <var:g> ^ <nat:2> \} $ . Keeping momentum , we see the binding line \verb | <var:O> := <var:O> + <var:k1> ; | . This code redefines $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:k1> = <nat:5> \cdot <var:g> \land <var:O> = <nat:2> \cdot <var:g> ^ <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:O> = <nat:2> \cdot <var:g> ^ <nat:2> + <nat:5> \cdot <var:g> \} $ . Moving onward , we have the binding line letting $ <var:O> + <var:k0$ toward $ <var:O>$ . This advances the precondition $ \{ <var:q> = <var:g> \land <var:k0> = <nat:1> \land <var:O> = <nat:2> \cdot <var:g> ^ <nat:2> + <nat:5> \cdot <var:g> \} $ into $ \{ <var:q> = <var:g> \land <var:O> = <nat:2> \cdot <var:g> ^ <nat:2> + <nat:5> \cdot <var:g> + <nat:1> \} $ . This is given through the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:q> = <var:g> }} <var:k0> := <nat:1> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:q> ; <var:k2> := <nat:2> ; <var:k2> := <var:k2> * <var:q> ; <var:k2> := <var:k2> * <var:q> ; <var:O> := <var:k2> ; <var:O> := <var:O> + <var:k1> ; <var:O> := <var:O> + <var:k0> {{ <var:O> = <nat:2> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:5> * <var:g> /\ <var:k2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:5> * <var:g> /\ <var:k2> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:5> * <var:g> /\ <var:k2> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:5> * <var:g> /\ <var:O> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:k0> = <nat:1> /\ <var:O> = <nat:2> * <var:g> ^ <nat:2> + <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:O> = <nat:2> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 