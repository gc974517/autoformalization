\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:1> ; <var:I> := <var:v0> \end{verbatim} Given that we have $ <var:f> = <var:Z> $ prior to running the list of instructions , it must be that we have $ <var:I> = <nat:1> $ when program exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:Z> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:f> = <var:Z> \land <var:v0> = <nat:1> \} \\ <var:I> := <var:v0> \\ \{ <var:f> = <var:Z> \land <var:I> = <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:f> = <var:Z> }} <var:v0> := <nat:1> ; <var:I> := <var:v0> {{ <var:I> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:I> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 