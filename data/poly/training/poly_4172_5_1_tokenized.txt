\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:p> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:9> ; <var:o> := <var:t1> <var:o> := <var:o> + <var:t0> \end{verbatim} Assuming $ <var:p> = <var:P> $ prior to the evaluation of the series of commands it holds that we have $ <var:o> = <nat:9> \times <var:P> + <nat:2> $ once program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:P> \} \\ <var:t1> := <var:p> ; \\ \{ <var:p> = <var:P> \land <var:t1> = <var:P> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:p> = <var:P> \land <var:t1> = <var:P> \land <var:t0> = <nat:2> \} \\ <var:t1> := <var:t1> * <nat:9> ; \\ \{ <var:p> = <var:P> \land <var:t1> = <nat:9> \times <var:P> \land <var:t0> = <nat:2> \} \\ <var:o> := <var:t1> \\ \{ <var:p> = <var:P> \land <var:t0> = <nat:2> \land <var:o> = <nat:9> \times <var:P> \} \\ <var:o> := <var:o> + <var:t0> \\ \{ <var:p> = <var:P> \land <var:o> = <nat:9> \times <var:P> + <nat:2> \} \end{eqnarray} Applying typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:p> = <var:P> }} <var:t1> := <var:p> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:9> ; <var:o> := <var:t1> <var:o> := <var:o> + <var:t0> {{ <var:o> = <nat:9> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:t1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:t1> = <var:P> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:t1> = <nat:9> * <var:P> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:t0> = <nat:2> /\ <var:o> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:o> = <nat:9> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 