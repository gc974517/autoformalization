\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:b> ; <var:k> := <var:C1> ; <var:k> := <var:k> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:b> = <var:q> $ before interpreting our code segment , then we see $ <var:k> = <nat:4> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:q> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:b> = <var:q> \land <var:C0> = <nat:2> \} \\ <var:C1> := <nat:4> ; \\ \{ <var:b> = <var:q> \land <var:C0> = <nat:2> \land <var:C1> = <nat:4> \} \\ <var:C1> := <var:C1> * <var:b> ; \\ \{ <var:b> = <var:q> \land <var:C0> = <nat:2> \land <var:C1> = <nat:4> \cdot <var:q> \} \\ <var:k> := <var:C1> ; \\ \{ <var:b> = <var:q> \land <var:C0> = <nat:2> \land <var:k> = <nat:4> \cdot <var:q> \} \\ <var:k> := <var:k> + <var:C0> \\ \{ <var:b> = <var:q> \land <var:k> = <nat:4> \cdot <var:q> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:b> ; <var:k> := <var:C1> ; <var:k> := <var:k> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:b> = <var:q> }} <def:poly> {{ <var:k> = <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:C0> = <nat:2> /\ <var:k> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:k> = <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 