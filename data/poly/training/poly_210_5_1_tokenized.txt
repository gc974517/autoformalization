\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:C> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:9> ; <var:w> := <var:M1> <var:w> := <var:w> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allowing that $ <var:C> = <var:E> $ taking whole numbers $ <var:E> $ prior to interpreting the code it holds that $ <var:w> = <nat:9> * <var:E> + <nat:8> $ . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:C> = <var:E> \} \\ <var:M1> := <var:C> ; \\ \{ <var:C> = <var:E> \land <var:M1> = <var:E> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:C> = <var:E> \land <var:M1> = <var:E> \land <var:M0> = <nat:8> \} \\ <var:M1> := <var:M1> * <nat:9> ; \\ \{ <var:C> = <var:E> \land <var:M1> = <nat:9> \times <var:E> \land <var:M0> = <nat:8> \} \\ <var:w> := <var:M1> \\ \{ <var:C> = <var:E> \land <var:M0> = <nat:8> \land <var:w> = <nat:9> \times <var:E> \} \\ <var:w> := <var:w> + <var:M0> \\ \{ <var:C> = <var:E> \land <var:w> = <nat:9> \times <var:E> + <nat:8> \} \end{eqnarray} Hence , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:C> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:9> ; <var:w> := <var:M1> <var:w> := <var:w> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:C> = <var:E> }} <def:poly> {{ <var:w> = <nat:9> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:M1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:M1> = <var:E> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:M1> = <nat:9> * <var:E> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:M0> = <nat:8> /\ <var:w> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:w> = <nat:9> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 