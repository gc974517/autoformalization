\begin{document} \begin{theorem} Consider the following segment of code such that \begin{verbatim} <var:D0> := <nat:4> ; <var:l> := <var:D0> \end{verbatim} Allowing that we have $ <var:K> = <var:m> $ ( for $ <var:m> $ ) prior to interpreting our set of instructions , it must be that we have $ <var:l> = <nat:4> $ when series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:m> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:K> = <var:m> \land <var:D0> = <nat:4> \} \\ <var:l> := <var:D0> \\ \{ <var:K> = <var:m> \land <var:l> = <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:K> = <var:m> }} <var:D0> := <nat:4> ; <var:l> := <var:D0> {{ <var:l> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:l> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 