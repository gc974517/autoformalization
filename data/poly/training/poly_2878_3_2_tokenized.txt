\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:l> := <nat:1> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:4> + <var:l> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:g> = <var:E> $ ahead of the evaluation of the series of commands , it holds that $ <var:l> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> $ when set of commands is done . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is clear with the below decorated code segment . \begin{eqnarray} \{ <var:g> = <var:E> \} \\ <var:l> := <nat:1> ; \\ \{ <var:g> = <var:E> \land <var:l> = <nat:1> \} \\ <var:l> := <nat:1> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:l> = <nat:1> \cdot <var:E> + <nat:1> \} \\ <var:l> := <nat:4> + <var:l> * <var:g> \\ \{ <var:g> = <var:E> \land <var:l> = <nat:1> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:1> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:4> + <var:l> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:g> = <var:E> }} <def:poly> {{ <var:l> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:l> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:l> = <nat:1> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:l> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 