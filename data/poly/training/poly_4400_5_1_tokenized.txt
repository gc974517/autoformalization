\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:Z> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:2> ; <var:y> := <var:t1> <var:y> := <var:y> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given all positive integers $ <var:M> $ --- it to be that $ <var:Z> = <var:M> $ before interpreting the list of instructions then we have $ <var:y> = <nat:2> * <var:M> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be accomplished with Hoare logic . Moving on to the next step , the variable update line defining $ <var:Z> $ as $ <var:t1>$ . This forwards the condition $ \{ <var:Z> = <var:M> \} $ as the condition $ \{ <var:Z> = <var:M> \land <var:t1> = <var:M> \} $ . This is ensured by the assignment inference rule in Hoare reasoning . Honing in on the upcoming step in our code segment , the line \verb | <var:t0> := <nat:3> ; | . This line advances the condition $ \{ <var:Z> = <var:M> \land <var:t1> = <var:M> \} $ into the condition $ \{ <var:Z> = <var:M> \land <var:t1> = <var:M> \land <var:t0> = <nat:3> \} $ . This is shown by the assignment inference rule given in Hoare reasoning . Moving onward , we have the assignment command letting $ <var:t1> * <nat:2> $ toward $ <var:t1>$ . This line takes the condition $ \{ <var:Z> = <var:M> \land <var:t1> = <var:M> \land <var:t0> = <nat:3> \} $ into the condition $ \{ <var:Z> = <var:M> \land <var:t1> = <nat:2> \cdot <var:M> \land <var:t0> = <nat:3> \} $ . This is ensured through the assignment scheme obtained from Hoare techniques . Moving onward , we see the assignment command \verb | <var:y> := <var:t1> | . This redefines the precondition $ \{ <var:Z> = <var:M> \land <var:t1> = <nat:2> \cdot <var:M> \land <var:t0> = <nat:3> \} $ as the postcondition $ \{ <var:Z> = <var:M> \land <var:t0> = <nat:3> \land <var:y> = <nat:2> \cdot <var:M> \} $ . Moving forward , the variable assignmet line giving $ <var:y> + <var:t0$ toward $ <var:y>$ . This line transfers $ \{ <var:Z> = <var:M> \land <var:t0> = <nat:3> \land <var:y> = <nat:2> \cdot <var:M> \} $ to the condition $ \{ <var:Z> = <var:M> \land <var:y> = <nat:2> \cdot <var:M> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:Z> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:2> ; <var:y> := <var:t1> <var:y> := <var:y> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Z> = <var:M> }} <def:poly> {{ <var:y> = <nat:2> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:t1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:t1> = <var:M> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:t0> = <nat:3> /\ <var:y> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:y> = <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 