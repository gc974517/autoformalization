\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:t0> := <nat:9> ; <var:e> := <var:t0> \end{verbatim} Assuming it to hold that $ <var:X> = <var:O> $ ( given any whole numbers $ <var:O> $ ) before the execution of our list of commands , then we see $ <var:e> = <nat:9> $ after list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:X> = <var:O> \land <var:t0> = <nat:9> \} \\ <var:e> := <var:t0> \\ \{ <var:X> = <var:O> \land <var:e> = <nat:9> \} \end{eqnarray} The application of typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <var:t0> := <nat:9> ; <var:e> := <var:t0> {{ <var:e> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:e> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 