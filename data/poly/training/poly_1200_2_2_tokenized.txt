\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} : \begin{verbatim} <var:x> := <nat:2> ; <var:x> := <nat:2> + <var:x> * <var:L> \end{verbatim} Given $ <var:L> = <var:o> $ prior to executing the set of instructions , it follows that we see $ <var:x> = <nat:2> * <var:o> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our program can be accomplished through standard Hoare techniques . Going forward , we see the environment update code \verb | <var:x> := <nat:2> ; | . This moves the precondition $ \{ <var:L> = <var:o> \} $ as the postcondition $ \{ <var:L> = <var:o> \land <var:x> = <nat:2> \} $ . Moving on to the proceeding piece of code found in the series of commands , we have the binding code \verb | <var:x> := <nat:2> + <var:x> * <var:L> | . This advances $ \{ <var:L> = <var:o> \land <var:x> = <nat:2> \} $ toward $ \{ <var:L> = <var:o> \land <var:x> = <nat:2> \times <var:o> + <nat:2> \} $ . This is shown to be logically sound with the assignment rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:L> = <var:o> }} <var:x> := <nat:2> ; <var:x> := <nat:2> + <var:x> * <var:L> {{ <var:x> = <nat:2> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:x> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:x> = <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 