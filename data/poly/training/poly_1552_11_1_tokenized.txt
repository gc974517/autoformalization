\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:I1> := <var:C> ; <var:I2> := <var:I1> * <var:C> ; <var:I3> := <var:I2> * <var:C> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:5> ; <var:I3> := <var:I3> * <nat:5> ; <var:Y> := <var:I3> <var:Y> := <var:Y> + <var:I2> <var:Y> := <var:Y> + <var:I1> <var:Y> := <var:Y> + <var:I0> \end{verbatim} Assuming , for some positive integers $ <var:T> $ , it to be that $ <var:C> = <var:T> $ prior to running this program , it must be that we have $ <var:Y> = <nat:5> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> $ when series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:T> \} \\ <var:I1> := <var:C> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <var:T> \} \\ <var:I2> := <var:I1> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <var:T> \land <var:I2> = <var:T> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <var:T> \land <var:I2> = <var:T> ^ <nat:2> \land <var:I3> = <var:T> ^ <nat:3> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <var:T> \land <var:I2> = <var:T> ^ <nat:2> \land <var:I3> = <var:T> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:I1> := <var:I1> * <nat:4> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <nat:4> \times <var:T> \land <var:I2> = <var:T> ^ <nat:2> \land <var:I3> = <var:T> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:I2> := <var:I2> * <nat:5> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <nat:4> \times <var:T> \land <var:I2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:I3> = <var:T> ^ <nat:3> \land <var:I0> = <nat:3> \} \end{eqnarray} Allowing evaluating this code results in : \begin{eqnarray} <var:I3> := <var:I3> * <nat:5> ; \\ \{ <var:C> = <var:T> \land <var:I1> = <nat:4> \times <var:T> \land <var:I2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:T> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:Y> := <var:I3> \\ \{ <var:C> = <var:T> \land <var:I1> = <nat:4> \times <var:T> \land <var:I2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:I0> = <nat:3> \land <var:Y> = <nat:5> \times <var:T> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:I2> \\ \{ <var:C> = <var:T> \land <var:I1> = <nat:4> \times <var:T> \land <var:I0> = <nat:3> \land <var:Y> = <nat:5> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:I1> \\ \{ <var:C> = <var:T> \land <var:I0> = <nat:3> \land <var:Y> = <nat:5> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> \} \\ <var:Y> := <var:Y> + <var:I0> \\ \{ <var:C> = <var:T> \land <var:Y> = <nat:5> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:3> \} \end{eqnarray} Applying usual Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <var:I1> := <var:C> ; <var:I2> := <var:I1> * <var:C> ; <var:I3> := <var:I2> * <var:C> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:5> ; <var:I3> := <var:I3> * <nat:5> ; <var:Y> := <var:I3> <var:Y> := <var:Y> + <var:I2> <var:Y> := <var:Y> + <var:I1> <var:Y> := <var:Y> + <var:I0> {{ <var:Y> = <nat:5> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <var:T> /\ <var:I2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <var:T> /\ <var:I2> = <var:T> ^ <nat:2> /\ <var:I3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <var:T> /\ <var:I2> = <var:T> ^ <nat:2> /\ <var:I3> = <var:T> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <nat:4> * <var:T> /\ <var:I2> = <var:T> ^ <nat:2> /\ <var:I3> = <var:T> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <nat:4> * <var:T> /\ <var:I2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:I3> = <var:T> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <nat:4> * <var:T> /\ <var:I2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:T> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <nat:4> * <var:T> /\ <var:I2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:I0> = <nat:3> /\ <var:Y> = <nat:5> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I1> = <nat:4> * <var:T> /\ <var:I0> = <nat:3> /\ <var:Y> = <nat:5> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:I0> = <nat:3> /\ <var:Y> = <nat:5> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:Y> = <nat:5> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 