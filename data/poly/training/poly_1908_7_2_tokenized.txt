\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:4> + <var:i> * <var:D> ; <var:i> := <nat:1> + <var:i> * <var:D> ; <var:i> := <var:i> * <var:D> ; <var:i> := <nat:4> + <var:i> * <var:D> ; <var:i> := <var:i> * <var:D> ; <var:i> := <nat:3> + <var:i> * <var:D> \end{verbatim} Allow ( for every $ <var:w> \in \mathbb{N} $ ) it to hold that $ <var:D> = <var:w> $ ahead of evaluating our set of commands , then we have $ <var:i> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} See that the following decorated code segment . \begin{eqnarray} \{ <var:D> = <var:w> \} \\ <var:i> := <nat:2> ; \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \} \\ <var:i> := <nat:4> + <var:i> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \cdot <var:w> + <nat:4> \} \\ <var:i> := <nat:1> + <var:i> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:1> \} \\ <var:i> := <var:i> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + \} \\ <var:i> := <nat:4> + <var:i> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:4> \} \\ <var:i> := <var:i> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> + \} \\ <var:i> := <nat:3> + <var:i> * <var:D> \\ \{ <var:D> = <var:w> \land <var:i> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:D> = <var:w> }} <var:i> := <nat:2> ; <var:i> := <nat:4> + <var:i> * <var:D> ; <var:i> := <nat:1> + <var:i> * <var:D> ; <var:i> := <var:i> * <var:D> ; <var:i> := <nat:4> + <var:i> * <var:D> ; <var:i> := <var:i> * <var:D> ; <var:i> := <nat:3> + <var:i> * <var:D> {{ <var:i> = <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:i> = <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 