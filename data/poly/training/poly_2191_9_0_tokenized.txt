\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:8> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:B> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:B> ; <var:s2> := <var:s2> * <var:B> ; <var:Q> := <var:s2> ; <var:Q> := <var:Q> + <var:s1> ; <var:Q> := <var:Q> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Assuming $ <var:B> = <var:H> $ ahead of the execution of this list of commands , it holds that we have $ <var:Q> = <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be done using typical Hoare reasoning . Honing in on the subsequent bit of code in our list of commands , the variable binding code \verb | <var:s0> := <nat:8> ; | . This takes $ \{ <var:B> = <var:H> \} $ as the condition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \} $ . After , we have the variable binding code \verb | <var:s1> := <nat:1> ; | . This command moves the precondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \} $ to $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \} $ . Taking another step toward the next piece of code in the set of instructions , we have the variable assignmet code \verb | <var:s1> := <var:s1> * <var:B> ; | . This line moves the precondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \} $ as the postcondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \} $ . This is deduced through the assignment scheme given by usual Hoare techniques . Advancing , the environment update command giving $ <nat:7> $ toward $ <var:s2>$ . This advances the condition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \} $ to the condition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:s2> = <nat:7> \} $ . This is shown through the assignment rule defined in usual Hoare reasoning . Looking at the upcoming step in the program , the variable update code \verb | <var:s2> := <var:s2> * <var:B> ; | . This moves the precondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:s2> = <nat:7> \} $ toward $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:s2> = <nat:7> \cdot <var:H> \} $ . Moving on to the proceeding statement contained in our code , we have the environment update code binding $ <var:s2> * <var:B> $ toward $ <var:s2>$ . This line advances the precondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:s2> = <nat:7> \cdot <var:H> \} $ toward the condition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:s2> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ . This is ensured through the assignment rule defined in Hoare logic . Paying attention to the next line seen in our series of instructions , we have the binding command letting $ <var:s2> $ into $ <var:Q>$ . This forwards the precondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:s2> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ toward the condition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:Q> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ . This is deduced with the assignment law in typical Hoare reasoning . Observing the proceeding line of code in the series of instructions , we see the binding command letting $ <var:Q> + <var:s1> $ as $ <var:Q>$ . This code moves $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:s1> = <nat:1> \cdot <var:H> \land <var:Q> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ into the condition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:Q> = <nat:7> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> \} $ . This is rigorously given using the assignment law obtained from Hoare reasoning . Immediately after , the variable assignmet command \verb | <var:Q> := <var:Q> + <var:s0> | . This code takes the precondition $ \{ <var:B> = <var:H> \land <var:s0> = <nat:8> \land <var:Q> = <nat:7> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> \} $ into $ \{ <var:B> = <var:H> \land <var:Q> = <nat:7> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:8> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:B> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:B> ; <var:s2> := <var:s2> * <var:B> ; <var:Q> := <var:s2> ; <var:Q> := <var:Q> + <var:s1> ; <var:Q> := <var:Q> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:B> = <var:H> }} <def:poly> {{ <var:Q> = <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:1> * <var:H> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:s0> = <nat:8> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 