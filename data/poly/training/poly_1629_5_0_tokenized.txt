\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:9> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:R> ; <var:P> := <var:H1> ; <var:P> := <var:P> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:R> = <var:J> $ given positive numbers $ <var:J> $ ahead of evaluating the list of commands it holds that $ <var:P> = <nat:6> \times <var:J> + <nat:9> $ when program finishes . \end{theorem} \begin{proof} The method of proof for this set of commands is given using Hoare logic . Advancing to the next step seen in our list of instructions , we have the variable assignmet statement yielding $ <nat:9> $ to $ <var:H0>$ . This line redefines $ \{ <var:R> = <var:J> \} $ toward the postcondition $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \} $ . Immediately after , we have the variable binding line \verb | <var:H1> := <nat:6> ; | . This command transfers $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \} $ into the postcondition $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \land <var:H1> = <nat:6> \} $ . This is rigorously given by the assignment scheme in typical Hoare logic . Moving forward to the upcoming statement in our program , we see the assignment code yielding $ <var:H1> * <var:R> $ to $ <var:H1>$ . This moves the condition $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \land <var:H1> = <nat:6> \} $ to the condition $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \land <var:H1> = <nat:6> \times <var:J> \} $ . Moving onward , the variable update code \verb | <var:P> := <var:H1> ; | . This takes the condition $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \land <var:H1> = <nat:6> \times <var:J> \} $ to $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \land <var:P> = <nat:6> \times <var:J> \} $ . Going to the next step , we see the variable assignmet statement binding $ <var:P> + <var:H0$ as $ <var:P>$ . This redefines the condition $ \{ <var:R> = <var:J> \land <var:H0> = <nat:9> \land <var:P> = <nat:6> \times <var:J> \} $ toward the condition $ \{ <var:R> = <var:J> \land <var:P> = <nat:6> \times <var:J> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:R> ; <var:P> := <var:H1> ; <var:P> := <var:P> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:R> = <var:J> }} <def:poly> {{ <var:P> = <nat:6> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:H0> = <nat:9> /\ <var:P> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:P> = <nat:6> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 