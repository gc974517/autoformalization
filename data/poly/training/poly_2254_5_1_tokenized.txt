\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:k> ; <var:t0> := <nat:5> ; <var:t1> := <var:t1> * <nat:1> ; <var:y> := <var:t1> <var:y> := <var:y> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Assuming $ <var:k> = <var:J> $ prior to the execution of this segment of code it holds that $ <var:y> = <nat:1> * <var:J> + <nat:5> $ when segment of code has executed . \end{theorem} \begin{proof} The proof of our list of commands can be demonstrated through usual Hoare reasoning . Paying attention to the next piece of code contained in the program , we see the command \verb | <var:t1> := <var:k> ; | . This command takes the precondition $ \{ <var:k> = <var:J> \} $ toward the condition $ \{ <var:k> = <var:J> \land <var:t1> = <var:J> \} $ . Immediately following , we have the assignment statement \verb | <var:t0> := <nat:5> ; | . This redefines the precondition $ \{ <var:k> = <var:J> \land <var:t1> = <var:J> \} $ into the condition $ \{ <var:k> = <var:J> \land <var:t1> = <var:J> \land <var:t0> = <nat:5> \} $ . This is deduced using the assignment rule of standard Hoare reasoning . After , the code binding $ <var:t1> * <nat:1> $ as $ <var:t1>$ . This command moves the condition $ \{ <var:k> = <var:J> \land <var:t1> = <var:J> \land <var:t0> = <nat:5> \} $ toward the postcondition $ \{ <var:k> = <var:J> \land <var:t1> = <nat:1> * <var:J> \land <var:t0> = <nat:5> \} $ . This is shown to be logically sound through the assignment inference rule found in typical Hoare logic . Advancing to the proceeding piece of code contained in our set of instructions , we see the code defining $ <var:t1$ toward $ <var:y>$ . This line transfers $ \{ <var:k> = <var:J> \land <var:t1> = <nat:1> * <var:J> \land <var:t0> = <nat:5> \} $ toward the condition $ \{ <var:k> = <var:J> \land <var:t0> = <nat:5> \land <var:y> = <nat:1> * <var:J> \} $ . Moving on to the next step , the environment update line defining $ <var:y> + <var:t0$ as $ <var:y>$ . This moves the precondition $ \{ <var:k> = <var:J> \land <var:t0> = <nat:5> \land <var:y> = <nat:1> * <var:J> \} $ to the condition $ \{ <var:k> = <var:J> \land <var:y> = <nat:1> * <var:J> + <nat:5> \} $ . This is ensured through the assignment scheme found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:k> ; <var:t0> := <nat:5> ; <var:t1> := <var:t1> * <nat:1> ; <var:y> := <var:t1> <var:y> := <var:y> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:k> = <var:J> }} <def:poly> {{ <var:y> = <nat:1> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:t1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:t1> = <var:J> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:t1> = <nat:1> * <var:J> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:t0> = <nat:5> /\ <var:y> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:y> = <nat:1> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 