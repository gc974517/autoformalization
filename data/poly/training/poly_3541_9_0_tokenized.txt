\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:5> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:k> ; <var:I2> := <nat:2> ; <var:I2> := <var:I2> * <var:k> ; <var:I2> := <var:I2> * <var:k> ; <var:H> := <var:I2> ; <var:H> := <var:H> + <var:I1> ; <var:H> := <var:H> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Allow ( for natural numbers $ <var:S> $ ) it to hold that $ <var:k> = <var:S> $ ahead of evaluating our program it follows that we have $ <var:H> = <nat:2> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:5> $ . \end{theorem} \begin{proof} Note that the following decorated set of commands . \begin{eqnarray} \{ <var:k> = <var:S> \} \\ <var:I0> := <nat:5> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \} \\ <var:I1> := <nat:7> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:I1> = <nat:7> \} \\ <var:I1> := <var:I1> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:I1> = <nat:7> \times <var:S> \} \\ <var:I2> := <nat:2> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:I1> = <nat:7> \times <var:S> \land <var:I2> = <nat:2> \} \\ <var:I2> := <var:I2> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:I1> = <nat:7> \times <var:S> \land <var:I2> = <nat:2> \times <var:S> \} \\ <var:I2> := <var:I2> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:I1> = <nat:7> \times <var:S> \land <var:I2> = <nat:2> \times <var:S> ^ <nat:2> \} \\ <var:H> := <var:I2> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:I1> = <nat:7> \times <var:S> \land <var:H> = <nat:2> \times <var:S> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:I1> ; \\ \{ <var:k> = <var:S> \land <var:I0> = <nat:5> \land <var:H> = <nat:2> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> \} \\ <var:H> := <var:H> + <var:I0> \\ \{ <var:k> = <var:S> \land <var:H> = <nat:2> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> + <nat:5> \} \end{eqnarray} Applying Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:5> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:k> ; <var:I2> := <nat:2> ; <var:I2> := <var:I2> * <var:k> ; <var:I2> := <var:I2> * <var:k> ; <var:H> := <var:I2> ; <var:H> := <var:H> + <var:I1> ; <var:H> := <var:H> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:k> = <var:S> }} <def:poly> {{ <var:H> = <nat:2> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:7> * <var:S> /\ <var:I2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:7> * <var:S> /\ <var:I2> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:7> * <var:S> /\ <var:I2> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:7> * <var:S> /\ <var:H> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:I0> = <nat:5> /\ <var:H> = <nat:2> * <var:S> ^ <nat:2> + <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:H> = <nat:2> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 