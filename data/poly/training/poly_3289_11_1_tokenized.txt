\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:h1> := <var:x> ; <var:h2> := <var:h1> * <var:x> ; <var:h3> := <var:h2> * <var:x> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:2> ; <var:h2> := <var:h2> * <nat:7> ; <var:h3> := <var:h3> * <nat:2> ; <var:C> := <var:h3> <var:C> := <var:C> + <var:h2> <var:C> := <var:C> + <var:h1> <var:C> := <var:C> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:x> = <var:j> $ prior to interpreting this series of instructions , it follows that we see $ <var:C> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the list of instructions is accomplished using typical Hoare techniques . Looking at the following line of code found in our series of commands , we see \verb | { <var:x> = <var:j> } <var:h1> := <var:x> { <var:x> = <var:j> \land <var:h1> = <var:j> } | . This is deduced with the rule obtained from usual Hoare reasoning . Moving forward , we see \verb | { <var:x> = <var:j> } <var:h1> := <var:x> { <var:x> = <var:j> \land <var:h1> = <var:j> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <var:j> } <var:h2> := <var:h1> * <var:x> { <var:x> = <var:j> \land <var:h1> = <var:j> \land <var:h2> = <var:j> ^ <nat:2> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <var:j> \land <var:h2> = <var:j> ^ <nat:2> } <var:h3> := <var:h2> * <var:x> { <var:x> = <var:j> \land <var:h1> = <var:j> \land <var:h2> = <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <var:j> \land <var:h2> = <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> } <var:h0> := <nat:3> { <var:x> = <var:j> \land <var:h1> = <var:j> \land <var:h2> = <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <var:j> \land <var:h2> = <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } <var:h1> := <var:h1> * <nat:2> { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } <var:h2> := <var:h2> * <nat:7> { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:h3> = <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } <var:h3> := <var:h3> * <nat:2> { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:h3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:h3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:h0> = <nat:3> } <var:C> := <var:h3{ <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:h0> = <nat:3> \land <var:C> = <nat:2> \cdot <var:j> ^ <nat:3> } | , \verb | { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:h0> = <nat:3> \land <var:C> = <nat:2> \cdot <var:j> ^ <nat:3> } <var:C> := <var:C> + <var:h2{ <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h0> = <nat:3> \land <var:C> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> } | and \verb | { <var:x> = <var:j> \land <var:h1> = <nat:2> \cdot <var:j> \land <var:h0> = <nat:3> \land <var:C> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> } <var:C> := <var:C> + <var:h1{ <var:x> = <var:j> \land <var:h0> = <nat:3> \land <var:C> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> } | . This is guaranteed using the environment update scheme found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:x> ; <var:h2> := <var:h1> * <var:x> ; <var:h3> := <var:h2> * <var:x> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:2> ; <var:h2> := <var:h2> * <nat:7> ; <var:h3> := <var:h3> * <nat:2> ; <var:C> := <var:h3> <var:C> := <var:C> + <var:h2> <var:C> := <var:C> + <var:h1> <var:C> := <var:C> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:x> = <var:j> }} <def:poly> {{ <var:C> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <var:j> /\ <var:h2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <var:j> /\ <var:h2> = <var:j> ^ <nat:2> /\ <var:h3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <var:j> /\ <var:h2> = <var:j> ^ <nat:2> /\ <var:h3> = <var:j> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <nat:2> * <var:j> /\ <var:h2> = <var:j> ^ <nat:2> /\ <var:h3> = <var:j> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <nat:2> * <var:j> /\ <var:h2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:h3> = <var:j> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <nat:2> * <var:j> /\ <var:h2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <nat:2> * <var:j> /\ <var:h2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:h0> = <nat:3> /\ <var:C> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h1> = <nat:2> * <var:j> /\ <var:h0> = <nat:3> /\ <var:C> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:h0> = <nat:3> /\ <var:C> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:C> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 