\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w1> := <var:c> ; <var:w2> := <var:w1> * <var:c> ; <var:w3> := <var:w2> * <var:c> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:8> ; <var:s> := <var:w3> <var:s> := <var:s> + <var:w2> <var:s> := <var:s> + <var:w1> <var:s> := <var:s> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Assume $ <var:c> = <var:h> $ before running the list of instructions it must be that we have $ <var:s> = <nat:8> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is given through usual Hoare techniques . Moving on to the next step , the environment update statement \verb | <var:w1> := <var:c> ; | . This statement takes the condition $ \{ <var:c> = <var:h> \} $ into the postcondition $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \} $ . Keeping momentum , we have the variable binding code \verb | <var:w2> := <var:w1> * <var:c> ; | . This takes the precondition $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \} $ toward the condition $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \land <var:w2> = <var:h> ^ <nat:2> \} $ . This is rigorously given with the assignment rule of standard Hoare logic . Taking another step toward the next step contained in the program , the binding line letting $ <var:w2> * <var:c> $ as $ <var:w3>$ . This statement advances $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \land <var:w2> = <var:h> ^ <nat:2> \} $ into the postcondition $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \land <var:w2> = <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \} $ . Now , the variable assignmet line \verb | <var:w0> := <nat:3> ; | . This line moves the precondition $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \land <var:w2> = <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \} $ toward the condition $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \land <var:w2> = <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ . This is given with the assignment scheme given in typical Hoare techniques . Stepping through , we see the environment update command \verb | <var:w1> := <var:w1> * <nat:2> ; | . This takes $ \{ <var:c> = <var:h> \land <var:w1> = <var:h> \land <var:w2> = <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ to $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ . Advancing to the upcoming bit of code found in the series of instructions , we have the binding line \verb | <var:w2> := <var:w2> * <nat:3> ; | . This command forwards $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ toward the postcondition $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:3> * <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ . Looking at the subsequent line of code contained in our list of instructions , we have the binding statement binding $ <var:w3> * <nat:8> $ into $ <var:w3>$ . This forwards $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:3> * <var:h> ^ <nat:2> \land <var:w3> = <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ toward $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:3> * <var:h> ^ <nat:2> \land <var:w3> = <nat:8> * <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ . Advancing on , we see the statement assigning $ <var:w3$ into $ <var:s>$ . This statement forwards the condition $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:3> * <var:h> ^ <nat:2> \land <var:w3> = <nat:8> * <var:h> ^ <nat:3> \land <var:w0> = <nat:3> \} $ as the condition $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:3> * <var:h> ^ <nat:2> \land <var:w0> = <nat:3> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> \} $ . Moving onward , the binding command \verb | <var:s> := <var:s> + <var:w2> | . This redefines the precondition $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:3> * <var:h> ^ <nat:2> \land <var:w0> = <nat:3> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> \} $ into $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w0> = <nat:3> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme defined in usual Hoare logic . Immediately after , the assignment line defining $ <var:s> + <var:w1$ to $ <var:s>$ . This advances the precondition $ \{ <var:c> = <var:h> \land <var:w1> = <nat:2> * <var:h> \land <var:w0> = <nat:3> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> \} $ into $ \{ <var:c> = <var:h> \land <var:w0> = <nat:3> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> \} $ . Going to the next step , the environment update statement \verb | <var:s> := <var:s> + <var:w0> | . This statement takes $ \{ <var:c> = <var:h> \land <var:w0> = <nat:3> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> \} $ to $ \{ <var:c> = <var:h> \land <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w1> := <var:c> ; <var:w2> := <var:w1> * <var:c> ; <var:w3> := <var:w2> * <var:c> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:8> ; <var:s> := <var:w3> <var:s> := <var:s> + <var:w2> <var:s> := <var:s> + <var:w1> <var:s> := <var:s> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:c> = <var:h> }} <def:poly> {{ <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <var:h> /\ <var:w2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <var:h> /\ <var:w2> = <var:h> ^ <nat:2> /\ <var:w3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <var:h> /\ <var:w2> = <var:h> ^ <nat:2> /\ <var:w3> = <var:h> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <var:h> ^ <nat:2> /\ <var:w3> = <var:h> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:w3> = <var:h> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:w3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:w0> = <nat:3> /\ <var:s> = <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w0> = <nat:3> /\ <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:w0> = <nat:3> /\ <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:s> = <nat:8> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 