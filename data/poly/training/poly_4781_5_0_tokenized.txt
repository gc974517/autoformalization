\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:3> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:H> ; <var:b> := <var:z1> ; <var:b> := <var:b> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Allowing it to hold that $ <var:H> = <var:W> $ ahead of interpreting our code it follows that we have $ <var:b> = <nat:9> * <var:W> + <nat:3> $ when segment of code has exited . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:H> = <var:W> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:H> = <var:W> \land <var:z0> = <nat:3> \} \\ <var:z1> := <nat:9> ; \\ \{ <var:H> = <var:W> \land <var:z0> = <nat:3> \land <var:z1> = <nat:9> \} \\ <var:z1> := <var:z1> * <var:H> ; \\ \{ <var:H> = <var:W> \land <var:z0> = <nat:3> \land <var:z1> = <nat:9> \cdot <var:W> \} \\ <var:b> := <var:z1> ; \\ \{ <var:H> = <var:W> \land <var:z0> = <nat:3> \land <var:b> = <nat:9> \cdot <var:W> \} \\ <var:b> := <var:b> + <var:z0> \\ \{ <var:H> = <var:W> \land <var:b> = <nat:9> \cdot <var:W> + <nat:3> \} \end{eqnarray} Therefore , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:3> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:H> ; <var:b> := <var:z1> ; <var:b> := <var:b> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:H> = <var:W> }} <def:poly> {{ <var:b> = <nat:9> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:z0> = <nat:3> /\ <var:b> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:b> = <nat:9> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 