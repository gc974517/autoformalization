\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:k> ; <var:Y2> := <nat:4> ; <var:Y2> := <var:Y2> * <var:k> ; <var:Y2> := <var:Y2> * <var:k> ; <var:s> := <var:Y2> ; <var:s> := <var:s> + <var:Y1> ; <var:s> := <var:s> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Allowing , given every $ <var:G> \in \mathbb{Z}^+ $ , that $ <var:k> = <var:G> $ before running this list of commands it follows that we see $ <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> $ after series of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions can be given by typical Hoare techniques . Moving on to the next step , the variable binding line defining $ <nat:2> $ toward $ <var:Y0>$ . This moves the condition $ \{ <var:k> = <var:G> \} $ as the postcondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \} $ . This is ensured by the assignment rule defined in Hoare reasoning . Taking another step toward the subsequent piece of code found in the list of instructions , the environment update code \verb | <var:Y1> := <nat:1> ; | . This forwards the precondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \} $ as the postcondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> \} $ . This is known to be sound by the assignment law in usual Hoare reasoning . Moving on to the next step , we see the binding code \verb | <var:Y1> := <var:Y1> * <var:k> ; | . This takes $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> \} $ as $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \} $ . Immediately after , the variable update line assigning $ <nat:4> $ to $ <var:Y2>$ . This code redefines $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \} $ to $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:Y2> = <nat:4> \} $ . Focusing on the next piece of code seen in our series of instructions , the variable assignmet command \verb | <var:Y2> := <var:Y2> * <var:k> ; | . This code advances the precondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:Y2> = <nat:4> \} $ toward $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:Y2> = <nat:4> * <var:G> \} $ . This is known to be sound with the assignment law defined by typical Hoare techniques . Moving on to the proceeding command in our list of commands , the variable binding line assigning $ <var:Y2> * <var:k> $ as $ <var:Y2>$ . This line takes the precondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:Y2> = <nat:4> * <var:G> \} $ as $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:Y2> = <nat:4> * <var:G> ^ <nat:2> \} $ . This is known to be sound through the assignment law defined by typical Hoare techniques . Jumping to the following step seen in our set of commands , we see the variable binding line \verb | <var:s> := <var:Y2> ; | . This statement moves $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:Y2> = <nat:4> * <var:G> ^ <nat:2> \} $ to the postcondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:s> = <nat:4> * <var:G> ^ <nat:2> \} $ . After , we see the binding command \verb | <var:s> := <var:s> + <var:Y1> ; | . This transfers the precondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:G> \land <var:s> = <nat:4> * <var:G> ^ <nat:2> \} $ to $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> \} $ . Moving onward , we see the assignment command \verb | <var:s> := <var:s> + <var:Y0> | . This transfers the precondition $ \{ <var:k> = <var:G> \land <var:Y0> = <nat:2> \land <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> \} $ toward the postcondition $ \{ <var:k> = <var:G> \land <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ . This is given through the assignment scheme defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:k> ; <var:Y2> := <nat:4> ; <var:Y2> := <var:Y2> * <var:k> ; <var:Y2> := <var:Y2> * <var:k> ; <var:s> := <var:Y2> ; <var:s> := <var:s> + <var:Y1> ; <var:s> := <var:s> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:k> = <var:G> }} <def:poly> {{ <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:G> /\ <var:Y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:G> /\ <var:Y2> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:G> /\ <var:Y2> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:G> /\ <var:s> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:Y0> = <nat:2> /\ <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:s> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 