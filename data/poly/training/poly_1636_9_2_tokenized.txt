\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:h> := <nat:2> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> ; <var:h> := <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:1> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> \end{verbatim} Given ( given every natural numbers $ <var:Q> $ ) $ <var:d> = <var:Q> $ prior to the evaluation of our set of instructions , it must be that we have $ <var:h> = <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the program can be accomplished with standard Hoare techniques . Stepping forward , we have \verb | { <var:d> = <var:Q> } <var:h> := <nat:2> { <var:d> = <var:Q> \land <var:h> = <nat:2> } | , \verb | { <var:d> = <var:Q> \land <var:h> = <nat:2> } <var:h> := <nat:3> + <var:h> * <var:d> { <var:d> = <var:Q> \land <var:h> = <nat:2> \times <var:Q> + <nat:3> } | , \verb | { <var:d> = <var:Q> \land <var:h> = <nat:2> \times <var:Q> + <nat:3> } <var:h> := <nat:2> + <var:h> * <var:d> { <var:d> = <var:Q> \land <var:h> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:2> } | and \verb | { <var:d> = <var:Q> \land <var:h> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:2> } <var:h> := <var:h> * <var:d> { <var:d> = <var:Q> \land <var:h> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + } | . Moving forward to the next steps in our list of instructions , we see \verb | { <var:d> = <var:Q> } <var:h> := <nat:2> { <var:d> = <var:Q> \land <var:h> = <nat:2> } | and \verb | { <var:d> = <var:Q> \land <var:h> = <nat:2> } <var:h> := <nat:3> + <var:h> * <var:d> { <var:d> = <var:Q> \land <var:h> = <nat:2> \times <var:Q> + <nat:3> } | . Moving forward to the next line contained in our segment of code , we see \verb | { <var:d> = <var:Q> } <var:h> := <nat:2> { <var:d> = <var:Q> \land <var:h> = <nat:2> } | . Advancing to the next line contained in our series of commands , we have \verb | { <var:d> = <var:Q> } <var:h> := <nat:2> { <var:d> = <var:Q> \land <var:h> = <nat:2> } | . Now , we see \verb | { <var:d> = <var:Q> } <var:h> := <nat:2> { <var:d> = <var:Q> \land <var:h> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:d> = <var:Q> }} <var:h> := <nat:2> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> ; <var:h> := <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <nat:1> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> {{ <var:h> = <nat:2> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:h> = <nat:2> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 