\begin{document} \begin{theorem} Let the following series of commands such that \begin{verbatim} <var:S1> := <var:W> ; <var:S0> := <nat:6> ; <var:S1> := <var:S1> * <nat:5> ; <var:z> := <var:S1> <var:z> := <var:z> + <var:S0> \end{verbatim} Allow ( given any $ <var:Y> $ ) $ <var:W> = <var:Y> $ ahead of the evaluation of our list of instructions then we see $ <var:z> = <nat:5> * <var:Y> + <nat:6> $ after program has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is demonstrated by standard Hoare techniques . Further , \[ \begin{tabular} {rcl} \{ <var:W> = <var:Y> \} & <var:S1> := <var:W> & \{ <var:W> = <var:Y> \land <var:S1> = <var:Y> \} \\ \{ <var:W> = <var:Y> \land <var:S1> = <var:Y> \} & <var:S0> := <nat:6> & \{ <var:W> = <var:Y> \land <var:S1> = <var:Y> \land <var:S0> = <nat:6> \} \\ \{ <var:W> = <var:Y> \land <var:S1> = <var:Y> \land <var:S0> = <nat:6> \} & <var:S1> := <var:S1> * <nat:5> & \{ <var:W> = <var:Y> \land <var:S1> = <nat:5> \cdot <var:Y> \land <var:S0> = <nat:6> \} \\ \{ <var:W> = <var:Y> \land <var:S1> = <nat:5> \cdot <var:Y> \land <var:S0> = <nat:6> \} & <var:z> := <var:S1& \{ <var:W> = <var:Y> \land <var:S0> = <nat:6> \land <var:z> = <nat:5> \cdot <var:Y> \} \\ \{ <var:W> = <var:Y> \land <var:S0> = <nat:6> \land <var:z> = <nat:5> \cdot <var:Y> \} & <var:z> := <var:z> + <var:S0& \{ <var:W> = <var:Y> \land <var:z> = <nat:5> \cdot <var:Y> + <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:W> = <var:Y> }} <var:S1> := <var:W> ; <var:S0> := <nat:6> ; <var:S1> := <var:S1> * <nat:5> ; <var:z> := <var:S1> <var:z> := <var:z> + <var:S0> {{ <var:z> = <nat:5> * <var:Y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:S1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:S1> = <nat:5> * <var:Y> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:S0> = <nat:6> /\ <var:z> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:z> = <nat:5> * <var:Y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 