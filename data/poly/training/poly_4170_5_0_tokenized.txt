\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:1> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:F> ; <var:O> := <var:j1> ; <var:O> := <var:O> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow ( for all natural coefficients $ <var:A> $ ) it to hold that $ <var:F> = <var:A> $ ahead of the execution of the code segment it holds that we see $ <var:O> = <nat:2> * <var:A> + <nat:1> $ once set of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:A> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:F> = <var:A> \land <var:j0> = <nat:1> \} \\ <var:j1> := <nat:2> ; \\ \{ <var:F> = <var:A> \land <var:j0> = <nat:1> \land <var:j1> = <nat:2> \} \\ <var:j1> := <var:j1> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:j0> = <nat:1> \land <var:j1> = <nat:2> \times <var:A> \} \\ <var:O> := <var:j1> ; \\ \{ <var:F> = <var:A> \land <var:j0> = <nat:1> \land <var:O> = <nat:2> \times <var:A> \} \\ <var:O> := <var:O> + <var:j0> \\ \{ <var:F> = <var:A> \land <var:O> = <nat:2> \times <var:A> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:1> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:F> ; <var:O> := <var:j1> ; <var:O> := <var:O> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <def:poly> {{ <var:O> = <nat:2> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:j0> = <nat:1> /\ <var:O> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:O> = <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 