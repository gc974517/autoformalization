\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:4> ; <var:N> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assuming --- for any $ <var:f> $ --- it to hold that $ <var:w> = <var:f> $ prior to the evaluation of this program , it follows that we see $ <var:N> = <nat:4> $ once program terminates . \end{theorem} \begin{proof} The proof of this series of commands can be seen using usual Hoare techniques . Paying attention to the subsequent piece of code found in our code segment , we have the variable binding line assigning $ <nat:4> $ into $ <var:S0>$ . This statement transfers $ \{ <var:w> = <var:f> \} $ into the postcondition $ \{ <var:w> = <var:f> \land <var:S0> = <nat:4> \} $ . This is ensured using the assignment scheme from standard Hoare logic . Taking another step toward the proceeding piece of code contained in the list of commands , we have the variable assignmet code \verb | <var:N> := <var:S0> | . This moves the condition $ \{ <var:w> = <var:f> \land <var:S0> = <nat:4> \} $ as the postcondition $ \{ <var:w> = <var:f> \land <var:N> = <nat:4> \} $ . This is given by the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:N> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:w> = <var:f> }} <def:poly> {{ <var:N> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:N> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 