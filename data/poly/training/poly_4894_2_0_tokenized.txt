\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:1> ; <var:x> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Assuming it to hold that $ <var:F> = <var:O> $ ahead of the evaluation of the code segment , then we have $ <var:x> = <nat:1> $ when code segment finishes . \end{theorem} \begin{proof} The course of logic for this list of commands can be seen through Hoare logic . Moving forward to the next step , we see the variable update statement \verb | <var:X0> := <nat:1> ; | . This redefines the condition $ \{ <var:F> = <var:O> \} $ into the postcondition $ \{ <var:F> = <var:O> \land <var:X0> = <nat:1> \} $ . This is guaranteed using the assignment rule defined in usual Hoare techniques . Advancing , the variable binding code \verb | <var:x> := <var:X0> | . This forwards the precondition $ \{ <var:F> = <var:O> \land <var:X0> = <nat:1> \} $ to the condition $ \{ <var:F> = <var:O> \land <var:x> = <nat:1> \} $ . This is sound by the assignment rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:x> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:F> = <var:O> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 