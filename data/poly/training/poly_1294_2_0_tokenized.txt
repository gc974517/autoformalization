\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:4> ; <var:w> := <var:t0> \end{verbatim} Allow it to be that $ <var:x> = <var:Y> $ prior to running the set of commands then we see $ <var:w> = <nat:4> $ after code has executed . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:x> = <var:Y> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:x> = <var:Y> \land <var:t0> = <nat:4> \} \\ <var:w> := <var:t0> \\ \{ <var:x> = <var:Y> \land <var:w> = <nat:4> \} \end{eqnarray} As a consequence , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:x> = <var:Y> }} <var:t0> := <nat:4> ; <var:w> := <var:t0> {{ <var:w> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:w> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 