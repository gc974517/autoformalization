\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:K0> := <nat:4> ; <var:T> := <var:K0> \end{verbatim} Allow that $ <var:d> = <var:R> $ before evaluating our set of commands it follows that we have $ <var:T> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this program can be done using this decorated segment of code . \begin{eqnarray} \{ <var:d> = <var:R> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:d> = <var:R> \land <var:K0> = <nat:4> \} \\ <var:T> := <var:K0> \\ \{ <var:d> = <var:R> \land <var:T> = <nat:4> \} \end{eqnarray} Using standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:d> = <var:R> }} <var:K0> := <nat:4> ; <var:T> := <var:K0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 