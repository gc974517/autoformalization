\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} : \begin{verbatim} <var:m1> := <var:p> ; <var:m2> := <var:m1> * <var:p> ; <var:m3> := <var:m2> * <var:p> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:4> ; <var:g> := <var:m3> <var:g> := <var:g> + <var:m2> <var:g> := <var:g> + <var:m1> <var:g> := <var:g> + <var:m0> \end{verbatim} Assume that we have $ <var:p> = <var:k> $ prior to evaluating our segment of code , it must be that we see $ <var:g> = <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:3> $ after program has executed . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:p> = <var:k> \} \\ <var:m1> := <var:p> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <var:k> \} \\ <var:m2> := <var:m1> * <var:p> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:p> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m0> = <nat:3> \} \\ <var:m1> := <var:m1> * <nat:2> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <nat:2> \times <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m0> = <nat:3> \} \\ <var:m2> := <var:m2> * <nat:3> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <nat:2> \times <var:k> \land <var:m2> = <nat:3> \times <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m0> = <nat:3> \} \\ <var:m3> := <var:m3> * <nat:4> ; \\ \{ <var:p> = <var:k> \land <var:m1> = <nat:2> \times <var:k> \land <var:m2> = <nat:3> \times <var:k> ^ <nat:2> \land <var:m3> = <nat:4> \times <var:k> ^ <nat:3> \land <var:m0> = <nat:3> \} \\ <var:g> := <var:m3> \\ \{ <var:p> = <var:k> \land <var:m1> = <nat:2> \times <var:k> \land <var:m2> = <nat:3> \times <var:k> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:g> = <nat:4> \times <var:k> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:m2> \\ \{ <var:p> = <var:k> \land <var:m1> = <nat:2> \times <var:k> \land <var:m0> = <nat:3> \land <var:g> = <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:m1> \\ \{ <var:p> = <var:k> \land <var:m0> = <nat:3> \land <var:g> = <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> \} \\ <var:g> := <var:g> + <var:m0> \\ \{ <var:p> = <var:k> \land <var:g> = <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:3> \} \end{eqnarray} Therefore , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:p> = <var:k> }} <var:m1> := <var:p> ; <var:m2> := <var:m1> * <var:p> ; <var:m3> := <var:m2> * <var:p> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:4> ; <var:g> := <var:m3> <var:g> := <var:g> + <var:m2> <var:g> := <var:g> + <var:m1> <var:g> := <var:g> + <var:m0> {{ <var:g> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:k> ^ <nat:3> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:m0> = <nat:3> /\ <var:g> = <nat:4> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m1> = <nat:2> * <var:k> /\ <var:m0> = <nat:3> /\ <var:g> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:m0> = <nat:3> /\ <var:g> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:g> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 