\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} such that \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <nat:1> + <var:Z> * <var:A> ; <var:Z> := <var:Z> * <var:A> ; <var:Z> := <nat:4> + <var:Z> * <var:A> ; <var:Z> := <nat:2> + <var:Z> * <var:A> \end{verbatim} Allowing , given some integers $ <var:I> $ , it to be that $ <var:A> = <var:I> $ before interpreting our program , it must be that we see $ <var:Z> = <nat:1> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions can be given through typical Hoare logic . Next , we have \begin{eqnarray} \{ <var:A> = <var:I> \} \, <var:Z> := <nat:1> \, \{ <var:A> = <var:I> \land <var:Z> = <nat:1> \} \\ \{ <var:A> = <var:I> \land <var:Z> = <nat:1> \} \, <var:Z> := <nat:1> + <var:Z> * <var:A> \, \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> + <nat:1> \} \\ \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> + <nat:1> \} \, <var:Z> := <var:Z> * <var:A> \, \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + \} \\ \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + \} \, <var:Z> := <nat:4> + <var:Z> * <var:A> \, \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> \} \\ \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> \} \, <var:Z> := <nat:2> + <var:Z> * <var:A\, \{ <var:A> = <var:I> \land <var:Z> = <nat:1> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:2> \} \end{eqnarray} This is shown to be logically sound through the variable update scheme given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:A> = <var:I> }} <var:Z> := <nat:1> ; <var:Z> := <nat:1> + <var:Z> * <var:A> ; <var:Z> := <var:Z> * <var:A> ; <var:Z> := <nat:4> + <var:Z> * <var:A> ; <var:Z> := <nat:2> + <var:Z> * <var:A> {{ <var:Z> = <nat:1> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z> = <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z> = <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z> = <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z> = <nat:1> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 