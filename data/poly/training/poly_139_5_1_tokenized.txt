\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:V> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:N> := <var:Y1> <var:N> := <var:N> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Assuming that $ <var:V> = <var:h> $ , assuming some positive integers $ <var:h> $ , prior to interpreting this list of commands , it holds that $ <var:N> = <nat:3> \times <var:h> + <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:V> = <var:h> \} \\ <var:Y1> := <var:V> ; \\ \{ <var:V> = <var:h> \land <var:Y1> = <var:h> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:V> = <var:h> \land <var:Y1> = <var:h> \land <var:Y0> = <nat:6> \} \\ <var:Y1> := <var:Y1> * <nat:3> ; \\ \{ <var:V> = <var:h> \land <var:Y1> = <nat:3> \cdot <var:h> \land <var:Y0> = <nat:6> \} \\ <var:N> := <var:Y1> \\ \{ <var:V> = <var:h> \land <var:Y0> = <nat:6> \land <var:N> = <nat:3> \cdot <var:h> \} \\ <var:N> := <var:N> + <var:Y0> \\ \{ <var:V> = <var:h> \land <var:N> = <nat:3> \cdot <var:h> + <nat:6> \} \end{eqnarray} Hence , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:V> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:N> := <var:Y1> <var:N> := <var:N> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <def:poly> {{ <var:N> = <nat:3> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:Y1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:Y1> = <var:h> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:Y1> = <nat:3> * <var:h> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:Y0> = <nat:6> /\ <var:N> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:N> = <nat:3> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 