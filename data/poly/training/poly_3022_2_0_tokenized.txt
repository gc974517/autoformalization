\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:Z0> := <nat:3> ; <var:j> := <var:Z0> \end{verbatim} Assume $ <var:m> = <var:v> $ before evaluating our program , it follows that $ <var:j> = <nat:3> $ when series of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:v> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:m> = <var:v> \land <var:Z0> = <nat:3> \} \\ <var:j> := <var:Z0> \\ \{ <var:m> = <var:v> \land <var:j> = <nat:3> \} \end{eqnarray} Using typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:m> = <var:v> }} <var:Z0> := <nat:3> ; <var:j> := <var:Z0> {{ <var:j> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:j> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 