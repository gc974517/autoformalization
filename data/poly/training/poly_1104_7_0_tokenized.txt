\begin{document} \begin{theorem} Take a code : \begin{verbatim} <var:c0> := <nat:6> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:o> ; <var:c3> := <var:c3> * <var:o> ; <var:c3> := <var:c3> * <var:o> ; <var:O> := <var:c3> ; <var:O> := <var:O> + <var:c0> \end{verbatim} Assume that $ <var:o> = <var:u> $ given some positive coefficients $ <var:u> $ prior to interpreting this code then we have $ <var:O> = <nat:3> * <var:u> ^ <nat:3> + <nat:6> $ when set of commands has exited . \end{theorem} \begin{proof} The course of logic for the set of instructions is demonstrated using standard Hoare reasoning . Shifting focus toward the following line of code seen in the set of commands , \begin{eqnarray} \{ <var:o> = <var:u> \} \, <var:c0> := <nat:6> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \} \end{eqnarray} This is shown to be logically sound through the variable binding rule of typical Hoare reasoning . Moving on to the proceeding steps in the list of commands , we have \begin{eqnarray} \{ <var:o> = <var:u> \} \, <var:c0> := <nat:6> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \} \\ \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \} \, <var:c3> := <nat:3> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> \} \\ \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> \} \, <var:c3> := <var:c3> * <var:o> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> * <var:u> \} \\ \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> * <var:u> \} \, <var:c3> := <var:c3> * <var:o> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> * <var:u> ^ <nat:2> \} \\ \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> * <var:u> ^ <nat:2> \} \, <var:c3> := <var:c3> * <var:o> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> * <var:u> ^ <nat:3> \} \\ \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:c3> = <nat:3> * <var:u> ^ <nat:3> \} \, <var:O> := <var:c3> \, \{ <var:o> = <var:u> \land <var:c0> = <nat:6> \land <var:O> = <nat:3> * <var:u> ^ <nat:3> \} \end{eqnarray} This is shown to be logically sound through the variable assignmet rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:o> = <var:u> }} <var:c0> := <nat:6> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:o> ; <var:c3> := <var:c3> * <var:o> ; <var:c3> := <var:c3> * <var:o> ; <var:O> := <var:c3> ; <var:O> := <var:O> + <var:c0> {{ <var:O> = <nat:3> * <var:u> ^ <nat:3> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:c0> = <nat:6> /\ <var:c3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:c0> = <nat:6> /\ <var:c3> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:c0> = <nat:6> /\ <var:c3> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:c0> = <nat:6> /\ <var:c3> = <nat:3> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:c0> = <nat:6> /\ <var:O> = <nat:3> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:O> = <nat:3> * <var:u> ^ <nat:3> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 