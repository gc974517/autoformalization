\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:R> ; <var:I2> := <var:I1> * <var:R> ; <var:I3> := <var:I2> * <var:R> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:2> ; <var:T> := <var:I3> <var:T> := <var:T> + <var:I2> <var:T> := <var:T> + <var:I1> <var:T> := <var:T> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:R> = <var:b> $ , for positive coefficients $ <var:b> $ , prior to evaluating the segment of code , it holds that $ <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is demonstrated through usual Hoare logic . Moving on to the next bit of code in our code , the binding line \verb | <var:I1> := <var:R> ; | . This forwards the precondition $ \{ <var:R> = <var:b> \} $ as $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \} $ . Moving on , we have the binding statement \verb | <var:I2> := <var:I1> * <var:R> ; | . This redefines $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \} $ into $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \land <var:I2> = <var:b> ^ <nat:2> \} $ . This is known to be sound through the assignment scheme of typical Hoare techniques . Now , we have the variable update line \verb | <var:I3> := <var:I2> * <var:R> ; | . This code transfers $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \land <var:I2> = <var:b> ^ <nat:2> \} $ into the condition $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \land <var:I2> = <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \} $ . This is ensured through the assignment scheme given by standard Hoare techniques . Taking another step toward the upcoming line found in the segment of code , we have the environment update code assigning $ <nat:4> $ into $ <var:I0>$ . This forwards the condition $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \land <var:I2> = <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \land <var:I2> = <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ . This is known to be sound using the assignment rule of usual Hoare logic . Considering the following line of code found in the program , we have the variable binding statement binding $ <var:I1> * <nat:4> $ as $ <var:I1>$ . This forwards the condition $ \{ <var:R> = <var:b> \land <var:I1> = <var:b> \land <var:I2> = <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ as the condition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ . This is rigorously given using the assignment law defined in Hoare logic . Focusing on the upcoming line of code found in the program , we have the variable binding line defining $ <var:I2> * <nat:4> $ into $ <var:I2>$ . This command takes the condition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ to $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <nat:4> * <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ . Honing in on the subsequent piece of code contained in the set of commands , the variable assignmet code giving $ <var:I3> * <nat:2> $ toward $ <var:I3>$ . This statement redefines the condition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <nat:4> * <var:b> ^ <nat:2> \land <var:I3> = <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ as the condition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <nat:4> * <var:b> ^ <nat:2> \land <var:I3> = <nat:2> * <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ . Advancing , we see the assignment statement assigning $ <var:I3$ as $ <var:T>$ . This advances the condition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <nat:4> * <var:b> ^ <nat:2> \land <var:I3> = <nat:2> * <var:b> ^ <nat:3> \land <var:I0> = <nat:4> \} $ into the postcondition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <nat:4> * <var:b> ^ <nat:2> \land <var:I0> = <nat:4> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> \} $ . This is sound with the assignment rule obtained from Hoare reasoning . Immediately after , we see the assignment statement defining $ <var:T> + <var:I2$ to $ <var:T>$ . This transfers the precondition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I2> = <nat:4> * <var:b> ^ <nat:2> \land <var:I0> = <nat:4> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> \} $ into the condition $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I0> = <nat:4> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> \} $ . This is guaranteed by the assignment law given by Hoare techniques . Moving on to the proceeding bit of code contained in the list of instructions , the variable binding line \verb | <var:T> := <var:T> + <var:I1> | . This line transfers $ \{ <var:R> = <var:b> \land <var:I1> = <nat:4> * <var:b> \land <var:I0> = <nat:4> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> \} $ as $ \{ <var:R> = <var:b> \land <var:I0> = <nat:4> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} $ . Moving forward to the upcoming piece of code in the segment of code , we have the variable assignmet command \verb | <var:T> := <var:T> + <var:I0> | . This command advances $ \{ <var:R> = <var:b> \land <var:I0> = <nat:4> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} $ into the postcondition $ \{ <var:R> = <var:b> \land <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> \} $ . This is guaranteed through the assignment law given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:R> ; <var:I2> := <var:I1> * <var:R> ; <var:I3> := <var:I2> * <var:R> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:2> ; <var:T> := <var:I3> <var:T> := <var:T> + <var:I2> <var:T> := <var:T> + <var:I1> <var:T> := <var:T> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:R> = <var:b> }} <def:poly> {{ <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <var:b> /\ <var:I2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <var:b> /\ <var:I2> = <var:b> ^ <nat:2> /\ <var:I3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <var:b> /\ <var:I2> = <var:b> ^ <nat:2> /\ <var:I3> = <var:b> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <nat:4> * <var:b> /\ <var:I2> = <var:b> ^ <nat:2> /\ <var:I3> = <var:b> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <nat:4> * <var:b> /\ <var:I2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:I3> = <var:b> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <nat:4> * <var:b> /\ <var:I2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:I3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <nat:4> * <var:b> /\ <var:I2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:I0> = <nat:4> /\ <var:T> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I1> = <nat:4> * <var:b> /\ <var:I0> = <nat:4> /\ <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:I0> = <nat:4> /\ <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:T> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 