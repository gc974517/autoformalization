\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:j1> := <var:C> ; <var:j2> := <var:j1> * <var:C> ; <var:j3> := <var:j2> * <var:C> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:3> ; <var:j3> := <var:j3> * <nat:9> ; <var:b> := <var:j3> <var:b> := <var:b> + <var:j2> <var:b> := <var:b> + <var:j1> <var:b> := <var:b> + <var:j0> \end{verbatim} Allow it to be that $ <var:C> = <var:J> $ ahead of the execution of the code segment , it holds that we have $ <var:b> = <nat:9> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be given using typical Hoare techniques . Jumping to the next piece of code in our set of commands , we have the binding code giving $ <var:C> $ into $ <var:j1>$ . This statement advances the condition $ \{ <var:C> = <var:J> \} $ toward $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \} $ . This is given through the assignment law given by standard Hoare logic . Focusing on the following line of code in the series of instructions , the environment update statement binding $ <var:j1> * <var:C> $ into $ <var:j2>$ . This code moves $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \} $ as the postcondition $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} $ . This is sound with the assignment law given in Hoare logic . Going forward , the variable binding line assigning $ <var:j2> * <var:C> $ into $ <var:j3>$ . This forwards the precondition $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} $ to $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} $ . Advancing on , we see the variable assignmet code giving $ <nat:9> $ to $ <var:j0>$ . This advances the condition $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ . Moving forward , we have the variable update line \verb | <var:j1> := <var:j1> * <nat:4> ; | . This code takes the condition $ \{ <var:C> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ to the condition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ . Going to the next step , we see the environment update line giving $ <var:j2> * <nat:3> $ into $ <var:j2>$ . This moves the condition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ toward $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <nat:3> \times <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ . Advancing to the next step , the assignment line \verb | <var:j3> := <var:j3> * <nat:9> ; | . This transfers the condition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <nat:3> \times <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ into $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <nat:3> \times <var:J> ^ <nat:2> \land <var:j3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ . Jumping to the proceeding piece of code in our segment of code , we see the assignment line \verb | <var:b> := <var:j3> | . This line advances $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <nat:3> \times <var:J> ^ <nat:2> \land <var:j3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:j0> = <nat:9> \} $ as the postcondition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <nat:3> \times <var:J> ^ <nat:2> \land <var:j0> = <nat:9> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment rule obtained from usual Hoare logic . Taking another step toward the following command seen in the set of commands , we have the variable binding code letting $ <var:b> + <var:j2$ as $ <var:b>$ . This transfers the precondition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j2> = <nat:3> \times <var:J> ^ <nat:2> \land <var:j0> = <nat:9> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j0> = <nat:9> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> \} $ . Advancing to the upcoming line contained in the code , we see the variable assignmet line giving $ <var:b> + <var:j1$ to $ <var:b>$ . This transfers the condition $ \{ <var:C> = <var:J> \land <var:j1> = <nat:4> \times <var:J> \land <var:j0> = <nat:9> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> \} $ as the postcondition $ \{ <var:C> = <var:J> \land <var:j0> = <nat:9> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> \} $ . This is deduced with the assignment scheme defined in typical Hoare reasoning . Further , we have the variable binding command \verb | <var:b> := <var:b> + <var:j0> | . This transfers the condition $ \{ <var:C> = <var:J> \land <var:j0> = <nat:9> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> \} $ into $ \{ <var:C> = <var:J> \land <var:b> = <nat:9> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:9> \} $ . This is rigorously given through the assignment scheme given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:C> = <var:J> }} <var:j1> := <var:C> ; <var:j2> := <var:j1> * <var:C> ; <var:j3> := <var:j2> * <var:C> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:3> ; <var:j3> := <var:j3> * <nat:9> ; <var:b> := <var:j3> <var:b> := <var:b> + <var:j2> <var:b> := <var:b> + <var:j1> <var:b> := <var:b> + <var:j0> {{ <var:b> = <nat:9> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <nat:4> * <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <nat:4> * <var:J> /\ <var:j2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <nat:4> * <var:J> /\ <var:j2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:j3> = <nat:9> * <var:J> ^ <nat:3> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <nat:4> * <var:J> /\ <var:j2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:j0> = <nat:9> /\ <var:b> = <nat:9> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j1> = <nat:4> * <var:J> /\ <var:j0> = <nat:9> /\ <var:b> = <nat:9> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:j0> = <nat:9> /\ <var:b> = <nat:9> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:b> = <nat:9> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 