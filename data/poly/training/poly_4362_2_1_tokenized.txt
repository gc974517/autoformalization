\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:v0> := <nat:3> ; <var:R> := <var:v0> \end{verbatim} Given it to be that $ <var:A> = <var:J> $ prior to the evaluation of this set of commands it follows that we see $ <var:R> = <nat:3> $ after code exits . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is shown by typical Hoare reasoning . After , \begin{verbatim} { <var:A> = <var:J> } <var:v0> := <nat:3> { <var:A> = <var:J> \land <var:v0> = <nat:3> } { <var:A> = <var:J> \land <var:v0> = <nat:3> } <var:R> := <var:v0{ <var:A> = <var:J> \land <var:R> = <nat:3> } \end{verbatim} This is ensured by the assignment inference rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:A> = <var:J> }} <var:v0> := <nat:3> ; <var:R> := <var:v0> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 