\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:F> ; <var:Q2> := <var:Q1> * <var:F> ; <var:Q3> := <var:Q2> * <var:F> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:2> ; <var:h> := <var:Q3> <var:h> := <var:h> + <var:Q2> <var:h> := <var:h> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:F> = <var:q> $ prior to running our list of instructions it holds that we have $ <var:h> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:5> $ once series of instructions has executed . \end{theorem} \begin{proof} The proof of this set of instructions is shown by typical Hoare logic . Moving forward to the following pieces of code seen in the set of instructions , we see \begin{verbatim} { <var:F> = <var:q> } <var:Q1> := <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> } { <var:F> = <var:q> \land <var:Q1> = <var:q> } <var:Q2> := <var:Q1> * <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } <var:Q3> := <var:Q2> * <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> } { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> } <var:Q0> := <nat:5> { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q0> = <nat:5> } { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q0> = <nat:5> } <var:Q2> := <var:Q2> * <nat:1> { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <nat:1> \times <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q0> = <nat:5> } \end{verbatim} This is deduced using the variable assignmet scheme from standard Hoare logic . Taking another step toward the upcoming commands seen in our series of commands , \begin{verbatim} { <var:F> = <var:q> } <var:Q1> := <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> } { <var:F> = <var:q> \land <var:Q1> = <var:q> } <var:Q2> := <var:Q1> * <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } <var:Q3> := <var:Q2> * <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> } \end{verbatim} This is given using the variable binding inference rule given by usual Hoare techniques . Going forward , we see \begin{verbatim} { <var:F> = <var:q> } <var:Q1> := <var:F> { <var:F> = <var:q> \land <var:Q1> = <var:q> } \end{verbatim} This is deduced through the inference rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:F> ; <var:Q2> := <var:Q1> * <var:F> ; <var:Q3> := <var:Q2> * <var:F> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:2> ; <var:h> := <var:Q3> <var:h> := <var:h> + <var:Q2> <var:h> := <var:h> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:F> = <var:q> }} <def:poly> {{ <var:h> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:Q3> = <nat:2> * <var:q> ^ <nat:3> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:Q0> = <nat:5> /\ <var:h> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q0> = <nat:5> /\ <var:h> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:h> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 