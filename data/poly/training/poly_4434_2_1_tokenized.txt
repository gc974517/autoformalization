\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:1> ; <var:R> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given ( for all natural numbers $ <var:n> $ ) that $ <var:d> = <var:n> $ ahead of running the series of instructions , then we have $ <var:R> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:n> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:d> = <var:n> \land <var:h0> = <nat:1> \} \\ <var:R> := <var:h0> \\ \{ <var:d> = <var:n> \land <var:R> = <nat:1> \} \end{eqnarray} Applying typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:R> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <def:poly> {{ <var:R> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:R> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 