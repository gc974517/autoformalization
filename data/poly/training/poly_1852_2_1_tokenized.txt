\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:9> ; <var:u> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Allow that $ <var:e> = <var:E> $ for $ <var:E> \in \mathbb{Z}^+ $ ahead of the evaluation of the set of commands it must be that $ <var:u> = <nat:9> $ once program has terminated . \end{theorem} \begin{proof} The way to prove correctness for the program is given through typical Hoare reasoning . Moving on to the upcoming steps seen in the series of instructions , we have \begin{eqnarray} \{ <var:e> = <var:E> \} \, <var:H0> := <nat:9> \, \{ <var:e> = <var:E> \land <var:H0> = <nat:9> \} \\ \{ <var:e> = <var:E> \land <var:H0> = <nat:9> \} \, <var:u> := <var:H0\, \{ <var:e> = <var:E> \land <var:u> = <nat:9> \} \end{eqnarray} This is known to be sound with the binding inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:u> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:e> = <var:E> }} <def:poly> {{ <var:u> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:u> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 