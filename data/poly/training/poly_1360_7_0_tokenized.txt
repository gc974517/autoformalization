\begin{document} \begin{theorem} We define a set of commands : \begin{verbatim} <var:b0> := <nat:2> ; <var:b3> := <nat:3> ; <var:b3> := <var:b3> * <var:R> ; <var:b3> := <var:b3> * <var:R> ; <var:b3> := <var:b3> * <var:R> ; <var:s> := <var:b3> ; <var:s> := <var:s> + <var:b0> \end{verbatim} Allowing that $ <var:R> = <var:K> $ prior to the evaluation of the series of commands , it follows that $ <var:s> = <nat:3> * <var:K> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code can be accomplished by typical Hoare logic . Further , we see the variable update code letting $ <nat:2> $ into $ <var:b0>$ . This line advances the precondition $ \{ <var:R> = <var:K> \} $ toward the condition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \} $ . This is shown through the assignment inference rule obtained from usual Hoare techniques . After , we see the environment update command \verb | <var:b3> := <nat:3> ; | . This moves the precondition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \} $ toward the condition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> \} $ . This is rigorously given by the assignment law given by usual Hoare reasoning . Stepping forward , we see the environment update command giving $ <var:b3> * <var:R> $ into $ <var:b3>$ . This line transfers the condition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> \} $ as $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> * <var:K> \} $ . This is known to be sound using the assignment inference rule found in typical Hoare logic . Shifting focus toward the upcoming line found in our segment of code , we have the assignment statement \verb | <var:b3> := <var:b3> * <var:R> ; | . This transfers $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> * <var:K> \} $ as $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> * <var:K> ^ <nat:2> \} $ . After , the variable binding line yielding $ <var:b3> * <var:R> $ to $ <var:b3>$ . This moves the precondition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> * <var:K> ^ <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> * <var:K> ^ <nat:3> \} $ . Following , the binding statement assigning $ <var:b3> $ to $ <var:s>$ . This advances the precondition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:b3> = <nat:3> * <var:K> ^ <nat:3> \} $ to $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:s> = <nat:3> * <var:K> ^ <nat:3> \} $ . Advancing to the next step , we have the assignment statement \verb | <var:s> := <var:s> + <var:b0> | . This line transfers the condition $ \{ <var:R> = <var:K> \land <var:b0> = <nat:2> \land <var:s> = <nat:3> * <var:K> ^ <nat:3> \} $ toward the postcondition $ \{ <var:R> = <var:K> \land <var:s> = <nat:3> * <var:K> ^ <nat:3> + <nat:2> \} $ . This is given through the assignment law from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:R> = <var:K> }} <var:b0> := <nat:2> ; <var:b3> := <nat:3> ; <var:b3> := <var:b3> * <var:R> ; <var:b3> := <var:b3> * <var:R> ; <var:b3> := <var:b3> * <var:R> ; <var:s> := <var:b3> ; <var:s> := <var:s> + <var:b0> {{ <var:s> = <nat:3> * <var:K> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:b0> = <nat:2> /\ <var:b3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:b0> = <nat:2> /\ <var:b3> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:b0> = <nat:2> /\ <var:b3> = <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:b0> = <nat:2> /\ <var:b3> = <nat:3> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:b0> = <nat:2> /\ <var:s> = <nat:3> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:s> = <nat:3> * <var:K> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 