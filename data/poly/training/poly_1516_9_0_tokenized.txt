\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:Y> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:Y> ; <var:N2> := <var:N2> * <var:Y> ; <var:v> := <var:N2> ; <var:v> := <var:v> + <var:N1> ; <var:v> := <var:v> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:Y> = <var:S> $ before the evaluation of this series of instructions , it must be that we see $ <var:v> = <nat:1> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is done through the following decorated program . \begin{eqnarray} \{ <var:Y> = <var:S> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \} \\ <var:N1> := <nat:1> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \} \\ <var:N1> := <var:N1> * <var:Y> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \cdot <var:S> \} \\ <var:N2> := <nat:1> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:N2> = <nat:1> \} \\ <var:N2> := <var:N2> * <var:Y> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:N2> = <nat:1> \cdot <var:S> \} \\ <var:N2> := <var:N2> * <var:Y> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:N2> = <nat:1> \cdot <var:S> ^ <nat:2> \} \\ <var:v> := <var:N2> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:v> = <nat:1> \cdot <var:S> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:N1> ; \\ \{ <var:Y> = <var:S> \land <var:N0> = <nat:1> \land <var:v> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> \} \\ <var:v> := <var:v> + <var:N0> \\ \{ <var:Y> = <var:S> \land <var:v> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:1> \} \end{eqnarray} Utilizing Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N0> := <nat:1> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:Y> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:Y> ; <var:N2> := <var:N2> * <var:Y> ; <var:v> := <var:N2> ; <var:v> := <var:v> + <var:N1> ; <var:v> := <var:v> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Y> = <var:S> }} <def:poly> {{ <var:v> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:S> /\ <var:N2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:S> /\ <var:N2> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:S> /\ <var:N2> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:S> /\ <var:v> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:N0> = <nat:1> /\ <var:v> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:v> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 