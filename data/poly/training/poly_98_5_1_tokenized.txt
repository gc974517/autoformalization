\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:G> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:x> := <var:v1> <var:x> := <var:x> + <var:v0> \end{verbatim} Allow , for all $ <var:p> \in \mathbb{Z}^+ $ , it to hold that $ <var:G> = <var:p> $ prior to the execution of this code segment it follows that we have $ <var:x> = <nat:2> \cdot <var:p> + <nat:9> $ . \end{theorem} \begin{proof} See that the following decorated segment of code . \begin{eqnarray} \{ <var:G> = <var:p> \} \\ <var:v1> := <var:G> ; \\ \{ <var:G> = <var:p> \land <var:v1> = <var:p> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:G> = <var:p> \land <var:v1> = <var:p> \land <var:v0> = <nat:9> \} \\ <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:G> = <var:p> \land <var:v1> = <nat:2> \times <var:p> \land <var:v0> = <nat:9> \} \\ <var:x> := <var:v1> \\ \{ <var:G> = <var:p> \land <var:v0> = <nat:9> \land <var:x> = <nat:2> \times <var:p> \} \\ <var:x> := <var:x> + <var:v0> \\ \{ <var:G> = <var:p> \land <var:x> = <nat:2> \times <var:p> + <nat:9> \} \end{eqnarray} The application of standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:G> = <var:p> }} <var:v1> := <var:G> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:x> := <var:v1> <var:x> := <var:x> + <var:v0> {{ <var:x> = <nat:2> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:v1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:v1> = <var:p> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:v1> = <nat:2> * <var:p> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:v0> = <nat:9> /\ <var:x> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:x> = <nat:2> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 