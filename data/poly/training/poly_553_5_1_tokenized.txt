\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:B1> := <var:y> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:1> ; <var:Q> := <var:B1> <var:Q> := <var:Q> + <var:B0> \end{verbatim} Allow , with some natural numbers $ <var:k> $ , that we have $ <var:y> = <var:k> $ prior to the execution of our set of instructions it follows that $ <var:Q> = <nat:1> * <var:k> + <nat:4> $ after segment of code is done executing . \end{theorem} \begin{proof} Arguing the correctness of the program is done using usual Hoare reasoning . Moving on , we see the variable assignmet statement defining $ <var:y> $ into $ <var:B1>$ . This forwards $ \{ <var:y> = <var:k> \} $ as the condition $ \{ <var:y> = <var:k> \land <var:B1> = <var:k> \} $ . This is rigorously given using the assignment rule defined in standard Hoare techniques . Jumping to the upcoming bit of code contained in our series of commands , the assignment code \verb | <var:B0> := <nat:4> ; | . This line advances the condition $ \{ <var:y> = <var:k> \land <var:B1> = <var:k> \} $ as the postcondition $ \{ <var:y> = <var:k> \land <var:B1> = <var:k> \land <var:B0> = <nat:4> \} $ . This is ensured with the assignment rule found in Hoare techniques . Immediately following , the variable update command binding $ <var:B1> * <nat:1> $ into $ <var:B1>$ . This code takes the precondition $ \{ <var:y> = <var:k> \land <var:B1> = <var:k> \land <var:B0> = <nat:4> \} $ to the postcondition $ \{ <var:y> = <var:k> \land <var:B1> = <nat:1> \cdot <var:k> \land <var:B0> = <nat:4> \} $ . Shifting focus toward the subsequent line of code in our series of commands , we have the statement assigning $ <var:B1$ to $ <var:Q>$ . This statement takes $ \{ <var:y> = <var:k> \land <var:B1> = <nat:1> \cdot <var:k> \land <var:B0> = <nat:4> \} $ as the postcondition $ \{ <var:y> = <var:k> \land <var:B0> = <nat:4> \land <var:Q> = <nat:1> \cdot <var:k> \} $ . After , we have the binding command yielding $ <var:Q> + <var:B0$ into $ <var:Q>$ . This code moves the condition $ \{ <var:y> = <var:k> \land <var:B0> = <nat:4> \land <var:Q> = <nat:1> \cdot <var:k> \} $ toward $ \{ <var:y> = <var:k> \land <var:Q> = <nat:1> \cdot <var:k> + <nat:4> \} $ . This is guaranteed through the assignment law obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:y> = <var:k> }} <var:B1> := <var:y> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:1> ; <var:Q> := <var:B1> <var:Q> := <var:Q> + <var:B0> {{ <var:Q> = <nat:1> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B1> = <var:k> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B1> = <nat:1> * <var:k> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:B0> = <nat:4> /\ <var:Q> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:Q> = <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 