\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:b> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:b> ; <var:z2> := <var:z2> * <var:b> ; <var:D> := <var:z2> ; <var:D> := <var:D> + <var:z1> ; <var:D> := <var:D> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:b> = <var:m> $ before interpreting the set of commands , it holds that we have $ <var:D> = <nat:1> \times <var:m> ^ <nat:2> + <nat:8> \times <var:m> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:m> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \} \\ <var:z1> := <nat:8> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:z1> = <nat:8> \} \\ <var:z1> := <var:z1> * <var:b> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:z1> = <nat:8> * <var:m> \} \\ <var:z2> := <nat:1> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:z1> = <nat:8> * <var:m> \land <var:z2> = <nat:1> \} \\ <var:z2> := <var:z2> * <var:b> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:z1> = <nat:8> * <var:m> \land <var:z2> = <nat:1> * <var:m> \} \\ <var:z2> := <var:z2> * <var:b> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:z1> = <nat:8> * <var:m> \land <var:z2> = <nat:1> * <var:m> ^ <nat:2> \} \\ <var:D> := <var:z2> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:z1> = <nat:8> * <var:m> \land <var:D> = <nat:1> * <var:m> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:z1> ; \\ \{ <var:b> = <var:m> \land <var:z0> = <nat:4> \land <var:D> = <nat:1> * <var:m> ^ <nat:2> + <nat:8> * <var:m> \} \\ <var:D> := <var:D> + <var:z0> \\ \{ <var:b> = <var:m> \land <var:D> = <nat:1> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:b> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:b> ; <var:z2> := <var:z2> * <var:b> ; <var:D> := <var:z2> ; <var:D> := <var:D> + <var:z1> ; <var:D> := <var:D> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:b> = <var:m> }} <def:poly> {{ <var:D> = <nat:1> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:8> * <var:m> /\ <var:z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:8> * <var:m> /\ <var:z2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:8> * <var:m> /\ <var:z2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:8> * <var:m> /\ <var:D> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:z0> = <nat:4> /\ <var:D> = <nat:1> * <var:m> ^ <nat:2> + <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D> = <nat:1> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 