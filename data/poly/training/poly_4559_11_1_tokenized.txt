\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:G1> := <var:g> ; <var:G2> := <var:G1> * <var:g> ; <var:G3> := <var:G2> * <var:g> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:7> ; <var:G2> := <var:G2> * <nat:6> ; <var:G3> := <var:G3> * <nat:8> ; <var:Q> := <var:G3> <var:Q> := <var:Q> + <var:G2> <var:Q> := <var:Q> + <var:G1> <var:Q> := <var:Q> + <var:G0> \end{verbatim} Given it to hold that $ <var:g> = <var:m> $ ahead of interpreting our segment of code it holds that we see $ <var:Q> = <nat:8> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:8> $ when code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:m> \} \\ <var:G1> := <var:g> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <var:m> \} \\ <var:G2> := <var:G1> * <var:g> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <var:m> \land <var:G2> = <var:m> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:g> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <var:m> \land <var:G2> = <var:m> ^ <nat:2> \land <var:G3> = <var:m> ^ <nat:3> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <var:m> \land <var:G2> = <var:m> ^ <nat:2> \land <var:G3> = <var:m> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G1> := <var:G1> * <nat:7> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <nat:7> * <var:m> \land <var:G2> = <var:m> ^ <nat:2> \land <var:G3> = <var:m> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G2> := <var:G2> * <nat:6> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <nat:7> * <var:m> \land <var:G2> = <nat:6> * <var:m> ^ <nat:2> \land <var:G3> = <var:m> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G3> := <var:G3> * <nat:8> ; \\ \{ <var:g> = <var:m> \land <var:G1> = <nat:7> * <var:m> \land <var:G2> = <nat:6> * <var:m> ^ <nat:2> \land <var:G3> = <nat:8> * <var:m> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:Q> := <var:G3> \\ \{ <var:g> = <var:m> \land <var:G1> = <nat:7> * <var:m> \land <var:G2> = <nat:6> * <var:m> ^ <nat:2> \land <var:G0> = <nat:8> \land <var:Q> = <nat:8> * <var:m> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:G2> \\ \{ <var:g> = <var:m> \land <var:G1> = <nat:7> * <var:m> \land <var:G0> = <nat:8> \land <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:G1> \\ \{ <var:g> = <var:m> \land <var:G0> = <nat:8> \land <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:7> * <var:m> \} \\ <var:Q> := <var:Q> + <var:G0> \\ \{ <var:g> = <var:m> \land <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:8> \} \end{eqnarray} Using typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:g> = <var:m> }} <var:G1> := <var:g> ; <var:G2> := <var:G1> * <var:g> ; <var:G3> := <var:G2> * <var:g> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:7> ; <var:G2> := <var:G2> * <nat:6> ; <var:G3> := <var:G3> * <nat:8> ; <var:Q> := <var:G3> <var:Q> := <var:Q> + <var:G2> <var:Q> := <var:Q> + <var:G1> <var:Q> := <var:Q> + <var:G0> {{ <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <var:m> /\ <var:G2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <var:m> /\ <var:G2> = <var:m> ^ <nat:2> /\ <var:G3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <var:m> /\ <var:G2> = <var:m> ^ <nat:2> /\ <var:G3> = <var:m> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <nat:7> * <var:m> /\ <var:G2> = <var:m> ^ <nat:2> /\ <var:G3> = <var:m> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <nat:7> * <var:m> /\ <var:G2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:G3> = <var:m> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <nat:7> * <var:m> /\ <var:G2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:G3> = <nat:8> * <var:m> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <nat:7> * <var:m> /\ <var:G2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:G0> = <nat:8> /\ <var:Q> = <nat:8> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G1> = <nat:7> * <var:m> /\ <var:G0> = <nat:8> /\ <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G0> = <nat:8> /\ <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:Q> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 