\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:4> ; <var:A> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:N> = <var:y> $ ( for $ <var:y> \in \mathbb{N} $ ) ahead of running the series of commands then we see $ <var:A> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing Hoare logic yields : \begin{eqnarray} \{ <var:N> = <var:y> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:N> = <var:y> \land <var:G0> = <nat:4> \} \\ <var:A> := <var:G0> \\ \{ <var:N> = <var:y> \land <var:A> = <nat:4> \} \end{eqnarray} As a result , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:4> ; <var:A> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:N> = <var:y> }} <def:poly> {{ <var:A> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:A> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 