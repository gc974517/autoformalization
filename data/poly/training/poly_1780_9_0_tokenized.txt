\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:S> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:S> ; <var:w2> := <var:w2> * <var:S> ; <var:d> := <var:w2> ; <var:d> := <var:d> + <var:w1> ; <var:d> := <var:d> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Allow it to hold that $ <var:S> = <var:p> $ ( for all positive integers $ <var:p> $ ) before evaluating the code it must be that $ <var:d> = <nat:5> \times <var:p> ^ <nat:2> + <nat:7> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:S> = <var:p> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \} \\ <var:w1> := <nat:7> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:w1> = <nat:7> \} \\ <var:w1> := <var:w1> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:w1> = <nat:7> * <var:p> \} \\ <var:w2> := <nat:5> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:w1> = <nat:7> * <var:p> \land <var:w2> = <nat:5> \} \\ <var:w2> := <var:w2> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:w1> = <nat:7> * <var:p> \land <var:w2> = <nat:5> * <var:p> \} \\ <var:w2> := <var:w2> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:w1> = <nat:7> * <var:p> \land <var:w2> = <nat:5> * <var:p> ^ <nat:2> \} \\ <var:d> := <var:w2> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:w1> = <nat:7> * <var:p> \land <var:d> = <nat:5> * <var:p> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:w1> ; \\ \{ <var:S> = <var:p> \land <var:w0> = <nat:3> \land <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:7> * <var:p> \} \\ <var:d> := <var:d> + <var:w0> \\ \{ <var:S> = <var:p> \land <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:S> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:S> ; <var:w2> := <var:w2> * <var:S> ; <var:d> := <var:w2> ; <var:d> := <var:d> + <var:w1> ; <var:d> := <var:d> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:S> = <var:p> }} <def:poly> {{ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:7> * <var:p> /\ <var:w2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:7> * <var:p> /\ <var:w2> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:7> * <var:p> /\ <var:w2> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:7> * <var:p> /\ <var:d> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:w0> = <nat:3> /\ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 