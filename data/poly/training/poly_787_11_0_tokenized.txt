\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:2> ; <var:d2> := <nat:4> ; <var:d2> := <var:d2> * <var:Z> ; <var:d2> := <var:d2> * <var:Z> ; <var:d3> := <nat:3> ; <var:d3> := <var:d3> * <var:Z> ; <var:d3> := <var:d3> * <var:Z> ; <var:d3> := <var:d3> * <var:Z> ; <var:l> := <var:d3> ; <var:l> := <var:l> + <var:d2> ; <var:l> := <var:l> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:Z> = <var:z> $ ahead of running this series of instructions it holds that we have $ <var:l> = <nat:3> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:Z> = <var:z> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \} \\ <var:d2> := <nat:4> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> \} \\ <var:d2> := <var:d2> * <var:Z> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> \} \\ <var:d2> := <var:d2> * <var:Z> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> ^ <nat:2> \} \\ <var:d3> := <nat:3> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> ^ <nat:2> \land <var:d3> = <nat:3> \} \\ <var:d3> := <var:d3> * <var:Z> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> ^ <nat:2> \land <var:d3> = <nat:3> * <var:z> \} \\ <var:d3> := <var:d3> * <var:Z> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> ^ <nat:2> \land <var:d3> = <nat:3> * <var:z> ^ <nat:2> \} \\ <var:d3> := <var:d3> * <var:Z> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> ^ <nat:2> \land <var:d3> = <nat:3> * <var:z> ^ <nat:3> \} \\ <var:l> := <var:d3> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:d2> = <nat:4> * <var:z> ^ <nat:2> \land <var:l> = <nat:3> * <var:z> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:d2> ; \\ \{ <var:Z> = <var:z> \land <var:d0> = <nat:2> \land <var:l> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:d0> \\ \{ <var:Z> = <var:z> \land <var:l> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thusly , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:d2> := <nat:4> ; <var:d2> := <var:d2> * <var:Z> ; <var:d2> := <var:d2> * <var:Z> ; <var:d3> := <nat:3> ; <var:d3> := <var:d3> * <var:Z> ; <var:d3> := <var:d3> * <var:Z> ; <var:d3> := <var:d3> * <var:Z> ; <var:l> := <var:d3> ; <var:l> := <var:l> + <var:d2> ; <var:l> := <var:l> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Z> = <var:z> }} <def:poly> {{ <var:l> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:d3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:d3> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:d3> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:d3> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:l> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:d0> = <nat:2> /\ <var:l> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:l> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 