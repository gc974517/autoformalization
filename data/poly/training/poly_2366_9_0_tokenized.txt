\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:9> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:D> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:D> ; <var:A2> := <var:A2> * <var:D> ; <var:T> := <var:A2> ; <var:T> := <var:T> + <var:A1> ; <var:T> := <var:T> + <var:A0> \end{verbatim} Assuming it to be that $ <var:D> = <var:m> $ prior to executing the set of instructions , it follows that we have $ <var:T> = <nat:8> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of our segment of code is accomplished with standard Hoare techniques . Moving forward to the next step , we have \begin{eqnarray} \{ <var:D> = <var:m> \} \, <var:A0> := <nat:9> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \\ \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \, <var:A1> := <nat:4> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \} \\ \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \} \, <var:A1> := <var:A1> * <var:D> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:m> \} \end{eqnarray} This is shown with the binding inference rule from typical Hoare techniques . Taking a look at the upcoming steps found in our set of commands , we see \begin{eqnarray} \{ <var:D> = <var:m> \} \, <var:A0> := <nat:9> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \\ \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \, <var:A1> := <nat:4> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \} \end{eqnarray} This is deduced by the variable binding inference rule found in Hoare reasoning . Taking a look at the subsequent pieces of code in our list of commands , \begin{eqnarray} \{ <var:D> = <var:m> \} \, <var:A0> := <nat:9> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \\ \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \, <var:A1> := <nat:4> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \} \\ \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \} \, <var:A1> := <var:A1> * <var:D> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:m> \} \end{eqnarray} This is rigorously given with the environment update law from standard Hoare reasoning . Stepping through , \begin{eqnarray} \{ <var:D> = <var:m> \} \, <var:A0> := <nat:9> \, \{ <var:D> = <var:m> \land <var:A0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:D> = <var:m> }} <var:A0> := <nat:9> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:D> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:D> ; <var:A2> := <var:A2> * <var:D> ; <var:T> := <var:A2> ; <var:T> := <var:T> + <var:A1> ; <var:T> := <var:T> + <var:A0> {{ <var:T> = <nat:8> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:m> /\ <var:A2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:m> /\ <var:A2> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:m> /\ <var:A2> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:m> /\ <var:T> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:A0> = <nat:9> /\ <var:T> = <nat:8> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:T> = <nat:8> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 