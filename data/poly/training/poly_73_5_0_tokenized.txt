\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:3> ; <var:E1> := <nat:8> ; <var:E1> := <var:E1> * <var:v> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:v> = <var:b> $ prior to the execution of the list of commands , it follows that we see $ <var:T> = <nat:8> \cdot <var:b> + <nat:3> $ once code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:b> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:v> = <var:b> \land <var:E0> = <nat:3> \} \\ <var:E1> := <nat:8> ; \\ \{ <var:v> = <var:b> \land <var:E0> = <nat:3> \land <var:E1> = <nat:8> \} \\ <var:E1> := <var:E1> * <var:v> ; \\ \{ <var:v> = <var:b> \land <var:E0> = <nat:3> \land <var:E1> = <nat:8> \cdot <var:b> \} \\ <var:T> := <var:E1> ; \\ \{ <var:v> = <var:b> \land <var:E0> = <nat:3> \land <var:T> = <nat:8> \cdot <var:b> \} \\ <var:T> := <var:T> + <var:E0> \\ \{ <var:v> = <var:b> \land <var:T> = <nat:8> \cdot <var:b> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:3> ; <var:E1> := <nat:8> ; <var:E1> := <var:E1> * <var:v> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:v> = <var:b> }} <def:poly> {{ <var:T> = <nat:8> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:E0> = <nat:3> /\ <var:T> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:T> = <nat:8> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 