\begin{document} \begin{theorem} We define a series of instructions as \begin{verbatim} <var:A0> := <nat:5> ; <var:M> := <var:A0> \end{verbatim} Assume $ <var:H> = <var:i> $ , assuming some $ <var:i> \in \mathbb{N} $ , before the execution of this code it follows that we have $ <var:M> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our code is given with typical Hoare logic . Honing in on the proceeding statement in our segment of code , the binding code defining $ <nat:5> $ into $ <var:A0>$ . This takes the condition $ \{ <var:H> = <var:i> \} $ into $ \{ <var:H> = <var:i> \land <var:A0> = <nat:5> \} $ . Taking another step toward the upcoming line of code in the program , we have the binding statement yielding $ <var:A0$ to $ <var:M>$ . This moves the precondition $ \{ <var:H> = <var:i> \land <var:A0> = <nat:5> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:M> = <nat:5> \} $ . This is shown to be logically sound through the assignment law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:H> = <var:i> }} <var:A0> := <nat:5> ; <var:M> := <var:A0> {{ <var:M> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:M> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 