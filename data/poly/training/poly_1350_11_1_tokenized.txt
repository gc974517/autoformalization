\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:J> ; <var:E2> := <var:E1> * <var:J> ; <var:E3> := <var:E2> * <var:J> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:5> ; <var:E3> := <var:E3> * <nat:2> ; <var:A> := <var:E3> <var:A> := <var:A> + <var:E2> <var:A> := <var:A> + <var:E1> <var:A> := <var:A> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:J> = <var:K> $ ahead of interpreting the set of instructions it holds that we see $ <var:A> = <nat:2> \cdot <var:K> ^ <nat:3> + <nat:5> \cdot <var:K> ^ <nat:2> + <nat:5> \cdot <var:K> + <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} The flow of logic for this list of instructions is evident through standard Hoare techniques . Stepping forward , \begin{eqnarray} \{ <var:J> = <var:K> \} \, <var:E1> := <var:J> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <var:K> \} \, <var:E2> := <var:E1> * <var:J> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:J> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \} \, <var:E0> := <nat:6> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \, <var:E1> := <var:E1> * <nat:5> \, \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \, <var:E2> := <var:E2> * <nat:5> \, \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <nat:5> \cdot <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <nat:5> \cdot <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \, <var:E3> := <var:E3> * <nat:2> \, \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <nat:5> \cdot <var:K> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <nat:5> \cdot <var:K> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:K> ^ <nat:3> \land <var:E0> = <nat:6> \} \, <var:A> := <var:E3\, \{ <var:J> = <var:K> \land <var:E1> = <nat:5> \cdot <var:K> \land <var:E2> = <nat:5> \cdot <var:K> ^ <nat:2> \land <var:E0> = <nat:6> \land <var:A> = <nat:2> \cdot <var:K> ^ <nat:3> \} \end{eqnarray} Considering the subsequent statements contained in our series of instructions , we see \begin{eqnarray} \{ <var:J> = <var:K> \} \, <var:E1> := <var:J> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <var:K> \} \, <var:E2> := <var:E1> * <var:J> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \} \\ \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:J> \, \{ <var:J> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E3> = <var:K> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:J> ; <var:E2> := <var:E1> * <var:J> ; <var:E3> := <var:E2> * <var:J> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:5> ; <var:E3> := <var:E3> * <nat:2> ; <var:A> := <var:E3> <var:A> := <var:A> + <var:E2> <var:A> := <var:A> + <var:E1> <var:A> := <var:A> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <def:poly> {{ <var:A> = <nat:2> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <var:K> /\ <var:E2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <var:K> /\ <var:E2> = <var:K> ^ <nat:2> /\ <var:E3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <var:K> /\ <var:E2> = <var:K> ^ <nat:2> /\ <var:E3> = <var:K> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <nat:5> * <var:K> /\ <var:E2> = <var:K> ^ <nat:2> /\ <var:E3> = <var:K> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <nat:5> * <var:K> /\ <var:E2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:E3> = <var:K> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <nat:5> * <var:K> /\ <var:E2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:K> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <nat:5> * <var:K> /\ <var:E2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:E0> = <nat:6> /\ <var:A> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E1> = <nat:5> * <var:K> /\ <var:E0> = <nat:6> /\ <var:A> = <nat:2> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:E0> = <nat:6> /\ <var:A> = <nat:2> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:A> = <nat:2> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 