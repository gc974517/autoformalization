\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:4> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:V> ; <var:p2> := <nat:7> ; <var:p2> := <var:p2> * <var:V> ; <var:p2> := <var:p2> * <var:V> ; <var:y> := <var:p2> ; <var:y> := <var:y> + <var:p1> ; <var:y> := <var:y> + <var:p0> \end{verbatim} Allowing that $ <var:V> = <var:f> $ , for positive coefficients $ <var:f> $ , prior to executing our list of instructions it follows that we have $ <var:y> = <nat:7> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> + <nat:4> $ once program has executed . \end{theorem} \begin{proof} Proving correctness for our code can be shown with the following decorated list of instructions . \begin{eqnarray} \{ <var:V> = <var:f> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \} \\ <var:p1> := <nat:5> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:p1> = <nat:5> \} \\ <var:p1> := <var:p1> * <var:V> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:p1> = <nat:5> \cdot <var:f> \} \\ <var:p2> := <nat:7> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:p1> = <nat:5> \cdot <var:f> \land <var:p2> = <nat:7> \} \\ <var:p2> := <var:p2> * <var:V> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:p1> = <nat:5> \cdot <var:f> \land <var:p2> = <nat:7> \cdot <var:f> \} \\ <var:p2> := <var:p2> * <var:V> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:p1> = <nat:5> \cdot <var:f> \land <var:p2> = <nat:7> \cdot <var:f> ^ <nat:2> \} \\ <var:y> := <var:p2> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:p1> = <nat:5> \cdot <var:f> \land <var:y> = <nat:7> \cdot <var:f> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:p1> ; \\ \{ <var:V> = <var:f> \land <var:p0> = <nat:4> \land <var:y> = <nat:7> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> \} \\ <var:y> := <var:y> + <var:p0> \\ \{ <var:V> = <var:f> \land <var:y> = <nat:7> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> + <nat:4> \} \end{eqnarray} Applying usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:V> = <var:f> }} <var:p0> := <nat:4> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:V> ; <var:p2> := <nat:7> ; <var:p2> := <var:p2> * <var:V> ; <var:p2> := <var:p2> * <var:V> ; <var:y> := <var:p2> ; <var:y> := <var:y> + <var:p1> ; <var:y> := <var:y> + <var:p0> {{ <var:y> = <nat:7> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:5> * <var:f> /\ <var:p2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:5> * <var:f> /\ <var:p2> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:5> * <var:f> /\ <var:p2> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:5> * <var:f> /\ <var:y> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:p0> = <nat:4> /\ <var:y> = <nat:7> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:y> = <nat:7> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 