\begin{document} \begin{theorem} Consider the following list of commands as follows \begin{verbatim} <var:n1> := <var:f> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:1> ; <var:W> := <var:n1> <var:W> := <var:W> + <var:n0> \end{verbatim} Given --- for some natural coefficients $ <var:K> $ --- it to be that $ <var:f> = <var:K> $ ahead of the evaluation of the set of instructions , then $ <var:W> = <nat:1> \times <var:K> + <nat:9> $ once segment of code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:K> \} \\ <var:n1> := <var:f> ; \\ \{ <var:f> = <var:K> \land <var:n1> = <var:K> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:f> = <var:K> \land <var:n1> = <var:K> \land <var:n0> = <nat:9> \} \\ <var:n1> := <var:n1> * <nat:1> ; \\ \{ <var:f> = <var:K> \land <var:n1> = <nat:1> * <var:K> \land <var:n0> = <nat:9> \} \\ <var:W> := <var:n1> \\ \{ <var:f> = <var:K> \land <var:n0> = <nat:9> \land <var:W> = <nat:1> * <var:K> \} \\ <var:W> := <var:W> + <var:n0> \\ \{ <var:f> = <var:K> \land <var:W> = <nat:1> * <var:K> + <nat:9> \} \end{eqnarray} Using standard Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:f> = <var:K> }} <var:n1> := <var:f> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:1> ; <var:W> := <var:n1> <var:W> := <var:W> + <var:n0> {{ <var:W> = <nat:1> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:n1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:n1> = <var:K> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:n1> = <nat:1> * <var:K> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:n0> = <nat:9> /\ <var:W> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:W> = <nat:1> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 