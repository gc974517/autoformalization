\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:9> ; <var:p> := <var:n0> \end{verbatim} Given --- given any positive coefficients $ <var:P> $ --- it to hold that $ <var:T> = <var:P> $ before interpreting the code , then we have $ <var:p> = <nat:9> $ after segment of code executes . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is demonstrated using the below decorated code segment . \begin{eqnarray} \{ <var:T> = <var:P> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:T> = <var:P> \land <var:n0> = <nat:9> \} \\ <var:p> := <var:n0> \\ \{ <var:T> = <var:P> \land <var:p> = <nat:9> \} \end{eqnarray} Applying typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <var:n0> := <nat:9> ; <var:p> := <var:n0> {{ <var:p> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:p> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 