\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:K1> := <var:F> ; <var:K2> := <var:K1> * <var:F> ; <var:K3> := <var:K2> * <var:F> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:3> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:9> ; <var:H> := <var:K3> <var:H> := <var:H> + <var:K2> <var:H> := <var:H> + <var:K1> <var:H> := <var:H> + <var:K0> \end{verbatim} Assuming it to hold that $ <var:F> = <var:S> $ ahead of the evaluation of the code segment , then $ <var:H> = <nat:9> \times <var:S> ^ <nat:3> + <nat:5> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:8> $ once list of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is shown through typical Hoare techniques . Shifting focus toward the following lines of codeseen in the series of instructions , we have \verb | { <var:F> = <var:S> } <var:K1> := <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> } | , \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> } <var:K2> := <var:K1> * <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> } | , \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> } <var:K3> := <var:K2> * <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> } | , \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> } <var:K0> := <nat:8> { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> \land <var:K0> = <nat:8> } | , \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> \land <var:K0> = <nat:8> } <var:K1> := <var:K1> * <nat:3> { <var:F> = <var:S> \land <var:K1> = <nat:3> \times <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> \land <var:K0> = <nat:8> } | and \verb | { <var:F> = <var:S> \land <var:K1> = <nat:3> \times <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> \land <var:K0> = <nat:8> } <var:K2> := <var:K2> * <nat:5> { <var:F> = <var:S> \land <var:K1> = <nat:3> \times <var:S> \land <var:K2> = <nat:5> \times <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> \land <var:K0> = <nat:8> } | . Shifting focus toward the upcoming statements seen in the list of instructions , we have \verb | { <var:F> = <var:S> } <var:K1> := <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> } | , \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> } <var:K2> := <var:K1> * <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> } | and \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> } <var:K3> := <var:K2> * <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> \land <var:K3> = <var:S> ^ <nat:3> } | . Following , we have \verb | { <var:F> = <var:S> } <var:K1> := <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> } | and \verb | { <var:F> = <var:S> \land <var:K1> = <var:S> } <var:K2> := <var:K1> * <var:F> { <var:F> = <var:S> \land <var:K1> = <var:S> \land <var:K2> = <var:S> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:F> = <var:S> }} <var:K1> := <var:F> ; <var:K2> := <var:K1> * <var:F> ; <var:K3> := <var:K2> * <var:F> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:3> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:9> ; <var:H> := <var:K3> <var:H> := <var:H> + <var:K2> <var:H> := <var:H> + <var:K1> <var:H> := <var:H> + <var:K0> {{ <var:H> = <nat:9> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <var:S> /\ <var:K2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <var:S> /\ <var:K2> = <var:S> ^ <nat:2> /\ <var:K3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <var:S> /\ <var:K2> = <var:S> ^ <nat:2> /\ <var:K3> = <var:S> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <nat:3> * <var:S> /\ <var:K2> = <var:S> ^ <nat:2> /\ <var:K3> = <var:S> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <nat:3> * <var:S> /\ <var:K2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:K3> = <var:S> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <nat:3> * <var:S> /\ <var:K2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <nat:3> * <var:S> /\ <var:K2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:K0> = <nat:8> /\ <var:H> = <nat:9> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K1> = <nat:3> * <var:S> /\ <var:K0> = <nat:8> /\ <var:H> = <nat:9> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:K0> = <nat:8> /\ <var:H> = <nat:9> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:H> = <nat:9> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 