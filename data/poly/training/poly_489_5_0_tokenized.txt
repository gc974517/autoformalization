\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:G> ; <var:x> := <var:W1> ; <var:x> := <var:x> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assuming --- assuming some $ <var:I> \in \mathbb{N} $ --- it to be that $ <var:G> = <var:I> $ ahead of executing this list of commands then $ <var:x> = <nat:4> \times <var:I> + <nat:1> $ when program executes . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:G> = <var:I> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:G> = <var:I> \land <var:W0> = <nat:1> \} \\ <var:W1> := <nat:4> ; \\ \{ <var:G> = <var:I> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \} \\ <var:W1> := <var:W1> * <var:G> ; \\ \{ <var:G> = <var:I> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \times <var:I> \} \\ <var:x> := <var:W1> ; \\ \{ <var:G> = <var:I> \land <var:W0> = <nat:1> \land <var:x> = <nat:4> \times <var:I> \} \\ <var:x> := <var:x> + <var:W0> \\ \{ <var:G> = <var:I> \land <var:x> = <nat:4> \times <var:I> + <nat:1> \} \end{eqnarray} Considering the above , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:G> ; <var:x> := <var:W1> ; <var:x> := <var:x> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:G> = <var:I> }} <def:poly> {{ <var:x> = <nat:4> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:W0> = <nat:1> /\ <var:x> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:x> = <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 