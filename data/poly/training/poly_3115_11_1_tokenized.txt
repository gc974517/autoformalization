\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:n1> := <var:y> ; <var:n2> := <var:n1> * <var:y> ; <var:n3> := <var:n2> * <var:y> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:1> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:2> ; <var:d> := <var:n3> <var:d> := <var:d> + <var:n2> <var:d> := <var:d> + <var:n1> <var:d> := <var:d> + <var:n0> \end{verbatim} Allow , given any $ <var:I> $ , it to be that $ <var:y> = <var:I> $ before the execution of our set of commands it must be that $ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> $ when series of commands finishes . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:y> = <var:I> \} \\ <var:n1> := <var:y> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <var:I> \} \end{eqnarray} Advancing evaluating our program gives : \begin{eqnarray} <var:n2> := <var:n1> * <var:y> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <var:I> \land <var:n2> = <var:I> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:y> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <var:I> \land <var:n2> = <var:I> ^ <nat:2> \land <var:n3> = <var:I> ^ <nat:3> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <var:I> \land <var:n2> = <var:I> ^ <nat:2> \land <var:n3> = <var:I> ^ <nat:3> \land <var:n0> = <nat:2> \} \\ <var:n1> := <var:n1> * <nat:1> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <nat:1> * <var:I> \land <var:n2> = <var:I> ^ <nat:2> \land <var:n3> = <var:I> ^ <nat:3> \land <var:n0> = <nat:2> \} \\ <var:n2> := <var:n2> * <nat:9> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <nat:1> * <var:I> \land <var:n2> = <nat:9> * <var:I> ^ <nat:2> \land <var:n3> = <var:I> ^ <nat:3> \land <var:n0> = <nat:2> \} \\ <var:n3> := <var:n3> * <nat:2> ; \\ \{ <var:y> = <var:I> \land <var:n1> = <nat:1> * <var:I> \land <var:n2> = <nat:9> * <var:I> ^ <nat:2> \land <var:n3> = <nat:2> * <var:I> ^ <nat:3> \land <var:n0> = <nat:2> \} \\ <var:d> := <var:n3> \\ \{ <var:y> = <var:I> \land <var:n1> = <nat:1> * <var:I> \land <var:n2> = <nat:9> * <var:I> ^ <nat:2> \land <var:n0> = <nat:2> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:n2> \\ \{ <var:y> = <var:I> \land <var:n1> = <nat:1> * <var:I> \land <var:n0> = <nat:2> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:n1> \\ \{ <var:y> = <var:I> \land <var:n0> = <nat:2> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:1> * <var:I> \} \\ <var:d> := <var:d> + <var:n0> \\ \{ <var:y> = <var:I> \land <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> \} \end{eqnarray} Given the above , the code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:y> = <var:I> }} <var:n1> := <var:y> ; <var:n2> := <var:n1> * <var:y> ; <var:n3> := <var:n2> * <var:y> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:1> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:2> ; <var:d> := <var:n3> <var:d> := <var:d> + <var:n2> <var:d> := <var:d> + <var:n1> <var:d> := <var:d> + <var:n0> {{ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <var:I> /\ <var:n2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <var:I> /\ <var:n2> = <var:I> ^ <nat:2> /\ <var:n3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <var:I> /\ <var:n2> = <var:I> ^ <nat:2> /\ <var:n3> = <var:I> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <nat:1> * <var:I> /\ <var:n2> = <var:I> ^ <nat:2> /\ <var:n3> = <var:I> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <nat:1> * <var:I> /\ <var:n2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:n3> = <var:I> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <nat:1> * <var:I> /\ <var:n2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:I> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <nat:1> * <var:I> /\ <var:n2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:n0> = <nat:2> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n1> = <nat:1> * <var:I> /\ <var:n0> = <nat:2> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:n0> = <nat:2> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 