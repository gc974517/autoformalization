\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:8> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:Y> ; <var:C2> := <nat:7> ; <var:C2> := <var:C2> * <var:Y> ; <var:C2> := <var:C2> * <var:Y> ; <var:F> := <var:C2> ; <var:F> := <var:F> + <var:C1> ; <var:F> := <var:F> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Y> = <var:u> $ prior to evaluating our set of instructions it must be that $ <var:F> = <nat:7> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for this set of commands can be seen using this decorated program . \begin{eqnarray} \{ <var:Y> = <var:u> \} \\ <var:C0> := <nat:8> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:Y> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \} \\ <var:C2> := <nat:7> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:7> \} \\ <var:C2> := <var:C2> * <var:Y> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:7> * <var:u> \} \\ <var:C2> := <var:C2> * <var:Y> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:7> * <var:u> ^ <nat:2> \} \\ <var:F> := <var:C2> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:F> = <nat:7> * <var:u> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:C1> ; \\ \{ <var:Y> = <var:u> \land <var:C0> = <nat:8> \land <var:F> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> \} \\ <var:F> := <var:F> + <var:C0> \\ \{ <var:Y> = <var:u> \land <var:F> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> \} \end{eqnarray} The application of usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:8> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:Y> ; <var:C2> := <nat:7> ; <var:C2> := <var:C2> * <var:Y> ; <var:C2> := <var:C2> * <var:Y> ; <var:F> := <var:C2> ; <var:F> := <var:F> + <var:C1> ; <var:F> := <var:F> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:Y> = <var:u> }} <def:poly> {{ <var:F> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:F> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:C0> = <nat:8> /\ <var:F> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:u> /\ <var:F> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 