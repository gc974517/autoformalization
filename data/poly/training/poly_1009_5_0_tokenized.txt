\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:W> ; <var:X> := <var:R1> ; <var:X> := <var:X> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:W> = <var:s> $ ahead of the execution of this list of instructions , it must be that $ <var:X> = <nat:9> \cdot <var:s> + <nat:6> $ when code executes . \end{theorem} \begin{proof} Arguing the correctness of the segment of code can be given using usual Hoare reasoning . Following , we have the variable binding line assigning $ <nat:6> $ as $ <var:R0>$ . This line transfers the precondition $ \{ <var:W> = <var:s> \} $ as the postcondition $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \} $ . Stepping forward , the binding statement assigning $ <nat:9> $ as $ <var:R1>$ . This command advances $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \} $ as the postcondition $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \land <var:R1> = <nat:9> \} $ . Stepping forward , we see the environment update command binding $ <var:R1> * <var:W> $ toward $ <var:R1>$ . This command advances the condition $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \land <var:R1> = <nat:9> \} $ as $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \land <var:R1> = <nat:9> \times <var:s> \} $ . This is deduced through the assignment law given in typical Hoare reasoning . Moving on , we have the assignment code yielding $ <var:R1> $ toward $ <var:X>$ . This code redefines $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \land <var:R1> = <nat:9> \times <var:s> \} $ toward the condition $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \land <var:X> = <nat:9> \times <var:s> \} $ . This is deduced with the assignment law found in Hoare logic . Now , we have the variable assignmet code binding $ <var:X> + <var:R0$ as $ <var:X>$ . This moves the precondition $ \{ <var:W> = <var:s> \land <var:R0> = <nat:6> \land <var:X> = <nat:9> \times <var:s> \} $ as the condition $ \{ <var:W> = <var:s> \land <var:X> = <nat:9> \times <var:s> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:W> ; <var:X> := <var:R1> ; <var:X> := <var:X> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:W> = <var:s> }} <def:poly> {{ <var:X> = <nat:9> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:R0> = <nat:6> /\ <var:X> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:X> = <nat:9> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 