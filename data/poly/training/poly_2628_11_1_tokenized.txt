\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:U> ; <var:y2> := <var:y1> * <var:U> ; <var:y3> := <var:y2> * <var:U> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:5> ; <var:y2> := <var:y2> * <nat:4> ; <var:y3> := <var:y3> * <nat:2> ; <var:b> := <var:y3> <var:b> := <var:b> + <var:y2> <var:b> := <var:b> + <var:y1> <var:b> := <var:b> + <var:y0> \end{verbatim} Given it to hold that $ <var:U> = <var:w> $ prior to the evaluation of this set of instructions , it follows that we have $ <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is evident through usual Hoare reasoning . Taking another step toward the next statement found in our series of instructions , the variable update statement giving $ <var:U> $ toward $ <var:y1>$ . This statement advances the precondition $ \{ <var:U> = <var:w> \} $ to the postcondition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \} $ . Focusing on the upcoming line of code found in our set of commands , we have the variable assignmet command \verb | <var:y2> := <var:y1> * <var:U> ; | . This transfers the condition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \} $ to the condition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \land <var:y2> = <var:w> ^ <nat:2> \} $ . This is guaranteed through the assignment law in usual Hoare logic . Moving forward to the following line found in our code segment , we have the variable binding statement \verb | <var:y3> := <var:y2> * <var:U> ; | . This code moves the precondition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \land <var:y2> = <var:w> ^ <nat:2> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \land <var:y2> = <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \} $ . This is known to be sound through the assignment scheme obtained from standard Hoare techniques . Focusing on the following line of code seen in the list of commands , we have the variable binding code yielding $ <nat:6> $ into $ <var:y0>$ . This moves the precondition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \land <var:y2> = <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \} $ as $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \land <var:y2> = <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ . This is deduced by the assignment law defined in typical Hoare logic . Focusing on the upcoming bit of code contained in the list of instructions , the binding code \verb | <var:y1> := <var:y1> * <nat:5> ; | . This transfers the precondition $ \{ <var:U> = <var:w> \land <var:y1> = <var:w> \land <var:y2> = <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ to $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ . This is deduced with the assignment inference rule in Hoare techniques . Shifting focus toward the following piece of code contained in the list of instructions , we have the variable assignmet statement \verb | <var:y2> := <var:y2> * <nat:4> ; | . This takes the condition $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ to the condition $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <nat:4> * <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ . This is deduced by the assignment inference rule given in usual Hoare reasoning . Moving forward , the environment update line \verb | <var:y3> := <var:y3> * <nat:2> ; | . This command moves $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <nat:4> * <var:w> ^ <nat:2> \land <var:y3> = <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ as $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <nat:4> * <var:w> ^ <nat:2> \land <var:y3> = <nat:2> * <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ . Paying attention to the following piece of code seen in the code , we see the variable update command \verb | <var:b> := <var:y3> | . This takes the condition $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <nat:4> * <var:w> ^ <nat:2> \land <var:y3> = <nat:2> * <var:w> ^ <nat:3> \land <var:y0> = <nat:6> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <nat:4> * <var:w> ^ <nat:2> \land <var:y0> = <nat:6> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> \} $ . Moving on to the upcoming command found in our list of instructions , the variable binding command \verb | <var:b> := <var:b> + <var:y2> | . This forwards the precondition $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y2> = <nat:4> * <var:w> ^ <nat:2> \land <var:y0> = <nat:6> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> \} $ toward the postcondition $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y0> = <nat:6> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> \} $ . Next , we see the environment update command assigning $ <var:b> + <var:y1$ toward $ <var:b>$ . This code redefines $ \{ <var:U> = <var:w> \land <var:y1> = <nat:5> * <var:w> \land <var:y0> = <nat:6> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> \} $ into $ \{ <var:U> = <var:w> \land <var:y0> = <nat:6> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> \} $ . Moving onward , we have the variable assignmet line giving $ <var:b> + <var:y0$ into $ <var:b>$ . This command forwards the condition $ \{ <var:U> = <var:w> \land <var:y0> = <nat:6> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> \} $ into the condition $ \{ <var:U> = <var:w> \land <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:U> = <var:w> }} <var:y1> := <var:U> ; <var:y2> := <var:y1> * <var:U> ; <var:y3> := <var:y2> * <var:U> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:5> ; <var:y2> := <var:y2> * <nat:4> ; <var:y3> := <var:y3> * <nat:2> ; <var:b> := <var:y3> <var:b> := <var:b> + <var:y2> <var:b> := <var:b> + <var:y1> <var:b> := <var:b> + <var:y0> {{ <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <var:w> /\ <var:y2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <var:w> /\ <var:y2> = <var:w> ^ <nat:2> /\ <var:y3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <var:w> /\ <var:y2> = <var:w> ^ <nat:2> /\ <var:y3> = <var:w> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <var:w> ^ <nat:2> /\ <var:y3> = <var:w> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:y3> = <var:w> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:y3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:y0> = <nat:6> /\ <var:b> = <nat:2> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y0> = <nat:6> /\ <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:y0> = <nat:6> /\ <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:b> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 