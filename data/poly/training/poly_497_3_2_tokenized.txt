\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p> := <nat:4> ; <var:p> := <nat:4> + <var:p> * <var:T> ; <var:p> := <nat:2> + <var:p> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:T> = <var:m> $ , for some natural numbers $ <var:m> $ , before evaluating the segment of code then $ <var:p> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> $ after set of instructions exits . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:T> = <var:m> \} \\ <var:p> := <nat:4> ; \\ \{ <var:T> = <var:m> \land <var:p> = <nat:4> \} \\ <var:p> := <nat:4> + <var:p> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:p> = <nat:4> * <var:m> + <nat:4> \} \\ <var:p> := <nat:2> + <var:p> * <var:T> \\ \{ <var:T> = <var:m> \land <var:p> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} \end{eqnarray} Considering the above , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:4> ; <var:p> := <nat:4> + <var:p> * <var:T> ; <var:p> := <nat:2> + <var:p> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:T> = <var:m> }} <def:poly> {{ <var:p> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:p> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:p> = <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:p> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 