\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:f> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:4> ; <var:H> := <var:d1> <var:H> := <var:H> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:f> = <var:S> $ --- assuming some $ <var:S> $ --- ahead of the execution of the series of instructions , it holds that we have $ <var:H> = <nat:4> \times <var:S> + <nat:8> $ once set of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of our code segment is clear with standard Hoare reasoning . Shifting focus toward the next statements found in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:S> \} & <var:d1> := <var:f> & \{ <var:f> = <var:S> \land <var:d1> = <var:S> \} \\ \{ <var:f> = <var:S> \land <var:d1> = <var:S> \} & <var:d0> := <nat:8> & \{ <var:f> = <var:S> \land <var:d1> = <var:S> \land <var:d0> = <nat:8> \} \\ \{ <var:f> = <var:S> \land <var:d1> = <var:S> \land <var:d0> = <nat:8> \} & <var:d1> := <var:d1> * <nat:4> & \{ <var:f> = <var:S> \land <var:d1> = <nat:4> \cdot <var:S> \land <var:d0> = <nat:8> \} \end{tabular} Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:S> \} & <var:d1> := <var:f> & \{ <var:f> = <var:S> \land <var:d1> = <var:S> \} \\ \{ <var:f> = <var:S> \land <var:d1> = <var:S> \} & <var:d0> := <nat:8> & \{ <var:f> = <var:S> \land <var:d1> = <var:S> \land <var:d0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:f> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:4> ; <var:H> := <var:d1> <var:H> := <var:H> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:f> = <var:S> }} <def:poly> {{ <var:H> = <nat:4> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:d1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:d1> = <var:S> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:d1> = <nat:4> * <var:S> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:d0> = <nat:8> /\ <var:H> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:H> = <nat:4> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 