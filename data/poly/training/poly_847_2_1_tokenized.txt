\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:9> ; <var:F> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:A> = <var:C> $ ahead of executing our series of instructions then we have $ <var:F> = <nat:9> $ after segment of code has terminated . \end{theorem} \begin{proof} The proof of our set of commands is shown by the below decorated code segment . \begin{eqnarray} \{ <var:A> = <var:C> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:A> = <var:C> \land <var:r0> = <nat:9> \} \\ <var:F> := <var:r0> \\ \{ <var:A> = <var:C> \land <var:F> = <nat:9> \} \end{eqnarray} Using Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:9> ; <var:F> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:A> = <var:C> }} <def:poly> {{ <var:F> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:F> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 