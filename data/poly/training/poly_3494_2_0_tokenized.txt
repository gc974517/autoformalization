\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:7> ; <var:c> := <var:Q0> \end{verbatim} Given it to be that $ <var:U> = <var:K> $ , for whole numbers $ <var:K> $ , ahead of the execution of the segment of code , it holds that we have $ <var:c> = <nat:7> $ . \end{theorem} \begin{proof} The method of proof for our program can be demonstrated using Hoare logic . Jumping to the next line of code seen in the list of commands , \begin{verbatim} { <var:U> = <var:K> } <var:Q0> := <nat:7> { <var:U> = <var:K> \land <var:Q0> = <nat:7> } \end{verbatim} Shifting focus toward the next line of code seen in our segment of code , we see \begin{verbatim} { <var:U> = <var:K> } <var:Q0> := <nat:7> { <var:U> = <var:K> \land <var:Q0> = <nat:7> } \end{verbatim} This is given with the assignment rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <var:Q0> := <nat:7> ; <var:c> := <var:Q0> {{ <var:c> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:c> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 