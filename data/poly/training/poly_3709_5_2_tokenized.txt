\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <var:j> * <var:h> ; <var:j> := <nat:2> + <var:j> * <var:h> ; <var:j> := <nat:1> + <var:j> * <var:h> ; <var:j> := <nat:4> + <var:j> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allow --- for all positive coefficients $ <var:H> $ --- $ <var:h> = <var:H> $ ahead of running the list of commands it holds that we have $ <var:j> = <nat:2> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be done using usual Hoare logic . Moving onward , we see \verb | { <var:h> = <var:H> } <var:j> := <nat:2> { <var:h> = <var:H> \land <var:j> = <nat:2> } | , \verb | { <var:h> = <var:H> \land <var:j> = <nat:2> } <var:j> := <var:j> * <var:h> { <var:h> = <var:H> \land <var:j> = <nat:2> * <var:H> + } | , \verb | { <var:h> = <var:H> \land <var:j> = <nat:2> * <var:H> + } <var:j> := <nat:2> + <var:j> * <var:h> { <var:h> = <var:H> \land <var:j> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> } | and \verb | { <var:h> = <var:H> \land <var:j> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> } <var:j> := <nat:1> + <var:j> * <var:h> { <var:h> = <var:H> \land <var:j> = <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + <nat:1> } | . Jumping to the upcoming statement seen in our list of instructions , we have \verb | { <var:h> = <var:H> } <var:j> := <nat:2> { <var:h> = <var:H> \land <var:j> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <var:j> * <var:h> ; <var:j> := <nat:2> + <var:j> * <var:h> ; <var:j> := <nat:1> + <var:j> * <var:h> ; <var:j> := <nat:4> + <var:j> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:h> = <var:H> }} <def:poly> {{ <var:j> = <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:j> = <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:j> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:j> = <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:j> = <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 