\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:z> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:z> ; <var:D2> := <var:D2> * <var:z> ; <var:a> := <var:D2> ; <var:a> := <var:a> + <var:D1> ; <var:a> := <var:a> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:z> = <var:M> $ , for positive numbers $ <var:M> $ , prior to running this series of instructions , it follows that $ <var:a> = <nat:1> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare reasoning yields : \begin{eqnarray} \{ <var:z> = <var:M> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \} \\ <var:D1> := <nat:9> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:D1> = <nat:9> \} \\ <var:D1> := <var:D1> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:D1> = <nat:9> \cdot <var:M> \} \\ <var:D2> := <nat:1> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:D1> = <nat:9> \cdot <var:M> \land <var:D2> = <nat:1> \} \\ <var:D2> := <var:D2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:D1> = <nat:9> \cdot <var:M> \land <var:D2> = <nat:1> \cdot <var:M> \} \\ <var:D2> := <var:D2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:D1> = <nat:9> \cdot <var:M> \land <var:D2> = <nat:1> \cdot <var:M> ^ <nat:2> \} \\ <var:a> := <var:D2> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:D1> = <nat:9> \cdot <var:M> \land <var:a> = <nat:1> \cdot <var:M> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:D1> ; \\ \{ <var:z> = <var:M> \land <var:D0> = <nat:2> \land <var:a> = <nat:1> \cdot <var:M> ^ <nat:2> + <nat:9> \cdot <var:M> \} \\ <var:a> := <var:a> + <var:D0> \\ \{ <var:z> = <var:M> \land <var:a> = <nat:1> \cdot <var:M> ^ <nat:2> + <nat:9> \cdot <var:M> + <nat:2> \} \end{eqnarray} Therefore , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:2> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:z> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:z> ; <var:D2> := <var:D2> * <var:z> ; <var:a> := <var:D2> ; <var:a> := <var:a> + <var:D1> ; <var:a> := <var:a> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <def:poly> {{ <var:a> = <nat:1> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:9> * <var:M> /\ <var:D2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:9> * <var:M> /\ <var:D2> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:9> * <var:M> /\ <var:D2> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:9> * <var:M> /\ <var:a> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:D0> = <nat:2> /\ <var:a> = <nat:1> * <var:M> ^ <nat:2> + <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:a> = <nat:1> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 