\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:x> ; <var:s2> := <var:s1> * <var:x> ; <var:s3> := <var:s2> * <var:x> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:1> ; <var:s3> := <var:s3> * <nat:1> ; <var:V> := <var:s3> <var:V> := <var:V> + <var:s2> <var:V> := <var:V> + <var:s1> <var:V> := <var:V> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:x> = <var:g> $ prior to running this code , then $ <var:V> = <nat:1> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the program can be shown by Hoare reasoning . Advancing to the following lines of codecontained in the segment of code , \verb | { <var:x> = <var:g> } <var:s1> := <var:x> { <var:x> = <var:g> \land <var:s1> = <var:g> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> } <var:s2> := <var:s1> * <var:x> { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> } <var:s3> := <var:s2> * <var:x> { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> } <var:s0> := <nat:2> { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } <var:s1> := <var:s1> * <nat:2> { <var:x> = <var:g> \land <var:s1> = <nat:2> \times <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <nat:2> \times <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } <var:s2> := <var:s2> * <nat:1> { <var:x> = <var:g> \land <var:s1> = <nat:2> \times <var:g> \land <var:s2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } | and \verb | { <var:x> = <var:g> \land <var:s1> = <nat:2> \times <var:g> \land <var:s2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } <var:s3> := <var:s3> * <nat:1> { <var:x> = <var:g> \land <var:s1> = <nat:2> \times <var:g> \land <var:s2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:s3> = <nat:1> \times <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } | . This is ensured using the binding rule defined by usual Hoare techniques . Advancing , we have \verb | { <var:x> = <var:g> } <var:s1> := <var:x> { <var:x> = <var:g> \land <var:s1> = <var:g> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> } <var:s2> := <var:s1> * <var:x> { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> } | , \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> } <var:s3> := <var:s2> * <var:x> { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> } | and \verb | { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> } <var:s0> := <nat:2> { <var:x> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> } | . This is guaranteed using the variable binding scheme defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:x> ; <var:s2> := <var:s1> * <var:x> ; <var:s3> := <var:s2> * <var:x> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:1> ; <var:s3> := <var:s3> * <nat:1> ; <var:V> := <var:s3> <var:V> := <var:V> + <var:s2> <var:V> := <var:V> + <var:s1> <var:V> := <var:V> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:x> = <var:g> }} <def:poly> {{ <var:V> = <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <var:g> /\ <var:s2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <var:g> /\ <var:s2> = <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <var:g> /\ <var:s2> = <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <nat:2> * <var:g> /\ <var:s2> = <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <nat:2> * <var:g> /\ <var:s2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <nat:2> * <var:g> /\ <var:s2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:s3> = <nat:1> * <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <nat:2> * <var:g> /\ <var:s2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:s0> = <nat:2> /\ <var:V> = <nat:1> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s1> = <nat:2> * <var:g> /\ <var:s0> = <nat:2> /\ <var:V> = <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:s0> = <nat:2> /\ <var:V> = <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:V> = <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 