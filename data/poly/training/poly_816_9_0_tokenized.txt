\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:7> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:i> ; <var:Z2> := <nat:5> ; <var:Z2> := <var:Z2> * <var:i> ; <var:Z2> := <var:Z2> * <var:i> ; <var:h> := <var:Z2> ; <var:h> := <var:h> + <var:Z1> ; <var:h> := <var:h> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:i> = <var:o> $ ahead of evaluating this code segment it follows that we have $ <var:h> = <nat:5> \times <var:o> ^ <nat:2> + <nat:9> \times <var:o> + <nat:7> $ once list of commands executes . \end{theorem} \begin{proof} The proof of our set of commands is demonstrated using typical Hoare logic . Honing in on the proceeding step contained in our set of instructions , we have the variable update line binding $ <nat:7> $ into $ <var:Z0>$ . This command takes the condition $ \{ <var:i> = <var:o> \} $ as $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \} $ . Stepping forward , we have the variable update line \verb | <var:Z1> := <nat:9> ; | . This takes $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \} $ to the condition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> \} $ . This is shown to be logically sound using the assignment inference rule found in usual Hoare reasoning . Moving forward , the binding line defining $ <var:Z1> * <var:i> $ toward $ <var:Z1>$ . This transfers the condition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> \} $ as the postcondition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \} $ . Going to the next step , we have the environment update command \verb | <var:Z2> := <nat:5> ; | . This line forwards the precondition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \} $ as the condition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:Z2> = <nat:5> \} $ . Further , the variable assignmet line \verb | <var:Z2> := <var:Z2> * <var:i> ; | . This advances $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:Z2> = <nat:5> \} $ into $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:Z2> = <nat:5> * <var:o> \} $ . Shifting focus toward the proceeding bit of code contained in the segment of code , the variable assignmet command yielding $ <var:Z2> * <var:i> $ to $ <var:Z2>$ . This advances $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:Z2> = <nat:5> * <var:o> \} $ to the postcondition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:Z2> = <nat:5> * <var:o> ^ <nat:2> \} $ . This is sound through the assignment rule defined by usual Hoare logic . Now , we have the variable assignmet command yielding $ <var:Z2> $ to $ <var:h>$ . This redefines the condition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:Z2> = <nat:5> * <var:o> ^ <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:h> = <nat:5> * <var:o> ^ <nat:2> \} $ . Stepping forward , we have the environment update line assigning $ <var:h> + <var:Z1> $ toward $ <var:h>$ . This moves $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:9> * <var:o> \land <var:h> = <nat:5> * <var:o> ^ <nat:2> \} $ toward $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:h> = <nat:5> * <var:o> ^ <nat:2> + <nat:9> * <var:o> \} $ . Observing the proceeding statement found in our set of commands , we see the assignment command \verb | <var:h> := <var:h> + <var:Z0> | . This redefines the condition $ \{ <var:i> = <var:o> \land <var:Z0> = <nat:7> \land <var:h> = <nat:5> * <var:o> ^ <nat:2> + <nat:9> * <var:o> \} $ toward $ \{ <var:i> = <var:o> \land <var:h> = <nat:5> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:7> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:i> ; <var:Z2> := <nat:5> ; <var:Z2> := <var:Z2> * <var:i> ; <var:Z2> := <var:Z2> * <var:i> ; <var:h> := <var:Z2> ; <var:h> := <var:h> + <var:Z1> ; <var:h> := <var:h> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:i> = <var:o> }} <def:poly> {{ <var:h> = <nat:5> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:9> * <var:o> /\ <var:Z2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:9> * <var:o> /\ <var:Z2> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:9> * <var:o> /\ <var:Z2> = <nat:5> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:9> * <var:o> /\ <var:h> = <nat:5> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:h> = <nat:5> * <var:o> ^ <nat:2> + <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:h> = <nat:5> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 