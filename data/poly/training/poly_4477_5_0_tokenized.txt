\begin{document} \begin{theorem} We define a series of instructions as follows \begin{verbatim} <var:k0> := <nat:6> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:L> ; <var:g> := <var:k1> ; <var:g> := <var:g> + <var:k0> \end{verbatim} Allowing , for any $ <var:J> \in \mathbb{N} $ , that we have $ <var:L> = <var:J> $ ahead of running our set of commands , it must be that we have $ <var:g> = <nat:4> \times <var:J> + <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:J> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:L> = <var:J> \land <var:k0> = <nat:6> \} \\ <var:k1> := <nat:4> ; \\ \{ <var:L> = <var:J> \land <var:k0> = <nat:6> \land <var:k1> = <nat:4> \} \\ <var:k1> := <var:k1> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:k0> = <nat:6> \land <var:k1> = <nat:4> \times <var:J> \} \\ <var:g> := <var:k1> ; \\ \{ <var:L> = <var:J> \land <var:k0> = <nat:6> \land <var:g> = <nat:4> \times <var:J> \} \\ <var:g> := <var:g> + <var:k0> \\ \{ <var:L> = <var:J> \land <var:g> = <nat:4> \times <var:J> + <nat:6> \} \end{eqnarray} Hence , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:L> = <var:J> }} <var:k0> := <nat:6> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:L> ; <var:g> := <var:k1> ; <var:g> := <var:g> + <var:k0> {{ <var:g> = <nat:4> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:k0> = <nat:6> /\ <var:g> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:g> = <nat:4> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 