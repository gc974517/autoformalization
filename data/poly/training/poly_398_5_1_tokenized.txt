\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:T1> := <var:I> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:4> ; <var:o> := <var:T1> <var:o> := <var:o> + <var:T0> \end{verbatim} Assuming that we have $ <var:I> = <var:f> $ before evaluating this list of commands it holds that $ <var:o> = <nat:4> \cdot <var:f> + <nat:7> $ . \end{theorem} \begin{proof} See that the below decorated segment of code . \begin{eqnarray} \{ <var:I> = <var:f> \} \\ <var:T1> := <var:I> ; \\ \{ <var:I> = <var:f> \land <var:T1> = <var:f> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:I> = <var:f> \land <var:T1> = <var:f> \land <var:T0> = <nat:7> \} \\ <var:T1> := <var:T1> * <nat:4> ; \\ \{ <var:I> = <var:f> \land <var:T1> = <nat:4> * <var:f> \land <var:T0> = <nat:7> \} \\ <var:o> := <var:T1> \\ \{ <var:I> = <var:f> \land <var:T0> = <nat:7> \land <var:o> = <nat:4> * <var:f> \} \\ <var:o> := <var:o> + <var:T0> \\ \{ <var:I> = <var:f> \land <var:o> = <nat:4> * <var:f> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:I> = <var:f> }} <var:T1> := <var:I> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:4> ; <var:o> := <var:T1> <var:o> := <var:o> + <var:T0> {{ <var:o> = <nat:4> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:T1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:T1> = <var:f> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:T1> = <nat:4> * <var:f> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:T0> = <nat:7> /\ <var:o> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:o> = <nat:4> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 