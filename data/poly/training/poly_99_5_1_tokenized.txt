\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:Q> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:6> ; <var:M> := <var:K1> <var:M> := <var:M> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:Q> = <var:Y> $ prior to the execution of the series of instructions , it follows that we see $ <var:M> = <nat:6> \cdot <var:Y> + <nat:7> $ after set of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:Y> \} \\ <var:K1> := <var:Q> ; \\ \{ <var:Q> = <var:Y> \land <var:K1> = <var:Y> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:Q> = <var:Y> \land <var:K1> = <var:Y> \land <var:K0> = <nat:7> \} \\ <var:K1> := <var:K1> * <nat:6> ; \\ \{ <var:Q> = <var:Y> \land <var:K1> = <nat:6> \times <var:Y> \land <var:K0> = <nat:7> \} \\ <var:M> := <var:K1> \\ \{ <var:Q> = <var:Y> \land <var:K0> = <nat:7> \land <var:M> = <nat:6> \times <var:Y> \} \\ <var:M> := <var:M> + <var:K0> \\ \{ <var:Q> = <var:Y> \land <var:M> = <nat:6> \times <var:Y> + <nat:7> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:Q> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:6> ; <var:M> := <var:K1> <var:M> := <var:M> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Q> = <var:Y> }} <def:poly> {{ <var:M> = <nat:6> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:K1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:K1> = <var:Y> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:K1> = <nat:6> * <var:Y> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:K0> = <nat:7> /\ <var:M> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M> = <nat:6> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 