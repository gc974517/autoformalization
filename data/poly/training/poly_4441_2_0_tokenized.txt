\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:9> ; <var:h> := <var:o0> \end{verbatim} Allowing it to be that $ <var:m> = <var:y> $ before executing the set of commands it follows that we see $ <var:h> = <nat:9> $ after set of commands terminates . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:m> = <var:y> \} \\ <var:o0> := <nat:9> ; \\ \{ <var:m> = <var:y> \land <var:o0> = <nat:9> \} \\ <var:h> := <var:o0> \\ \{ <var:m> = <var:y> \land <var:h> = <nat:9> \} \end{eqnarray} Given the preceding argument , our code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:m> = <var:y> }} <var:o0> := <nat:9> ; <var:h> := <var:o0> {{ <var:h> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:h> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 