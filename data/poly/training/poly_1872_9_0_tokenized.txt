\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:k> ; <var:o2> := <nat:2> ; <var:o2> := <var:o2> * <var:k> ; <var:o2> := <var:o2> * <var:k> ; <var:d> := <var:o2> ; <var:d> := <var:d> + <var:o1> ; <var:d> := <var:d> + <var:o0> \end{verbatim} Given that $ <var:k> = <var:z> $ ahead of the evaluation of our set of commands , then $ <var:d> = <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> $ after series of instructions is done executing . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:k> = <var:z> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:1> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \} \end{eqnarray} Allowing the evaluation of this segment of code results in : \begin{eqnarray} <var:o1> := <var:o1> * <var:k> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \times <var:z> \} \\ <var:o2> := <nat:2> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \times <var:z> \land <var:o2> = <nat:2> \} \\ <var:o2> := <var:o2> * <var:k> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \times <var:z> \land <var:o2> = <nat:2> \times <var:z> \} \\ <var:o2> := <var:o2> * <var:k> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \times <var:z> \land <var:o2> = <nat:2> \times <var:z> ^ <nat:2> \} \\ <var:d> := <var:o2> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \times <var:z> \land <var:d> = <nat:2> \times <var:z> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:o1> ; \\ \{ <var:k> = <var:z> \land <var:o0> = <nat:3> \land <var:d> = <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> \} \\ <var:d> := <var:d> + <var:o0> \\ \{ <var:k> = <var:z> \land <var:d> = <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> \} \end{eqnarray} Given the above , this program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:k> = <var:z> }} <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:k> ; <var:o2> := <nat:2> ; <var:o2> := <var:o2> * <var:k> ; <var:o2> := <var:o2> * <var:k> ; <var:d> := <var:o2> ; <var:d> := <var:d> + <var:o1> ; <var:d> := <var:d> + <var:o0> {{ <var:d> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:d> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:o0> = <nat:3> /\ <var:d> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:d> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 