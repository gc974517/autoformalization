\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:d> ; <var:I2> := <var:I1> * <var:d> ; <var:I3> := <var:I2> * <var:d> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:3> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:4> ; <var:E> := <var:I3> <var:E> := <var:E> + <var:I2> <var:E> := <var:E> + <var:I1> <var:E> := <var:E> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:d> = <var:U> $ --- for every positive coefficients $ <var:U> $ --- ahead of interpreting our set of instructions then we have $ <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:d> = <var:U> \} \\ <var:I1> := <var:d> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <var:U> \} \\ <var:I2> := <var:I1> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:I1> := <var:I1> * <nat:3> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <nat:3> * <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:I2> := <var:I2> * <nat:4> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <nat:3> * <var:U> \land <var:I2> = <nat:4> * <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:I3> := <var:I3> * <nat:4> ; \\ \{ <var:d> = <var:U> \land <var:I1> = <nat:3> * <var:U> \land <var:I2> = <nat:4> * <var:U> ^ <nat:2> \land <var:I3> = <nat:4> * <var:U> ^ <nat:3> \land <var:I0> = <nat:3> \} \\ <var:E> := <var:I3> \\ \{ <var:d> = <var:U> \land <var:I1> = <nat:3> * <var:U> \land <var:I2> = <nat:4> * <var:U> ^ <nat:2> \land <var:I0> = <nat:3> \land <var:E> = <nat:4> * <var:U> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:I2> \\ \{ <var:d> = <var:U> \land <var:I1> = <nat:3> * <var:U> \land <var:I0> = <nat:3> \land <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:I1> \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:3> \land <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> \} \\ <var:E> := <var:E> + <var:I0> \\ \{ <var:d> = <var:U> \land <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> \} \end{eqnarray} As a result , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:d> ; <var:I2> := <var:I1> * <var:d> ; <var:I3> := <var:I2> * <var:d> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:3> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:4> ; <var:E> := <var:I3> <var:E> := <var:E> + <var:I2> <var:E> := <var:E> + <var:I1> <var:E> := <var:E> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:d> = <var:U> }} <def:poly> {{ <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <nat:3> * <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <nat:3> * <var:U> /\ <var:I2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <nat:3> * <var:U> /\ <var:I2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:I3> = <nat:4> * <var:U> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <nat:3> * <var:U> /\ <var:I2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:I0> = <nat:3> /\ <var:E> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I1> = <nat:3> * <var:U> /\ <var:I0> = <nat:3> /\ <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:3> /\ <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:E> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 