\begin{document} \begin{theorem} Define the following segment of code : \begin{verbatim} <var:h0> := <nat:4> ; <var:s> := <var:h0> \end{verbatim} Allowing it to be that $ <var:l> = <var:w> $ ahead of executing this program it must be that we have $ <var:s> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions is accomplished through Hoare techniques . Advancing to the proceeding commands contained in our program , we have \begin{eqnarray} \{ <var:l> = <var:w> \} \, <var:h0> := <nat:4> \, \{ <var:l> = <var:w> \land <var:h0> = <nat:4> \} \\ \{ <var:l> = <var:w> \land <var:h0> = <nat:4> \} \, <var:s> := <var:h0\, \{ <var:l> = <var:w> \land <var:s> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:l> = <var:w> }} <var:h0> := <nat:4> ; <var:s> := <var:h0> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 