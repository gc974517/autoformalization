\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:n1> := <var:e> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:5> ; <var:r> := <var:n1> <var:r> := <var:r> + <var:n0> \end{verbatim} Assume it to hold that $ <var:e> = <var:i> $ prior to interpreting the program , it holds that $ <var:r> = <nat:5> \times <var:i> + <nat:6> $ . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:e> = <var:i> \} \\ <var:n1> := <var:e> ; \\ \{ <var:e> = <var:i> \land <var:n1> = <var:i> \} \\ <var:n0> := <nat:6> ; \\ \{ <var:e> = <var:i> \land <var:n1> = <var:i> \land <var:n0> = <nat:6> \} \\ <var:n1> := <var:n1> * <nat:5> ; \\ \{ <var:e> = <var:i> \land <var:n1> = <nat:5> \times <var:i> \land <var:n0> = <nat:6> \} \\ <var:r> := <var:n1> \\ \{ <var:e> = <var:i> \land <var:n0> = <nat:6> \land <var:r> = <nat:5> \times <var:i> \} \\ <var:r> := <var:r> + <var:n0> \\ \{ <var:e> = <var:i> \land <var:r> = <nat:5> \times <var:i> + <nat:6> \} \end{eqnarray} Thusly , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:e> = <var:i> }} <var:n1> := <var:e> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:5> ; <var:r> := <var:n1> <var:r> := <var:r> + <var:n0> {{ <var:r> = <nat:5> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:n1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:n1> = <var:i> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:n1> = <nat:5> * <var:i> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:n0> = <nat:6> /\ <var:r> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:r> = <nat:5> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 