\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:r> ; <var:t> := <var:W1> ; <var:t> := <var:t> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Given it to be that $ <var:r> = <var:C> $ for some $ <var:C> \in \mathbb{N} $ ahead of executing the set of commands then we see $ <var:t> = <nat:4> \times <var:C> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be done by Hoare logic . Moving on , we see the binding command \verb | <var:W0> := <nat:1> ; | . This redefines the precondition $ \{ <var:r> = <var:C> \} $ into the condition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \} $ . Moving on to the next step , we have the variable binding statement \verb | <var:W1> := <nat:4> ; | . This advances the precondition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \} $ toward the postcondition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \} $ . This is sound through the assignment scheme defined in usual Hoare reasoning . After , the variable binding statement \verb | <var:W1> := <var:W1> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \} $ toward the postcondition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:C> \} $ . Advancing to the proceeding step seen in our code segment , the assignment code \verb | <var:t> := <var:W1> ; | . This code advances the precondition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:C> \} $ into the condition $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \land <var:t> = <nat:4> * <var:C> \} $ . This is rigorously given by the assignment law defined in typical Hoare techniques . Honing in on the next statement found in our series of commands , we have the variable assignmet statement \verb | <var:t> := <var:t> + <var:W0> | . This code advances $ \{ <var:r> = <var:C> \land <var:W0> = <nat:1> \land <var:t> = <nat:4> * <var:C> \} $ to $ \{ <var:r> = <var:C> \land <var:t> = <nat:4> * <var:C> + <nat:1> \} $ . This is rigorously given using the assignment scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:r> ; <var:t> := <var:W1> ; <var:t> := <var:t> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:r> = <var:C> }} <def:poly> {{ <var:t> = <nat:4> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:W0> = <nat:1> /\ <var:t> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:t> = <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 