\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:r> ; <var:I> := <var:D1> ; <var:I> := <var:I> + <var:D0> \end{verbatim} Allowing it to be that $ <var:r> = <var:w> $ for every integers $ <var:w> $ prior to executing our code segment , it must be that $ <var:I> = <nat:2> * <var:w> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:r> = <var:w> \} \\ <var:D0> := <nat:6> ; \\ \{ <var:r> = <var:w> \land <var:D0> = <nat:6> \} \\ <var:D1> := <nat:2> ; \\ \{ <var:r> = <var:w> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \} \\ <var:D1> := <var:D1> * <var:r> ; \\ \{ <var:r> = <var:w> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> * <var:w> \} \\ <var:I> := <var:D1> ; \\ \{ <var:r> = <var:w> \land <var:D0> = <nat:6> \land <var:I> = <nat:2> * <var:w> \} \\ <var:I> := <var:I> + <var:D0> \\ \{ <var:r> = <var:w> \land <var:I> = <nat:2> * <var:w> + <nat:6> \} \end{eqnarray} As a result , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:r> = <var:w> }} <var:D0> := <nat:6> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:r> ; <var:I> := <var:D1> ; <var:I> := <var:I> + <var:D0> {{ <var:I> = <nat:2> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:D0> = <nat:6> /\ <var:I> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:I> = <nat:2> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 