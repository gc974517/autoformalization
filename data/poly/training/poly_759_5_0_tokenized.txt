\begin{document} \begin{theorem} Consider the following segment of code such that \begin{verbatim} <var:h0> := <nat:7> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:S> ; <var:p> := <var:h1> ; <var:p> := <var:p> + <var:h0> \end{verbatim} Assume that we have $ <var:S> = <var:P> $ ( for every positive integer coefficients $ <var:P> $ ) prior to the evaluation of this set of commands , it follows that we see $ <var:p> = <nat:2> \cdot <var:P> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:P> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:S> = <var:P> \land <var:h0> = <nat:7> \} \\ <var:h1> := <nat:2> ; \\ \{ <var:S> = <var:P> \land <var:h0> = <nat:7> \land <var:h1> = <nat:2> \} \\ <var:h1> := <var:h1> * <var:S> ; \\ \{ <var:S> = <var:P> \land <var:h0> = <nat:7> \land <var:h1> = <nat:2> \cdot <var:P> \} \\ <var:p> := <var:h1> ; \\ \{ <var:S> = <var:P> \land <var:h0> = <nat:7> \land <var:p> = <nat:2> \cdot <var:P> \} \\ <var:p> := <var:p> + <var:h0> \\ \{ <var:S> = <var:P> \land <var:p> = <nat:2> \cdot <var:P> + <nat:7> \} \end{eqnarray} Applying typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:S> = <var:P> }} <var:h0> := <nat:7> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:S> ; <var:p> := <var:h1> ; <var:p> := <var:p> + <var:h0> {{ <var:p> = <nat:2> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:h0> = <nat:7> /\ <var:p> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:p> = <nat:2> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 