\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:h0> := <nat:4> ; <var:B> := <var:h0> \end{verbatim} Allow that we have $ <var:S> = <var:c> $ ahead of running our list of instructions then we have $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:S> = <var:c> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:S> = <var:c> \land <var:h0> = <nat:4> \} \\ <var:B> := <var:h0> \\ \{ <var:S> = <var:c> \land <var:B> = <nat:4> \} \end{eqnarray} Thus , our series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:S> = <var:c> }} <var:h0> := <nat:4> ; <var:B> := <var:h0> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 