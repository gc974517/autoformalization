\begin{document} \begin{theorem} Consider a program as follows \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:I> ; <var:O> := <var:K1> ; <var:O> := <var:O> + <var:K0> \end{verbatim} Allowing it to hold that $ <var:I> = <var:T> $ prior to the evaluation of our code , it must be that we see $ <var:O> = <nat:1> * <var:T> + <nat:4> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Notice the following decorated series of instructions . \begin{eqnarray} \{ <var:I> = <var:T> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:I> = <var:T> \land <var:K0> = <nat:4> \} \\ <var:K1> := <nat:1> ; \\ \{ <var:I> = <var:T> \land <var:K0> = <nat:4> \land <var:K1> = <nat:1> \} \\ <var:K1> := <var:K1> * <var:I> ; \\ \{ <var:I> = <var:T> \land <var:K0> = <nat:4> \land <var:K1> = <nat:1> * <var:T> \} \\ <var:O> := <var:K1> ; \\ \{ <var:I> = <var:T> \land <var:K0> = <nat:4> \land <var:O> = <nat:1> * <var:T> \} \\ <var:O> := <var:O> + <var:K0> \\ \{ <var:I> = <var:T> \land <var:O> = <nat:1> * <var:T> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:I> = <var:T> }} <var:K0> := <nat:4> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:I> ; <var:O> := <var:K1> ; <var:O> := <var:O> + <var:K0> {{ <var:O> = <nat:1> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:K0> = <nat:4> /\ <var:O> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:O> = <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 