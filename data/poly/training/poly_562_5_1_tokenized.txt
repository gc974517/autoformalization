\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:h1> := <var:H> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:7> ; <var:K> := <var:h1> <var:K> := <var:K> + <var:h0> \end{verbatim} Assume ( for positive integer coefficients $ <var:I> $ ) $ <var:H> = <var:I> $ ahead of the evaluation of this set of commands , then $ <var:K> = <nat:7> * <var:I> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is clear using usual Hoare logic . Considering the following piece of code in our series of commands , we see the binding code \verb | <var:h1> := <var:H> ; | . This code forwards $ \{ <var:H> = <var:I> \} $ to the condition $ \{ <var:H> = <var:I> \land <var:h1> = <var:I> \} $ . Advancing to the upcoming statement contained in the list of commands , the code assigning $ <nat:9> $ to $ <var:h0>$ . This command advances the precondition $ \{ <var:H> = <var:I> \land <var:h1> = <var:I> \} $ to $ \{ <var:H> = <var:I> \land <var:h1> = <var:I> \land <var:h0> = <nat:9> \} $ . Immediately after , the variable binding line \verb | <var:h1> := <var:h1> * <nat:7> ; | . This redefines $ \{ <var:H> = <var:I> \land <var:h1> = <var:I> \land <var:h0> = <nat:9> \} $ to the condition $ \{ <var:H> = <var:I> \land <var:h1> = <nat:7> * <var:I> \land <var:h0> = <nat:9> \} $ . Looking at the next line found in our set of commands , we see the line letting $ <var:h1$ to $ <var:K>$ . This code moves the precondition $ \{ <var:H> = <var:I> \land <var:h1> = <nat:7> * <var:I> \land <var:h0> = <nat:9> \} $ to $ \{ <var:H> = <var:I> \land <var:h0> = <nat:9> \land <var:K> = <nat:7> * <var:I> \} $ . After , we see the binding command \verb | <var:K> := <var:K> + <var:h0> | . This code takes the condition $ \{ <var:H> = <var:I> \land <var:h0> = <nat:9> \land <var:K> = <nat:7> * <var:I> \} $ into the postcondition $ \{ <var:H> = <var:I> \land <var:K> = <nat:7> * <var:I> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:H> = <var:I> }} <var:h1> := <var:H> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:7> ; <var:K> := <var:h1> <var:K> := <var:K> + <var:h0> {{ <var:K> = <nat:7> * <var:I> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:h1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:h1> = <var:I> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:h1> = <nat:7> * <var:I> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:h0> = <nat:9> /\ <var:K> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:K> = <nat:7> * <var:I> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 