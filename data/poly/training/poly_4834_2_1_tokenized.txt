\begin{document} \begin{theorem} We define a series of instructions as follows \begin{verbatim} <var:c0> := <nat:7> ; <var:O> := <var:c0> \end{verbatim} Given it to be that $ <var:f> = <var:A> $ prior to executing the set of commands it holds that we see $ <var:O> = <nat:7> $ once code segment has finished . \end{theorem} \begin{proof} The proof of this set of commands can be seen using Hoare techniques . Moving forward to the next statement found in our set of instructions , we see the variable update command assigning $ <nat:7> $ as $ <var:c0>$ . This takes the condition $ \{ <var:f> = <var:A> \} $ toward $ \{ <var:f> = <var:A> \land <var:c0> = <nat:7> \} $ . This is deduced using the assignment law given by typical Hoare logic . Considering the upcoming piece of code contained in the list of commands , we see the assignment command \verb | <var:O> := <var:c0> | . This code advances the precondition $ \{ <var:f> = <var:A> \land <var:c0> = <nat:7> \} $ into the postcondition $ \{ <var:f> = <var:A> \land <var:O> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:f> = <var:A> }} <var:c0> := <nat:7> ; <var:O> := <var:c0> {{ <var:O> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:O> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 