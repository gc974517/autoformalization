\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:1> ; <var:M> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:N> = <var:x> $ for $ <var:x> \in \mathbb{N} $ before the execution of our list of instructions , it holds that $ <var:M> = <nat:1> $ when set of commands terminates . \end{theorem} \begin{proof} Proving correctness for the list of commands is accomplished by typical Hoare techniques . Honing in on the proceeding commands in the list of instructions , \verb | { <var:N> = <var:x> } <var:G0> := <nat:1> { <var:N> = <var:x> \land <var:G0> = <nat:1> } | and \verb | { <var:N> = <var:x> \land <var:G0> = <nat:1> } <var:M> := <var:G0{ <var:N> = <var:x> \land <var:M> = <nat:1> } | . This is guaranteed by the variable assignmet rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:M> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:N> = <var:x> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 