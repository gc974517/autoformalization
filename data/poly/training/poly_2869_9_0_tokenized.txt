\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:6> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:a> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:a> ; <var:t2> := <var:t2> * <var:a> ; <var:z> := <var:t2> ; <var:z> := <var:z> + <var:t1> ; <var:z> := <var:z> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:a> = <var:j> $ ( given all $ <var:j> \in \mathbb{Z}^+ $ ) ahead of executing the code segment , it follows that we see $ <var:z> = <nat:2> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:6> $ when segment of code has exited . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:a> = <var:j> \} \\ <var:t0> := <nat:6> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \} \\ <var:t1> := <nat:4> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:4> \} \\ <var:t1> := <var:t1> * <var:a> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:4> \times <var:j> \} \\ <var:t2> := <nat:2> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:4> \times <var:j> \land <var:t2> = <nat:2> \} \\ <var:t2> := <var:t2> * <var:a> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:4> \times <var:j> \land <var:t2> = <nat:2> \times <var:j> \} \\ <var:t2> := <var:t2> * <var:a> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:4> \times <var:j> \land <var:t2> = <nat:2> \times <var:j> ^ <nat:2> \} \\ <var:z> := <var:t2> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:4> \times <var:j> \land <var:z> = <nat:2> \times <var:j> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:t1> ; \\ \{ <var:a> = <var:j> \land <var:t0> = <nat:6> \land <var:z> = <nat:2> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> \} \\ <var:z> := <var:z> + <var:t0> \\ \{ <var:a> = <var:j> \land <var:z> = <nat:2> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:6> \} \end{eqnarray} As a result , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:6> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:a> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:a> ; <var:t2> := <var:t2> * <var:a> ; <var:z> := <var:t2> ; <var:z> := <var:z> + <var:t1> ; <var:z> := <var:z> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:a> = <var:j> }} <def:poly> {{ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:4> * <var:j> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:4> * <var:j> /\ <var:t2> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:4> * <var:j> /\ <var:t2> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:4> * <var:j> /\ <var:z> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:t0> = <nat:6> /\ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 