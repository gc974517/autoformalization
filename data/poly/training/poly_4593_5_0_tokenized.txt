\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:s> ; <var:V> := <var:T1> ; <var:V> := <var:V> + <var:T0> \end{verbatim} Allow $ <var:s> = <var:W> $ before running our list of commands it must be that we have $ <var:V> = <nat:9> \times <var:W> + <nat:9> $ once program has finished . \end{theorem} \begin{proof} The application of Hoare techniques produces : \begin{eqnarray} \{ <var:s> = <var:W> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:s> = <var:W> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:9> ; \\ \{ <var:s> = <var:W> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \} \\ <var:T1> := <var:T1> * <var:s> ; \\ \{ <var:s> = <var:W> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:W> \} \\ <var:V> := <var:T1> ; \\ \{ <var:s> = <var:W> \land <var:T0> = <nat:9> \land <var:V> = <nat:9> \times <var:W> \} \\ <var:V> := <var:V> + <var:T0> \\ \{ <var:s> = <var:W> \land <var:V> = <nat:9> \times <var:W> + <nat:9> \} \end{eqnarray} As a result , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:s> = <var:W> }} <var:T0> := <nat:9> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:s> ; <var:V> := <var:T1> ; <var:V> := <var:V> + <var:T0> {{ <var:V> = <nat:9> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:W> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:W> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:W> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:W> /\ <var:T0> = <nat:9> /\ <var:V> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:W> /\ <var:V> = <nat:9> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 