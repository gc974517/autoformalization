\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:R> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:1> ; <var:j> := <var:m1> <var:j> := <var:j> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Assuming it to hold that $ <var:R> = <var:t> $ before running our code segment then we see $ <var:j> = <nat:1> \times <var:t> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is clear through usual Hoare techniques . Immediately following , we see the environment update statement letting $ <var:R> $ to $ <var:m1>$ . This transfers the condition $ \{ <var:R> = <var:t> \} $ to $ \{ <var:R> = <var:t> \land <var:m1> = <var:t> \} $ . This is given with the assignment rule given in typical Hoare techniques . Focusing on the next statement in the segment of code , the code \verb | <var:m0> := <nat:2> ; | . This advances the precondition $ \{ <var:R> = <var:t> \land <var:m1> = <var:t> \} $ toward $ \{ <var:R> = <var:t> \land <var:m1> = <var:t> \land <var:m0> = <nat:2> \} $ . Advancing on , the variable assignmet code assigning $ <var:m1> * <nat:1> $ toward $ <var:m1>$ . This moves $ \{ <var:R> = <var:t> \land <var:m1> = <var:t> \land <var:m0> = <nat:2> \} $ into $ \{ <var:R> = <var:t> \land <var:m1> = <nat:1> \cdot <var:t> \land <var:m0> = <nat:2> \} $ . Moving on to the following bit of code in our series of instructions , the assignment statement \verb | <var:j> := <var:m1> | . This command forwards the precondition $ \{ <var:R> = <var:t> \land <var:m1> = <nat:1> \cdot <var:t> \land <var:m0> = <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:t> \land <var:m0> = <nat:2> \land <var:j> = <nat:1> \cdot <var:t> \} $ . This is known to be sound by the assignment rule in standard Hoare logic . Stepping through , we have the variable assignmet line letting $ <var:j> + <var:m0$ as $ <var:j>$ . This moves the precondition $ \{ <var:R> = <var:t> \land <var:m0> = <nat:2> \land <var:j> = <nat:1> \cdot <var:t> \} $ into the condition $ \{ <var:R> = <var:t> \land <var:j> = <nat:1> \cdot <var:t> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:R> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:1> ; <var:j> := <var:m1> <var:j> := <var:j> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:R> = <var:t> }} <def:poly> {{ <var:j> = <nat:1> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:m1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:m1> = <var:t> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:m1> = <nat:1> * <var:t> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:m0> = <nat:2> /\ <var:j> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:j> = <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 