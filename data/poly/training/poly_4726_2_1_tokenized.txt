\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:L0> := <nat:8> ; <var:I> := <var:L0> \end{verbatim} Allow it to be that $ <var:n> = <var:V> $ before the evaluation of the segment of code it follows that $ <var:I> = <nat:8> $ once series of instructions has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be done by Hoare techniques . Immediately after , we have the variable update code \verb | <var:L0> := <nat:8> ; | . This moves the condition $ \{ <var:n> = <var:V> \} $ toward the condition $ \{ <var:n> = <var:V> \land <var:L0> = <nat:8> \} $ . This is ensured by the assignment inference rule in Hoare logic . Going forward , we have the variable update code \verb | <var:I> := <var:L0> | . This takes the condition $ \{ <var:n> = <var:V> \land <var:L0> = <nat:8> \} $ as the postcondition $ \{ <var:n> = <var:V> \land <var:I> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:n> = <var:V> }} <var:L0> := <nat:8> ; <var:I> := <var:L0> {{ <var:I> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:I> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 