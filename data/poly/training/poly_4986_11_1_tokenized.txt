\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:N> ; <var:c2> := <var:c1> * <var:N> ; <var:c3> := <var:c2> * <var:N> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:6> ; <var:c2> := <var:c2> * <nat:8> ; <var:c3> := <var:c3> * <nat:1> ; <var:X> := <var:c3> <var:X> := <var:X> + <var:c2> <var:X> := <var:X> + <var:c1> <var:X> := <var:X> + <var:c0> \end{verbatim} Allow it to hold that $ <var:N> = <var:Z> $ prior to executing our program it must be that we have $ <var:X> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:8> \cdot <var:Z> ^ <nat:2> + <nat:6> \cdot <var:Z> + <nat:2> $ after set of commands finishes . \end{theorem} \begin{proof} The method of proof for our set of instructions can be seen through standard Hoare techniques . Immediately after , \verb | { <var:N> = <var:Z> } <var:c1> := <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> } | , \verb | { <var:N> = <var:Z> \land <var:c1> = <var:Z> } <var:c2> := <var:c1> * <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> } | , \verb | { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> } <var:c3> := <var:c2> * <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> } | , \verb | { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> } <var:c0> := <nat:2> { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } | , \verb | { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } <var:c1> := <var:c1> * <nat:6> { <var:N> = <var:Z> \land <var:c1> = <nat:6> * <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } | , \verb | { <var:N> = <var:Z> \land <var:c1> = <nat:6> * <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } <var:c2> := <var:c2> * <nat:8> { <var:N> = <var:Z> \land <var:c1> = <nat:6> * <var:Z> \land <var:c2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } | and \verb | { <var:N> = <var:Z> \land <var:c1> = <nat:6> * <var:Z> \land <var:c2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:c3> = <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } <var:c3> := <var:c3> * <nat:1> { <var:N> = <var:Z> \land <var:c1> = <nat:6> * <var:Z> \land <var:c2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:c3> = <nat:1> * <var:Z> ^ <nat:3> \land <var:c0> = <nat:2> } | . This is guaranteed by the assignment inference rule given by Hoare reasoning . Going to the next step , we have \verb | { <var:N> = <var:Z> } <var:c1> := <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> } | and \verb | { <var:N> = <var:Z> \land <var:c1> = <var:Z> } <var:c2> := <var:c1> * <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> } | . Considering the proceeding piece of code contained in the list of commands , \verb | { <var:N> = <var:Z> } <var:c1> := <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> } | . Moving on , we have \verb | { <var:N> = <var:Z> } <var:c1> := <var:N> { <var:N> = <var:Z> \land <var:c1> = <var:Z> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:N> = <var:Z> }} <var:c1> := <var:N> ; <var:c2> := <var:c1> * <var:N> ; <var:c3> := <var:c2> * <var:N> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:6> ; <var:c2> := <var:c2> * <nat:8> ; <var:c3> := <var:c3> * <nat:1> ; <var:X> := <var:c3> <var:X> := <var:X> + <var:c2> <var:X> := <var:X> + <var:c1> <var:X> := <var:X> + <var:c0> {{ <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> /\ <var:c3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> /\ <var:c3> = <var:Z> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <nat:6> * <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> /\ <var:c3> = <var:Z> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <nat:6> * <var:Z> /\ <var:c2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:c3> = <var:Z> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <nat:6> * <var:Z> /\ <var:c2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:Z> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <nat:6> * <var:Z> /\ <var:c2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:c0> = <nat:2> /\ <var:X> = <nat:1> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c1> = <nat:6> * <var:Z> /\ <var:c0> = <nat:2> /\ <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:c0> = <nat:2> /\ <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 