\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:y> ; <var:i> := <nat:4> + <var:i> * <var:y> ; <var:i> := <var:i> * <var:y> ; <var:i> := <nat:2> + <var:i> * <var:y> \end{verbatim} Allowing ( for some positive integer coefficients $ <var:H> $ ) that we have $ <var:y> = <var:H> $ ahead of the execution of our list of commands it follows that $ <var:i> = <nat:3> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this set of commands can be done through typical Hoare logic . Stepping through , the variable update statement giving $ <nat:3> $ into $ <var:i>$ . This redefines the precondition $ \{ <var:y> = <var:H> \} $ toward $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> \} $ . This is deduced with the assignment scheme obtained from usual Hoare techniques . Moving forward , we have the variable assignmet code binding $ <nat:3> + <var:i> * <var:y> $ as $ <var:i>$ . This command moves the condition $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> \} $ into the condition $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> + <nat:3> \} $ . This is sound by the assignment law defined by Hoare reasoning . Stepping through , we see the variable assignmet line yielding $ <nat:4> + <var:i> * <var:y> $ into $ <var:i>$ . This redefines $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> + <nat:3> \} $ into the condition $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} $ . This is shown to be logically sound using the assignment rule obtained from Hoare logic . Paying attention to the next bit of code seen in the segment of code , we see the variable update command \verb | <var:i> := <var:i> * <var:y> ; | . This statement redefines the precondition $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} $ toward $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + \} $ . This is rigorously given using the assignment scheme of usual Hoare techniques . Moving on to the following line of code contained in our code , we have the binding statement defining $ <nat:2> + <var:i> * <var:y$ to $ <var:i>$ . This statement transfers $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + \} $ into $ \{ <var:y> = <var:H> \land <var:i> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:y> = <var:H> }} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:y> ; <var:i> := <nat:4> + <var:i> * <var:y> ; <var:i> := <var:i> * <var:y> ; <var:i> := <nat:2> + <var:i> * <var:y> {{ <var:i> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:i> = <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:i> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:i> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:i> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 