\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:3> ; <var:G> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Assume $ <var:p> = <var:d> $ ( for all positive integers $ <var:d> $ ) prior to the evaluation of the list of instructions it holds that we see $ <var:G> = <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:p> = <var:d> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:p> = <var:d> \land <var:q0> = <nat:3> \} \\ <var:G> := <var:q0> \\ \{ <var:p> = <var:d> \land <var:G> = <nat:3> \} \end{eqnarray} Thus , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:3> ; <var:G> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:p> = <var:d> }} <def:poly> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 