\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:e1> := <var:S> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:4> ; <var:A> := <var:e1> <var:A> := <var:A> + <var:e0> \end{verbatim} Allow $ <var:S> = <var:V> $ ( with some natural numbers $ <var:V> $ ) ahead of executing our series of instructions , it holds that $ <var:A> = <nat:4> * <var:V> + <nat:1> $ once list of commands has executed . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is accomplished using this decorated set of commands . \begin{eqnarray} \{ <var:S> = <var:V> \} \\ <var:e1> := <var:S> ; \\ \{ <var:S> = <var:V> \land <var:e1> = <var:V> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:S> = <var:V> \land <var:e1> = <var:V> \land <var:e0> = <nat:1> \} \\ <var:e1> := <var:e1> * <nat:4> ; \\ \{ <var:S> = <var:V> \land <var:e1> = <nat:4> \times <var:V> \land <var:e0> = <nat:1> \} \\ <var:A> := <var:e1> \\ \{ <var:S> = <var:V> \land <var:e0> = <nat:1> \land <var:A> = <nat:4> \times <var:V> \} \\ <var:A> := <var:A> + <var:e0> \\ \{ <var:S> = <var:V> \land <var:A> = <nat:4> \times <var:V> + <nat:1> \} \end{eqnarray} The application of usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:S> = <var:V> }} <var:e1> := <var:S> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:4> ; <var:A> := <var:e1> <var:A> := <var:A> + <var:e0> {{ <var:A> = <nat:4> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:e1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:e1> = <var:V> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:e1> = <nat:4> * <var:V> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:e0> = <nat:1> /\ <var:A> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A> = <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 