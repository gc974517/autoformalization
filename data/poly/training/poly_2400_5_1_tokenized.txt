\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:a1> := <var:s> ; <var:a0> := <nat:9> ; <var:a1> := <var:a1> * <nat:6> ; <var:c> := <var:a1> <var:c> := <var:c> + <var:a0> \end{verbatim} Assuming that $ <var:s> = <var:z> $ ( given all $ <var:z> $ ) before evaluating our set of commands it must be that we have $ <var:c> = <nat:6> \times <var:z> + <nat:9> $ after series of commands terminates . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:s> = <var:z> \} \\ <var:a1> := <var:s> ; \\ \{ <var:s> = <var:z> \land <var:a1> = <var:z> \} \\ <var:a0> := <nat:9> ; \\ \{ <var:s> = <var:z> \land <var:a1> = <var:z> \land <var:a0> = <nat:9> \} \\ <var:a1> := <var:a1> * <nat:6> ; \\ \{ <var:s> = <var:z> \land <var:a1> = <nat:6> \times <var:z> \land <var:a0> = <nat:9> \} \\ <var:c> := <var:a1> \\ \{ <var:s> = <var:z> \land <var:a0> = <nat:9> \land <var:c> = <nat:6> \times <var:z> \} \\ <var:c> := <var:c> + <var:a0> \\ \{ <var:s> = <var:z> \land <var:c> = <nat:6> \times <var:z> + <nat:9> \} \end{eqnarray} Considering the preceding argument , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:s> = <var:z> }} <var:a1> := <var:s> ; <var:a0> := <nat:9> ; <var:a1> := <var:a1> * <nat:6> ; <var:c> := <var:a1> <var:c> := <var:c> + <var:a0> {{ <var:c> = <nat:6> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:a1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:a1> = <var:z> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:a1> = <nat:6> * <var:z> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:a0> = <nat:9> /\ <var:c> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:c> = <nat:6> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 