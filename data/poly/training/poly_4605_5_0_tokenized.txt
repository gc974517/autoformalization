\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:3> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:O> ; <var:V> := <var:C1> ; <var:V> := <var:V> + <var:C0> \end{verbatim} Allowing that we have $ <var:O> = <var:o> $ ( given any integers $ <var:o> $ ) ahead of running this series of commands it holds that we see $ <var:V> = <nat:4> * <var:o> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:o> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:O> = <var:o> \land <var:C0> = <nat:3> \} \\ <var:C1> := <nat:4> ; \\ \{ <var:O> = <var:o> \land <var:C0> = <nat:3> \land <var:C1> = <nat:4> \} \\ <var:C1> := <var:C1> * <var:O> ; \\ \{ <var:O> = <var:o> \land <var:C0> = <nat:3> \land <var:C1> = <nat:4> \cdot <var:o> \} \\ <var:V> := <var:C1> ; \\ \{ <var:O> = <var:o> \land <var:C0> = <nat:3> \land <var:V> = <nat:4> \cdot <var:o> \} \\ <var:V> := <var:V> + <var:C0> \\ \{ <var:O> = <var:o> \land <var:V> = <nat:4> \cdot <var:o> + <nat:3> \} \end{eqnarray} Using typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <var:C0> := <nat:3> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:O> ; <var:V> := <var:C1> ; <var:V> := <var:V> + <var:C0> {{ <var:V> = <nat:4> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:C0> = <nat:3> /\ <var:V> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:V> = <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 