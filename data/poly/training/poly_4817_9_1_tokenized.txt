\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:V1> := <var:a> ; <var:V2> := <var:V1> * <var:a> ; <var:V3> := <var:V2> * <var:a> ; <var:V0> := <nat:9> ; <var:V2> := <var:V2> * <nat:4> ; <var:V3> := <var:V3> * <nat:6> ; <var:h> := <var:V3> <var:h> := <var:h> + <var:V2> <var:h> := <var:h> + <var:V0> \end{verbatim} Given it to be that $ <var:a> = <var:s> $ ( given every natural coefficients $ <var:s> $ ) ahead of running the series of commands it must be that we have $ <var:h> = <nat:6> \cdot <var:s> ^ <nat:3> + <nat:4> \cdot <var:s> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is demonstrated using usual Hoare techniques . Further , \begin{verbatim} { <var:a> = <var:s> } <var:V1> := <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> } \end{verbatim} Stepping through , \begin{verbatim} { <var:a> = <var:s> } <var:V1> := <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> } { <var:a> = <var:s> \land <var:V1> = <var:s> } <var:V2> := <var:V1> * <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> } { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> } <var:V3> := <var:V2> * <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> \land <var:V3> = <var:s> ^ <nat:3> } { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> \land <var:V3> = <var:s> ^ <nat:3> } <var:V0> := <nat:9> { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> \land <var:V3> = <var:s> ^ <nat:3> \land <var:V0> = <nat:9> } { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> \land <var:V3> = <var:s> ^ <nat:3> \land <var:V0> = <nat:9> } <var:V2> := <var:V2> * <nat:4> { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <nat:4> \times <var:s> ^ <nat:2> \land <var:V3> = <var:s> ^ <nat:3> \land <var:V0> = <nat:9> } \end{verbatim} This is known to be sound with the binding scheme defined in usual Hoare techniques . Advancing to the subsequent lines seen in the set of instructions , we see \begin{verbatim} { <var:a> = <var:s> } <var:V1> := <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> } { <var:a> = <var:s> \land <var:V1> = <var:s> } <var:V2> := <var:V1> * <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> } { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> } <var:V3> := <var:V2> * <var:a> { <var:a> = <var:s> \land <var:V1> = <var:s> \land <var:V2> = <var:s> ^ <nat:2> \land <var:V3> = <var:s> ^ <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:a> = <var:s> }} <var:V1> := <var:a> ; <var:V2> := <var:V1> * <var:a> ; <var:V3> := <var:V2> * <var:a> ; <var:V0> := <nat:9> ; <var:V2> := <var:V2> * <nat:4> ; <var:V3> := <var:V3> * <nat:6> ; <var:h> := <var:V3> <var:h> := <var:h> + <var:V2> <var:h> := <var:h> + <var:V0> {{ <var:h> = <nat:6> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V2> = <var:s> ^ <nat:2> /\ <var:V3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V2> = <var:s> ^ <nat:2> /\ <var:V3> = <var:s> ^ <nat:3> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V2> = <nat:4> * <var:s> ^ <nat:2> /\ <var:V3> = <var:s> ^ <nat:3> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V2> = <nat:4> * <var:s> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:s> ^ <nat:3> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V2> = <nat:4> * <var:s> ^ <nat:2> /\ <var:V0> = <nat:9> /\ <var:h> = <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:V1> = <var:s> /\ <var:V0> = <nat:9> /\ <var:h> = <nat:6> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:h> = <nat:6> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 