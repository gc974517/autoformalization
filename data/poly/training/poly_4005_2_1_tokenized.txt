\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:3> ; <var:R> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assume , given any positive integers $ <var:o> $ , that we have $ <var:t> = <var:o> $ prior to running this set of instructions then $ <var:R> = <nat:3> $ once list of commands is done . \end{theorem} \begin{proof} Proving correctness for the set of commands is shown with usual Hoare logic . Considering the proceeding bit of code seen in the list of commands , we see the line \verb | <var:O0> := <nat:3> ; | . This takes the precondition $ \{ <var:t> = <var:o> \} $ into the condition $ \{ <var:t> = <var:o> \land <var:O0> = <nat:3> \} $ . Shifting focus toward the proceeding statement in the series of commands , the variable binding statement defining $ <var:O0$ toward $ <var:R>$ . This statement advances the precondition $ \{ <var:t> = <var:o> \land <var:O0> = <nat:3> \} $ as the postcondition $ \{ <var:t> = <var:o> \land <var:R> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:R> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:t> = <var:o> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 