\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:X0> := <nat:6> ; <var:f> := <var:X0> \end{verbatim} Given it to be that $ <var:O> = <var:E> $ prior to the evaluation of the set of instructions then we have $ <var:f> = <nat:6> $ when series of commands has exited . \end{theorem} \begin{proof} Proving correctness for our series of instructions can be seen by standard Hoare techniques . Going to the next step , the variable update code \verb | <var:X0> := <nat:6> ; | . This line moves the condition $ \{ <var:O> = <var:E> \} $ to the postcondition $ \{ <var:O> = <var:E> \land <var:X0> = <nat:6> \} $ . This is shown using the assignment inference rule defined by usual Hoare techniques . Considering the upcoming step contained in our code segment , we see the environment update statement \verb | <var:f> := <var:X0> | . This line transfers the condition $ \{ <var:O> = <var:E> \land <var:X0> = <nat:6> \} $ as the postcondition $ \{ <var:O> = <var:E> \land <var:f> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:O> = <var:E> }} <var:X0> := <nat:6> ; <var:f> := <var:X0> {{ <var:f> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:f> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 