\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <var:I> * <var:G> ; <var:I> := <nat:2> + <var:I> * <var:G> ; <var:I> := <nat:3> + <var:I> * <var:G> ; <var:I> := <nat:2> + <var:I> * <var:G> ; <var:I> := <nat:4> + <var:I> * <var:G> ; <var:I> := <nat:3> + <var:I> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assume that $ <var:G> = <var:u> $ prior to interpreting the series of commands , it follows that we see $ <var:I> = <nat:2> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:3> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:3> $ once set of instructions has terminated . \end{theorem} \begin{proof} The method of proof for this program can be done using standard Hoare techniques . Considering the following piece of code in our set of commands , the environment update command \verb | <var:I> := <nat:2> ; | . This transfers the precondition $ \{ <var:G> = <var:u> \} $ into the postcondition $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \} $ . Moving forward to the subsequent statement seen in the code , the environment update code \verb | <var:I> := <var:I> * <var:G> ; | . This redefines $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \} $ into $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> + \} $ . This is shown by the assignment scheme obtained from Hoare reasoning . Advancing , we have the variable assignmet line binding $ <nat:2> + <var:I> * <var:G> $ toward $ <var:I>$ . This statement moves $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> + \} $ as the condition $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \} $ . Considering the upcoming bit of code contained in our set of commands , we see the binding line letting $ <nat:3> + <var:I> * <var:G> $ to $ <var:I>$ . This code moves the condition $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:3> \} $ . Advancing to the next step , we have the variable assignmet command \verb | <var:I> := <nat:2> + <var:I> * <var:G> ; | . This command transfers the condition $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:3> \} $ into the postcondition $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:2> \} $ . This is ensured by the assignment inference rule defined in Hoare logic . Moving forward , we have the variable binding statement binding $ <nat:4> + <var:I> * <var:G> $ to $ <var:I>$ . This line moves $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:2> \} $ toward $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:4> \} $ . Taking another step toward the upcoming statement in our program , we see the environment update statement defining $ <nat:3> + <var:I> * <var:G$ as $ <var:I>$ . This moves the condition $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:4> \} $ as $ \{ <var:G> = <var:u> \land <var:I> = <nat:2> \times <var:u> ^ <nat:6> + <nat:2> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:2> ; <var:I> := <var:I> * <var:G> ; <var:I> := <nat:2> + <var:I> * <var:G> ; <var:I> := <nat:3> + <var:I> * <var:G> ; <var:I> := <nat:2> + <var:I> * <var:G> ; <var:I> := <nat:4> + <var:I> * <var:G> ; <var:I> := <nat:3> + <var:I> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:G> = <var:u> }} <def:poly> {{ <var:I> = <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:I> = <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 