\begin{document} \begin{theorem} Define a code as \begin{verbatim} <var:J1> := <var:d> ; <var:J2> := <var:J1> * <var:d> ; <var:J3> := <var:J2> * <var:d> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:8> ; <var:J3> := <var:J3> * <nat:6> ; <var:I> := <var:J3> <var:I> := <var:I> + <var:J2> <var:I> := <var:I> + <var:J1> <var:I> := <var:I> + <var:J0> \end{verbatim} Allowing ( for any whole numbers $ <var:C> $ ) $ <var:d> = <var:C> $ ahead of the evaluation of this list of instructions it must be that $ <var:I> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:8> \cdot <var:C> ^ <nat:2> + <nat:9> \cdot <var:C> + <nat:6> $ . \end{theorem} \begin{proof} Observe that the following decorated program . \begin{eqnarray} \{ <var:d> = <var:C> \} \\ <var:J1> := <var:d> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <var:C> \} \\ <var:J2> := <var:J1> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J3> = <var:C> ^ <nat:3> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J3> = <var:C> ^ <nat:3> \land <var:J0> = <nat:6> \} \\ <var:J1> := <var:J1> * <nat:9> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <nat:9> \times <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J3> = <var:C> ^ <nat:3> \land <var:J0> = <nat:6> \} \\ <var:J2> := <var:J2> * <nat:8> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <nat:9> \times <var:C> \land <var:J2> = <nat:8> \times <var:C> ^ <nat:2> \land <var:J3> = <var:C> ^ <nat:3> \land <var:J0> = <nat:6> \} \\ <var:J3> := <var:J3> * <nat:6> ; \\ \{ <var:d> = <var:C> \land <var:J1> = <nat:9> \times <var:C> \land <var:J2> = <nat:8> \times <var:C> ^ <nat:2> \land <var:J3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:J0> = <nat:6> \} \\ <var:I> := <var:J3> \\ \{ <var:d> = <var:C> \land <var:J1> = <nat:9> \times <var:C> \land <var:J2> = <nat:8> \times <var:C> ^ <nat:2> \land <var:J0> = <nat:6> \land <var:I> = <nat:6> \times <var:C> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:J2> \\ \{ <var:d> = <var:C> \land <var:J1> = <nat:9> \times <var:C> \land <var:J0> = <nat:6> \land <var:I> = <nat:6> \times <var:C> ^ <nat:3> + <nat:8> \times <var:C> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:J1> \\ \{ <var:d> = <var:C> \land <var:J0> = <nat:6> \land <var:I> = <nat:6> \times <var:C> ^ <nat:3> + <nat:8> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> \} \end{eqnarray} Furthering the evaluation of this program returns : \begin{eqnarray} <var:I> := <var:I> + <var:J0> \\ \{ <var:d> = <var:C> \land <var:I> = <nat:6> \times <var:C> ^ <nat:3> + <nat:8> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:6> \} \end{eqnarray} Applying Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:d> = <var:C> }} <var:J1> := <var:d> ; <var:J2> := <var:J1> * <var:d> ; <var:J3> := <var:J2> * <var:d> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:8> ; <var:J3> := <var:J3> * <nat:6> ; <var:I> := <var:J3> <var:I> := <var:I> + <var:J2> <var:I> := <var:I> + <var:J1> <var:I> := <var:I> + <var:J0> {{ <var:I> = <nat:6> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <var:C> /\ <var:J2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <var:C> /\ <var:J2> = <var:C> ^ <nat:2> /\ <var:J3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <var:C> /\ <var:J2> = <var:C> ^ <nat:2> /\ <var:J3> = <var:C> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <nat:9> * <var:C> /\ <var:J2> = <var:C> ^ <nat:2> /\ <var:J3> = <var:C> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <nat:9> * <var:C> /\ <var:J2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:J3> = <var:C> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <nat:9> * <var:C> /\ <var:J2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:J3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <nat:9> * <var:C> /\ <var:J2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:J0> = <nat:6> /\ <var:I> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J1> = <nat:9> * <var:C> /\ <var:J0> = <nat:6> /\ <var:I> = <nat:6> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:J0> = <nat:6> /\ <var:I> = <nat:6> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:I> = <nat:6> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 