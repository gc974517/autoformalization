\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:7> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:h> ; <var:Z> := <var:B1> ; <var:Z> := <var:Z> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allowing $ <var:h> = <var:b> $ ahead of running the code it must be that $ <var:Z> = <nat:4> \cdot <var:b> + <nat:7> $ . \end{theorem} \begin{proof} Let the following decorated set of instructions . \begin{eqnarray} \{ <var:h> = <var:b> \} \\ <var:B0> := <nat:7> ; \\ \{ <var:h> = <var:b> \land <var:B0> = <nat:7> \} \\ <var:B1> := <nat:4> ; \\ \{ <var:h> = <var:b> \land <var:B0> = <nat:7> \land <var:B1> = <nat:4> \} \\ <var:B1> := <var:B1> * <var:h> ; \\ \{ <var:h> = <var:b> \land <var:B0> = <nat:7> \land <var:B1> = <nat:4> \times <var:b> \} \\ <var:Z> := <var:B1> ; \\ \{ <var:h> = <var:b> \land <var:B0> = <nat:7> \land <var:Z> = <nat:4> \times <var:b> \} \\ <var:Z> := <var:Z> + <var:B0> \\ \{ <var:h> = <var:b> \land <var:Z> = <nat:4> \times <var:b> + <nat:7> \} \end{eqnarray} Utilizing Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:7> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:h> ; <var:Z> := <var:B1> ; <var:Z> := <var:Z> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:h> = <var:b> }} <def:poly> {{ <var:Z> = <nat:4> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:B0> = <nat:7> /\ <var:Z> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:Z> = <nat:4> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 