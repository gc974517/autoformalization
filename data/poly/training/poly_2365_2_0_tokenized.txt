\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:1> ; <var:j> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:h> = <var:z> $ before interpreting the program then $ <var:j> = <nat:1> $ . \end{theorem} \begin{proof} See that the below decorated segment of code . \begin{eqnarray} \{ <var:h> = <var:z> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:h> = <var:z> \land <var:b0> = <nat:1> \} \\ <var:j> := <var:b0> \\ \{ <var:h> = <var:z> \land <var:j> = <nat:1> \} \end{eqnarray} Allowing evaluating this set of instructions gives us : \begin{eqnarray} \end{eqnarray} The application of typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:j> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:h> = <var:z> }} <def:poly> {{ <var:j> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:j> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 