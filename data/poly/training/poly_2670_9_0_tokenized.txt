\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:s> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:s> ; <var:F2> := <var:F2> * <var:s> ; <var:R> := <var:F2> ; <var:R> := <var:R> + <var:F1> ; <var:R> := <var:R> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Assuming given any positive integer coefficients $ <var:Y> $ it to hold that $ <var:s> = <var:Y> $ prior to running this segment of code , it holds that we see $ <var:R> = <nat:3> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:1> $ when series of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for this set of commands is shown using this decorated segment of code . \begin{eqnarray} \{ <var:s> = <var:Y> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \} \\ <var:F1> := <nat:2> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \} \\ <var:F1> := <var:F1> * <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \cdot <var:Y> \} \\ <var:F2> := <nat:3> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \cdot <var:Y> \land <var:F2> = <nat:3> \} \\ <var:F2> := <var:F2> * <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \cdot <var:Y> \land <var:F2> = <nat:3> \cdot <var:Y> \} \\ <var:F2> := <var:F2> * <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \cdot <var:Y> \land <var:F2> = <nat:3> \cdot <var:Y> ^ <nat:2> \} \\ <var:R> := <var:F2> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \cdot <var:Y> \land <var:R> = <nat:3> \cdot <var:Y> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:F1> ; \\ \{ <var:s> = <var:Y> \land <var:F0> = <nat:1> \land <var:R> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> \} \\ <var:R> := <var:R> + <var:F0> \\ \{ <var:s> = <var:Y> \land <var:R> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:1> \} \end{eqnarray} Using standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:s> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:s> ; <var:F2> := <var:F2> * <var:s> ; <var:R> := <var:F2> ; <var:R> := <var:R> + <var:F1> ; <var:R> := <var:R> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:s> = <var:Y> }} <def:poly> {{ <var:R> = <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:Y> /\ <var:F2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:Y> /\ <var:F2> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:Y> /\ <var:F2> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:F0> = <nat:1> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 