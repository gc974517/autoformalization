\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:I> := <nat:1> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> \end{verbatim} Given it to hold that $ <var:n> = <var:A> $ prior to executing this series of instructions it must be that $ <var:I> = <nat:1> \cdot <var:A> ^ <nat:4> + <nat:1> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is clear with Hoare techniques . Moving onward , \verb | { <var:n> = <var:A> } <var:I> := <nat:1> { <var:n> = <var:A> \land <var:I> = <nat:1> } | , \verb | { <var:n> = <var:A> \land <var:I> = <nat:1> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> + <nat:1> } | , \verb | { <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> + <nat:1> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:1> } | , \verb | { <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:1> } <var:I> := <nat:4> + <var:I> * <var:n> { <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:4> } | and \verb | { <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:4> } <var:I> := <nat:1> + <var:I> * <var:n{ <var:n> = <var:A> \land <var:I> = <nat:1> \cdot <var:A> ^ <nat:4> + <nat:1> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:n> = <var:A> }} <var:I> := <nat:1> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> {{ <var:I> = <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:I> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:I> = <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:I> = <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:I> = <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:I> = <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 