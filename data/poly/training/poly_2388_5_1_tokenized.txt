\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:T1> := <var:g> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:1> ; <var:b> := <var:T1> <var:b> := <var:b> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow ( with some positive numbers $ <var:Y> $ ) it to be that $ <var:g> = <var:Y> $ ahead of interpreting our code , then we see $ <var:b> = <nat:1> \cdot <var:Y> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the code segment is done through Hoare techniques . Shifting focus toward the following bits of codecontained in the code , \begin{eqnarray} \{ <var:g> = <var:Y> \} \, <var:T1> := <var:g> \, \{ <var:g> = <var:Y> \land <var:T1> = <var:Y> \} \\ \{ <var:g> = <var:Y> \land <var:T1> = <var:Y> \} \, <var:T0> := <nat:5> \, \{ <var:g> = <var:Y> \land <var:T1> = <var:Y> \land <var:T0> = <nat:5> \} \\ \{ <var:g> = <var:Y> \land <var:T1> = <var:Y> \land <var:T0> = <nat:5> \} \, <var:T1> := <var:T1> * <nat:1> \, \{ <var:g> = <var:Y> \land <var:T1> = <nat:1> * <var:Y> \land <var:T0> = <nat:5> \} \\ \{ <var:g> = <var:Y> \land <var:T1> = <nat:1> * <var:Y> \land <var:T0> = <nat:5> \} \, <var:b> := <var:T1\, \{ <var:g> = <var:Y> \land <var:T0> = <nat:5> \land <var:b> = <nat:1> * <var:Y> \} \\ \{ <var:g> = <var:Y> \land <var:T0> = <nat:5> \land <var:b> = <nat:1> * <var:Y> \} \, <var:b> := <var:b> + <var:T0\, \{ <var:g> = <var:Y> \land <var:b> = <nat:1> * <var:Y> + <nat:5> \} \end{eqnarray} This is shown by the variable binding inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:g> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:1> ; <var:b> := <var:T1> <var:b> := <var:b> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:g> = <var:Y> }} <def:poly> {{ <var:b> = <nat:1> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:T1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:T1> = <var:Y> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:T1> = <nat:1> * <var:Y> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:T0> = <nat:5> /\ <var:b> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:b> = <nat:1> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 