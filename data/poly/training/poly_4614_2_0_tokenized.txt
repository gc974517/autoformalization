\begin{document} \begin{theorem} Take the following list of instructions as \begin{verbatim} <var:s0> := <nat:4> ; <var:X> := <var:s0> \end{verbatim} Assuming given positive numbers $ <var:c> $ that we have $ <var:o> = <var:c> $ prior to interpreting the code then we have $ <var:X> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:c> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:o> = <var:c> \land <var:s0> = <nat:4> \} \\ <var:X> := <var:s0> \\ \{ <var:o> = <var:c> \land <var:X> = <nat:4> \} \end{eqnarray} The application of usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:o> = <var:c> }} <var:s0> := <nat:4> ; <var:X> := <var:s0> {{ <var:X> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:X> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 