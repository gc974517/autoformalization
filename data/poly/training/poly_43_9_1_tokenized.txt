\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:r> ; <var:i2> := <var:i1> * <var:r> ; <var:i3> := <var:i2> * <var:r> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:4> ; <var:i3> := <var:i3> * <nat:2> ; <var:E> := <var:i3> <var:E> := <var:E> + <var:i1> <var:E> := <var:E> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:r> = <var:Q> $ , with some $ <var:Q> \in \mathbb{Z}^+ $ , prior to evaluating our code segment then $ <var:E> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> + <nat:2> $ when code finishes . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be done by Hoare techniques . Taking a look at the following line of code seen in the code segment , we have the variable binding line letting $ <var:r> $ toward $ <var:i1>$ . This command advances the condition $ \{ <var:r> = <var:Q> \} $ as the condition $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \} $ . This is given through the assignment scheme defined by usual Hoare logic . Keeping momentum , the variable assignmet statement \verb | <var:i2> := <var:i1> * <var:r> ; | . This transfers $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \} $ toward the postcondition $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \} $ . This is deduced using the assignment scheme from Hoare techniques . Looking at the subsequent step contained in our code , we see the variable assignmet statement binding $ <var:i2> * <var:r> $ to $ <var:i3>$ . This forwards $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \} $ toward the condition $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <var:Q> ^ <nat:3> \} $ . This is given by the assignment rule given in typical Hoare techniques . Moving on , the variable update statement giving $ <nat:2> $ toward $ <var:i0>$ . This statement forwards $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <var:Q> ^ <nat:3> \} $ as the condition $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <var:Q> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . This is guaranteed with the assignment inference rule defined in typical Hoare reasoning . Focusing on the following statement seen in our set of instructions , we see the assignment code binding $ <var:i1> * <nat:4> $ as $ <var:i1>$ . This statement transfers $ \{ <var:r> = <var:Q> \land <var:i1> = <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <var:Q> ^ <nat:3> \land <var:i0> = <nat:2> \} $ toward $ \{ <var:r> = <var:Q> \land <var:i1> = <nat:4> * <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <var:Q> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . Stepping forward , we see the variable assignmet command \verb | <var:i3> := <var:i3> * <nat:2> ; | . This transfers the condition $ \{ <var:r> = <var:Q> \land <var:i1> = <nat:4> * <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <var:Q> ^ <nat:3> \land <var:i0> = <nat:2> \} $ to the condition $ \{ <var:r> = <var:Q> \land <var:i1> = <nat:4> * <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . This is deduced using the assignment law found in usual Hoare logic . Moving forward , we see the command \verb | <var:E> := <var:i3> | . This line redefines the condition $ \{ <var:r> = <var:Q> \land <var:i1> = <nat:4> * <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:i0> = <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:Q> \land <var:i1> = <nat:4> * <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i0> = <nat:2> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> \} $ . This is guaranteed through the assignment rule from usual Hoare logic . Taking another step toward the proceeding step seen in our code segment , we see the assignment line \verb | <var:E> := <var:E> + <var:i1> | . This takes $ \{ <var:r> = <var:Q> \land <var:i1> = <nat:4> * <var:Q> \land <var:i2> = <var:Q> ^ <nat:2> \land <var:i0> = <nat:2> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> \} $ toward the condition $ \{ <var:r> = <var:Q> \land <var:i0> = <nat:2> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> \} $ . Going forward , we have the variable update statement defining $ <var:E> + <var:i0$ as $ <var:E>$ . This code redefines $ \{ <var:r> = <var:Q> \land <var:i0> = <nat:2> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> \} $ into the postcondition $ \{ <var:r> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:2> \} $ . This is rigorously given with the assignment rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i1> := <var:r> ; <var:i2> := <var:i1> * <var:r> ; <var:i3> := <var:i2> * <var:r> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:4> ; <var:i3> := <var:i3> * <nat:2> ; <var:E> := <var:i3> <var:E> := <var:E> + <var:i1> <var:E> := <var:E> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:r> = <var:Q> }} <def:poly> {{ <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <var:Q> /\ <var:i2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <var:Q> /\ <var:i2> = <var:Q> ^ <nat:2> /\ <var:i3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <var:Q> /\ <var:i2> = <var:Q> ^ <nat:2> /\ <var:i3> = <var:Q> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <nat:4> * <var:Q> /\ <var:i2> = <var:Q> ^ <nat:2> /\ <var:i3> = <var:Q> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <nat:4> * <var:Q> /\ <var:i2> = <var:Q> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:Q> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i1> = <nat:4> * <var:Q> /\ <var:i2> = <var:Q> ^ <nat:2> /\ <var:i0> = <nat:2> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:i0> = <nat:2> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 