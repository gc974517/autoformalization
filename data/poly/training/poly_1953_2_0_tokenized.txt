\begin{document} \begin{theorem} Define a segment of code as \begin{verbatim} <var:N0> := <nat:1> ; <var:f> := <var:N0> \end{verbatim} Assume ( given all positive coefficients $ <var:J> $ ) that we have $ <var:S> = <var:J> $ ahead of the evaluation of our code segment it must be that $ <var:f> = <nat:1> $ once set of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of our program can be given with usual Hoare reasoning . Moving forward to the following command seen in our set of instructions , we see the assignment statement \verb | <var:N0> := <nat:1> ; | . This moves the precondition $ \{ <var:S> = <var:J> \} $ as $ \{ <var:S> = <var:J> \land <var:N0> = <nat:1> \} $ . Paying attention to the subsequent piece of code contained in our list of commands , we see the assignment statement giving $ <var:N0$ to $ <var:f>$ . This line forwards the condition $ \{ <var:S> = <var:J> \land <var:N0> = <nat:1> \} $ toward the postcondition $ \{ <var:S> = <var:J> \land <var:f> = <nat:1> \} $ . This is deduced by the assignment scheme given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:S> = <var:J> }} <var:N0> := <nat:1> ; <var:f> := <var:N0> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 