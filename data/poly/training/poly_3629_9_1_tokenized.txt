\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:O> ; <var:v2> := <var:v1> * <var:O> ; <var:v3> := <var:v2> * <var:O> ; <var:v0> := <nat:4> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:6> ; <var:U> := <var:v3> <var:U> := <var:U> + <var:v2> <var:U> := <var:U> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:O> = <var:m> $ prior to the execution of our set of instructions then $ <var:U> = <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:4> $ when list of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is done using usual Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:m> \} & <var:v1> := <var:O> & \{ <var:O> = <var:m> \land <var:v1> = <var:m> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \} & <var:v2> := <var:v1> * <var:O> & \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \} & <var:v3> := <var:v2> * <var:O> & \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \} & <var:v0> := <nat:4> & \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:4> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:4> \} & <var:v2> := <var:v2> * <nat:8> & \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:4> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:4> \} & <var:v3> := <var:v3> * <nat:6> & \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:v3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:v0> = <nat:4> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:v3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:v0> = <nat:4> \} & <var:U> := <var:v3& \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:v0> = <nat:4> \land <var:U> = <nat:6> \cdot <var:m> ^ <nat:3> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:v0> = <nat:4> \land <var:U> = <nat:6> \cdot <var:m> ^ <nat:3> \} & <var:U> := <var:U> + <var:v2& \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v0> = <nat:4> \land <var:U> = <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> \} \\ \{ <var:O> = <var:m> \land <var:v1> = <var:m> \land <var:v0> = <nat:4> \land <var:U> = <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> \} & <var:U> := <var:U> + <var:v0& \{ <var:O> = <var:m> \land <var:U> = <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> + <nat:4> \} \end{tabular} This is rigorously given through the environment update law obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:O> ; <var:v2> := <var:v1> * <var:O> ; <var:v3> := <var:v2> * <var:O> ; <var:v0> := <nat:4> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:6> ; <var:U> := <var:v3> <var:U> := <var:U> + <var:v2> <var:U> := <var:U> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:O> = <var:m> }} <def:poly> {{ <var:U> = <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v0> = <nat:4> /\ <var:U> = <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:v1> = <var:m> /\ <var:v0> = <nat:4> /\ <var:U> = <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:U> = <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 