\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:1> ; <var:P> := <var:s0> \end{verbatim} Assume ( for all integers $ <var:p> $ ) that $ <var:d> = <var:p> $ ahead of the execution of this list of commands then we see $ <var:P> = <nat:1> $ after code segment has finished executing . \end{theorem} \begin{proof} The application of Hoare techniques gives us : \begin{eqnarray} \{ <var:d> = <var:p> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:d> = <var:p> \land <var:s0> = <nat:1> \} \\ <var:P> := <var:s0> \\ \{ <var:d> = <var:p> \land <var:P> = <nat:1> \} \end{eqnarray} As a result , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:d> = <var:p> }} <var:s0> := <nat:1> ; <var:P> := <var:s0> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 