\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:5> ; <var:w> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:p> = <var:t> $ before running this set of instructions it holds that we see $ <var:w> = <nat:5> $ once series of commands is done executing . \end{theorem} \begin{proof} Proving correctness for our segment of code is shown using this decorated list of instructions . \begin{eqnarray} \{ <var:p> = <var:t> \} \\ <var:g0> := <nat:5> ; \\ \{ <var:p> = <var:t> \land <var:g0> = <nat:5> \} \\ <var:w> := <var:g0> \\ \{ <var:p> = <var:t> \land <var:w> = <nat:5> \} \end{eqnarray} The application of Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:5> ; <var:w> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:p> = <var:t> }} <def:poly> {{ <var:w> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:w> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 