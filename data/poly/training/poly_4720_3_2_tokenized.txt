\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:N> ; <var:c> := <nat:2> + <var:c> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:N> = <var:A> $ ahead of running the list of commands , it must be that we have $ <var:c> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our code is demonstrated with Hoare techniques . Moving forward , we see \begin{eqnarray} \{ <var:N> = <var:A> \} \, <var:c> := <nat:2> \, \{ <var:N> = <var:A> \land <var:c> = <nat:2> \} \\ \{ <var:N> = <var:A> \land <var:c> = <nat:2> \} \, <var:c> := <nat:3> + <var:c> * <var:N> \, \{ <var:N> = <var:A> \land <var:c> = <nat:2> \times <var:A> + <nat:3> \} \\ \{ <var:N> = <var:A> \land <var:c> = <nat:2> \times <var:A> + <nat:3> \} \, <var:c> := <nat:2> + <var:c> * <var:N\, \{ <var:N> = <var:A> \land <var:c> = <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:2> \} \end{eqnarray} This is deduced through the variable binding rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:N> ; <var:c> := <nat:2> + <var:c> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:N> = <var:A> }} <def:poly> {{ <var:c> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:c> = <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:c> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 