\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:4> ; <var:D> := <var:Z0> \end{verbatim} Allowing that $ <var:o> = <var:K> $ prior to evaluating our program it holds that we have $ <var:D> = <nat:4> $ when series of commands is done . \end{theorem} \begin{proof} The course of logic for the series of instructions is done using the below decorated list of commands . \begin{eqnarray} \{ <var:o> = <var:K> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:o> = <var:K> \land <var:Z0> = <nat:4> \} \\ <var:D> := <var:Z0> \\ \{ <var:o> = <var:K> \land <var:D> = <nat:4> \} \end{eqnarray} Utilizing typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:o> = <var:K> }} <var:Z0> := <nat:4> ; <var:D> := <var:Z0> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 