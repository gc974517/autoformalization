\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:l0> := <nat:1> ; <var:Y> := <var:l0> \end{verbatim} Allow $ <var:Z> = <var:W> $ ahead of running the series of instructions , it holds that we have $ <var:Y> = <nat:1> $ after program executes . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is clear with usual Hoare reasoning . Observing the upcoming step in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:W> \} & <var:l0> := <nat:1> & \{ <var:Z> = <var:W> \land <var:l0> = <nat:1> \} \end{tabular} This is sound using the variable binding inference rule obtained from usual Hoare reasoning . Paying attention to the upcoming line contained in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:W> \} & <var:l0> := <nat:1> & \{ <var:Z> = <var:W> \land <var:l0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Z> = <var:W> }} <var:l0> := <nat:1> ; <var:Y> := <var:l0> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 