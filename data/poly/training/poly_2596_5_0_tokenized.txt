\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:2> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:T> ; <var:n> := <var:W1> ; <var:n> := <var:n> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allowing it to be that $ <var:T> = <var:X> $ prior to the evaluation of the code segment it holds that $ <var:n> = <nat:8> * <var:X> + <nat:2> $ after set of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:X> \} \\ <var:W0> := <nat:2> ; \\ \{ <var:T> = <var:X> \land <var:W0> = <nat:2> \} \\ <var:W1> := <nat:8> ; \\ \{ <var:T> = <var:X> \land <var:W0> = <nat:2> \land <var:W1> = <nat:8> \} \\ <var:W1> := <var:W1> * <var:T> ; \\ \{ <var:T> = <var:X> \land <var:W0> = <nat:2> \land <var:W1> = <nat:8> \cdot <var:X> \} \\ <var:n> := <var:W1> ; \\ \{ <var:T> = <var:X> \land <var:W0> = <nat:2> \land <var:n> = <nat:8> \cdot <var:X> \} \\ <var:n> := <var:n> + <var:W0> \\ \{ <var:T> = <var:X> \land <var:n> = <nat:8> \cdot <var:X> + <nat:2> \} \end{eqnarray} Applying Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:2> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:T> ; <var:n> := <var:W1> ; <var:n> := <var:n> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <def:poly> {{ <var:n> = <nat:8> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:W0> = <nat:2> /\ <var:n> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:n> = <nat:8> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 