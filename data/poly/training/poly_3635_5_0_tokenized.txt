\begin{document} \begin{theorem} Take a series of instructions such that \begin{verbatim} <var:g0> := <nat:9> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:Z> ; <var:Y> := <var:g1> ; <var:Y> := <var:Y> + <var:g0> \end{verbatim} Allow ( given all positive coefficients $ <var:z> $ ) that we have $ <var:Z> = <var:z> $ before the execution of the code segment , then we have $ <var:Y> = <nat:7> * <var:z> + <nat:9> $ once program has exited . \end{theorem} \begin{proof} Proving correctness for our series of instructions is given with Hoare logic . Immediately after , \begin{verbatim} { <var:Z> = <var:z> } <var:g0> := <nat:9> { <var:Z> = <var:z> \land <var:g0> = <nat:9> } { <var:Z> = <var:z> \land <var:g0> = <nat:9> } <var:g1> := <nat:7> { <var:Z> = <var:z> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> } { <var:Z> = <var:z> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> } <var:g1> := <var:g1> * <var:Z> { <var:Z> = <var:z> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> \times <var:z> } { <var:Z> = <var:z> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> \times <var:z> } <var:Y> := <var:g1> { <var:Z> = <var:z> \land <var:g0> = <nat:9> \land <var:Y> = <nat:7> \times <var:z> } \end{verbatim} This is shown by the rule of usual Hoare techniques . Jumping to the proceeding line in the segment of code , we see \begin{verbatim} { <var:Z> = <var:z> } <var:g0> := <nat:9> { <var:Z> = <var:z> \land <var:g0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Z> = <var:z> }} <var:g0> := <nat:9> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:Z> ; <var:Y> := <var:g1> ; <var:Y> := <var:Y> + <var:g0> {{ <var:Y> = <nat:7> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:g0> = <nat:9> /\ <var:Y> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Y> = <nat:7> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 