\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:5> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:A> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:A> ; <var:Z2> := <var:Z2> * <var:A> ; <var:i> := <var:Z2> ; <var:i> := <var:i> + <var:Z1> ; <var:i> := <var:i> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume for all whole numbers $ <var:n> $ that $ <var:A> = <var:n> $ ahead of the execution of our program , it must be that we have $ <var:i> = <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:5> $ after code has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this code segment is evident using standard Hoare reasoning . Advancing to the next lines seen in our set of instructions , we have \begin{eqnarray} \{ <var:A> = <var:n> \} \, <var:Z0> := <nat:5> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \} \\ \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \} \, <var:Z1> := <nat:4> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \} \\ \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \} \, <var:Z1> := <var:Z1> * <var:A> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \times <var:n> \} \\ \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \times <var:n> \} \, <var:Z2> := <nat:1> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \times <var:n> \land <var:Z2> = <nat:1> \} \\ \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \times <var:n> \land <var:Z2> = <nat:1> \} \, <var:Z2> := <var:Z2> * <var:A> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \times <var:n> \land <var:Z2> = <nat:1> \times <var:n> \} \end{eqnarray} This is sound with the variable binding law obtained from Hoare reasoning . After , \begin{eqnarray} \{ <var:A> = <var:n> \} \, <var:Z0> := <nat:5> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \} \\ \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \} \, <var:Z1> := <nat:4> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \} \end{eqnarray} Observing the subsequent lines in our set of instructions , \begin{eqnarray} \{ <var:A> = <var:n> \} \, <var:Z0> := <nat:5> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \} \\ \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \} \, <var:Z1> := <nat:4> \, \{ <var:A> = <var:n> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:4> \} \end{eqnarray} This is sound with the environment update inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:5> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:A> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:A> ; <var:Z2> := <var:Z2> * <var:A> ; <var:i> := <var:Z2> ; <var:i> := <var:i> + <var:Z1> ; <var:i> := <var:i> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:A> = <var:n> }} <def:poly> {{ <var:i> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:4> * <var:n> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:4> * <var:n> /\ <var:Z2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:4> * <var:n> /\ <var:Z2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:4> * <var:n> /\ <var:i> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:Z0> = <nat:5> /\ <var:i> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:i> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 