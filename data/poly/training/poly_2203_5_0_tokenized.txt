\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:5> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:x> ; <var:A> := <var:n1> ; <var:A> := <var:A> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:x> = <var:c> $ prior to running our segment of code , it follows that $ <var:A> = <nat:3> \times <var:c> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:c> \} \\ <var:n0> := <nat:5> ; \\ \{ <var:x> = <var:c> \land <var:n0> = <nat:5> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:x> = <var:c> \land <var:n0> = <nat:5> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:x> ; \\ \{ <var:x> = <var:c> \land <var:n0> = <nat:5> \land <var:n1> = <nat:3> * <var:c> \} \\ <var:A> := <var:n1> ; \\ \{ <var:x> = <var:c> \land <var:n0> = <nat:5> \land <var:A> = <nat:3> * <var:c> \} \\ <var:A> := <var:A> + <var:n0> \\ \{ <var:x> = <var:c> \land <var:A> = <nat:3> * <var:c> + <nat:5> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n0> := <nat:5> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:x> ; <var:A> := <var:n1> ; <var:A> := <var:A> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:x> = <var:c> }} <def:poly> {{ <var:A> = <nat:3> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:n0> = <nat:5> /\ <var:A> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:A> = <nat:3> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 