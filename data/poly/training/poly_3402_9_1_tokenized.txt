\begin{document} \begin{theorem} Take a program : \begin{verbatim} <var:k1> := <var:j> ; <var:k2> := <var:k1> * <var:j> ; <var:k3> := <var:k2> * <var:j> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:5> ; <var:k3> := <var:k3> * <nat:6> ; <var:K> := <var:k3> <var:K> := <var:K> + <var:k1> <var:K> := <var:K> + <var:k0> \end{verbatim} Assuming $ <var:j> = <var:T> $ ahead of executing the code segment , it follows that we have $ <var:K> = <nat:6> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> + <nat:1> $ . \end{theorem} \begin{proof} The proof of our list of commands is demonstrated using standard Hoare logic . Taking another step toward the upcoming line of code contained in our code segment , we have the variable update line binding $ <var:j> $ toward $ <var:k1>$ . This line advances $ \{ <var:j> = <var:T> \} $ toward $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \} $ . Focusing on the following statement found in the code , we have the environment update statement \verb | <var:k2> := <var:k1> * <var:j> ; | . This code transfers the precondition $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \} $ as $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \} $ . Moving on to the upcoming command found in the set of instructions , we have the environment update statement \verb | <var:k3> := <var:k2> * <var:j> ; | . This transfers $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \} $ to the condition $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \} $ . This is given by the assignment rule defined by standard Hoare techniques . Focusing on the proceeding line of code seen in the code , the code defining $ <nat:1> $ into $ <var:k0>$ . This code moves the condition $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \} $ toward $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} $ . This is sound by the assignment scheme given in standard Hoare techniques . Following , the environment update code binding $ <var:k1> * <nat:5> $ toward $ <var:k1>$ . This code forwards $ \{ <var:j> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} $ as $ \{ <var:j> = <var:T> \land <var:k1> = <nat:5> \cdot <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} $ . This is sound by the assignment rule defined in usual Hoare reasoning . Following , the variable binding code \verb | <var:k3> := <var:k3> * <nat:6> ; | . This forwards the precondition $ \{ <var:j> = <var:T> \land <var:k1> = <nat:5> \cdot <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} $ to the postcondition $ \{ <var:j> = <var:T> \land <var:k1> = <nat:5> \cdot <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <nat:6> \cdot <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} $ . After , the variable assignmet statement giving $ <var:k3$ to $ <var:K>$ . This line forwards the condition $ \{ <var:j> = <var:T> \land <var:k1> = <nat:5> \cdot <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <nat:6> \cdot <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} $ into $ \{ <var:j> = <var:T> \land <var:k1> = <nat:5> \cdot <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k0> = <nat:1> \land <var:K> = <nat:6> \cdot <var:T> ^ <nat:3> \} $ . This is given by the assignment scheme from typical Hoare logic . Moving forward to the next step , the statement \verb | <var:K> := <var:K> + <var:k1> | . This takes the precondition $ \{ <var:j> = <var:T> \land <var:k1> = <nat:5> \cdot <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k0> = <nat:1> \land <var:K> = <nat:6> \cdot <var:T> ^ <nat:3> \} $ toward the postcondition $ \{ <var:j> = <var:T> \land <var:k0> = <nat:1> \land <var:K> = <nat:6> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> \} $ . Paying attention to the proceeding line of code in the program , we have the code \verb | <var:K> := <var:K> + <var:k0> | . This advances the condition $ \{ <var:j> = <var:T> \land <var:k0> = <nat:1> \land <var:K> = <nat:6> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> \} $ into $ \{ <var:j> = <var:T> \land <var:K> = <nat:6> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:j> = <var:T> }} <var:k1> := <var:j> ; <var:k2> := <var:k1> * <var:j> ; <var:k3> := <var:k2> * <var:j> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:5> ; <var:k3> := <var:k3> * <nat:6> ; <var:K> := <var:k3> <var:K> := <var:K> + <var:k1> <var:K> := <var:K> + <var:k0> {{ <var:K> = <nat:6> * <var:T> ^ <nat:3> + <nat:5> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <var:T> /\ <var:k2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <nat:5> * <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <nat:5> * <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <nat:6> * <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k1> = <nat:5> * <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k0> = <nat:1> /\ <var:K> = <nat:6> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:k0> = <nat:1> /\ <var:K> = <nat:6> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:K> = <nat:6> * <var:T> ^ <nat:3> + <nat:5> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 