\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:2> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:Z> ; <var:U2> := <nat:6> ; <var:U2> := <var:U2> * <var:Z> ; <var:U2> := <var:U2> * <var:Z> ; <var:j> := <var:U2> ; <var:j> := <var:j> + <var:U1> ; <var:j> := <var:j> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume taking positive integers $ <var:c> $ that we have $ <var:Z> = <var:c> $ before evaluating the program , then we have $ <var:j> = <nat:6> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> + <nat:2> $ once set of commands terminates . \end{theorem} \begin{proof} Let this decorated set of instructions . \begin{eqnarray} \{ <var:Z> = <var:c> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \} \\ <var:U1> := <nat:5> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> \} \\ <var:U1> := <var:U1> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:c> \} \\ <var:U2> := <nat:6> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:c> \land <var:U2> = <nat:6> \} \\ <var:U2> := <var:U2> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:c> \land <var:U2> = <nat:6> * <var:c> \} \\ <var:U2> := <var:U2> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:c> \land <var:U2> = <nat:6> * <var:c> ^ <nat:2> \} \\ <var:j> := <var:U2> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:c> \land <var:j> = <nat:6> * <var:c> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:U1> ; \\ \{ <var:Z> = <var:c> \land <var:U0> = <nat:2> \land <var:j> = <nat:6> * <var:c> ^ <nat:2> + <nat:5> * <var:c> \} \\ <var:j> := <var:j> + <var:U0> \\ \{ <var:Z> = <var:c> \land <var:j> = <nat:6> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:2> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:Z> ; <var:U2> := <nat:6> ; <var:U2> := <var:U2> * <var:Z> ; <var:U2> := <var:U2> * <var:Z> ; <var:j> := <var:U2> ; <var:j> := <var:j> + <var:U1> ; <var:j> := <var:j> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Z> = <var:c> }} <def:poly> {{ <var:j> = <nat:6> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> * <var:c> /\ <var:U2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> * <var:c> /\ <var:U2> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> * <var:c> /\ <var:U2> = <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> * <var:c> /\ <var:j> = <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:U0> = <nat:2> /\ <var:j> = <nat:6> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:j> = <nat:6> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 