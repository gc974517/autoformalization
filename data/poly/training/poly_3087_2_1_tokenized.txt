\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:1> ; <var:x> := <var:t0> \end{verbatim} Assume that $ <var:f> = <var:i> $ , for every whole numbers $ <var:i> $ , ahead of the execution of our series of commands it follows that $ <var:x> = <nat:1> $ once segment of code is done executing . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be seen with Hoare techniques . Shifting focus toward the following step contained in the segment of code , we see \begin{eqnarray} \{ <var:f> = <var:i> \} \, <var:t0> := <nat:1> \, \{ <var:f> = <var:i> \land <var:t0> = <nat:1> \} \end{eqnarray} Taking another step toward the following line of code in the list of instructions , \begin{eqnarray} \{ <var:f> = <var:i> \} \, <var:t0> := <nat:1> \, \{ <var:f> = <var:i> \land <var:t0> = <nat:1> \} \end{eqnarray} This is given using the variable binding inference rule defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:f> = <var:i> }} <var:t0> := <nat:1> ; <var:x> := <var:t0> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 