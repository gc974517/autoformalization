\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:h1> := <var:C> ; <var:h2> := <var:h1> * <var:C> ; <var:h3> := <var:h2> * <var:C> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:5> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:2> ; <var:y> := <var:h3> <var:y> := <var:y> + <var:h2> <var:y> := <var:y> + <var:h1> <var:y> := <var:y> + <var:h0> \end{verbatim} Allow $ <var:C> = <var:f> $ ahead of the execution of the list of instructions it holds that $ <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands is shown with standard Hoare techniques . Shifting focus toward the following piece of code in the list of commands , the variable binding line giving $ <var:C> $ into $ <var:h1>$ . This takes $ \{ <var:C> = <var:f> \} $ as $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \} $ . This is given through the assignment law of standard Hoare techniques . Advancing to the upcoming line of code in our segment of code , the variable binding command \verb | <var:h2> := <var:h1> * <var:C> ; | . This takes the condition $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \} $ to the condition $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \} $ . Now , the binding statement letting $ <var:h2> * <var:C> $ to $ <var:h3>$ . This line forwards $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \} $ into the condition $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \} $ . This is given through the assignment scheme of standard Hoare reasoning . Honing in on the following line of code found in our series of commands , the assignment statement \verb | <var:h0> := <nat:5> ; | . This command transfers the precondition $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \} $ as the condition $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is ensured by the assignment inference rule from usual Hoare logic . Moving onward , we see the assignment code defining $ <var:h1> * <nat:5> $ to $ <var:h1>$ . This forwards the precondition $ \{ <var:C> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ to the postcondition $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is ensured by the assignment law given by Hoare logic . Stepping through , we see the variable binding code \verb | <var:h2> := <var:h2> * <nat:6> ; | . This transfers $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ to $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is guaranteed by the assignment law given in Hoare logic . Immediately after , the command giving $ <var:h3> * <nat:2> $ to $ <var:h3>$ . This forwards $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ to $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:h3> = <nat:2> \times <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is guaranteed by the assignment rule from Hoare logic . Honing in on the proceeding piece of code seen in the list of instructions , we see the assignment line \verb | <var:y> := <var:h3> | . This code forwards the precondition $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:h3> = <nat:2> \times <var:f> ^ <nat:3> \land <var:h0> = <nat:5> \} $ into the condition $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:h0> = <nat:5> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> \} $ . This is given through the assignment inference rule of typical Hoare techniques . After , we have the environment update code binding $ <var:y> + <var:h2$ to $ <var:y>$ . This moves $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:h0> = <nat:5> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h0> = <nat:5> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> \} $ . Focusing on the subsequent bit of code found in the list of commands , we have the variable binding code \verb | <var:y> := <var:y> + <var:h1> | . This takes $ \{ <var:C> = <var:f> \land <var:h1> = <nat:5> \times <var:f> \land <var:h0> = <nat:5> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> \} $ into the postcondition $ \{ <var:C> = <var:f> \land <var:h0> = <nat:5> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> \} $ . This is rigorously given through the assignment rule in standard Hoare logic . Moving forward to the next bit of code seen in our segment of code , the assignment line \verb | <var:y> := <var:y> + <var:h0> | . This redefines the precondition $ \{ <var:C> = <var:f> \land <var:h0> = <nat:5> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> \} $ to the postcondition $ \{ <var:C> = <var:f> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> + <nat:5> \} $ . This is known to be sound through the assignment inference rule defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:C> = <var:f> }} <var:h1> := <var:C> ; <var:h2> := <var:h1> * <var:C> ; <var:h3> := <var:h2> * <var:C> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:5> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:2> ; <var:y> := <var:h3> <var:y> := <var:y> + <var:h2> <var:y> := <var:y> + <var:h1> <var:y> := <var:y> + <var:h0> {{ <var:y> = <nat:2> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <nat:5> * <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <nat:5> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <nat:5> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:f> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <nat:5> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h0> = <nat:5> /\ <var:y> = <nat:2> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h1> = <nat:5> * <var:f> /\ <var:h0> = <nat:5> /\ <var:y> = <nat:2> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:h0> = <nat:5> /\ <var:y> = <nat:2> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:y> = <nat:2> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 