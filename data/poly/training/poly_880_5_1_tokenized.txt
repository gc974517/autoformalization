\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:l1> := <var:n> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:1> ; <var:S> := <var:l1> <var:S> := <var:S> + <var:l0> \end{verbatim} Assuming it to be that $ <var:n> = <var:r> $ prior to the execution of the segment of code , it holds that we have $ <var:S> = <nat:1> * <var:r> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our program is accomplished using typical Hoare techniques . Taking a look at the upcoming pieces of code in our list of instructions , we see \begin{eqnarray} \{ <var:n> = <var:r> \} \, <var:l1> := <var:n> \, \{ <var:n> = <var:r> \land <var:l1> = <var:r> \} \\ \{ <var:n> = <var:r> \land <var:l1> = <var:r> \} \, <var:l0> := <nat:7> \, \{ <var:n> = <var:r> \land <var:l1> = <var:r> \land <var:l0> = <nat:7> \} \\ \{ <var:n> = <var:r> \land <var:l1> = <var:r> \land <var:l0> = <nat:7> \} \, <var:l1> := <var:l1> * <nat:1> \, \{ <var:n> = <var:r> \land <var:l1> = <nat:1> * <var:r> \land <var:l0> = <nat:7> \} \\ \{ <var:n> = <var:r> \land <var:l1> = <nat:1> * <var:r> \land <var:l0> = <nat:7> \} \, <var:S> := <var:l1\, \{ <var:n> = <var:r> \land <var:l0> = <nat:7> \land <var:S> = <nat:1> * <var:r> \} \end{eqnarray} This is given through the binding scheme given in standard Hoare logic . Keeping momentum , \begin{eqnarray} \{ <var:n> = <var:r> \} \, <var:l1> := <var:n> \, \{ <var:n> = <var:r> \land <var:l1> = <var:r> \} \end{eqnarray} This is shown with the environment update inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:n> = <var:r> }} <var:l1> := <var:n> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:1> ; <var:S> := <var:l1> <var:S> := <var:S> + <var:l0> {{ <var:S> = <nat:1> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:l1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:l1> = <var:r> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:l1> = <nat:1> * <var:r> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:l0> = <nat:7> /\ <var:S> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:S> = <nat:1> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 