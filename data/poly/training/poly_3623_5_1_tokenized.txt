\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:u> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:4> ; <var:i> := <var:a1> <var:i> := <var:i> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Allowing for any natural coefficients $ <var:f> $ that $ <var:u> = <var:f> $ before the evaluation of this code segment it holds that $ <var:i> = <nat:4> \cdot <var:f> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:f> \} \\ <var:a1> := <var:u> ; \\ \{ <var:u> = <var:f> \land <var:a1> = <var:f> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:u> = <var:f> \land <var:a1> = <var:f> \land <var:a0> = <nat:1> \} \\ <var:a1> := <var:a1> * <nat:4> ; \\ \{ <var:u> = <var:f> \land <var:a1> = <nat:4> \times <var:f> \land <var:a0> = <nat:1> \} \\ <var:i> := <var:a1> \\ \{ <var:u> = <var:f> \land <var:a0> = <nat:1> \land <var:i> = <nat:4> \times <var:f> \} \\ <var:i> := <var:i> + <var:a0> \\ \{ <var:u> = <var:f> \land <var:i> = <nat:4> \times <var:f> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:u> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:4> ; <var:i> := <var:a1> <var:i> := <var:i> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:u> = <var:f> }} <def:poly> {{ <var:i> = <nat:4> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:a1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:a1> = <var:f> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:a1> = <nat:4> * <var:f> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:a0> = <nat:1> /\ <var:i> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:i> = <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 