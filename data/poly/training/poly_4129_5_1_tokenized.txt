\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:w> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:3> ; <var:N> := <var:T1> <var:N> := <var:N> + <var:T0> \end{verbatim} Given $ <var:w> = <var:C> $ before running our list of instructions , it follows that we have $ <var:N> = <nat:3> \cdot <var:C> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this series of instructions can be seen using typical Hoare techniques . Stepping through , we see \verb | { <var:w> = <var:C> } <var:T1> := <var:w> { <var:w> = <var:C> \land <var:T1> = <var:C> } | , \verb | { <var:w> = <var:C> \land <var:T1> = <var:C> } <var:T0> := <nat:3> { <var:w> = <var:C> \land <var:T1> = <var:C> \land <var:T0> = <nat:3> } | and \verb | { <var:w> = <var:C> \land <var:T1> = <var:C> \land <var:T0> = <nat:3> } <var:T1> := <var:T1> * <nat:3> { <var:w> = <var:C> \land <var:T1> = <nat:3> \cdot <var:C> \land <var:T0> = <nat:3> } | . This is shown to be logically sound using the assignment inference rule obtained from typical Hoare reasoning . Moving forward to the subsequent command contained in our code segment , we see \verb | { <var:w> = <var:C> } <var:T1> := <var:w> { <var:w> = <var:C> \land <var:T1> = <var:C> } | . This is ensured with the rule defined by Hoare reasoning . Jumping to the subsequent line of code in the segment of code , we see \verb | { <var:w> = <var:C> } <var:T1> := <var:w> { <var:w> = <var:C> \land <var:T1> = <var:C> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:w> = <var:C> }} <var:T1> := <var:w> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:3> ; <var:N> := <var:T1> <var:N> := <var:N> + <var:T0> {{ <var:N> = <nat:3> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:T1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:T1> = <var:C> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:T1> = <nat:3> * <var:C> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:T0> = <nat:3> /\ <var:N> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:N> = <nat:3> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 