\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:7> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:A> ; <var:w> := <var:O1> ; <var:w> := <var:w> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:A> = <var:k> $ prior to the evaluation of the list of commands it holds that $ <var:w> = <nat:9> \cdot <var:k> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for our code can be done with standard Hoare techniques . Advancing on , we see \begin{verbatim} { <var:A> = <var:k> } <var:O0> := <nat:7> { <var:A> = <var:k> \land <var:O0> = <nat:7> } \end{verbatim} Taking a look at the proceeding command found in our code segment , we have \begin{verbatim} { <var:A> = <var:k> } <var:O0> := <nat:7> { <var:A> = <var:k> \land <var:O0> = <nat:7> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:A> = <var:k> } <var:O0> := <nat:7> { <var:A> = <var:k> \land <var:O0> = <nat:7> } { <var:A> = <var:k> \land <var:O0> = <nat:7> } <var:O1> := <nat:9> { <var:A> = <var:k> \land <var:O0> = <nat:7> \land <var:O1> = <nat:9> } { <var:A> = <var:k> \land <var:O0> = <nat:7> \land <var:O1> = <nat:9> } <var:O1> := <var:O1> * <var:A> { <var:A> = <var:k> \land <var:O0> = <nat:7> \land <var:O1> = <nat:9> \cdot <var:k> } \end{verbatim} This is ensured by the variable update rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:7> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:A> ; <var:w> := <var:O1> ; <var:w> := <var:w> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:A> = <var:k> }} <def:poly> {{ <var:w> = <nat:9> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:O0> = <nat:7> /\ <var:w> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:w> = <nat:9> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 