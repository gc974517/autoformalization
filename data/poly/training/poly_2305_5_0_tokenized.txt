\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:I> ; <var:i> := <var:T1> ; <var:i> := <var:i> + <var:T0> \end{verbatim} Allowing that we have $ <var:I> = <var:e> $ , given every integers $ <var:e> $ , ahead of the execution of this segment of code then $ <var:i> = <nat:9> \cdot <var:e> + <nat:5> $ when set of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is accomplished with standard Hoare techniques . Further , we have the variable binding statement yielding $ <nat:5> $ as $ <var:T0>$ . This redefines the condition $ \{ <var:I> = <var:e> \} $ toward $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \} $ . This is known to be sound through the assignment scheme of standard Hoare techniques . Moving forward to the next piece of code found in our program , the variable binding line \verb | <var:T1> := <nat:9> ; | . This line advances the condition $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \} $ to the postcondition $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \} $ . This is deduced using the assignment rule given in usual Hoare reasoning . Moving on , the variable update statement letting $ <var:T1> * <var:I> $ as $ <var:T1>$ . This takes $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \} $ toward the postcondition $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \cdot <var:e> \} $ . This is given with the assignment scheme defined in standard Hoare techniques . Further , we have the variable update command \verb | <var:i> := <var:T1> ; | . This redefines the precondition $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \cdot <var:e> \} $ to the postcondition $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:e> \} $ . Moving onward , we have the environment update code letting $ <var:i> + <var:T0$ to $ <var:i>$ . This transfers the precondition $ \{ <var:I> = <var:e> \land <var:T0> = <nat:5> \land <var:i> = <nat:9> \cdot <var:e> \} $ toward $ \{ <var:I> = <var:e> \land <var:i> = <nat:9> \cdot <var:e> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:I> = <var:e> }} <var:T0> := <nat:5> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:I> ; <var:i> := <var:T1> ; <var:i> := <var:i> + <var:T0> {{ <var:i> = <nat:9> * <var:e> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:T0> = <nat:5> /\ <var:i> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:i> = <nat:9> * <var:e> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 