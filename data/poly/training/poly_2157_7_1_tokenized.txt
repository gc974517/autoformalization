\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:Q> ; <var:t2> := <var:t1> * <var:Q> ; <var:t3> := <var:t2> * <var:Q> ; <var:t0> := <nat:9> ; <var:t3> := <var:t3> * <nat:1> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:Q> = <var:b> $ ahead of interpreting this series of instructions , it must be that $ <var:m> = <nat:1> * <var:b> ^ <nat:3> + <nat:9> $ . \end{theorem} \begin{proof} Observe that this decorated segment of code . \begin{eqnarray} \{ <var:Q> = <var:b> \} \\ <var:t1> := <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:t1> = <var:b> \} \\ <var:t2> := <var:t1> * <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:Q> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:9> \} \\ <var:t3> := <var:t3> * <nat:1> ; \\ \{ <var:Q> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <nat:1> \times <var:b> ^ <nat:3> \land <var:t0> = <nat:9> \} \\ <var:m> := <var:t3> \\ \{ <var:Q> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t0> = <nat:9> \land <var:m> = <nat:1> \times <var:b> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:t0> \\ \{ <var:Q> = <var:b> \land <var:m> = <nat:1> \times <var:b> ^ <nat:3> + <nat:9> \} \end{eqnarray} Using typical Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:Q> ; <var:t2> := <var:t1> * <var:Q> ; <var:t3> := <var:t2> * <var:Q> ; <var:t0> := <nat:9> ; <var:t3> := <var:t3> * <nat:1> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Q> = <var:b> }} <def:poly> {{ <var:m> = <nat:1> * <var:b> ^ <nat:3> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:t1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t3> = <var:b> ^ <nat:3> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:b> ^ <nat:3> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t0> = <nat:9> /\ <var:m> = <nat:1> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:m> = <nat:1> * <var:b> ^ <nat:3> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 