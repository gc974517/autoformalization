\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:O> ; <var:p2> := <var:p1> * <var:O> ; <var:p3> := <var:p2> * <var:O> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:8> ; <var:o> := <var:p3> <var:o> := <var:o> + <var:p2> <var:o> := <var:o> + <var:p1> <var:o> := <var:o> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Assume assuming some $ <var:J> \in \mathbb{Z}^+ $ it to hold that $ <var:O> = <var:J> $ before the execution of the code segment , it must be that $ <var:o> = <nat:8> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the program is shown by usual Hoare logic . Immediately following , \verb | { <var:O> = <var:J> } <var:p1> := <var:O> { <var:O> = <var:J> \land <var:p1> = <var:J> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <var:J> } <var:p2> := <var:p1> * <var:O> { <var:O> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> } <var:p3> := <var:p2> * <var:O> { <var:O> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> } <var:p0> := <nat:8> { <var:O> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } <var:p1> := <var:p1> * <nat:5> { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } <var:p2> := <var:p2> * <nat:3> { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <nat:3> \cdot <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <nat:3> \cdot <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } <var:p3> := <var:p3> * <nat:8> { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <nat:3> \cdot <var:J> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <nat:3> \cdot <var:J> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:J> ^ <nat:3> \land <var:p0> = <nat:8> } <var:o> := <var:p3{ <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <nat:3> \cdot <var:J> ^ <nat:2> \land <var:p0> = <nat:8> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p2> = <nat:3> \cdot <var:J> ^ <nat:2> \land <var:p0> = <nat:8> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> } <var:o> := <var:o> + <var:p2{ <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p0> = <nat:8> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> } | , \verb | { <var:O> = <var:J> \land <var:p1> = <nat:5> \cdot <var:J> \land <var:p0> = <nat:8> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> } <var:o> := <var:o> + <var:p1{ <var:O> = <var:J> \land <var:p0> = <nat:8> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:5> \cdot <var:J> } | and \verb | { <var:O> = <var:J> \land <var:p0> = <nat:8> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:5> \cdot <var:J> } <var:o> := <var:o> + <var:p0{ <var:O> = <var:J> \land <var:o> = <nat:8> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:5> \cdot <var:J> + <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:O> ; <var:p2> := <var:p1> * <var:O> ; <var:p3> := <var:p2> * <var:O> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:8> ; <var:o> := <var:p3> <var:o> := <var:o> + <var:p2> <var:o> := <var:o> + <var:p1> <var:o> := <var:o> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:O> = <var:J> }} <def:poly> {{ <var:o> = <nat:8> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <var:J> /\ <var:p2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <var:J> /\ <var:p2> = <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <var:J> /\ <var:p2> = <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <nat:5> * <var:J> /\ <var:p2> = <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <nat:5> * <var:J> /\ <var:p2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <nat:5> * <var:J> /\ <var:p2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:J> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <nat:5> * <var:J> /\ <var:p2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:p0> = <nat:8> /\ <var:o> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p1> = <nat:5> * <var:J> /\ <var:p0> = <nat:8> /\ <var:o> = <nat:8> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:p0> = <nat:8> /\ <var:o> = <nat:8> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:o> = <nat:8> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 