\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:j> ; <var:D2> := <var:D1> * <var:j> ; <var:D3> := <var:D2> * <var:j> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:5> ; <var:D2> := <var:D2> * <nat:9> ; <var:D3> := <var:D3> * <nat:5> ; <var:w> := <var:D3> <var:w> := <var:w> + <var:D2> <var:w> := <var:w> + <var:D1> <var:w> := <var:w> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assume $ <var:j> = <var:f> $ ahead of running the list of commands it holds that $ <var:w> = <nat:5> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:3> $ when series of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is evident using typical Hoare techniques . Observing the next lines found in our code , we have \verb | { <var:j> = <var:f> } <var:D1> := <var:j> { <var:j> = <var:f> \land <var:D1> = <var:f> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <var:f> } <var:D2> := <var:D1> * <var:j> { <var:j> = <var:f> \land <var:D1> = <var:f> \land <var:D2> = <var:f> ^ <nat:2> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <var:f> \land <var:D2> = <var:f> ^ <nat:2> } <var:D3> := <var:D2> * <var:j> { <var:j> = <var:f> \land <var:D1> = <var:f> \land <var:D2> = <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <var:f> \land <var:D2> = <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> } <var:D0> := <nat:3> { <var:j> = <var:f> \land <var:D1> = <var:f> \land <var:D2> = <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <var:f> \land <var:D2> = <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } <var:D1> := <var:D1> * <nat:5> { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } <var:D2> := <var:D2> * <nat:9> { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:D3> = <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } <var:D3> := <var:D3> * <nat:5> { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } | , \verb | { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:f> ^ <nat:3> \land <var:D0> = <nat:3> } <var:w> := <var:D3{ <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:D0> = <nat:3> \land <var:w> = <nat:5> \times <var:f> ^ <nat:3> } | and \verb | { <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:D0> = <nat:3> \land <var:w> = <nat:5> \times <var:f> ^ <nat:3> } <var:w> := <var:w> + <var:D2{ <var:j> = <var:f> \land <var:D1> = <nat:5> \times <var:f> \land <var:D0> = <nat:3> \land <var:w> = <nat:5> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> } | . This is guaranteed by the assignment law of typical Hoare techniques . Moving onward , we see \verb | { <var:j> = <var:f> } <var:D1> := <var:j> { <var:j> = <var:f> \land <var:D1> = <var:f> } | . Stepping through , we see \verb | { <var:j> = <var:f> } <var:D1> := <var:j> { <var:j> = <var:f> \land <var:D1> = <var:f> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:j> ; <var:D2> := <var:D1> * <var:j> ; <var:D3> := <var:D2> * <var:j> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:5> ; <var:D2> := <var:D2> * <nat:9> ; <var:D3> := <var:D3> * <nat:5> ; <var:w> := <var:D3> <var:w> := <var:w> + <var:D2> <var:w> := <var:w> + <var:D1> <var:w> := <var:w> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:j> = <var:f> }} <def:poly> {{ <var:w> = <nat:5> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <var:f> /\ <var:D2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <var:f> /\ <var:D2> = <var:f> ^ <nat:2> /\ <var:D3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <var:f> /\ <var:D2> = <var:f> ^ <nat:2> /\ <var:D3> = <var:f> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <nat:5> * <var:f> /\ <var:D2> = <var:f> ^ <nat:2> /\ <var:D3> = <var:f> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <nat:5> * <var:f> /\ <var:D2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:D3> = <var:f> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <nat:5> * <var:f> /\ <var:D2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <nat:5> * <var:f> /\ <var:D2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:D0> = <nat:3> /\ <var:w> = <nat:5> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D1> = <nat:5> * <var:f> /\ <var:D0> = <nat:3> /\ <var:w> = <nat:5> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:D0> = <nat:3> /\ <var:w> = <nat:5> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:w> = <nat:5> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 