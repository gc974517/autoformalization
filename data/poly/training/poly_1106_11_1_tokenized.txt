\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:f1> := <var:w> ; <var:f2> := <var:f1> * <var:w> ; <var:f3> := <var:f2> * <var:w> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:6> ; <var:f3> := <var:f3> * <nat:3> ; <var:d> := <var:f3> <var:d> := <var:d> + <var:f2> <var:d> := <var:d> + <var:f1> <var:d> := <var:d> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:w> = <var:P> $ prior to executing our list of commands , then we see $ <var:d> = <nat:3> \times <var:P> ^ <nat:3> + <nat:6> \times <var:P> ^ <nat:2> + <nat:8> \times <var:P> + <nat:1> $ when series of commands has finished . \end{theorem} \begin{proof} The method of proof for our series of instructions is clear through Hoare techniques . Keeping momentum , we have \begin{verbatim} { <var:w> = <var:P> } <var:f1> := <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> } { <var:w> = <var:P> \land <var:f1> = <var:P> } <var:f2> := <var:f1> * <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> } { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> } <var:f3> := <var:f2> * <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> } { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> } <var:f0> := <nat:1> { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } <var:f1> := <var:f1> * <nat:8> { <var:w> = <var:P> \land <var:f1> = <nat:8> * <var:P> \land <var:f2> = <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } { <var:w> = <var:P> \land <var:f1> = <nat:8> * <var:P> \land <var:f2> = <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } <var:f2> := <var:f2> * <nat:6> { <var:w> = <var:P> \land <var:f1> = <nat:8> * <var:P> \land <var:f2> = <nat:6> * <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } { <var:w> = <var:P> \land <var:f1> = <nat:8> * <var:P> \land <var:f2> = <nat:6> * <var:P> ^ <nat:2> \land <var:f3> = <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } <var:f3> := <var:f3> * <nat:3> { <var:w> = <var:P> \land <var:f1> = <nat:8> * <var:P> \land <var:f2> = <nat:6> * <var:P> ^ <nat:2> \land <var:f3> = <nat:3> * <var:P> ^ <nat:3> \land <var:f0> = <nat:1> } \end{verbatim} Next , \begin{verbatim} { <var:w> = <var:P> } <var:f1> := <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> } { <var:w> = <var:P> \land <var:f1> = <var:P> } <var:f2> := <var:f1> * <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> } \end{verbatim} This is given with the variable update rule defined in Hoare techniques . Immediately following , \begin{verbatim} { <var:w> = <var:P> } <var:f1> := <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> } { <var:w> = <var:P> \land <var:f1> = <var:P> } <var:f2> := <var:f1> * <var:w> { <var:w> = <var:P> \land <var:f1> = <var:P> \land <var:f2> = <var:P> ^ <nat:2> } \end{verbatim} This is shown through the law defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:w> ; <var:f2> := <var:f1> * <var:w> ; <var:f3> := <var:f2> * <var:w> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:6> ; <var:f3> := <var:f3> * <nat:3> ; <var:d> := <var:f3> <var:d> := <var:d> + <var:f2> <var:d> := <var:d> + <var:f1> <var:d> := <var:d> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:w> = <var:P> }} <def:poly> {{ <var:d> = <nat:3> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <var:P> /\ <var:f2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <var:P> /\ <var:f2> = <var:P> ^ <nat:2> /\ <var:f3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <var:P> /\ <var:f2> = <var:P> ^ <nat:2> /\ <var:f3> = <var:P> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <nat:8> * <var:P> /\ <var:f2> = <var:P> ^ <nat:2> /\ <var:f3> = <var:P> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <nat:8> * <var:P> /\ <var:f2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:f3> = <var:P> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <nat:8> * <var:P> /\ <var:f2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:P> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <nat:8> * <var:P> /\ <var:f2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:f0> = <nat:1> /\ <var:d> = <nat:3> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f1> = <nat:8> * <var:P> /\ <var:f0> = <nat:1> /\ <var:d> = <nat:3> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:f0> = <nat:1> /\ <var:d> = <nat:3> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:d> = <nat:3> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 