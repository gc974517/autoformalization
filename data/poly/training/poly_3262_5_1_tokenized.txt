\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:O> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:9> ; <var:L> := <var:e1> <var:L> := <var:L> + <var:e0> \end{verbatim} Assume given $ <var:W> $ $ <var:O> = <var:W> $ ahead of the evaluation of our code segment it must be that we have $ <var:L> = <nat:9> \cdot <var:W> + <nat:9> $ after list of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:O> = <var:W> \} \\ <var:e1> := <var:O> ; \\ \{ <var:O> = <var:W> \land <var:e1> = <var:W> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:O> = <var:W> \land <var:e1> = <var:W> \land <var:e0> = <nat:9> \} \\ <var:e1> := <var:e1> * <nat:9> ; \\ \{ <var:O> = <var:W> \land <var:e1> = <nat:9> \cdot <var:W> \land <var:e0> = <nat:9> \} \\ <var:L> := <var:e1> \\ \{ <var:O> = <var:W> \land <var:e0> = <nat:9> \land <var:L> = <nat:9> \cdot <var:W> \} \\ <var:L> := <var:L> + <var:e0> \\ \{ <var:O> = <var:W> \land <var:L> = <nat:9> \cdot <var:W> + <nat:9> \} \end{eqnarray} Thus , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:O> = <var:W> }} <var:e1> := <var:O> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:9> ; <var:L> := <var:e1> <var:L> := <var:L> + <var:e0> {{ <var:L> = <nat:9> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:e1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:e1> = <var:W> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:e1> = <nat:9> * <var:W> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:e0> = <nat:9> /\ <var:L> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:L> = <nat:9> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 