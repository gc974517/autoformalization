\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:4> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:y> ; <var:h> := <var:W1> ; <var:h> := <var:h> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Assume that $ <var:y> = <var:A> $ before evaluating the code segment then we have $ <var:h> = <nat:3> * <var:A> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be accomplished through typical Hoare logic . Advancing to the next step , we have the environment update code \verb | <var:W0> := <nat:4> ; | . This command forwards the precondition $ \{ <var:y> = <var:A> \} $ toward $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \} $ . Now , the variable binding command \verb | <var:W1> := <nat:3> ; | . This code transfers the precondition $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \} $ to $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \land <var:W1> = <nat:3> \} $ . This is deduced with the assignment law defined by typical Hoare techniques . Shifting focus toward the upcoming bit of code seen in our series of commands , we have the binding code letting $ <var:W1> * <var:y> $ toward $ <var:W1>$ . This code transfers the condition $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \land <var:W1> = <nat:3> \} $ as $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \land <var:W1> = <nat:3> \cdot <var:A> \} $ . Jumping to the next bit of code seen in our list of instructions , we see the variable assignmet statement assigning $ <var:W1> $ as $ <var:h>$ . This transfers the condition $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \land <var:W1> = <nat:3> \cdot <var:A> \} $ to the postcondition $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \land <var:h> = <nat:3> \cdot <var:A> \} $ . This is shown to be logically sound with the assignment rule defined by usual Hoare techniques . Immediately following , we see the variable binding code letting $ <var:h> + <var:W0$ as $ <var:h>$ . This code redefines $ \{ <var:y> = <var:A> \land <var:W0> = <nat:4> \land <var:h> = <nat:3> \cdot <var:A> \} $ toward the condition $ \{ <var:y> = <var:A> \land <var:h> = <nat:3> \cdot <var:A> + <nat:4> \} $ . This is shown to be logically sound by the assignment inference rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:y> ; <var:h> := <var:W1> ; <var:h> := <var:h> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:y> = <var:A> }} <def:poly> {{ <var:h> = <nat:3> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:W0> = <nat:4> /\ <var:h> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:h> = <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 