\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:d> ; <var:Y2> := <var:Y1> * <var:d> ; <var:Y3> := <var:Y2> * <var:d> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:2> ; <var:Y3> := <var:Y3> * <nat:6> ; <var:J> := <var:Y3> <var:J> := <var:J> + <var:Y2> <var:J> := <var:J> + <var:Y1> <var:J> := <var:J> + <var:Y0> \end{verbatim} Assuming it to be that $ <var:d> = <var:X> $ with some positive numbers $ <var:X> $ before evaluating this segment of code it holds that we have $ <var:J> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> $ after list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:X> \} \\ <var:Y1> := <var:d> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <var:X> \} \\ <var:Y2> := <var:Y1> * <var:d> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <var:X> \land <var:Y2> = <var:X> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:d> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <var:X> \land <var:Y2> = <var:X> ^ <nat:2> \land <var:Y3> = <var:X> ^ <nat:3> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <var:X> \land <var:Y2> = <var:X> ^ <nat:2> \land <var:Y3> = <var:X> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <nat:1> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <nat:1> \cdot <var:X> \land <var:Y2> = <var:X> ^ <nat:2> \land <var:Y3> = <var:X> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y2> := <var:Y2> * <nat:2> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <nat:1> \cdot <var:X> \land <var:Y2> = <nat:2> \cdot <var:X> ^ <nat:2> \land <var:Y3> = <var:X> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:Y3> := <var:Y3> * <nat:6> ; \\ \{ <var:d> = <var:X> \land <var:Y1> = <nat:1> \cdot <var:X> \land <var:Y2> = <nat:2> \cdot <var:X> ^ <nat:2> \land <var:Y3> = <nat:6> \cdot <var:X> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ <var:J> := <var:Y3> \\ \{ <var:d> = <var:X> \land <var:Y1> = <nat:1> \cdot <var:X> \land <var:Y2> = <nat:2> \cdot <var:X> ^ <nat:2> \land <var:Y0> = <nat:4> \land <var:J> = <nat:6> \cdot <var:X> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:Y2> \\ \{ <var:d> = <var:X> \land <var:Y1> = <nat:1> \cdot <var:X> \land <var:Y0> = <nat:4> \land <var:J> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:Y1> \\ \{ <var:d> = <var:X> \land <var:Y0> = <nat:4> \land <var:J> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> \} \\ <var:J> := <var:J> + <var:Y0> \\ \{ <var:d> = <var:X> \land <var:J> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> \} \end{eqnarray} Applying usual Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:d> = <var:X> }} <var:Y1> := <var:d> ; <var:Y2> := <var:Y1> * <var:d> ; <var:Y3> := <var:Y2> * <var:d> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:2> ; <var:Y3> := <var:Y3> * <nat:6> ; <var:J> := <var:Y3> <var:J> := <var:J> + <var:Y2> <var:J> := <var:J> + <var:Y1> <var:J> := <var:J> + <var:Y0> {{ <var:J> = <nat:6> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <var:X> /\ <var:Y2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <var:X> /\ <var:Y2> = <var:X> ^ <nat:2> /\ <var:Y3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <var:X> /\ <var:Y2> = <var:X> ^ <nat:2> /\ <var:Y3> = <var:X> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <nat:1> * <var:X> /\ <var:Y2> = <var:X> ^ <nat:2> /\ <var:Y3> = <var:X> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <nat:1> * <var:X> /\ <var:Y2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:Y3> = <var:X> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <nat:1> * <var:X> /\ <var:Y2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:Y3> = <nat:6> * <var:X> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <nat:1> * <var:X> /\ <var:Y2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:Y0> = <nat:4> /\ <var:J> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y1> = <nat:1> * <var:X> /\ <var:Y0> = <nat:4> /\ <var:J> = <nat:6> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y0> = <nat:4> /\ <var:J> = <nat:6> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:J> = <nat:6> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 