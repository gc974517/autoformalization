\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:2> + <var:Y> * <var:m> ; <var:Y> := <var:Y> * <var:m> ; <var:Y> := <nat:2> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:1> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:2> + <var:Y> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:m> = <var:P> $ prior to executing the list of commands , then we see $ <var:Y> = <nat:4> * <var:P> ^ <nat:10> + <nat:3> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> $ when list of commands has finished . \end{theorem} \begin{proof} The argument for this set of commands is clear with Hoare reasoning . Considering the next pieces of code contained in the code segment , \verb | { <var:m> = <var:P> } <var:Y> := <nat:4> { <var:m> = <var:P> \land <var:Y> = <nat:4> } | and \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> } <var:Y> := <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> + } | . This is guaranteed with the assignment rule found in standard Hoare techniques . Paying attention to the subsequent statements in the list of instructions , we see \verb | { <var:m> = <var:P> } <var:Y> := <nat:4> { <var:m> = <var:P> \land <var:Y> = <nat:4> } | , \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> } <var:Y> := <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> + } | , \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> + } <var:Y> := <nat:3> + <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:3> } | , \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:3> } <var:Y> := <nat:2> + <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> + <nat:2> } | , \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> + <nat:2> } <var:Y> := <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + } | , \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + } <var:Y> := <nat:2> + <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:5> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:2> } | , \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:5> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:2> } <var:Y> := <nat:4> + <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> + <nat:4> } | and \verb | { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> + <nat:4> } <var:Y> := <nat:3> + <var:Y> * <var:m> { <var:m> = <var:P> \land <var:Y> = <nat:4> \cdot <var:P> ^ <nat:7> + <nat:3> \cdot <var:P> ^ <nat:5> + <nat:2> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:3> } | . Moving forward to the next step , \verb | { <var:m> = <var:P> } <var:Y> := <nat:4> { <var:m> = <var:P> \land <var:Y> = <nat:4> } | . This is shown to be logically sound with the assignment rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:2> + <var:Y> * <var:m> ; <var:Y> := <var:Y> * <var:m> ; <var:Y> := <nat:2> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:1> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:2> + <var:Y> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <def:poly> {{ <var:Y> = <nat:4> * <var:P> ^ <nat:10> + <nat:3> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:3> + <nat:3> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:8> + <nat:3> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:9> + <nat:3> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Y> = <nat:4> * <var:P> ^ <nat:10> + <nat:3> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 