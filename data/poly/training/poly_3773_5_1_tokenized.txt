\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:f1> := <var:M> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:9> ; <var:N> := <var:f1> <var:N> := <var:N> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Allowing that $ <var:M> = <var:d> $ --- given all natural coefficients $ <var:d> $ --- before the evaluation of the list of instructions it follows that we have $ <var:N> = <nat:9> * <var:d> + <nat:2> $ when list of commands has finished executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:M> = <var:d> \} \\ <var:f1> := <var:M> ; \\ \{ <var:M> = <var:d> \land <var:f1> = <var:d> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:M> = <var:d> \land <var:f1> = <var:d> \land <var:f0> = <nat:2> \} \\ <var:f1> := <var:f1> * <nat:9> ; \\ \{ <var:M> = <var:d> \land <var:f1> = <nat:9> \cdot <var:d> \land <var:f0> = <nat:2> \} \\ <var:N> := <var:f1> \\ \{ <var:M> = <var:d> \land <var:f0> = <nat:2> \land <var:N> = <nat:9> \cdot <var:d> \} \\ <var:N> := <var:N> + <var:f0> \\ \{ <var:M> = <var:d> \land <var:N> = <nat:9> \cdot <var:d> + <nat:2> \} \end{eqnarray} Thusly , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:M> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:9> ; <var:N> := <var:f1> <var:N> := <var:N> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:M> = <var:d> }} <def:poly> {{ <var:N> = <nat:9> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:f1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:f1> = <var:d> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:f1> = <nat:9> * <var:d> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:f0> = <nat:2> /\ <var:N> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:N> = <nat:9> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 