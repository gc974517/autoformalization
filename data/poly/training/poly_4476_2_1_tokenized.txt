\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:B> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:w> = <var:j> $ taking positive integer coefficients $ <var:j> $ prior to interpreting this segment of code , it holds that we have $ <var:B> = <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:w> = <var:j> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:w> = <var:j> \land <var:e0> = <nat:2> \} \\ <var:B> := <var:e0> \\ \{ <var:w> = <var:j> \land <var:B> = <nat:2> \} \end{eqnarray} Considering the preceding argument , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:B> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:w> = <var:j> }} <def:poly> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 