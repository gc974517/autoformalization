\begin{document} \begin{theorem} Consider the following list of commands such that \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:1> + <var:L> * <var:f> ; <var:L> := <nat:2> + <var:L> * <var:f> \end{verbatim} Allowing $ <var:f> = <var:y> $ ahead of running our code segment then we have $ <var:L> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> $ after series of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be accomplished using usual Hoare logic . Advancing to the next step , we see \verb | { <var:f> = <var:y> } <var:L> := <nat:4> { <var:f> = <var:y> \land <var:L> = <nat:4> } | . This is deduced by the law found in usual Hoare logic . Going to the next step , we have \verb | { <var:f> = <var:y> } <var:L> := <nat:4> { <var:f> = <var:y> \land <var:L> = <nat:4> } | and \verb | { <var:f> = <var:y> \land <var:L> = <nat:4> } <var:L> := <nat:1> + <var:L> * <var:f> { <var:f> = <var:y> \land <var:L> = <nat:4> \times <var:y> + <nat:1> } | . This is shown to be logically sound by the variable binding inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:f> = <var:y> }} <var:L> := <nat:4> ; <var:L> := <nat:1> + <var:L> * <var:f> ; <var:L> := <nat:2> + <var:L> * <var:f> {{ <var:L> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:L> = <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:L> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 