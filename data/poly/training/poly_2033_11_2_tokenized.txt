\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <var:s> * <var:m> ; <var:s> := <nat:2> + <var:s> * <var:m> ; <var:s> := <nat:3> + <var:s> * <var:m> ; <var:s> := <nat:3> + <var:s> * <var:m> ; <var:s> := <nat:1> + <var:s> * <var:m> ; <var:s> := <nat:2> + <var:s> * <var:m> ; <var:s> := <var:s> * <var:m> ; <var:s> := <nat:2> + <var:s> * <var:m> ; <var:s> := <var:s> * <var:m> ; <var:s> := <nat:4> + <var:s> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:m> = <var:o> $ , for $ <var:o> \in \mathbb{N} $ , ahead of executing this list of commands then $ <var:s> = <nat:2> \times <var:o> ^ <nat:10> + <nat:2> \times <var:o> ^ <nat:8> + <nat:3> \times <var:o> ^ <nat:7> + <nat:3> \times <var:o> ^ <nat:6> + <nat:1> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our program is demonstrated through usual Hoare techniques . Shifting focus toward the proceeding pieces of code seen in our program , \begin{eqnarray} \{ <var:m> = <var:o> \} \, <var:s> := <nat:2> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> \} \, <var:s> := <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> + \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> + \} \, <var:s> := <nat:2> + <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> \} \, <var:s> := <nat:3> + <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> \} \, <var:s> := <nat:3> + <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> \} \, <var:s> := <nat:1> + <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> \} \, <var:s> := <nat:2> + <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:2> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:2> \} \, <var:s> := <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + \} \, <var:s> := <nat:2> + <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:2> \} \end{eqnarray} Moving forward , \begin{eqnarray} \{ <var:m> = <var:o> \} \, <var:s> := <nat:2> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> \} \\ \{ <var:m> = <var:o> \land <var:s> = <nat:2> \} \, <var:s> := <var:s> * <var:m> \, \{ <var:m> = <var:o> \land <var:s> = <nat:2> * <var:o> + \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:2> ; <var:s> := <var:s> * <var:m> ; <var:s> := <nat:2> + <var:s> * <var:m> ; <var:s> := <nat:3> + <var:s> * <var:m> ; <var:s> := <nat:3> + <var:s> * <var:m> ; <var:s> := <nat:1> + <var:s> * <var:m> ; <var:s> := <nat:2> + <var:s> * <var:m> ; <var:s> := <var:s> * <var:m> ; <var:s> := <nat:2> + <var:s> * <var:m> ; <var:s> := <var:s> * <var:m> ; <var:s> := <nat:4> + <var:s> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:m> = <var:o> }} <def:poly> {{ <var:s> = <nat:2> * <var:o> ^ <nat:10> + <nat:2> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:9> + <nat:2> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:s> = <nat:2> * <var:o> ^ <nat:10> + <nat:2> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 