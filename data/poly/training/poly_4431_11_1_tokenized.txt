\begin{document} \begin{theorem} We define a list of instructions as follows \begin{verbatim} <var:A1> := <var:a> ; <var:A2> := <var:A1> * <var:a> ; <var:A3> := <var:A2> * <var:a> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:5> ; <var:A2> := <var:A2> * <nat:2> ; <var:A3> := <var:A3> * <nat:8> ; <var:P> := <var:A3> <var:P> := <var:P> + <var:A2> <var:P> := <var:P> + <var:A1> <var:P> := <var:P> + <var:A0> \end{verbatim} Given $ <var:a> = <var:Q> $ before evaluating this list of commands it follows that $ <var:P> = <nat:8> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:7> $ after code has finished executing . \end{theorem} \begin{proof} The course of logic for the list of commands can be seen by Hoare logic . Now , \begin{verbatim} { <var:a> = <var:Q> } <var:A1> := <var:a> { <var:a> = <var:Q> \land <var:A1> = <var:Q> } { <var:a> = <var:Q> \land <var:A1> = <var:Q> } <var:A2> := <var:A1> * <var:a> { <var:a> = <var:Q> \land <var:A1> = <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> } { <var:a> = <var:Q> \land <var:A1> = <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> } <var:A3> := <var:A2> * <var:a> { <var:a> = <var:Q> \land <var:A1> = <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> } { <var:a> = <var:Q> \land <var:A1> = <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> } <var:A0> := <nat:7> { <var:a> = <var:Q> \land <var:A1> = <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } { <var:a> = <var:Q> \land <var:A1> = <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } <var:A1> := <var:A1> * <nat:5> { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } <var:A2> := <var:A2> * <nat:2> { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:A3> = <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } <var:A3> := <var:A3> * <nat:8> { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:A3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:A3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:A0> = <nat:7> } <var:P> := <var:A3{ <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:P> = <nat:8> \cdot <var:Q> ^ <nat:3> } { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:P> = <nat:8> \cdot <var:Q> ^ <nat:3> } <var:P> := <var:P> + <var:A2{ <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A0> = <nat:7> \land <var:P> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> } { <var:a> = <var:Q> \land <var:A1> = <nat:5> \cdot <var:Q> \land <var:A0> = <nat:7> \land <var:P> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> } <var:P> := <var:P> + <var:A1{ <var:a> = <var:Q> \land <var:A0> = <nat:7> \land <var:P> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> } \end{verbatim} This is guaranteed with the binding scheme of usual Hoare techniques . Focusing on the upcoming command in our series of commands , \begin{verbatim} { <var:a> = <var:Q> } <var:A1> := <var:a> { <var:a> = <var:Q> \land <var:A1> = <var:Q> } \end{verbatim} This is known to be sound through the variable update scheme defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <var:A1> := <var:a> ; <var:A2> := <var:A1> * <var:a> ; <var:A3> := <var:A2> * <var:a> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:5> ; <var:A2> := <var:A2> * <nat:2> ; <var:A3> := <var:A3> * <nat:8> ; <var:P> := <var:A3> <var:P> := <var:P> + <var:A2> <var:P> := <var:P> + <var:A1> <var:P> := <var:P> + <var:A0> {{ <var:P> = <nat:8> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <var:Q> /\ <var:A2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <var:Q> /\ <var:A2> = <var:Q> ^ <nat:2> /\ <var:A3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <var:Q> /\ <var:A2> = <var:Q> ^ <nat:2> /\ <var:A3> = <var:Q> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <nat:5> * <var:Q> /\ <var:A2> = <var:Q> ^ <nat:2> /\ <var:A3> = <var:Q> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <nat:5> * <var:Q> /\ <var:A2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:A3> = <var:Q> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <nat:5> * <var:Q> /\ <var:A2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:A3> = <nat:8> * <var:Q> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <nat:5> * <var:Q> /\ <var:A2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:A0> = <nat:7> /\ <var:P> = <nat:8> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A1> = <nat:5> * <var:Q> /\ <var:A0> = <nat:7> /\ <var:P> = <nat:8> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:A0> = <nat:7> /\ <var:P> = <nat:8> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:P> = <nat:8> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 