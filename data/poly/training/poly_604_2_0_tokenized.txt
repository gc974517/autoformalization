\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:7> ; <var:v> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:t> = <var:s> $ for any integers $ <var:s> $ ahead of the evaluation of the set of commands , it must be that $ <var:v> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:s> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:t> = <var:s> \land <var:o0> = <nat:7> \} \\ <var:v> := <var:o0> \\ \{ <var:t> = <var:s> \land <var:v> = <nat:7> \} \end{eqnarray} The application of standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:7> ; <var:v> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <def:poly> {{ <var:v> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:v> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 