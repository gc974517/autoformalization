\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:2> ; <var:x> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow , given every natural coefficients $ <var:Z> $ , that we have $ <var:Y> = <var:Z> $ before evaluating this code it follows that we see $ <var:x> = <nat:2> $ when program terminates . \end{theorem} \begin{proof} The course of logic for our code can be accomplished by usual Hoare logic . Moving on , the environment update command yielding $ <nat:2> $ as $ <var:P0>$ . This advances the condition $ \{ <var:Y> = <var:Z> \} $ into the condition $ \{ <var:Y> = <var:Z> \land <var:P0> = <nat:2> \} $ . Observing the next piece of code found in the series of instructions , the variable assignmet line letting $ <var:P0$ toward $ <var:x>$ . This statement takes the condition $ \{ <var:Y> = <var:Z> \land <var:P0> = <nat:2> \} $ as the condition $ \{ <var:Y> = <var:Z> \land <var:x> = <nat:2> \} $ . This is shown through the assignment law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:x> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <def:poly> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 