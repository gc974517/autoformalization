\begin{document} \begin{theorem} Consider a set of commands as follows \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:D> ; <var:R2> := <nat:7> ; <var:R2> := <var:R2> * <var:D> ; <var:R2> := <var:R2> * <var:D> ; <var:H> := <var:R2> ; <var:H> := <var:H> + <var:R1> ; <var:H> := <var:H> + <var:R0> \end{verbatim} Assume ( for some integers $ <var:f> $ ) it to hold that $ <var:D> = <var:f> $ ahead of evaluating our code segment , then $ <var:H> = <nat:7> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions can be accomplished using usual Hoare logic . Keeping momentum , we see the assignment command \verb | <var:R0> := <nat:6> ; | . This statement transfers the condition $ \{ <var:D> = <var:f> \} $ as the condition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \} $ . Shifting focus toward the upcoming piece of code contained in our list of commands , we see the environment update line \verb | <var:R1> := <nat:8> ; | . This code advances $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \} $ into $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \} $ . Moving onward , we see the binding line giving $ <var:R1> * <var:D> $ as $ <var:R1>$ . This command takes the precondition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \} $ toward $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \} $ . This is rigorously given with the assignment law defined in usual Hoare reasoning . Considering the following statement seen in the segment of code , the variable update code binding $ <nat:7> $ into $ <var:R2>$ . This line advances $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \} $ toward $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:R2> = <nat:7> \} $ . This is sound with the assignment inference rule from standard Hoare reasoning . Stepping through , we see the command assigning $ <var:R2> * <var:D> $ into $ <var:R2>$ . This line redefines the precondition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:R2> = <nat:7> \} $ to the postcondition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:R2> = <nat:7> \times <var:f> \} $ . Moving forward , we have the variable binding statement \verb | <var:R2> := <var:R2> * <var:D> ; | . This line advances the precondition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:R2> = <nat:7> \times <var:f> \} $ toward the condition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:R2> = <nat:7> \times <var:f> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment scheme in Hoare reasoning . Immediately after , the binding statement \verb | <var:H> := <var:R2> ; | . This code advances the condition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:R2> = <nat:7> \times <var:f> ^ <nat:2> \} $ into the condition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:H> = <nat:7> \times <var:f> ^ <nat:2> \} $ . Going forward , the variable update command defining $ <var:H> + <var:R1> $ as $ <var:H>$ . This moves the condition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \times <var:f> \land <var:H> = <nat:7> \times <var:f> ^ <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:H> = <nat:7> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> \} $ . This is shown by the assignment scheme obtained from standard Hoare logic . Focusing on the subsequent piece of code contained in the series of commands , we see the statement letting $ <var:H> + <var:R0$ into $ <var:H>$ . This line advances the precondition $ \{ <var:D> = <var:f> \land <var:R0> = <nat:6> \land <var:H> = <nat:7> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> \} $ as the condition $ \{ <var:D> = <var:f> \land <var:H> = <nat:7> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:D> = <var:f> }} <var:R0> := <nat:6> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:D> ; <var:R2> := <nat:7> ; <var:R2> := <var:R2> * <var:D> ; <var:R2> := <var:R2> * <var:D> ; <var:H> := <var:R2> ; <var:H> := <var:H> + <var:R1> ; <var:H> := <var:H> + <var:R0> {{ <var:H> = <nat:7> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:f> /\ <var:R2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:f> /\ <var:R2> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:f> /\ <var:R2> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:f> /\ <var:H> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:R0> = <nat:6> /\ <var:H> = <nat:7> * <var:f> ^ <nat:2> + <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:H> = <nat:7> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 