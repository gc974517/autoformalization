\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:3> ; <var:b> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing letting natural numbers $ <var:q> $ that we have $ <var:u> = <var:q> $ prior to executing our code segment , it follows that we have $ <var:b> = <nat:3> $ when set of commands exits . \end{theorem} \begin{proof} The application of standard Hoare techniques results in : \begin{eqnarray} \{ <var:u> = <var:q> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:u> = <var:q> \land <var:z0> = <nat:3> \} \\ <var:b> := <var:z0> \\ \{ <var:u> = <var:q> \land <var:b> = <nat:3> \} \end{eqnarray} Hence , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:3> ; <var:b> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:u> = <var:q> }} <def:poly> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:q> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:q> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 