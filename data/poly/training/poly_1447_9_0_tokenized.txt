\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:1> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:T> ; <var:g2> := <nat:2> ; <var:g2> := <var:g2> * <var:T> ; <var:g2> := <var:g2> * <var:T> ; <var:H> := <var:g2> ; <var:H> := <var:H> + <var:g1> ; <var:H> := <var:H> + <var:g0> \end{verbatim} Assuming it to hold that $ <var:T> = <var:e> $ for natural numbers $ <var:e> $ before executing the list of commands , it must be that $ <var:H> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:T> = <var:e> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \} \\ <var:g1> := <nat:3> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \} \\ <var:g1> := <var:g1> * <var:T> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:e> \} \\ <var:g2> := <nat:2> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:e> \land <var:g2> = <nat:2> \} \\ <var:g2> := <var:g2> * <var:T> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:e> \land <var:g2> = <nat:2> \cdot <var:e> \} \\ <var:g2> := <var:g2> * <var:T> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:e> \land <var:g2> = <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:H> := <var:g2> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:g1> = <nat:3> \cdot <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:g1> ; \\ \{ <var:T> = <var:e> \land <var:g0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> \} \\ <var:H> := <var:H> + <var:g0> \\ \{ <var:T> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:1> \} \end{eqnarray} Given the above , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:T> = <var:e> }} <var:g0> := <nat:1> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:T> ; <var:g2> := <nat:2> ; <var:g2> := <var:g2> * <var:T> ; <var:g2> := <var:g2> * <var:T> ; <var:H> := <var:g2> ; <var:H> := <var:H> + <var:g1> ; <var:H> := <var:H> + <var:g0> {{ <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:e> /\ <var:g2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:e> /\ <var:g2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:e> /\ <var:g2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:3> * <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:g0> = <nat:1> /\ <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 