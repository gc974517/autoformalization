\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:1> + <var:i> * <var:n> \end{verbatim} Allow it to hold that $ <var:n> = <var:E> $ ahead of executing the set of instructions then we have $ <var:i> = <nat:2> \times <var:E> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:n> = <var:E> \} \\ <var:i> := <nat:2> ; \\ \{ <var:n> = <var:E> \land <var:i> = <nat:2> \} \\ <var:i> := <nat:1> + <var:i> * <var:n> \\ \{ <var:n> = <var:E> \land <var:i> = <nat:2> * <var:E> + <nat:1> \} \end{eqnarray} Therefore , our code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:n> = <var:E> }} <var:i> := <nat:2> ; <var:i> := <nat:1> + <var:i> * <var:n> {{ <var:i> = <nat:2> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:i> = <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 