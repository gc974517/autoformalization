\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:3> + <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:3> + <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <nat:1> + <var:e> * <var:U> ; <var:e> := <nat:4> + <var:e> * <var:U> ; <var:e> := <nat:4> + <var:e> * <var:U> \end{verbatim} Assume that $ <var:U> = <var:h> $ with some $ <var:h> \in \mathbb{Z}^+ $ ahead of evaluating our series of commands , it must be that we see $ <var:e> = <nat:1> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:4> $ . \end{theorem} \begin{proof} See that the following decorated list of commands . \begin{eqnarray} \{ <var:U> = <var:h> \} \\ <var:e> := <nat:1> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \} \\ <var:e> := <nat:2> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> + <nat:2> \} \\ <var:e> := <nat:3> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> \} \\ <var:e> := <nat:2> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:2> \} \\ <var:e> := <nat:3> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> \} \\ <var:e> := <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + \} \\ <var:e> := <nat:1> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \} \\ <var:e> := <nat:4> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> + <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:U> \\ \{ <var:U> = <var:h> \land <var:e> = <nat:1> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:U> = <var:h> }} <var:e> := <nat:1> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:3> + <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:3> + <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <nat:1> + <var:e> * <var:U> ; <var:e> := <nat:4> + <var:e> * <var:U> ; <var:e> := <nat:4> + <var:e> * <var:U> {{ <var:e> = <nat:1> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:e> = <nat:1> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 