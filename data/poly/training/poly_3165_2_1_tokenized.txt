\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:4> ; <var:V> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Given it to be that $ <var:A> = <var:b> $ ahead of the execution of our program then we see $ <var:V> = <nat:4> $ when list of commands exits . \end{theorem} \begin{proof} The course of logic for this set of commands can be seen by usual Hoare techniques . Moving onward , we have the assignment line letting $ <nat:4> $ into $ <var:y0>$ . This code advances the condition $ \{ <var:A> = <var:b> \} $ into $ \{ <var:A> = <var:b> \land <var:y0> = <nat:4> \} $ . This is given with the assignment law from typical Hoare techniques . Immediately after , we see the environment update line \verb | <var:V> := <var:y0> | . This redefines $ \{ <var:A> = <var:b> \land <var:y0> = <nat:4> \} $ to the postcondition $ \{ <var:A> = <var:b> \land <var:V> = <nat:4> \} $ . This is guaranteed through the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:V> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:A> = <var:b> }} <def:poly> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:b> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:b> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 