\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:6> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:w> ; <var:V> := <var:h1> ; <var:V> := <var:V> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow letting integers $ <var:S> $ it to hold that $ <var:w> = <var:S> $ prior to running our series of commands it follows that $ <var:V> = <nat:3> * <var:S> + <nat:6> $ when code segment has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:S> \} \\ <var:h0> := <nat:6> ; \\ \{ <var:w> = <var:S> \land <var:h0> = <nat:6> \} \\ <var:h1> := <nat:3> ; \\ \{ <var:w> = <var:S> \land <var:h0> = <nat:6> \land <var:h1> = <nat:3> \} \\ <var:h1> := <var:h1> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:h0> = <nat:6> \land <var:h1> = <nat:3> \times <var:S> \} \\ <var:V> := <var:h1> ; \\ \{ <var:w> = <var:S> \land <var:h0> = <nat:6> \land <var:V> = <nat:3> \times <var:S> \} \\ <var:V> := <var:V> + <var:h0> \\ \{ <var:w> = <var:S> \land <var:V> = <nat:3> \times <var:S> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:w> ; <var:V> := <var:h1> ; <var:V> := <var:V> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:w> = <var:S> }} <def:poly> {{ <var:V> = <nat:3> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:h0> = <nat:6> /\ <var:V> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:V> = <nat:3> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 