\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:H> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:3> ; <var:A> := <var:e1> <var:A> := <var:A> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Assuming that $ <var:H> = <var:G> $ ahead of the execution of the list of instructions , it follows that we see $ <var:A> = <nat:3> \times <var:G> + <nat:6> $ . \end{theorem} \begin{proof} We can see that this decorated code . \begin{eqnarray} \{ <var:H> = <var:G> \} \\ <var:e1> := <var:H> ; \\ \{ <var:H> = <var:G> \land <var:e1> = <var:G> \} \\ <var:e0> := <nat:6> ; \\ \{ <var:H> = <var:G> \land <var:e1> = <var:G> \land <var:e0> = <nat:6> \} \\ <var:e1> := <var:e1> * <nat:3> ; \\ \{ <var:H> = <var:G> \land <var:e1> = <nat:3> \times <var:G> \land <var:e0> = <nat:6> \} \\ <var:A> := <var:e1> \\ \{ <var:H> = <var:G> \land <var:e0> = <nat:6> \land <var:A> = <nat:3> \times <var:G> \} \\ <var:A> := <var:A> + <var:e0> \\ \{ <var:H> = <var:G> \land <var:A> = <nat:3> \times <var:G> + <nat:6> \} \end{eqnarray} The application of typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:H> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:3> ; <var:A> := <var:e1> <var:A> := <var:A> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:H> = <var:G> }} <def:poly> {{ <var:A> = <nat:3> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:e1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:e1> = <var:G> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:e1> = <nat:3> * <var:G> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:e0> = <nat:6> /\ <var:A> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:A> = <nat:3> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 