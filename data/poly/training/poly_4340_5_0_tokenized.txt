\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:2> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:z> ; <var:F> := <var:E1> ; <var:F> := <var:F> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:z> = <var:g> $ ahead of evaluating our set of instructions , then we have $ <var:F> = <nat:1> * <var:g> + <nat:2> $ when segment of code has terminated . \end{theorem} \begin{proof} Observe that this decorated list of commands . \begin{eqnarray} \{ <var:z> = <var:g> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:z> = <var:g> \land <var:E0> = <nat:2> \} \\ <var:E1> := <nat:1> ; \\ \{ <var:z> = <var:g> \land <var:E0> = <nat:2> \land <var:E1> = <nat:1> \} \\ <var:E1> := <var:E1> * <var:z> ; \\ \{ <var:z> = <var:g> \land <var:E0> = <nat:2> \land <var:E1> = <nat:1> \times <var:g> \} \\ <var:F> := <var:E1> ; \\ \{ <var:z> = <var:g> \land <var:E0> = <nat:2> \land <var:F> = <nat:1> \times <var:g> \} \\ <var:F> := <var:F> + <var:E0> \\ \{ <var:z> = <var:g> \land <var:F> = <nat:1> \times <var:g> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:2> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:z> ; <var:F> := <var:E1> ; <var:F> := <var:F> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <def:poly> {{ <var:F> = <nat:1> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:E0> = <nat:2> /\ <var:F> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:F> = <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 