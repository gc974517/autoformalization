\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:f> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:f> ; <var:a2> := <var:a2> * <var:f> ; <var:p> := <var:a2> ; <var:p> := <var:p> + <var:a1> ; <var:p> := <var:p> + <var:a0> \end{verbatim} Allow , given every natural coefficients $ <var:X> $ , $ <var:f> = <var:X> $ ahead of the execution of our list of instructions it must be that $ <var:p> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> $ after series of instructions has finished . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be accomplished with Hoare logic . Moving on to the next step , we have the variable binding statement defining $ <nat:2> $ toward $ <var:a0>$ . This redefines the condition $ \{ <var:f> = <var:X> \} $ as the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \} $ . Moving forward to the next step , the assignment statement assigning $ <nat:4> $ toward $ <var:a1>$ . This redefines the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \} $ to the postcondition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \} $ . Jumping to the following command contained in the series of commands , we see the environment update command \verb | <var:a1> := <var:a1> * <var:f> ; | . This statement transfers the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \} $ toward the postcondition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \} $ . This is guaranteed by the assignment scheme defined by typical Hoare logic . Honing in on the upcoming command seen in the list of instructions , we see the variable binding code assigning $ <nat:3> $ as $ <var:a2>$ . This moves $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \} $ to the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:a2> = <nat:3> \} $ . Advancing to the proceeding bit of code seen in our program , we have the environment update line giving $ <var:a2> * <var:f> $ as $ <var:a2>$ . This statement transfers the precondition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:a2> = <nat:3> \} $ into the postcondition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:a2> = <nat:3> \times <var:X> \} $ . This is deduced with the assignment law defined in usual Hoare reasoning . After , we see the command \verb | <var:a2> := <var:a2> * <var:f> ; | . This forwards the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:a2> = <nat:3> \times <var:X> \} $ to the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:a2> = <nat:3> \times <var:X> ^ <nat:2> \} $ . This is deduced through the assignment rule given by Hoare reasoning . Honing in on the proceeding statement contained in our segment of code , we have the binding line letting $ <var:a2> $ toward $ <var:p>$ . This advances the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:a2> = <nat:3> \times <var:X> ^ <nat:2> \} $ toward the condition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:p> = <nat:3> \times <var:X> ^ <nat:2> \} $ . Further , we see the statement \verb | <var:p> := <var:p> + <var:a1> ; | . This statement moves the precondition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:a1> = <nat:4> \times <var:X> \land <var:p> = <nat:3> \times <var:X> ^ <nat:2> \} $ as the postcondition $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:p> = <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> \} $ . This is shown with the assignment rule obtained from usual Hoare logic . Moving on , we have the environment update line \verb | <var:p> := <var:p> + <var:a0> | . This redefines $ \{ <var:f> = <var:X> \land <var:a0> = <nat:2> \land <var:p> = <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> \} $ to the postcondition $ \{ <var:f> = <var:X> \land <var:p> = <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <var:a0> := <nat:2> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:f> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:f> ; <var:a2> := <var:a2> * <var:f> ; <var:p> := <var:a2> ; <var:p> := <var:p> + <var:a1> ; <var:p> := <var:p> + <var:a0> {{ <var:p> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:4> * <var:X> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:4> * <var:X> /\ <var:a2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:4> * <var:X> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:4> * <var:X> /\ <var:p> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:a0> = <nat:2> /\ <var:p> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:p> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 