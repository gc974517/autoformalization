\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:3> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:C> ; <var:l2> := <nat:1> ; <var:l2> := <var:l2> * <var:C> ; <var:l2> := <var:l2> * <var:C> ; <var:O> := <var:l2> ; <var:O> := <var:O> + <var:l1> ; <var:O> := <var:O> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:C> = <var:E> $ ( with some positive numbers $ <var:E> $ ) before evaluating this code segment , then we see $ <var:O> = <nat:1> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:3> $ when segment of code terminates . \end{theorem} \begin{proof} The argument for this series of instructions is accomplished using Hoare techniques . Jumping to the following bits of codecontained in our list of commands , \[ \begin{tabular} {rcl} \{ <var:C> = <var:E> \} & <var:l0> := <nat:3> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \} \\ \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \} & <var:l1> := <nat:1> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \} \end{tabular} Further , \[ \begin{tabular} {rcl} \{ <var:C> = <var:E> \} & <var:l0> := <nat:3> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \} \end{tabular} Moving forward , \[ \begin{tabular} {rcl} \{ <var:C> = <var:E> \} & <var:l0> := <nat:3> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \} \\ \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \} & <var:l1> := <nat:1> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \} \\ \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \} & <var:l1> := <var:l1> * <var:C> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \cdot <var:E> \} \\ \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \cdot <var:E> \} & <var:l2> := <nat:1> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \cdot <var:E> \land <var:l2> = <nat:1> \} \\ \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \cdot <var:E> \land <var:l2> = <nat:1> \} & <var:l2> := <var:l2> * <var:C> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:1> \cdot <var:E> \land <var:l2> = <nat:1> \cdot <var:E> \} \end{tabular} Advancing , we have \[ \begin{tabular} {rcl} \{ <var:C> = <var:E> \} & <var:l0> := <nat:3> & \{ <var:C> = <var:E> \land <var:l0> = <nat:3> \} \end{tabular} This is guaranteed through the environment update inference rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l0> := <nat:3> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:C> ; <var:l2> := <nat:1> ; <var:l2> := <var:l2> * <var:C> ; <var:l2> := <var:l2> * <var:C> ; <var:O> := <var:l2> ; <var:O> := <var:O> + <var:l1> ; <var:O> := <var:O> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:C> = <var:E> }} <def:poly> {{ <var:O> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:1> * <var:E> /\ <var:l2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:1> * <var:E> /\ <var:l2> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:1> * <var:E> /\ <var:l2> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:1> * <var:E> /\ <var:O> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:l0> = <nat:3> /\ <var:O> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:O> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 