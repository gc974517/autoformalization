\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given --- given any positive coefficients $ <var:y> $ --- $ <var:h> = <var:y> $ before interpreting this series of commands , it holds that we have $ <var:k> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:2> \cdot <var:y> ^ <nat:3> + <nat:2> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:2> $ after program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:y> \} \\ <var:k> := <nat:1> ; \\ \{ <var:h> = <var:y> \land <var:k> = <nat:1> \} \\ <var:k> := <nat:2> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:k> = <nat:1> \times <var:y> + <nat:2> \} \\ <var:k> := <nat:2> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:k> = <nat:1> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:2> \} \\ <var:k> := <nat:2> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:k> = <nat:1> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:2> \} \\ <var:k> := <nat:2> + <var:k> * <var:h> \\ \{ <var:h> = <var:y> \land <var:k> = <nat:1> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:2> \} \end{eqnarray} Applying Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:1> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:h> = <var:y> }} <def:poly> {{ <var:k> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:k> = <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:k> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:k> = <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:k> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 