\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:q> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:q> ; <var:r2> := <var:r2> * <var:q> ; <var:K> := <var:r2> ; <var:K> := <var:K> + <var:r1> ; <var:K> := <var:K> + <var:r0> \end{verbatim} Allow that $ <var:q> = <var:h> $ before running this series of commands , it must be that we see $ <var:K> = <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this code can be done with Hoare techniques . Jumping to the upcoming pieces of code seen in our segment of code , \[ \begin{tabular} {rcl} \{ <var:q> = <var:h> \} & <var:r0> := <nat:9> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \} \\ \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \} & <var:r1> := <nat:2> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \} \end{tabular} Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:h> \} & <var:r0> := <nat:9> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \} \\ \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \} & <var:r1> := <nat:2> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \} \\ \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \} & <var:r1> := <var:r1> * <var:q> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \times <var:h> \} \\ \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \times <var:h> \} & <var:r2> := <nat:7> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \times <var:h> \land <var:r2> = <nat:7> \} \\ \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \times <var:h> \land <var:r2> = <nat:7> \} & <var:r2> := <var:r2> * <var:q> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \times <var:h> \land <var:r2> = <nat:7> \times <var:h> \} \end{tabular} This is known to be sound through the variable assignmet scheme defined by standard Hoare logic . Advancing to the following piece of code contained in the list of commands , \[ \begin{tabular} {rcl} \{ <var:q> = <var:h> \} & <var:r0> := <nat:9> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \} \end{tabular} Moving forward , \[ \begin{tabular} {rcl} \{ <var:q> = <var:h> \} & <var:r0> := <nat:9> & \{ <var:q> = <var:h> \land <var:r0> = <nat:9> \} \end{tabular} This is shown using the variable assignmet rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:q> = <var:h> }} <var:r0> := <nat:9> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:q> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:q> ; <var:r2> := <var:r2> * <var:q> ; <var:K> := <var:r2> ; <var:K> := <var:K> + <var:r1> ; <var:K> := <var:K> + <var:r0> {{ <var:K> = <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> * <var:h> /\ <var:r2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> * <var:h> /\ <var:r2> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> * <var:h> /\ <var:r2> = <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> * <var:h> /\ <var:K> = <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:r0> = <nat:9> /\ <var:K> = <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:K> = <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 