\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:S0> := <nat:2> ; <var:k> := <var:S0> \end{verbatim} Assuming , assuming some integers $ <var:B> $ , $ <var:H> = <var:B> $ ahead of running this series of commands , then we have $ <var:k> = <nat:2> $ when set of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:B> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:H> = <var:B> \land <var:S0> = <nat:2> \} \\ <var:k> := <var:S0> \\ \{ <var:H> = <var:B> \land <var:k> = <nat:2> \} \end{eqnarray} The application of Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:H> = <var:B> }} <var:S0> := <nat:2> ; <var:k> := <var:S0> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 