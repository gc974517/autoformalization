\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:G0> := <nat:2> ; <var:O> := <var:G0> \end{verbatim} Allow $ <var:y> = <var:N> $ ( given any natural coefficients $ <var:N> $ ) prior to executing this code , it holds that we see $ <var:O> = <nat:2> $ . \end{theorem} \begin{proof} The argument for our series of commands is given using usual Hoare logic . Taking a look at the next statement in our list of commands , the variable assignmet line \verb | <var:G0> := <nat:2> ; | . This transfers the precondition $ \{ <var:y> = <var:N> \} $ to the postcondition $ \{ <var:y> = <var:N> \land <var:G0> = <nat:2> \} $ . This is rigorously given with the assignment law defined by usual Hoare techniques . Taking a look at the proceeding statement in the set of commands , we have the variable update command assigning $ <var:G0$ as $ <var:O>$ . This line forwards the precondition $ \{ <var:y> = <var:N> \land <var:G0> = <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:N> \land <var:O> = <nat:2> \} $ . This is known to be sound with the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:y> = <var:N> }} <var:G0> := <nat:2> ; <var:O> := <var:G0> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 