\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:2> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:h> ; <var:D> := <var:t1> ; <var:D> := <var:D> + <var:t0> \end{verbatim} Given that $ <var:h> = <var:H> $ prior to the evaluation of this code , then $ <var:D> = <nat:2> \cdot <var:H> + <nat:2> $ after set of instructions terminates . \end{theorem} \begin{proof} The proof of the series of commands is done using the below decorated series of commands . \begin{eqnarray} \{ <var:h> = <var:H> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:h> = <var:H> \land <var:t0> = <nat:2> \} \\ <var:t1> := <nat:2> ; \\ \{ <var:h> = <var:H> \land <var:t0> = <nat:2> \land <var:t1> = <nat:2> \} \\ <var:t1> := <var:t1> * <var:h> ; \\ \{ <var:h> = <var:H> \land <var:t0> = <nat:2> \land <var:t1> = <nat:2> \times <var:H> \} \\ <var:D> := <var:t1> ; \\ \{ <var:h> = <var:H> \land <var:t0> = <nat:2> \land <var:D> = <nat:2> \times <var:H> \} \\ <var:D> := <var:D> + <var:t0> \\ \{ <var:h> = <var:H> \land <var:D> = <nat:2> \times <var:H> + <nat:2> \} \end{eqnarray} Applying Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:h> = <var:H> }} <var:t0> := <nat:2> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:h> ; <var:D> := <var:t1> ; <var:D> := <var:D> + <var:t0> {{ <var:D> = <nat:2> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:t0> = <nat:2> /\ <var:D> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:D> = <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 