\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:P> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:P> ; <var:w2> := <var:w2> * <var:P> ; <var:U> := <var:w2> ; <var:U> := <var:U> + <var:w1> ; <var:U> := <var:U> + <var:w0> \end{verbatim} Allowing it to hold that $ <var:P> = <var:W> $ ahead of evaluating this segment of code then $ <var:U> = <nat:7> \times <var:W> ^ <nat:2> + <nat:7> \times <var:W> + <nat:9> $ when program executes . \end{theorem} \begin{proof} Note that the following decorated list of instructions . \begin{eqnarray} \{ <var:P> = <var:W> \} \\ <var:w0> := <nat:9> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \} \\ <var:w1> := <nat:7> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:w1> = <nat:7> \} \\ <var:w1> := <var:w1> * <var:P> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:w1> = <nat:7> * <var:W> \} \\ <var:w2> := <nat:7> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:w1> = <nat:7> * <var:W> \land <var:w2> = <nat:7> \} \\ <var:w2> := <var:w2> * <var:P> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:w1> = <nat:7> * <var:W> \land <var:w2> = <nat:7> * <var:W> \} \\ <var:w2> := <var:w2> * <var:P> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:w1> = <nat:7> * <var:W> \land <var:w2> = <nat:7> * <var:W> ^ <nat:2> \} \\ <var:U> := <var:w2> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:w1> = <nat:7> * <var:W> \land <var:U> = <nat:7> * <var:W> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:w1> ; \\ \{ <var:P> = <var:W> \land <var:w0> = <nat:9> \land <var:U> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> \} \\ <var:U> := <var:U> + <var:w0> \\ \{ <var:P> = <var:W> \land <var:U> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:9> \} \end{eqnarray} Using standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:P> = <var:W> }} <var:w0> := <nat:9> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:P> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:P> ; <var:w2> := <var:w2> * <var:P> ; <var:U> := <var:w2> ; <var:U> := <var:U> + <var:w1> ; <var:U> := <var:U> + <var:w0> {{ <var:U> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:7> * <var:W> /\ <var:w2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:7> * <var:W> /\ <var:w2> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:7> * <var:W> /\ <var:w2> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:7> * <var:W> /\ <var:U> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:w0> = <nat:9> /\ <var:U> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:U> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 