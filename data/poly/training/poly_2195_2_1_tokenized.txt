\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:9> ; <var:F> := <var:u0> \end{verbatim} Given it to hold that $ <var:B> = <var:C> $ prior to interpreting this segment of code , it must be that we see $ <var:F> = <nat:9> $ when segment of code exits . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands is given using Hoare logic . Stepping forward , we have \begin{eqnarray} \{ <var:B> = <var:C> \} \, <var:u0> := <nat:9> \, \{ <var:B> = <var:C> \land <var:u0> = <nat:9> \} \\ \{ <var:B> = <var:C> \land <var:u0> = <nat:9> \} \, <var:F> := <var:u0\, \{ <var:B> = <var:C> \land <var:F> = <nat:9> \} \end{eqnarray} This is given by the assignment scheme from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:B> = <var:C> }} <var:u0> := <nat:9> ; <var:F> := <var:u0> {{ <var:F> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:F> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 