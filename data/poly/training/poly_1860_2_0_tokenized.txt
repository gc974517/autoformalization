\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:3> ; <var:T> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given for some natural coefficients $ <var:S> $ that $ <var:E> = <var:S> $ before the execution of our code segment , then we see $ <var:T> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands can be done using the following decorated program . \begin{eqnarray} \{ <var:E> = <var:S> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:E> = <var:S> \land <var:d0> = <nat:3> \} \\ <var:T> := <var:d0> \\ \{ <var:E> = <var:S> \land <var:T> = <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:3> ; <var:T> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:E> = <var:S> }} <def:poly> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 