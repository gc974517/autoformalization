\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:7> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:n> ; <var:S> := <var:f1> ; <var:S> := <var:S> + <var:f0> \end{verbatim} Allowing that $ <var:n> = <var:j> $ ( given $ <var:j> $ ) ahead of the execution of this set of commands it must be that we have $ <var:S> = <nat:7> * <var:j> + <nat:7> $ after code is done . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:n> = <var:j> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:n> = <var:j> \land <var:f0> = <nat:7> \} \end{eqnarray} Advancing the evaluation of our set of commands gives us : \begin{eqnarray} <var:f1> := <nat:7> ; \\ \{ <var:n> = <var:j> \land <var:f0> = <nat:7> \land <var:f1> = <nat:7> \} \\ <var:f1> := <var:f1> * <var:n> ; \\ \{ <var:n> = <var:j> \land <var:f0> = <nat:7> \land <var:f1> = <nat:7> * <var:j> \} \\ <var:S> := <var:f1> ; \\ \{ <var:n> = <var:j> \land <var:f0> = <nat:7> \land <var:S> = <nat:7> * <var:j> \} \\ <var:S> := <var:S> + <var:f0> \\ \{ <var:n> = <var:j> \land <var:S> = <nat:7> * <var:j> + <nat:7> \} \end{eqnarray} As a consequence , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <var:f0> := <nat:7> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:n> ; <var:S> := <var:f1> ; <var:S> := <var:S> + <var:f0> {{ <var:S> = <nat:7> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:f0> = <nat:7> /\ <var:S> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:S> = <nat:7> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 