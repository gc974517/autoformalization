\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:d> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:4> ; <var:T> := <var:E1> <var:T> := <var:T> + <var:E0> \end{verbatim} Assuming that $ <var:d> = <var:U> $ prior to running our list of instructions , it follows that we have $ <var:T> = <nat:4> * <var:U> + <nat:4> $ after list of instructions has finished . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be shown through standard Hoare techniques . Looking at the proceeding statement found in our program , we have the variable binding code yielding $ <var:d> $ as $ <var:E1>$ . This transfers the condition $ \{ <var:d> = <var:U> \} $ into $ \{ <var:d> = <var:U> \land <var:E1> = <var:U> \} $ . Taking another step toward the subsequent statement in our segment of code , we see the assignment code letting $ <nat:4> $ to $ <var:E0>$ . This redefines the condition $ \{ <var:d> = <var:U> \land <var:E1> = <var:U> \} $ into $ \{ <var:d> = <var:U> \land <var:E1> = <var:U> \land <var:E0> = <nat:4> \} $ . After , the environment update code \verb | <var:E1> := <var:E1> * <nat:4> ; | . This statement moves the condition $ \{ <var:d> = <var:U> \land <var:E1> = <var:U> \land <var:E0> = <nat:4> \} $ as the condition $ \{ <var:d> = <var:U> \land <var:E1> = <nat:4> * <var:U> \land <var:E0> = <nat:4> \} $ . This is deduced with the assignment rule in standard Hoare techniques . Taking a look at the proceeding command contained in our set of instructions , we see the variable binding line \verb | <var:T> := <var:E1> | . This forwards the condition $ \{ <var:d> = <var:U> \land <var:E1> = <nat:4> * <var:U> \land <var:E0> = <nat:4> \} $ as the condition $ \{ <var:d> = <var:U> \land <var:E0> = <nat:4> \land <var:T> = <nat:4> * <var:U> \} $ . This is ensured through the assignment rule given in typical Hoare logic . Advancing on , the variable update statement \verb | <var:T> := <var:T> + <var:E0> | . This transfers the condition $ \{ <var:d> = <var:U> \land <var:E0> = <nat:4> \land <var:T> = <nat:4> * <var:U> \} $ into the condition $ \{ <var:d> = <var:U> \land <var:T> = <nat:4> * <var:U> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:d> = <var:U> }} <var:E1> := <var:d> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:4> ; <var:T> := <var:E1> <var:T> := <var:T> + <var:E0> {{ <var:T> = <nat:4> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:E1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:E1> = <var:U> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:E1> = <nat:4> * <var:U> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:E0> = <nat:4> /\ <var:T> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:T> = <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 