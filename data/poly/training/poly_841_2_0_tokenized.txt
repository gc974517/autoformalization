\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:9> ; <var:l> := <var:y0> \end{verbatim} Allow that we have $ <var:U> = <var:N> $ ( given all $ <var:N> \in \mathbb{Z}^+ $ ) prior to interpreting our list of instructions then we see $ <var:l> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be done with standard Hoare techniques . Jumping to the upcoming statement found in the list of commands , we have the environment update statement assigning $ <nat:9> $ to $ <var:y0>$ . This code transfers $ \{ <var:U> = <var:N> \} $ to $ \{ <var:U> = <var:N> \land <var:y0> = <nat:9> \} $ . This is known to be sound through the assignment inference rule defined in standard Hoare techniques . Advancing to the next line found in our code , the variable update code yielding $ <var:y0$ as $ <var:l>$ . This command forwards the precondition $ \{ <var:U> = <var:N> \land <var:y0> = <nat:9> \} $ to the condition $ \{ <var:U> = <var:N> \land <var:l> = <nat:9> \} $ . This is ensured using the assignment law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:U> = <var:N> }} <var:y0> := <nat:9> ; <var:l> := <var:y0> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 