\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:o> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming that we have $ <var:T> = <var:e> $ before evaluating the set of instructions , it follows that we see $ <var:o> = <nat:2> $ when program has exited . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is done through standard Hoare reasoning . Keeping momentum , we see the statement \verb | <var:y0> := <nat:2> ; | . This moves the precondition $ \{ <var:T> = <var:e> \} $ toward the condition $ \{ <var:T> = <var:e> \land <var:y0> = <nat:2> \} $ . Taking another step toward the proceeding piece of code contained in our program , we have the assignment statement \verb | <var:o> := <var:y0> | . This redefines the condition $ \{ <var:T> = <var:e> \land <var:y0> = <nat:2> \} $ as $ \{ <var:T> = <var:e> \land <var:o> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:o> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:T> = <var:e> }} <def:poly> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 