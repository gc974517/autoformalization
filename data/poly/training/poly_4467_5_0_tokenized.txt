\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:6> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:j> ; <var:f> := <var:Q1> ; <var:f> := <var:f> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assume it to be that $ <var:j> = <var:Z> $ , given natural coefficients $ <var:Z> $ , before executing this list of commands , it follows that $ <var:f> = <nat:2> \cdot <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be given by standard Hoare logic . Taking another step toward the subsequent bit of code contained in the series of commands , we see \verb | { <var:j> = <var:Z> } <var:Q0> := <nat:6> { <var:j> = <var:Z> \land <var:Q0> = <nat:6> } | . Advancing on , we see \verb | { <var:j> = <var:Z> } <var:Q0> := <nat:6> { <var:j> = <var:Z> \land <var:Q0> = <nat:6> } | , \verb | { <var:j> = <var:Z> \land <var:Q0> = <nat:6> } <var:Q1> := <nat:2> { <var:j> = <var:Z> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:2> } | , \verb | { <var:j> = <var:Z> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:2> } <var:Q1> := <var:Q1> * <var:j> { <var:j> = <var:Z> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:2> \cdot <var:Z> } | and \verb | { <var:j> = <var:Z> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:2> \cdot <var:Z> } <var:f> := <var:Q1> { <var:j> = <var:Z> \land <var:Q0> = <nat:6> \land <var:f> = <nat:2> \cdot <var:Z> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:6> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:j> ; <var:f> := <var:Q1> ; <var:f> := <var:f> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:j> = <var:Z> }} <def:poly> {{ <var:f> = <nat:2> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:Q0> = <nat:6> /\ <var:f> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:f> = <nat:2> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 