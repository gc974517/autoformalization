\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:2> ; <var:Y> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:D> = <var:G> $ given every positive integers $ <var:G> $ before running the list of instructions it follows that we have $ <var:Y> = <nat:2> $ after series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:G> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:D> = <var:G> \land <var:a0> = <nat:2> \} \\ <var:Y> := <var:a0> \\ \{ <var:D> = <var:G> \land <var:Y> = <nat:2> \} \end{eqnarray} Using typical Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:2> ; <var:Y> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:D> = <var:G> }} <def:poly> {{ <var:Y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:Y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 