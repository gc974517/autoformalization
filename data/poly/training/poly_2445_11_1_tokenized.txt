\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:A> ; <var:M2> := <var:M1> * <var:A> ; <var:M3> := <var:M2> * <var:A> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:5> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:6> ; <var:w> := <var:M3> <var:w> := <var:w> + <var:M2> <var:w> := <var:w> + <var:M1> <var:w> := <var:w> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assume , for some positive integer coefficients $ <var:i> $ , $ <var:A> = <var:i> $ prior to executing the program it follows that $ <var:w> = <nat:6> \cdot <var:i> ^ <nat:3> + <nat:5> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:A> = <var:i> \} \\ <var:M1> := <var:A> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <var:i> \} \\ <var:M2> := <var:M1> * <var:A> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <var:i> \land <var:M2> = <var:i> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:A> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <var:i> \land <var:M2> = <var:i> ^ <nat:2> \land <var:M3> = <var:i> ^ <nat:3> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <var:i> \land <var:M2> = <var:i> ^ <nat:2> \land <var:M3> = <var:i> ^ <nat:3> \land <var:M0> = <nat:3> \} \\ <var:M1> := <var:M1> * <nat:5> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <nat:5> \times <var:i> \land <var:M2> = <var:i> ^ <nat:2> \land <var:M3> = <var:i> ^ <nat:3> \land <var:M0> = <nat:3> \} \\ <var:M2> := <var:M2> * <nat:5> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <nat:5> \times <var:i> \land <var:M2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:M3> = <var:i> ^ <nat:3> \land <var:M0> = <nat:3> \} \\ <var:M3> := <var:M3> * <nat:6> ; \\ \{ <var:A> = <var:i> \land <var:M1> = <nat:5> \times <var:i> \land <var:M2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:i> ^ <nat:3> \land <var:M0> = <nat:3> \} \\ <var:w> := <var:M3> \\ \{ <var:A> = <var:i> \land <var:M1> = <nat:5> \times <var:i> \land <var:M2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:M0> = <nat:3> \land <var:w> = <nat:6> \times <var:i> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:M2> \\ \{ <var:A> = <var:i> \land <var:M1> = <nat:5> \times <var:i> \land <var:M0> = <nat:3> \land <var:w> = <nat:6> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:M1> \\ \{ <var:A> = <var:i> \land <var:M0> = <nat:3> \land <var:w> = <nat:6> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> + <nat:5> \times <var:i> \} \\ <var:w> := <var:w> + <var:M0> \\ \{ <var:A> = <var:i> \land <var:w> = <nat:6> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> + <nat:5> \times <var:i> + <nat:3> \} \end{eqnarray} As a consequence , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:A> ; <var:M2> := <var:M1> * <var:A> ; <var:M3> := <var:M2> * <var:A> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:5> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:6> ; <var:w> := <var:M3> <var:w> := <var:w> + <var:M2> <var:w> := <var:w> + <var:M1> <var:w> := <var:w> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:A> = <var:i> }} <def:poly> {{ <var:w> = <nat:6> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <var:i> /\ <var:M2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <var:i> /\ <var:M2> = <var:i> ^ <nat:2> /\ <var:M3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <var:i> /\ <var:M2> = <var:i> ^ <nat:2> /\ <var:M3> = <var:i> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <nat:5> * <var:i> /\ <var:M2> = <var:i> ^ <nat:2> /\ <var:M3> = <var:i> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <nat:5> * <var:i> /\ <var:M2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:M3> = <var:i> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <nat:5> * <var:i> /\ <var:M2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:M3> = <nat:6> * <var:i> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <nat:5> * <var:i> /\ <var:M2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:M0> = <nat:3> /\ <var:w> = <nat:6> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M1> = <nat:5> * <var:i> /\ <var:M0> = <nat:3> /\ <var:w> = <nat:6> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M0> = <nat:3> /\ <var:w> = <nat:6> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w> = <nat:6> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 