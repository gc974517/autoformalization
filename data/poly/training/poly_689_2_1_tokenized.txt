\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:i0> := <nat:9> ; <var:n> := <var:i0> \end{verbatim} Assuming that $ <var:T> = <var:B> $ ahead of the execution of this set of commands then we have $ <var:n> = <nat:9> $ . \end{theorem} \begin{proof} The argument for our set of commands is clear with standard Hoare logic . Immediately after , we have the binding command \verb | <var:i0> := <nat:9> ; | . This statement forwards the precondition $ \{ <var:T> = <var:B> \} $ into the postcondition $ \{ <var:T> = <var:B> \land <var:i0> = <nat:9> \} $ . Considering the following command in the segment of code , we have the binding code \verb | <var:n> := <var:i0> | . This line transfers the condition $ \{ <var:T> = <var:B> \land <var:i0> = <nat:9> \} $ as the postcondition $ \{ <var:T> = <var:B> \land <var:n> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <var:i0> := <nat:9> ; <var:n> := <var:i0> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 