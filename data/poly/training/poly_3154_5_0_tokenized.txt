\begin{document} \begin{theorem} Consider the following set of commands as \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:R> ; <var:g> := <var:x1> ; <var:g> := <var:g> + <var:x0> \end{verbatim} Allowing it to be that $ <var:R> = <var:L> $ , given some positive numbers $ <var:L> $ , before the execution of the set of commands it follows that we see $ <var:g> = <nat:9> \cdot <var:L> + <nat:9> $ after code segment has terminated . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be given through usual Hoare reasoning . Now , we see the assignment code binding $ <nat:9> $ as $ <var:x0>$ . This command moves $ \{ <var:R> = <var:L> \} $ toward the condition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \} $ . This is shown through the assignment rule found in Hoare techniques . Honing in on the next bit of code found in the set of instructions , we have the command \verb | <var:x1> := <nat:9> ; | . This advances the condition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \} $ to the postcondition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \} $ . Advancing to the next step , the variable update statement \verb | <var:x1> := <var:x1> * <var:R> ; | . This code moves $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \} $ to the postcondition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> * <var:L> \} $ . Focusing on the upcoming line in our code segment , we see the variable update code giving $ <var:x1> $ into $ <var:g>$ . This statement takes the condition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> * <var:L> \} $ into the condition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \land <var:g> = <nat:9> * <var:L> \} $ . This is ensured with the assignment law given by typical Hoare techniques . Moving forward to the proceeding piece of code seen in the set of commands , the environment update statement defining $ <var:g> + <var:x0$ into $ <var:g>$ . This moves the condition $ \{ <var:R> = <var:L> \land <var:x0> = <nat:9> \land <var:g> = <nat:9> * <var:L> \} $ into $ \{ <var:R> = <var:L> \land <var:g> = <nat:9> * <var:L> + <nat:9> \} $ . This is known to be sound using the assignment rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:R> = <var:L> }} <var:x0> := <nat:9> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:R> ; <var:g> := <var:x1> ; <var:g> := <var:g> + <var:x0> {{ <var:g> = <nat:9> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:x0> = <nat:9> /\ <var:g> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:g> = <nat:9> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 