\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:a1> := <var:G> ; <var:a0> := <nat:8> ; <var:a1> := <var:a1> * <nat:4> ; <var:h> := <var:a1> <var:h> := <var:h> + <var:a0> \end{verbatim} Assuming it to hold that $ <var:G> = <var:J> $ ahead of executing this program , it holds that we see $ <var:h> = <nat:4> \times <var:J> + <nat:8> $ once segment of code is done . \end{theorem} \begin{proof} The course of logic for our code can be seen through typical Hoare logic . Honing in on the upcoming lines of codecontained in the series of instructions , we have \begin{verbatim} { <var:G> = <var:J> } <var:a1> := <var:G> { <var:G> = <var:J> \land <var:a1> = <var:J> } { <var:G> = <var:J> \land <var:a1> = <var:J> } <var:a0> := <nat:8> { <var:G> = <var:J> \land <var:a1> = <var:J> \land <var:a0> = <nat:8> } { <var:G> = <var:J> \land <var:a1> = <var:J> \land <var:a0> = <nat:8> } <var:a1> := <var:a1> * <nat:4> { <var:G> = <var:J> \land <var:a1> = <nat:4> * <var:J> \land <var:a0> = <nat:8> } { <var:G> = <var:J> \land <var:a1> = <nat:4> * <var:J> \land <var:a0> = <nat:8> } <var:h> := <var:a1{ <var:G> = <var:J> \land <var:a0> = <nat:8> \land <var:h> = <nat:4> * <var:J> } { <var:G> = <var:J> \land <var:a0> = <nat:8> \land <var:h> = <nat:4> * <var:J> } <var:h> := <var:h> + <var:a0{ <var:G> = <var:J> \land <var:h> = <nat:4> * <var:J> + <nat:8> } \end{verbatim} This is sound with the binding rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <var:a1> := <var:G> ; <var:a0> := <nat:8> ; <var:a1> := <var:a1> * <nat:4> ; <var:h> := <var:a1> <var:h> := <var:h> + <var:a0> {{ <var:h> = <nat:4> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a1> = <var:J> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a1> = <nat:4> * <var:J> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a0> = <nat:8> /\ <var:h> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:h> = <nat:4> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 