\begin{document} \begin{theorem} We define a series of instructions as \begin{verbatim} <var:A1> := <var:s> ; <var:A2> := <var:A1> * <var:s> ; <var:A3> := <var:A2> * <var:s> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:8> ; <var:A3> := <var:A3> * <nat:2> ; <var:B> := <var:A3> <var:B> := <var:B> + <var:A2> <var:B> := <var:B> + <var:A1> <var:B> := <var:B> + <var:A0> \end{verbatim} Given --- with some natural coefficients $ <var:J> $ --- that $ <var:s> = <var:J> $ prior to executing the segment of code , it must be that $ <var:B> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:8> \cdot <var:J> ^ <nat:2> + <nat:8> \cdot <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:s> = <var:J> \} \\ <var:A1> := <var:s> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <var:J> \} \\ <var:A2> := <var:A1> * <var:s> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <var:J> \land <var:A2> = <var:J> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:s> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <var:J> \land <var:A2> = <var:J> ^ <nat:2> \land <var:A3> = <var:J> ^ <nat:3> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <var:J> \land <var:A2> = <var:J> ^ <nat:2> \land <var:A3> = <var:J> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A1> := <var:A1> * <nat:8> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <nat:8> \times <var:J> \land <var:A2> = <var:J> ^ <nat:2> \land <var:A3> = <var:J> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A2> := <var:A2> * <nat:8> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <nat:8> \times <var:J> \land <var:A2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:A3> = <var:J> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A3> := <var:A3> * <nat:2> ; \\ \{ <var:s> = <var:J> \land <var:A1> = <nat:8> \times <var:J> \land <var:A2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:A3> = <nat:2> \times <var:J> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:B> := <var:A3> \\ \{ <var:s> = <var:J> \land <var:A1> = <nat:8> \times <var:J> \land <var:A2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:A0> = <nat:4> \land <var:B> = <nat:2> \times <var:J> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:A2> \\ \{ <var:s> = <var:J> \land <var:A1> = <nat:8> \times <var:J> \land <var:A0> = <nat:4> \land <var:B> = <nat:2> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:A1> \\ \{ <var:s> = <var:J> \land <var:A0> = <nat:4> \land <var:B> = <nat:2> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> \} \\ <var:B> := <var:B> + <var:A0> \\ \{ <var:s> = <var:J> \land <var:B> = <nat:2> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> + <nat:4> \} \end{eqnarray} Hence , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:s> = <var:J> }} <var:A1> := <var:s> ; <var:A2> := <var:A1> * <var:s> ; <var:A3> := <var:A2> * <var:s> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:8> ; <var:A3> := <var:A3> * <nat:2> ; <var:B> := <var:A3> <var:B> := <var:B> + <var:A2> <var:B> := <var:B> + <var:A1> <var:B> := <var:B> + <var:A0> {{ <var:B> = <nat:2> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <var:J> /\ <var:A2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <var:J> /\ <var:A2> = <var:J> ^ <nat:2> /\ <var:A3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <var:J> /\ <var:A2> = <var:J> ^ <nat:2> /\ <var:A3> = <var:J> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <nat:8> * <var:J> /\ <var:A2> = <var:J> ^ <nat:2> /\ <var:A3> = <var:J> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <nat:8> * <var:J> /\ <var:A2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:A3> = <var:J> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <nat:8> * <var:J> /\ <var:A2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:J> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <nat:8> * <var:J> /\ <var:A2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:A0> = <nat:4> /\ <var:B> = <nat:2> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A1> = <nat:8> * <var:J> /\ <var:A0> = <nat:4> /\ <var:B> = <nat:2> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:A0> = <nat:4> /\ <var:B> = <nat:2> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:B> = <nat:2> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 