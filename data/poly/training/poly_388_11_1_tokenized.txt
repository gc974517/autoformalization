\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:p> ; <var:l2> := <var:l1> * <var:p> ; <var:l3> := <var:l2> * <var:p> ; <var:l0> := <nat:8> ; <var:l1> := <var:l1> * <nat:5> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:1> ; <var:J> := <var:l3> <var:J> := <var:J> + <var:l2> <var:J> := <var:J> + <var:l1> <var:J> := <var:J> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:p> = <var:o> $ given all $ <var:o> \in \mathbb{Z}^+ $ before the evaluation of the code segment , then we have $ <var:J> = <nat:1> \times <var:o> ^ <nat:3> + <nat:5> \times <var:o> ^ <nat:2> + <nat:5> \times <var:o> + <nat:8> $ after list of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be given by standard Hoare logic . Further , we see \begin{eqnarray} \{ <var:p> = <var:o> \} \, <var:l1> := <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \, <var:l2> := <var:l1> * <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} \, <var:l3> := <var:l2> * <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \} \, <var:l0> := <nat:8> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:8> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:8> \} \, <var:l1> := <var:l1> * <nat:5> \, \{ <var:p> = <var:o> \land <var:l1> = <nat:5> \cdot <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:8> \} \end{eqnarray} Further , we see \begin{eqnarray} \{ <var:p> = <var:o> \} \, <var:l1> := <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \, <var:l2> := <var:l1> * <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} \end{eqnarray} This is ensured with the variable assignmet law from Hoare techniques . Looking at the upcoming statements in our set of commands , we have \begin{eqnarray} \{ <var:p> = <var:o> \} \, <var:l1> := <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \, <var:l2> := <var:l1> * <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} \\ \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} \, <var:l3> := <var:l2> * <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \} \end{eqnarray} Moving on to the subsequent line contained in our program , \begin{eqnarray} \{ <var:p> = <var:o> \} \, <var:l1> := <var:p> \, \{ <var:p> = <var:o> \land <var:l1> = <var:o> \} \end{eqnarray} This is ensured with the environment update inference rule of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:p> ; <var:l2> := <var:l1> * <var:p> ; <var:l3> := <var:l2> * <var:p> ; <var:l0> := <nat:8> ; <var:l1> := <var:l1> * <nat:5> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:1> ; <var:J> := <var:l3> <var:J> := <var:J> + <var:l2> <var:J> := <var:J> + <var:l1> <var:J> := <var:J> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:p> = <var:o> }} <def:poly> {{ <var:J> = <nat:1> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <nat:5> * <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <nat:5> * <var:o> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <nat:5> * <var:o> ^ <nat:2> /\ <var:l0> = <nat:8> /\ <var:J> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l0> = <nat:8> /\ <var:J> = <nat:1> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l0> = <nat:8> /\ <var:J> = <nat:1> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:J> = <nat:1> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 