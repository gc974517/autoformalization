\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:Z> ; <var:T> := <var:F1> ; <var:T> := <var:T> + <var:F0> \end{verbatim} Given that $ <var:Z> = <var:M> $ --- for all integers $ <var:M> $ --- before evaluating the list of instructions , it must be that we have $ <var:T> = <nat:2> * <var:M> + <nat:1> $ after series of instructions has exited . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be seen using typical Hoare logic . Going forward , \begin{verbatim} { <var:Z> = <var:M> } <var:F0> := <nat:1> { <var:Z> = <var:M> \land <var:F0> = <nat:1> } { <var:Z> = <var:M> \land <var:F0> = <nat:1> } <var:F1> := <nat:2> { <var:Z> = <var:M> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> } \end{verbatim} Next , we have \begin{verbatim} { <var:Z> = <var:M> } <var:F0> := <nat:1> { <var:Z> = <var:M> \land <var:F0> = <nat:1> } { <var:Z> = <var:M> \land <var:F0> = <nat:1> } <var:F1> := <nat:2> { <var:Z> = <var:M> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> } { <var:Z> = <var:M> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> } <var:F1> := <var:F1> * <var:Z> { <var:Z> = <var:M> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> * <var:M> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Z> = <var:M> }} <var:F0> := <nat:1> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:Z> ; <var:T> := <var:F1> ; <var:T> := <var:T> + <var:F0> {{ <var:T> = <nat:2> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:F0> = <nat:1> /\ <var:T> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:T> = <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 