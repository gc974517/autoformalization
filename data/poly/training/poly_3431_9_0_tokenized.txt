\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:7> ; <var:O1> := <nat:7> ; <var:O1> := <var:O1> * <var:V> ; <var:O2> := <nat:8> ; <var:O2> := <var:O2> * <var:V> ; <var:O2> := <var:O2> * <var:V> ; <var:c> := <var:O2> ; <var:c> := <var:c> + <var:O1> ; <var:c> := <var:c> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for natural numbers $ <var:D> $ --- it to be that $ <var:V> = <var:D> $ ahead of interpreting this program , it must be that we have $ <var:c> = <nat:8> \times <var:D> ^ <nat:2> + <nat:7> \times <var:D> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is evident using usual Hoare techniques . Focusing on the proceeding statements found in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:D> \} & <var:O0> := <nat:7> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \} \\ \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \} & <var:O1> := <nat:7> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \} \\ \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \} & <var:O1> := <var:O1> * <var:V> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \} \\ \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \} & <var:O2> := <nat:8> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \land <var:O2> = <nat:8> \} \\ \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \land <var:O2> = <nat:8> \} & <var:O2> := <var:O2> * <var:V> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> \} \\ \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> \} & <var:O2> := <var:O2> * <var:V> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> ^ <nat:2> \} \end{tabular} Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:D> \} & <var:O0> := <nat:7> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \} \end{tabular} Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:V> = <var:D> \} & <var:O0> := <nat:7> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \} \\ \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \} & <var:O1> := <nat:7> & \{ <var:V> = <var:D> \land <var:O0> = <nat:7> \land <var:O1> = <nat:7> \} \end{tabular} This is rigorously given with the assignment inference rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:7> ; <var:O1> := <nat:7> ; <var:O1> := <var:O1> * <var:V> ; <var:O2> := <nat:8> ; <var:O2> := <var:O2> * <var:V> ; <var:O2> := <var:O2> * <var:V> ; <var:c> := <var:O2> ; <var:c> := <var:c> + <var:O1> ; <var:c> := <var:c> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:V> = <var:D> }} <def:poly> {{ <var:c> = <nat:8> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:7> * <var:D> /\ <var:O2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:7> * <var:D> /\ <var:O2> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:7> * <var:D> /\ <var:O2> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:7> * <var:D> /\ <var:c> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:O0> = <nat:7> /\ <var:c> = <nat:8> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:c> = <nat:8> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 