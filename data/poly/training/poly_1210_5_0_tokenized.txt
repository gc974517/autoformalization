\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:W> ; <var:w> := <var:T1> ; <var:w> := <var:w> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Allow $ <var:W> = <var:q> $ ( for all integers $ <var:q> $ ) ahead of interpreting our series of instructions it holds that we see $ <var:w> = <nat:8> * <var:q> + <nat:5> $ once series of commands has terminated . \end{theorem} \begin{proof} Observe that this decorated list of instructions . \begin{eqnarray} \{ <var:W> = <var:q> \} \\ <var:T0> := <nat:5> ; \\ \{ <var:W> = <var:q> \land <var:T0> = <nat:5> \} \\ <var:T1> := <nat:8> ; \\ \{ <var:W> = <var:q> \land <var:T0> = <nat:5> \land <var:T1> = <nat:8> \} \\ <var:T1> := <var:T1> * <var:W> ; \\ \{ <var:W> = <var:q> \land <var:T0> = <nat:5> \land <var:T1> = <nat:8> * <var:q> \} \\ <var:w> := <var:T1> ; \\ \{ <var:W> = <var:q> \land <var:T0> = <nat:5> \land <var:w> = <nat:8> * <var:q> \} \\ <var:w> := <var:w> + <var:T0> \\ \{ <var:W> = <var:q> \land <var:w> = <nat:8> * <var:q> + <nat:5> \} \end{eqnarray} Utilizing usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:5> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:W> ; <var:w> := <var:T1> ; <var:w> := <var:w> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:W> = <var:q> }} <def:poly> {{ <var:w> = <nat:8> * <var:q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:T0> = <nat:5> /\ <var:w> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:w> = <nat:8> * <var:q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 