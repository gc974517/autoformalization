\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:K> ; <var:f2> := <nat:1> ; <var:f2> := <var:f2> * <var:K> ; <var:f2> := <var:f2> * <var:K> ; <var:F> := <var:f2> ; <var:F> := <var:F> + <var:f1> ; <var:F> := <var:F> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow --- letting $ <var:c> \in \mathbb{N} $ --- that $ <var:K> = <var:c> $ prior to interpreting our code segment then we have $ <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> + <nat:6> $ . \end{theorem} \begin{proof} The argument for this set of commands is accomplished with standard Hoare techniques . Immediately following , the statement defining $ <nat:6> $ to $ <var:f0>$ . This redefines $ \{ <var:K> = <var:c> \} $ as the condition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \} $ . Focusing on the next line in our series of commands , the line \verb | <var:f1> := <nat:7> ; | . This command moves the precondition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \} $ as the condition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \} $ . This is shown through the assignment inference rule given by standard Hoare logic . Honing in on the upcoming statement in our set of commands , we have the variable assignmet code \verb | <var:f1> := <var:f1> * <var:K> ; | . This statement advances $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \} $ toward the condition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \} $ . This is sound with the assignment inference rule obtained from standard Hoare reasoning . Immediately after , the assignment command \verb | <var:f2> := <nat:1> ; | . This statement advances the precondition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \} $ to $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:f2> = <nat:1> \} $ . This is shown to be logically sound through the assignment inference rule defined by typical Hoare reasoning . Advancing to the next step , we have the assignment code yielding $ <var:f2> * <var:K> $ into $ <var:f2>$ . This code moves the condition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:f2> = <nat:1> \} $ as $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:f2> = <nat:1> * <var:c> \} $ . Advancing , the variable binding statement \verb | <var:f2> := <var:f2> * <var:K> ; | . This forwards the precondition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:f2> = <nat:1> * <var:c> \} $ into $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:f2> = <nat:1> * <var:c> ^ <nat:2> \} $ . Observing the subsequent command in the series of instructions , we have the code \verb | <var:F> := <var:f2> ; | . This moves $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:f2> = <nat:1> * <var:c> ^ <nat:2> \} $ toward the condition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:F> = <nat:1> * <var:c> ^ <nat:2> \} $ . Advancing , the variable update command \verb | <var:F> := <var:F> + <var:f1> ; | . This advances $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> * <var:c> \land <var:F> = <nat:1> * <var:c> ^ <nat:2> \} $ into the postcondition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> \} $ . Focusing on the next bit of code seen in our code segment , we have the command defining $ <var:F> + <var:f0$ to $ <var:F>$ . This line transfers the condition $ \{ <var:K> = <var:c> \land <var:f0> = <nat:6> \land <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> \} $ into the condition $ \{ <var:K> = <var:c> \land <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:K> ; <var:f2> := <nat:1> ; <var:f2> := <var:f2> * <var:K> ; <var:f2> := <var:f2> * <var:K> ; <var:F> := <var:f2> ; <var:F> := <var:F> + <var:f1> ; <var:F> := <var:F> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <def:poly> {{ <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:c> /\ <var:f2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:c> /\ <var:f2> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:c> /\ <var:f2> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:c> /\ <var:F> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:f0> = <nat:6> /\ <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:F> = <nat:1> * <var:c> ^ <nat:2> + <nat:7> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 