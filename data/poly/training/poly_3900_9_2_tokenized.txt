\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <nat:1> + <var:O> * <var:u> ; <var:O> := <var:O> * <var:u> ; <var:O> := <nat:3> + <var:O> * <var:u> ; <var:O> := <nat:3> + <var:O> * <var:u> ; <var:O> := <nat:1> + <var:O> * <var:u> ; <var:O> := <nat:2> + <var:O> * <var:u> ; <var:O> := <nat:1> + <var:O> * <var:u> ; <var:O> := <nat:2> + <var:O> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Assume --- for every integers $ <var:x> $ --- that $ <var:u> = <var:x> $ ahead of executing our set of commands it holds that we have $ <var:O> = <nat:3> \cdot <var:x> ^ <nat:8> + <nat:1> \cdot <var:x> ^ <nat:7> + <nat:3> \cdot <var:x> ^ <nat:5> + <nat:3> \cdot <var:x> ^ <nat:4> + <nat:1> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:2> $ after series of commands executes . \end{theorem} \begin{proof} Proving correctness for the list of commands is clear with typical Hoare logic . Observing the upcoming step seen in the set of commands , we see \verb | { <var:u> = <var:x> } <var:O> := <nat:3> { <var:u> = <var:x> \land <var:O> = <nat:3> } | . Taking a look at the subsequent lines in the set of instructions , we see \verb | { <var:u> = <var:x> } <var:O> := <nat:3> { <var:u> = <var:x> \land <var:O> = <nat:3> } | , \verb | { <var:u> = <var:x> \land <var:O> = <nat:3> } <var:O> := <nat:1> + <var:O> * <var:u> { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> + <nat:1> } | , \verb | { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> + <nat:1> } <var:O> := <var:O> * <var:u> { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + } | and \verb | { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + } <var:O> := <nat:3> + <var:O> * <var:u> { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:3> } | . This is ensured with the assignment law in Hoare logic . Moving forward , we have \verb | { <var:u> = <var:x> } <var:O> := <nat:3> { <var:u> = <var:x> \land <var:O> = <nat:3> } | , \verb | { <var:u> = <var:x> \land <var:O> = <nat:3> } <var:O> := <nat:1> + <var:O> * <var:u> { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> + <nat:1> } | and \verb | { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> + <nat:1> } <var:O> := <var:O> * <var:u> { <var:u> = <var:x> \land <var:O> = <nat:3> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + } | . Immediately following , we have \verb | { <var:u> = <var:x> } <var:O> := <nat:3> { <var:u> = <var:x> \land <var:O> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:3> ; <var:O> := <nat:1> + <var:O> * <var:u> ; <var:O> := <var:O> * <var:u> ; <var:O> := <nat:3> + <var:O> * <var:u> ; <var:O> := <nat:3> + <var:O> * <var:u> ; <var:O> := <nat:1> + <var:O> * <var:u> ; <var:O> := <nat:2> + <var:O> * <var:u> ; <var:O> := <nat:1> + <var:O> * <var:u> ; <var:O> := <nat:2> + <var:O> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <def:poly> {{ <var:O> = <nat:3> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:O> = <nat:3> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 