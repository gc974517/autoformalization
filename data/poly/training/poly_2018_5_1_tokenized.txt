\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:Z1> := <var:L> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:R> := <var:Z1> <var:R> := <var:R> + <var:Z0> \end{verbatim} Assuming it to be that $ <var:L> = <var:x> $ ahead of the evaluation of this program it follows that $ <var:R> = <nat:1> \times <var:x> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions is done using usual Hoare logic . Observing the upcoming bits of codefound in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:x> \} & <var:Z1> := <var:L> & \{ <var:L> = <var:x> \land <var:Z1> = <var:x> \} \\ \{ <var:L> = <var:x> \land <var:Z1> = <var:x> \} & <var:Z0> := <nat:8> & \{ <var:L> = <var:x> \land <var:Z1> = <var:x> \land <var:Z0> = <nat:8> \} \\ \{ <var:L> = <var:x> \land <var:Z1> = <var:x> \land <var:Z0> = <nat:8> \} & <var:Z1> := <var:Z1> * <nat:1> & \{ <var:L> = <var:x> \land <var:Z1> = <nat:1> \cdot <var:x> \land <var:Z0> = <nat:8> \} \\ \{ <var:L> = <var:x> \land <var:Z1> = <nat:1> \cdot <var:x> \land <var:Z0> = <nat:8> \} & <var:R> := <var:Z1& \{ <var:L> = <var:x> \land <var:Z0> = <nat:8> \land <var:R> = <nat:1> \cdot <var:x> \} \\ \{ <var:L> = <var:x> \land <var:Z0> = <nat:8> \land <var:R> = <nat:1> \cdot <var:x> \} & <var:R> := <var:R> + <var:Z0& \{ <var:L> = <var:x> \land <var:R> = <nat:1> \cdot <var:x> + <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:L> = <var:x> }} <var:Z1> := <var:L> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:R> := <var:Z1> <var:R> := <var:R> + <var:Z0> {{ <var:R> = <nat:1> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:Z1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:Z1> = <var:x> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:Z1> = <nat:1> * <var:x> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:Z0> = <nat:8> /\ <var:R> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:R> = <nat:1> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 