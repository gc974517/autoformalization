\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:6> ; <var:y> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:m> = <var:S> $ before the evaluation of the set of commands , it holds that we have $ <var:y> = <nat:6> $ . \end{theorem} \begin{proof} The argument for the set of commands is clear using standard Hoare techniques . Stepping through , the environment update code letting $ <nat:6> $ to $ <var:n0>$ . This code takes $ \{ <var:m> = <var:S> \} $ to the condition $ \{ <var:m> = <var:S> \land <var:n0> = <nat:6> \} $ . This is shown with the assignment rule defined by usual Hoare logic . Next , the code letting $ <var:n0$ toward $ <var:y>$ . This statement moves the precondition $ \{ <var:m> = <var:S> \land <var:n0> = <nat:6> \} $ to the postcondition $ \{ <var:m> = <var:S> \land <var:y> = <nat:6> \} $ . This is shown by the assignment rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:6> ; <var:y> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:m> = <var:S> }} <def:poly> {{ <var:y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 