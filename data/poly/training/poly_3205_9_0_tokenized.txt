\begin{document} \begin{theorem} Consider a code segment such that \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:y> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:y> ; <var:w2> := <var:w2> * <var:y> ; <var:e> := <var:w2> ; <var:e> := <var:e> + <var:w1> ; <var:e> := <var:e> + <var:w0> \end{verbatim} Given --- for some integers $ <var:o> $ --- that $ <var:y> = <var:o> $ ahead of interpreting the program it holds that we have $ <var:e> = <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the list of instructions can be seen by the following decorated segment of code . \begin{eqnarray} \{ <var:y> = <var:o> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \} \end{eqnarray} Advancing evaluating the segment of code produces : \begin{eqnarray} <var:w1> := <var:w1> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \times <var:o> \} \\ <var:w2> := <nat:4> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \times <var:o> \land <var:w2> = <nat:4> \} \\ <var:w2> := <var:w2> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \times <var:o> \land <var:w2> = <nat:4> \times <var:o> \} \\ <var:w2> := <var:w2> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \times <var:o> \land <var:w2> = <nat:4> \times <var:o> ^ <nat:2> \} \\ <var:e> := <var:w2> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \times <var:o> \land <var:e> = <nat:4> \times <var:o> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:w1> ; \\ \{ <var:y> = <var:o> \land <var:w0> = <nat:1> \land <var:e> = <nat:4> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> \} \\ <var:e> := <var:e> + <var:w0> \\ \{ <var:y> = <var:o> \land <var:e> = <nat:4> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:1> \} \end{eqnarray} Applying typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:y> = <var:o> }} <var:w0> := <nat:1> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:y> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:y> ; <var:w2> := <var:w2> * <var:y> ; <var:e> := <var:w2> ; <var:e> := <var:e> + <var:w1> ; <var:e> := <var:e> + <var:w0> {{ <var:e> = <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> * <var:o> /\ <var:w2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> * <var:o> /\ <var:w2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> * <var:o> /\ <var:w2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> * <var:o> /\ <var:e> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:w0> = <nat:1> /\ <var:e> = <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:e> = <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 