\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:8> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:S> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:S> ; <var:n2> := <var:n2> * <var:S> ; <var:k> := <var:n2> ; <var:k> := <var:k> + <var:n1> ; <var:k> := <var:k> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:S> = <var:Q> $ before the execution of this code then we see $ <var:k> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions can be demonstrated through standard Hoare reasoning . Moving on to the next step , \begin{eqnarray} \{ <var:S> = <var:Q> \} \, <var:n0> := <nat:8> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \} \, <var:n1> := <nat:5> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> \} \, <var:n1> := <var:n1> * <var:S> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \} \, <var:n2> := <nat:5> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:n2> = <nat:5> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:n2> = <nat:5> \} \, <var:n2> := <var:n2> * <var:S> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:n2> = <nat:5> * <var:Q> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:n2> = <nat:5> * <var:Q> \} \, <var:n2> := <var:n2> * <var:S> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:n2> = <nat:5> * <var:Q> ^ <nat:2> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:n2> = <nat:5> * <var:Q> ^ <nat:2> \} \, <var:k> := <var:n2> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:k> = <nat:5> * <var:Q> ^ <nat:2> \} \\ \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:Q> \land <var:k> = <nat:5> * <var:Q> ^ <nat:2> \} \, <var:k> := <var:k> + <var:n1> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \land <var:k> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> \} \end{eqnarray} This is given through the scheme found in standard Hoare techniques . Further , we see \begin{eqnarray} \{ <var:S> = <var:Q> \} \, <var:n0> := <nat:8> \, \{ <var:S> = <var:Q> \land <var:n0> = <nat:8> \} \end{eqnarray} This is guaranteed by the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:8> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:S> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:S> ; <var:n2> := <var:n2> * <var:S> ; <var:k> := <var:n2> ; <var:k> := <var:k> + <var:n1> ; <var:k> := <var:k> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:S> = <var:Q> }} <def:poly> {{ <var:k> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:k> = <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:n0> = <nat:8> /\ <var:k> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:k> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 