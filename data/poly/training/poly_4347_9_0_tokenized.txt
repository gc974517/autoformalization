\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:5> ; <var:B1> := <nat:8> ; <var:B1> := <var:B1> * <var:x> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:x> ; <var:B2> := <var:B2> * <var:x> ; <var:l> := <var:B2> ; <var:l> := <var:l> + <var:B1> ; <var:l> := <var:l> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assuming given every positive integers $ <var:E> $ that $ <var:x> = <var:E> $ before the evaluation of this set of commands it follows that we have $ <var:l> = <nat:4> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:5> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:E> \} \\ <var:B0> := <nat:5> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \} \\ <var:B1> := <nat:8> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> \} \\ <var:B1> := <var:B1> * <var:x> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> * <var:E> \} \\ <var:B2> := <nat:4> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> * <var:E> \land <var:B2> = <nat:4> \} \\ <var:B2> := <var:B2> * <var:x> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> * <var:E> \land <var:B2> = <nat:4> * <var:E> \} \\ <var:B2> := <var:B2> * <var:x> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> * <var:E> \land <var:B2> = <nat:4> * <var:E> ^ <nat:2> \} \\ <var:l> := <var:B2> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> * <var:E> \land <var:l> = <nat:4> * <var:E> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:B1> ; \\ \{ <var:x> = <var:E> \land <var:B0> = <nat:5> \land <var:l> = <nat:4> * <var:E> ^ <nat:2> + <nat:8> * <var:E> \} \\ <var:l> := <var:l> + <var:B0> \\ \{ <var:x> = <var:E> \land <var:l> = <nat:4> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:5> \} \end{eqnarray} Hence , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:5> ; <var:B1> := <nat:8> ; <var:B1> := <var:B1> * <var:x> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:x> ; <var:B2> := <var:B2> * <var:x> ; <var:l> := <var:B2> ; <var:l> := <var:l> + <var:B1> ; <var:l> := <var:l> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:x> = <var:E> }} <def:poly> {{ <var:l> = <nat:4> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> * <var:E> /\ <var:B2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> * <var:E> /\ <var:B2> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> * <var:E> /\ <var:B2> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> * <var:E> /\ <var:l> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:B0> = <nat:5> /\ <var:l> = <nat:4> * <var:E> ^ <nat:2> + <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:l> = <nat:4> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 