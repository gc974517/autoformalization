\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:j1> := <var:I> ; <var:j2> := <var:j1> * <var:I> ; <var:j3> := <var:j2> * <var:I> ; <var:j0> := <nat:8> ; <var:j1> := <var:j1> * <nat:9> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:7> ; <var:X> := <var:j3> <var:X> := <var:X> + <var:j2> <var:X> := <var:X> + <var:j1> <var:X> := <var:X> + <var:j0> \end{verbatim} Given it to hold that $ <var:I> = <var:Q> $ --- for $ <var:Q> $ --- prior to interpreting this series of commands , it must be that $ <var:X> = <nat:7> * <var:Q> ^ <nat:3> + <nat:6> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:8> $ when code segment exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:Q> \} \\ <var:j1> := <var:I> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <var:Q> \} \\ <var:j2> := <var:j1> * <var:I> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <var:Q> \land <var:j2> = <var:Q> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:I> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <var:Q> \land <var:j2> = <var:Q> ^ <nat:2> \land <var:j3> = <var:Q> ^ <nat:3> \} \\ <var:j0> := <nat:8> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <var:Q> \land <var:j2> = <var:Q> ^ <nat:2> \land <var:j3> = <var:Q> ^ <nat:3> \land <var:j0> = <nat:8> \} \\ <var:j1> := <var:j1> * <nat:9> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <nat:9> \cdot <var:Q> \land <var:j2> = <var:Q> ^ <nat:2> \land <var:j3> = <var:Q> ^ <nat:3> \land <var:j0> = <nat:8> \} \\ <var:j2> := <var:j2> * <nat:6> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <nat:9> \cdot <var:Q> \land <var:j2> = <nat:6> \cdot <var:Q> ^ <nat:2> \land <var:j3> = <var:Q> ^ <nat:3> \land <var:j0> = <nat:8> \} \\ <var:j3> := <var:j3> * <nat:7> ; \\ \{ <var:I> = <var:Q> \land <var:j1> = <nat:9> \cdot <var:Q> \land <var:j2> = <nat:6> \cdot <var:Q> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:Q> ^ <nat:3> \land <var:j0> = <nat:8> \} \\ <var:X> := <var:j3> \\ \{ <var:I> = <var:Q> \land <var:j1> = <nat:9> \cdot <var:Q> \land <var:j2> = <nat:6> \cdot <var:Q> ^ <nat:2> \land <var:j0> = <nat:8> \land <var:X> = <nat:7> \cdot <var:Q> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:j2> \\ \{ <var:I> = <var:Q> \land <var:j1> = <nat:9> \cdot <var:Q> \land <var:j0> = <nat:8> \land <var:X> = <nat:7> \cdot <var:Q> ^ <nat:3> + <nat:6> \cdot <var:Q> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:j1> \\ \{ <var:I> = <var:Q> \land <var:j0> = <nat:8> \land <var:X> = <nat:7> \cdot <var:Q> ^ <nat:3> + <nat:6> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> \} \\ <var:X> := <var:X> + <var:j0> \\ \{ <var:I> = <var:Q> \land <var:X> = <nat:7> \cdot <var:Q> ^ <nat:3> + <nat:6> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:I> = <var:Q> }} <var:j1> := <var:I> ; <var:j2> := <var:j1> * <var:I> ; <var:j3> := <var:j2> * <var:I> ; <var:j0> := <nat:8> ; <var:j1> := <var:j1> * <nat:9> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:7> ; <var:X> := <var:j3> <var:X> := <var:X> + <var:j2> <var:X> := <var:X> + <var:j1> <var:X> := <var:X> + <var:j0> {{ <var:X> = <nat:7> * <var:Q> ^ <nat:3> + <nat:6> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <var:Q> /\ <var:j2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <var:Q> /\ <var:j2> = <var:Q> ^ <nat:2> /\ <var:j3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <var:Q> /\ <var:j2> = <var:Q> ^ <nat:2> /\ <var:j3> = <var:Q> ^ <nat:3> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <nat:9> * <var:Q> /\ <var:j2> = <var:Q> ^ <nat:2> /\ <var:j3> = <var:Q> ^ <nat:3> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <nat:9> * <var:Q> /\ <var:j2> = <nat:6> * <var:Q> ^ <nat:2> /\ <var:j3> = <var:Q> ^ <nat:3> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <nat:9> * <var:Q> /\ <var:j2> = <nat:6> * <var:Q> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:Q> ^ <nat:3> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <nat:9> * <var:Q> /\ <var:j2> = <nat:6> * <var:Q> ^ <nat:2> /\ <var:j0> = <nat:8> /\ <var:X> = <nat:7> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j1> = <nat:9> * <var:Q> /\ <var:j0> = <nat:8> /\ <var:X> = <nat:7> * <var:Q> ^ <nat:3> + <nat:6> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:j0> = <nat:8> /\ <var:X> = <nat:7> * <var:Q> ^ <nat:3> + <nat:6> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:X> = <nat:7> * <var:Q> ^ <nat:3> + <nat:6> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 