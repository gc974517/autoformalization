\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:e> ; <var:X> := <var:U1> ; <var:X> := <var:X> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Assume that we have $ <var:e> = <var:b> $ prior to running this series of instructions , it must be that we see $ <var:X> = <nat:3> * <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is accomplished with Hoare techniques . Immediately after , the assignment command assigning $ <nat:4> $ to $ <var:U0>$ . This advances the precondition $ \{ <var:e> = <var:b> \} $ as $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \} $ . Advancing on , the binding statement defining $ <nat:3> $ into $ <var:U1>$ . This command redefines the condition $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \} $ as $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \} $ . This is guaranteed with the assignment rule defined by usual Hoare reasoning . Paying attention to the next piece of code seen in the list of instructions , we see the environment update statement \verb | <var:U1> := <var:U1> * <var:e> ; | . This command transfers $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \} $ into $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \cdot <var:b> \} $ . Now , we have the code \verb | <var:X> := <var:U1> ; | . This line redefines the precondition $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \land <var:U1> = <nat:3> \cdot <var:b> \} $ toward the postcondition $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \land <var:X> = <nat:3> \cdot <var:b> \} $ . Observing the upcoming step found in our program , we have the assignment code \verb | <var:X> := <var:X> + <var:U0> | . This takes $ \{ <var:e> = <var:b> \land <var:U0> = <nat:4> \land <var:X> = <nat:3> \cdot <var:b> \} $ as the condition $ \{ <var:e> = <var:b> \land <var:X> = <nat:3> \cdot <var:b> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:e> ; <var:X> := <var:U1> ; <var:X> := <var:X> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:e> = <var:b> }} <def:poly> {{ <var:X> = <nat:3> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:U0> = <nat:4> /\ <var:X> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:X> = <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 