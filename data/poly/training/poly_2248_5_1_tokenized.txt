\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:G> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:8> ; <var:n> := <var:m1> <var:n> := <var:n> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:G> = <var:V> $ prior to running our series of commands then $ <var:n> = <nat:8> \times <var:V> + <nat:7> $ once list of instructions executes . \end{theorem} \begin{proof} The argument for our list of commands can be seen with usual Hoare reasoning . Shifting focus toward the next line of code found in the series of instructions , we see \verb | { <var:G> = <var:V> } <var:m1> := <var:G> { <var:G> = <var:V> \land <var:m1> = <var:V> } | . This is guaranteed with the binding inference rule given in Hoare logic . Moving forward to the next step , we see \verb | { <var:G> = <var:V> } <var:m1> := <var:G> { <var:G> = <var:V> \land <var:m1> = <var:V> } | , \verb | { <var:G> = <var:V> \land <var:m1> = <var:V> } <var:m0> := <nat:7> { <var:G> = <var:V> \land <var:m1> = <var:V> \land <var:m0> = <nat:7> } | , \verb | { <var:G> = <var:V> \land <var:m1> = <var:V> \land <var:m0> = <nat:7> } <var:m1> := <var:m1> * <nat:8> { <var:G> = <var:V> \land <var:m1> = <nat:8> \cdot <var:V> \land <var:m0> = <nat:7> } | and \verb | { <var:G> = <var:V> \land <var:m1> = <nat:8> \cdot <var:V> \land <var:m0> = <nat:7> } <var:n> := <var:m1{ <var:G> = <var:V> \land <var:m0> = <nat:7> \land <var:n> = <nat:8> \cdot <var:V> } | . This is deduced by the variable assignmet inference rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:G> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:8> ; <var:n> := <var:m1> <var:n> := <var:n> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:G> = <var:V> }} <def:poly> {{ <var:n> = <nat:8> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:m1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:m1> = <var:V> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:m1> = <nat:8> * <var:V> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:m0> = <nat:7> /\ <var:n> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:n> = <nat:8> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 