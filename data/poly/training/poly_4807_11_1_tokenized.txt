\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:l> ; <var:f2> := <var:f1> * <var:l> ; <var:f3> := <var:f2> * <var:l> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:2> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:5> ; <var:V> := <var:f3> <var:V> := <var:V> + <var:f2> <var:V> := <var:V> + <var:f1> <var:V> := <var:V> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow , assuming some integers $ <var:x> $ , that we have $ <var:l> = <var:x> $ ahead of the evaluation of this set of instructions , it holds that we see $ <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be given with Hoare techniques . Advancing , we have the assignment command defining $ <var:l> $ toward $ <var:f1>$ . This transfers $ \{ <var:l> = <var:x> \} $ toward the condition $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \} $ . This is guaranteed using the assignment scheme defined in standard Hoare techniques . Moving forward , we have the variable binding code \verb | <var:f2> := <var:f1> * <var:l> ; | . This transfers the condition $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \} $ toward the condition $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \} $ . Taking a look at the next line of code seen in our series of commands , we have the variable assignmet code \verb | <var:f3> := <var:f2> * <var:l> ; | . This advances $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \} $ to the condition $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \} $ . Advancing on , the environment update command yielding $ <nat:1> $ as $ <var:f0>$ . This command transfers the precondition $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \} $ as the postcondition $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ . Jumping to the following statement seen in our set of commands , the variable binding command \verb | <var:f1> := <var:f1> * <nat:2> ; | . This statement forwards $ \{ <var:l> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ to the condition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ . Moving on to the proceeding line of code seen in the segment of code , the statement binding $ <var:f2> * <nat:1> $ into $ <var:f2>$ . This code redefines the precondition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ into the condition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <nat:1> * <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ . Stepping through , the code \verb | <var:f3> := <var:f3> * <nat:5> ; | . This moves the precondition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <nat:1> * <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ to $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <nat:1> * <var:x> ^ <nat:2> \land <var:f3> = <nat:5> * <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ . This is shown using the assignment inference rule obtained from Hoare reasoning . Further , we see the variable assignmet command letting $ <var:f3$ toward $ <var:V>$ . This transfers the condition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <nat:1> * <var:x> ^ <nat:2> \land <var:f3> = <nat:5> * <var:x> ^ <nat:3> \land <var:f0> = <nat:1> \} $ as the condition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <nat:1> * <var:x> ^ <nat:2> \land <var:f0> = <nat:1> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> \} $ . Going forward , the variable assignmet line \verb | <var:V> := <var:V> + <var:f2> | . This forwards $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f2> = <nat:1> * <var:x> ^ <nat:2> \land <var:f0> = <nat:1> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> \} $ toward the condition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f0> = <nat:1> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> \} $ . This is sound using the assignment law of Hoare reasoning . Looking at the upcoming step in the program , we have the variable binding code \verb | <var:V> := <var:V> + <var:f1> | . This takes the condition $ \{ <var:l> = <var:x> \land <var:f1> = <nat:2> * <var:x> \land <var:f0> = <nat:1> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> \} $ into the condition $ \{ <var:l> = <var:x> \land <var:f0> = <nat:1> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} $ . Next , we have the binding code defining $ <var:V> + <var:f0$ into $ <var:V>$ . This transfers the condition $ \{ <var:l> = <var:x> \land <var:f0> = <nat:1> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} $ toward the condition $ \{ <var:l> = <var:x> \land <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:l> ; <var:f2> := <var:f1> * <var:l> ; <var:f3> := <var:f2> * <var:l> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:2> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:5> ; <var:V> := <var:f3> <var:V> := <var:V> + <var:f2> <var:V> := <var:V> + <var:f1> <var:V> := <var:V> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:l> = <var:x> }} <def:poly> {{ <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <var:x> /\ <var:f2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <var:x> /\ <var:f2> = <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <var:x> /\ <var:f2> = <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <nat:2> * <var:x> /\ <var:f2> = <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <nat:2> * <var:x> /\ <var:f2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <nat:2> * <var:x> /\ <var:f2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:f3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <nat:2> * <var:x> /\ <var:f2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:f0> = <nat:1> /\ <var:V> = <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f1> = <nat:2> * <var:x> /\ <var:f0> = <nat:1> /\ <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:f0> = <nat:1> /\ <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:V> = <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 