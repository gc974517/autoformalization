\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <nat:2> + <var:P> * <var:e> ; <var:P> := <nat:4> + <var:P> * <var:e> \end{verbatim} Assume that we have $ <var:e> = <var:x> $ before interpreting our code segment it holds that we have $ <var:P> = <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions can be shown using Hoare techniques . Following , we have \begin{verbatim} { <var:e> = <var:x> } <var:P> := <nat:2> { <var:e> = <var:x> \land <var:P> = <nat:2> } \end{verbatim} Considering the subsequent lines contained in our code , \begin{verbatim} { <var:e> = <var:x> } <var:P> := <nat:2> { <var:e> = <var:x> \land <var:P> = <nat:2> } { <var:e> = <var:x> \land <var:P> = <nat:2> } <var:P> := <nat:2> + <var:P> * <var:e> { <var:e> = <var:x> \land <var:P> = <nat:2> \times <var:x> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:e> = <var:x> }} <var:P> := <nat:2> ; <var:P> := <nat:2> + <var:P> * <var:e> ; <var:P> := <nat:4> + <var:P> * <var:e> {{ <var:P> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:P> = <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:P> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 