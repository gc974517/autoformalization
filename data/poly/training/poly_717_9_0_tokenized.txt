\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:n> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:n> ; <var:u2> := <var:u2> * <var:n> ; <var:G> := <var:u2> ; <var:G> := <var:G> + <var:u1> ; <var:G> := <var:G> + <var:u0> \end{verbatim} Assuming that $ <var:n> = <var:Z> $ ( taking positive integers $ <var:Z> $ ) ahead of the evaluation of our list of instructions , it follows that we see $ <var:G> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:Z> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \} \\ <var:u1> := <nat:4> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:u1> = <nat:4> \} \\ <var:u1> := <var:u1> * <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:u1> = <nat:4> \cdot <var:Z> \} \\ <var:u2> := <nat:1> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:u1> = <nat:4> \cdot <var:Z> \land <var:u2> = <nat:1> \} \\ <var:u2> := <var:u2> * <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:u1> = <nat:4> \cdot <var:Z> \land <var:u2> = <nat:1> \cdot <var:Z> \} \\ <var:u2> := <var:u2> * <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:u1> = <nat:4> \cdot <var:Z> \land <var:u2> = <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:G> := <var:u2> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:u1> = <nat:4> \cdot <var:Z> \land <var:G> = <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:u1> ; \\ \{ <var:n> = <var:Z> \land <var:u0> = <nat:5> \land <var:G> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} \\ <var:G> := <var:G> + <var:u0> \\ \{ <var:n> = <var:Z> \land <var:G> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:5> \} \end{eqnarray} Applying typical Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:u0> := <nat:5> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:n> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:n> ; <var:u2> := <var:u2> * <var:n> ; <var:G> := <var:u2> ; <var:G> := <var:G> + <var:u1> ; <var:G> := <var:G> + <var:u0> {{ <var:G> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:4> * <var:Z> /\ <var:u2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:4> * <var:Z> /\ <var:u2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:4> * <var:Z> /\ <var:u2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:4> * <var:Z> /\ <var:G> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:u0> = <nat:5> /\ <var:G> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:G> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 