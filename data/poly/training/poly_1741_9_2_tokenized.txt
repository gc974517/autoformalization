\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:4> + <var:R> * <var:u> ; <var:R> := <var:R> * <var:u> ; <var:R> := <var:R> * <var:u> ; <var:R> := <nat:4> + <var:R> * <var:u> ; <var:R> := <nat:2> + <var:R> * <var:u> ; <var:R> := <nat:1> + <var:R> * <var:u> ; <var:R> := <nat:1> + <var:R> * <var:u> ; <var:R> := <nat:1> + <var:R> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:u> = <var:x> $ ahead of evaluating our list of commands it must be that $ <var:R> = <nat:4> \cdot <var:x> ^ <nat:8> + <nat:4> \cdot <var:x> ^ <nat:7> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:1> $ when code is done executing . \end{theorem} \begin{proof} The course of logic for the set of commands is given using typical Hoare techniques . Advancing to the next step , we see the statement \verb | <var:R> := <nat:4> ; | . This forwards $ \{ <var:u> = <var:x> \} $ into $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \} $ . This is rigorously given by the assignment inference rule from usual Hoare reasoning . Paying attention to the proceeding bit of code found in the set of commands , we see the environment update code \verb | <var:R> := <nat:4> + <var:R> * <var:u> ; | . This transfers $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \} $ to the condition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> + <nat:4> \} $ . After , we have the assignment code assigning $ <var:R> * <var:u> $ toward $ <var:R>$ . This advances the condition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> + <nat:4> \} $ into the postcondition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + \} $ . Advancing , the assignment line \verb | <var:R> := <var:R> * <var:u> ; | . This forwards $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + \} $ as the postcondition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + \} $ . This is sound using the assignment scheme found in standard Hoare reasoning . Focusing on the following line of code found in our set of instructions , we see the statement \verb | <var:R> := <nat:4> + <var:R> * <var:u> ; | . This statement moves the precondition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + \} $ to the postcondition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:4> \} $ . Paying attention to the upcoming statement contained in our segment of code , we have the assignment command letting $ <nat:2> + <var:R> * <var:u> $ into $ <var:R>$ . This statement takes $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:4> \} $ toward $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> + <nat:2> \} $ . This is given by the assignment rule defined in Hoare logic . Advancing on , the variable binding statement giving $ <nat:1> + <var:R> * <var:u> $ into $ <var:R>$ . This command moves $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> + <nat:2> \} $ as the condition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:1> \} $ . This is deduced using the assignment inference rule defined by typical Hoare logic . Moving forward to the subsequent line of code contained in the series of instructions , we see the variable update command yielding $ <nat:1> + <var:R> * <var:u> $ to $ <var:R>$ . This redefines $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:1> \} $ toward the condition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:1> \} $ . Shifting focus toward the following line of code seen in our set of commands , the variable binding line \verb | <var:R> := <nat:1> + <var:R> * <var:u> | . This advances $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:1> \} $ into the postcondition $ \{ <var:u> = <var:x> \land <var:R> = <nat:4> \times <var:x> ^ <nat:8> + <nat:4> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:4> ; <var:R> := <nat:4> + <var:R> * <var:u> ; <var:R> := <var:R> * <var:u> ; <var:R> := <var:R> * <var:u> ; <var:R> := <nat:4> + <var:R> * <var:u> ; <var:R> := <nat:2> + <var:R> * <var:u> ; <var:R> := <nat:1> + <var:R> * <var:u> ; <var:R> := <nat:1> + <var:R> * <var:u> ; <var:R> := <nat:1> + <var:R> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <def:poly> {{ <var:R> = <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:R> = <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 