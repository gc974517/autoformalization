\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:4> ; <var:e1> := <var:e1> * <var:B> ; <var:I> := <var:e1> ; <var:I> := <var:I> + <var:e0> \end{verbatim} Allowing that $ <var:B> = <var:b> $ ahead of running this set of instructions it holds that we see $ <var:I> = <nat:4> \times <var:b> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:B> = <var:b> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:B> = <var:b> \land <var:e0> = <nat:9> \} \end{eqnarray} Continuing executing our set of commands gives us : \begin{eqnarray} <var:e1> := <nat:4> ; \\ \{ <var:B> = <var:b> \land <var:e0> = <nat:9> \land <var:e1> = <nat:4> \} \\ <var:e1> := <var:e1> * <var:B> ; \\ \{ <var:B> = <var:b> \land <var:e0> = <nat:9> \land <var:e1> = <nat:4> \cdot <var:b> \} \end{eqnarray} Advancing the execution of this program yields : \begin{eqnarray} <var:I> := <var:e1> ; \\ \{ <var:B> = <var:b> \land <var:e0> = <nat:9> \land <var:I> = <nat:4> \cdot <var:b> \} \\ <var:I> := <var:I> + <var:e0> \\ \{ <var:B> = <var:b> \land <var:I> = <nat:4> \cdot <var:b> + <nat:9> \} \end{eqnarray} Given the above , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:B> = <var:b> }} <var:e0> := <nat:9> ; <var:e1> := <nat:4> ; <var:e1> := <var:e1> * <var:B> ; <var:I> := <var:e1> ; <var:I> := <var:I> + <var:e0> {{ <var:I> = <nat:4> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e0> = <nat:9> /\ <var:I> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:I> = <nat:4> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 