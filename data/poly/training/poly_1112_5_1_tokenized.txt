\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:q> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:5> ; <var:s> := <var:O1> <var:s> := <var:s> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assume it to be that $ <var:q> = <var:Y> $ before interpreting our series of instructions , it holds that $ <var:s> = <nat:5> \cdot <var:Y> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:Y> \} \\ <var:O1> := <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \} \\ <var:O0> := <nat:5> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O0> = <nat:5> \} \\ <var:O1> := <var:O1> * <nat:5> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <nat:5> \times <var:Y> \land <var:O0> = <nat:5> \} \\ <var:s> := <var:O1> \\ \{ <var:q> = <var:Y> \land <var:O0> = <nat:5> \land <var:s> = <nat:5> \times <var:Y> \} \\ <var:s> := <var:s> + <var:O0> \\ \{ <var:q> = <var:Y> \land <var:s> = <nat:5> \times <var:Y> + <nat:5> \} \end{eqnarray} As a consequence , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:q> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:5> ; <var:s> := <var:O1> <var:s> := <var:s> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <def:poly> {{ <var:s> = <nat:5> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <nat:5> * <var:Y> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O0> = <nat:5> /\ <var:s> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:s> = <nat:5> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 