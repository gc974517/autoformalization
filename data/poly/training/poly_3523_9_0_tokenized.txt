\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:b> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:b> ; <var:q2> := <var:q2> * <var:b> ; <var:M> := <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> \end{verbatim} Assuming it to be that $ <var:b> = <var:O> $ , for every whole numbers $ <var:O> $ , prior to executing the set of commands , it holds that we see $ <var:M> = <nat:8> \times <var:O> ^ <nat:2> + <nat:9> \times <var:O> + <nat:2> $ after segment of code executes . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:b> = <var:O> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \} \\ <var:q1> := <nat:9> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:9> \} \\ <var:q1> := <var:q1> * <var:b> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:9> * <var:O> \} \\ <var:q2> := <nat:8> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:9> * <var:O> \land <var:q2> = <nat:8> \} \\ <var:q2> := <var:q2> * <var:b> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:9> * <var:O> \land <var:q2> = <nat:8> * <var:O> \} \\ <var:q2> := <var:q2> * <var:b> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:9> * <var:O> \land <var:q2> = <nat:8> * <var:O> ^ <nat:2> \} \\ <var:M> := <var:q2> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:9> * <var:O> \land <var:M> = <nat:8> * <var:O> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:q1> ; \\ \{ <var:b> = <var:O> \land <var:q0> = <nat:2> \land <var:M> = <nat:8> * <var:O> ^ <nat:2> + <nat:9> * <var:O> \} \\ <var:M> := <var:M> + <var:q0> \\ \{ <var:b> = <var:O> \land <var:M> = <nat:8> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:2> \} \end{eqnarray} Considering the above , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:b> = <var:O> }} <var:q0> := <nat:2> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:b> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:b> ; <var:q2> := <var:q2> * <var:b> ; <var:M> := <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> {{ <var:M> = <nat:8> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:9> * <var:O> /\ <var:q2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:9> * <var:O> /\ <var:q2> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:9> * <var:O> /\ <var:q2> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:9> * <var:O> /\ <var:M> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:q0> = <nat:2> /\ <var:M> = <nat:8> * <var:O> ^ <nat:2> + <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:M> = <nat:8> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 