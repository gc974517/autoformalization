\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:F1> := <var:v> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:9> ; <var:f> := <var:F1> <var:f> := <var:f> + <var:F0> \end{verbatim} Allowing for every positive coefficients $ <var:b> $ it to be that $ <var:v> = <var:b> $ ahead of evaluating the program then $ <var:f> = <nat:9> * <var:b> + <nat:7> $ once code segment finishes . \end{theorem} \begin{proof} Notice the below decorated set of commands . \begin{eqnarray} \{ <var:v> = <var:b> \} \\ <var:F1> := <var:v> ; \\ \{ <var:v> = <var:b> \land <var:F1> = <var:b> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:v> = <var:b> \land <var:F1> = <var:b> \land <var:F0> = <nat:7> \} \\ <var:F1> := <var:F1> * <nat:9> ; \\ \{ <var:v> = <var:b> \land <var:F1> = <nat:9> * <var:b> \land <var:F0> = <nat:7> \} \\ <var:f> := <var:F1> \\ \{ <var:v> = <var:b> \land <var:F0> = <nat:7> \land <var:f> = <nat:9> * <var:b> \} \\ <var:f> := <var:f> + <var:F0> \\ \{ <var:v> = <var:b> \land <var:f> = <nat:9> * <var:b> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:v> = <var:b> }} <var:F1> := <var:v> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:9> ; <var:f> := <var:F1> <var:f> := <var:f> + <var:F0> {{ <var:f> = <nat:9> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:F1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:F1> = <var:b> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:F1> = <nat:9> * <var:b> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:F0> = <nat:7> /\ <var:f> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:f> = <nat:9> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 