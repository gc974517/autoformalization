\begin{document} \begin{theorem} Consider the following list of commands : \begin{verbatim} <var:E1> := <var:n> ; <var:E2> := <var:E1> * <var:n> ; <var:E3> := <var:E2> * <var:n> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:9> ; <var:E3> := <var:E3> * <nat:8> ; <var:G> := <var:E3> <var:G> := <var:G> + <var:E2> <var:G> := <var:G> + <var:E1> <var:G> := <var:G> + <var:E0> \end{verbatim} Assuming taking natural coefficients $ <var:y> $ it to hold that $ <var:n> = <var:y> $ ahead of executing our series of instructions it holds that we see $ <var:G> = <nat:8> \times <var:y> ^ <nat:3> + <nat:9> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> + <nat:3> $ when list of commands has finished . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:y> \} \\ <var:E1> := <var:n> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <var:y> \} \\ <var:E2> := <var:E1> * <var:n> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:n> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E3> = <var:y> ^ <nat:3> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E3> = <var:y> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:E1> := <var:E1> * <nat:9> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <nat:9> \times <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E3> = <var:y> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:E2> := <var:E2> * <nat:9> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <nat:9> \times <var:y> \land <var:E2> = <nat:9> \times <var:y> ^ <nat:2> \land <var:E3> = <var:y> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:E3> := <var:E3> * <nat:8> ; \\ \{ <var:n> = <var:y> \land <var:E1> = <nat:9> \times <var:y> \land <var:E2> = <nat:9> \times <var:y> ^ <nat:2> \land <var:E3> = <nat:8> \times <var:y> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:G> := <var:E3> \\ \{ <var:n> = <var:y> \land <var:E1> = <nat:9> \times <var:y> \land <var:E2> = <nat:9> \times <var:y> ^ <nat:2> \land <var:E0> = <nat:3> \land <var:G> = <nat:8> \times <var:y> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:E2> \\ \{ <var:n> = <var:y> \land <var:E1> = <nat:9> \times <var:y> \land <var:E0> = <nat:3> \land <var:G> = <nat:8> \times <var:y> ^ <nat:3> + <nat:9> \times <var:y> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:E1> \\ \{ <var:n> = <var:y> \land <var:E0> = <nat:3> \land <var:G> = <nat:8> \times <var:y> ^ <nat:3> + <nat:9> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> \} \\ <var:G> := <var:G> + <var:E0> \\ \{ <var:n> = <var:y> \land <var:G> = <nat:8> \times <var:y> ^ <nat:3> + <nat:9> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> + <nat:3> \} \end{eqnarray} Thus , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:n> = <var:y> }} <var:E1> := <var:n> ; <var:E2> := <var:E1> * <var:n> ; <var:E3> := <var:E2> * <var:n> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:9> ; <var:E3> := <var:E3> * <nat:8> ; <var:G> := <var:E3> <var:G> := <var:G> + <var:E2> <var:G> := <var:G> + <var:E1> <var:G> := <var:G> + <var:E0> {{ <var:G> = <nat:8> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <var:y> /\ <var:E2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <var:y> /\ <var:E2> = <var:y> ^ <nat:2> /\ <var:E3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <var:y> /\ <var:E2> = <var:y> ^ <nat:2> /\ <var:E3> = <var:y> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <nat:9> * <var:y> /\ <var:E2> = <var:y> ^ <nat:2> /\ <var:E3> = <var:y> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <nat:9> * <var:y> /\ <var:E2> = <nat:9> * <var:y> ^ <nat:2> /\ <var:E3> = <var:y> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <nat:9> * <var:y> /\ <var:E2> = <nat:9> * <var:y> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:y> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <nat:9> * <var:y> /\ <var:E2> = <nat:9> * <var:y> ^ <nat:2> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:8> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E1> = <nat:9> * <var:y> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:8> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:8> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:G> = <nat:8> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 