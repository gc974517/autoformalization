\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:3> ; <var:t1> := <var:t1> * <var:U> ; <var:Q> := <var:t1> ; <var:Q> := <var:Q> + <var:t0> \end{verbatim} Allowing that $ <var:U> = <var:l> $ , for any whole numbers $ <var:l> $ , ahead of running the segment of code , it holds that we see $ <var:Q> = <nat:3> * <var:l> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is evident through Hoare reasoning . Keeping momentum , the variable update line \verb | <var:t0> := <nat:3> ; | . This code advances $ \{ <var:U> = <var:l> \} $ into $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \} $ . Immediately following , we see the environment update statement yielding $ <nat:3> $ as $ <var:t1>$ . This advances the precondition $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \} $ toward the condition $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \land <var:t1> = <nat:3> \} $ . This is guaranteed through the assignment law defined in typical Hoare reasoning . Following , the variable binding statement \verb | <var:t1> := <var:t1> * <var:U> ; | . This statement advances $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \land <var:t1> = <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \land <var:t1> = <nat:3> \times <var:l> \} $ . This is rigorously given through the assignment inference rule of usual Hoare reasoning . Moving on to the next step , we see the binding command letting $ <var:t1> $ to $ <var:Q>$ . This code advances $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \land <var:t1> = <nat:3> \times <var:l> \} $ toward $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \land <var:Q> = <nat:3> \times <var:l> \} $ . Jumping to the upcoming command found in the list of instructions , we have the binding code \verb | <var:Q> := <var:Q> + <var:t0> | . This line transfers $ \{ <var:U> = <var:l> \land <var:t0> = <nat:3> \land <var:Q> = <nat:3> \times <var:l> \} $ into $ \{ <var:U> = <var:l> \land <var:Q> = <nat:3> \times <var:l> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:U> = <var:l> }} <var:t0> := <nat:3> ; <var:t1> := <nat:3> ; <var:t1> := <var:t1> * <var:U> ; <var:Q> := <var:t1> ; <var:Q> := <var:Q> + <var:t0> {{ <var:Q> = <nat:3> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:t0> = <nat:3> /\ <var:Q> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:Q> = <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 