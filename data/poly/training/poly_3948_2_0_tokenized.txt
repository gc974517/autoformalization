\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:a0> := <nat:7> ; <var:l> := <var:a0> \end{verbatim} Allow it to be that $ <var:Z> = <var:q> $ prior to running our program it must be that $ <var:l> = <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:Z> = <var:q> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:Z> = <var:q> \land <var:a0> = <nat:7> \} \\ <var:l> := <var:a0> \\ \{ <var:Z> = <var:q> \land <var:l> = <nat:7> \} \end{eqnarray} Given the preceding argument , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Z> = <var:q> }} <var:a0> := <nat:7> ; <var:l> := <var:a0> {{ <var:l> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:l> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 