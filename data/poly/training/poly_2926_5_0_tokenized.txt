\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:o> ; <var:Y> := <var:g1> ; <var:Y> := <var:Y> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing for some positive integers $ <var:b> $ that we have $ <var:o> = <var:b> $ ahead of running the series of commands , then we have $ <var:Y> = <nat:8> * <var:b> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:b> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:o> = <var:b> \land <var:g0> = <nat:6> \} \\ <var:g1> := <nat:8> ; \\ \{ <var:o> = <var:b> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> \} \\ <var:g1> := <var:g1> * <var:o> ; \\ \{ <var:o> = <var:b> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> \cdot <var:b> \} \\ <var:Y> := <var:g1> ; \\ \{ <var:o> = <var:b> \land <var:g0> = <nat:6> \land <var:Y> = <nat:8> \cdot <var:b> \} \\ <var:Y> := <var:Y> + <var:g0> \\ \{ <var:o> = <var:b> \land <var:Y> = <nat:8> \cdot <var:b> + <nat:6> \} \end{eqnarray} Applying usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:o> ; <var:Y> := <var:g1> ; <var:Y> := <var:Y> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:o> = <var:b> }} <def:poly> {{ <var:Y> = <nat:8> * <var:b> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:g0> = <nat:6> /\ <var:Y> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:Y> = <nat:8> * <var:b> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 