\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:f> ; <var:J2> := <var:J2> * <var:f> ; <var:J3> := <nat:6> ; <var:J3> := <var:J3> * <var:f> ; <var:J3> := <var:J3> * <var:f> ; <var:J3> := <var:J3> * <var:f> ; <var:H> := <var:J3> ; <var:H> := <var:H> + <var:J2> ; <var:H> := <var:H> + <var:J0> \end{verbatim} Allow it to hold that $ <var:f> = <var:s> $ before executing the list of instructions , it must be that we have $ <var:H> = <nat:6> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our set of commands can be given through standard Hoare reasoning . Immediately after , we see \begin{verbatim} { <var:f> = <var:s> } <var:J0> := <nat:1> { <var:f> = <var:s> \land <var:J0> = <nat:1> } { <var:f> = <var:s> \land <var:J0> = <nat:1> } <var:J2> := <nat:2> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> } { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> } <var:J2> := <var:J2> * <var:f> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> } { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> } <var:J2> := <var:J2> * <var:f> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> } { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> } <var:J3> := <nat:6> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:J3> = <nat:6> } { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:J3> = <nat:6> } <var:J3> := <var:J3> * <var:f> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:J3> = <nat:6> \cdot <var:s> } { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:J3> = <nat:6> \cdot <var:s> } <var:J3> := <var:J3> * <var:f> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:J3> = <nat:6> \cdot <var:s> ^ <nat:2> } \end{verbatim} Advancing to the upcoming lines of codein our series of instructions , \begin{verbatim} { <var:f> = <var:s> } <var:J0> := <nat:1> { <var:f> = <var:s> \land <var:J0> = <nat:1> } { <var:f> = <var:s> \land <var:J0> = <nat:1> } <var:J2> := <nat:2> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> } \end{verbatim} This is ensured using the variable binding rule given by standard Hoare reasoning . Following , \begin{verbatim} { <var:f> = <var:s> } <var:J0> := <nat:1> { <var:f> = <var:s> \land <var:J0> = <nat:1> } { <var:f> = <var:s> \land <var:J0> = <nat:1> } <var:J2> := <nat:2> { <var:f> = <var:s> \land <var:J0> = <nat:1> \land <var:J2> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:f> = <var:s> }} <var:J0> := <nat:1> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:f> ; <var:J2> := <var:J2> * <var:f> ; <var:J3> := <nat:6> ; <var:J3> := <var:J3> * <var:f> ; <var:J3> := <var:J3> * <var:f> ; <var:J3> := <var:J3> * <var:f> ; <var:H> := <var:J3> ; <var:H> := <var:H> + <var:J2> ; <var:H> := <var:H> + <var:J0> {{ <var:H> = <nat:6> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:J3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:J3> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:J3> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:J3> = <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:H> = <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:J0> = <nat:1> /\ <var:H> = <nat:6> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:H> = <nat:6> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 