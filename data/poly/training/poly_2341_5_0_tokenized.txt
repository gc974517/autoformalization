\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:v> ; <var:X> := <var:x1> ; <var:X> := <var:X> + <var:x0> \end{verbatim} Given it to hold that $ <var:v> = <var:y> $ , letting positive integers $ <var:y> $ , ahead of the execution of this list of instructions it follows that we see $ <var:X> = <nat:3> \times <var:y> + <nat:3> $ after code segment has finished . \end{theorem} \begin{proof} The course of logic for the list of instructions can be done through standard Hoare techniques . Further , we see \begin{verbatim} { <var:v> = <var:y> } <var:x0> := <nat:3> { <var:v> = <var:y> \land <var:x0> = <nat:3> } \end{verbatim} This is rigorously given by the binding rule given by standard Hoare logic . Further , we have \begin{verbatim} { <var:v> = <var:y> } <var:x0> := <nat:3> { <var:v> = <var:y> \land <var:x0> = <nat:3> } { <var:v> = <var:y> \land <var:x0> = <nat:3> } <var:x1> := <nat:3> { <var:v> = <var:y> \land <var:x0> = <nat:3> \land <var:x1> = <nat:3> } { <var:v> = <var:y> \land <var:x0> = <nat:3> \land <var:x1> = <nat:3> } <var:x1> := <var:x1> * <var:v> { <var:v> = <var:y> \land <var:x0> = <nat:3> \land <var:x1> = <nat:3> \cdot <var:y> } \end{verbatim} This is guaranteed by the variable assignmet law of Hoare reasoning . Looking at the following bit of code contained in the code , we have \begin{verbatim} { <var:v> = <var:y> } <var:x0> := <nat:3> { <var:v> = <var:y> \land <var:x0> = <nat:3> } \end{verbatim} This is shown to be logically sound through the variable assignmet law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:v> = <var:y> }} <var:x0> := <nat:3> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:v> ; <var:X> := <var:x1> ; <var:X> := <var:X> + <var:x0> {{ <var:X> = <nat:3> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:x0> = <nat:3> /\ <var:X> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:X> = <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 