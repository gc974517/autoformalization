\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:3> ; <var:O> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given any positive coefficients $ <var:F> $ --- it to be that $ <var:x> = <var:F> $ prior to executing the program , it follows that we have $ <var:O> = <nat:3> $ after set of commands executes . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:x> = <var:F> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:x> = <var:F> \land <var:Q0> = <nat:3> \} \\ <var:O> := <var:Q0> \\ \{ <var:x> = <var:F> \land <var:O> = <nat:3> \} \end{eqnarray} Given the preceding argument , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:O> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:x> = <var:F> }} <def:poly> {{ <var:O> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:O> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 