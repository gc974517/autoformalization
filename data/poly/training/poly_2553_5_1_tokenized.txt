\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:a> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:2> ; <var:S> := <var:F1> <var:S> := <var:S> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for any integers $ <var:b> $ ) it to hold that $ <var:a> = <var:b> $ before running the set of commands , it follows that $ <var:S> = <nat:2> * <var:b> + <nat:4> $ after set of commands executes . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:a> = <var:b> \} \\ <var:F1> := <var:a> ; \\ \{ <var:a> = <var:b> \land <var:F1> = <var:b> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:a> = <var:b> \land <var:F1> = <var:b> \land <var:F0> = <nat:4> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:a> = <var:b> \land <var:F1> = <nat:2> \cdot <var:b> \land <var:F0> = <nat:4> \} \\ <var:S> := <var:F1> \\ \{ <var:a> = <var:b> \land <var:F0> = <nat:4> \land <var:S> = <nat:2> \cdot <var:b> \} \end{eqnarray} Allowing evaluating the series of instructions produces : \begin{eqnarray} <var:S> := <var:S> + <var:F0> \\ \{ <var:a> = <var:b> \land <var:S> = <nat:2> \cdot <var:b> + <nat:4> \} \end{eqnarray} Hence , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:a> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:2> ; <var:S> := <var:F1> <var:S> := <var:S> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:a> = <var:b> }} <def:poly> {{ <var:S> = <nat:2> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:F1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:F1> = <var:b> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:F1> = <nat:2> * <var:b> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:F0> = <nat:4> /\ <var:S> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S> = <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 