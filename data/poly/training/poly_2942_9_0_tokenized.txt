\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:5> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:K> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:K> ; <var:w2> := <var:w2> * <var:K> ; <var:S> := <var:w2> ; <var:S> := <var:S> + <var:w1> ; <var:S> := <var:S> + <var:w0> \end{verbatim} Given that we have $ <var:K> = <var:g> $ ( given some positive integers $ <var:g> $ ) ahead of interpreting the list of commands it holds that we have $ <var:S> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:5> \cdot <var:g> + <nat:5> $ once series of commands has terminated . \end{theorem} \begin{proof} Note that the below decorated set of instructions . \begin{eqnarray} \{ <var:K> = <var:g> \} \\ <var:w0> := <nat:5> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \} \\ <var:w1> := <nat:5> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:w1> = <nat:5> \} \\ <var:w1> := <var:w1> * <var:K> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:w1> = <nat:5> * <var:g> \} \\ <var:w2> := <nat:4> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:w1> = <nat:5> * <var:g> \land <var:w2> = <nat:4> \} \\ <var:w2> := <var:w2> * <var:K> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:w1> = <nat:5> * <var:g> \land <var:w2> = <nat:4> * <var:g> \} \\ <var:w2> := <var:w2> * <var:K> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:w1> = <nat:5> * <var:g> \land <var:w2> = <nat:4> * <var:g> ^ <nat:2> \} \\ <var:S> := <var:w2> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:w1> = <nat:5> * <var:g> \land <var:S> = <nat:4> * <var:g> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:w1> ; \\ \{ <var:K> = <var:g> \land <var:w0> = <nat:5> \land <var:S> = <nat:4> * <var:g> ^ <nat:2> + <nat:5> * <var:g> \} \\ <var:S> := <var:S> + <var:w0> \\ \{ <var:K> = <var:g> \land <var:S> = <nat:4> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:5> \} \end{eqnarray} Utilizing standard Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:K> = <var:g> }} <var:w0> := <nat:5> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:K> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:K> ; <var:w2> := <var:w2> * <var:K> ; <var:S> := <var:w2> ; <var:S> := <var:S> + <var:w1> ; <var:S> := <var:S> + <var:w0> {{ <var:S> = <nat:4> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:5> * <var:g> /\ <var:w2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:5> * <var:g> /\ <var:w2> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:5> * <var:g> /\ <var:w2> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:5> * <var:g> /\ <var:S> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:w0> = <nat:5> /\ <var:S> = <nat:4> * <var:g> ^ <nat:2> + <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:g> /\ <var:S> = <nat:4> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 