\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:1> ; <var:C1> := <nat:9> ; <var:C1> := <var:C1> * <var:d> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:d> ; <var:C2> := <var:C2> * <var:d> ; <var:A> := <var:C2> ; <var:A> := <var:A> + <var:C1> ; <var:A> := <var:A> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Allow , taking positive numbers $ <var:X> $ , it to be that $ <var:d> = <var:X> $ before interpreting our series of instructions , it follows that we see $ <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be done through Hoare reasoning . Advancing on , the assignment line assigning $ <nat:1> $ into $ <var:C0>$ . This forwards the precondition $ \{ <var:d> = <var:X> \} $ to $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \} $ . Next , the assignment code \verb | <var:C1> := <nat:9> ; | . This command takes the precondition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> \} $ . This is sound through the assignment law in usual Hoare techniques . Moving onward , the variable binding statement defining $ <var:C1> * <var:d> $ toward $ <var:C1>$ . This code transfers the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> \} $ into the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \} $ . Immediately following , the variable binding statement \verb | <var:C2> := <nat:4> ; | . This transfers $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \} $ into the postcondition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:C2> = <nat:4> \} $ . Immediately after , we see the assignment code \verb | <var:C2> := <var:C2> * <var:d> ; | . This moves the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:C2> = <nat:4> \} $ as the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:C2> = <nat:4> * <var:X> \} $ . This is shown to be logically sound using the assignment law defined in typical Hoare logic . Paying attention to the next command found in our series of commands , the environment update statement letting $ <var:C2> * <var:d> $ as $ <var:C2>$ . This redefines $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:C2> = <nat:4> * <var:X> \} $ into the postcondition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:C2> = <nat:4> * <var:X> ^ <nat:2> \} $ . Considering the next line of code in our program , we see the command \verb | <var:A> := <var:C2> ; | . This line transfers the precondition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:C2> = <nat:4> * <var:X> ^ <nat:2> \} $ to the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:A> = <nat:4> * <var:X> ^ <nat:2> \} $ . This is known to be sound with the assignment law of usual Hoare logic . Moving on to the next step , we have the variable update code letting $ <var:A> + <var:C1> $ toward $ <var:A>$ . This command moves the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:C1> = <nat:9> * <var:X> \land <var:A> = <nat:4> * <var:X> ^ <nat:2> \} $ as the postcondition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> \} $ . This is shown to be logically sound using the assignment scheme given by standard Hoare logic . Advancing on , the assignment command binding $ <var:A> + <var:C0$ to $ <var:A>$ . This transfers the condition $ \{ <var:d> = <var:X> \land <var:C0> = <nat:1> \land <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> \} $ toward the condition $ \{ <var:d> = <var:X> \land <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> \} $ . This is shown by the assignment inference rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:C1> := <nat:9> ; <var:C1> := <var:C1> * <var:d> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:d> ; <var:C2> := <var:C2> * <var:d> ; <var:A> := <var:C2> ; <var:A> := <var:A> + <var:C1> ; <var:A> := <var:A> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:d> = <var:X> }} <def:poly> {{ <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:9> * <var:X> /\ <var:C2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:9> * <var:X> /\ <var:C2> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:9> * <var:X> /\ <var:C2> = <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:9> * <var:X> /\ <var:A> = <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:C0> = <nat:1> /\ <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:A> = <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 