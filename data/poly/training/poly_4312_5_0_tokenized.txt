\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:w> ; <var:G> := <var:U1> ; <var:G> := <var:G> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assume , letting $ <var:V> \in \mathbb{Z}^+ $ , $ <var:w> = <var:V> $ ahead of executing our series of instructions it must be that we have $ <var:G> = <nat:1> * <var:V> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions can be done through typical Hoare reasoning . Now , we see the binding line \verb | <var:U0> := <nat:7> ; | . This transfers $ \{ <var:w> = <var:V> \} $ to the condition $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \} $ . This is ensured by the assignment rule defined in standard Hoare reasoning . Paying attention to the upcoming command found in the series of instructions , the binding command letting $ <nat:1> $ into $ <var:U1>$ . This transfers $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \} $ toward $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \land <var:U1> = <nat:1> \} $ . This is deduced with the assignment rule of Hoare techniques . Stepping through , we have the assignment line assigning $ <var:U1> * <var:w> $ to $ <var:U1>$ . This moves the precondition $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \land <var:U1> = <nat:1> \} $ toward the postcondition $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \land <var:U1> = <nat:1> \cdot <var:V> \} $ . After , the variable assignmet line \verb | <var:G> := <var:U1> ; | . This transfers $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \land <var:U1> = <nat:1> \cdot <var:V> \} $ into $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \land <var:G> = <nat:1> \cdot <var:V> \} $ . Observing the upcoming piece of code in our list of commands , we have the assignment line binding $ <var:G> + <var:U0$ as $ <var:G>$ . This forwards the condition $ \{ <var:w> = <var:V> \land <var:U0> = <nat:7> \land <var:G> = <nat:1> \cdot <var:V> \} $ to $ \{ <var:w> = <var:V> \land <var:G> = <nat:1> \cdot <var:V> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:7> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:w> ; <var:G> := <var:U1> ; <var:G> := <var:G> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:w> = <var:V> }} <def:poly> {{ <var:G> = <nat:1> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:U0> = <nat:7> /\ <var:G> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:G> = <nat:1> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 