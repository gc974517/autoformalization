\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c1> := <var:J> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:4> ; <var:w> := <var:c1> <var:w> := <var:w> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Assume that $ <var:J> = <var:M> $ , given every positive coefficients $ <var:M> $ , before the execution of the program , then we have $ <var:w> = <nat:4> \times <var:M> + <nat:7> $ . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:J> = <var:M> \} \\ <var:c1> := <var:J> ; \\ \{ <var:J> = <var:M> \land <var:c1> = <var:M> \} \\ <var:c0> := <nat:7> ; \\ \{ <var:J> = <var:M> \land <var:c1> = <var:M> \land <var:c0> = <nat:7> \} \\ <var:c1> := <var:c1> * <nat:4> ; \\ \{ <var:J> = <var:M> \land <var:c1> = <nat:4> * <var:M> \land <var:c0> = <nat:7> \} \\ <var:w> := <var:c1> \\ \{ <var:J> = <var:M> \land <var:c0> = <nat:7> \land <var:w> = <nat:4> * <var:M> \} \\ <var:w> := <var:w> + <var:c0> \\ \{ <var:J> = <var:M> \land <var:w> = <nat:4> * <var:M> + <nat:7> \} \end{eqnarray} Thusly , this program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:J> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:4> ; <var:w> := <var:c1> <var:w> := <var:w> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <def:poly> {{ <var:w> = <nat:4> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:c1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:c1> = <var:M> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:c1> = <nat:4> * <var:M> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:c0> = <nat:7> /\ <var:w> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:w> = <nat:4> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 