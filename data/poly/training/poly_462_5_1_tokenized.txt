\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:V1> := <var:p> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:6> ; <var:X> := <var:V1> <var:X> := <var:X> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allow it to hold that $ <var:p> = <var:H> $ given all natural numbers $ <var:H> $ before evaluating our segment of code it must be that $ <var:X> = <nat:6> \times <var:H> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:p> = <var:H> \} \\ <var:V1> := <var:p> ; \\ \{ <var:p> = <var:H> \land <var:V1> = <var:H> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:p> = <var:H> \land <var:V1> = <var:H> \land <var:V0> = <nat:8> \} \\ <var:V1> := <var:V1> * <nat:6> ; \\ \{ <var:p> = <var:H> \land <var:V1> = <nat:6> * <var:H> \land <var:V0> = <nat:8> \} \\ <var:X> := <var:V1> \\ \{ <var:p> = <var:H> \land <var:V0> = <nat:8> \land <var:X> = <nat:6> * <var:H> \} \\ <var:X> := <var:X> + <var:V0> \\ \{ <var:p> = <var:H> \land <var:X> = <nat:6> * <var:H> + <nat:8> \} \end{eqnarray} As a consequence , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:p> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:6> ; <var:X> := <var:V1> <var:X> := <var:X> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:p> = <var:H> }} <def:poly> {{ <var:X> = <nat:6> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:V1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:V1> = <var:H> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:V1> = <nat:6> * <var:H> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:V0> = <nat:8> /\ <var:X> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:X> = <nat:6> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 