\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:3> ; <var:W> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Given ( for all natural numbers $ <var:J> $ ) it to hold that $ <var:h> = <var:J> $ prior to the execution of this set of instructions , it follows that $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:h> = <var:J> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:h> = <var:J> \land <var:i0> = <nat:3> \} \end{eqnarray} Advancing running our set of commands returns : \begin{eqnarray} <var:W> := <var:i0> \\ \{ <var:h> = <var:J> \land <var:W> = <nat:3> \} \end{eqnarray} Given the above , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:W> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:h> = <var:J> }} <def:poly> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 