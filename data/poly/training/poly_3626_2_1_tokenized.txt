\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:B0> := <nat:1> ; <var:o> := <var:B0> \end{verbatim} Assume --- letting $ <var:D> $ --- that we have $ <var:u> = <var:D> $ ahead of the execution of our segment of code it follows that we see $ <var:o> = <nat:1> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:u> = <var:D> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:u> = <var:D> \land <var:B0> = <nat:1> \} \\ <var:o> := <var:B0> \\ \{ <var:u> = <var:D> \land <var:o> = <nat:1> \} \end{eqnarray} As a result , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <var:B0> := <nat:1> ; <var:o> := <var:B0> {{ <var:o> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:o> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 