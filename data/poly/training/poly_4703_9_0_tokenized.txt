\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:5> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:h> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:h> ; <var:p2> := <var:p2> * <var:h> ; <var:z> := <var:p2> ; <var:z> := <var:z> + <var:p1> ; <var:z> := <var:z> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Assume $ <var:h> = <var:Q> $ before evaluating the segment of code it holds that we have $ <var:z> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques returns : \begin{eqnarray} \{ <var:h> = <var:Q> \} \\ <var:p0> := <nat:5> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \} \\ <var:p1> := <nat:5> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \} \\ <var:p1> := <var:p1> * <var:h> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:Q> \} \\ <var:p2> := <nat:1> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:Q> \land <var:p2> = <nat:1> \} \\ <var:p2> := <var:p2> * <var:h> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:Q> \land <var:p2> = <nat:1> \cdot <var:Q> \} \\ <var:p2> := <var:p2> * <var:h> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:Q> \land <var:p2> = <nat:1> \cdot <var:Q> ^ <nat:2> \} \\ <var:z> := <var:p2> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:Q> \land <var:z> = <nat:1> \cdot <var:Q> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:p1> ; \\ \{ <var:h> = <var:Q> \land <var:p0> = <nat:5> \land <var:z> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> \} \\ <var:z> := <var:z> + <var:p0> \\ \{ <var:h> = <var:Q> \land <var:z> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> + <nat:5> \} \end{eqnarray} Given the preceding argument , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:5> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:h> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:h> ; <var:p2> := <var:p2> * <var:h> ; <var:z> := <var:p2> ; <var:z> := <var:z> + <var:p1> ; <var:z> := <var:z> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:h> = <var:Q> }} <def:poly> {{ <var:z> = <nat:1> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:Q> /\ <var:p2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:Q> /\ <var:p2> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:Q> /\ <var:p2> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:Q> /\ <var:z> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:p0> = <nat:5> /\ <var:z> = <nat:1> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:z> = <nat:1> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 