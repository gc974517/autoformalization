\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:6> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:V> ; <var:W> := <var:Z1> ; <var:W> := <var:W> + <var:Z0> \end{verbatim} Given that we have $ <var:V> = <var:X> $ for any positive coefficients $ <var:X> $ ahead of interpreting the list of instructions then $ <var:W> = <nat:6> * <var:X> + <nat:6> $ when set of instructions has executed . \end{theorem} \begin{proof} Proving correctness for this program is clear using typical Hoare reasoning . Paying attention to the following lines found in the code , \begin{verbatim} { <var:V> = <var:X> } <var:Z0> := <nat:6> { <var:V> = <var:X> \land <var:Z0> = <nat:6> } { <var:V> = <var:X> \land <var:Z0> = <nat:6> } <var:Z1> := <nat:6> { <var:V> = <var:X> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> } { <var:V> = <var:X> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> } <var:Z1> := <var:Z1> * <var:V> { <var:V> = <var:X> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> * <var:X> } { <var:V> = <var:X> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> * <var:X> } <var:W> := <var:Z1> { <var:V> = <var:X> \land <var:Z0> = <nat:6> \land <var:W> = <nat:6> * <var:X> } \end{verbatim} This is given by the environment update law given in usual Hoare reasoning . Moving on to the next step , \begin{verbatim} { <var:V> = <var:X> } <var:Z0> := <nat:6> { <var:V> = <var:X> \land <var:Z0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <var:Z0> := <nat:6> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:V> ; <var:W> := <var:Z1> ; <var:W> := <var:W> + <var:Z0> {{ <var:W> = <nat:6> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:Z0> = <nat:6> /\ <var:W> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:W> = <nat:6> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 