\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:E> ; <var:x> := <var:z1> ; <var:x> := <var:x> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Allow $ <var:E> = <var:U> $ before interpreting the set of instructions , then we have $ <var:x> = <nat:4> * <var:U> + <nat:8> $ after list of commands terminates . \end{theorem} \begin{proof} The proof of our set of instructions can be accomplished by typical Hoare logic . Jumping to the next statement contained in the code segment , the environment update line \verb | <var:z0> := <nat:8> ; | . This transfers the condition $ \{ <var:E> = <var:U> \} $ into $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \} $ . Focusing on the next piece of code in our list of commands , the environment update line binding $ <nat:4> $ toward $ <var:z1>$ . This forwards the precondition $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \} $ into $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> \} $ . This is known to be sound using the assignment law in usual Hoare reasoning . Next , we have the variable binding line binding $ <var:z1> * <var:E> $ as $ <var:z1>$ . This advances the condition $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> \} $ as the postcondition $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> * <var:U> \} $ . This is known to be sound with the assignment rule defined by typical Hoare reasoning . Moving on to the subsequent line contained in our set of commands , the environment update statement assigning $ <var:z1> $ into $ <var:x>$ . This line takes the precondition $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> * <var:U> \} $ toward the postcondition $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \land <var:x> = <nat:4> * <var:U> \} $ . This is guaranteed through the assignment scheme of Hoare logic . Taking another step toward the proceeding piece of code seen in the program , the variable update command \verb | <var:x> := <var:x> + <var:z0> | . This command transfers $ \{ <var:E> = <var:U> \land <var:z0> = <nat:8> \land <var:x> = <nat:4> * <var:U> \} $ as the postcondition $ \{ <var:E> = <var:U> \land <var:x> = <nat:4> * <var:U> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:8> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:E> ; <var:x> := <var:z1> ; <var:x> := <var:x> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:E> = <var:U> }} <def:poly> {{ <var:x> = <nat:4> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:8> /\ <var:x> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:x> = <nat:4> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 