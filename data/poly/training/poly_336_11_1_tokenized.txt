\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:l1> := <var:v> ; <var:l2> := <var:l1> * <var:v> ; <var:l3> := <var:l2> * <var:v> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:1> ; <var:l2> := <var:l2> * <nat:6> ; <var:l3> := <var:l3> * <nat:9> ; <var:G> := <var:l3> <var:G> := <var:G> + <var:l2> <var:G> := <var:G> + <var:l1> <var:G> := <var:G> + <var:l0> \end{verbatim} Given $ <var:v> = <var:Z> $ before interpreting our set of commands , it must be that $ <var:G> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:6> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} The proof of the set of commands can be given through usual Hoare techniques . Advancing to the next line contained in our set of instructions , we have the assignment code \verb | <var:l1> := <var:v> ; | . This line advances $ \{ <var:v> = <var:Z> \} $ toward the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \} $ . This is deduced with the assignment rule given in standard Hoare logic . Taking a look at the next bit of code contained in our set of instructions , we see the binding code \verb | <var:l2> := <var:l1> * <var:v> ; | . This redefines the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \} $ into $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \} $ . This is sound using the assignment inference rule of usual Hoare reasoning . Keeping momentum , we see the variable update code letting $ <var:l2> * <var:v> $ toward $ <var:l3>$ . This moves $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \} $ . This is rigorously given using the assignment scheme given in typical Hoare techniques . Going to the next step , we have the binding line \verb | <var:l0> := <nat:9> ; | . This takes the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \} $ to the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . Immediately following , we see the variable assignmet statement yielding $ <var:l1> * <nat:1> $ into $ <var:l1>$ . This line redefines the precondition $ \{ <var:v> = <var:Z> \land <var:l1> = <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ as the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . This is given using the assignment law given by usual Hoare techniques . Honing in on the subsequent bit of code seen in our list of instructions , we have the binding command \verb | <var:l2> := <var:l2> * <nat:6> ; | . This command advances $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ into the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <nat:6> \times <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . Stepping forward , we see the assignment statement \verb | <var:l3> := <var:l3> * <nat:9> ; | . This advances the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <nat:6> \times <var:Z> ^ <nat:2> \land <var:l3> = <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ to $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <nat:6> \times <var:Z> ^ <nat:2> \land <var:l3> = <nat:9> \times <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . This is given by the assignment rule found in standard Hoare techniques . Moving on , we see the code \verb | <var:G> := <var:l3> | . This forwards the precondition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <nat:6> \times <var:Z> ^ <nat:2> \land <var:l3> = <nat:9> \times <var:Z> ^ <nat:3> \land <var:l0> = <nat:9> \} $ as the postcondition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <nat:6> \times <var:Z> ^ <nat:2> \land <var:l0> = <nat:9> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment law in usual Hoare techniques . Focusing on the upcoming command seen in our list of instructions , we see the environment update code yielding $ <var:G> + <var:l2$ into $ <var:G>$ . This advances $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l2> = <nat:6> \times <var:Z> ^ <nat:2> \land <var:l0> = <nat:9> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> \} $ toward the condition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l0> = <nat:9> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:6> \times <var:Z> ^ <nat:2> \} $ . This is known to be sound through the assignment law of standard Hoare techniques . Considering the following statement found in our program , we see the environment update statement binding $ <var:G> + <var:l1$ into $ <var:G>$ . This redefines the precondition $ \{ <var:v> = <var:Z> \land <var:l1> = <nat:1> \times <var:Z> \land <var:l0> = <nat:9> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:6> \times <var:Z> ^ <nat:2> \} $ as the postcondition $ \{ <var:v> = <var:Z> \land <var:l0> = <nat:9> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:6> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> \} $ . This is rigorously given through the assignment inference rule defined in usual Hoare logic . Moving on , the command letting $ <var:G> + <var:l0$ to $ <var:G>$ . This transfers the condition $ \{ <var:v> = <var:Z> \land <var:l0> = <nat:9> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:6> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> \} $ as the condition $ \{ <var:v> = <var:Z> \land <var:G> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:6> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:v> = <var:Z> }} <var:l1> := <var:v> ; <var:l2> := <var:l1> * <var:v> ; <var:l3> := <var:l2> * <var:v> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:1> ; <var:l2> := <var:l2> * <nat:6> ; <var:l3> := <var:l3> * <nat:9> ; <var:G> := <var:l3> <var:G> := <var:G> + <var:l2> <var:G> := <var:G> + <var:l1> <var:G> := <var:G> + <var:l0> {{ <var:G> = <nat:9> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <var:Z> /\ <var:l2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <var:Z> /\ <var:l2> = <var:Z> ^ <nat:2> /\ <var:l3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <var:Z> /\ <var:l2> = <var:Z> ^ <nat:2> /\ <var:l3> = <var:Z> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <nat:1> * <var:Z> /\ <var:l2> = <var:Z> ^ <nat:2> /\ <var:l3> = <var:Z> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <nat:1> * <var:Z> /\ <var:l2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:l3> = <var:Z> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <nat:1> * <var:Z> /\ <var:l2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:l3> = <nat:9> * <var:Z> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <nat:1> * <var:Z> /\ <var:l2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:l0> = <nat:9> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l1> = <nat:1> * <var:Z> /\ <var:l0> = <nat:9> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l0> = <nat:9> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 