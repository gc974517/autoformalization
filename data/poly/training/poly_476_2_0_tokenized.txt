\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:3> ; <var:n> := <var:i0> \end{verbatim} Assuming given some $ <var:S> \in \mathbb{N} $ that $ <var:K> = <var:S> $ prior to evaluating our list of commands , it follows that $ <var:n> = <nat:3> $ once code has finished executing . \end{theorem} \begin{proof} Note that the below decorated list of commands . \begin{eqnarray} \{ <var:K> = <var:S> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:K> = <var:S> \land <var:i0> = <nat:3> \} \\ <var:n> := <var:i0> \\ \{ <var:K> = <var:S> \land <var:n> = <nat:3> \} \end{eqnarray} Applying usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:K> = <var:S> }} <var:i0> := <nat:3> ; <var:n> := <var:i0> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 