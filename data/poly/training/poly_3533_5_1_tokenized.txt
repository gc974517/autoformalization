\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:w> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:C> := <var:Y1> <var:C> := <var:C> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:w> = <var:q> $ before the evaluation of the series of instructions it must be that $ <var:C> = <nat:5> \cdot <var:q> + <nat:1> $ after code terminates . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is evident with Hoare logic . Moving on to the subsequent line contained in our list of commands , the binding code \verb | <var:Y1> := <var:w> ; | . This moves the precondition $ \{ <var:w> = <var:q> \} $ as the condition $ \{ <var:w> = <var:q> \land <var:Y1> = <var:q> \} $ . Advancing on , the variable assignmet line letting $ <nat:1> $ as $ <var:Y0>$ . This transfers the precondition $ \{ <var:w> = <var:q> \land <var:Y1> = <var:q> \} $ toward the condition $ \{ <var:w> = <var:q> \land <var:Y1> = <var:q> \land <var:Y0> = <nat:1> \} $ . Moving forward to the following statement contained in our series of instructions , we have the binding command \verb | <var:Y1> := <var:Y1> * <nat:5> ; | . This takes $ \{ <var:w> = <var:q> \land <var:Y1> = <var:q> \land <var:Y0> = <nat:1> \} $ as $ \{ <var:w> = <var:q> \land <var:Y1> = <nat:5> \times <var:q> \land <var:Y0> = <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule defined in usual Hoare logic . Moving forward , we see the assignment line defining $ <var:Y1$ toward $ <var:C>$ . This moves the condition $ \{ <var:w> = <var:q> \land <var:Y1> = <nat:5> \times <var:q> \land <var:Y0> = <nat:1> \} $ to the condition $ \{ <var:w> = <var:q> \land <var:Y0> = <nat:1> \land <var:C> = <nat:5> \times <var:q> \} $ . This is ensured by the assignment inference rule given in standard Hoare techniques . Moving on to the upcoming line of code found in our code segment , the variable update code \verb | <var:C> := <var:C> + <var:Y0> | . This statement redefines the condition $ \{ <var:w> = <var:q> \land <var:Y0> = <nat:1> \land <var:C> = <nat:5> \times <var:q> \} $ toward the postcondition $ \{ <var:w> = <var:q> \land <var:C> = <nat:5> \times <var:q> + <nat:1> \} $ . This is given through the assignment rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:w> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:C> := <var:Y1> <var:C> := <var:C> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:w> = <var:q> }} <def:poly> {{ <var:C> = <nat:5> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:Y1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:Y1> = <var:q> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:Y1> = <nat:5> * <var:q> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:Y0> = <nat:1> /\ <var:C> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:C> = <nat:5> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 