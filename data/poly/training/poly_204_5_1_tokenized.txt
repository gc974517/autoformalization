\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:p> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:4> ; <var:S> := <var:R1> <var:S> := <var:S> + <var:R0> \end{verbatim} Assuming it to hold that $ <var:p> = <var:G> $ ahead of the evaluation of our set of instructions it must be that $ <var:S> = <nat:4> * <var:G> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:p> = <var:G> \} \\ <var:R1> := <var:p> ; \\ \{ <var:p> = <var:G> \land <var:R1> = <var:G> \} \end{eqnarray} Allowing the evaluation of our series of commands yields : \begin{eqnarray} <var:R0> := <nat:2> ; \\ \{ <var:p> = <var:G> \land <var:R1> = <var:G> \land <var:R0> = <nat:2> \} \\ <var:R1> := <var:R1> * <nat:4> ; \\ \{ <var:p> = <var:G> \land <var:R1> = <nat:4> * <var:G> \land <var:R0> = <nat:2> \} \\ <var:S> := <var:R1> \\ \{ <var:p> = <var:G> \land <var:R0> = <nat:2> \land <var:S> = <nat:4> * <var:G> \} \\ <var:S> := <var:S> + <var:R0> \\ \{ <var:p> = <var:G> \land <var:S> = <nat:4> * <var:G> + <nat:2> \} \end{eqnarray} Given the preceding argument , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:p> = <var:G> }} <var:R1> := <var:p> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:4> ; <var:S> := <var:R1> <var:S> := <var:S> + <var:R0> {{ <var:S> = <nat:4> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:R1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:R1> = <var:G> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:R1> = <nat:4> * <var:G> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:R0> = <nat:2> /\ <var:S> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:S> = <nat:4> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 