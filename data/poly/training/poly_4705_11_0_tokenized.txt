\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:2> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:A> ; <var:c2> := <var:c2> * <var:A> ; <var:c3> := <nat:2> ; <var:c3> := <var:c3> * <var:A> ; <var:c3> := <var:c3> * <var:A> ; <var:c3> := <var:c3> * <var:A> ; <var:F> := <var:c3> ; <var:F> := <var:F> + <var:c2> ; <var:F> := <var:F> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Assuming that $ <var:A> = <var:a> $ before evaluating this segment of code it must be that we have $ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> $ once set of instructions finishes . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:A> = <var:a> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \} \\ <var:c2> := <nat:2> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \} \\ <var:c2> := <var:c2> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> \} \\ <var:c2> := <var:c2> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> ^ <nat:2> \} \\ <var:c3> := <nat:2> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:c3> = <nat:2> \} \\ <var:c3> := <var:c3> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:a> \} \\ <var:c3> := <var:c3> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:a> ^ <nat:2> \} \\ <var:c3> := <var:c3> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:a> ^ <nat:3> \} \\ <var:F> := <var:c3> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:c2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:F> = <nat:2> \cdot <var:a> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:c2> ; \\ \{ <var:A> = <var:a> \land <var:c0> = <nat:2> \land <var:F> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:c0> \\ \{ <var:A> = <var:a> \land <var:F> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \} \end{eqnarray} Given the above , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:2> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:A> ; <var:c2> := <var:c2> * <var:A> ; <var:c3> := <nat:2> ; <var:c3> := <var:c3> * <var:A> ; <var:c3> := <var:c3> * <var:A> ; <var:c3> := <var:c3> * <var:A> ; <var:F> := <var:c3> ; <var:F> := <var:F> + <var:c2> ; <var:F> := <var:F> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:A> = <var:a> }} <def:poly> {{ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:c3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:c2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:F> = <nat:2> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:c0> = <nat:2> /\ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 