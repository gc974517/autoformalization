\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:K> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:K> ; <var:u2> := <var:u2> * <var:K> ; <var:q> := <var:u2> ; <var:q> := <var:q> + <var:u1> ; <var:q> := <var:q> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:K> = <var:l> $ before running the list of instructions , then we see $ <var:q> = <nat:9> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:3> $ after program has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is done with typical Hoare reasoning . Going to the next step , we see the assignment command defining $ <nat:3> $ toward $ <var:u0>$ . This line moves the condition $ \{ <var:K> = <var:l> \} $ to the postcondition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \} $ . This is shown with the assignment law given in standard Hoare logic . Taking another step toward the proceeding line seen in our code segment , we have the variable assignmet statement \verb | <var:u1> := <nat:2> ; | . This moves $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \} $ to the condition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> \} $ . This is guaranteed through the assignment inference rule found in usual Hoare logic . Observing the upcoming command seen in our segment of code , we see the binding line letting $ <var:u1> * <var:K> $ as $ <var:u1>$ . This transfers $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> \} $ to the condition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \} $ . Moving on to the following line of code contained in the series of commands , we have the environment update code letting $ <nat:9> $ to $ <var:u2>$ . This line advances the condition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \} $ to the postcondition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:u2> = <nat:9> \} $ . Stepping forward , we have the code \verb | <var:u2> := <var:u2> * <var:K> ; | . This code advances the condition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:u2> = <nat:9> \} $ into the postcondition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:u2> = <nat:9> * <var:l> \} $ . Moving on to the next step , we have the assignment command letting $ <var:u2> * <var:K> $ to $ <var:u2>$ . This forwards the precondition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:u2> = <nat:9> * <var:l> \} $ into $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:u2> = <nat:9> * <var:l> ^ <nat:2> \} $ . Observing the subsequent line of code in our list of instructions , we have the assignment command \verb | <var:q> := <var:u2> ; | . This takes the condition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:u2> = <nat:9> * <var:l> ^ <nat:2> \} $ into the postcondition $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:q> = <nat:9> * <var:l> ^ <nat:2> \} $ . This is deduced through the assignment inference rule from typical Hoare reasoning . Paying attention to the upcoming command found in the code , we see the assignment command letting $ <var:q> + <var:u1> $ into $ <var:q>$ . This redefines $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:u1> = <nat:2> * <var:l> \land <var:q> = <nat:9> * <var:l> ^ <nat:2> \} $ as $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> \} $ . This is guaranteed by the assignment rule given by typical Hoare techniques . Moving on to the subsequent command seen in our code , we have the variable binding code binding $ <var:q> + <var:u0$ into $ <var:q>$ . This command advances $ \{ <var:K> = <var:l> \land <var:u0> = <nat:3> \land <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> \} $ into $ \{ <var:K> = <var:l> \land <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> \} $ . This is given by the assignment law in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:K> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:K> ; <var:u2> := <var:u2> * <var:K> ; <var:q> := <var:u2> ; <var:q> := <var:q> + <var:u1> ; <var:q> := <var:q> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:K> = <var:l> }} <def:poly> {{ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:2> * <var:l> /\ <var:u2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:2> * <var:l> /\ <var:u2> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:2> * <var:l> /\ <var:u2> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:2> * <var:l> /\ <var:q> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:u0> = <nat:3> /\ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 