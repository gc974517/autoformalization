\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:d1> := <var:D> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:8> ; <var:o> := <var:d1> <var:o> := <var:o> + <var:d0> \end{verbatim} Assuming $ <var:D> = <var:c> $ --- for integers $ <var:c> $ --- before executing the series of commands , it holds that $ <var:o> = <nat:8> * <var:c> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our program is clear by typical Hoare techniques . Looking at the subsequent lines of codeseen in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:c> \} & <var:d1> := <var:D> & \{ <var:D> = <var:c> \land <var:d1> = <var:c> \} \\ \{ <var:D> = <var:c> \land <var:d1> = <var:c> \} & <var:d0> := <nat:4> & \{ <var:D> = <var:c> \land <var:d1> = <var:c> \land <var:d0> = <nat:4> \} \end{tabular} This is deduced using the variable update scheme found in Hoare techniques . Taking a look at the proceeding bits of codefound in our code , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:c> \} & <var:d1> := <var:D> & \{ <var:D> = <var:c> \land <var:d1> = <var:c> \} \\ \{ <var:D> = <var:c> \land <var:d1> = <var:c> \} & <var:d0> := <nat:4> & \{ <var:D> = <var:c> \land <var:d1> = <var:c> \land <var:d0> = <nat:4> \} \end{tabular} After , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:c> \} & <var:d1> := <var:D> & \{ <var:D> = <var:c> \land <var:d1> = <var:c> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:D> = <var:c> }} <var:d1> := <var:D> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:8> ; <var:o> := <var:d1> <var:o> := <var:o> + <var:d0> {{ <var:o> = <nat:8> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:d1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:d1> = <var:c> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:d1> = <nat:8> * <var:c> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:d0> = <nat:4> /\ <var:o> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:o> = <nat:8> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 