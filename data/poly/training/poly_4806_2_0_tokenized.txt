\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:5> ; <var:x> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given any positive coefficients $ <var:V> $ --- that we have $ <var:m> = <var:V> $ ahead of running our series of instructions then we have $ <var:x> = <nat:5> $ after set of instructions has exited . \end{theorem} \begin{proof} Observe the below decorated program . \begin{eqnarray} \{ <var:m> = <var:V> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:m> = <var:V> \land <var:j0> = <nat:5> \} \\ <var:x> := <var:j0> \\ \{ <var:m> = <var:V> \land <var:x> = <nat:5> \} \end{eqnarray} Utilizing standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:5> ; <var:x> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:m> = <var:V> }} <def:poly> {{ <var:x> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:x> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 