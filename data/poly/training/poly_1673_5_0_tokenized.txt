\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:u> ; <var:C> := <var:Z1> ; <var:C> := <var:C> + <var:Z0> \end{verbatim} Allowing it to hold that $ <var:u> = <var:x> $ ( given any $ <var:x> $ ) before interpreting our program , it follows that $ <var:C> = <nat:1> \times <var:x> + <nat:4> $ once set of instructions finishes . \end{theorem} \begin{proof} The way to prove correctness for this code is given through standard Hoare logic . Taking another step toward the following piece of code seen in the set of instructions , we have the binding code assigning $ <nat:4> $ as $ <var:Z0>$ . This line advances the precondition $ \{ <var:u> = <var:x> \} $ into $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \} $ . Looking at the proceeding statement seen in the code segment , we have the assignment command binding $ <nat:1> $ as $ <var:Z1>$ . This redefines $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \} $ to $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> \} $ . Advancing to the next step , we have the environment update code yielding $ <var:Z1> * <var:u> $ into $ <var:Z1>$ . This line transfers the condition $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> \} $ as $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> * <var:x> \} $ . Advancing to the next step , the environment update code \verb | <var:C> := <var:Z1> ; | . This code transfers the condition $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> * <var:x> \} $ into $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \land <var:C> = <nat:1> * <var:x> \} $ . This is guaranteed by the assignment rule given by standard Hoare reasoning . Moving onward , the variable binding statement \verb | <var:C> := <var:C> + <var:Z0> | . This advances the precondition $ \{ <var:u> = <var:x> \land <var:Z0> = <nat:4> \land <var:C> = <nat:1> * <var:x> \} $ into the postcondition $ \{ <var:u> = <var:x> \land <var:C> = <nat:1> * <var:x> + <nat:4> \} $ . This is sound by the assignment law given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:u> ; <var:C> := <var:Z1> ; <var:C> := <var:C> + <var:Z0> {{ <var:C> = <nat:1> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Z0> = <nat:4> /\ <var:C> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:C> = <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 