\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:T> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:8> ; <var:C> := <var:e1> <var:C> := <var:C> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Assume ( for $ <var:V> $ ) it to hold that $ <var:T> = <var:V> $ prior to interpreting our set of commands it holds that we have $ <var:C> = <nat:8> * <var:V> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for this program is clear by standard Hoare reasoning . Moving forward to the upcoming piece of code found in our series of instructions , the environment update statement assigning $ <var:T> $ to $ <var:e1>$ . This redefines $ \{ <var:T> = <var:V> \} $ toward the postcondition $ \{ <var:T> = <var:V> \land <var:e1> = <var:V> \} $ . Stepping forward , the variable assignmet line \verb | <var:e0> := <nat:6> ; | . This code forwards the precondition $ \{ <var:T> = <var:V> \land <var:e1> = <var:V> \} $ into the postcondition $ \{ <var:T> = <var:V> \land <var:e1> = <var:V> \land <var:e0> = <nat:6> \} $ . This is guaranteed using the assignment scheme given in typical Hoare techniques . Next , the assignment code assigning $ <var:e1> * <nat:8> $ into $ <var:e1>$ . This statement advances the condition $ \{ <var:T> = <var:V> \land <var:e1> = <var:V> \land <var:e0> = <nat:6> \} $ into $ \{ <var:T> = <var:V> \land <var:e1> = <nat:8> \cdot <var:V> \land <var:e0> = <nat:6> \} $ . Going to the next step , we see the environment update code \verb | <var:C> := <var:e1> | . This moves the condition $ \{ <var:T> = <var:V> \land <var:e1> = <nat:8> \cdot <var:V> \land <var:e0> = <nat:6> \} $ as $ \{ <var:T> = <var:V> \land <var:e0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:V> \} $ . This is shown through the assignment scheme obtained from typical Hoare techniques . Advancing , the binding code letting $ <var:C> + <var:e0$ to $ <var:C>$ . This command forwards the condition $ \{ <var:T> = <var:V> \land <var:e0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:V> \} $ toward $ \{ <var:T> = <var:V> \land <var:C> = <nat:8> \cdot <var:V> + <nat:6> \} $ . This is known to be sound using the assignment inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:T> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:8> ; <var:C> := <var:e1> <var:C> := <var:C> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:T> = <var:V> }} <def:poly> {{ <var:C> = <nat:8> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:e1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:e1> = <var:V> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:e1> = <nat:8> * <var:V> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:e0> = <nat:6> /\ <var:C> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:C> = <nat:8> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 