\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:Q0> := <nat:2> ; <var:W> := <var:Q0> \end{verbatim} Assuming , for every positive coefficients $ <var:I> $ , it to be that $ <var:k> = <var:I> $ prior to interpreting this series of commands , it holds that $ <var:W> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is done with usual Hoare reasoning . Moving forward to the next step , the line \verb | <var:Q0> := <nat:2> ; | . This statement transfers the condition $ \{ <var:k> = <var:I> \} $ as the condition $ \{ <var:k> = <var:I> \land <var:Q0> = <nat:2> \} $ . This is sound using the assignment inference rule of typical Hoare reasoning . Taking a look at the proceeding step seen in our set of instructions , we see the binding code binding $ <var:Q0$ toward $ <var:W>$ . This takes the precondition $ \{ <var:k> = <var:I> \land <var:Q0> = <nat:2> \} $ toward $ \{ <var:k> = <var:I> \land <var:W> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:k> = <var:I> }} <var:Q0> := <nat:2> ; <var:W> := <var:Q0> {{ <var:W> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:W> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 