\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:V> ; <var:m2> := <var:m1> * <var:V> ; <var:m3> := <var:m2> * <var:V> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:1> ; <var:I> := <var:m3> <var:I> := <var:I> + <var:m2> <var:I> := <var:I> + <var:m1> <var:I> := <var:I> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow it to be that $ <var:V> = <var:c> $ before the execution of the set of instructions , it holds that $ <var:I> = <nat:1> \times <var:c> ^ <nat:3> + <nat:5> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:9> $ after code segment has executed . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:V> = <var:c> \} \\ <var:m1> := <var:V> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <var:c> \} \\ <var:m2> := <var:m1> * <var:V> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \} \end{eqnarray} Furthering the execution of this series of commands produces : \begin{eqnarray} <var:m3> := <var:m2> * <var:V> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \} \end{eqnarray} Allowing running this program yields : \begin{eqnarray} <var:m0> := <nat:9> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:9> \} \\ <var:m1> := <var:m1> * <nat:3> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <nat:3> \cdot <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:9> \} \\ <var:m2> := <var:m2> * <nat:5> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <nat:3> \cdot <var:c> \land <var:m2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:9> \} \end{eqnarray} Continuing executing this set of instructions produces : \begin{eqnarray} <var:m3> := <var:m3> * <nat:1> ; \\ \{ <var:V> = <var:c> \land <var:m1> = <nat:3> \cdot <var:c> \land <var:m2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:c> ^ <nat:3> \land <var:m0> = <nat:9> \} \\ <var:I> := <var:m3> \\ \{ <var:V> = <var:c> \land <var:m1> = <nat:3> \cdot <var:c> \land <var:m2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:m0> = <nat:9> \land <var:I> = <nat:1> \cdot <var:c> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:m2> \\ \{ <var:V> = <var:c> \land <var:m1> = <nat:3> \cdot <var:c> \land <var:m0> = <nat:9> \land <var:I> = <nat:1> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:m1> \\ \{ <var:V> = <var:c> \land <var:m0> = <nat:9> \land <var:I> = <nat:1> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> \} \end{eqnarray} Allowing the execution of this set of instructions results in : \begin{eqnarray} <var:I> := <var:I> + <var:m0> \\ \{ <var:V> = <var:c> \land <var:I> = <nat:1> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:9> \} \end{eqnarray} Thusly , the series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:V> ; <var:m2> := <var:m1> * <var:V> ; <var:m3> := <var:m2> * <var:V> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:1> ; <var:I> := <var:m3> <var:I> := <var:I> + <var:m2> <var:I> := <var:I> + <var:m1> <var:I> := <var:I> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:V> = <var:c> }} <def:poly> {{ <var:I> = <nat:1> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:c> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:m0> = <nat:9> /\ <var:I> = <nat:1> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m0> = <nat:9> /\ <var:I> = <nat:1> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:m0> = <nat:9> /\ <var:I> = <nat:1> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:I> = <nat:1> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 