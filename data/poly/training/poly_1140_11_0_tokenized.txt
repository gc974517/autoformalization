\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:4> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:r> ; <var:y2> := <var:y2> * <var:r> ; <var:y3> := <nat:7> ; <var:y3> := <var:y3> * <var:r> ; <var:y3> := <var:y3> * <var:r> ; <var:y3> := <var:y3> * <var:r> ; <var:S> := <var:y3> ; <var:S> := <var:S> + <var:y2> ; <var:S> := <var:S> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:r> = <var:u> $ ahead of interpreting this code segment , then $ <var:S> = <nat:7> * <var:u> ^ <nat:3> + <nat:8> * <var:u> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is evident by Hoare techniques . Jumping to the upcoming commands found in our series of instructions , we see \begin{eqnarray} \{ <var:r> = <var:u> \} \, <var:y0> := <nat:4> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \} \, <var:y2> := <nat:8> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \} \, <var:y2> := <var:y2> * <var:r> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:r> = <var:u> \} \, <var:y0> := <nat:4> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \} \, <var:y2> := <nat:8> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \} \, <var:y2> := <var:y2> * <var:r> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> \} \, <var:y2> := <var:y2> * <var:r> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> ^ <nat:2> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> ^ <nat:2> \} \, <var:y3> := <nat:7> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> ^ <nat:2> \land <var:y3> = <nat:7> \} \\ \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> ^ <nat:2> \land <var:y3> = <nat:7> \} \, <var:y3> := <var:y3> * <var:r> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:u> ^ <nat:2> \land <var:y3> = <nat:7> \times <var:u> \} \end{eqnarray} Following , \begin{eqnarray} \{ <var:r> = <var:u> \} \, <var:y0> := <nat:4> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \} \end{eqnarray} Going forward , we see \begin{eqnarray} \{ <var:r> = <var:u> \} \, <var:y0> := <nat:4> \, \{ <var:r> = <var:u> \land <var:y0> = <nat:4> \} \end{eqnarray} This is ensured with the environment update law from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:r> ; <var:y2> := <var:y2> * <var:r> ; <var:y3> := <nat:7> ; <var:y3> := <var:y3> * <var:r> ; <var:y3> := <var:y3> * <var:r> ; <var:y3> := <var:y3> * <var:r> ; <var:S> := <var:y3> ; <var:S> := <var:S> + <var:y2> ; <var:S> := <var:S> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:r> = <var:u> }} <def:poly> {{ <var:S> = <nat:7> * <var:u> ^ <nat:3> + <nat:8> * <var:u> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ^ <nat:2> /\ <var:y3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ^ <nat:2> /\ <var:y3> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ^ <nat:2> /\ <var:y3> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ^ <nat:2> /\ <var:y3> = <nat:7> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:u> ^ <nat:2> /\ <var:S> = <nat:7> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:y0> = <nat:4> /\ <var:S> = <nat:7> * <var:u> ^ <nat:3> + <nat:8> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:S> = <nat:7> * <var:u> ^ <nat:3> + <nat:8> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 