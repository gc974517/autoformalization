\begin{document} \begin{theorem} Consider the following program as \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:n> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:n> ; <var:g2> := <var:g2> * <var:n> ; <var:U> := <var:g2> ; <var:U> := <var:U> + <var:g1> ; <var:U> := <var:U> + <var:g0> \end{verbatim} Allowing it to be that $ <var:n> = <var:e> $ before interpreting this segment of code , then we have $ <var:U> = <nat:8> \times <var:e> ^ <nat:2> + <nat:8> \times <var:e> + <nat:6> $ when series of commands has terminated . \end{theorem} \begin{proof} The flow of logic for the code is evident using Hoare reasoning . Stepping forward , \begin{eqnarray} \{ <var:n> = <var:e> \} \, <var:g0> := <nat:6> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \\ \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \, <var:g1> := <nat:8> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> \} \\ \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> \} \, <var:g1> := <var:g1> * <var:n> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> * <var:e> \} \end{eqnarray} Moving forward to the next step , we see \begin{eqnarray} \{ <var:n> = <var:e> \} \, <var:g0> := <nat:6> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \\ \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \, <var:g1> := <nat:8> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> \} \end{eqnarray} This is shown with the inference rule from standard Hoare logic . Honing in on the upcoming piece of code found in our set of commands , \begin{eqnarray} \{ <var:n> = <var:e> \} \, <var:g0> := <nat:6> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \end{eqnarray} Observing the proceeding line of code found in the segment of code , \begin{eqnarray} \{ <var:n> = <var:e> \} \, <var:g0> := <nat:6> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \end{eqnarray} Immediately following , we see \begin{eqnarray} \{ <var:n> = <var:e> \} \, <var:g0> := <nat:6> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \\ \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \} \, <var:g1> := <nat:8> \, \{ <var:n> = <var:e> \land <var:g0> = <nat:6> \land <var:g1> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:n> = <var:e> }} <var:g0> := <nat:6> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:n> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:n> ; <var:g2> := <var:g2> * <var:n> ; <var:U> := <var:g2> ; <var:U> := <var:U> + <var:g1> ; <var:U> := <var:U> + <var:g0> {{ <var:U> = <nat:8> * <var:e> ^ <nat:2> + <nat:8> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> * <var:e> /\ <var:g2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> * <var:e> /\ <var:g2> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> * <var:e> /\ <var:g2> = <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:8> * <var:e> /\ <var:U> = <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:g0> = <nat:6> /\ <var:U> = <nat:8> * <var:e> ^ <nat:2> + <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:U> = <nat:8> * <var:e> ^ <nat:2> + <nat:8> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 