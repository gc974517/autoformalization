\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:r> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:7> ; <var:q> := <var:e1> <var:q> := <var:q> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow --- letting $ <var:L> \in \mathbb{Z}^+ $ --- that $ <var:r> = <var:L> $ before running this list of commands , it holds that we have $ <var:q> = <nat:7> * <var:L> + <nat:3> $ when segment of code is done . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be seen with standard Hoare logic . Taking a look at the proceeding statement found in our code segment , the variable assignmet statement \verb | <var:e1> := <var:r> ; | . This statement transfers the precondition $ \{ <var:r> = <var:L> \} $ to the condition $ \{ <var:r> = <var:L> \land <var:e1> = <var:L> \} $ . Focusing on the subsequent step found in our set of commands , the environment update command \verb | <var:e0> := <nat:3> ; | . This code advances the condition $ \{ <var:r> = <var:L> \land <var:e1> = <var:L> \} $ as the postcondition $ \{ <var:r> = <var:L> \land <var:e1> = <var:L> \land <var:e0> = <nat:3> \} $ . This is rigorously given through the assignment inference rule found in standard Hoare reasoning . Moving forward , we have the variable binding line yielding $ <var:e1> * <nat:7> $ to $ <var:e1>$ . This forwards $ \{ <var:r> = <var:L> \land <var:e1> = <var:L> \land <var:e0> = <nat:3> \} $ into the condition $ \{ <var:r> = <var:L> \land <var:e1> = <nat:7> * <var:L> \land <var:e0> = <nat:3> \} $ . This is given using the assignment inference rule of Hoare logic . Advancing to the next step , we see the variable assignmet code giving $ <var:e1$ as $ <var:q>$ . This line forwards the precondition $ \{ <var:r> = <var:L> \land <var:e1> = <nat:7> * <var:L> \land <var:e0> = <nat:3> \} $ into the postcondition $ \{ <var:r> = <var:L> \land <var:e0> = <nat:3> \land <var:q> = <nat:7> * <var:L> \} $ . Considering the next command in the list of instructions , we see the variable update command yielding $ <var:q> + <var:e0$ toward $ <var:q>$ . This transfers $ \{ <var:r> = <var:L> \land <var:e0> = <nat:3> \land <var:q> = <nat:7> * <var:L> \} $ to the condition $ \{ <var:r> = <var:L> \land <var:q> = <nat:7> * <var:L> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:r> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:7> ; <var:q> := <var:e1> <var:q> := <var:q> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:r> = <var:L> }} <def:poly> {{ <var:q> = <nat:7> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:e1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:e1> = <var:L> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:e1> = <nat:7> * <var:L> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:e0> = <nat:3> /\ <var:q> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:q> = <nat:7> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 