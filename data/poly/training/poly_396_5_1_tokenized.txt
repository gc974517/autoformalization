\begin{document} \begin{theorem} Consider a set of instructions as \begin{verbatim} <var:y1> := <var:X> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:1> ; <var:B> := <var:y1> <var:B> := <var:B> + <var:y0> \end{verbatim} Allowing it to hold that $ <var:X> = <var:G> $ ahead of the execution of this series of commands then we have $ <var:B> = <nat:1> * <var:G> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our series of commands can be given with this decorated list of commands . \begin{eqnarray} \{ <var:X> = <var:G> \} \\ <var:y1> := <var:X> ; \\ \{ <var:X> = <var:G> \land <var:y1> = <var:G> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:X> = <var:G> \land <var:y1> = <var:G> \land <var:y0> = <nat:5> \} \\ <var:y1> := <var:y1> * <nat:1> ; \\ \{ <var:X> = <var:G> \land <var:y1> = <nat:1> * <var:G> \land <var:y0> = <nat:5> \} \\ <var:B> := <var:y1> \\ \{ <var:X> = <var:G> \land <var:y0> = <nat:5> \land <var:B> = <nat:1> * <var:G> \} \\ <var:B> := <var:B> + <var:y0> \\ \{ <var:X> = <var:G> \land <var:B> = <nat:1> * <var:G> + <nat:5> \} \end{eqnarray} Applying Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:X> = <var:G> }} <var:y1> := <var:X> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:1> ; <var:B> := <var:y1> <var:B> := <var:B> + <var:y0> {{ <var:B> = <nat:1> * <var:G> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:y1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:y1> = <var:G> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:y1> = <nat:1> * <var:G> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:y0> = <nat:5> /\ <var:B> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:B> = <nat:1> * <var:G> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 