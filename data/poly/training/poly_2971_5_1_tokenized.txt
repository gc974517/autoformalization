\begin{document} \begin{theorem} We define a set of instructions such that \begin{verbatim} <var:x1> := <var:R> ; <var:x0> := <nat:8> ; <var:x1> := <var:x1> * <nat:1> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> \end{verbatim} Allow $ <var:R> = <var:M> $ letting positive integer coefficients $ <var:M> $ prior to running our set of instructions it follows that $ <var:Z> = <nat:1> \cdot <var:M> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be shown using standard Hoare logic . Shifting focus toward the subsequent step seen in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:M> \} & <var:x1> := <var:R> & \{ <var:R> = <var:M> \land <var:x1> = <var:M> \} \end{tabular} This is ensured with the assignment scheme in Hoare logic . Looking at the proceeding bit of code in our program , \[ \begin{tabular} {rcl} \{ <var:R> = <var:M> \} & <var:x1> := <var:R> & \{ <var:R> = <var:M> \land <var:x1> = <var:M> \} \end{tabular} Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:M> \} & <var:x1> := <var:R> & \{ <var:R> = <var:M> \land <var:x1> = <var:M> \} \\ \{ <var:R> = <var:M> \land <var:x1> = <var:M> \} & <var:x0> := <nat:8> & \{ <var:R> = <var:M> \land <var:x1> = <var:M> \land <var:x0> = <nat:8> \} \\ \{ <var:R> = <var:M> \land <var:x1> = <var:M> \land <var:x0> = <nat:8> \} & <var:x1> := <var:x1> * <nat:1> & \{ <var:R> = <var:M> \land <var:x1> = <nat:1> * <var:M> \land <var:x0> = <nat:8> \} \end{tabular} This is sound by the environment update scheme given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:R> = <var:M> }} <var:x1> := <var:R> ; <var:x0> := <nat:8> ; <var:x1> := <var:x1> * <nat:1> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:1> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:x1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:x1> = <var:M> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:x1> = <nat:1> * <var:M> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:x0> = <nat:8> /\ <var:Z> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:Z> = <nat:1> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 