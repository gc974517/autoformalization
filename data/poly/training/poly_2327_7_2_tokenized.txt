\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:q> := <nat:2> ; <var:q> := <nat:4> + <var:q> * <var:J> ; <var:q> := <var:q> * <var:J> ; <var:q> := <nat:1> + <var:q> * <var:J> ; <var:q> := <nat:3> + <var:q> * <var:J> ; <var:q> := <nat:4> + <var:q> * <var:J> ; <var:q> := <nat:1> + <var:q> * <var:J> \end{verbatim} Allowing ( given every positive coefficients $ <var:u> $ ) it to be that $ <var:J> = <var:u> $ ahead of the execution of the set of instructions it must be that $ <var:q> = <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the program is evident using typical Hoare logic . Now , we have the variable update statement \verb | <var:q> := <nat:2> ; | . This statement advances the condition $ \{ <var:J> = <var:u> \} $ into the condition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \} $ . This is given with the assignment rule in standard Hoare reasoning . Next , the binding command giving $ <nat:4> + <var:q> * <var:J> $ as $ <var:q>$ . This line advances the precondition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> + <nat:4> \} $ . This is guaranteed with the assignment scheme given by typical Hoare logic . Moving onward , the environment update command \verb | <var:q> := <var:q> * <var:J> ; | . This takes the precondition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> + <nat:4> \} $ as the condition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + \} $ . Honing in on the subsequent command in our list of instructions , we have the variable update statement binding $ <nat:1> + <var:q> * <var:J> $ as $ <var:q>$ . This line redefines $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + \} $ as the postcondition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:1> \} $ . This is shown to be logically sound through the assignment law in usual Hoare logic . Considering the following bit of code seen in our series of commands , the code yielding $ <nat:3> + <var:q> * <var:J> $ into $ <var:q>$ . This command moves $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:1> \} $ as $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> + <nat:3> \} $ . This is known to be sound with the assignment inference rule defined in Hoare logic . Keeping momentum , we have the variable assignmet code letting $ <nat:4> + <var:q> * <var:J> $ toward $ <var:q>$ . This advances $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:4> \} $ . This is rigorously given with the assignment inference rule of Hoare logic . Advancing to the next step , we see the variable update command \verb | <var:q> := <nat:1> + <var:q> * <var:J> | . This takes the precondition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:4> \} $ as the condition $ \{ <var:J> = <var:u> \land <var:q> = <nat:2> \cdot <var:u> ^ <nat:6> + <nat:4> \cdot <var:u> ^ <nat:5> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:1> \} $ . This is guaranteed with the assignment law given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:J> = <var:u> }} <var:q> := <nat:2> ; <var:q> := <nat:4> + <var:q> * <var:J> ; <var:q> := <var:q> * <var:J> ; <var:q> := <nat:1> + <var:q> * <var:J> ; <var:q> := <nat:3> + <var:q> * <var:J> ; <var:q> := <nat:4> + <var:q> * <var:J> ; <var:q> := <nat:1> + <var:q> * <var:J> {{ <var:q> = <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:q> = <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 