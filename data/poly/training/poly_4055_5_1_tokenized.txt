\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:q> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:1> ; <var:Z> := <var:W1> <var:Z> := <var:Z> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:q> = <var:O> $ prior to the evaluation of the list of commands , it follows that we see $ <var:Z> = <nat:1> \times <var:O> + <nat:3> $ once segment of code finishes . \end{theorem} \begin{proof} The course of logic for our segment of code can be demonstrated using typical Hoare logic . Focusing on the subsequent commands seen in the set of commands , we have \begin{verbatim} { <var:q> = <var:O> } <var:W1> := <var:q> { <var:q> = <var:O> \land <var:W1> = <var:O> } { <var:q> = <var:O> \land <var:W1> = <var:O> } <var:W0> := <nat:3> { <var:q> = <var:O> \land <var:W1> = <var:O> \land <var:W0> = <nat:3> } \end{verbatim} This is rigorously given by the variable assignmet rule defined in standard Hoare techniques . Going forward , we see \begin{verbatim} { <var:q> = <var:O> } <var:W1> := <var:q> { <var:q> = <var:O> \land <var:W1> = <var:O> } { <var:q> = <var:O> \land <var:W1> = <var:O> } <var:W0> := <nat:3> { <var:q> = <var:O> \land <var:W1> = <var:O> \land <var:W0> = <nat:3> } \end{verbatim} This is deduced through the variable update law defined in usual Hoare reasoning . Considering the following piece of code in the code , \begin{verbatim} { <var:q> = <var:O> } <var:W1> := <var:q> { <var:q> = <var:O> \land <var:W1> = <var:O> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:q> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:1> ; <var:Z> := <var:W1> <var:Z> := <var:Z> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:q> = <var:O> }} <def:poly> {{ <var:Z> = <nat:1> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:W1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:W1> = <var:O> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:W1> = <nat:1> * <var:O> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:W0> = <nat:3> /\ <var:Z> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:Z> = <nat:1> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 