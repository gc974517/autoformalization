\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z> := <nat:1> ; <var:z> := <nat:4> + <var:z> * <var:m> ; <var:z> := <var:z> * <var:m> ; <var:z> := <nat:2> + <var:z> * <var:m> ; <var:z> := <nat:2> + <var:z> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:m> = <var:L> $ ahead of interpreting the segment of code then $ <var:z> = <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:2> $ after code segment exits . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is accomplished by Hoare reasoning . Paying attention to the proceeding line seen in our program , the binding line defining $ <nat:1> $ to $ <var:z>$ . This code transfers the precondition $ \{ <var:m> = <var:L> \} $ toward $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \} $ . Further , we have the environment update statement \verb | <var:z> := <nat:4> + <var:z> * <var:m> ; | . This statement transfers the condition $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \} $ to the condition $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> + <nat:4> \} $ . This is given by the assignment rule defined in Hoare logic . After , we have the variable assignmet code \verb | <var:z> := <var:z> * <var:m> ; | . This advances the condition $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> + <nat:4> \} $ to $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + \} $ . This is given with the assignment scheme defined by standard Hoare logic . Now , we see the variable assignmet code \verb | <var:z> := <nat:2> + <var:z> * <var:m> ; | . This line advances the precondition $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + \} $ toward $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:2> \} $ . This is guaranteed by the assignment rule from standard Hoare techniques . Stepping through , the assignment code \verb | <var:z> := <nat:2> + <var:z> * <var:m> | . This code moves $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:2> \} $ toward the condition $ \{ <var:m> = <var:L> \land <var:z> = <nat:1> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:1> ; <var:z> := <nat:4> + <var:z> * <var:m> ; <var:z> := <var:z> * <var:m> ; <var:z> := <nat:2> + <var:z> * <var:m> ; <var:z> := <nat:2> + <var:z> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:m> = <var:L> }} <def:poly> {{ <var:z> = <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:z> = <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:z> = <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:z> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:z> = <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 