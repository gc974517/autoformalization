\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:3> ; <var:i> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Assume that $ <var:g> = <var:z> $ prior to evaluating the code , it must be that we see $ <var:i> = <nat:3> $ after program has terminated . \end{theorem} \begin{proof} The proof of our list of commands is demonstrated through typical Hoare logic . Shifting focus toward the following command seen in our code segment , \verb | { <var:g> = <var:z> } <var:S0> := <nat:3> { <var:g> = <var:z> \land <var:S0> = <nat:3> } | . This is sound through the variable binding inference rule defined in usual Hoare reasoning . Going to the next step , we see \verb | { <var:g> = <var:z> } <var:S0> := <nat:3> { <var:g> = <var:z> \land <var:S0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:3> ; <var:i> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:g> = <var:z> }} <def:poly> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 