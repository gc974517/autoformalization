\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:d> ; <var:U> := <var:b1> ; <var:U> := <var:U> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Allow that $ <var:d> = <var:k> $ , given some integers $ <var:k> $ , ahead of the execution of the series of commands , then $ <var:U> = <nat:3> * <var:k> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands is evident through usual Hoare logic . Moving forward to the next step , the command \verb | <var:b0> := <nat:4> ; | . This forwards $ \{ <var:d> = <var:k> \} $ toward $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \} $ . This is shown through the assignment law obtained from standard Hoare logic . Shifting focus toward the following statement contained in our code , we have the assignment statement \verb | <var:b1> := <nat:3> ; | . This command redefines the precondition $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \} $ into the postcondition $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \} $ . This is shown to be logically sound through the assignment scheme from standard Hoare techniques . Moving forward to the upcoming bit of code contained in the code segment , we have the line \verb | <var:b1> := <var:b1> * <var:d> ; | . This statement transfers $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \} $ as $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \cdot <var:k> \} $ . This is sound using the assignment law given by standard Hoare reasoning . Now , we have the line \verb | <var:U> := <var:b1> ; | . This advances $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \cdot <var:k> \} $ into $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \land <var:U> = <nat:3> \cdot <var:k> \} $ . This is deduced through the assignment inference rule in standard Hoare reasoning . Moving onward , the variable binding command \verb | <var:U> := <var:U> + <var:b0> | . This redefines the condition $ \{ <var:d> = <var:k> \land <var:b0> = <nat:4> \land <var:U> = <nat:3> \cdot <var:k> \} $ toward $ \{ <var:d> = <var:k> \land <var:U> = <nat:3> \cdot <var:k> + <nat:4> \} $ . This is guaranteed through the assignment rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:d> ; <var:U> := <var:b1> ; <var:U> := <var:U> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:d> = <var:k> }} <def:poly> {{ <var:U> = <nat:3> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:b0> = <nat:4> /\ <var:U> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:U> = <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 