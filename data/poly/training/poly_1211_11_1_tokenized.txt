\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:F1> := <var:X> ; <var:F2> := <var:F1> * <var:X> ; <var:F3> := <var:F2> * <var:X> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:5> ; <var:F2> := <var:F2> * <nat:5> ; <var:F3> := <var:F3> * <nat:2> ; <var:Q> := <var:F3> <var:Q> := <var:Q> + <var:F2> <var:Q> := <var:Q> + <var:F1> <var:Q> := <var:Q> + <var:F0> \end{verbatim} Allow $ <var:X> = <var:B> $ ( for any natural coefficients $ <var:B> $ ) before interpreting the segment of code it must be that $ <var:Q> = <nat:2> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> + <nat:1> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The method of proof for this set of instructions can be done by usual Hoare reasoning . Taking another step toward the subsequent command found in our list of commands , we see the command \verb | <var:F1> := <var:X> ; | . This command moves the condition $ \{ <var:X> = <var:B> \} $ toward the condition $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \} $ . Taking another step toward the next piece of code found in our list of instructions , we have the variable binding code \verb | <var:F2> := <var:F1> * <var:X> ; | . This takes $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \} $ as $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \} $ . This is deduced with the assignment law from usual Hoare logic . Looking at the subsequent piece of code found in our set of instructions , we see the variable binding command \verb | <var:F3> := <var:F2> * <var:X> ; | . This moves the condition $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \} $ into the condition $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \} $ . Moving on , we see the code giving $ <nat:1> $ to $ <var:F0>$ . This statement redefines the precondition $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \} $ into the postcondition $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ . This is shown by the assignment law defined by typical Hoare reasoning . Moving forward , we see the line defining $ <var:F1> * <nat:5> $ to $ <var:F1>$ . This code transfers the precondition $ \{ <var:X> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ into $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ . Next , we have the binding command \verb | <var:F2> := <var:F2> * <nat:5> ; | . This statement transfers the condition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ toward $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <nat:5> \times <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ . Moving forward to the following line in our list of commands , we see the environment update line \verb | <var:F3> := <var:F3> * <nat:2> ; | . This code advances the precondition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <nat:5> \times <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ into the condition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <nat:5> \times <var:B> ^ <nat:2> \land <var:F3> = <nat:2> \times <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ . This is deduced with the assignment scheme obtained from typical Hoare reasoning . Observing the proceeding line of code in our series of commands , we have the assignment command defining $ <var:F3$ as $ <var:Q>$ . This forwards $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <nat:5> \times <var:B> ^ <nat:2> \land <var:F3> = <nat:2> \times <var:B> ^ <nat:3> \land <var:F0> = <nat:1> \} $ into the condition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <nat:5> \times <var:B> ^ <nat:2> \land <var:F0> = <nat:1> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> \} $ . Taking a look at the upcoming piece of code contained in our set of instructions , we see the command giving $ <var:Q> + <var:F2$ into $ <var:Q>$ . This command redefines the condition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F2> = <nat:5> \times <var:B> ^ <nat:2> \land <var:F0> = <nat:1> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> \} $ as the postcondition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F0> = <nat:1> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme found in standard Hoare reasoning . Advancing to the next step , we have the variable binding command \verb | <var:Q> := <var:Q> + <var:F1> | . This line forwards the precondition $ \{ <var:X> = <var:B> \land <var:F1> = <nat:5> \times <var:B> \land <var:F0> = <nat:1> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:B> \land <var:F0> = <nat:1> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> \} $ . Immediately after , the assignment statement defining $ <var:Q> + <var:F0$ toward $ <var:Q>$ . This forwards the condition $ \{ <var:X> = <var:B> \land <var:F0> = <nat:1> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> \} $ into the postcondition $ \{ <var:X> = <var:B> \land <var:Q> = <nat:2> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> + <nat:1> \} $ . This is shown by the assignment scheme in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:X> = <var:B> }} <var:F1> := <var:X> ; <var:F2> := <var:F1> * <var:X> ; <var:F3> := <var:F2> * <var:X> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:5> ; <var:F2> := <var:F2> * <nat:5> ; <var:F3> := <var:F3> * <nat:2> ; <var:Q> := <var:F3> <var:Q> := <var:Q> + <var:F2> <var:Q> := <var:Q> + <var:F1> <var:Q> := <var:Q> + <var:F0> {{ <var:Q> = <nat:2> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <var:B> /\ <var:F2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <var:B> /\ <var:F2> = <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <var:B> /\ <var:F2> = <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <nat:5> * <var:B> /\ <var:F2> = <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <nat:5> * <var:B> /\ <var:F2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <nat:5> * <var:B> /\ <var:F2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:F3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <nat:5> * <var:B> /\ <var:F2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:F0> = <nat:1> /\ <var:Q> = <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F1> = <nat:5> * <var:B> /\ <var:F0> = <nat:1> /\ <var:Q> = <nat:2> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:F0> = <nat:1> /\ <var:Q> = <nat:2> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:Q> = <nat:2> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 