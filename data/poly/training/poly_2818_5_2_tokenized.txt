\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:4> + <var:r> * <var:l> ; <var:r> := <nat:4> + <var:r> * <var:l> ; <var:r> := <nat:4> + <var:r> * <var:l> ; <var:r> := <nat:2> + <var:r> * <var:l> \end{verbatim} Allowing $ <var:l> = <var:c> $ with some natural numbers $ <var:c> $ ahead of evaluating this series of commands then we have $ <var:r> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> $ when program has executed . \end{theorem} \begin{proof} Observe the below decorated list of instructions . \begin{eqnarray} \{ <var:l> = <var:c> \} \\ <var:r> := <nat:2> ; \\ \{ <var:l> = <var:c> \land <var:r> = <nat:2> \} \\ <var:r> := <nat:4> + <var:r> * <var:l> ; \\ \{ <var:l> = <var:c> \land <var:r> = <nat:2> \times <var:c> + <nat:4> \} \\ <var:r> := <nat:4> + <var:r> * <var:l> ; \\ \{ <var:l> = <var:c> \land <var:r> = <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:4> \} \\ <var:r> := <nat:4> + <var:r> * <var:l> ; \\ \{ <var:l> = <var:c> \land <var:r> = <nat:2> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:4> \} \\ <var:r> := <nat:2> + <var:r> * <var:l> \\ \{ <var:l> = <var:c> \land <var:r> = <nat:2> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:l> = <var:c> }} <var:r> := <nat:2> ; <var:r> := <nat:4> + <var:r> * <var:l> ; <var:r> := <nat:4> + <var:r> * <var:l> ; <var:r> := <nat:4> + <var:r> * <var:l> ; <var:r> := <nat:2> + <var:r> * <var:l> {{ <var:r> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:r> = <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:r> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:r> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:r> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 