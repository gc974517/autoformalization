\begin{document} \begin{theorem} Define a code segment as \begin{verbatim} <var:N1> := <var:n> ; <var:N2> := <var:N1> * <var:n> ; <var:N3> := <var:N2> * <var:n> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:7> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:7> ; <var:G> := <var:N3> <var:G> := <var:G> + <var:N2> <var:G> := <var:G> + <var:N1> <var:G> := <var:G> + <var:N0> \end{verbatim} Assume ( for every positive coefficients $ <var:R> $ ) that $ <var:n> = <var:R> $ before executing this segment of code , then we have $ <var:G> = <nat:7> \cdot <var:R> ^ <nat:3> + <nat:7> \cdot <var:R> ^ <nat:2> + <nat:7> \cdot <var:R> + <nat:9> $ . \end{theorem} \begin{proof} Observe the following decorated code segment . \begin{eqnarray} \{ <var:n> = <var:R> \} \\ <var:N1> := <var:n> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <var:R> \} \\ <var:N2> := <var:N1> * <var:n> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:n> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:9> \} \\ <var:N1> := <var:N1> * <nat:7> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <nat:7> * <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:9> \} \\ <var:N2> := <var:N2> * <nat:7> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <nat:7> * <var:R> \land <var:N2> = <nat:7> * <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:9> \} \\ <var:N3> := <var:N3> * <nat:7> ; \\ \{ <var:n> = <var:R> \land <var:N1> = <nat:7> * <var:R> \land <var:N2> = <nat:7> * <var:R> ^ <nat:2> \land <var:N3> = <nat:7> * <var:R> ^ <nat:3> \land <var:N0> = <nat:9> \} \\ <var:G> := <var:N3> \\ \{ <var:n> = <var:R> \land <var:N1> = <nat:7> * <var:R> \land <var:N2> = <nat:7> * <var:R> ^ <nat:2> \land <var:N0> = <nat:9> \land <var:G> = <nat:7> * <var:R> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:N2> \\ \{ <var:n> = <var:R> \land <var:N1> = <nat:7> * <var:R> \land <var:N0> = <nat:9> \land <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:N1> \\ \{ <var:n> = <var:R> \land <var:N0> = <nat:9> \land <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> + <nat:7> * <var:R> \} \\ <var:G> := <var:G> + <var:N0> \\ \{ <var:n> = <var:R> \land <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:n> = <var:R> }} <var:N1> := <var:n> ; <var:N2> := <var:N1> * <var:n> ; <var:N3> := <var:N2> * <var:n> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:7> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:7> ; <var:G> := <var:N3> <var:G> := <var:G> + <var:N2> <var:G> := <var:G> + <var:N1> <var:G> := <var:G> + <var:N0> {{ <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <var:R> /\ <var:N2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <var:R> /\ <var:N2> = <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <var:R> /\ <var:N2> = <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <nat:7> * <var:R> /\ <var:N2> = <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <nat:7> * <var:R> /\ <var:N2> = <nat:7> * <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <nat:7> * <var:R> /\ <var:N2> = <nat:7> * <var:R> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:R> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <nat:7> * <var:R> /\ <var:N2> = <nat:7> * <var:R> ^ <nat:2> /\ <var:N0> = <nat:9> /\ <var:G> = <nat:7> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N1> = <nat:7> * <var:R> /\ <var:N0> = <nat:9> /\ <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:N0> = <nat:9> /\ <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> + <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:G> = <nat:7> * <var:R> ^ <nat:3> + <nat:7> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 