\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} : \begin{verbatim} <var:O1> := <var:K> ; <var:O2> := <var:O1> * <var:K> ; <var:O3> := <var:O2> * <var:K> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:4> ; <var:O2> := <var:O2> * <nat:8> ; <var:O3> := <var:O3> * <nat:7> ; <var:I> := <var:O3> <var:I> := <var:I> + <var:O2> <var:I> := <var:I> + <var:O1> <var:I> := <var:I> + <var:O0> \end{verbatim} Allowing $ <var:K> = <var:i> $ prior to the execution of our code , then we see $ <var:I> = <nat:7> \cdot <var:i> ^ <nat:3> + <nat:8> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:3> $ after set of commands terminates . \end{theorem} \begin{proof} The proof of our list of instructions is done by the following decorated list of instructions . \begin{eqnarray} \{ <var:K> = <var:i> \} \\ <var:O1> := <var:K> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <var:i> \} \\ <var:O2> := <var:O1> * <var:K> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <var:i> \land <var:O2> = <var:i> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:K> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <var:i> \land <var:O2> = <var:i> ^ <nat:2> \land <var:O3> = <var:i> ^ <nat:3> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <var:i> \land <var:O2> = <var:i> ^ <nat:2> \land <var:O3> = <var:i> ^ <nat:3> \land <var:O0> = <nat:3> \} \\ <var:O1> := <var:O1> * <nat:4> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <nat:4> \cdot <var:i> \land <var:O2> = <var:i> ^ <nat:2> \land <var:O3> = <var:i> ^ <nat:3> \land <var:O0> = <nat:3> \} \\ <var:O2> := <var:O2> * <nat:8> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <nat:4> \cdot <var:i> \land <var:O2> = <nat:8> \cdot <var:i> ^ <nat:2> \land <var:O3> = <var:i> ^ <nat:3> \land <var:O0> = <nat:3> \} \\ <var:O3> := <var:O3> * <nat:7> ; \\ \{ <var:K> = <var:i> \land <var:O1> = <nat:4> \cdot <var:i> \land <var:O2> = <nat:8> \cdot <var:i> ^ <nat:2> \land <var:O3> = <nat:7> \cdot <var:i> ^ <nat:3> \land <var:O0> = <nat:3> \} \\ <var:I> := <var:O3> \\ \{ <var:K> = <var:i> \land <var:O1> = <nat:4> \cdot <var:i> \land <var:O2> = <nat:8> \cdot <var:i> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:I> = <nat:7> \cdot <var:i> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:O2> \\ \{ <var:K> = <var:i> \land <var:O1> = <nat:4> \cdot <var:i> \land <var:O0> = <nat:3> \land <var:I> = <nat:7> \cdot <var:i> ^ <nat:3> + <nat:8> \cdot <var:i> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:O1> \\ \{ <var:K> = <var:i> \land <var:O0> = <nat:3> \land <var:I> = <nat:7> \cdot <var:i> ^ <nat:3> + <nat:8> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> \} \\ <var:I> := <var:I> + <var:O0> \\ \{ <var:K> = <var:i> \land <var:I> = <nat:7> \cdot <var:i> ^ <nat:3> + <nat:8> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:K> = <var:i> }} <var:O1> := <var:K> ; <var:O2> := <var:O1> * <var:K> ; <var:O3> := <var:O2> * <var:K> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:4> ; <var:O2> := <var:O2> * <nat:8> ; <var:O3> := <var:O3> * <nat:7> ; <var:I> := <var:O3> <var:I> := <var:I> + <var:O2> <var:I> := <var:I> + <var:O1> <var:I> := <var:I> + <var:O0> {{ <var:I> = <nat:7> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <var:i> /\ <var:O2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <var:i> /\ <var:O2> = <var:i> ^ <nat:2> /\ <var:O3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <var:i> /\ <var:O2> = <var:i> ^ <nat:2> /\ <var:O3> = <var:i> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <nat:4> * <var:i> /\ <var:O2> = <var:i> ^ <nat:2> /\ <var:O3> = <var:i> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <nat:4> * <var:i> /\ <var:O2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:O3> = <var:i> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <nat:4> * <var:i> /\ <var:O2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:i> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <nat:4> * <var:i> /\ <var:O2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:O0> = <nat:3> /\ <var:I> = <nat:7> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O1> = <nat:4> * <var:i> /\ <var:O0> = <nat:3> /\ <var:I> = <nat:7> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:O0> = <nat:3> /\ <var:I> = <nat:7> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:i> /\ <var:I> = <nat:7> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 