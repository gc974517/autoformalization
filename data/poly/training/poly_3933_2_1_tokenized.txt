\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:4> ; <var:m> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:w> = <var:M> $ ( with some integers $ <var:M> $ ) ahead of the evaluation of the series of instructions , then we see $ <var:m> = <nat:4> $ once segment of code has finished . \end{theorem} \begin{proof} The course of logic for the code can be demonstrated with Hoare logic . Following , we have \begin{eqnarray} \{ <var:w> = <var:M> \} \, <var:j0> := <nat:4> \, \{ <var:w> = <var:M> \land <var:j0> = <nat:4> \} \end{eqnarray} Moving on to the next step , we see \begin{eqnarray} \{ <var:w> = <var:M> \} \, <var:j0> := <nat:4> \, \{ <var:w> = <var:M> \land <var:j0> = <nat:4> \} \end{eqnarray} This is given with the environment update scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:m> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:w> = <var:M> }} <def:poly> {{ <var:m> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:m> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 