\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:x> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:x> ; <var:w2> := <var:w2> * <var:x> ; <var:p> := <var:w2> ; <var:p> := <var:p> + <var:w1> ; <var:p> := <var:p> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:x> = <var:N> $ before the execution of this set of commands , it holds that we have $ <var:p> = <nat:8> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:x> = <var:N> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:3> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \} \\ <var:w1> := <var:w1> * <var:x> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> * <var:N> \} \\ <var:w2> := <nat:8> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> * <var:N> \land <var:w2> = <nat:8> \} \\ <var:w2> := <var:w2> * <var:x> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> * <var:N> \land <var:w2> = <nat:8> * <var:N> \} \end{eqnarray} Furthering evaluating our list of commands gives us : \begin{eqnarray} <var:w2> := <var:w2> * <var:x> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> * <var:N> \land <var:w2> = <nat:8> * <var:N> ^ <nat:2> \} \\ <var:p> := <var:w2> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> * <var:N> \land <var:p> = <nat:8> * <var:N> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:w1> ; \\ \{ <var:x> = <var:N> \land <var:w0> = <nat:1> \land <var:p> = <nat:8> * <var:N> ^ <nat:2> + <nat:3> * <var:N> \} \\ <var:p> := <var:p> + <var:w0> \\ \{ <var:x> = <var:N> \land <var:p> = <nat:8> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> \} \end{eqnarray} As a consequence , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:x> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:x> ; <var:w2> := <var:w2> * <var:x> ; <var:p> := <var:w2> ; <var:p> := <var:p> + <var:w1> ; <var:p> := <var:p> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:x> = <var:N> }} <def:poly> {{ <var:p> = <nat:8> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:N> /\ <var:w2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:N> /\ <var:w2> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:N> /\ <var:w2> = <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:N> /\ <var:p> = <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:w0> = <nat:1> /\ <var:p> = <nat:8> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:p> = <nat:8> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 