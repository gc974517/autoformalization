\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:W0> := <nat:5> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:R> ; <var:F> := <var:W1> ; <var:F> := <var:F> + <var:W0> \end{verbatim} Allow that we have $ <var:R> = <var:a> $ before interpreting this series of commands , it must be that we have $ <var:F> = <nat:6> \times <var:a> + <nat:5> $ after segment of code has executed . \end{theorem} \begin{proof} The way to prove correctness for our program can be done through usual Hoare logic . Advancing , \begin{eqnarray} \{ <var:R> = <var:a> \} \, <var:W0> := <nat:5> \, \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \} \end{eqnarray} This is known to be sound using the binding rule of Hoare reasoning . Moving on to the subsequent lines found in our list of commands , \begin{eqnarray} \{ <var:R> = <var:a> \} \, <var:W0> := <nat:5> \, \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \} \\ \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \} \, <var:W1> := <nat:6> \, \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \land <var:W1> = <nat:6> \} \\ \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \land <var:W1> = <nat:6> \} \, <var:W1> := <var:W1> * <var:R> \, \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \land <var:W1> = <nat:6> \cdot <var:a> \} \\ \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \land <var:W1> = <nat:6> \cdot <var:a> \} \, <var:F> := <var:W1> \, \{ <var:R> = <var:a> \land <var:W0> = <nat:5> \land <var:F> = <nat:6> \cdot <var:a> \} \end{eqnarray} This is sound by the variable binding scheme of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:R> = <var:a> }} <var:W0> := <nat:5> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:R> ; <var:F> := <var:W1> ; <var:F> := <var:F> + <var:W0> {{ <var:F> = <nat:6> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:W0> = <nat:5> /\ <var:F> = <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:F> = <nat:6> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 