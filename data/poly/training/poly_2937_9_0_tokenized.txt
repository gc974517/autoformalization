\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:l0> := <nat:8> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:i> ; <var:l2> := <nat:9> ; <var:l2> := <var:l2> * <var:i> ; <var:l2> := <var:l2> * <var:i> ; <var:q> := <var:l2> ; <var:q> := <var:q> + <var:l1> ; <var:q> := <var:q> + <var:l0> \end{verbatim} Assuming --- letting positive numbers $ <var:T> $ --- that $ <var:i> = <var:T> $ prior to executing our series of instructions then we have $ <var:q> = <nat:9> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is given with standard Hoare techniques . Moving forward , we have the variable update statement binding $ <nat:8> $ as $ <var:l0>$ . This code moves the precondition $ \{ <var:i> = <var:T> \} $ as the postcondition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \} $ . Moving on to the upcoming piece of code contained in our code , the variable assignmet line giving $ <nat:9> $ as $ <var:l1>$ . This moves $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \} $ to the postcondition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \} $ . This is sound by the assignment rule in standard Hoare reasoning . Moving onward , we see the command letting $ <var:l1> * <var:i> $ into $ <var:l1>$ . This transfers the condition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \} $ to the postcondition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \} $ . Moving forward , the variable binding statement \verb | <var:l2> := <nat:9> ; | . This statement advances the condition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \} $ to $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:l2> = <nat:9> \} $ . This is known to be sound by the assignment law given by typical Hoare techniques . Paying attention to the subsequent piece of code seen in our series of commands , we see the variable assignmet command letting $ <var:l2> * <var:i> $ as $ <var:l2>$ . This line transfers $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:l2> = <nat:9> \} $ into the postcondition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:l2> = <nat:9> \cdot <var:T> \} $ . Now , we see the variable update command assigning $ <var:l2> * <var:i> $ to $ <var:l2>$ . This redefines the condition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:l2> = <nat:9> \cdot <var:T> \} $ as the postcondition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:l2> = <nat:9> \cdot <var:T> ^ <nat:2> \} $ . This is guaranteed with the assignment scheme given by Hoare reasoning . Paying attention to the proceeding step in our program , we have the environment update statement defining $ <var:l2> $ to $ <var:q>$ . This takes the condition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:l2> = <nat:9> \cdot <var:T> ^ <nat:2> \} $ to $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:q> = <nat:9> \cdot <var:T> ^ <nat:2> \} $ . This is guaranteed with the assignment law from typical Hoare techniques . Advancing to the next statement found in our segment of code , the variable update code \verb | <var:q> := <var:q> + <var:l1> ; | . This forwards the precondition $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:l1> = <nat:9> \cdot <var:T> \land <var:q> = <nat:9> \cdot <var:T> ^ <nat:2> \} $ to $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:q> = <nat:9> \cdot <var:T> ^ <nat:2> + <nat:9> \cdot <var:T> \} $ . Following , we have the environment update command \verb | <var:q> := <var:q> + <var:l0> | . This line forwards $ \{ <var:i> = <var:T> \land <var:l0> = <nat:8> \land <var:q> = <nat:9> \cdot <var:T> ^ <nat:2> + <nat:9> \cdot <var:T> \} $ to the condition $ \{ <var:i> = <var:T> \land <var:q> = <nat:9> \cdot <var:T> ^ <nat:2> + <nat:9> \cdot <var:T> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:i> = <var:T> }} <var:l0> := <nat:8> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:i> ; <var:l2> := <nat:9> ; <var:l2> := <var:l2> * <var:i> ; <var:l2> := <var:l2> * <var:i> ; <var:q> := <var:l2> ; <var:q> := <var:q> + <var:l1> ; <var:q> := <var:q> + <var:l0> {{ <var:q> = <nat:9> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:9> * <var:T> /\ <var:l2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:9> * <var:T> /\ <var:l2> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:9> * <var:T> /\ <var:l2> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:9> * <var:T> /\ <var:q> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:l0> = <nat:8> /\ <var:q> = <nat:9> * <var:T> ^ <nat:2> + <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:q> = <nat:9> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 