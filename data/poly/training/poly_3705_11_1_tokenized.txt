\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:B1> := <var:J> ; <var:B2> := <var:B1> * <var:J> ; <var:B3> := <var:B2> * <var:J> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:5> ; <var:B3> := <var:B3> * <nat:3> ; <var:o> := <var:B3> <var:o> := <var:o> + <var:B2> <var:o> := <var:o> + <var:B1> <var:o> := <var:o> + <var:B0> \end{verbatim} Given --- for any positive integer coefficients $ <var:M> $ --- it to hold that $ <var:J> = <var:M> $ ahead of the evaluation of the code segment it follows that we see $ <var:o> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:5> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:6> $ once series of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be seen through usual Hoare reasoning . Advancing to the proceeding line of code found in our program , we have the assignment command letting $ <var:J> $ toward $ <var:B1>$ . This statement moves the condition $ \{ <var:J> = <var:M> \} $ toward $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \} $ . Focusing on the proceeding line of code found in the list of instructions , we see the line \verb | <var:B2> := <var:B1> * <var:J> ; | . This takes the precondition $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \} $ to the condition $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \land <var:B2> = <var:M> ^ <nat:2> \} $ . Taking another step toward the subsequent statement in the segment of code , we see the binding command defining $ <var:B2> * <var:J> $ as $ <var:B3>$ . This statement moves the precondition $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \land <var:B2> = <var:M> ^ <nat:2> \} $ into the condition $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \land <var:B2> = <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \} $ . This is known to be sound using the assignment rule found in Hoare techniques . After , we have the binding command letting $ <nat:6> $ to $ <var:B0>$ . This transfers $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \land <var:B2> = <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \} $ into $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \land <var:B2> = <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ . Moving on , we have the variable binding line \verb | <var:B1> := <var:B1> * <nat:2> ; | . This code advances $ \{ <var:J> = <var:M> \land <var:B1> = <var:M> \land <var:B2> = <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ to $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ . This is deduced through the assignment inference rule given by typical Hoare reasoning . Stepping through , we have the variable update command \verb | <var:B2> := <var:B2> * <nat:5> ; | . This takes the precondition $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ as the condition $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ . This is ensured by the assignment rule obtained from typical Hoare techniques . Advancing to the proceeding statement contained in the code , we see the binding command \verb | <var:B3> := <var:B3> * <nat:3> ; | . This advances $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:B3> = <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ as the postcondition $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:B3> = <nat:3> \times <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ . Following , we see the variable assignmet command binding $ <var:B3$ toward $ <var:o>$ . This line transfers $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:B3> = <nat:3> \times <var:M> ^ <nat:3> \land <var:B0> = <nat:6> \} $ to the postcondition $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:B0> = <nat:6> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> \} $ . Taking another step toward the next line in the series of commands , we see the environment update statement \verb | <var:o> := <var:o> + <var:B2> | . This command redefines $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B2> = <nat:5> \times <var:M> ^ <nat:2> \land <var:B0> = <nat:6> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> \} $ to $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B0> = <nat:6> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> \} $ . This is given using the assignment rule from standard Hoare techniques . Taking another step toward the proceeding line found in our segment of code , we see the binding command \verb | <var:o> := <var:o> + <var:B1> | . This command transfers the precondition $ \{ <var:J> = <var:M> \land <var:B1> = <nat:2> \times <var:M> \land <var:B0> = <nat:6> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> \} $ to the condition $ \{ <var:J> = <var:M> \land <var:B0> = <nat:6> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> \} $ . This is known to be sound using the assignment law in usual Hoare logic . Moving forward to the following line seen in our list of instructions , we see the assignment code \verb | <var:o> := <var:o> + <var:B0> | . This takes the precondition $ \{ <var:J> = <var:M> \land <var:B0> = <nat:6> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> \} $ as the condition $ \{ <var:J> = <var:M> \land <var:o> = <nat:3> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <var:B1> := <var:J> ; <var:B2> := <var:B1> * <var:J> ; <var:B3> := <var:B2> * <var:J> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:5> ; <var:B3> := <var:B3> * <nat:3> ; <var:o> := <var:B3> <var:o> := <var:o> + <var:B2> <var:o> := <var:o> + <var:B1> <var:o> := <var:o> + <var:B0> {{ <var:o> = <nat:3> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <var:M> /\ <var:B2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <var:M> /\ <var:B2> = <var:M> ^ <nat:2> /\ <var:B3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <var:M> /\ <var:B2> = <var:M> ^ <nat:2> /\ <var:B3> = <var:M> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <nat:2> * <var:M> /\ <var:B2> = <var:M> ^ <nat:2> /\ <var:B3> = <var:M> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <nat:2> * <var:M> /\ <var:B2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:B3> = <var:M> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <nat:2> * <var:M> /\ <var:B2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:M> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <nat:2> * <var:M> /\ <var:B2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:B0> = <nat:6> /\ <var:o> = <nat:3> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B1> = <nat:2> * <var:M> /\ <var:B0> = <nat:6> /\ <var:o> = <nat:3> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:B0> = <nat:6> /\ <var:o> = <nat:3> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:o> = <nat:3> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 