\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} : \begin{verbatim} <var:O1> := <var:I> ; <var:O2> := <var:O1> * <var:I> ; <var:O3> := <var:O2> * <var:I> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:1> ; <var:O3> := <var:O3> * <nat:5> ; <var:u> := <var:O3> <var:u> := <var:u> + <var:O2> <var:u> := <var:u> + <var:O1> <var:u> := <var:u> + <var:O0> \end{verbatim} Assume it to hold that $ <var:I> = <var:l> $ before evaluating the list of commands , it follows that we have $ <var:u> = <nat:5> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> + <nat:6> $ when list of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is done with typical Hoare reasoning . Shifting focus toward the subsequent line found in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:l> \} & <var:O1> := <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \} \end{tabular} Taking a look at the next lines of codecontained in our program , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:l> \} & <var:O1> := <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <var:l> \} & <var:O2> := <var:O1> * <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \} & <var:O3> := <var:O2> * <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \} & <var:O0> := <nat:6> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} & <var:O1> := <var:O1> * <nat:5> & \{ <var:I> = <var:l> \land <var:O1> = <nat:5> * <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <nat:5> * <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} & <var:O2> := <var:O2> * <nat:1> & \{ <var:I> = <var:l> \land <var:O1> = <nat:5> * <var:l> \land <var:O2> = <nat:1> * <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <nat:5> * <var:l> \land <var:O2> = <nat:1> * <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} & <var:O3> := <var:O3> * <nat:5> & \{ <var:I> = <var:l> \land <var:O1> = <nat:5> * <var:l> \land <var:O2> = <nat:1> * <var:l> ^ <nat:2> \land <var:O3> = <nat:5> * <var:l> ^ <nat:3> \land <var:O0> = <nat:6> \} \end{tabular} Moving on to the upcoming steps contained in the program , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:l> \} & <var:O1> := <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <var:l> \} & <var:O2> := <var:O1> * <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \} \\ \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \} & <var:O3> := <var:O2> * <var:I> & \{ <var:I> = <var:l> \land <var:O1> = <var:l> \land <var:O2> = <var:l> ^ <nat:2> \land <var:O3> = <var:l> ^ <nat:3> \} \end{tabular} This is known to be sound by the rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:I> = <var:l> }} <var:O1> := <var:I> ; <var:O2> := <var:O1> * <var:I> ; <var:O3> := <var:O2> * <var:I> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:1> ; <var:O3> := <var:O3> * <nat:5> ; <var:u> := <var:O3> <var:u> := <var:u> + <var:O2> <var:u> := <var:u> + <var:O1> <var:u> := <var:u> + <var:O0> {{ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <var:l> /\ <var:O2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <var:l> /\ <var:O2> = <var:l> ^ <nat:2> /\ <var:O3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <var:l> /\ <var:O2> = <var:l> ^ <nat:2> /\ <var:O3> = <var:l> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <nat:5> * <var:l> /\ <var:O2> = <var:l> ^ <nat:2> /\ <var:O3> = <var:l> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <nat:5> * <var:l> /\ <var:O2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:O3> = <var:l> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <nat:5> * <var:l> /\ <var:O2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:l> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <nat:5> * <var:l> /\ <var:O2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:O0> = <nat:6> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O1> = <nat:5> * <var:l> /\ <var:O0> = <nat:6> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:O0> = <nat:6> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 