\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:1> ; <var:f> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allow --- assuming some positive coefficients $ <var:s> $ --- that $ <var:Y> = <var:s> $ ahead of evaluating the list of instructions then we see $ <var:f> = <nat:1> $ once code segment has finished executing . \end{theorem} \begin{proof} Notice the following decorated set of instructions . \begin{eqnarray} \{ <var:Y> = <var:s> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:Y> = <var:s> \land <var:o0> = <nat:1> \} \\ <var:f> := <var:o0> \\ \{ <var:Y> = <var:s> \land <var:f> = <nat:1> \} \end{eqnarray} Using Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:1> ; <var:f> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Y> = <var:s> }} <def:poly> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 