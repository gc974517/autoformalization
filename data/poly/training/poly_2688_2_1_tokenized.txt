\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:D0> := <nat:8> ; <var:C> := <var:D0> \end{verbatim} Given that we have $ <var:y> = <var:A> $ prior to running the code then we see $ <var:C> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:A> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:y> = <var:A> \land <var:D0> = <nat:8> \} \\ <var:C> := <var:D0> \\ \{ <var:y> = <var:A> \land <var:C> = <nat:8> \} \end{eqnarray} Applying Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:y> = <var:A> }} <var:D0> := <nat:8> ; <var:C> := <var:D0> {{ <var:C> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:C> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 