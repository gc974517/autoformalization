\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:e> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:2> ; <var:h> := <var:w1> <var:h> := <var:h> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:e> = <var:Y> $ prior to interpreting our code segment then we have $ <var:h> = <nat:2> \times <var:Y> + <nat:2> $ after list of commands terminates . \end{theorem} \begin{proof} The argument for our set of commands can be given by the following decorated series of commands . \begin{eqnarray} \{ <var:e> = <var:Y> \} \\ <var:w1> := <var:e> ; \\ \{ <var:e> = <var:Y> \land <var:w1> = <var:Y> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:e> = <var:Y> \land <var:w1> = <var:Y> \land <var:w0> = <nat:2> \} \\ <var:w1> := <var:w1> * <nat:2> ; \\ \{ <var:e> = <var:Y> \land <var:w1> = <nat:2> \times <var:Y> \land <var:w0> = <nat:2> \} \\ <var:h> := <var:w1> \\ \{ <var:e> = <var:Y> \land <var:w0> = <nat:2> \land <var:h> = <nat:2> \times <var:Y> \} \\ <var:h> := <var:h> + <var:w0> \\ \{ <var:e> = <var:Y> \land <var:h> = <nat:2> \times <var:Y> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:e> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:2> ; <var:h> := <var:w1> <var:h> := <var:h> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:e> = <var:Y> }} <def:poly> {{ <var:h> = <nat:2> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:w1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:w1> = <var:Y> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:w1> = <nat:2> * <var:Y> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:w0> = <nat:2> /\ <var:h> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:h> = <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 