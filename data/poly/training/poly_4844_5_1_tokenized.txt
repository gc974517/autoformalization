\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:z> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:3> ; <var:S> := <var:f1> <var:S> := <var:S> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing , letting positive numbers $ <var:p> $ , $ <var:z> = <var:p> $ prior to evaluating the series of instructions it must be that $ <var:S> = <nat:3> \times <var:p> + <nat:5> $ after code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:p> \} \\ <var:f1> := <var:z> ; \\ \{ <var:z> = <var:p> \land <var:f1> = <var:p> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:z> = <var:p> \land <var:f1> = <var:p> \land <var:f0> = <nat:5> \} \\ <var:f1> := <var:f1> * <nat:3> ; \\ \{ <var:z> = <var:p> \land <var:f1> = <nat:3> \times <var:p> \land <var:f0> = <nat:5> \} \end{eqnarray} Furthering interpreting the program gives : \begin{eqnarray} <var:S> := <var:f1> \\ \{ <var:z> = <var:p> \land <var:f0> = <nat:5> \land <var:S> = <nat:3> \times <var:p> \} \\ <var:S> := <var:S> + <var:f0> \\ \{ <var:z> = <var:p> \land <var:S> = <nat:3> \times <var:p> + <nat:5> \} \end{eqnarray} Applying typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:z> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:3> ; <var:S> := <var:f1> <var:S> := <var:S> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:z> = <var:p> }} <def:poly> {{ <var:S> = <nat:3> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:f1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:f1> = <var:p> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:f1> = <nat:3> * <var:p> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:f0> = <nat:5> /\ <var:S> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:S> = <nat:3> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 