\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:9> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:u> ; <var:Q> := <var:l1> ; <var:Q> := <var:Q> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:u> = <var:T> $ before evaluating our segment of code , it must be that we see $ <var:Q> = <nat:9> \cdot <var:T> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be given through usual Hoare logic . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:u> = <var:T> \} & <var:l0> := <nat:9> & \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \} \\ \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \} & <var:l1> := <nat:9> & \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \land <var:l1> = <nat:9> \} \end{tabular} Moving forward to the following bits of codein our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:u> = <var:T> \} & <var:l0> := <nat:9> & \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \} \\ \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \} & <var:l1> := <nat:9> & \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \land <var:l1> = <nat:9> \} \end{tabular} Moving forward to the upcoming command contained in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:T> \} & <var:l0> := <nat:9> & \{ <var:u> = <var:T> \land <var:l0> = <nat:9> \} \end{tabular} This is shown to be logically sound with the binding inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:9> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:u> ; <var:Q> := <var:l1> ; <var:Q> := <var:Q> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:u> = <var:T> }} <def:poly> {{ <var:Q> = <nat:9> * <var:T> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:9> /\ <var:Q> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:Q> = <nat:9> * <var:T> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 