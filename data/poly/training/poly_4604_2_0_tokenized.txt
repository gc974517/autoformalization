\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:J0> := <nat:2> ; <var:l> := <var:J0> \end{verbatim} Given that we have $ <var:i> = <var:K> $ before evaluating this series of commands , then we have $ <var:l> = <nat:2> $ after segment of code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:K> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:i> = <var:K> \land <var:J0> = <nat:2> \} \\ <var:l> := <var:J0> \\ \{ <var:i> = <var:K> \land <var:l> = <nat:2> \} \end{eqnarray} Utilizing Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:i> = <var:K> }} <var:J0> := <nat:2> ; <var:l> := <var:J0> {{ <var:l> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:l> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 