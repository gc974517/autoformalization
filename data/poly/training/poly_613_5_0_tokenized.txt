\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:7> ; <var:l1> := <nat:3> ; <var:l1> := <var:l1> * <var:V> ; <var:w> := <var:l1> ; <var:w> := <var:w> + <var:l0> \end{verbatim} Assuming --- given some whole numbers $ <var:v> $ --- it to hold that $ <var:V> = <var:v> $ prior to executing this segment of code , it must be that we see $ <var:w> = <nat:3> \cdot <var:v> + <nat:7> $ after series of instructions executes . \end{theorem} \begin{proof} The course of logic for the series of commands is accomplished with Hoare reasoning . Immediately after , \begin{verbatim} { <var:V> = <var:v> } <var:l0> := <nat:7> { <var:V> = <var:v> \land <var:l0> = <nat:7> } { <var:V> = <var:v> \land <var:l0> = <nat:7> } <var:l1> := <nat:3> { <var:V> = <var:v> \land <var:l0> = <nat:7> \land <var:l1> = <nat:3> } { <var:V> = <var:v> \land <var:l0> = <nat:7> \land <var:l1> = <nat:3> } <var:l1> := <var:l1> * <var:V> { <var:V> = <var:v> \land <var:l0> = <nat:7> \land <var:l1> = <nat:3> \times <var:v> } \end{verbatim} This is known to be sound by the binding rule given by standard Hoare reasoning . Immediately following , \begin{verbatim} { <var:V> = <var:v> } <var:l0> := <nat:7> { <var:V> = <var:v> \land <var:l0> = <nat:7> } { <var:V> = <var:v> \land <var:l0> = <nat:7> } <var:l1> := <nat:3> { <var:V> = <var:v> \land <var:l0> = <nat:7> \land <var:l1> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:V> = <var:v> }} <var:l0> := <nat:7> ; <var:l1> := <nat:3> ; <var:l1> := <var:l1> * <var:V> ; <var:w> := <var:l1> ; <var:w> := <var:w> + <var:l0> {{ <var:w> = <nat:3> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:l0> = <nat:7> /\ <var:w> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:w> = <nat:3> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 