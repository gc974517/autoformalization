\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:d> ; <var:W> := <var:k1> ; <var:W> := <var:W> + <var:k0> \end{verbatim} Allowing it to hold that $ <var:d> = <var:r> $ ahead of the execution of this code it must be that we see $ <var:W> = <nat:7> \cdot <var:r> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be given with Hoare reasoning . Moving forward to the proceeding statement found in our list of commands , we see the variable binding statement giving $ <nat:7> $ toward $ <var:k0>$ . This takes $ \{ <var:d> = <var:r> \} $ as the postcondition $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \} $ . This is deduced by the assignment rule given by usual Hoare reasoning . Moving forward to the next step , we see the command giving $ <nat:7> $ toward $ <var:k1>$ . This statement redefines $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \} $ into the postcondition $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \} $ . Moving forward , we have the variable binding line \verb | <var:k1> := <var:k1> * <var:d> ; | . This advances the condition $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \} $ into the postcondition $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> * <var:r> \} $ . Going to the next step , we have the environment update statement \verb | <var:W> := <var:k1> ; | . This redefines the condition $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> * <var:r> \} $ toward $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \land <var:W> = <nat:7> * <var:r> \} $ . This is ensured by the assignment inference rule given by typical Hoare logic . Immediately following , the variable assignmet command \verb | <var:W> := <var:W> + <var:k0> | . This moves the condition $ \{ <var:d> = <var:r> \land <var:k0> = <nat:7> \land <var:W> = <nat:7> * <var:r> \} $ into the postcondition $ \{ <var:d> = <var:r> \land <var:W> = <nat:7> * <var:r> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:d> = <var:r> }} <var:k0> := <nat:7> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:d> ; <var:W> := <var:k1> ; <var:W> := <var:W> + <var:k0> {{ <var:W> = <nat:7> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:k0> = <nat:7> /\ <var:W> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:W> = <nat:7> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 