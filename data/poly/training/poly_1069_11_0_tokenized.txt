\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:7> ; <var:j2> := <nat:1> ; <var:j2> := <var:j2> * <var:f> ; <var:j2> := <var:j2> * <var:f> ; <var:j3> := <nat:9> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:b> := <var:j3> ; <var:b> := <var:b> + <var:j2> ; <var:b> := <var:b> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:f> = <var:C> $ prior to interpreting the set of instructions , it must be that we see $ <var:b> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> + <nat:7> $ after list of commands has terminated . \end{theorem} \begin{proof} Proving correctness for this code segment can be given by usual Hoare logic . Advancing on , the variable assignmet statement \verb | <var:j0> := <nat:7> ; | . This redefines the condition $ \{ <var:f> = <var:C> \} $ into the postcondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \} $ . Jumping to the proceeding command found in the set of instructions , the environment update command letting $ <nat:1> $ as $ <var:j2>$ . This line takes the precondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \} $ into $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \} $ . This is shown by the assignment law from standard Hoare logic . Moving forward , the variable binding code \verb | <var:j2> := <var:j2> * <var:f> ; | . This advances the condition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \} $ as $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> \} $ . Going forward , the assignment code \verb | <var:j2> := <var:j2> * <var:f> ; | . This line redefines $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> \} $ to the postcondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \} $ . Focusing on the subsequent statement contained in the code , the assignment line letting $ <nat:9> $ as $ <var:j3>$ . This code advances the condition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \} $ . This is ensured with the assignment rule given by usual Hoare reasoning . Considering the proceeding command contained in the code , we see the environment update command assigning $ <var:j3> * <var:f> $ as $ <var:j3>$ . This advances $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \} $ as the postcondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:C> \} $ . Moving forward to the next step , we have the assignment code \verb | <var:j3> := <var:j3> * <var:f> ; | . This line forwards the precondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:C> \} $ toward the postcondition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:C> ^ <nat:2> \} $ . Focusing on the proceeding command found in our list of instructions , we have the assignment code giving $ <var:j3> * <var:f> $ toward $ <var:j3>$ . This code takes $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:C> ^ <nat:2> \} $ toward $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:C> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment law found in usual Hoare techniques . Honing in on the next line of code contained in our series of commands , we have the variable binding line assigning $ <var:j3> $ toward $ <var:b>$ . This command transfers the condition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:C> ^ <nat:3> \} $ as the condition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:b> = <nat:9> \cdot <var:C> ^ <nat:3> \} $ . This is shown by the assignment law in standard Hoare techniques . Taking another step toward the upcoming line seen in the series of commands , the command \verb | <var:b> := <var:b> + <var:j2> ; | . This code transfers the condition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:j2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:b> = <nat:9> \cdot <var:C> ^ <nat:3> \} $ into $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:b> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> \} $ . Now , we have the environment update code letting $ <var:b> + <var:j0$ as $ <var:b>$ . This command advances the condition $ \{ <var:f> = <var:C> \land <var:j0> = <nat:7> \land <var:b> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> \} $ as the condition $ \{ <var:f> = <var:C> \land <var:b> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> + <nat:7> \} $ . This is given with the assignment law given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j0> := <nat:7> ; <var:j2> := <nat:1> ; <var:j2> := <var:j2> * <var:f> ; <var:j2> := <var:j2> * <var:f> ; <var:j3> := <nat:9> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:b> := <var:j3> ; <var:b> := <var:b> + <var:j2> ; <var:b> := <var:b> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:f> = <var:C> }} <def:poly> {{ <var:b> = <nat:9> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:j3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:j3> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:j3> = <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:j3> = <nat:9> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:j2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:b> = <nat:9> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:j0> = <nat:7> /\ <var:b> = <nat:9> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:C> /\ <var:b> = <nat:9> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 