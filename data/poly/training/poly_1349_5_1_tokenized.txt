\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z1> := <var:n> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:8> ; <var:O> := <var:z1> <var:O> := <var:O> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:n> = <var:j> $ ahead of the evaluation of this series of commands , it holds that $ <var:O> = <nat:8> * <var:j> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be accomplished by usual Hoare logic . After , we have the variable assignmet command letting $ <var:n> $ into $ <var:z1>$ . This line forwards the condition $ \{ <var:n> = <var:j> \} $ toward $ \{ <var:n> = <var:j> \land <var:z1> = <var:j> \} $ . Moving on to the next step , we see the binding line \verb | <var:z0> := <nat:6> ; | . This moves the condition $ \{ <var:n> = <var:j> \land <var:z1> = <var:j> \} $ toward the postcondition $ \{ <var:n> = <var:j> \land <var:z1> = <var:j> \land <var:z0> = <nat:6> \} $ . Moving on to the subsequent statement found in the segment of code , we have the variable assignmet statement \verb | <var:z1> := <var:z1> * <nat:8> ; | . This command moves the condition $ \{ <var:n> = <var:j> \land <var:z1> = <var:j> \land <var:z0> = <nat:6> \} $ to $ \{ <var:n> = <var:j> \land <var:z1> = <nat:8> \cdot <var:j> \land <var:z0> = <nat:6> \} $ . This is guaranteed by the assignment inference rule found in Hoare techniques . Paying attention to the upcoming command found in our code , we have the line letting $ <var:z1$ as $ <var:O>$ . This takes $ \{ <var:n> = <var:j> \land <var:z1> = <nat:8> \cdot <var:j> \land <var:z0> = <nat:6> \} $ as $ \{ <var:n> = <var:j> \land <var:z0> = <nat:6> \land <var:O> = <nat:8> \cdot <var:j> \} $ . This is given with the assignment rule in Hoare logic . Moving onward , we see the environment update line \verb | <var:O> := <var:O> + <var:z0> | . This code transfers $ \{ <var:n> = <var:j> \land <var:z0> = <nat:6> \land <var:O> = <nat:8> \cdot <var:j> \} $ as the postcondition $ \{ <var:n> = <var:j> \land <var:O> = <nat:8> \cdot <var:j> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:n> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:8> ; <var:O> := <var:z1> <var:O> := <var:O> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <def:poly> {{ <var:O> = <nat:8> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:z1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:z1> = <var:j> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:z1> = <nat:8> * <var:j> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:z0> = <nat:6> /\ <var:O> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:O> = <nat:8> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 