\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:9> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:R> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:R> ; <var:E2> := <var:E2> * <var:R> ; <var:M> := <var:E2> ; <var:M> := <var:M> + <var:E1> ; <var:M> := <var:M> + <var:E0> \end{verbatim} Allowing it to hold that $ <var:R> = <var:I> $ prior to the evaluation of this list of commands , it follows that we have $ <var:M> = <nat:9> \times <var:I> ^ <nat:2> + <nat:7> \times <var:I> + <nat:9> $ . \end{theorem} \begin{proof} The argument for this code can be demonstrated with usual Hoare reasoning . Honing in on the proceeding line of code contained in our segment of code , we see the variable assignmet line binding $ <nat:9> $ as $ <var:E0>$ . This command redefines the condition $ \{ <var:R> = <var:I> \} $ to the condition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \} $ . This is deduced using the assignment law given by typical Hoare techniques . Immediately after , we see the code yielding $ <nat:7> $ as $ <var:E1>$ . This command moves $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \} $ to the condition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \} $ . Moving forward , we see the assignment command letting $ <var:E1> * <var:R> $ as $ <var:E1>$ . This advances $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \} $ into the postcondition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \} $ . This is sound with the assignment inference rule obtained from Hoare logic . Moving on to the subsequent line of code seen in our program , the code binding $ <nat:9> $ as $ <var:E2>$ . This moves the precondition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \} $ toward $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:E2> = <nat:9> \} $ . Focusing on the next step contained in our set of commands , the code assigning $ <var:E2> * <var:R> $ into $ <var:E2>$ . This redefines $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:E2> = <nat:9> \} $ into $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:E2> = <nat:9> \cdot <var:I> \} $ . Following , we have the binding command defining $ <var:E2> * <var:R> $ toward $ <var:E2>$ . This command forwards $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:E2> = <nat:9> \cdot <var:I> \} $ as the postcondition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:E2> = <nat:9> \cdot <var:I> ^ <nat:2> \} $ . This is ensured by the assignment inference rule found in standard Hoare logic . Now , the variable assignmet line binding $ <var:E2> $ into $ <var:M>$ . This redefines the condition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:E2> = <nat:9> \cdot <var:I> ^ <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:M> = <nat:9> \cdot <var:I> ^ <nat:2> \} $ . Advancing , we have the assignment statement binding $ <var:M> + <var:E1> $ toward $ <var:M>$ . This line moves the condition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:E1> = <nat:7> \cdot <var:I> \land <var:M> = <nat:9> \cdot <var:I> ^ <nat:2> \} $ as the condition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:M> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> \} $ . Moving on , we see the environment update line giving $ <var:M> + <var:E0$ toward $ <var:M>$ . This transfers the condition $ \{ <var:R> = <var:I> \land <var:E0> = <nat:9> \land <var:M> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> \} $ as the condition $ \{ <var:R> = <var:I> \land <var:M> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:R> = <var:I> }} <var:E0> := <nat:9> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:R> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:R> ; <var:E2> := <var:E2> * <var:R> ; <var:M> := <var:E2> ; <var:M> := <var:M> + <var:E1> ; <var:M> := <var:M> + <var:E0> {{ <var:M> = <nat:9> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:7> * <var:I> /\ <var:E2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:7> * <var:I> /\ <var:E2> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:7> * <var:I> /\ <var:E2> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:7> * <var:I> /\ <var:M> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:E0> = <nat:9> /\ <var:M> = <nat:9> * <var:I> ^ <nat:2> + <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:M> = <nat:9> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 