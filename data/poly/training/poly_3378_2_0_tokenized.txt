\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:w0> := <nat:3> ; <var:C> := <var:w0> \end{verbatim} Given $ <var:Y> = <var:H> $ before interpreting this set of instructions , it must be that we have $ <var:C> = <nat:3> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Observe that the below decorated set of commands . \begin{eqnarray} \{ <var:Y> = <var:H> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:Y> = <var:H> \land <var:w0> = <nat:3> \} \\ <var:C> := <var:w0> \\ \{ <var:Y> = <var:H> \land <var:C> = <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <var:w0> := <nat:3> ; <var:C> := <var:w0> {{ <var:C> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:C> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 