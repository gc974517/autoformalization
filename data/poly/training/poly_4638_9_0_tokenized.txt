\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:n> ; <var:y2> := <nat:1> ; <var:y2> := <var:y2> * <var:n> ; <var:y2> := <var:y2> * <var:n> ; <var:Z> := <var:y2> ; <var:Z> := <var:Z> + <var:y1> ; <var:Z> := <var:Z> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:n> = <var:i> $ ahead of evaluating our set of instructions , it holds that we have $ <var:Z> = <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic results in : \begin{eqnarray} \{ <var:n> = <var:i> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \} \\ <var:y1> := <nat:4> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> \} \\ <var:y1> := <var:y1> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> \times <var:i> \} \\ <var:y2> := <nat:1> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> \times <var:i> \land <var:y2> = <nat:1> \} \\ <var:y2> := <var:y2> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> \times <var:i> \land <var:y2> = <nat:1> \times <var:i> \} \\ <var:y2> := <var:y2> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> \times <var:i> \land <var:y2> = <nat:1> \times <var:i> ^ <nat:2> \} \\ <var:Z> := <var:y2> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> \times <var:i> \land <var:Z> = <nat:1> \times <var:i> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:y1> ; \\ \{ <var:n> = <var:i> \land <var:y0> = <nat:2> \land <var:Z> = <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> \} \\ <var:Z> := <var:Z> + <var:y0> \\ \{ <var:n> = <var:i> \land <var:Z> = <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:2> \} \end{eqnarray} Considering the above , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:n> ; <var:y2> := <nat:1> ; <var:y2> := <var:y2> * <var:n> ; <var:y2> := <var:y2> * <var:n> ; <var:Z> := <var:y2> ; <var:Z> := <var:Z> + <var:y1> ; <var:Z> := <var:Z> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:n> = <var:i> }} <def:poly> {{ <var:Z> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> * <var:i> /\ <var:y2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> * <var:i> /\ <var:y2> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> * <var:i> /\ <var:y2> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> * <var:i> /\ <var:Z> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:y0> = <nat:2> /\ <var:Z> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:Z> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 