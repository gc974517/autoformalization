\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:2> + <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:4> + <var:q> * <var:C> ; <var:q> := <var:q> * <var:C> ; <var:q> := <nat:4> + <var:q> * <var:C> ; <var:q> := <nat:4> + <var:q> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:C> = <var:A> $ taking positive integers $ <var:A> $ before executing the list of commands , it holds that we see $ <var:q> = <nat:4> * <var:A> ^ <nat:10> + <nat:3> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:C> = <var:A> \} \\ <var:q> := <nat:4> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \} \\ <var:q> := <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> + \} \\ <var:q> := <nat:3> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:2> + <nat:3> \} \\ <var:q> := <nat:3> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> + <nat:3> \} \\ <var:q> := <nat:3> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:3> \} \\ <var:q> := <nat:2> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:2> \} \\ <var:q> := <nat:3> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:3> \} \\ <var:q> := <nat:4> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:7> + <nat:3> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:4> \} \\ <var:q> := <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:8> + <nat:3> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + \} \\ <var:q> := <nat:4> + <var:q> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:9> + <nat:3> \times <var:A> ^ <nat:7> + <nat:3> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \} \\ <var:q> := <nat:4> + <var:q> * <var:C> \\ \{ <var:C> = <var:A> \land <var:q> = <nat:4> \times <var:A> ^ <nat:10> + <nat:3> \times <var:A> ^ <nat:8> + <nat:3> \times <var:A> ^ <nat:7> + <nat:3> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> + <nat:4> \} \end{eqnarray} Thusly , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:4> ; <var:q> := <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:2> + <var:q> * <var:C> ; <var:q> := <nat:3> + <var:q> * <var:C> ; <var:q> := <nat:4> + <var:q> * <var:C> ; <var:q> := <var:q> * <var:C> ; <var:q> := <nat:4> + <var:q> * <var:C> ; <var:q> := <nat:4> + <var:q> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:C> = <var:A> }} <def:poly> {{ <var:q> = <nat:4> * <var:A> ^ <nat:10> + <nat:3> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:9> + <nat:3> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:q> = <nat:4> * <var:A> ^ <nat:10> + <nat:3> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 