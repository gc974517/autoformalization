\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:i> ; <var:r> := <var:I1> ; <var:r> := <var:r> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:i> = <var:m> $ --- for positive integer coefficients $ <var:m> $ --- ahead of interpreting the code segment , then $ <var:r> = <nat:8> \times <var:m> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is demonstrated through usual Hoare reasoning . Observing the proceeding step contained in our series of instructions , we have the assignment statement \verb | <var:I0> := <nat:8> ; | . This code redefines the condition $ \{ <var:i> = <var:m> \} $ toward the postcondition $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \} $ . Advancing on , we have the binding code \verb | <var:I1> := <nat:8> ; | . This transfers the condition $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \} $ into the condition $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \land <var:I1> = <nat:8> \} $ . Taking another step toward the following step seen in our set of commands , we have the variable binding statement yielding $ <var:I1> * <var:i> $ into $ <var:I1>$ . This statement takes $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \land <var:I1> = <nat:8> \} $ into the condition $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \land <var:I1> = <nat:8> \times <var:m> \} $ . This is known to be sound with the assignment scheme in Hoare reasoning . Moving on to the upcoming step in our set of commands , we see the variable update code \verb | <var:r> := <var:I1> ; | . This redefines $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \land <var:I1> = <nat:8> \times <var:m> \} $ toward the postcondition $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \land <var:r> = <nat:8> \times <var:m> \} $ . Considering the next bit of code seen in the code segment , we see the variable binding code \verb | <var:r> := <var:r> + <var:I0> | . This forwards $ \{ <var:i> = <var:m> \land <var:I0> = <nat:8> \land <var:r> = <nat:8> \times <var:m> \} $ into the condition $ \{ <var:i> = <var:m> \land <var:r> = <nat:8> \times <var:m> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:i> ; <var:r> := <var:I1> ; <var:r> := <var:r> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:i> = <var:m> }} <def:poly> {{ <var:r> = <nat:8> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:I0> = <nat:8> /\ <var:r> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:r> = <nat:8> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 