\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:8> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:x> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:x> ; <var:u2> := <var:u2> * <var:x> ; <var:b> := <var:u2> ; <var:b> := <var:b> + <var:u1> ; <var:b> := <var:b> + <var:u0> \end{verbatim} Assuming that $ <var:x> = <var:p> $ --- given some natural coefficients $ <var:p> $ --- prior to running our series of commands it follows that $ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:8> $ . \end{theorem} \begin{proof} The argument for our code is evident using this decorated set of instructions . \begin{eqnarray} \{ <var:x> = <var:p> \} \\ <var:u0> := <nat:8> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \} \\ <var:u1> := <nat:8> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> \} \end{eqnarray} Continuing evaluating this series of commands produces : \begin{eqnarray} <var:u1> := <var:u1> * <var:x> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> * <var:p> \} \\ <var:u2> := <nat:9> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> * <var:p> \land <var:u2> = <nat:9> \} \\ <var:u2> := <var:u2> * <var:x> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> * <var:p> \land <var:u2> = <nat:9> * <var:p> \} \\ <var:u2> := <var:u2> * <var:x> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> * <var:p> \land <var:u2> = <nat:9> * <var:p> ^ <nat:2> \} \\ <var:b> := <var:u2> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> * <var:p> \land <var:b> = <nat:9> * <var:p> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:u1> ; \\ \{ <var:x> = <var:p> \land <var:u0> = <nat:8> \land <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:8> * <var:p> \} \\ <var:b> := <var:b> + <var:u0> \\ \{ <var:x> = <var:p> \land <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:8> \} \end{eqnarray} The application of Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:x> = <var:p> }} <var:u0> := <nat:8> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:x> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:x> ; <var:u2> := <var:u2> * <var:x> ; <var:b> := <var:u2> ; <var:b> := <var:b> + <var:u1> ; <var:b> := <var:b> + <var:u0> {{ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> * <var:p> /\ <var:u2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> * <var:p> /\ <var:u2> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> * <var:p> /\ <var:u2> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> * <var:p> /\ <var:b> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:u0> = <nat:8> /\ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 