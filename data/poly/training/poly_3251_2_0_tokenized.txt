\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:5> ; <var:w> := <var:p0> \end{verbatim} Assume that $ <var:d> = <var:A> $ prior to the evaluation of the set of commands , it follows that we see $ <var:w> = <nat:5> $ once segment of code has exited . \end{theorem} \begin{proof} Proving correctness for our program can be demonstrated using usual Hoare logic . Further , we see the binding code \verb | <var:p0> := <nat:5> ; | . This redefines $ \{ <var:d> = <var:A> \} $ toward the condition $ \{ <var:d> = <var:A> \land <var:p0> = <nat:5> \} $ . This is known to be sound by the assignment law given by typical Hoare logic . Paying attention to the upcoming statement found in the series of commands , we have the variable assignmet command \verb | <var:w> := <var:p0> | . This moves $ \{ <var:d> = <var:A> \land <var:p0> = <nat:5> \} $ as $ \{ <var:d> = <var:A> \land <var:w> = <nat:5> \} $ . This is ensured through the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:d> = <var:A> }} <var:p0> := <nat:5> ; <var:w> := <var:p0> {{ <var:w> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:w> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 