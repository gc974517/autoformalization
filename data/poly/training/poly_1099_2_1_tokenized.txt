\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:1> ; <var:N> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow it to be that $ <var:L> = <var:C> $ --- given natural coefficients $ <var:C> $ --- before running this list of commands , then we have $ <var:N> = <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:L> = <var:C> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:L> = <var:C> \land <var:J0> = <nat:1> \} \\ <var:N> := <var:J0> \\ \{ <var:L> = <var:C> \land <var:N> = <nat:1> \} \end{eqnarray} Considering the preceding argument , this list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:1> ; <var:N> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:L> = <var:C> }} <def:poly> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 