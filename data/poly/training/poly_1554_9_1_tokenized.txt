\begin{document} \begin{theorem} We define the following program in \emph{Imp} : \begin{verbatim} <var:b1> := <var:y> ; <var:b2> := <var:b1> * <var:y> ; <var:b3> := <var:b2> * <var:y> ; <var:b0> := <nat:2> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:6> ; <var:x> := <var:b3> <var:x> := <var:x> + <var:b2> <var:x> := <var:x> + <var:b0> \end{verbatim} Allow $ <var:y> = <var:T> $ before the evaluation of our set of instructions , then we have $ <var:x> = <nat:6> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> + <nat:2> $ after program is done executing . \end{theorem} \begin{proof} The course of logic for our series of commands is clear using typical Hoare techniques . Focusing on the following commands contained in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:T> \} & <var:b1> := <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \} \\ \{ <var:y> = <var:T> \land <var:b1> = <var:T> \} & <var:b2> := <var:b1> * <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} \\ \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} & <var:b3> := <var:b2> * <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \} \\ \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \} & <var:b0> := <nat:2> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:2> \} \\ \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:2> \} & <var:b2> := <var:b2> * <nat:9> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <nat:9> \times <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:2> \} \end{tabular} This is shown to be logically sound through the scheme given by usual Hoare logic . Observing the subsequent commands seen in the program , \[ \begin{tabular} {rcl} \{ <var:y> = <var:T> \} & <var:b1> := <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \} \\ \{ <var:y> = <var:T> \land <var:b1> = <var:T> \} & <var:b2> := <var:b1> * <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} \end{tabular} Paying attention to the upcoming statements contained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:T> \} & <var:b1> := <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \} \\ \{ <var:y> = <var:T> \land <var:b1> = <var:T> \} & <var:b2> := <var:b1> * <var:y> & \{ <var:y> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <var:b1> := <var:y> ; <var:b2> := <var:b1> * <var:y> ; <var:b3> := <var:b2> * <var:y> ; <var:b0> := <nat:2> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:6> ; <var:x> := <var:b3> <var:x> := <var:x> + <var:b2> <var:x> := <var:x> + <var:b0> {{ <var:x> = <nat:6> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:T> ^ <nat:3> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:b0> = <nat:2> /\ <var:x> = <nat:6> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b1> = <var:T> /\ <var:b0> = <nat:2> /\ <var:x> = <nat:6> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:x> = <nat:6> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 