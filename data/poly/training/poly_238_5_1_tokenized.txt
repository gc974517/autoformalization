\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:g> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:8> ; <var:D> := <var:J1> <var:D> := <var:D> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:g> = <var:j> $ ahead of running the code , it follows that $ <var:D> = <nat:8> \times <var:j> + <nat:8> $ . \end{theorem} \begin{proof} The argument for our series of commands is accomplished using standard Hoare techniques . Advancing to the next step , \begin{eqnarray} \{ <var:g> = <var:j> \} \, <var:J1> := <var:g> \, \{ <var:g> = <var:j> \land <var:J1> = <var:j> \} \\ \{ <var:g> = <var:j> \land <var:J1> = <var:j> \} \, <var:J0> := <nat:8> \, \{ <var:g> = <var:j> \land <var:J1> = <var:j> \land <var:J0> = <nat:8> \} \end{eqnarray} This is shown by the variable assignmet rule given by standard Hoare techniques . Honing in on the proceeding command seen in our segment of code , \begin{eqnarray} \{ <var:g> = <var:j> \} \, <var:J1> := <var:g> \, \{ <var:g> = <var:j> \land <var:J1> = <var:j> \} \end{eqnarray} Observing the proceeding pieces of code contained in our series of commands , we have \begin{eqnarray} \{ <var:g> = <var:j> \} \, <var:J1> := <var:g> \, \{ <var:g> = <var:j> \land <var:J1> = <var:j> \} \\ \{ <var:g> = <var:j> \land <var:J1> = <var:j> \} \, <var:J0> := <nat:8> \, \{ <var:g> = <var:j> \land <var:J1> = <var:j> \land <var:J0> = <nat:8> \} \end{eqnarray} This is deduced with the binding scheme from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:g> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:8> ; <var:D> := <var:J1> <var:D> := <var:D> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:g> = <var:j> }} <def:poly> {{ <var:D> = <nat:8> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:J1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:J1> = <var:j> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:J1> = <nat:8> * <var:j> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:J0> = <nat:8> /\ <var:D> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:D> = <nat:8> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 