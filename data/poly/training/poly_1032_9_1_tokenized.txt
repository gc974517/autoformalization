\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:C> ; <var:i2> := <var:i1> * <var:C> ; <var:i3> := <var:i2> * <var:C> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:2> ; <var:i3> := <var:i3> * <nat:2> ; <var:A> := <var:i3> <var:A> := <var:A> + <var:i1> <var:A> := <var:A> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given for all positive coefficients $ <var:l> $ $ <var:C> = <var:l> $ prior to evaluating our code , then $ <var:A> = <nat:2> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be done with the below decorated series of instructions . \begin{eqnarray} \{ <var:C> = <var:l> \} \\ <var:i1> := <var:C> ; \\ \{ <var:C> = <var:l> \land <var:i1> = <var:l> \} \\ <var:i2> := <var:i1> * <var:C> ; \\ \{ <var:C> = <var:l> \land <var:i1> = <var:l> \land <var:i2> = <var:l> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:C> ; \\ \{ <var:C> = <var:l> \land <var:i1> = <var:l> \land <var:i2> = <var:l> ^ <nat:2> \land <var:i3> = <var:l> ^ <nat:3> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:C> = <var:l> \land <var:i1> = <var:l> \land <var:i2> = <var:l> ^ <nat:2> \land <var:i3> = <var:l> ^ <nat:3> \land <var:i0> = <nat:7> \} \\ <var:i1> := <var:i1> * <nat:2> ; \\ \{ <var:C> = <var:l> \land <var:i1> = <nat:2> * <var:l> \land <var:i2> = <var:l> ^ <nat:2> \land <var:i3> = <var:l> ^ <nat:3> \land <var:i0> = <nat:7> \} \\ <var:i3> := <var:i3> * <nat:2> ; \\ \{ <var:C> = <var:l> \land <var:i1> = <nat:2> * <var:l> \land <var:i2> = <var:l> ^ <nat:2> \land <var:i3> = <nat:2> * <var:l> ^ <nat:3> \land <var:i0> = <nat:7> \} \\ <var:A> := <var:i3> \\ \{ <var:C> = <var:l> \land <var:i1> = <nat:2> * <var:l> \land <var:i2> = <var:l> ^ <nat:2> \land <var:i0> = <nat:7> \land <var:A> = <nat:2> * <var:l> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:i1> \\ \{ <var:C> = <var:l> \land <var:i0> = <nat:7> \land <var:A> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> \} \end{eqnarray} Continuing the execution of our set of commands produces : \begin{eqnarray} <var:A> := <var:A> + <var:i0> \\ \{ <var:C> = <var:l> \land <var:A> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i1> := <var:C> ; <var:i2> := <var:i1> * <var:C> ; <var:i3> := <var:i2> * <var:C> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:2> ; <var:i3> := <var:i3> * <nat:2> ; <var:A> := <var:i3> <var:A> := <var:A> + <var:i1> <var:A> := <var:A> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:C> = <var:l> }} <def:poly> {{ <var:A> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <var:l> /\ <var:i2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <var:l> /\ <var:i2> = <var:l> ^ <nat:2> /\ <var:i3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <var:l> /\ <var:i2> = <var:l> ^ <nat:2> /\ <var:i3> = <var:l> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <nat:2> * <var:l> /\ <var:i2> = <var:l> ^ <nat:2> /\ <var:i3> = <var:l> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <nat:2> * <var:l> /\ <var:i2> = <var:l> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:l> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i1> = <nat:2> * <var:l> /\ <var:i2> = <var:l> ^ <nat:2> /\ <var:i0> = <nat:7> /\ <var:A> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:i0> = <nat:7> /\ <var:A> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:A> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 