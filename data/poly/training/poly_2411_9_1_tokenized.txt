\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} : \begin{verbatim} <var:H1> := <var:F> ; <var:H2> := <var:H1> * <var:F> ; <var:H3> := <var:H2> * <var:F> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:8> ; <var:H3> := <var:H3> * <nat:9> ; <var:O> := <var:H3> <var:O> := <var:O> + <var:H1> <var:O> := <var:O> + <var:H0> \end{verbatim} Allowing it to hold that $ <var:F> = <var:x> $ before running the program then we have $ <var:O> = <nat:9> \times <var:x> ^ <nat:3> + <nat:8> \times <var:x> + <nat:3> $ after set of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:x> \} \\ <var:H1> := <var:F> ; \\ \{ <var:F> = <var:x> \land <var:H1> = <var:x> \} \\ <var:H2> := <var:H1> * <var:F> ; \\ \{ <var:F> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:F> ; \\ \{ <var:F> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:F> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H0> = <nat:3> \} \\ <var:H1> := <var:H1> * <nat:8> ; \\ \{ <var:F> = <var:x> \land <var:H1> = <nat:8> * <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H0> = <nat:3> \} \\ <var:H3> := <var:H3> * <nat:9> ; \\ \{ <var:F> = <var:x> \land <var:H1> = <nat:8> * <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <nat:9> * <var:x> ^ <nat:3> \land <var:H0> = <nat:3> \} \\ <var:O> := <var:H3> \\ \{ <var:F> = <var:x> \land <var:H1> = <nat:8> * <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H0> = <nat:3> \land <var:O> = <nat:9> * <var:x> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:H1> \\ \{ <var:F> = <var:x> \land <var:H0> = <nat:3> \land <var:O> = <nat:9> * <var:x> ^ <nat:3> + <nat:8> * <var:x> \} \\ <var:O> := <var:O> + <var:H0> \\ \{ <var:F> = <var:x> \land <var:O> = <nat:9> * <var:x> ^ <nat:3> + <nat:8> * <var:x> + <nat:3> \} \end{eqnarray} Using typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:F> = <var:x> }} <var:H1> := <var:F> ; <var:H2> := <var:H1> * <var:F> ; <var:H3> := <var:H2> * <var:F> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:8> ; <var:H3> := <var:H3> * <nat:9> ; <var:O> := <var:H3> <var:O> := <var:O> + <var:H1> <var:O> := <var:O> + <var:H0> {{ <var:O> = <nat:9> * <var:x> ^ <nat:3> + <nat:8> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <nat:8> * <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <nat:8> * <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:x> ^ <nat:3> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H1> = <nat:8> * <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H0> = <nat:3> /\ <var:O> = <nat:9> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:H0> = <nat:3> /\ <var:O> = <nat:9> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:O> = <nat:9> * <var:x> ^ <nat:3> + <nat:8> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 