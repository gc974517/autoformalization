\begin{document} \begin{theorem} Consider the following program in \emph{Imp} such that \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:l> ; <var:U> := <nat:1> + <var:U> * <var:l> ; <var:U> := <nat:1> + <var:U> * <var:l> ; <var:U> := <nat:4> + <var:U> * <var:l> ; <var:U> := <nat:3> + <var:U> * <var:l> ; <var:U> := <var:U> * <var:l> ; <var:U> := <nat:3> + <var:U> * <var:l> ; <var:U> := <nat:1> + <var:U> * <var:l> \end{verbatim} Assuming --- taking $ <var:T> \in \mathbb{N} $ --- it to be that $ <var:l> = <var:T> $ prior to executing our set of commands , it must be that $ <var:U> = <nat:3> * <var:T> ^ <nat:8> + <nat:3> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:1> $ once series of commands executes . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:l> = <var:T> \} \\ <var:U> := <nat:3> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \} \\ <var:U> := <nat:3> + <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> + <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:1> \} \\ <var:U> := <nat:1> + <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:1> \times <var:T> + <nat:1> \} \\ <var:U> := <nat:4> + <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:4> + <nat:3> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> ^ <nat:2> + <nat:1> \times <var:T> + <nat:4> \} \\ <var:U> := <nat:3> + <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:5> + <nat:3> \times <var:T> ^ <nat:4> + <nat:1> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:3> \} \\ <var:U> := <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:6> + <nat:3> \times <var:T> ^ <nat:5> + <nat:1> \times <var:T> ^ <nat:4> + <nat:1> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + \} \\ <var:U> := <nat:3> + <var:U> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:7> + <nat:3> \times <var:T> ^ <nat:6> + <nat:1> \times <var:T> ^ <nat:5> + <nat:1> \times <var:T> ^ <nat:4> + <nat:4> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:l> \\ \{ <var:l> = <var:T> \land <var:U> = <nat:3> \times <var:T> ^ <nat:8> + <nat:3> \times <var:T> ^ <nat:7> + <nat:1> \times <var:T> ^ <nat:6> + <nat:1> \times <var:T> ^ <nat:5> + <nat:4> \times <var:T> ^ <nat:4> + <nat:3> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> + <nat:1> \} \end{eqnarray} Given the above , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:l> = <var:T> }} <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:l> ; <var:U> := <nat:1> + <var:U> * <var:l> ; <var:U> := <nat:1> + <var:U> * <var:l> ; <var:U> := <nat:4> + <var:U> * <var:l> ; <var:U> := <nat:3> + <var:U> * <var:l> ; <var:U> := <var:U> * <var:l> ; <var:U> := <nat:3> + <var:U> * <var:l> ; <var:U> := <nat:1> + <var:U> * <var:l> {{ <var:U> = <nat:3> * <var:T> ^ <nat:8> + <nat:3> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:U> = <nat:3> * <var:T> ^ <nat:8> + <nat:3> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 