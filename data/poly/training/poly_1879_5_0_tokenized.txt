\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:7> ; <var:T1> := <var:T1> * <var:c> ; <var:R> := <var:T1> ; <var:R> := <var:R> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Given it to hold that $ <var:c> = <var:D> $ before evaluating the code it must be that we have $ <var:R> = <nat:7> * <var:D> + <nat:5> $ . \end{theorem} \begin{proof} The proof of our list of commands is given through typical Hoare logic . Advancing , we see \begin{verbatim} { <var:c> = <var:D> } <var:T0> := <nat:5> { <var:c> = <var:D> \land <var:T0> = <nat:5> } { <var:c> = <var:D> \land <var:T0> = <nat:5> } <var:T1> := <nat:7> { <var:c> = <var:D> \land <var:T0> = <nat:5> \land <var:T1> = <nat:7> } \end{verbatim} This is given by the environment update rule given in Hoare techniques . Stepping through , \begin{verbatim} { <var:c> = <var:D> } <var:T0> := <nat:5> { <var:c> = <var:D> \land <var:T0> = <nat:5> } { <var:c> = <var:D> \land <var:T0> = <nat:5> } <var:T1> := <nat:7> { <var:c> = <var:D> \land <var:T0> = <nat:5> \land <var:T1> = <nat:7> } \end{verbatim} This is ensured with the variable update rule obtained from Hoare techniques . Focusing on the proceeding command seen in the series of instructions , we see \begin{verbatim} { <var:c> = <var:D> } <var:T0> := <nat:5> { <var:c> = <var:D> \land <var:T0> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:5> ; <var:T1> := <nat:7> ; <var:T1> := <var:T1> * <var:c> ; <var:R> := <var:T1> ; <var:R> := <var:R> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:c> = <var:D> }} <def:poly> {{ <var:R> = <nat:7> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:T0> = <nat:5> /\ <var:R> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:R> = <nat:7> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 