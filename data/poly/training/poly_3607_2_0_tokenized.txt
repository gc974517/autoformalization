\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:6> ; <var:W> := <var:T0> \end{verbatim} Assume $ <var:q> = <var:E> $ --- assuming some positive numbers $ <var:E> $ --- before interpreting this series of instructions , it holds that we see $ <var:W> = <nat:6> $ once program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:E> \} \\ <var:T0> := <nat:6> ; \\ \{ <var:q> = <var:E> \land <var:T0> = <nat:6> \} \\ <var:W> := <var:T0> \\ \{ <var:q> = <var:E> \land <var:W> = <nat:6> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:q> = <var:E> }} <var:T0> := <nat:6> ; <var:W> := <var:T0> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 