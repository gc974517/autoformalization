\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:J1> := <var:b> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:2> ; <var:E> := <var:J1> <var:E> := <var:E> + <var:J0> \end{verbatim} Assuming $ <var:b> = <var:q> $ ahead of interpreting this segment of code , then we have $ <var:E> = <nat:2> \cdot <var:q> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:q> \} \\ <var:J1> := <var:b> ; \\ \{ <var:b> = <var:q> \land <var:J1> = <var:q> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:b> = <var:q> \land <var:J1> = <var:q> \land <var:J0> = <nat:6> \} \\ <var:J1> := <var:J1> * <nat:2> ; \\ \{ <var:b> = <var:q> \land <var:J1> = <nat:2> \times <var:q> \land <var:J0> = <nat:6> \} \\ <var:E> := <var:J1> \\ \{ <var:b> = <var:q> \land <var:J0> = <nat:6> \land <var:E> = <nat:2> \times <var:q> \} \\ <var:E> := <var:E> + <var:J0> \\ \{ <var:b> = <var:q> \land <var:E> = <nat:2> \times <var:q> + <nat:6> \} \end{eqnarray} Utilizing Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:b> = <var:q> }} <var:J1> := <var:b> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:2> ; <var:E> := <var:J1> <var:E> := <var:E> + <var:J0> {{ <var:E> = <nat:2> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:J1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:J1> = <var:q> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:J1> = <nat:2> * <var:q> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:J0> = <nat:6> /\ <var:E> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:E> = <nat:2> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 