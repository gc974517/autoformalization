\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:7> ; <var:z> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:b> = <var:O> $ prior to executing the series of instructions then $ <var:z> = <nat:7> $ when program finishes . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:b> = <var:O> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:b> = <var:O> \land <var:I0> = <nat:7> \} \\ <var:z> := <var:I0> \\ \{ <var:b> = <var:O> \land <var:z> = <nat:7> \} \end{eqnarray} Considering the above , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:7> ; <var:z> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:b> = <var:O> }} <def:poly> {{ <var:z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 