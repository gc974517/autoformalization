\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:4> ; <var:l> := <nat:2> + <var:l> * <var:r> ; <var:l> := <nat:1> + <var:l> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:r> = <var:I> $ before the execution of the series of commands it must be that $ <var:l> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> $ once code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:I> \} \\ <var:l> := <nat:4> ; \\ \{ <var:r> = <var:I> \land <var:l> = <nat:4> \} \\ <var:l> := <nat:2> + <var:l> * <var:r> ; \\ \{ <var:r> = <var:I> \land <var:l> = <nat:4> \cdot <var:I> + <nat:2> \} \\ <var:l> := <nat:1> + <var:l> * <var:r> \\ \{ <var:r> = <var:I> \land <var:l> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> \} \end{eqnarray} The application of usual Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:4> ; <var:l> := <nat:2> + <var:l> * <var:r> ; <var:l> := <nat:1> + <var:l> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:r> = <var:I> }} <def:poly> {{ <var:l> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:I> /\ <var:l> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:I> /\ <var:l> = <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:I> /\ <var:l> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 