\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:2> + <var:f> * <var:I> \end{verbatim} Assuming that we have $ <var:I> = <var:F> $ with some positive coefficients $ <var:F> $ prior to running the set of commands then we have $ <var:f> = <nat:2> \times <var:F> + <nat:2> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for this set of instructions can be demonstrated with standard Hoare logic . Further , we have \verb | { <var:I> = <var:F> } <var:f> := <nat:2> { <var:I> = <var:F> \land <var:f> = <nat:2> } | and \verb | { <var:I> = <var:F> \land <var:f> = <nat:2> } <var:f> := <nat:2> + <var:f> * <var:I{ <var:I> = <var:F> \land <var:f> = <nat:2> \times <var:F> + <nat:2> } | . This is rigorously given using the assignment scheme given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:I> = <var:F> }} <var:f> := <nat:2> ; <var:f> := <nat:2> + <var:f> * <var:I> {{ <var:f> = <nat:2> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:f> = <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 