\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:Z> ; <var:r2> := <nat:1> ; <var:r2> := <var:r2> * <var:Z> ; <var:r2> := <var:r2> * <var:Z> ; <var:z> := <var:r2> ; <var:z> := <var:z> + <var:r1> ; <var:z> := <var:z> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume , for some integers $ <var:S> $ , $ <var:Z> = <var:S> $ before the evaluation of this segment of code , it holds that we have $ <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code can be done through Hoare techniques . Honing in on the subsequent statement seen in our list of instructions , we see the environment update command \verb | <var:r0> := <nat:9> ; | . This transfers $ \{ <var:Z> = <var:S> \} $ as $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \} $ . Advancing to the subsequent statement in the series of commands , we see the variable assignmet code \verb | <var:r1> := <nat:6> ; | . This redefines the precondition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \} $ into $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> \} $ . Focusing on the upcoming command contained in our list of instructions , we have the variable assignmet line letting $ <var:r1> * <var:Z> $ as $ <var:r1>$ . This moves the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> \} $ as the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \} $ . This is deduced by the assignment inference rule obtained from Hoare logic . Observing the following bit of code seen in our program , we have the binding command \verb | <var:r2> := <nat:1> ; | . This code takes the precondition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \} $ as the postcondition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:r2> = <nat:1> \} $ . This is rigorously given by the assignment law in standard Hoare techniques . Immediately after , the environment update statement giving $ <var:r2> * <var:Z> $ as $ <var:r2>$ . This redefines $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:r2> = <nat:1> \} $ to $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:r2> = <nat:1> * <var:S> \} $ . Immediately following , we see the variable update code \verb | <var:r2> := <var:r2> * <var:Z> ; | . This statement takes the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:r2> = <nat:1> * <var:S> \} $ toward the postcondition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:r2> = <nat:1> * <var:S> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law defined in standard Hoare techniques . Considering the upcoming line of code in our code , we have the variable assignmet command \verb | <var:z> := <var:r2> ; | . This command redefines the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:r2> = <nat:1> * <var:S> ^ <nat:2> \} $ to $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:z> = <nat:1> * <var:S> ^ <nat:2> \} $ . This is deduced by the assignment rule of typical Hoare logic . Considering the upcoming statement found in the code , we have the variable binding code \verb | <var:z> := <var:z> + <var:r1> ; | . This takes the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:r1> = <nat:6> * <var:S> \land <var:z> = <nat:1> * <var:S> ^ <nat:2> \} $ as the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> \} $ . This is deduced using the assignment scheme obtained from typical Hoare logic . Stepping through , the variable update code \verb | <var:z> := <var:z> + <var:r0> | . This redefines the condition $ \{ <var:Z> = <var:S> \land <var:r0> = <nat:9> \land <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> \} $ to the condition $ \{ <var:Z> = <var:S> \land <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> \} $ . This is ensured with the assignment scheme found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:9> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:Z> ; <var:r2> := <nat:1> ; <var:r2> := <var:r2> * <var:Z> ; <var:r2> := <var:r2> * <var:Z> ; <var:z> := <var:r2> ; <var:z> := <var:z> + <var:r1> ; <var:z> := <var:z> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Z> = <var:S> }} <def:poly> {{ <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> * <var:S> /\ <var:r2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> * <var:S> /\ <var:r2> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> * <var:S> /\ <var:r2> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:6> * <var:S> /\ <var:z> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:r0> = <nat:9> /\ <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:z> = <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 