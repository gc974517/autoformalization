\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:b> ; <var:Y2> := <nat:2> ; <var:Y2> := <var:Y2> * <var:b> ; <var:Y2> := <var:Y2> * <var:b> ; <var:g> := <var:Y2> ; <var:g> := <var:g> + <var:Y1> ; <var:g> := <var:g> + <var:Y0> \end{verbatim} Assuming that $ <var:b> = <var:E> $ prior to evaluating this series of instructions then $ <var:g> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:2> $ once code segment is done executing . \end{theorem} \begin{proof} The flow of logic for our list of instructions is given by typical Hoare reasoning . Looking at the proceeding steps found in the list of commands , we have \begin{verbatim} { <var:b> = <var:E> } <var:Y0> := <nat:2> { <var:b> = <var:E> \land <var:Y0> = <nat:2> } { <var:b> = <var:E> \land <var:Y0> = <nat:2> } <var:Y1> := <nat:1> { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> } { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> } <var:Y1> := <var:Y1> * <var:b> { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:E> } \end{verbatim} Focusing on the proceeding lines of codefound in the set of commands , we see \begin{verbatim} { <var:b> = <var:E> } <var:Y0> := <nat:2> { <var:b> = <var:E> \land <var:Y0> = <nat:2> } { <var:b> = <var:E> \land <var:Y0> = <nat:2> } <var:Y1> := <nat:1> { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> } { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> } <var:Y1> := <var:Y1> * <var:b> { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:E> } { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:E> } <var:Y2> := <nat:2> { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:E> \land <var:Y2> = <nat:2> } { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:E> \land <var:Y2> = <nat:2> } <var:Y2> := <var:Y2> * <var:b> { <var:b> = <var:E> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:1> * <var:E> \land <var:Y2> = <nat:2> * <var:E> } \end{verbatim} Paying attention to the subsequent command in the segment of code , \begin{verbatim} { <var:b> = <var:E> } <var:Y0> := <nat:2> { <var:b> = <var:E> \land <var:Y0> = <nat:2> } \end{verbatim} This is deduced through the binding rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:b> = <var:E> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:b> ; <var:Y2> := <nat:2> ; <var:Y2> := <var:Y2> * <var:b> ; <var:Y2> := <var:Y2> * <var:b> ; <var:g> := <var:Y2> ; <var:g> := <var:g> + <var:Y1> ; <var:g> := <var:g> + <var:Y0> {{ <var:g> = <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:E> /\ <var:Y2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:E> /\ <var:Y2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:E> /\ <var:Y2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:1> * <var:E> /\ <var:g> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Y0> = <nat:2> /\ <var:g> = <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:g> = <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 