\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:8> ; <var:F> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:K> = <var:k> $ ahead of the execution of this set of commands , it holds that $ <var:F> = <nat:8> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The application of usual Hoare logic results in : \begin{eqnarray} \{ <var:K> = <var:k> \} \\ <var:y0> := <nat:8> ; \\ \{ <var:K> = <var:k> \land <var:y0> = <nat:8> \} \\ <var:F> := <var:y0> \\ \{ <var:K> = <var:k> \land <var:F> = <nat:8> \} \end{eqnarray} As a consequence , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:8> ; <var:F> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:K> = <var:k> }} <def:poly> {{ <var:F> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:k> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:k> /\ <var:F> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 