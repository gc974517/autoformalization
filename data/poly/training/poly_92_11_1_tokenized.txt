\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:v> ; <var:J2> := <var:J1> * <var:v> ; <var:J3> := <var:J2> * <var:v> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:4> ; <var:J2> := <var:J2> * <nat:9> ; <var:J3> := <var:J3> * <nat:2> ; <var:l> := <var:J3> <var:l> := <var:l> + <var:J2> <var:l> := <var:l> + <var:J1> <var:l> := <var:l> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assume that we have $ <var:v> = <var:u> $ , with some $ <var:u> $ , prior to evaluating this series of commands it must be that we see $ <var:l> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:9> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:3> $ after set of commands is done executing . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:v> = <var:u> \} \\ <var:J1> := <var:v> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <var:u> \} \\ <var:J2> := <var:J1> * <var:v> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:v> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J0> = <nat:3> \} \\ <var:J1> := <var:J1> * <nat:4> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J0> = <nat:3> \} \\ <var:J2> := <var:J2> * <nat:9> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:9> \times <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J0> = <nat:3> \} \\ <var:J3> := <var:J3> * <nat:2> ; \\ \{ <var:v> = <var:u> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:9> \times <var:u> ^ <nat:2> \land <var:J3> = <nat:2> \times <var:u> ^ <nat:3> \land <var:J0> = <nat:3> \} \\ <var:l> := <var:J3> \\ \{ <var:v> = <var:u> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:9> \times <var:u> ^ <nat:2> \land <var:J0> = <nat:3> \land <var:l> = <nat:2> \times <var:u> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:J2> \\ \{ <var:v> = <var:u> \land <var:J1> = <nat:4> \times <var:u> \land <var:J0> = <nat:3> \land <var:l> = <nat:2> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:J1> \\ \{ <var:v> = <var:u> \land <var:J0> = <nat:3> \land <var:l> = <nat:2> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> \} \\ <var:l> := <var:l> + <var:J0> \\ \{ <var:v> = <var:u> \land <var:l> = <nat:2> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:3> \} \end{eqnarray} Given the preceding argument , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J1> := <var:v> ; <var:J2> := <var:J1> * <var:v> ; <var:J3> := <var:J2> * <var:v> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:4> ; <var:J2> := <var:J2> * <nat:9> ; <var:J3> := <var:J3> * <nat:2> ; <var:l> := <var:J3> <var:l> := <var:l> + <var:J2> <var:l> := <var:l> + <var:J1> <var:l> := <var:l> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:v> = <var:u> }} <def:poly> {{ <var:l> = <nat:2> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:u> ^ <nat:3> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:J0> = <nat:3> /\ <var:l> = <nat:2> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J0> = <nat:3> /\ <var:l> = <nat:2> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:J0> = <nat:3> /\ <var:l> = <nat:2> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:l> = <nat:2> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 