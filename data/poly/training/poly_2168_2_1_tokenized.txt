\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:5> ; <var:Z> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:S> = <var:m> $ --- given all whole numbers $ <var:m> $ --- ahead of the execution of the set of commands , it holds that $ <var:Z> = <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be accomplished through usual Hoare techniques . Now , the variable assignmet statement defining $ <nat:5> $ to $ <var:z0>$ . This transfers $ \{ <var:S> = <var:m> \} $ as the condition $ \{ <var:S> = <var:m> \land <var:z0> = <nat:5> \} $ . Jumping to the upcoming line of code found in our program , the variable update command \verb | <var:Z> := <var:z0> | . This command takes the precondition $ \{ <var:S> = <var:m> \land <var:z0> = <nat:5> \} $ toward $ \{ <var:S> = <var:m> \land <var:Z> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:5> ; <var:Z> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:S> = <var:m> }} <def:poly> {{ <var:Z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:m> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:m> /\ <var:Z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 