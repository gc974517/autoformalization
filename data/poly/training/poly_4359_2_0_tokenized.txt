\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:3> ; <var:R> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assume that we have $ <var:V> = <var:v> $ ( for some natural coefficients $ <var:v> $ ) before evaluating this series of instructions it holds that $ <var:R> = <nat:3> $ once code has terminated . \end{theorem} \begin{proof} The course of logic for the code can be seen using this decorated series of instructions . \begin{eqnarray} \{ <var:V> = <var:v> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:V> = <var:v> \land <var:b0> = <nat:3> \} \\ <var:R> := <var:b0> \\ \{ <var:V> = <var:v> \land <var:R> = <nat:3> \} \end{eqnarray} Applying typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:3> ; <var:R> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:V> = <var:v> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 