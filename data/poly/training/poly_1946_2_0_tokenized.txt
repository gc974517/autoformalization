\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:6> ; <var:x> := <var:y0> \end{verbatim} Allowing , given some positive integer coefficients $ <var:J> $ , it to be that $ <var:T> = <var:J> $ before the evaluation of this code segment , it follows that we see $ <var:x> = <nat:6> $ when series of instructions has finished executing . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:T> = <var:J> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:T> = <var:J> \land <var:y0> = <nat:6> \} \\ <var:x> := <var:y0> \\ \{ <var:T> = <var:J> \land <var:x> = <nat:6> \} \end{eqnarray} Considering the preceding argument , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:T> = <var:J> }} <var:y0> := <nat:6> ; <var:x> := <var:y0> {{ <var:x> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:x> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 