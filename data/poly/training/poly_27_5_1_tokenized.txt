\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:n> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:8> ; <var:y> := <var:D1> <var:y> := <var:y> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:n> = <var:B> $ --- given any whole numbers $ <var:B> $ --- ahead of the evaluation of our list of commands then we see $ <var:y> = <nat:8> \times <var:B> + <nat:2> $ once list of instructions has terminated . \end{theorem} \begin{proof} The course of logic for this code is shown by standard Hoare techniques . Going to the next step , we have \verb | { <var:n> = <var:B> } <var:D1> := <var:n> { <var:n> = <var:B> \land <var:D1> = <var:B> } | , \verb | { <var:n> = <var:B> \land <var:D1> = <var:B> } <var:D0> := <nat:2> { <var:n> = <var:B> \land <var:D1> = <var:B> \land <var:D0> = <nat:2> } | and \verb | { <var:n> = <var:B> \land <var:D1> = <var:B> \land <var:D0> = <nat:2> } <var:D1> := <var:D1> * <nat:8> { <var:n> = <var:B> \land <var:D1> = <nat:8> * <var:B> \land <var:D0> = <nat:2> } | . This is known to be sound by the inference rule defined by typical Hoare reasoning . Moving forward to the proceeding steps found in the list of instructions , we have \verb | { <var:n> = <var:B> } <var:D1> := <var:n> { <var:n> = <var:B> \land <var:D1> = <var:B> } | and \verb | { <var:n> = <var:B> \land <var:D1> = <var:B> } <var:D0> := <nat:2> { <var:n> = <var:B> \land <var:D1> = <var:B> \land <var:D0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:n> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:8> ; <var:y> := <var:D1> <var:y> := <var:y> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:n> = <var:B> }} <def:poly> {{ <var:y> = <nat:8> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:D1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:D1> = <var:B> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:D1> = <nat:8> * <var:B> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:D0> = <nat:2> /\ <var:y> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:y> = <nat:8> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 