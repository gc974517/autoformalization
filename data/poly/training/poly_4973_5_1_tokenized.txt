\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:a> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:A> := <var:Z1> <var:A> := <var:A> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:a> = <var:G> $ prior to interpreting the list of commands it follows that we have $ <var:A> = <nat:4> \times <var:G> + <nat:1> $ once list of commands terminates . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:a> = <var:G> \} \\ <var:Z1> := <var:a> ; \\ \{ <var:a> = <var:G> \land <var:Z1> = <var:G> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:a> = <var:G> \land <var:Z1> = <var:G> \land <var:Z0> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <nat:4> ; \\ \{ <var:a> = <var:G> \land <var:Z1> = <nat:4> \times <var:G> \land <var:Z0> = <nat:1> \} \\ <var:A> := <var:Z1> \\ \{ <var:a> = <var:G> \land <var:Z0> = <nat:1> \land <var:A> = <nat:4> \times <var:G> \} \\ <var:A> := <var:A> + <var:Z0> \\ \{ <var:a> = <var:G> \land <var:A> = <nat:4> \times <var:G> + <nat:1> \} \end{eqnarray} Given the above , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:a> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:A> := <var:Z1> <var:A> := <var:A> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:a> = <var:G> }} <def:poly> {{ <var:A> = <nat:4> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:Z1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:Z1> = <var:G> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:Z1> = <nat:4> * <var:G> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:Z0> = <nat:1> /\ <var:A> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:A> = <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 