\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:3> ; <var:d> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:n> = <var:m> $ prior to executing our series of commands , then we have $ <var:d> = <nat:3> $ once list of commands terminates . \end{theorem} \begin{proof} The proof of our series of commands is done using Hoare techniques . Looking at the subsequent piece of code found in our series of commands , the statement \verb | <var:i0> := <nat:3> ; | . This command moves $ \{ <var:n> = <var:m> \} $ into $ \{ <var:n> = <var:m> \land <var:i0> = <nat:3> \} $ . This is sound through the assignment law found in Hoare logic . Moving on , we have the environment update code \verb | <var:d> := <var:i0> | . This forwards $ \{ <var:n> = <var:m> \land <var:i0> = <nat:3> \} $ toward the postcondition $ \{ <var:n> = <var:m> \land <var:d> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:d> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:n> = <var:m> }} <def:poly> {{ <var:d> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:d> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 