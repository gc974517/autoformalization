\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:1> + <var:t> * <var:p> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:2> + <var:t> * <var:p> ; <var:t> := <var:t> * <var:p> ; <var:t> := <var:t> * <var:p> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:2> + <var:t> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Allow that $ <var:p> = <var:X> $ prior to interpreting this series of commands it holds that we have $ <var:t> = <nat:2> \times <var:X> ^ <nat:8> + <nat:3> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this program can be accomplished with the below decorated code segment . \begin{eqnarray} \{ <var:p> = <var:X> \} \\ <var:t> := <nat:2> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \} \\ <var:t> := <nat:3> + <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> + <nat:3> \} \\ <var:t> := <nat:1> + <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:1> \} \\ <var:t> := <nat:3> + <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:3> \} \\ <var:t> := <nat:2> + <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:2> \} \\ <var:t> := <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + \} \\ <var:t> := <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + \} \\ <var:t> := <nat:3> + <var:t> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:7> + <nat:3> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:3> \} \\ <var:t> := <nat:2> + <var:t> * <var:p> \\ \{ <var:p> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:8> + <nat:3> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:2> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:1> + <var:t> * <var:p> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:2> + <var:t> * <var:p> ; <var:t> := <var:t> * <var:p> ; <var:t> := <var:t> * <var:p> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:2> + <var:t> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:p> = <var:X> }} <def:poly> {{ <var:t> = <nat:2> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:3> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 