\begin{document} \begin{theorem} Define the following list of instructions : \begin{verbatim} <var:H0> := <nat:1> ; <var:b> := <var:H0> \end{verbatim} Allow $ <var:w> = <var:C> $ ahead of the evaluation of this list of commands it must be that we have $ <var:b> = <nat:1> $ once code has executed . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code can be shown with typical Hoare reasoning . Advancing , \begin{eqnarray} \{ <var:w> = <var:C> \} \, <var:H0> := <nat:1> \, \{ <var:w> = <var:C> \land <var:H0> = <nat:1> \} \end{eqnarray} Paying attention to the following line seen in our list of commands , we see \begin{eqnarray} \{ <var:w> = <var:C> \} \, <var:H0> := <nat:1> \, \{ <var:w> = <var:C> \land <var:H0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:w> = <var:C> }} <var:H0> := <nat:1> ; <var:b> := <var:H0> {{ <var:b> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:b> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 