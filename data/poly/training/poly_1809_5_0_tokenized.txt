\begin{document} \begin{theorem} Consider a series of instructions as \begin{verbatim} <var:g0> := <nat:4> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:S> ; <var:C> := <var:g1> ; <var:C> := <var:C> + <var:g0> \end{verbatim} Allow --- given some positive numbers $ <var:P> $ --- $ <var:S> = <var:P> $ ahead of the evaluation of the segment of code , then $ <var:C> = <nat:1> \times <var:P> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be demonstrated by the below decorated series of commands . \begin{eqnarray} \{ <var:S> = <var:P> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:S> = <var:P> \land <var:g0> = <nat:4> \} \\ <var:g1> := <nat:1> ; \\ \{ <var:S> = <var:P> \land <var:g0> = <nat:4> \land <var:g1> = <nat:1> \} \\ <var:g1> := <var:g1> * <var:S> ; \\ \{ <var:S> = <var:P> \land <var:g0> = <nat:4> \land <var:g1> = <nat:1> \times <var:P> \} \\ <var:C> := <var:g1> ; \\ \{ <var:S> = <var:P> \land <var:g0> = <nat:4> \land <var:C> = <nat:1> \times <var:P> \} \\ <var:C> := <var:C> + <var:g0> \\ \{ <var:S> = <var:P> \land <var:C> = <nat:1> \times <var:P> + <nat:4> \} \end{eqnarray} Applying Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:S> = <var:P> }} <var:g0> := <nat:4> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:S> ; <var:C> := <var:g1> ; <var:C> := <var:C> + <var:g0> {{ <var:C> = <nat:1> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:g0> = <nat:4> /\ <var:C> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:C> = <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 