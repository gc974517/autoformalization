\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:g> ; <var:R> := <var:H1> ; <var:R> := <var:R> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:g> = <var:E> $ prior to running the series of instructions , it must be that we see $ <var:R> = <nat:5> * <var:E> + <nat:5> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:g> = <var:E> \} \\ <var:H0> := <nat:5> ; \\ \{ <var:g> = <var:E> \land <var:H0> = <nat:5> \} \\ <var:H1> := <nat:5> ; \\ \{ <var:g> = <var:E> \land <var:H0> = <nat:5> \land <var:H1> = <nat:5> \} \\ <var:H1> := <var:H1> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:H0> = <nat:5> \land <var:H1> = <nat:5> \cdot <var:E> \} \\ <var:R> := <var:H1> ; \\ \{ <var:g> = <var:E> \land <var:H0> = <nat:5> \land <var:R> = <nat:5> \cdot <var:E> \} \\ <var:R> := <var:R> + <var:H0> \\ \{ <var:g> = <var:E> \land <var:R> = <nat:5> \cdot <var:E> + <nat:5> \} \end{eqnarray} Thus , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:g> ; <var:R> := <var:H1> ; <var:R> := <var:R> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:g> = <var:E> }} <def:poly> {{ <var:R> = <nat:5> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:H0> = <nat:5> /\ <var:R> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:R> = <nat:5> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 