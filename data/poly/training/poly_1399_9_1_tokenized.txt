\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:t> ; <var:q2> := <var:q1> * <var:t> ; <var:q3> := <var:q2> * <var:t> ; <var:q0> := <nat:9> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:6> ; <var:I> := <var:q3> <var:I> := <var:I> + <var:q2> <var:I> := <var:I> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:t> = <var:D> $ prior to evaluating our code , it holds that we have $ <var:I> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> + <nat:9> $ once set of instructions is done executing . \end{theorem} \begin{proof} The course of logic for this code is demonstrated using usual Hoare techniques . Moving forward to the proceeding line of code in our code segment , the assignment statement letting $ <var:t> $ to $ <var:q1>$ . This forwards the condition $ \{ <var:t> = <var:D> \} $ to $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \} $ . Moving on to the next step , we have the variable assignmet command \verb | <var:q2> := <var:q1> * <var:t> ; | . This command forwards the condition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \} $ to $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \} $ . This is given using the assignment inference rule obtained from Hoare techniques . Jumping to the proceeding step found in our series of commands , we see the binding statement giving $ <var:q2> * <var:t> $ to $ <var:q3>$ . This code redefines $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \} $ toward $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \} $ . This is shown using the assignment law defined in usual Hoare logic . Jumping to the next bit of code in the code segment , we have the binding code \verb | <var:q0> := <nat:9> ; | . This transfers the condition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \} $ toward the condition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q0> = <nat:9> \} $ . Stepping forward , we see the variable update line defining $ <var:q2> * <nat:7> $ as $ <var:q2>$ . This redefines $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q0> = <nat:9> \} $ toward $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q0> = <nat:9> \} $ . Moving on to the proceeding bit of code in our code segment , we have the binding command \verb | <var:q3> := <var:q3> * <nat:6> ; | . This statement transfers the precondition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q0> = <nat:9> \} $ as the postcondition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:D> ^ <nat:3> \land <var:q0> = <nat:9> \} $ . Moving on to the next step , we have the environment update statement \verb | <var:I> := <var:q3> | . This command redefines the condition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:D> ^ <nat:3> \land <var:q0> = <nat:9> \} $ to $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:q0> = <nat:9> \land <var:I> = <nat:6> \cdot <var:D> ^ <nat:3> \} $ . Going to the next step , we see the variable binding code yielding $ <var:I> + <var:q2$ toward $ <var:I>$ . This forwards $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:q0> = <nat:9> \land <var:I> = <nat:6> \cdot <var:D> ^ <nat:3> \} $ to the postcondition $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q0> = <nat:9> \land <var:I> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> \} $ . Taking a look at the following bit of code found in our series of instructions , the environment update statement \verb | <var:I> := <var:I> + <var:q0> | . This line advances $ \{ <var:t> = <var:D> \land <var:q1> = <var:D> \land <var:q0> = <nat:9> \land <var:I> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> \} $ toward the postcondition $ \{ <var:t> = <var:D> \land <var:I> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:t> ; <var:q2> := <var:q1> * <var:t> ; <var:q3> := <var:q2> * <var:t> ; <var:q0> := <nat:9> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:6> ; <var:I> := <var:q3> <var:I> := <var:I> + <var:q2> <var:I> := <var:I> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:t> = <var:D> }} <def:poly> {{ <var:I> = <nat:6> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <var:D> ^ <nat:3> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:q3> = <var:D> ^ <nat:3> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:D> ^ <nat:3> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:q0> = <nat:9> /\ <var:I> = <nat:6> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:q1> = <var:D> /\ <var:q0> = <nat:9> /\ <var:I> = <nat:6> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:I> = <nat:6> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 