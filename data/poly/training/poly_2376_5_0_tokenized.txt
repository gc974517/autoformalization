\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:I0> := <nat:1> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:g> ; <var:E> := <var:I1> ; <var:E> := <var:E> + <var:I0> \end{verbatim} Given it to be that $ <var:g> = <var:M> $ for any positive integers $ <var:M> $ prior to interpreting this series of instructions , it follows that we have $ <var:E> = <nat:7> \cdot <var:M> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:M> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:g> = <var:M> \land <var:I0> = <nat:1> \} \\ <var:I1> := <nat:7> ; \\ \{ <var:g> = <var:M> \land <var:I0> = <nat:1> \land <var:I1> = <nat:7> \} \\ <var:I1> := <var:I1> * <var:g> ; \\ \{ <var:g> = <var:M> \land <var:I0> = <nat:1> \land <var:I1> = <nat:7> \times <var:M> \} \\ <var:E> := <var:I1> ; \\ \{ <var:g> = <var:M> \land <var:I0> = <nat:1> \land <var:E> = <nat:7> \times <var:M> \} \\ <var:E> := <var:E> + <var:I0> \\ \{ <var:g> = <var:M> \land <var:E> = <nat:7> \times <var:M> + <nat:1> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:g> = <var:M> }} <var:I0> := <nat:1> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:g> ; <var:E> := <var:I1> ; <var:E> := <var:E> + <var:I0> {{ <var:E> = <nat:7> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:I0> = <nat:1> /\ <var:E> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:E> = <nat:7> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 