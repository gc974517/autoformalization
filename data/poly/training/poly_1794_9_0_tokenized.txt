\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:a> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:a> ; <var:j2> := <var:j2> * <var:a> ; <var:J> := <var:j2> ; <var:J> := <var:J> + <var:j1> ; <var:J> := <var:J> + <var:j0> \end{verbatim} Assuming --- for any whole numbers $ <var:c> $ --- it to hold that $ <var:a> = <var:c> $ before evaluating the segment of code then $ <var:J> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> + <nat:9> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:a> = <var:c> \} \\ <var:j0> := <nat:9> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \} \\ <var:j1> := <nat:5> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> \} \\ <var:j1> := <var:j1> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> * <var:c> \} \\ <var:j2> := <nat:5> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> * <var:c> \land <var:j2> = <nat:5> \} \\ <var:j2> := <var:j2> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> * <var:c> \land <var:j2> = <nat:5> * <var:c> \} \\ <var:j2> := <var:j2> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> * <var:c> \land <var:j2> = <nat:5> * <var:c> ^ <nat:2> \} \\ <var:J> := <var:j2> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> * <var:c> \land <var:J> = <nat:5> * <var:c> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:j1> ; \\ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \land <var:J> = <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> \} \\ <var:J> := <var:J> + <var:j0> \\ \{ <var:a> = <var:c> \land <var:J> = <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:9> \} \end{eqnarray} Given the above , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:a> = <var:c> }} <var:j0> := <nat:9> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:a> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:a> ; <var:j2> := <var:j2> * <var:a> ; <var:J> := <var:j2> ; <var:J> := <var:J> + <var:j1> ; <var:J> := <var:J> + <var:j0> {{ <var:J> = <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> * <var:c> /\ <var:j2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> * <var:c> /\ <var:j2> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> * <var:c> /\ <var:j2> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> * <var:c> /\ <var:J> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> /\ <var:J> = <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:J> = <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 