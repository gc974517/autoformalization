\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:q> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:1> ; <var:u> := <var:y1> <var:u> := <var:u> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assuming $ <var:q> = <var:x> $ prior to executing this series of commands , it follows that we see $ <var:u> = <nat:1> \times <var:x> + <nat:2> $ after list of commands has executed . \end{theorem} \begin{proof} The argument for this set of instructions is demonstrated through standard Hoare reasoning . Going to the next step , we have the variable assignmet command \verb | <var:y1> := <var:q> ; | . This forwards the precondition $ \{ <var:q> = <var:x> \} $ toward $ \{ <var:q> = <var:x> \land <var:y1> = <var:x> \} $ . Advancing on , the variable update command assigning $ <nat:2> $ to $ <var:y0>$ . This moves the precondition $ \{ <var:q> = <var:x> \land <var:y1> = <var:x> \} $ as $ \{ <var:q> = <var:x> \land <var:y1> = <var:x> \land <var:y0> = <nat:2> \} $ . Advancing to the subsequent command found in our set of instructions , the variable binding code \verb | <var:y1> := <var:y1> * <nat:1> ; | . This takes $ \{ <var:q> = <var:x> \land <var:y1> = <var:x> \land <var:y0> = <nat:2> \} $ to the condition $ \{ <var:q> = <var:x> \land <var:y1> = <nat:1> \times <var:x> \land <var:y0> = <nat:2> \} $ . This is shown with the assignment scheme given by Hoare reasoning . Moving on to the next step , we see the variable assignmet statement yielding $ <var:y1$ to $ <var:u>$ . This command moves $ \{ <var:q> = <var:x> \land <var:y1> = <nat:1> \times <var:x> \land <var:y0> = <nat:2> \} $ as the condition $ \{ <var:q> = <var:x> \land <var:y0> = <nat:2> \land <var:u> = <nat:1> \times <var:x> \} $ . Following , we have the variable update line yielding $ <var:u> + <var:y0$ to $ <var:u>$ . This command forwards the precondition $ \{ <var:q> = <var:x> \land <var:y0> = <nat:2> \land <var:u> = <nat:1> \times <var:x> \} $ as the condition $ \{ <var:q> = <var:x> \land <var:u> = <nat:1> \times <var:x> + <nat:2> \} $ . This is given using the assignment law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:q> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:1> ; <var:u> := <var:y1> <var:u> := <var:u> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:q> = <var:x> }} <def:poly> {{ <var:u> = <nat:1> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:y1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:y1> = <var:x> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:y1> = <nat:1> * <var:x> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:y0> = <nat:2> /\ <var:u> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:u> = <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 