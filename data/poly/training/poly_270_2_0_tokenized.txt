\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:2> ; <var:H> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allow given every $ <var:i> \in \mathbb{Z}^+ $ it to be that $ <var:g> = <var:i> $ before running our set of instructions it follows that $ <var:H> = <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be given through typical Hoare logic . Going forward , we see the variable binding line binding $ <nat:2> $ into $ <var:R0>$ . This moves the precondition $ \{ <var:g> = <var:i> \} $ toward the condition $ \{ <var:g> = <var:i> \land <var:R0> = <nat:2> \} $ . After , the variable assignmet statement letting $ <var:R0$ as $ <var:H>$ . This takes $ \{ <var:g> = <var:i> \land <var:R0> = <nat:2> \} $ to the condition $ \{ <var:g> = <var:i> \land <var:H> = <nat:2> \} $ . This is given through the assignment inference rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:2> ; <var:H> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:g> = <var:i> }} <def:poly> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 