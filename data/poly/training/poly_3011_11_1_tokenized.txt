\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:S> ; <var:N2> := <var:N1> * <var:S> ; <var:N3> := <var:N2> * <var:S> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:1> ; <var:N2> := <var:N2> * <nat:6> ; <var:N3> := <var:N3> * <nat:7> ; <var:j> := <var:N3> <var:j> := <var:j> + <var:N2> <var:j> := <var:j> + <var:N1> <var:j> := <var:j> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Given , given all natural numbers $ <var:G> $ , it to hold that $ <var:S> = <var:G> $ before interpreting this set of commands it must be that we have $ <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> $ once list of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:G> \} \\ <var:N1> := <var:S> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <var:G> \} \\ <var:N2> := <var:N1> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <var:G> \land <var:N2> = <var:G> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <var:G> \land <var:N2> = <var:G> ^ <nat:2> \land <var:N3> = <var:G> ^ <nat:3> \} \\ <var:N0> := <nat:5> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <var:G> \land <var:N2> = <var:G> ^ <nat:2> \land <var:N3> = <var:G> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:N1> := <var:N1> * <nat:1> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <nat:1> * <var:G> \land <var:N2> = <var:G> ^ <nat:2> \land <var:N3> = <var:G> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:N2> := <var:N2> * <nat:6> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <nat:1> * <var:G> \land <var:N2> = <nat:6> * <var:G> ^ <nat:2> \land <var:N3> = <var:G> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:N3> := <var:N3> * <nat:7> ; \\ \{ <var:S> = <var:G> \land <var:N1> = <nat:1> * <var:G> \land <var:N2> = <nat:6> * <var:G> ^ <nat:2> \land <var:N3> = <nat:7> * <var:G> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:j> := <var:N3> \\ \{ <var:S> = <var:G> \land <var:N1> = <nat:1> * <var:G> \land <var:N2> = <nat:6> * <var:G> ^ <nat:2> \land <var:N0> = <nat:5> \land <var:j> = <nat:7> * <var:G> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:N2> \\ \{ <var:S> = <var:G> \land <var:N1> = <nat:1> * <var:G> \land <var:N0> = <nat:5> \land <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:N1> \\ \{ <var:S> = <var:G> \land <var:N0> = <nat:5> \land <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> \} \\ <var:j> := <var:j> + <var:N0> \\ \{ <var:S> = <var:G> \land <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> \} \end{eqnarray} Using typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:S> ; <var:N2> := <var:N1> * <var:S> ; <var:N3> := <var:N2> * <var:S> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:1> ; <var:N2> := <var:N2> * <nat:6> ; <var:N3> := <var:N3> * <nat:7> ; <var:j> := <var:N3> <var:j> := <var:j> + <var:N2> <var:j> := <var:j> + <var:N1> <var:j> := <var:j> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:S> = <var:G> }} <def:poly> {{ <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <var:G> /\ <var:N2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <var:G> /\ <var:N2> = <var:G> ^ <nat:2> /\ <var:N3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <var:G> /\ <var:N2> = <var:G> ^ <nat:2> /\ <var:N3> = <var:G> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <nat:1> * <var:G> /\ <var:N2> = <var:G> ^ <nat:2> /\ <var:N3> = <var:G> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <nat:1> * <var:G> /\ <var:N2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:N3> = <var:G> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <nat:1> * <var:G> /\ <var:N2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:G> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <nat:1> * <var:G> /\ <var:N2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:N0> = <nat:5> /\ <var:j> = <nat:7> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N1> = <nat:1> * <var:G> /\ <var:N0> = <nat:5> /\ <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:N0> = <nat:5> /\ <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:j> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 