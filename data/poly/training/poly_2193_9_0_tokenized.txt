\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:y> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:y> ; <var:v2> := <var:v2> * <var:y> ; <var:N> := <var:v2> ; <var:N> := <var:N> + <var:v1> ; <var:N> := <var:N> + <var:v0> \end{verbatim} Assume it to hold that $ <var:y> = <var:u> $ prior to executing the series of instructions , it holds that we have $ <var:N> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:u> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \} \\ <var:v1> := <nat:2> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \} \\ <var:v1> := <var:v1> * <var:y> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> * <var:u> \} \\ <var:v2> := <nat:7> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> * <var:u> \land <var:v2> = <nat:7> \} \\ <var:v2> := <var:v2> * <var:y> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> * <var:u> \land <var:v2> = <nat:7> * <var:u> \} \\ <var:v2> := <var:v2> * <var:y> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> * <var:u> \land <var:v2> = <nat:7> * <var:u> ^ <nat:2> \} \\ <var:N> := <var:v2> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> * <var:u> \land <var:N> = <nat:7> * <var:u> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:v1> ; \\ \{ <var:y> = <var:u> \land <var:v0> = <nat:1> \land <var:N> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> \} \\ <var:N> := <var:N> + <var:v0> \\ \{ <var:y> = <var:u> \land <var:N> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> \} \end{eqnarray} Thusly , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:y> = <var:u> }} <var:v0> := <nat:1> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:y> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:y> ; <var:v2> := <var:v2> * <var:y> ; <var:N> := <var:v2> ; <var:N> := <var:N> + <var:v1> ; <var:N> := <var:N> + <var:v0> {{ <var:N> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:u> /\ <var:v2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:u> /\ <var:v2> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:u> /\ <var:v2> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:u> /\ <var:N> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:v0> = <nat:1> /\ <var:N> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:N> = <nat:7> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 