\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:L0> := <nat:1> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:U> ; <var:O> := <var:L1> ; <var:O> := <var:O> + <var:L0> \end{verbatim} Assume that we have $ <var:U> = <var:r> $ ( taking natural numbers $ <var:r> $ ) prior to the evaluation of this program , it must be that we see $ <var:O> = <nat:2> * <var:r> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this set of commands is clear with typical Hoare logic . Focusing on the upcoming piece of code in our set of instructions , the variable assignmet command defining $ <nat:1> $ into $ <var:L0>$ . This forwards the condition $ \{ <var:U> = <var:r> \} $ toward the postcondition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \} $ . Considering the proceeding line seen in the series of commands , the assignment code giving $ <nat:2> $ toward $ <var:L1>$ . This forwards the condition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \} $ toward $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \} $ . Moving forward to the next bit of code found in our series of commands , we see the binding line \verb | <var:L1> := <var:L1> * <var:U> ; | . This redefines the condition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> * <var:r> \} $ . Moving on , the command \verb | <var:O> := <var:L1> ; | . This redefines the precondition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> * <var:r> \} $ toward the condition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \land <var:O> = <nat:2> * <var:r> \} $ . This is given through the assignment law obtained from usual Hoare reasoning . Advancing to the next step , the variable assignmet code letting $ <var:O> + <var:L0$ toward $ <var:O>$ . This moves the precondition $ \{ <var:U> = <var:r> \land <var:L0> = <nat:1> \land <var:O> = <nat:2> * <var:r> \} $ as $ \{ <var:U> = <var:r> \land <var:O> = <nat:2> * <var:r> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <var:L0> := <nat:1> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:U> ; <var:O> := <var:L1> ; <var:O> := <var:O> + <var:L0> {{ <var:O> = <nat:2> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:L0> = <nat:1> /\ <var:O> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:O> = <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 