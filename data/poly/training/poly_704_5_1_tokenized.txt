\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:r> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:5> ; <var:o> := <var:e1> <var:o> := <var:o> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given given every positive numbers $ <var:i> $ it to be that $ <var:r> = <var:i> $ before the execution of the segment of code it holds that we have $ <var:o> = <nat:5> \cdot <var:i> + <nat:7> $ once set of commands has finished executing . \end{theorem} \begin{proof} The method of proof for the list of commands is demonstrated with usual Hoare logic . Moving forward to the following pieces of code found in the code segment , we have \begin{verbatim} { <var:r> = <var:i> } <var:e1> := <var:r> { <var:r> = <var:i> \land <var:e1> = <var:i> } { <var:r> = <var:i> \land <var:e1> = <var:i> } <var:e0> := <nat:7> { <var:r> = <var:i> \land <var:e1> = <var:i> \land <var:e0> = <nat:7> } { <var:r> = <var:i> \land <var:e1> = <var:i> \land <var:e0> = <nat:7> } <var:e1> := <var:e1> * <nat:5> { <var:r> = <var:i> \land <var:e1> = <nat:5> \cdot <var:i> \land <var:e0> = <nat:7> } { <var:r> = <var:i> \land <var:e1> = <nat:5> \cdot <var:i> \land <var:e0> = <nat:7> } <var:o> := <var:e1{ <var:r> = <var:i> \land <var:e0> = <nat:7> \land <var:o> = <nat:5> \cdot <var:i> } \end{verbatim} This is guaranteed through the variable assignmet law from Hoare reasoning . Next , we see \begin{verbatim} { <var:r> = <var:i> } <var:e1> := <var:r> { <var:r> = <var:i> \land <var:e1> = <var:i> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:r> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:5> ; <var:o> := <var:e1> <var:o> := <var:o> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:r> = <var:i> }} <def:poly> {{ <var:o> = <nat:5> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:e1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:e1> = <var:i> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:e1> = <nat:5> * <var:i> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:e0> = <nat:7> /\ <var:o> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:o> = <nat:5> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 