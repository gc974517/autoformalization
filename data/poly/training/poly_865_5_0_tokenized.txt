\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:6> ; <var:Y1> := <var:Y1> * <var:C> ; <var:U> := <var:Y1> ; <var:U> := <var:U> + <var:Y0> \end{verbatim} Assuming $ <var:C> = <var:J> $ before interpreting this set of commands it must be that $ <var:U> = <nat:6> * <var:J> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:J> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:C> = <var:J> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <nat:6> ; \\ \{ <var:C> = <var:J> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:6> \} \\ <var:Y1> := <var:Y1> * <var:C> ; \\ \{ <var:C> = <var:J> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:6> \times <var:J> \} \\ <var:U> := <var:Y1> ; \\ \{ <var:C> = <var:J> \land <var:Y0> = <nat:2> \land <var:U> = <nat:6> \times <var:J> \} \\ <var:U> := <var:U> + <var:Y0> \\ \{ <var:C> = <var:J> \land <var:U> = <nat:6> \times <var:J> + <nat:2> \} \end{eqnarray} Using Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:C> = <var:J> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:6> ; <var:Y1> := <var:Y1> * <var:C> ; <var:U> := <var:Y1> ; <var:U> := <var:U> + <var:Y0> {{ <var:U> = <nat:6> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:Y0> = <nat:2> /\ <var:U> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:U> = <nat:6> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 