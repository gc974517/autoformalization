\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:2> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:u> ; <var:i> := <var:m1> ; <var:i> := <var:i> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:u> = <var:O> $ before executing our segment of code it holds that $ <var:i> = <nat:1> \times <var:O> + <nat:2> $ after code executes . \end{theorem} \begin{proof} Arguing the correctness of our code segment is evident with Hoare logic . After , \begin{verbatim} { <var:u> = <var:O> } <var:m0> := <nat:2> { <var:u> = <var:O> \land <var:m0> = <nat:2> } { <var:u> = <var:O> \land <var:m0> = <nat:2> } <var:m1> := <nat:1> { <var:u> = <var:O> \land <var:m0> = <nat:2> \land <var:m1> = <nat:1> } { <var:u> = <var:O> \land <var:m0> = <nat:2> \land <var:m1> = <nat:1> } <var:m1> := <var:m1> * <var:u> { <var:u> = <var:O> \land <var:m0> = <nat:2> \land <var:m1> = <nat:1> \times <var:O> } { <var:u> = <var:O> \land <var:m0> = <nat:2> \land <var:m1> = <nat:1> \times <var:O> } <var:i> := <var:m1> { <var:u> = <var:O> \land <var:m0> = <nat:2> \land <var:i> = <nat:1> \times <var:O> } { <var:u> = <var:O> \land <var:m0> = <nat:2> \land <var:i> = <nat:1> \times <var:O> } <var:i> := <var:i> + <var:m0{ <var:u> = <var:O> \land <var:i> = <nat:1> \times <var:O> + <nat:2> } \end{verbatim} This is guaranteed by the rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:u> ; <var:i> := <var:m1> ; <var:i> := <var:i> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:u> = <var:O> }} <def:poly> {{ <var:i> = <nat:1> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:m0> = <nat:2> /\ <var:i> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:i> = <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 