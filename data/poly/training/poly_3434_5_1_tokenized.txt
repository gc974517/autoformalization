\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:w1> := <var:z> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:9> ; <var:D> := <var:w1> <var:D> := <var:D> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Allowing it to be that $ <var:z> = <var:f> $ prior to executing the series of commands , it holds that $ <var:D> = <nat:9> * <var:f> + <nat:3> $ . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:z> = <var:f> \} \\ <var:w1> := <var:z> ; \\ \{ <var:z> = <var:f> \land <var:w1> = <var:f> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:z> = <var:f> \land <var:w1> = <var:f> \land <var:w0> = <nat:3> \} \\ <var:w1> := <var:w1> * <nat:9> ; \\ \{ <var:z> = <var:f> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w0> = <nat:3> \} \\ <var:D> := <var:w1> \\ \{ <var:z> = <var:f> \land <var:w0> = <nat:3> \land <var:D> = <nat:9> \cdot <var:f> \} \\ <var:D> := <var:D> + <var:w0> \\ \{ <var:z> = <var:f> \land <var:D> = <nat:9> \cdot <var:f> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:z> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:9> ; <var:D> := <var:w1> <var:D> := <var:D> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:z> = <var:f> }} <def:poly> {{ <var:D> = <nat:9> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:w1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:w1> = <var:f> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:w1> = <nat:9> * <var:f> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:w0> = <nat:3> /\ <var:D> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:D> = <nat:9> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 