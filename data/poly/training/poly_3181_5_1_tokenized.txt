\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:w1> := <var:X> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:7> ; <var:K> := <var:w1> <var:K> := <var:K> + <var:w0> \end{verbatim} Given that we have $ <var:X> = <var:H> $ for any $ <var:H> $ before the execution of our set of instructions , then $ <var:K> = <nat:7> \cdot <var:H> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is clear with usual Hoare reasoning . Stepping through , \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:w1> := <var:X> & \{ <var:X> = <var:H> \land <var:w1> = <var:H> \} \\ \{ <var:X> = <var:H> \land <var:w1> = <var:H> \} & <var:w0> := <nat:9> & \{ <var:X> = <var:H> \land <var:w1> = <var:H> \land <var:w0> = <nat:9> \} \end{tabular} This is ensured by the variable binding inference rule of standard Hoare reasoning . Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:w1> := <var:X> & \{ <var:X> = <var:H> \land <var:w1> = <var:H> \} \\ \{ <var:X> = <var:H> \land <var:w1> = <var:H> \} & <var:w0> := <nat:9> & \{ <var:X> = <var:H> \land <var:w1> = <var:H> \land <var:w0> = <nat:9> \} \end{tabular} This is shown with the rule defined in standard Hoare logic . Honing in on the upcoming statement contained in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:w1> := <var:X> & \{ <var:X> = <var:H> \land <var:w1> = <var:H> \} \end{tabular} This is ensured with the law of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:X> = <var:H> }} <var:w1> := <var:X> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:7> ; <var:K> := <var:w1> <var:K> := <var:K> + <var:w0> {{ <var:K> = <nat:7> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:w1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:w1> = <var:H> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:w1> = <nat:7> * <var:H> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:w0> = <nat:9> /\ <var:K> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:K> = <nat:7> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 