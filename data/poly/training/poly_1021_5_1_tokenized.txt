\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:z> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:2> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> \end{verbatim} Given that we have $ <var:z> = <var:W> $ prior to the execution of this series of instructions , then we see $ <var:Z> = <nat:2> * <var:W> + <nat:4> $ after series of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions can be accomplished by usual Hoare logic . Immediately following , the variable binding code assigning $ <var:z> $ into $ <var:x1>$ . This transfers the precondition $ \{ <var:z> = <var:W> \} $ into the condition $ \{ <var:z> = <var:W> \land <var:x1> = <var:W> \} $ . Jumping to the proceeding command found in the set of instructions , we have the variable binding line letting $ <nat:4> $ to $ <var:x0>$ . This takes the precondition $ \{ <var:z> = <var:W> \land <var:x1> = <var:W> \} $ as $ \{ <var:z> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:4> \} $ . Paying attention to the subsequent piece of code in our list of instructions , the variable assignmet statement giving $ <var:x1> * <nat:2> $ as $ <var:x1>$ . This redefines the precondition $ \{ <var:z> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:4> \} $ toward $ \{ <var:z> = <var:W> \land <var:x1> = <nat:2> \times <var:W> \land <var:x0> = <nat:4> \} $ . Going forward , the command \verb | <var:Z> := <var:x1> | . This code redefines $ \{ <var:z> = <var:W> \land <var:x1> = <nat:2> \times <var:W> \land <var:x0> = <nat:4> \} $ into $ \{ <var:z> = <var:W> \land <var:x0> = <nat:4> \land <var:Z> = <nat:2> \times <var:W> \} $ . Now , we have the binding command binding $ <var:Z> + <var:x0$ as $ <var:Z>$ . This line takes the precondition $ \{ <var:z> = <var:W> \land <var:x0> = <nat:4> \land <var:Z> = <nat:2> \times <var:W> \} $ to the condition $ \{ <var:z> = <var:W> \land <var:Z> = <nat:2> \times <var:W> + <nat:4> \} $ . This is deduced using the assignment rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:z> = <var:W> }} <var:x1> := <var:z> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:2> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:2> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:x1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:x1> = <nat:2> * <var:W> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:x0> = <nat:4> /\ <var:Z> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:Z> = <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 