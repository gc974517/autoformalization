\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:G1> := <var:I> ; <var:G2> := <var:G1> * <var:I> ; <var:G3> := <var:G2> * <var:I> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:6> ; <var:G2> := <var:G2> * <nat:3> ; <var:G3> := <var:G3> * <nat:4> ; <var:s> := <var:G3> <var:s> := <var:s> + <var:G2> <var:s> := <var:s> + <var:G1> <var:s> := <var:s> + <var:G0> \end{verbatim} Assuming $ <var:I> = <var:n> $ prior to the evaluation of our list of instructions , it follows that $ <var:s> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:6> $ once set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our code can be shown by usual Hoare logic . Next , we have \begin{eqnarray} \{ <var:I> = <var:n> \} \, <var:G1> := <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <var:n> \} \, <var:G2> := <var:G1> * <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \} \, <var:G3> := <var:G2> * <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \} \end{eqnarray} Further , \begin{eqnarray} \{ <var:I> = <var:n> \} \, <var:G1> := <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <var:n> \} \, <var:G2> := <var:G1> * <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \} \, <var:G3> := <var:G2> * <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \} \, <var:G0> := <nat:6> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \land <var:G0> = <nat:6> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \land <var:G0> = <nat:6> \} \, <var:G1> := <var:G1> * <nat:6> \, \{ <var:I> = <var:n> \land <var:G1> = <nat:6> \cdot <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \land <var:G0> = <nat:6> \} \\ \{ <var:I> = <var:n> \land <var:G1> = <nat:6> \cdot <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \land <var:G0> = <nat:6> \} \, <var:G2> := <var:G2> * <nat:3> \, \{ <var:I> = <var:n> \land <var:G1> = <nat:6> \cdot <var:n> \land <var:G2> = <nat:3> \cdot <var:n> ^ <nat:2> \land <var:G3> = <var:n> ^ <nat:3> \land <var:G0> = <nat:6> \} \end{eqnarray} Stepping forward , we have \begin{eqnarray} \{ <var:I> = <var:n> \} \, <var:G1> := <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \} \end{eqnarray} Shifting focus toward the next line of code contained in the list of commands , we see \begin{eqnarray} \{ <var:I> = <var:n> \} \, <var:G1> := <var:I> \, \{ <var:I> = <var:n> \land <var:G1> = <var:n> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <var:G1> := <var:I> ; <var:G2> := <var:G1> * <var:I> ; <var:G3> := <var:G2> * <var:I> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:6> ; <var:G2> := <var:G2> * <nat:3> ; <var:G3> := <var:G3> * <nat:4> ; <var:s> := <var:G3> <var:s> := <var:s> + <var:G2> <var:s> := <var:s> + <var:G1> <var:s> := <var:s> + <var:G0> {{ <var:s> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <var:n> /\ <var:G2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <var:n> /\ <var:G2> = <var:n> ^ <nat:2> /\ <var:G3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <var:n> /\ <var:G2> = <var:n> ^ <nat:2> /\ <var:G3> = <var:n> ^ <nat:3> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <nat:6> * <var:n> /\ <var:G2> = <var:n> ^ <nat:2> /\ <var:G3> = <var:n> ^ <nat:3> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <nat:6> * <var:n> /\ <var:G2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:G3> = <var:n> ^ <nat:3> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <nat:6> * <var:n> /\ <var:G2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <nat:6> * <var:n> /\ <var:G2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:G0> = <nat:6> /\ <var:s> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G1> = <nat:6> * <var:n> /\ <var:G0> = <nat:6> /\ <var:s> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:G0> = <nat:6> /\ <var:s> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 