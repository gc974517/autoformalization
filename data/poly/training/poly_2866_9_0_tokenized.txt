\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:3> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:g> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:g> ; <var:U2> := <var:U2> * <var:g> ; <var:Q> := <var:U2> ; <var:Q> := <var:Q> + <var:U1> ; <var:Q> := <var:Q> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Assuming it to hold that $ <var:g> = <var:T> $ prior to running our list of instructions it holds that $ <var:Q> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + <nat:3> $ when series of instructions executes . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:g> = <var:T> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \} \\ <var:U1> := <nat:4> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:U1> = <nat:4> \} \\ <var:U1> := <var:U1> * <var:g> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:U1> = <nat:4> * <var:T> \} \\ <var:U2> := <nat:4> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:U1> = <nat:4> * <var:T> \land <var:U2> = <nat:4> \} \\ <var:U2> := <var:U2> * <var:g> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:U1> = <nat:4> * <var:T> \land <var:U2> = <nat:4> * <var:T> \} \\ <var:U2> := <var:U2> * <var:g> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:U1> = <nat:4> * <var:T> \land <var:U2> = <nat:4> * <var:T> ^ <nat:2> \} \\ <var:Q> := <var:U2> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:U1> = <nat:4> * <var:T> \land <var:Q> = <nat:4> * <var:T> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:U1> ; \\ \{ <var:g> = <var:T> \land <var:U0> = <nat:3> \land <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> \} \\ <var:Q> := <var:Q> + <var:U0> \\ \{ <var:g> = <var:T> \land <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:3> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:g> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:g> ; <var:U2> := <var:U2> * <var:g> ; <var:Q> := <var:U2> ; <var:Q> := <var:Q> + <var:U1> ; <var:Q> := <var:Q> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:g> = <var:T> }} <def:poly> {{ <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:4> * <var:T> /\ <var:Q> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:U0> = <nat:3> /\ <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:T> /\ <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 