\begin{document} \begin{theorem} We define the following code segment as follows \begin{verbatim} <var:j0> := <nat:1> ; <var:j1> := <nat:9> ; <var:j1> := <var:j1> * <var:z> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:z> ; <var:j2> := <var:j2> * <var:z> ; <var:d> := <var:j2> ; <var:d> := <var:d> + <var:j1> ; <var:d> := <var:d> + <var:j0> \end{verbatim} Allowing that we have $ <var:z> = <var:M> $ prior to the execution of the set of instructions , then $ <var:d> = <nat:5> \times <var:M> ^ <nat:2> + <nat:9> \times <var:M> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is given by standard Hoare reasoning . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:M> \} & <var:j0> := <nat:1> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \} & <var:j1> := <nat:9> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \} & <var:j1> := <var:j1> * <var:z> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \} & <var:j2> := <nat:5> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:j2> = <nat:5> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:j2> = <nat:5> \} & <var:j2> := <var:j2> * <var:z> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:j2> = <nat:5> \times <var:M> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:j2> = <nat:5> \times <var:M> \} & <var:j2> := <var:j2> * <var:z> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:j2> = <nat:5> \times <var:M> ^ <nat:2> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:j2> = <nat:5> \times <var:M> ^ <nat:2> \} & <var:d> := <var:j2> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \times <var:M> \land <var:d> = <nat:5> \times <var:M> ^ <nat:2> \} \end{tabular} Honing in on the next bits of codecontained in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:M> \} & <var:j0> := <nat:1> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \} \\ \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \} & <var:j1> := <nat:9> & \{ <var:z> = <var:M> \land <var:j0> = <nat:1> \land <var:j1> = <nat:9> \} \end{tabular} This is shown using the variable assignmet law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <var:j0> := <nat:1> ; <var:j1> := <nat:9> ; <var:j1> := <var:j1> * <var:z> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:z> ; <var:j2> := <var:j2> * <var:z> ; <var:d> := <var:j2> ; <var:d> := <var:d> + <var:j1> ; <var:d> := <var:d> + <var:j0> {{ <var:d> = <nat:5> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:9> * <var:M> /\ <var:j2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:9> * <var:M> /\ <var:j2> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:9> * <var:M> /\ <var:j2> = <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:9> * <var:M> /\ <var:d> = <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:j0> = <nat:1> /\ <var:d> = <nat:5> * <var:M> ^ <nat:2> + <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:d> = <nat:5> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 