\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:9> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:S> ; <var:N> := <var:A1> ; <var:N> := <var:N> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:S> = <var:F> $ prior to running our set of commands it follows that $ <var:N> = <nat:3> * <var:F> + <nat:9> $ once series of commands has finished . \end{theorem} \begin{proof} Proving correctness for the segment of code is evident with usual Hoare logic . Moving on , we have the binding command \verb | <var:A0> := <nat:9> ; | . This line transfers the condition $ \{ <var:S> = <var:F> \} $ to $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \} $ . This is ensured by the assignment rule defined by usual Hoare logic . Moving on to the next bit of code in our code segment , we see the variable update line binding $ <nat:3> $ toward $ <var:A1>$ . This takes the condition $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \} $ into the condition $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \land <var:A1> = <nat:3> \} $ . This is ensured with the assignment rule from Hoare logic . Next , we have the binding command defining $ <var:A1> * <var:S> $ as $ <var:A1>$ . This advances $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \land <var:A1> = <nat:3> \} $ to $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \land <var:A1> = <nat:3> * <var:F> \} $ . This is guaranteed through the assignment law found in typical Hoare reasoning . Considering the next bit of code contained in our program , the assignment statement assigning $ <var:A1> $ to $ <var:N>$ . This transfers the precondition $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \land <var:A1> = <nat:3> * <var:F> \} $ as the condition $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \land <var:N> = <nat:3> * <var:F> \} $ . This is guaranteed using the assignment inference rule defined by typical Hoare reasoning . Moving on to the next step , the statement \verb | <var:N> := <var:N> + <var:A0> | . This moves $ \{ <var:S> = <var:F> \land <var:A0> = <nat:9> \land <var:N> = <nat:3> * <var:F> \} $ into the postcondition $ \{ <var:S> = <var:F> \land <var:N> = <nat:3> * <var:F> + <nat:9> \} $ . This is given with the assignment rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:9> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:S> ; <var:N> := <var:A1> ; <var:N> := <var:N> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:S> = <var:F> }} <def:poly> {{ <var:N> = <nat:3> * <var:F> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:A0> = <nat:9> /\ <var:N> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:N> = <nat:3> * <var:F> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 