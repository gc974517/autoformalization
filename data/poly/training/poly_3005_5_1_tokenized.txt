\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:c1> := <var:h> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:2> ; <var:u> := <var:c1> <var:u> := <var:u> + <var:c0> \end{verbatim} Allowing that $ <var:h> = <var:O> $ , given natural coefficients $ <var:O> $ , before the evaluation of this set of commands , it must be that we see $ <var:u> = <nat:2> \cdot <var:O> + <nat:6> $ when program has finished executing . \end{theorem} \begin{proof} The argument for our segment of code can be done through typical Hoare logic . Taking another step toward the following command in the set of commands , we see the variable binding code \verb | <var:c1> := <var:h> ; | . This takes $ \{ <var:h> = <var:O> \} $ as the condition $ \{ <var:h> = <var:O> \land <var:c1> = <var:O> \} $ . Keeping momentum , the variable assignmet statement letting $ <nat:6> $ toward $ <var:c0>$ . This transfers the precondition $ \{ <var:h> = <var:O> \land <var:c1> = <var:O> \} $ as the condition $ \{ <var:h> = <var:O> \land <var:c1> = <var:O> \land <var:c0> = <nat:6> \} $ . This is rigorously given using the assignment inference rule of Hoare logic . Advancing to the next step , we have the variable update command \verb | <var:c1> := <var:c1> * <nat:2> ; | . This statement transfers the condition $ \{ <var:h> = <var:O> \land <var:c1> = <var:O> \land <var:c0> = <nat:6> \} $ toward the condition $ \{ <var:h> = <var:O> \land <var:c1> = <nat:2> \cdot <var:O> \land <var:c0> = <nat:6> \} $ . Moving on to the next step , we see the statement binding $ <var:c1$ as $ <var:u>$ . This statement forwards the condition $ \{ <var:h> = <var:O> \land <var:c1> = <nat:2> \cdot <var:O> \land <var:c0> = <nat:6> \} $ to $ \{ <var:h> = <var:O> \land <var:c0> = <nat:6> \land <var:u> = <nat:2> \cdot <var:O> \} $ . This is shown to be logically sound through the assignment inference rule obtained from usual Hoare techniques . Observing the following statement in our set of instructions , we see the environment update line \verb | <var:u> := <var:u> + <var:c0> | . This moves $ \{ <var:h> = <var:O> \land <var:c0> = <nat:6> \land <var:u> = <nat:2> \cdot <var:O> \} $ into the condition $ \{ <var:h> = <var:O> \land <var:u> = <nat:2> \cdot <var:O> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:h> = <var:O> }} <var:c1> := <var:h> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:2> ; <var:u> := <var:c1> <var:u> := <var:u> + <var:c0> {{ <var:u> = <nat:2> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:c1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:c1> = <var:O> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:c1> = <nat:2> * <var:O> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:c0> = <nat:6> /\ <var:u> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:u> = <nat:2> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 