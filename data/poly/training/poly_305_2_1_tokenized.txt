\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:7> ; <var:g> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:o> = <var:a> $ , letting positive integers $ <var:a> $ , ahead of executing this code , then we have $ <var:g> = <nat:7> $ when list of commands exits . \end{theorem} \begin{proof} The argument for our set of instructions is done with usual Hoare reasoning . Jumping to the next steps contained in our code segment , we have \begin{eqnarray} \{ <var:o> = <var:a> \} \, <var:k0> := <nat:7> \, \{ <var:o> = <var:a> \land <var:k0> = <nat:7> \} \\ \{ <var:o> = <var:a> \land <var:k0> = <nat:7> \} \, <var:g> := <var:k0\, \{ <var:o> = <var:a> \land <var:g> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:g> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:o> = <var:a> }} <def:poly> {{ <var:g> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:g> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 