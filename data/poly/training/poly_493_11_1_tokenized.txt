\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} : \begin{verbatim} <var:k1> := <var:w> ; <var:k2> := <var:k1> * <var:w> ; <var:k3> := <var:k2> * <var:w> ; <var:k0> := <nat:7> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:5> ; <var:H> := <var:k3> <var:H> := <var:H> + <var:k2> <var:H> := <var:H> + <var:k1> <var:H> := <var:H> + <var:k0> \end{verbatim} Given $ <var:w> = <var:K> $ ahead of running this series of instructions then we see $ <var:H> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:7> \cdot <var:K> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:K> \} \\ <var:k1> := <var:w> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <var:K> \} \\ <var:k2> := <var:k1> * <var:w> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <var:K> \land <var:k2> = <var:K> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:w> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <var:K> \land <var:k2> = <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <var:K> \land <var:k2> = <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:k1> := <var:k1> * <nat:7> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <nat:7> * <var:K> \land <var:k2> = <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:k2> := <var:k2> * <nat:3> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <nat:7> * <var:K> \land <var:k2> = <nat:3> * <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:k3> := <var:k3> * <nat:5> ; \\ \{ <var:w> = <var:K> \land <var:k1> = <nat:7> * <var:K> \land <var:k2> = <nat:3> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:H> := <var:k3> \\ \{ <var:w> = <var:K> \land <var:k1> = <nat:7> * <var:K> \land <var:k2> = <nat:3> * <var:K> ^ <nat:2> \land <var:k0> = <nat:7> \land <var:H> = <nat:5> * <var:K> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:k2> \\ \{ <var:w> = <var:K> \land <var:k1> = <nat:7> * <var:K> \land <var:k0> = <nat:7> \land <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:k1> \\ \{ <var:w> = <var:K> \land <var:k0> = <nat:7> \land <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:7> * <var:K> \} \\ <var:H> := <var:H> + <var:k0> \\ \{ <var:w> = <var:K> \land <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:7> * <var:K> + <nat:7> \} \end{eqnarray} The application of standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <var:k1> := <var:w> ; <var:k2> := <var:k1> * <var:w> ; <var:k3> := <var:k2> * <var:w> ; <var:k0> := <nat:7> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:5> ; <var:H> := <var:k3> <var:H> := <var:H> + <var:k2> <var:H> := <var:H> + <var:k1> <var:H> := <var:H> + <var:k0> {{ <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:7> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <var:K> /\ <var:k2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <var:K> /\ <var:k2> = <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <var:K> /\ <var:k2> = <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <nat:7> * <var:K> /\ <var:k2> = <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <nat:7> * <var:K> /\ <var:k2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <nat:7> * <var:K> /\ <var:k2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:K> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <nat:7> * <var:K> /\ <var:k2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:k0> = <nat:7> /\ <var:H> = <nat:5> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k1> = <nat:7> * <var:K> /\ <var:k0> = <nat:7> /\ <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:k0> = <nat:7> /\ <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:H> = <nat:5> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:7> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 