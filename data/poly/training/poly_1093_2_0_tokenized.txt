\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:4> ; <var:q> := <var:y0> \end{verbatim} Given that we have $ <var:f> = <var:j> $ before the evaluation of this program , then we see $ <var:q> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is clear with Hoare techniques . Advancing on , we see the assignment code \verb | <var:y0> := <nat:4> ; | . This command moves $ \{ <var:f> = <var:j> \} $ into $ \{ <var:f> = <var:j> \land <var:y0> = <nat:4> \} $ . Shifting focus toward the subsequent bit of code seen in our code , the binding command letting $ <var:y0$ toward $ <var:q>$ . This transfers the condition $ \{ <var:f> = <var:j> \land <var:y0> = <nat:4> \} $ as $ \{ <var:f> = <var:j> \land <var:q> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:f> = <var:j> }} <var:y0> := <nat:4> ; <var:q> := <var:y0> {{ <var:q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 