\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:2> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:h> ; <var:W2> := <nat:7> ; <var:W2> := <var:W2> * <var:h> ; <var:W2> := <var:W2> * <var:h> ; <var:t> := <var:W2> ; <var:t> := <var:t> + <var:W1> ; <var:t> := <var:t> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Given $ <var:h> = <var:A> $ ahead of evaluating this code segment , it holds that we see $ <var:t> = <nat:7> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this code is given by Hoare reasoning . Moving forward , we have \verb | { <var:h> = <var:A> } <var:W0> := <nat:2> { <var:h> = <var:A> \land <var:W0> = <nat:2> } | , \verb | { <var:h> = <var:A> \land <var:W0> = <nat:2> } <var:W1> := <nat:1> { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> } | , \verb | { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> } <var:W1> := <var:W1> * <var:h> { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> * <var:A> } | , \verb | { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> * <var:A> } <var:W2> := <nat:7> { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> * <var:A> \land <var:W2> = <nat:7> } | and \verb | { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> * <var:A> \land <var:W2> = <nat:7> } <var:W2> := <var:W2> * <var:h> { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> * <var:A> \land <var:W2> = <nat:7> * <var:A> } | . Honing in on the following lines of codein our series of instructions , \verb | { <var:h> = <var:A> } <var:W0> := <nat:2> { <var:h> = <var:A> \land <var:W0> = <nat:2> } | and \verb | { <var:h> = <var:A> \land <var:W0> = <nat:2> } <var:W1> := <nat:1> { <var:h> = <var:A> \land <var:W0> = <nat:2> \land <var:W1> = <nat:1> } | . This is sound with the variable binding rule obtained from typical Hoare logic . Shifting focus toward the proceeding bit of code seen in our series of instructions , we see \verb | { <var:h> = <var:A> } <var:W0> := <nat:2> { <var:h> = <var:A> \land <var:W0> = <nat:2> } | . Following , \verb | { <var:h> = <var:A> } <var:W0> := <nat:2> { <var:h> = <var:A> \land <var:W0> = <nat:2> } | . This is known to be sound through the variable assignmet rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:2> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:h> ; <var:W2> := <nat:7> ; <var:W2> := <var:W2> * <var:h> ; <var:W2> := <var:W2> * <var:h> ; <var:t> := <var:W2> ; <var:t> := <var:t> + <var:W1> ; <var:t> := <var:t> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:h> = <var:A> }} <def:poly> {{ <var:t> = <nat:7> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:1> * <var:A> /\ <var:W2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:1> * <var:A> /\ <var:W2> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:1> * <var:A> /\ <var:W2> = <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:1> * <var:A> /\ <var:t> = <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:W0> = <nat:2> /\ <var:t> = <nat:7> * <var:A> ^ <nat:2> + <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:t> = <nat:7> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 