\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:d0> := <nat:9> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:o> ; <var:d2> := <nat:1> ; <var:d2> := <var:d2> * <var:o> ; <var:d2> := <var:d2> * <var:o> ; <var:i> := <var:d2> ; <var:i> := <var:i> + <var:d1> ; <var:i> := <var:i> + <var:d0> \end{verbatim} Allowing for all whole numbers $ <var:S> $ $ <var:o> = <var:S> $ ahead of interpreting the code segment it must be that we have $ <var:i> = <nat:1> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:9> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:o> = <var:S> \} \\ <var:d0> := <nat:9> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \} \\ <var:d1> := <nat:8> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:d1> = <nat:8> \} \\ <var:d1> := <var:d1> * <var:o> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:d1> = <nat:8> \times <var:S> \} \\ <var:d2> := <nat:1> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:d1> = <nat:8> \times <var:S> \land <var:d2> = <nat:1> \} \\ <var:d2> := <var:d2> * <var:o> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:d1> = <nat:8> \times <var:S> \land <var:d2> = <nat:1> \times <var:S> \} \\ <var:d2> := <var:d2> * <var:o> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:d1> = <nat:8> \times <var:S> \land <var:d2> = <nat:1> \times <var:S> ^ <nat:2> \} \\ <var:i> := <var:d2> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:d1> = <nat:8> \times <var:S> \land <var:i> = <nat:1> \times <var:S> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:d1> ; \\ \{ <var:o> = <var:S> \land <var:d0> = <nat:9> \land <var:i> = <nat:1> \times <var:S> ^ <nat:2> + <nat:8> \times <var:S> \} \\ <var:i> := <var:i> + <var:d0> \\ \{ <var:o> = <var:S> \land <var:i> = <nat:1> \times <var:S> ^ <nat:2> + <nat:8> \times <var:S> + <nat:9> \} \end{eqnarray} Given the above , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:o> = <var:S> }} <var:d0> := <nat:9> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:o> ; <var:d2> := <nat:1> ; <var:d2> := <var:d2> * <var:o> ; <var:d2> := <var:d2> * <var:o> ; <var:i> := <var:d2> ; <var:i> := <var:i> + <var:d1> ; <var:i> := <var:i> + <var:d0> {{ <var:i> = <nat:1> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:8> * <var:S> /\ <var:d2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:8> * <var:S> /\ <var:d2> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:8> * <var:S> /\ <var:d2> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:8> * <var:S> /\ <var:i> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:d0> = <nat:9> /\ <var:i> = <nat:1> * <var:S> ^ <nat:2> + <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:i> = <nat:1> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 