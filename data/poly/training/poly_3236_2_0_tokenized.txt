\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:2> ; <var:I> := <var:H0> \end{verbatim} Allowing $ <var:Z> = <var:X> $ prior to interpreting the series of instructions then $ <var:I> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this set of commands can be given with typical Hoare logic . Honing in on the subsequent piece of code contained in our program , we see the binding line \verb | <var:H0> := <nat:2> ; | . This transfers the precondition $ \{ <var:Z> = <var:X> \} $ as $ \{ <var:Z> = <var:X> \land <var:H0> = <nat:2> \} $ . Advancing to the next step , we have the variable assignmet line binding $ <var:H0$ into $ <var:I>$ . This takes the precondition $ \{ <var:Z> = <var:X> \land <var:H0> = <nat:2> \} $ toward $ \{ <var:Z> = <var:X> \land <var:I> = <nat:2> \} $ . This is guaranteed by the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Z> = <var:X> }} <var:H0> := <nat:2> ; <var:I> := <var:H0> {{ <var:I> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:I> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 