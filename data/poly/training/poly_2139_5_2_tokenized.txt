\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:G> := <nat:3> ; <var:G> := <nat:1> + <var:G> * <var:f> ; <var:G> := <var:G> * <var:f> ; <var:G> := <nat:4> + <var:G> * <var:f> ; <var:G> := <nat:2> + <var:G> * <var:f> \end{verbatim} Allowing ( given some natural numbers $ <var:L> $ ) that $ <var:f> = <var:L> $ prior to evaluating our code segment it follows that we see $ <var:G> = <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:f> = <var:L> \} \\ <var:G> := <nat:3> ; \\ \{ <var:f> = <var:L> \land <var:G> = <nat:3> \} \\ <var:G> := <nat:1> + <var:G> * <var:f> ; \\ \{ <var:f> = <var:L> \land <var:G> = <nat:3> \cdot <var:L> + <nat:1> \} \\ <var:G> := <var:G> * <var:f> ; \\ \{ <var:f> = <var:L> \land <var:G> = <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + \} \\ <var:G> := <nat:4> + <var:G> * <var:f> ; \\ \{ <var:f> = <var:L> \land <var:G> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \} \\ <var:G> := <nat:2> + <var:G> * <var:f> \\ \{ <var:f> = <var:L> \land <var:G> = <nat:3> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> + <nat:2> \} \end{eqnarray} Hence , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:f> = <var:L> }} <var:G> := <nat:3> ; <var:G> := <nat:1> + <var:G> * <var:f> ; <var:G> := <var:G> * <var:f> ; <var:G> := <nat:4> + <var:G> * <var:f> ; <var:G> := <nat:2> + <var:G> * <var:f> {{ <var:G> = <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:G> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:G> = <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:G> = <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:G> = <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:G> = <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 