\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:C> ; <var:f2> := <var:f1> * <var:C> ; <var:f3> := <var:f2> * <var:C> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:4> ; <var:Y> := <var:f3> <var:Y> := <var:Y> + <var:f2> <var:Y> := <var:Y> + <var:f1> <var:Y> := <var:Y> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Allow ( given all positive integers $ <var:l> $ ) $ <var:C> = <var:l> $ ahead of executing the series of commands , it follows that we see $ <var:Y> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> + <nat:2> $ after segment of code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is given using the below decorated code . \begin{eqnarray} \{ <var:C> = <var:l> \} \\ <var:f1> := <var:C> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <var:l> \} \\ <var:f2> := <var:f1> * <var:C> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <var:l> \land <var:f2> = <var:l> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:C> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <var:l> \land <var:f2> = <var:l> ^ <nat:2> \land <var:f3> = <var:l> ^ <nat:3> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <var:l> \land <var:f2> = <var:l> ^ <nat:2> \land <var:f3> = <var:l> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:f1> := <var:f1> * <nat:9> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <nat:9> \times <var:l> \land <var:f2> = <var:l> ^ <nat:2> \land <var:f3> = <var:l> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:f2> := <var:f2> * <nat:4> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <nat:9> \times <var:l> \land <var:f2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:f3> = <var:l> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:f3> := <var:f3> * <nat:4> ; \\ \{ <var:C> = <var:l> \land <var:f1> = <nat:9> \times <var:l> \land <var:f2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:f3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:Y> := <var:f3> \\ \{ <var:C> = <var:l> \land <var:f1> = <nat:9> \times <var:l> \land <var:f2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:f0> = <nat:2> \land <var:Y> = <nat:4> \times <var:l> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:f2> \\ \{ <var:C> = <var:l> \land <var:f1> = <nat:9> \times <var:l> \land <var:f0> = <nat:2> \land <var:Y> = <nat:4> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:f1> \\ \{ <var:C> = <var:l> \land <var:f0> = <nat:2> \land <var:Y> = <nat:4> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> \} \\ <var:Y> := <var:Y> + <var:f0> \\ \{ <var:C> = <var:l> \land <var:Y> = <nat:4> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> + <nat:2> \} \end{eqnarray} Using standard Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:C> ; <var:f2> := <var:f1> * <var:C> ; <var:f3> := <var:f2> * <var:C> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:4> ; <var:Y> := <var:f3> <var:Y> := <var:Y> + <var:f2> <var:Y> := <var:Y> + <var:f1> <var:Y> := <var:Y> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:C> = <var:l> }} <def:poly> {{ <var:Y> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <var:l> /\ <var:f2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <var:l> /\ <var:f2> = <var:l> ^ <nat:2> /\ <var:f3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <var:l> /\ <var:f2> = <var:l> ^ <nat:2> /\ <var:f3> = <var:l> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <nat:9> * <var:l> /\ <var:f2> = <var:l> ^ <nat:2> /\ <var:f3> = <var:l> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <nat:9> * <var:l> /\ <var:f2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:f3> = <var:l> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <nat:9> * <var:l> /\ <var:f2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <nat:9> * <var:l> /\ <var:f2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:f0> = <nat:2> /\ <var:Y> = <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f1> = <nat:9> * <var:l> /\ <var:f0> = <nat:2> /\ <var:Y> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:f0> = <nat:2> /\ <var:Y> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:Y> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 