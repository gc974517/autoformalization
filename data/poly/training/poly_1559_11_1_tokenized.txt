\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:F> ; <var:X2> := <var:X1> * <var:F> ; <var:X3> := <var:X2> * <var:F> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:2> ; <var:X3> := <var:X3> * <nat:7> ; <var:t> := <var:X3> <var:t> := <var:t> + <var:X2> <var:t> := <var:t> + <var:X1> <var:t> := <var:t> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:F> = <var:e> $ before the execution of our series of commands , then we have $ <var:t> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> + <nat:9> $ after list of commands finishes . \end{theorem} \begin{proof} The proof of our program can be demonstrated through typical Hoare reasoning . Immediately after , we see \begin{verbatim} { <var:F> = <var:e> } <var:X1> := <var:F> { <var:F> = <var:e> \land <var:X1> = <var:e> } { <var:F> = <var:e> \land <var:X1> = <var:e> } <var:X2> := <var:X1> * <var:F> { <var:F> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> } { <var:F> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> } <var:X3> := <var:X2> * <var:F> { <var:F> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> } { <var:F> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> } <var:X0> := <nat:9> { <var:F> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } { <var:F> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } <var:X1> := <var:X1> * <nat:6> { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } <var:X2> := <var:X2> * <nat:2> { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:X3> = <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } <var:X3> := <var:X3> * <nat:7> { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:X3> = <nat:7> \cdot <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:X3> = <nat:7> \cdot <var:e> ^ <nat:3> \land <var:X0> = <nat:9> } <var:t> := <var:X3{ <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:t> = <nat:7> \cdot <var:e> ^ <nat:3> } { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:t> = <nat:7> \cdot <var:e> ^ <nat:3> } <var:t> := <var:t> + <var:X2{ <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X0> = <nat:9> \land <var:t> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> } { <var:F> = <var:e> \land <var:X1> = <nat:6> \cdot <var:e> \land <var:X0> = <nat:9> \land <var:t> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> } <var:t> := <var:t> + <var:X1{ <var:F> = <var:e> \land <var:X0> = <nat:9> \land <var:t> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> } \end{verbatim} Further , we see \begin{verbatim} { <var:F> = <var:e> } <var:X1> := <var:F> { <var:F> = <var:e> \land <var:X1> = <var:e> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:F> ; <var:X2> := <var:X1> * <var:F> ; <var:X3> := <var:X2> * <var:F> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:2> ; <var:X3> := <var:X3> * <nat:7> ; <var:t> := <var:X3> <var:t> := <var:t> + <var:X2> <var:t> := <var:t> + <var:X1> <var:t> := <var:t> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:F> = <var:e> }} <def:poly> {{ <var:t> = <nat:7> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <var:e> /\ <var:X2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <var:e> /\ <var:X2> = <var:e> ^ <nat:2> /\ <var:X3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <var:e> /\ <var:X2> = <var:e> ^ <nat:2> /\ <var:X3> = <var:e> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <nat:6> * <var:e> /\ <var:X2> = <var:e> ^ <nat:2> /\ <var:X3> = <var:e> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <nat:6> * <var:e> /\ <var:X2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:X3> = <var:e> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <nat:6> * <var:e> /\ <var:X2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:X3> = <nat:7> * <var:e> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <nat:6> * <var:e> /\ <var:X2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:X0> = <nat:9> /\ <var:t> = <nat:7> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X1> = <nat:6> * <var:e> /\ <var:X0> = <nat:9> /\ <var:t> = <nat:7> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:X0> = <nat:9> /\ <var:t> = <nat:7> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:t> = <nat:7> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 