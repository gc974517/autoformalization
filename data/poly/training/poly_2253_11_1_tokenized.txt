\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:U> ; <var:t2> := <var:t1> * <var:U> ; <var:t3> := <var:t2> * <var:U> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:8> ; <var:t3> := <var:t3> * <nat:8> ; <var:v> := <var:t3> <var:v> := <var:v> + <var:t2> <var:v> := <var:v> + <var:t1> <var:v> := <var:v> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:U> = <var:E> $ ( given all $ <var:E> \in \mathbb{N} $ ) before interpreting the list of instructions then we have $ <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> $ once set of commands executes . \end{theorem} \begin{proof} The course of logic for this series of commands is demonstrated by the below decorated series of commands . \begin{eqnarray} \{ <var:U> = <var:E> \} \\ <var:t1> := <var:U> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \} \\ <var:t2> := <var:t1> * <var:U> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:U> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:t1> := <var:t1> * <nat:4> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <nat:4> * <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:t2> := <var:t2> * <nat:8> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <nat:4> * <var:E> \land <var:t2> = <nat:8> * <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:t3> := <var:t3> * <nat:8> ; \\ \{ <var:U> = <var:E> \land <var:t1> = <nat:4> * <var:E> \land <var:t2> = <nat:8> * <var:E> ^ <nat:2> \land <var:t3> = <nat:8> * <var:E> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:v> := <var:t3> \\ \{ <var:U> = <var:E> \land <var:t1> = <nat:4> * <var:E> \land <var:t2> = <nat:8> * <var:E> ^ <nat:2> \land <var:t0> = <nat:3> \land <var:v> = <nat:8> * <var:E> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:t2> \\ \{ <var:U> = <var:E> \land <var:t1> = <nat:4> * <var:E> \land <var:t0> = <nat:3> \land <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:t1> \\ \{ <var:U> = <var:E> \land <var:t0> = <nat:3> \land <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> \} \\ <var:v> := <var:v> + <var:t0> \\ \{ <var:U> = <var:E> \land <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> \} \end{eqnarray} The application of usual Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:U> ; <var:t2> := <var:t1> * <var:U> ; <var:t3> := <var:t2> * <var:U> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:8> ; <var:t3> := <var:t3> * <nat:8> ; <var:v> := <var:t3> <var:v> := <var:v> + <var:t2> <var:v> := <var:v> + <var:t1> <var:v> := <var:v> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:U> = <var:E> }} <def:poly> {{ <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <var:E> /\ <var:t2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <var:E> /\ <var:t2> = <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <var:E> /\ <var:t2> = <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <nat:4> * <var:E> /\ <var:t2> = <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <nat:4> * <var:E> /\ <var:t2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <nat:4> * <var:E> /\ <var:t2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:t3> = <nat:8> * <var:E> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <nat:4> * <var:E> /\ <var:t2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:8> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <nat:4> * <var:E> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:v> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 