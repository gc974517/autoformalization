\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:7> ; <var:Y> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Given it to hold that $ <var:f> = <var:b> $ ahead of interpreting our set of commands , it holds that $ <var:Y> = <nat:7> $ after list of instructions terminates . \end{theorem} \begin{proof} The flow of logic for the set of commands is shown with usual Hoare logic . Shifting focus toward the subsequent bits of codefound in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:b> \} & <var:c0> := <nat:7> & \{ <var:f> = <var:b> \land <var:c0> = <nat:7> \} \\ \{ <var:f> = <var:b> \land <var:c0> = <nat:7> \} & <var:Y> := <var:c0& \{ <var:f> = <var:b> \land <var:Y> = <nat:7> \} \end{tabular} This is shown to be logically sound by the variable assignmet rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:7> ; <var:Y> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:f> = <var:b> }} <def:poly> {{ <var:Y> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:Y> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 