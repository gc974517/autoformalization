\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:L> ; <var:e2> := <nat:9> ; <var:e2> := <var:e2> * <var:L> ; <var:e2> := <var:e2> * <var:L> ; <var:V> := <var:e2> ; <var:V> := <var:V> + <var:e1> ; <var:V> := <var:V> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assuming ( given some natural coefficients $ <var:H> $ ) that $ <var:L> = <var:H> $ prior to running our segment of code then $ <var:V> = <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:7> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning results in : \begin{eqnarray} \{ <var:L> = <var:H> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:1> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \} \\ <var:e1> := <var:e1> * <var:L> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \cdot <var:H> \} \\ <var:e2> := <nat:9> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \cdot <var:H> \land <var:e2> = <nat:9> \} \\ <var:e2> := <var:e2> * <var:L> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \cdot <var:H> \land <var:e2> = <nat:9> \cdot <var:H> \} \\ <var:e2> := <var:e2> * <var:L> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \cdot <var:H> \land <var:e2> = <nat:9> \cdot <var:H> ^ <nat:2> \} \\ <var:V> := <var:e2> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \cdot <var:H> \land <var:V> = <nat:9> \cdot <var:H> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:e1> ; \\ \{ <var:L> = <var:H> \land <var:e0> = <nat:7> \land <var:V> = <nat:9> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> \} \\ <var:V> := <var:V> + <var:e0> \\ \{ <var:L> = <var:H> \land <var:V> = <nat:9> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:7> \} \end{eqnarray} Given the above , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:L> ; <var:e2> := <nat:9> ; <var:e2> := <var:e2> * <var:L> ; <var:e2> := <var:e2> * <var:L> ; <var:V> := <var:e2> ; <var:V> := <var:V> + <var:e1> ; <var:V> := <var:V> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:L> = <var:H> }} <def:poly> {{ <var:V> = <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> * <var:H> /\ <var:e2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> * <var:H> /\ <var:e2> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> * <var:H> /\ <var:e2> = <nat:9> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> * <var:H> /\ <var:V> = <nat:9> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:e0> = <nat:7> /\ <var:V> = <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:V> = <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 