\begin{document} \begin{theorem} We define a series of instructions as follows \begin{verbatim} <var:A1> := <var:r> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:3> ; <var:O> := <var:A1> <var:O> := <var:O> + <var:A0> \end{verbatim} Given that $ <var:r> = <var:t> $ ( given all positive integers $ <var:t> $ ) before interpreting the code , it must be that $ <var:O> = <nat:3> * <var:t> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions can be shown through usual Hoare reasoning . Taking another step toward the upcoming command seen in our program , the variable binding command \verb | <var:A1> := <var:r> ; | . This takes $ \{ <var:r> = <var:t> \} $ as the postcondition $ \{ <var:r> = <var:t> \land <var:A1> = <var:t> \} $ . This is deduced through the assignment inference rule given in standard Hoare logic . Next , we have the binding line \verb | <var:A0> := <nat:2> ; | . This takes the precondition $ \{ <var:r> = <var:t> \land <var:A1> = <var:t> \} $ as the condition $ \{ <var:r> = <var:t> \land <var:A1> = <var:t> \land <var:A0> = <nat:2> \} $ . Moving on to the following statement contained in the series of instructions , the line \verb | <var:A1> := <var:A1> * <nat:3> ; | . This redefines $ \{ <var:r> = <var:t> \land <var:A1> = <var:t> \land <var:A0> = <nat:2> \} $ toward $ \{ <var:r> = <var:t> \land <var:A1> = <nat:3> \cdot <var:t> \land <var:A0> = <nat:2> \} $ . Next , we see the assignment code \verb | <var:O> := <var:A1> | . This statement transfers the condition $ \{ <var:r> = <var:t> \land <var:A1> = <nat:3> \cdot <var:t> \land <var:A0> = <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:t> \land <var:A0> = <nat:2> \land <var:O> = <nat:3> \cdot <var:t> \} $ . Moving forward to the next step , we see the code \verb | <var:O> := <var:O> + <var:A0> | . This forwards the condition $ \{ <var:r> = <var:t> \land <var:A0> = <nat:2> \land <var:O> = <nat:3> \cdot <var:t> \} $ to $ \{ <var:r> = <var:t> \land <var:O> = <nat:3> \cdot <var:t> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:A1> := <var:r> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:3> ; <var:O> := <var:A1> <var:O> := <var:O> + <var:A0> {{ <var:O> = <nat:3> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:A1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:A1> = <var:t> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:A1> = <nat:3> * <var:t> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:A0> = <nat:2> /\ <var:O> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:O> = <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 