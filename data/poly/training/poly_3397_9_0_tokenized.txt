\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:8> ; <var:v1> := <nat:8> ; <var:v1> := <var:v1> * <var:O> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:O> ; <var:v2> := <var:v2> * <var:O> ; <var:N> := <var:v2> ; <var:N> := <var:N> + <var:v1> ; <var:N> := <var:N> + <var:v0> \end{verbatim} Given $ <var:O> = <var:n> $ --- for all $ <var:n> \in \mathbb{N} $ --- prior to evaluating the set of commands , it must be that $ <var:N> = <nat:8> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:8> $ after list of instructions finishes . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:O> = <var:n> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \} \\ <var:v1> := <nat:8> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:v1> = <nat:8> \} \\ <var:v1> := <var:v1> * <var:O> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:v1> = <nat:8> \cdot <var:n> \} \\ <var:v2> := <nat:8> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:v1> = <nat:8> \cdot <var:n> \land <var:v2> = <nat:8> \} \\ <var:v2> := <var:v2> * <var:O> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:v1> = <nat:8> \cdot <var:n> \land <var:v2> = <nat:8> \cdot <var:n> \} \\ <var:v2> := <var:v2> * <var:O> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:v1> = <nat:8> \cdot <var:n> \land <var:v2> = <nat:8> \cdot <var:n> ^ <nat:2> \} \\ <var:N> := <var:v2> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:v1> = <nat:8> \cdot <var:n> \land <var:N> = <nat:8> \cdot <var:n> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:v1> ; \\ \{ <var:O> = <var:n> \land <var:v0> = <nat:8> \land <var:N> = <nat:8> \cdot <var:n> ^ <nat:2> + <nat:8> \cdot <var:n> \} \\ <var:N> := <var:N> + <var:v0> \\ \{ <var:O> = <var:n> \land <var:N> = <nat:8> \cdot <var:n> ^ <nat:2> + <nat:8> \cdot <var:n> + <nat:8> \} \end{eqnarray} Therefore , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:O> = <var:n> }} <var:v0> := <nat:8> ; <var:v1> := <nat:8> ; <var:v1> := <var:v1> * <var:O> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:O> ; <var:v2> := <var:v2> * <var:O> ; <var:N> := <var:v2> ; <var:N> := <var:N> + <var:v1> ; <var:N> := <var:N> + <var:v0> {{ <var:N> = <nat:8> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:8> * <var:n> /\ <var:v2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:8> * <var:n> /\ <var:v2> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:8> * <var:n> /\ <var:v2> = <nat:8> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:8> * <var:n> /\ <var:N> = <nat:8> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:v0> = <nat:8> /\ <var:N> = <nat:8> * <var:n> ^ <nat:2> + <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:N> = <nat:8> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 