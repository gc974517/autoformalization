\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:r> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:7> ; <var:R> := <var:C1> <var:R> := <var:R> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:r> = <var:O> $ ahead of executing the list of commands , it must be that we have $ <var:R> = <nat:7> \times <var:O> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be demonstrated using typical Hoare techniques . Taking another step toward the proceeding step seen in our series of commands , we have the assignment line \verb | <var:C1> := <var:r> ; | . This code moves the precondition $ \{ <var:r> = <var:O> \} $ to $ \{ <var:r> = <var:O> \land <var:C1> = <var:O> \} $ . This is shown to be logically sound with the assignment scheme from Hoare techniques . Now , we see the line defining $ <nat:8> $ as $ <var:C0>$ . This takes $ \{ <var:r> = <var:O> \land <var:C1> = <var:O> \} $ toward the condition $ \{ <var:r> = <var:O> \land <var:C1> = <var:O> \land <var:C0> = <nat:8> \} $ . Honing in on the following line in our list of instructions , the variable binding command defining $ <var:C1> * <nat:7> $ toward $ <var:C1>$ . This code transfers $ \{ <var:r> = <var:O> \land <var:C1> = <var:O> \land <var:C0> = <nat:8> \} $ into $ \{ <var:r> = <var:O> \land <var:C1> = <nat:7> * <var:O> \land <var:C0> = <nat:8> \} $ . This is shown using the assignment inference rule obtained from standard Hoare techniques . Immediately following , we see the variable update code \verb | <var:R> := <var:C1> | . This line takes the condition $ \{ <var:r> = <var:O> \land <var:C1> = <nat:7> * <var:O> \land <var:C0> = <nat:8> \} $ to the postcondition $ \{ <var:r> = <var:O> \land <var:C0> = <nat:8> \land <var:R> = <nat:7> * <var:O> \} $ . This is given with the assignment inference rule given in standard Hoare logic . Considering the following line of code found in the series of instructions , the binding statement \verb | <var:R> := <var:R> + <var:C0> | . This code redefines the precondition $ \{ <var:r> = <var:O> \land <var:C0> = <nat:8> \land <var:R> = <nat:7> * <var:O> \} $ to the postcondition $ \{ <var:r> = <var:O> \land <var:R> = <nat:7> * <var:O> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:r> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:7> ; <var:R> := <var:C1> <var:R> := <var:R> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:r> = <var:O> }} <def:poly> {{ <var:R> = <nat:7> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:C1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:C1> = <var:O> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:C1> = <nat:7> * <var:O> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:C0> = <nat:8> /\ <var:R> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:R> = <nat:7> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 