\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:9> ; <var:Q> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:q> = <var:u> $ prior to the execution of this program , then we see $ <var:Q> = <nat:9> $ . \end{theorem} \begin{proof} The proof of our list of commands can be done using usual Hoare logic . Focusing on the subsequent step found in our program , we see the environment update statement giving $ <nat:9> $ to $ <var:v0>$ . This forwards the condition $ \{ <var:q> = <var:u> \} $ to the postcondition $ \{ <var:q> = <var:u> \land <var:v0> = <nat:9> \} $ . This is shown to be logically sound with the assignment law from standard Hoare logic . Honing in on the next piece of code found in our set of instructions , we see the variable assignmet code defining $ <var:v0$ into $ <var:Q>$ . This takes the condition $ \{ <var:q> = <var:u> \land <var:v0> = <nat:9> \} $ into $ \{ <var:q> = <var:u> \land <var:Q> = <nat:9> \} $ . This is given with the assignment rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:9> ; <var:Q> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:q> = <var:u> }} <def:poly> {{ <var:Q> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:Q> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 