\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:2> ; <var:w> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:O> = <var:Y> $ ahead of running our set of commands , it must be that we have $ <var:w> = <nat:2> $ when set of commands has terminated . \end{theorem} \begin{proof} The flow of logic for the program is accomplished using typical Hoare logic . Now , \begin{verbatim} { <var:O> = <var:Y> } <var:S0> := <nat:2> { <var:O> = <var:Y> \land <var:S0> = <nat:2> } \end{verbatim} This is shown to be logically sound by the law obtained from Hoare reasoning . Following , \begin{verbatim} { <var:O> = <var:Y> } <var:S0> := <nat:2> { <var:O> = <var:Y> \land <var:S0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:2> ; <var:w> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:O> = <var:Y> }} <def:poly> {{ <var:w> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:w> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 