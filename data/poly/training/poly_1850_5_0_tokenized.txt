\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:5> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:Z> ; <var:E> := <var:i1> ; <var:E> := <var:E> + <var:i0> \end{verbatim} Allowing $ <var:Z> = <var:b> $ ahead of running this set of instructions , it must be that we have $ <var:E> = <nat:8> * <var:b> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the program can be given with typical Hoare logic . Following , \verb | { <var:Z> = <var:b> } <var:i0> := <nat:5> { <var:Z> = <var:b> \land <var:i0> = <nat:5> } | and \verb | { <var:Z> = <var:b> \land <var:i0> = <nat:5> } <var:i1> := <nat:8> { <var:Z> = <var:b> \land <var:i0> = <nat:5> \land <var:i1> = <nat:8> } | . This is given by the variable binding inference rule from usual Hoare techniques . Following , \verb | { <var:Z> = <var:b> } <var:i0> := <nat:5> { <var:Z> = <var:b> \land <var:i0> = <nat:5> } | , \verb | { <var:Z> = <var:b> \land <var:i0> = <nat:5> } <var:i1> := <nat:8> { <var:Z> = <var:b> \land <var:i0> = <nat:5> \land <var:i1> = <nat:8> } | and \verb | { <var:Z> = <var:b> \land <var:i0> = <nat:5> \land <var:i1> = <nat:8> } <var:i1> := <var:i1> * <var:Z> { <var:Z> = <var:b> \land <var:i0> = <nat:5> \land <var:i1> = <nat:8> \times <var:b> } | . This is sound using the environment update law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Z> = <var:b> }} <var:i0> := <nat:5> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:Z> ; <var:E> := <var:i1> ; <var:E> := <var:E> + <var:i0> {{ <var:E> = <nat:8> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:i0> = <nat:5> /\ <var:E> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:E> = <nat:8> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 