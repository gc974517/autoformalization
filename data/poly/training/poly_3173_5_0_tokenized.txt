\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:q> ; <var:K> := <var:w1> ; <var:K> := <var:K> + <var:w0> \end{verbatim} Assume that we have $ <var:q> = <var:Y> $ ahead of the evaluation of our series of instructions it follows that $ <var:K> = <nat:3> * <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is clear with Hoare techniques . After , we see \begin{eqnarray} \{ <var:q> = <var:Y> \} \, <var:w0> := <nat:3> \, \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \} \\ \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \} \, <var:w1> := <nat:3> \, \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \land <var:w1> = <nat:3> \} \\ \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \land <var:w1> = <nat:3> \} \, <var:w1> := <var:w1> * <var:q> \, \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \land <var:w1> = <nat:3> \cdot <var:Y> \} \end{eqnarray} Following , we see \begin{eqnarray} \{ <var:q> = <var:Y> \} \, <var:w0> := <nat:3> \, \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \} \\ \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \} \, <var:w1> := <nat:3> \, \{ <var:q> = <var:Y> \land <var:w0> = <nat:3> \land <var:w1> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <var:w0> := <nat:3> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:q> ; <var:K> := <var:w1> ; <var:K> := <var:K> + <var:w0> {{ <var:K> = <nat:3> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:w0> = <nat:3> /\ <var:K> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:K> = <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 