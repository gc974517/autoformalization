\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> \end{verbatim} Allowing that $ <var:t> = <var:P> $ before the evaluation of this code segment , it must be that we have $ <var:S> = <nat:1> \times <var:P> ^ <nat:4> + <nat:1> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:1> $ after list of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of this code can be done by Hoare logic . Stepping through , we have the binding line \verb | <var:S> := <nat:1> ; | . This moves $ \{ <var:t> = <var:P> \} $ into the condition $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \} $ . This is shown with the assignment inference rule found in standard Hoare techniques . Taking a look at the following piece of code contained in the list of instructions , we see the variable update statement giving $ <nat:1> + <var:S> * <var:t> $ into $ <var:S>$ . This moves $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \} $ toward $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> + <nat:1> \} $ . This is shown to be logically sound using the assignment scheme from typical Hoare techniques . Shifting focus toward the subsequent bit of code found in the list of instructions , we have the variable update command defining $ <nat:1> + <var:S> * <var:t> $ toward $ <var:S>$ . This line takes $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> + <nat:1> \} $ to $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:1> \} $ . Moving on to the following line of code contained in the segment of code , we have the variable update statement \verb | <var:S> := <var:S> * <var:t> ; | . This moves the condition $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:1> \} $ to the condition $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + \} $ . Observing the following piece of code found in our set of instructions , we have the binding statement letting $ <nat:1> + <var:S> * <var:t$ as $ <var:S>$ . This code advances the precondition $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + \} $ to $ \{ <var:t> = <var:P> \land <var:S> = <nat:1> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:t> = <var:P> }} <var:S> := <nat:1> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> {{ <var:S> = <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 