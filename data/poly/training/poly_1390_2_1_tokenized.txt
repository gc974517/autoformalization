\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:9> ; <var:L> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Given , for any positive numbers $ <var:r> $ , that we have $ <var:j> = <var:r> $ prior to executing this list of instructions , it follows that $ <var:L> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:r> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:j> = <var:r> \land <var:G0> = <nat:9> \} \\ <var:L> := <var:G0> \\ \{ <var:j> = <var:r> \land <var:L> = <nat:9> \} \end{eqnarray} The application of Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:9> ; <var:L> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <def:poly> {{ <var:L> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:L> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 