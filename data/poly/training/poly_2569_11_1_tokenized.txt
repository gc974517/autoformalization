\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:T1> := <var:t> ; <var:T2> := <var:T1> * <var:t> ; <var:T3> := <var:T2> * <var:t> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:2> ; <var:O> := <var:T3> <var:O> := <var:O> + <var:T2> <var:O> := <var:O> + <var:T1> <var:O> := <var:O> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:t> = <var:i> $ before interpreting the series of instructions then we see $ <var:O> = <nat:2> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:7> \times <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions is done by usual Hoare logic . After , we have the assignment statement \verb | <var:T1> := <var:t> ; | . This command redefines the condition $ \{ <var:t> = <var:i> \} $ to the postcondition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \} $ . Following , the assignment line \verb | <var:T2> := <var:T1> * <var:t> ; | . This code redefines the condition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \} $ to the condition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \} $ . Following , the binding line assigning $ <var:T2> * <var:t> $ to $ <var:T3>$ . This advances $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \} $ into the postcondition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \} $ . Moving onward , we see the binding line letting $ <nat:3> $ into $ <var:T0>$ . This forwards the precondition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \} $ to the postcondition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . This is guaranteed using the assignment scheme found in standard Hoare logic . Keeping momentum , we see the variable assignmet statement binding $ <var:T1> * <nat:7> $ toward $ <var:T1>$ . This statement advances the condition $ \{ <var:t> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ as $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . Moving forward , we see the binding line \verb | <var:T2> := <var:T2> * <nat:1> ; | . This moves the precondition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . This is shown to be logically sound by the assignment scheme given in typical Hoare techniques . Focusing on the subsequent line of code in our series of commands , we see the variable assignmet command \verb | <var:T3> := <var:T3> * <nat:2> ; | . This line takes the condition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ toward the condition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:T3> = <nat:2> \cdot <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . Advancing to the next step seen in our set of commands , the variable binding code \verb | <var:O> := <var:T3> | . This advances the condition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:T3> = <nat:2> \cdot <var:i> ^ <nat:3> \land <var:T0> = <nat:3> \} $ to the condition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> \} $ . Looking at the next bit of code in our list of instructions , the binding line \verb | <var:O> := <var:O> + <var:T2> | . This redefines $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> \} $ toward the postcondition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> \} $ . This is deduced by the assignment inference rule found in Hoare logic . Keeping momentum , the variable update line assigning $ <var:O> + <var:T1$ as $ <var:O>$ . This takes the condition $ \{ <var:t> = <var:i> \land <var:T1> = <nat:7> \cdot <var:i> \land <var:T0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:i> \land <var:T0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:7> \cdot <var:i> \} $ . This is deduced through the assignment law from standard Hoare logic . Advancing on , we see the variable update code \verb | <var:O> := <var:O> + <var:T0> | . This statement advances the condition $ \{ <var:t> = <var:i> \land <var:T0> = <nat:3> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:7> \cdot <var:i> \} $ toward the condition $ \{ <var:t> = <var:i> \land <var:O> = <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:7> \cdot <var:i> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:t> ; <var:T2> := <var:T1> * <var:t> ; <var:T3> := <var:T2> * <var:t> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:2> ; <var:O> := <var:T3> <var:O> := <var:O> + <var:T2> <var:O> := <var:O> + <var:T1> <var:O> := <var:O> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:t> = <var:i> }} <def:poly> {{ <var:O> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <nat:7> * <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <nat:7> * <var:i> /\ <var:T2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <nat:7> * <var:i> /\ <var:T2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:T3> = <nat:2> * <var:i> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <nat:7> * <var:i> /\ <var:T2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:T0> = <nat:3> /\ <var:O> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T1> = <nat:7> * <var:i> /\ <var:T0> = <nat:3> /\ <var:O> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:T0> = <nat:3> /\ <var:O> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:O> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 