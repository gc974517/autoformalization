\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:2> ; <var:s> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Allow $ <var:A> = <var:H> $ ahead of executing this list of commands , it must be that $ <var:s> = <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:H> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:A> = <var:H> \land <var:u0> = <nat:2> \} \\ <var:s> := <var:u0> \\ \{ <var:A> = <var:H> \land <var:s> = <nat:2> \} \end{eqnarray} Considering the preceding argument , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:2> ; <var:s> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <def:poly> {{ <var:s> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:s> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 