\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:3> ; <var:R> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Allow $ <var:v> = <var:F> $ ahead of the evaluation of our set of commands then we have $ <var:R> = <nat:3> $ once program terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:F> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:v> = <var:F> \land <var:Z0> = <nat:3> \} \\ <var:R> := <var:Z0> \\ \{ <var:v> = <var:F> \land <var:R> = <nat:3> \} \end{eqnarray} Applying standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:3> ; <var:R> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:v> = <var:F> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 