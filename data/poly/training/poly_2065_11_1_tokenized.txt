\begin{document} \begin{theorem} Consider a code segment as \begin{verbatim} <var:C1> := <var:J> ; <var:C2> := <var:C1> * <var:J> ; <var:C3> := <var:C2> * <var:J> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:1> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:4> ; <var:x> := <var:C3> <var:x> := <var:x> + <var:C2> <var:x> := <var:x> + <var:C1> <var:x> := <var:x> + <var:C0> \end{verbatim} Assume it to hold that $ <var:J> = <var:d> $ prior to evaluating our list of instructions , then we have $ <var:x> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:7> $ when list of instructions has exited . \end{theorem} \begin{proof} Proving correctness for this program can be demonstrated using Hoare reasoning . Further , we see \begin{eqnarray} \{ <var:J> = <var:d> \} \, <var:C1> := <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \\ \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \, <var:C2> := <var:C1> * <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \} \\ \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \} \, <var:C3> := <var:C2> * <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \land <var:C3> = <var:d> ^ <nat:3> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:J> = <var:d> \} \, <var:C1> := <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \\ \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \, <var:C2> := <var:C1> * <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \} \\ \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \} \, <var:C3> := <var:C2> * <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \land <var:C3> = <var:d> ^ <nat:3> \} \\ \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \land <var:C3> = <var:d> ^ <nat:3> \} \, <var:C0> := <nat:7> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \land <var:C3> = <var:d> ^ <nat:3> \land <var:C0> = <nat:7> \} \end{eqnarray} Now , \begin{eqnarray} \{ <var:J> = <var:d> \} \, <var:C1> := <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \end{eqnarray} This is given by the inference rule given by usual Hoare logic . Observing the subsequent commands found in our segment of code , \begin{eqnarray} \{ <var:J> = <var:d> \} \, <var:C1> := <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \\ \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \, <var:C2> := <var:C1> * <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \land <var:C2> = <var:d> ^ <nat:2> \} \end{eqnarray} Moving forward to the next step , we have \begin{eqnarray} \{ <var:J> = <var:d> \} \, <var:C1> := <var:J> \, \{ <var:J> = <var:d> \land <var:C1> = <var:d> \} \end{eqnarray} This is rigorously given using the variable update rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:J> = <var:d> }} <var:C1> := <var:J> ; <var:C2> := <var:C1> * <var:J> ; <var:C3> := <var:C2> * <var:J> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:1> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:4> ; <var:x> := <var:C3> <var:x> := <var:x> + <var:C2> <var:x> := <var:x> + <var:C1> <var:x> := <var:x> + <var:C0> {{ <var:x> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <var:d> /\ <var:C2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <var:d> /\ <var:C2> = <var:d> ^ <nat:2> /\ <var:C3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <var:d> /\ <var:C2> = <var:d> ^ <nat:2> /\ <var:C3> = <var:d> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <nat:1> * <var:d> /\ <var:C2> = <var:d> ^ <nat:2> /\ <var:C3> = <var:d> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <nat:1> * <var:d> /\ <var:C2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:C3> = <var:d> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <nat:1> * <var:d> /\ <var:C2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <nat:1> * <var:d> /\ <var:C2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:C0> = <nat:7> /\ <var:x> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C1> = <nat:1> * <var:d> /\ <var:C0> = <nat:7> /\ <var:x> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:C0> = <nat:7> /\ <var:x> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:x> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 