\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <nat:4> + <var:o> * <var:c> ; <var:o> := <nat:1> + <var:o> * <var:c> ; <var:o> := <nat:3> + <var:o> * <var:c> ; <var:o> := <nat:3> + <var:o> * <var:c> ; <var:o> := <nat:1> + <var:o> * <var:c> ; <var:o> := <nat:1> + <var:o> * <var:c> ; <var:o> := <nat:4> + <var:o> * <var:c> ; <var:o> := <nat:4> + <var:o> * <var:c> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Assume that we have $ <var:c> = <var:l> $ prior to the execution of the program it follows that we have $ <var:o> = <nat:4> \times <var:l> ^ <nat:8> + <nat:4> \times <var:l> ^ <nat:7> + <nat:1> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} We can see that this decorated set of instructions . \begin{eqnarray} \{ <var:c> = <var:l> \} \\ <var:o> := <nat:4> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> \} \\ <var:o> := <nat:4> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> + <nat:4> \} \\ <var:o> := <nat:1> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> \} \\ <var:o> := <nat:3> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> \} \\ <var:o> := <nat:3> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} \\ <var:o> := <nat:1> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> \} \\ <var:o> := <nat:4> + <var:o> * <var:c> ; \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> \} \\ <var:o> := <nat:4> + <var:o> * <var:c> \\ \{ <var:c> = <var:l> \land <var:o> = <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> \} \end{eqnarray} Utilizing Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:4> ; <var:o> := <nat:4> + <var:o> * <var:c> ; <var:o> := <nat:1> + <var:o> * <var:c> ; <var:o> := <nat:3> + <var:o> * <var:c> ; <var:o> := <nat:3> + <var:o> * <var:c> ; <var:o> := <nat:1> + <var:o> * <var:c> ; <var:o> := <nat:1> + <var:o> * <var:c> ; <var:o> := <nat:4> + <var:o> * <var:c> ; <var:o> := <nat:4> + <var:o> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:c> = <var:l> }} <def:poly> {{ <var:o> = <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:o> = <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 