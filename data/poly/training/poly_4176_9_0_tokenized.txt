\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:8> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:s> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:s> ; <var:q2> := <var:q2> * <var:s> ; <var:o> := <var:q2> ; <var:o> := <var:o> + <var:q1> ; <var:o> := <var:o> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:s> = <var:Z> $ , taking positive integers $ <var:Z> $ , prior to the evaluation of our set of instructions then we see $ <var:o> = <nat:8> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> + <nat:8> $ when set of instructions has finished . \end{theorem} \begin{proof} Note that the below decorated program . \begin{eqnarray} \{ <var:s> = <var:Z> \} \\ <var:q0> := <nat:8> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \} \\ <var:q1> := <nat:6> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:q1> = <nat:6> \} \\ <var:q1> := <var:q1> * <var:s> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:q1> = <nat:6> * <var:Z> \} \\ <var:q2> := <nat:8> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:q1> = <nat:6> * <var:Z> \land <var:q2> = <nat:8> \} \\ <var:q2> := <var:q2> * <var:s> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:q1> = <nat:6> * <var:Z> \land <var:q2> = <nat:8> * <var:Z> \} \\ <var:q2> := <var:q2> * <var:s> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:q1> = <nat:6> * <var:Z> \land <var:q2> = <nat:8> * <var:Z> ^ <nat:2> \} \\ <var:o> := <var:q2> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:q1> = <nat:6> * <var:Z> \land <var:o> = <nat:8> * <var:Z> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:q1> ; \\ \{ <var:s> = <var:Z> \land <var:q0> = <nat:8> \land <var:o> = <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> \} \\ <var:o> := <var:o> + <var:q0> \\ \{ <var:s> = <var:Z> \land <var:o> = <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:8> \} \end{eqnarray} Applying standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:8> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:s> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:s> ; <var:q2> := <var:q2> * <var:s> ; <var:o> := <var:q2> ; <var:o> := <var:o> + <var:q1> ; <var:o> := <var:o> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:s> = <var:Z> }} <def:poly> {{ <var:o> = <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:q2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:q2> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:q2> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:o> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:q0> = <nat:8> /\ <var:o> = <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:o> = <nat:8> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 