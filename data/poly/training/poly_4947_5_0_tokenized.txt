\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:o> ; <var:U> := <var:s1> ; <var:U> := <var:U> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:o> = <var:n> $ prior to evaluating our code then $ <var:U> = <nat:1> \times <var:n> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code can be accomplished through standard Hoare techniques . Moving on , we see \begin{verbatim} { <var:o> = <var:n> } <var:s0> := <nat:5> { <var:o> = <var:n> \land <var:s0> = <nat:5> } { <var:o> = <var:n> \land <var:s0> = <nat:5> } <var:s1> := <nat:1> { <var:o> = <var:n> \land <var:s0> = <nat:5> \land <var:s1> = <nat:1> } { <var:o> = <var:n> \land <var:s0> = <nat:5> \land <var:s1> = <nat:1> } <var:s1> := <var:s1> * <var:o> { <var:o> = <var:n> \land <var:s0> = <nat:5> \land <var:s1> = <nat:1> * <var:n> } \end{verbatim} This is deduced using the binding rule given in typical Hoare techniques . Advancing , we have \begin{verbatim} { <var:o> = <var:n> } <var:s0> := <nat:5> { <var:o> = <var:n> \land <var:s0> = <nat:5> } \end{verbatim} Taking another step toward the next command found in our series of instructions , we have \begin{verbatim} { <var:o> = <var:n> } <var:s0> := <nat:5> { <var:o> = <var:n> \land <var:s0> = <nat:5> } \end{verbatim} This is sound through the variable assignmet scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:5> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:o> ; <var:U> := <var:s1> ; <var:U> := <var:U> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:o> = <var:n> }} <def:poly> {{ <var:U> = <nat:1> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:s0> = <nat:5> /\ <var:U> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:U> = <nat:1> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 