\begin{document} \begin{theorem} Take the following program in \emph{Imp} as \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:1> + <var:h> * <var:d> ; <var:h> := <nat:4> + <var:h> * <var:d> ; <var:h> := <var:h> * <var:d> ; <var:h> := <nat:1> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> ; <var:h> := <nat:4> + <var:h> * <var:d> \end{verbatim} Assuming that $ <var:d> = <var:C> $ ahead of evaluating our series of commands , then we see $ <var:h> = <nat:4> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:C> \} \\ <var:h> := <nat:4> ; \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \} \\ <var:h> := <nat:1> + <var:h> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \times <var:C> + <nat:1> \} \\ <var:h> := <nat:4> + <var:h> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:4> \} \\ <var:h> := <var:h> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + \} \\ <var:h> := <nat:1> + <var:h> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \} \\ <var:h> := <nat:2> + <var:h> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> + <nat:2> \} \\ <var:h> := <nat:4> + <var:h> * <var:d> \\ \{ <var:d> = <var:C> \land <var:h> = <nat:4> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> \} \end{eqnarray} Applying Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:d> = <var:C> }} <var:h> := <nat:4> ; <var:h> := <nat:1> + <var:h> * <var:d> ; <var:h> := <nat:4> + <var:h> * <var:d> ; <var:h> := <var:h> * <var:d> ; <var:h> := <nat:1> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> ; <var:h> := <nat:4> + <var:h> * <var:d> {{ <var:h> = <nat:4> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:h> = <nat:4> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 