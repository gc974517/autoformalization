\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:Q> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:Q> ; <var:e2> := <var:e2> * <var:Q> ; <var:C> := <var:e2> ; <var:C> := <var:C> + <var:e1> ; <var:C> := <var:C> + <var:e0> \end{verbatim} Allowing --- for every integers $ <var:O> $ --- that $ <var:Q> = <var:O> $ ahead of interpreting our list of commands , then we see $ <var:C> = <nat:5> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> + <nat:7> $ . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:Q> = <var:O> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:3> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \} \\ <var:e1> := <var:e1> * <var:Q> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> * <var:O> \} \\ <var:e2> := <nat:5> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> * <var:O> \land <var:e2> = <nat:5> \} \\ <var:e2> := <var:e2> * <var:Q> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> * <var:O> \land <var:e2> = <nat:5> * <var:O> \} \\ <var:e2> := <var:e2> * <var:Q> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> * <var:O> \land <var:e2> = <nat:5> * <var:O> ^ <nat:2> \} \\ <var:C> := <var:e2> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> * <var:O> \land <var:C> = <nat:5> * <var:O> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:e1> ; \\ \{ <var:Q> = <var:O> \land <var:e0> = <nat:7> \land <var:C> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> \} \\ <var:C> := <var:C> + <var:e0> \\ \{ <var:Q> = <var:O> \land <var:C> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:7> \} \end{eqnarray} As a result , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Q> = <var:O> }} <var:e0> := <nat:7> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:Q> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:Q> ; <var:e2> := <var:e2> * <var:Q> ; <var:C> := <var:e2> ; <var:C> := <var:C> + <var:e1> ; <var:C> := <var:C> + <var:e0> {{ <var:C> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:O> /\ <var:e2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:O> /\ <var:e2> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:O> /\ <var:e2> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:O> /\ <var:C> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:e0> = <nat:7> /\ <var:C> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:C> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 