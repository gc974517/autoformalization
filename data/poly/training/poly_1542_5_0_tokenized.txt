\begin{document} \begin{theorem} We define a program as follows \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:I> ; <var:m> := <var:L1> ; <var:m> := <var:m> + <var:L0> \end{verbatim} Assume $ <var:I> = <var:a> $ before evaluating the program , it follows that we see $ <var:m> = <nat:3> \cdot <var:a> + <nat:2> $ after program executes . \end{theorem} \begin{proof} The proof of the list of commands is demonstrated by Hoare techniques . Considering the upcoming line of code contained in the code segment , the environment update code \verb | <var:L0> := <nat:2> ; | . This advances the condition $ \{ <var:I> = <var:a> \} $ toward the condition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \} $ . This is guaranteed using the assignment law given in standard Hoare techniques . Looking at the proceeding line found in our set of instructions , the assignment command \verb | <var:L1> := <nat:3> ; | . This line advances the condition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \} $ to the condition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \} $ . This is given with the assignment inference rule defined by standard Hoare logic . Taking a look at the upcoming line contained in the code , we see the variable update command \verb | <var:L1> := <var:L1> * <var:I> ; | . This transfers $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \} $ toward the postcondition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> * <var:a> \} $ . This is sound with the assignment rule defined in Hoare techniques . Jumping to the next piece of code seen in the code segment , we see the variable assignmet line yielding $ <var:L1> $ to $ <var:m>$ . This redefines the precondition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> * <var:a> \} $ as the postcondition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \land <var:m> = <nat:3> * <var:a> \} $ . Shifting focus toward the next line of code seen in the segment of code , we see the binding command \verb | <var:m> := <var:m> + <var:L0> | . This moves the precondition $ \{ <var:I> = <var:a> \land <var:L0> = <nat:2> \land <var:m> = <nat:3> * <var:a> \} $ toward $ \{ <var:I> = <var:a> \land <var:m> = <nat:3> * <var:a> + <nat:2> \} $ . This is rigorously given through the assignment law defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <var:L0> := <nat:2> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:I> ; <var:m> := <var:L1> ; <var:m> := <var:m> + <var:L0> {{ <var:m> = <nat:3> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:L0> = <nat:2> /\ <var:m> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:m> = <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 