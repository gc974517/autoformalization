\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:6> ; <var:o> := <var:w0> \end{verbatim} Given $ <var:S> = <var:C> $ ( letting natural numbers $ <var:C> $ ) before evaluating this code segment it follows that we see $ <var:o> = <nat:6> $ after list of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:C> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:S> = <var:C> \land <var:w0> = <nat:6> \} \\ <var:o> := <var:w0> \\ \{ <var:S> = <var:C> \land <var:o> = <nat:6> \} \end{eqnarray} Using Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <var:w0> := <nat:6> ; <var:o> := <var:w0> {{ <var:o> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:o> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 