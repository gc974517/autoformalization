\begin{document} \begin{theorem} Consider a segment of code as follows \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:j> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:j> ; <var:Y2> := <var:Y2> * <var:j> ; <var:M> := <var:Y2> ; <var:M> := <var:M> + <var:Y1> ; <var:M> := <var:M> + <var:Y0> \end{verbatim} Assuming for some $ <var:P> \in \mathbb{Z}^+ $ that we have $ <var:j> = <var:P> $ before the evaluation of our series of instructions , it holds that we have $ <var:M> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:j> = <var:P> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <nat:4> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> * <var:P> \} \\ <var:Y2> := <nat:3> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> * <var:P> \land <var:Y2> = <nat:3> \} \\ <var:Y2> := <var:Y2> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> * <var:P> \land <var:Y2> = <nat:3> * <var:P> \} \\ <var:Y2> := <var:Y2> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> * <var:P> \land <var:Y2> = <nat:3> * <var:P> ^ <nat:2> \} \\ <var:M> := <var:Y2> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:4> * <var:P> \land <var:M> = <nat:3> * <var:P> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:Y1> ; \\ \{ <var:j> = <var:P> \land <var:Y0> = <nat:2> \land <var:M> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> \} \\ <var:M> := <var:M> + <var:Y0> \\ \{ <var:j> = <var:P> \land <var:M> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> \} \end{eqnarray} Thus , this program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:j> = <var:P> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:j> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:j> ; <var:Y2> := <var:Y2> * <var:j> ; <var:M> := <var:Y2> ; <var:M> := <var:M> + <var:Y1> ; <var:M> := <var:M> + <var:Y0> {{ <var:M> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> * <var:P> /\ <var:Y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> * <var:P> /\ <var:Y2> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> * <var:P> /\ <var:Y2> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:4> * <var:P> /\ <var:M> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:Y0> = <nat:2> /\ <var:M> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:M> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 