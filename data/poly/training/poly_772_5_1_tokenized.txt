\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:N1> := <var:S> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:3> ; <var:w> := <var:N1> <var:w> := <var:w> + <var:N0> \end{verbatim} Assume that $ <var:S> = <var:K> $ prior to the evaluation of the series of commands it holds that we have $ <var:w> = <nat:3> * <var:K> + <nat:2> $ when set of commands is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:S> = <var:K> \} \\ <var:N1> := <var:S> ; \\ \{ <var:S> = <var:K> \land <var:N1> = <var:K> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:S> = <var:K> \land <var:N1> = <var:K> \land <var:N0> = <nat:2> \} \\ <var:N1> := <var:N1> * <nat:3> ; \\ \{ <var:S> = <var:K> \land <var:N1> = <nat:3> * <var:K> \land <var:N0> = <nat:2> \} \\ <var:w> := <var:N1> \\ \{ <var:S> = <var:K> \land <var:N0> = <nat:2> \land <var:w> = <nat:3> * <var:K> \} \\ <var:w> := <var:w> + <var:N0> \\ \{ <var:S> = <var:K> \land <var:w> = <nat:3> * <var:K> + <nat:2> \} \end{eqnarray} Given the above , this program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:S> = <var:K> }} <var:N1> := <var:S> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:3> ; <var:w> := <var:N1> <var:w> := <var:w> + <var:N0> {{ <var:w> = <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:N1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:N1> = <var:K> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:N1> = <nat:3> * <var:K> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:N0> = <nat:2> /\ <var:w> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:w> = <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 