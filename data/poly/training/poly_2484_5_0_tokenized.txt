\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:L> ; <var:f> := <var:x1> ; <var:f> := <var:f> + <var:x0> \end{verbatim} Allowing it to hold that $ <var:L> = <var:b> $ , for all positive integers $ <var:b> $ , prior to interpreting this series of instructions , then we see $ <var:f> = <nat:2> \times <var:b> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:b> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:L> = <var:b> \land <var:x0> = <nat:3> \} \\ <var:x1> := <nat:2> ; \\ \{ <var:L> = <var:b> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> \} \\ <var:x1> := <var:x1> * <var:L> ; \\ \{ <var:L> = <var:b> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> \cdot <var:b> \} \\ <var:f> := <var:x1> ; \\ \{ <var:L> = <var:b> \land <var:x0> = <nat:3> \land <var:f> = <nat:2> \cdot <var:b> \} \\ <var:f> := <var:f> + <var:x0> \\ \{ <var:L> = <var:b> \land <var:f> = <nat:2> \cdot <var:b> + <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:L> = <var:b> }} <var:x0> := <nat:3> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:L> ; <var:f> := <var:x1> ; <var:f> := <var:f> + <var:x0> {{ <var:f> = <nat:2> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:x0> = <nat:3> /\ <var:f> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:f> = <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 