\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:6> ; <var:A> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for $ <var:n> \in \mathbb{Z}^+ $ ) $ <var:b> = <var:n> $ before the evaluation of the list of commands , it must be that we see $ <var:A> = <nat:6> $ when series of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this code can be accomplished using standard Hoare reasoning . Jumping to the subsequent piece of code seen in our code , the assignment code yielding $ <nat:6> $ toward $ <var:l0>$ . This statement takes $ \{ <var:b> = <var:n> \} $ to $ \{ <var:b> = <var:n> \land <var:l0> = <nat:6> \} $ . This is shown to be logically sound with the assignment law given in usual Hoare reasoning . Advancing to the next step , we have the variable update statement binding $ <var:l0$ as $ <var:A>$ . This line transfers $ \{ <var:b> = <var:n> \land <var:l0> = <nat:6> \} $ as $ \{ <var:b> = <var:n> \land <var:A> = <nat:6> \} $ . This is ensured using the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:A> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:b> = <var:n> }} <def:poly> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 