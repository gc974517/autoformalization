\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:e0> := <nat:5> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:t> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:t> ; <var:e2> := <var:e2> * <var:t> ; <var:F> := <var:e2> ; <var:F> := <var:F> + <var:e1> ; <var:F> := <var:F> + <var:e0> \end{verbatim} Allowing it to be that $ <var:t> = <var:a> $ ( for some natural numbers $ <var:a> $ ) before running this series of instructions it holds that we have $ <var:F> = <nat:5> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions can be given through standard Hoare logic . Going to the next step , we see the variable update command \verb | <var:e0> := <nat:5> ; | . This command takes the precondition $ \{ <var:t> = <var:a> \} $ as the postcondition $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \} $ . This is shown to be logically sound by the assignment scheme defined in usual Hoare techniques . Looking at the following bit of code in the series of commands , we see the variable assignmet code \verb | <var:e1> := <nat:8> ; | . This takes $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \} $ as the condition $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \} $ . Observing the following piece of code found in the code , the variable binding code letting $ <var:e1> * <var:t> $ as $ <var:e1>$ . This statement advances $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \} $ toward the postcondition $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \} $ . Next , we have the variable binding statement \verb | <var:e2> := <nat:5> ; | . This statement forwards $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \} $ into $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:e2> = <nat:5> \} $ . This is deduced through the assignment law given by usual Hoare techniques . Shifting focus toward the next line contained in our code , we have the line assigning $ <var:e2> * <var:t> $ to $ <var:e2>$ . This line advances $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:e2> = <nat:5> \} $ into the condition $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:e2> = <nat:5> \cdot <var:a> \} $ . This is given with the assignment law defined in standard Hoare logic . Stepping through , the variable assignmet statement \verb | <var:e2> := <var:e2> * <var:t> ; | . This statement transfers $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:e2> = <nat:5> \cdot <var:a> \} $ into $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:e2> = <nat:5> \cdot <var:a> ^ <nat:2> \} $ . Moving on , we see the command defining $ <var:e2> $ into $ <var:F>$ . This moves $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:e2> = <nat:5> \cdot <var:a> ^ <nat:2> \} $ toward $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:F> = <nat:5> \cdot <var:a> ^ <nat:2> \} $ . Moving onward , we see the variable update line binding $ <var:F> + <var:e1> $ as $ <var:F>$ . This moves the precondition $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:e1> = <nat:8> \cdot <var:a> \land <var:F> = <nat:5> \cdot <var:a> ^ <nat:2> \} $ toward $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:F> = <nat:5> \cdot <var:a> ^ <nat:2> + <nat:8> \cdot <var:a> \} $ . Keeping momentum , we see the environment update command \verb | <var:F> := <var:F> + <var:e0> | . This redefines the condition $ \{ <var:t> = <var:a> \land <var:e0> = <nat:5> \land <var:F> = <nat:5> \cdot <var:a> ^ <nat:2> + <nat:8> \cdot <var:a> \} $ toward the postcondition $ \{ <var:t> = <var:a> \land <var:F> = <nat:5> \cdot <var:a> ^ <nat:2> + <nat:8> \cdot <var:a> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:t> = <var:a> }} <var:e0> := <nat:5> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:t> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:t> ; <var:e2> := <var:e2> * <var:t> ; <var:F> := <var:e2> ; <var:F> := <var:F> + <var:e1> ; <var:F> := <var:F> + <var:e0> {{ <var:F> = <nat:5> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:8> * <var:a> /\ <var:e2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:8> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:8> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:8> * <var:a> /\ <var:F> = <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:e0> = <nat:5> /\ <var:F> = <nat:5> * <var:a> ^ <nat:2> + <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F> = <nat:5> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 