\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t> := <nat:3> ; <var:t> := <var:t> * <var:U> ; <var:t> := <nat:1> + <var:t> * <var:U> ; <var:t> := <nat:4> + <var:t> * <var:U> ; <var:t> := <nat:2> + <var:t> * <var:U> ; <var:t> := <nat:2> + <var:t> * <var:U> ; <var:t> := <nat:4> + <var:t> * <var:U> ; <var:t> := <var:t> * <var:U> ; <var:t> := <nat:4> + <var:t> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Allow given any natural numbers $ <var:h> $ it to hold that $ <var:U> = <var:h> $ before the execution of the list of instructions , it follows that we see $ <var:t> = <nat:3> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:U> = <var:h> \} \\ <var:t> := <nat:3> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \} \\ <var:t> := <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> + \} \\ <var:t> := <nat:1> + <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> + <nat:4> \} \\ <var:t> := <nat:2> + <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} \\ <var:t> := <nat:2> + <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:2> \} \\ <var:t> := <nat:4> + <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:4> \} \\ <var:t> := <var:t> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:7> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + \} \\ <var:t> := <nat:4> + <var:t> * <var:U> \\ \{ <var:U> = <var:h> \land <var:t> = <nat:3> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:3> ; <var:t> := <var:t> * <var:U> ; <var:t> := <nat:1> + <var:t> * <var:U> ; <var:t> := <nat:4> + <var:t> * <var:U> ; <var:t> := <nat:2> + <var:t> * <var:U> ; <var:t> := <nat:2> + <var:t> * <var:U> ; <var:t> := <nat:4> + <var:t> * <var:U> ; <var:t> := <var:t> * <var:U> ; <var:t> := <nat:4> + <var:t> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:U> = <var:h> }} <def:poly> {{ <var:t> = <nat:3> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:t> = <nat:3> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 