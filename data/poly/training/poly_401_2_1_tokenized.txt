\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:2> ; <var:J> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Assume given every integers $ <var:Z> $ it to be that $ <var:Y> = <var:Z> $ prior to the evaluation of this segment of code , it holds that $ <var:J> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be shown through standard Hoare techniques . Going to the next step , we see the command yielding $ <nat:2> $ toward $ <var:e0>$ . This code forwards the condition $ \{ <var:Y> = <var:Z> \} $ as the condition $ \{ <var:Y> = <var:Z> \land <var:e0> = <nat:2> \} $ . Immediately after , the variable assignmet line \verb | <var:J> := <var:e0> | . This code advances the condition $ \{ <var:Y> = <var:Z> \land <var:e0> = <nat:2> \} $ into the condition $ \{ <var:Y> = <var:Z> \land <var:J> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:J> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <def:poly> {{ <var:J> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:J> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 