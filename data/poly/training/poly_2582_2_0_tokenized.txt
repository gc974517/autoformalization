\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:4> ; <var:G> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:n> = <var:M> $ before interpreting the set of commands , then we have $ <var:G> = <nat:4> $ after list of instructions terminates . \end{theorem} \begin{proof} Proving correctness for our code segment is given by typical Hoare techniques . Moving on to the next command found in the list of commands , we have the assignment line \verb | <var:j0> := <nat:4> ; | . This transfers $ \{ <var:n> = <var:M> \} $ toward the postcondition $ \{ <var:n> = <var:M> \land <var:j0> = <nat:4> \} $ . Going forward , we see the code binding $ <var:j0$ into $ <var:G>$ . This command redefines $ \{ <var:n> = <var:M> \land <var:j0> = <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:M> \land <var:G> = <nat:4> \} $ . This is guaranteed through the assignment rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:G> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:n> = <var:M> }} <def:poly> {{ <var:G> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:G> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 