\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:z> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:1> ; <var:n> := <var:W1> <var:n> := <var:n> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:z> = <var:F> $ for all positive integer coefficients $ <var:F> $ prior to the evaluation of our code then we have $ <var:n> = <nat:1> \times <var:F> + <nat:4> $ once list of commands is done executing . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:z> = <var:F> \} \\ <var:W1> := <var:z> ; \\ \{ <var:z> = <var:F> \land <var:W1> = <var:F> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:z> = <var:F> \land <var:W1> = <var:F> \land <var:W0> = <nat:4> \} \\ <var:W1> := <var:W1> * <nat:1> ; \\ \{ <var:z> = <var:F> \land <var:W1> = <nat:1> * <var:F> \land <var:W0> = <nat:4> \} \\ <var:n> := <var:W1> \\ \{ <var:z> = <var:F> \land <var:W0> = <nat:4> \land <var:n> = <nat:1> * <var:F> \} \\ <var:n> := <var:n> + <var:W0> \\ \{ <var:z> = <var:F> \land <var:n> = <nat:1> * <var:F> + <nat:4> \} \end{eqnarray} As a result , the code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:z> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:1> ; <var:n> := <var:W1> <var:n> := <var:n> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:z> = <var:F> }} <def:poly> {{ <var:n> = <nat:1> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:W1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:W1> = <var:F> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:W1> = <nat:1> * <var:F> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:W0> = <nat:4> /\ <var:n> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:n> = <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 