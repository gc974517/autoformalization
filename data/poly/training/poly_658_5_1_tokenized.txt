\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} : \begin{verbatim} <var:e1> := <var:X> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:9> ; <var:S> := <var:e1> <var:S> := <var:S> + <var:e0> \end{verbatim} Assume $ <var:X> = <var:m> $ --- for any natural numbers $ <var:m> $ --- prior to evaluating this set of commands , it follows that we have $ <var:S> = <nat:9> \cdot <var:m> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our code can be shown with usual Hoare techniques . Observing the following lines of codecontained in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:X> = <var:m> \} & <var:e1> := <var:X> & \{ <var:X> = <var:m> \land <var:e1> = <var:m> \} \\ \{ <var:X> = <var:m> \land <var:e1> = <var:m> \} & <var:e0> := <nat:4> & \{ <var:X> = <var:m> \land <var:e1> = <var:m> \land <var:e0> = <nat:4> \} \\ \{ <var:X> = <var:m> \land <var:e1> = <var:m> \land <var:e0> = <nat:4> \} & <var:e1> := <var:e1> * <nat:9> & \{ <var:X> = <var:m> \land <var:e1> = <nat:9> * <var:m> \land <var:e0> = <nat:4> \} \\ \{ <var:X> = <var:m> \land <var:e1> = <nat:9> * <var:m> \land <var:e0> = <nat:4> \} & <var:S> := <var:e1& \{ <var:X> = <var:m> \land <var:e0> = <nat:4> \land <var:S> = <nat:9> * <var:m> \} \end{tabular} Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:m> \} & <var:e1> := <var:X> & \{ <var:X> = <var:m> \land <var:e1> = <var:m> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <var:e1> := <var:X> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:9> ; <var:S> := <var:e1> <var:S> := <var:S> + <var:e0> {{ <var:S> = <nat:9> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:e1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:e1> = <var:m> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:e1> = <nat:9> * <var:m> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:e0> = <nat:4> /\ <var:S> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:S> = <nat:9> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 