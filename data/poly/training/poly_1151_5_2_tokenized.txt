\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:1> ; <var:l> := <nat:2> + <var:l> * <var:t> ; <var:l> := <nat:1> + <var:l> * <var:t> ; <var:l> := <nat:4> + <var:l> * <var:t> ; <var:l> := <nat:2> + <var:l> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:t> = <var:Z> $ prior to evaluating the list of commands , it must be that we see $ <var:l> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be accomplished using typical Hoare logic . Moving forward , we see the variable binding code \verb | <var:l> := <nat:1> ; | . This command takes $ \{ <var:t> = <var:Z> \} $ into $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \} $ . This is shown by the assignment scheme given by Hoare techniques . Keeping momentum , the environment update command \verb | <var:l> := <nat:2> + <var:l> * <var:t> ; | . This code forwards the precondition $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \} $ to $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> + <nat:2> \} $ . This is known to be sound by the assignment scheme given by typical Hoare reasoning . Moving forward , we have the line binding $ <nat:1> + <var:l> * <var:t> $ toward $ <var:l>$ . This takes $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> + <nat:2> \} $ to $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:1> \} $ . Looking at the upcoming line seen in our code , we see the line \verb | <var:l> := <nat:4> + <var:l> * <var:t> ; | . This advances the condition $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:1> \} $ into $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:4> \} $ . This is given using the assignment law given in standard Hoare reasoning . Moving on to the next piece of code found in the set of commands , we have the binding code \verb | <var:l> := <nat:2> + <var:l> * <var:t> | . This code redefines the precondition $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:4> \} $ into $ \{ <var:t> = <var:Z> \land <var:l> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:1> ; <var:l> := <nat:2> + <var:l> * <var:t> ; <var:l> := <nat:1> + <var:l> * <var:t> ; <var:l> := <nat:4> + <var:l> * <var:t> ; <var:l> := <nat:2> + <var:l> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:t> = <var:Z> }} <def:poly> {{ <var:l> = <nat:1> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:l> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:l> = <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:l> = <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:l> = <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:l> = <nat:1> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 