\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:J> ; <var:B> := <var:z1> ; <var:B> := <var:B> + <var:z0> \end{verbatim} Allow that $ <var:J> = <var:h> $ , letting whole numbers $ <var:h> $ , ahead of the evaluation of this code segment it holds that we have $ <var:B> = <nat:4> \cdot <var:h> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be given using typical Hoare logic . Moving onward , we see the environment update line binding $ <nat:8> $ to $ <var:z0>$ . This advances $ \{ <var:J> = <var:h> \} $ into the condition $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \} $ . This is guaranteed through the assignment scheme from Hoare reasoning . Going forward , the variable binding statement \verb | <var:z1> := <nat:4> ; | . This code advances the condition $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \} $ into $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> \} $ . Advancing to the next step , we see the assignment command assigning $ <var:z1> * <var:J> $ to $ <var:z1>$ . This takes $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> \} $ as the condition $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> \cdot <var:h> \} $ . This is given using the assignment inference rule from standard Hoare reasoning . Advancing , the variable binding line defining $ <var:z1> $ to $ <var:B>$ . This command moves the condition $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \land <var:z1> = <nat:4> \cdot <var:h> \} $ toward $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:h> \} $ . This is sound by the assignment rule from typical Hoare logic . Moving forward to the next step , we see the assignment command \verb | <var:B> := <var:B> + <var:z0> | . This code transfers $ \{ <var:J> = <var:h> \land <var:z0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:h> \} $ toward the condition $ \{ <var:J> = <var:h> \land <var:B> = <nat:4> \cdot <var:h> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:J> = <var:h> }} <var:z0> := <nat:8> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:J> ; <var:B> := <var:z1> ; <var:B> := <var:B> + <var:z0> {{ <var:B> = <nat:4> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:z0> = <nat:8> /\ <var:B> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:B> = <nat:4> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 