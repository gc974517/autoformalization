\begin{document} \begin{theorem} We define a code segment such that \begin{verbatim} <var:P0> := <nat:3> ; <var:R> := <var:P0> \end{verbatim} Given it to hold that $ <var:x> = <var:H> $ ahead of executing the code segment , it holds that we have $ <var:R> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:H> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:x> = <var:H> \land <var:P0> = <nat:3> \} \\ <var:R> := <var:P0> \\ \{ <var:x> = <var:H> \land <var:R> = <nat:3> \} \end{eqnarray} Applying standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:x> = <var:H> }} <var:P0> := <nat:3> ; <var:R> := <var:P0> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 