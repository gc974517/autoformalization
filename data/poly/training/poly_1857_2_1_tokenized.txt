\begin{document} \begin{theorem} Consider the following program : \begin{verbatim} <var:v0> := <nat:8> ; <var:O> := <var:v0> \end{verbatim} Given --- for any $ <var:n> \in \mathbb{Z}^+ $ --- that we have $ <var:m> = <var:n> $ before the evaluation of this code segment , it must be that we see $ <var:O> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:n> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:m> = <var:n> \land <var:v0> = <nat:8> \} \\ <var:O> := <var:v0> \\ \{ <var:m> = <var:n> \land <var:O> = <nat:8> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:m> = <var:n> }} <var:v0> := <nat:8> ; <var:O> := <var:v0> {{ <var:O> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:O> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 