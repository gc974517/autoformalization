\begin{document} \begin{theorem} Define a code in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:R> ; <var:r2> := <var:r1> * <var:R> ; <var:r3> := <var:r2> * <var:R> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:8> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:3> ; <var:T> := <var:r3> <var:T> := <var:T> + <var:r2> <var:T> := <var:T> + <var:r1> <var:T> := <var:T> + <var:r0> \end{verbatim} Allowing that we have $ <var:R> = <var:M> $ prior to executing the list of instructions it must be that $ <var:T> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:8> \cdot <var:M> + <nat:7> $ once code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:M> \} \\ <var:r1> := <var:R> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <var:M> \} \\ <var:r2> := <var:r1> * <var:R> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <var:M> \land <var:r2> = <var:M> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:R> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <var:M> \land <var:r2> = <var:M> ^ <nat:2> \land <var:r3> = <var:M> ^ <nat:3> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <var:M> \land <var:r2> = <var:M> ^ <nat:2> \land <var:r3> = <var:M> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:r1> := <var:r1> * <nat:8> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <nat:8> \times <var:M> \land <var:r2> = <var:M> ^ <nat:2> \land <var:r3> = <var:M> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:r2> := <var:r2> * <nat:1> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <nat:8> \times <var:M> \land <var:r2> = <nat:1> \times <var:M> ^ <nat:2> \land <var:r3> = <var:M> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:r3> := <var:r3> * <nat:3> ; \\ \{ <var:R> = <var:M> \land <var:r1> = <nat:8> \times <var:M> \land <var:r2> = <nat:1> \times <var:M> ^ <nat:2> \land <var:r3> = <nat:3> \times <var:M> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:T> := <var:r3> \\ \{ <var:R> = <var:M> \land <var:r1> = <nat:8> \times <var:M> \land <var:r2> = <nat:1> \times <var:M> ^ <nat:2> \land <var:r0> = <nat:7> \land <var:T> = <nat:3> \times <var:M> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:r2> \\ \{ <var:R> = <var:M> \land <var:r1> = <nat:8> \times <var:M> \land <var:r0> = <nat:7> \land <var:T> = <nat:3> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:r1> \\ \{ <var:R> = <var:M> \land <var:r0> = <nat:7> \land <var:T> = <nat:3> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:8> \times <var:M> \} \\ <var:T> := <var:T> + <var:r0> \\ \{ <var:R> = <var:M> \land <var:T> = <nat:3> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:8> \times <var:M> + <nat:7> \} \end{eqnarray} Using standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:R> = <var:M> }} <var:r1> := <var:R> ; <var:r2> := <var:r1> * <var:R> ; <var:r3> := <var:r2> * <var:R> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:8> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:3> ; <var:T> := <var:r3> <var:T> := <var:T> + <var:r2> <var:T> := <var:T> + <var:r1> <var:T> := <var:T> + <var:r0> {{ <var:T> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <var:M> /\ <var:r2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <var:M> /\ <var:r2> = <var:M> ^ <nat:2> /\ <var:r3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <var:M> /\ <var:r2> = <var:M> ^ <nat:2> /\ <var:r3> = <var:M> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <nat:8> * <var:M> /\ <var:r2> = <var:M> ^ <nat:2> /\ <var:r3> = <var:M> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <nat:8> * <var:M> /\ <var:r2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:r3> = <var:M> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <nat:8> * <var:M> /\ <var:r2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:M> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <nat:8> * <var:M> /\ <var:r2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:r0> = <nat:7> /\ <var:T> = <nat:3> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r1> = <nat:8> * <var:M> /\ <var:r0> = <nat:7> /\ <var:T> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:r0> = <nat:7> /\ <var:T> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:T> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 