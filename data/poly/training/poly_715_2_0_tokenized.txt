\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:2> ; <var:Q> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow that we have $ <var:S> = <var:w> $ ( given some positive numbers $ <var:w> $ ) ahead of the execution of our code segment it must be that we see $ <var:Q> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be shown using standard Hoare logic . Considering the following bit of code found in the series of instructions , we see \begin{verbatim} { <var:S> = <var:w> } <var:a0> := <nat:2> { <var:S> = <var:w> \land <var:a0> = <nat:2> } \end{verbatim} Moving on to the next step , \begin{verbatim} { <var:S> = <var:w> } <var:a0> := <nat:2> { <var:S> = <var:w> \land <var:a0> = <nat:2> } \end{verbatim} This is given by the variable update rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:2> ; <var:Q> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:S> = <var:w> }} <def:poly> {{ <var:Q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:Q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 