\begin{document} \begin{theorem} Take a set of instructions such that \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:i> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:i> ; <var:H2> := <var:H2> * <var:i> ; <var:L> := <var:H2> ; <var:L> := <var:L> + <var:H1> ; <var:L> := <var:L> + <var:H0> \end{verbatim} Given that $ <var:i> = <var:a> $ before the execution of this program it holds that $ <var:L> = <nat:2> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is evident through typical Hoare logic . Moving on , the variable assignmet code \verb | <var:H0> := <nat:5> ; | . This line transfers the precondition $ \{ <var:i> = <var:a> \} $ toward the condition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \} $ . Moving forward to the subsequent line found in our set of instructions , we see the environment update command binding $ <nat:8> $ toward $ <var:H1>$ . This advances the precondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \} $ toward the postcondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \} $ . Honing in on the next line of code found in the set of commands , the binding line letting $ <var:H1> * <var:i> $ into $ <var:H1>$ . This line redefines the condition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \} $ into the condition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \} $ . This is deduced with the assignment scheme found in typical Hoare reasoning . Taking a look at the subsequent line contained in our code , we have the variable assignmet command \verb | <var:H2> := <nat:2> ; | . This takes the precondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \} $ to $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:H2> = <nat:2> \} $ . Immediately after , the assignment statement \verb | <var:H2> := <var:H2> * <var:i> ; | . This forwards the precondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:H2> = <nat:2> \} $ into the postcondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:H2> = <nat:2> * <var:a> \} $ . Immediately following , we have the variable update code giving $ <var:H2> * <var:i> $ as $ <var:H2>$ . This advances the condition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:H2> = <nat:2> * <var:a> \} $ as the postcondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:H2> = <nat:2> * <var:a> ^ <nat:2> \} $ . Observing the following statement seen in the set of instructions , the line \verb | <var:L> := <var:H2> ; | . This forwards $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:H2> = <nat:2> * <var:a> ^ <nat:2> \} $ toward the postcondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:L> = <nat:2> * <var:a> ^ <nat:2> \} $ . Considering the next line seen in the segment of code , the code \verb | <var:L> := <var:L> + <var:H1> ; | . This line redefines the precondition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> * <var:a> \land <var:L> = <nat:2> * <var:a> ^ <nat:2> \} $ into $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:L> = <nat:2> * <var:a> ^ <nat:2> + <nat:8> * <var:a> \} $ . Paying attention to the upcoming command contained in our series of instructions , we have the variable assignmet line assigning $ <var:L> + <var:H0$ as $ <var:L>$ . This statement takes the condition $ \{ <var:i> = <var:a> \land <var:H0> = <nat:5> \land <var:L> = <nat:2> * <var:a> ^ <nat:2> + <nat:8> * <var:a> \} $ to $ \{ <var:i> = <var:a> \land <var:L> = <nat:2> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> \} $ . This is sound by the assignment inference rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:i> = <var:a> }} <var:H0> := <nat:5> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:i> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:i> ; <var:H2> := <var:H2> * <var:i> ; <var:L> := <var:H2> ; <var:L> := <var:L> + <var:H1> ; <var:L> := <var:L> + <var:H0> {{ <var:L> = <nat:2> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:a> /\ <var:H2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:a> /\ <var:H2> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:a> /\ <var:H2> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:a> /\ <var:L> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:H0> = <nat:5> /\ <var:L> = <nat:2> * <var:a> ^ <nat:2> + <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:L> = <nat:2> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 