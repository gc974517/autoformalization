\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:w> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:6> ; <var:E> := <var:z1> <var:E> := <var:E> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming given whole numbers $ <var:q> $ that $ <var:w> = <var:q> $ prior to running our set of commands , it holds that we see $ <var:E> = <nat:6> * <var:q> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our series of commands can be shown by standard Hoare logic . Now , we have the variable binding code \verb | <var:z1> := <var:w> ; | . This takes the condition $ \{ <var:w> = <var:q> \} $ toward $ \{ <var:w> = <var:q> \land <var:z1> = <var:q> \} $ . Moving forward to the next command seen in our code , we see the environment update code \verb | <var:z0> := <nat:3> ; | . This redefines $ \{ <var:w> = <var:q> \land <var:z1> = <var:q> \} $ to the condition $ \{ <var:w> = <var:q> \land <var:z1> = <var:q> \land <var:z0> = <nat:3> \} $ . Going to the next step , we have the command \verb | <var:z1> := <var:z1> * <nat:6> ; | . This statement advances $ \{ <var:w> = <var:q> \land <var:z1> = <var:q> \land <var:z0> = <nat:3> \} $ toward the postcondition $ \{ <var:w> = <var:q> \land <var:z1> = <nat:6> \times <var:q> \land <var:z0> = <nat:3> \} $ . Advancing on , we see the command defining $ <var:z1$ into $ <var:E>$ . This takes the condition $ \{ <var:w> = <var:q> \land <var:z1> = <nat:6> \times <var:q> \land <var:z0> = <nat:3> \} $ into the condition $ \{ <var:w> = <var:q> \land <var:z0> = <nat:3> \land <var:E> = <nat:6> \times <var:q> \} $ . This is shown to be logically sound with the assignment inference rule given in standard Hoare reasoning . Immediately following , the binding code binding $ <var:E> + <var:z0$ toward $ <var:E>$ . This command redefines $ \{ <var:w> = <var:q> \land <var:z0> = <nat:3> \land <var:E> = <nat:6> \times <var:q> \} $ into the postcondition $ \{ <var:w> = <var:q> \land <var:E> = <nat:6> \times <var:q> + <nat:3> \} $ . This is ensured with the assignment law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:w> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:6> ; <var:E> := <var:z1> <var:E> := <var:E> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:w> = <var:q> }} <def:poly> {{ <var:E> = <nat:6> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:z1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:z1> = <var:q> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:z1> = <nat:6> * <var:q> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:z0> = <nat:3> /\ <var:E> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:E> = <nat:6> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 