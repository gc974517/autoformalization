\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:g0> := <nat:4> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:t> ; <var:L> := <var:g1> ; <var:L> := <var:L> + <var:g0> \end{verbatim} Given that $ <var:t> = <var:B> $ assuming some $ <var:B> $ ahead of the execution of this list of instructions it holds that $ <var:L> = <nat:1> \times <var:B> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:t> = <var:B> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:t> = <var:B> \land <var:g0> = <nat:4> \} \\ <var:g1> := <nat:1> ; \\ \{ <var:t> = <var:B> \land <var:g0> = <nat:4> \land <var:g1> = <nat:1> \} \\ <var:g1> := <var:g1> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:g0> = <nat:4> \land <var:g1> = <nat:1> \cdot <var:B> \} \\ <var:L> := <var:g1> ; \\ \{ <var:t> = <var:B> \land <var:g0> = <nat:4> \land <var:L> = <nat:1> \cdot <var:B> \} \\ <var:L> := <var:L> + <var:g0> \\ \{ <var:t> = <var:B> \land <var:L> = <nat:1> \cdot <var:B> + <nat:4> \} \end{eqnarray} Thusly , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:t> = <var:B> }} <var:g0> := <nat:4> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:t> ; <var:L> := <var:g1> ; <var:L> := <var:L> + <var:g0> {{ <var:L> = <nat:1> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:g0> = <nat:4> /\ <var:L> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:L> = <nat:1> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 