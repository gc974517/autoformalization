\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:q0> := <nat:7> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:y> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:y> ; <var:q2> := <var:q2> * <var:y> ; <var:h> := <var:q2> ; <var:h> := <var:h> + <var:q1> ; <var:h> := <var:h> + <var:q0> \end{verbatim} Assuming that $ <var:y> = <var:J> $ before the execution of this series of instructions , it follows that we have $ <var:h> = <nat:6> \times <var:J> ^ <nat:2> + <nat:9> \times <var:J> + <nat:7> $ once list of commands has finished executing . \end{theorem} \begin{proof} The proof of this code segment can be shown with Hoare techniques . Advancing to the proceeding line of code found in our code , the variable assignmet line yielding $ <nat:7> $ to $ <var:q0>$ . This code forwards $ \{ <var:y> = <var:J> \} $ to the postcondition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \} $ . This is given through the assignment scheme found in usual Hoare reasoning . Moving forward to the proceeding piece of code found in the series of instructions , we see the variable assignmet line \verb | <var:q1> := <nat:9> ; | . This moves $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \} $ toward the postcondition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \} $ . This is sound through the assignment law found in usual Hoare reasoning . Looking at the proceeding bit of code in the series of commands , we have the line \verb | <var:q1> := <var:q1> * <var:y> ; | . This code redefines $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \} $ to $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \} $ . This is shown with the assignment rule of Hoare reasoning . Observing the following bit of code found in our program , we have the environment update line \verb | <var:q2> := <nat:6> ; | . This advances the precondition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \} $ as $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:q2> = <nat:6> \} $ . Focusing on the next step contained in the code segment , the variable binding code binding $ <var:q2> * <var:y> $ as $ <var:q2>$ . This statement takes $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:q2> = <nat:6> \} $ to the postcondition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:q2> = <nat:6> \cdot <var:J> \} $ . Taking a look at the subsequent piece of code found in our code , we have the binding line binding $ <var:q2> * <var:y> $ into $ <var:q2>$ . This statement takes the condition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:q2> = <nat:6> \cdot <var:J> \} $ to the condition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:q2> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ . Moving on to the upcoming statement in our set of instructions , we have the variable update code yielding $ <var:q2> $ into $ <var:h>$ . This statement redefines the precondition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:q2> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ toward the condition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:h> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ . Advancing , the line \verb | <var:h> := <var:h> + <var:q1> ; | . This statement transfers the condition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:J> \land <var:h> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:h> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> \} $ . This is deduced with the assignment scheme in typical Hoare reasoning . Looking at the subsequent step in our list of instructions , we see the assignment statement giving $ <var:h> + <var:q0$ into $ <var:h>$ . This command moves $ \{ <var:y> = <var:J> \land <var:q0> = <nat:7> \land <var:h> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> \} $ to the postcondition $ \{ <var:y> = <var:J> \land <var:h> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> + <nat:7> \} $ . This is rigorously given using the assignment rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:y> = <var:J> }} <var:q0> := <nat:7> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:y> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:y> ; <var:q2> := <var:q2> * <var:y> ; <var:h> := <var:q2> ; <var:h> := <var:h> + <var:q1> ; <var:h> := <var:h> + <var:q0> {{ <var:h> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> * <var:J> /\ <var:q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> * <var:J> /\ <var:q2> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> * <var:J> /\ <var:q2> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> * <var:J> /\ <var:h> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:q0> = <nat:7> /\ <var:h> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:h> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 