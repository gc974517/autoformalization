\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:6> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:M> ; <var:i> := <var:Y1> ; <var:i> := <var:i> + <var:Y0> \end{verbatim} Assume it to be that $ <var:M> = <var:G> $ before the execution of this list of instructions then $ <var:i> = <nat:3> * <var:G> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for the code segment can be shown with Hoare techniques . Jumping to the upcoming steps in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:G> \} & <var:Y0> := <nat:6> & \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \} \\ \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \} & <var:Y1> := <nat:3> & \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:3> \} \\ \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:3> \} & <var:Y1> := <var:Y1> * <var:M> & \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:3> \times <var:G> \} \\ \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:3> \times <var:G> \} & <var:i> := <var:Y1> & \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \land <var:i> = <nat:3> \times <var:G> \} \\ \{ <var:M> = <var:G> \land <var:Y0> = <nat:6> \land <var:i> = <nat:3> \times <var:G> \} & <var:i> := <var:i> + <var:Y0& \{ <var:M> = <var:G> \land <var:i> = <nat:3> \times <var:G> + <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:M> = <var:G> }} <var:Y0> := <nat:6> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:M> ; <var:i> := <var:Y1> ; <var:i> := <var:i> + <var:Y0> {{ <var:i> = <nat:3> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:Y0> = <nat:6> /\ <var:i> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:i> = <nat:3> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 