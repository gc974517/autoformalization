\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:7> ; <var:Q> := <var:L0> \end{verbatim} Assume it to hold that $ <var:E> = <var:h> $ ahead of evaluating the set of instructions , it must be that we have $ <var:Q> = <nat:7> $ after segment of code exits . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:E> = <var:h> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:E> = <var:h> \land <var:L0> = <nat:7> \} \\ <var:Q> := <var:L0> \\ \{ <var:E> = <var:h> \land <var:Q> = <nat:7> \} \end{eqnarray} Hence , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <var:L0> := <nat:7> ; <var:Q> := <var:L0> {{ <var:Q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:Q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 