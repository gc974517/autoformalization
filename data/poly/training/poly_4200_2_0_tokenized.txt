\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:1> ; <var:J> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Allowing that $ <var:O> = <var:a> $ ahead of the evaluation of the list of commands it must be that $ <var:J> = <nat:1> $ after code is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is shown with standard Hoare reasoning . Observing the upcoming statements seen in the series of instructions , \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:w0> := <nat:1> \, \{ <var:O> = <var:a> \land <var:w0> = <nat:1> \} \\ \{ <var:O> = <var:a> \land <var:w0> = <nat:1> \} \, <var:J> := <var:w0\, \{ <var:O> = <var:a> \land <var:J> = <nat:1> \} \end{eqnarray} This is sound using the variable binding inference rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:J> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:O> = <var:a> }} <def:poly> {{ <var:J> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 