\begin{document} \begin{theorem} Consider the following series of commands as \begin{verbatim} <var:n0> := <nat:9> ; <var:Y> := <var:n0> \end{verbatim} Assume that $ <var:d> = <var:X> $ --- with some whole numbers $ <var:X> $ --- prior to running this series of instructions , it holds that we have $ <var:Y> = <nat:9> $ once list of commands has finished . \end{theorem} \begin{proof} The flow of logic for this program can be done by usual Hoare techniques . Taking a look at the subsequent line contained in our list of instructions , \begin{eqnarray} \{ <var:d> = <var:X> \} \, <var:n0> := <nat:9> \, \{ <var:d> = <var:X> \land <var:n0> = <nat:9> \} \end{eqnarray} This is rigorously given through the scheme of standard Hoare logic . Shifting focus toward the following bit of code found in our series of commands , we see \begin{eqnarray} \{ <var:d> = <var:X> \} \, <var:n0> := <nat:9> \, \{ <var:d> = <var:X> \land <var:n0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:d> = <var:X> }} <var:n0> := <nat:9> ; <var:Y> := <var:n0> {{ <var:Y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 