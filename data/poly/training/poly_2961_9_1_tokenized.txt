\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:B> ; <var:D2> := <var:D1> * <var:B> ; <var:D3> := <var:D2> * <var:B> ; <var:D0> := <nat:9> ; <var:D1> := <var:D1> * <nat:5> ; <var:D3> := <var:D3> * <nat:9> ; <var:q> := <var:D3> <var:q> := <var:q> + <var:D1> <var:q> := <var:q> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow , assuming some natural coefficients $ <var:V> $ , that we have $ <var:B> = <var:V> $ before the execution of this list of instructions then we have $ <var:q> = <nat:9> * <var:V> ^ <nat:3> + <nat:5> * <var:V> + <nat:9> $ after set of commands executes . \end{theorem} \begin{proof} The application of usual Hoare logic results in : \begin{eqnarray} \{ <var:B> = <var:V> \} \\ <var:D1> := <var:B> ; \\ \{ <var:B> = <var:V> \land <var:D1> = <var:V> \} \\ <var:D2> := <var:D1> * <var:B> ; \\ \{ <var:B> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:B> ; \\ \{ <var:B> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \} \\ <var:D0> := <nat:9> ; \\ \{ <var:B> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D0> = <nat:9> \} \\ <var:D1> := <var:D1> * <nat:5> ; \\ \{ <var:B> = <var:V> \land <var:D1> = <nat:5> \times <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D0> = <nat:9> \} \\ <var:D3> := <var:D3> * <nat:9> ; \\ \{ <var:B> = <var:V> \land <var:D1> = <nat:5> \times <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <nat:9> \times <var:V> ^ <nat:3> \land <var:D0> = <nat:9> \} \\ <var:q> := <var:D3> \\ \{ <var:B> = <var:V> \land <var:D1> = <nat:5> \times <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D0> = <nat:9> \land <var:q> = <nat:9> \times <var:V> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:D1> \\ \{ <var:B> = <var:V> \land <var:D0> = <nat:9> \land <var:q> = <nat:9> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> \} \\ <var:q> := <var:q> + <var:D0> \\ \{ <var:B> = <var:V> \land <var:q> = <nat:9> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> + <nat:9> \} \end{eqnarray} Thus , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:B> ; <var:D2> := <var:D1> * <var:B> ; <var:D3> := <var:D2> * <var:B> ; <var:D0> := <nat:9> ; <var:D1> := <var:D1> * <nat:5> ; <var:D3> := <var:D3> * <nat:9> ; <var:q> := <var:D3> <var:q> := <var:q> + <var:D1> <var:q> := <var:q> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:B> = <var:V> }} <def:poly> {{ <var:q> = <nat:9> * <var:V> ^ <nat:3> + <nat:5> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <nat:5> * <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <nat:5> * <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <nat:9> * <var:V> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D1> = <nat:5> * <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D0> = <nat:9> /\ <var:q> = <nat:9> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D0> = <nat:9> /\ <var:q> = <nat:9> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:q> = <nat:9> * <var:V> ^ <nat:3> + <nat:5> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 