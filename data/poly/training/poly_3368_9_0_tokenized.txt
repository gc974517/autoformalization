\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:A> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:A> ; <var:S2> := <var:S2> * <var:A> ; <var:m> := <var:S2> ; <var:m> := <var:m> + <var:S1> ; <var:m> := <var:m> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:A> = <var:x> $ ahead of interpreting our code segment it must be that $ <var:m> = <nat:1> \times <var:x> ^ <nat:2> + <nat:6> \times <var:x> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:x> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \} \\ <var:S1> := <nat:6> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:S1> = <nat:6> \} \\ <var:S1> := <var:S1> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:S1> = <nat:6> \cdot <var:x> \} \\ <var:S2> := <nat:1> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:S1> = <nat:6> \cdot <var:x> \land <var:S2> = <nat:1> \} \\ <var:S2> := <var:S2> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:S1> = <nat:6> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> \} \\ <var:S2> := <var:S2> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:S1> = <nat:6> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:m> := <var:S2> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:S1> = <nat:6> \cdot <var:x> \land <var:m> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:S1> ; \\ \{ <var:A> = <var:x> \land <var:S0> = <nat:8> \land <var:m> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:6> \cdot <var:x> \} \\ <var:m> := <var:m> + <var:S0> \\ \{ <var:A> = <var:x> \land <var:m> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:6> \cdot <var:x> + <nat:8> \} \end{eqnarray} The application of standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:A> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:A> ; <var:S2> := <var:S2> * <var:A> ; <var:m> := <var:S2> ; <var:m> := <var:m> + <var:S1> ; <var:m> := <var:m> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:A> = <var:x> }} <def:poly> {{ <var:m> = <nat:1> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:6> * <var:x> /\ <var:S2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:6> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:6> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:6> * <var:x> /\ <var:m> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:S0> = <nat:8> /\ <var:m> = <nat:1> * <var:x> ^ <nat:2> + <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:m> = <nat:1> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 