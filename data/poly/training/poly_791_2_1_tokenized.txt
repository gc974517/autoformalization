\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:4> ; <var:c> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Assuming --- for any $ <var:A> $ --- $ <var:w> = <var:A> $ prior to executing this list of instructions it must be that $ <var:c> = <nat:4> $ once code segment has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be given by usual Hoare techniques . Following , we have the variable binding code binding $ <nat:4> $ into $ <var:g0>$ . This transfers $ \{ <var:w> = <var:A> \} $ to the condition $ \{ <var:w> = <var:A> \land <var:g0> = <nat:4> \} $ . This is rigorously given through the assignment rule from typical Hoare reasoning . Stepping through , the line \verb | <var:c> := <var:g0> | . This statement redefines the condition $ \{ <var:w> = <var:A> \land <var:g0> = <nat:4> \} $ to the postcondition $ \{ <var:w> = <var:A> \land <var:c> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:4> ; <var:c> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:w> = <var:A> }} <def:poly> {{ <var:c> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:c> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 