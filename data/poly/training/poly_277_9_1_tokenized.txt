\begin{document} \begin{theorem} We define the following series of commands : \begin{verbatim} <var:h1> := <var:F> ; <var:h2> := <var:h1> * <var:F> ; <var:h3> := <var:h2> * <var:F> ; <var:h0> := <nat:1> ; <var:h2> := <var:h2> * <nat:3> ; <var:h3> := <var:h3> * <nat:9> ; <var:V> := <var:h3> <var:V> := <var:V> + <var:h2> <var:V> := <var:V> + <var:h0> \end{verbatim} Allowing for some natural coefficients $ <var:X> $ $ <var:F> = <var:X> $ prior to the evaluation of this list of commands it must be that we have $ <var:V> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> $ after code has exited . \end{theorem} \begin{proof} The way to prove correctness for this list of commands is done with usual Hoare logic . Jumping to the next line of code found in the list of commands , the variable update statement \verb | <var:h1> := <var:F> ; | . This code moves the precondition $ \{ <var:F> = <var:X> \} $ to the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \} $ . Keeping momentum , we have the assignment command \verb | <var:h2> := <var:h1> * <var:F> ; | . This code advances the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \} $ toward $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <var:X> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law from usual Hoare techniques . Moving forward to the proceeding bit of code contained in our program , the assignment command defining $ <var:h2> * <var:F> $ into $ <var:h3>$ . This line forwards the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <var:X> ^ <nat:2> \} $ toward the postcondition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <var:X> ^ <nat:2> \land <var:h3> = <var:X> ^ <nat:3> \} $ . Moving on , the assignment statement assigning $ <nat:1> $ as $ <var:h0>$ . This statement forwards the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <var:X> ^ <nat:2> \land <var:h3> = <var:X> ^ <nat:3> \} $ to $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <var:X> ^ <nat:2> \land <var:h3> = <var:X> ^ <nat:3> \land <var:h0> = <nat:1> \} $ . Moving forward to the subsequent command found in our set of instructions , we see the line defining $ <var:h2> * <nat:3> $ to $ <var:h2>$ . This command moves $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <var:X> ^ <nat:2> \land <var:h3> = <var:X> ^ <nat:3> \land <var:h0> = <nat:1> \} $ toward the postcondition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <nat:3> * <var:X> ^ <nat:2> \land <var:h3> = <var:X> ^ <nat:3> \land <var:h0> = <nat:1> \} $ . After , the binding statement letting $ <var:h3> * <nat:9> $ as $ <var:h3>$ . This redefines the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <nat:3> * <var:X> ^ <nat:2> \land <var:h3> = <var:X> ^ <nat:3> \land <var:h0> = <nat:1> \} $ into the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <nat:3> * <var:X> ^ <nat:2> \land <var:h3> = <nat:9> * <var:X> ^ <nat:3> \land <var:h0> = <nat:1> \} $ . Taking another step toward the next piece of code in our set of instructions , we have the environment update command letting $ <var:h3$ to $ <var:V>$ . This line takes the precondition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <nat:3> * <var:X> ^ <nat:2> \land <var:h3> = <nat:9> * <var:X> ^ <nat:3> \land <var:h0> = <nat:1> \} $ into $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <nat:3> * <var:X> ^ <nat:2> \land <var:h0> = <nat:1> \land <var:V> = <nat:9> * <var:X> ^ <nat:3> \} $ . This is deduced using the assignment rule defined in standard Hoare techniques . Focusing on the proceeding command in our program , the environment update line giving $ <var:V> + <var:h2$ toward $ <var:V>$ . This code takes $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h2> = <nat:3> * <var:X> ^ <nat:2> \land <var:h0> = <nat:1> \land <var:V> = <nat:9> * <var:X> ^ <nat:3> \} $ as the postcondition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h0> = <nat:1> \land <var:V> = <nat:9> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> \} $ . Keeping momentum , we have the command defining $ <var:V> + <var:h0$ toward $ <var:V>$ . This advances the condition $ \{ <var:F> = <var:X> \land <var:h1> = <var:X> \land <var:h0> = <nat:1> \land <var:V> = <nat:9> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:X> \land <var:V> = <nat:9> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:F> = <var:X> }} <var:h1> := <var:F> ; <var:h2> := <var:h1> * <var:F> ; <var:h3> := <var:h2> * <var:F> ; <var:h0> := <nat:1> ; <var:h2> := <var:h2> * <nat:3> ; <var:h3> := <var:h3> * <nat:9> ; <var:V> := <var:h3> <var:V> := <var:V> + <var:h2> <var:V> := <var:V> + <var:h0> {{ <var:V> = <nat:9> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h2> = <var:X> ^ <nat:2> /\ <var:h3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h2> = <var:X> ^ <nat:2> /\ <var:h3> = <var:X> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:h3> = <var:X> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:X> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:h0> = <nat:1> /\ <var:V> = <nat:9> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h1> = <var:X> /\ <var:h0> = <nat:1> /\ <var:V> = <nat:9> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:V> = <nat:9> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 