\begin{document} \begin{theorem} Take a list of commands as follows \begin{verbatim} <var:c0> := <nat:8> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:C> ; <var:P> := <var:c1> ; <var:P> := <var:P> + <var:c0> \end{verbatim} Assume it to hold that $ <var:C> = <var:L> $ before the evaluation of this code , it follows that we have $ <var:P> = <nat:1> \times <var:L> + <nat:8> $ once series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:L> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:C> = <var:L> \land <var:c0> = <nat:8> \} \\ <var:c1> := <nat:1> ; \\ \{ <var:C> = <var:L> \land <var:c0> = <nat:8> \land <var:c1> = <nat:1> \} \\ <var:c1> := <var:c1> * <var:C> ; \\ \{ <var:C> = <var:L> \land <var:c0> = <nat:8> \land <var:c1> = <nat:1> * <var:L> \} \\ <var:P> := <var:c1> ; \\ \{ <var:C> = <var:L> \land <var:c0> = <nat:8> \land <var:P> = <nat:1> * <var:L> \} \\ <var:P> := <var:P> + <var:c0> \\ \{ <var:C> = <var:L> \land <var:P> = <nat:1> * <var:L> + <nat:8> \} \end{eqnarray} The application of typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:C> = <var:L> }} <var:c0> := <nat:8> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:C> ; <var:P> := <var:c1> ; <var:P> := <var:P> + <var:c0> {{ <var:P> = <nat:1> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:c0> = <nat:8> /\ <var:P> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:P> = <nat:1> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 