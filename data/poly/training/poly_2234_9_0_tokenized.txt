\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:5> ; <var:C1> := <var:C1> * <var:z> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:z> ; <var:C2> := <var:C2> * <var:z> ; <var:Q> := <var:C2> ; <var:Q> := <var:Q> + <var:C1> ; <var:Q> := <var:Q> + <var:C0> \end{verbatim} Given , taking natural numbers $ <var:u> $ , it to hold that $ <var:z> = <var:u> $ prior to the evaluation of the code it holds that we see $ <var:Q> = <nat:6> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:2> $ once list of commands is done . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is shown by the below decorated code segment . \begin{eqnarray} \{ <var:z> = <var:u> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \} \\ <var:C1> := <nat:5> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:C1> = <nat:5> \} \\ <var:C1> := <var:C1> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:C1> = <nat:5> \cdot <var:u> \} \\ <var:C2> := <nat:6> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:C1> = <nat:5> \cdot <var:u> \land <var:C2> = <nat:6> \} \\ <var:C2> := <var:C2> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:C1> = <nat:5> \cdot <var:u> \land <var:C2> = <nat:6> \cdot <var:u> \} \\ <var:C2> := <var:C2> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:C1> = <nat:5> \cdot <var:u> \land <var:C2> = <nat:6> \cdot <var:u> ^ <nat:2> \} \\ <var:Q> := <var:C2> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:C1> = <nat:5> \cdot <var:u> \land <var:Q> = <nat:6> \cdot <var:u> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:C1> ; \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:2> \land <var:Q> = <nat:6> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> \} \\ <var:Q> := <var:Q> + <var:C0> \\ \{ <var:z> = <var:u> \land <var:Q> = <nat:6> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> + <nat:2> \} \end{eqnarray} Using Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:z> = <var:u> }} <var:C0> := <nat:2> ; <var:C1> := <nat:5> ; <var:C1> := <var:C1> * <var:z> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:z> ; <var:C2> := <var:C2> * <var:z> ; <var:Q> := <var:C2> ; <var:Q> := <var:Q> + <var:C1> ; <var:Q> := <var:Q> + <var:C0> {{ <var:Q> = <nat:6> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:5> * <var:u> /\ <var:C2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:5> * <var:u> /\ <var:C2> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:5> * <var:u> /\ <var:C2> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:5> * <var:u> /\ <var:Q> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:2> /\ <var:Q> = <nat:6> * <var:u> ^ <nat:2> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:Q> = <nat:6> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 