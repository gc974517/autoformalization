\begin{document} \begin{theorem} We define the following code as follows \begin{verbatim} <var:s0> := <nat:6> ; <var:b> := <var:s0> \end{verbatim} Given --- for every $ <var:M> $ --- $ <var:x> = <var:M> $ prior to the evaluation of the program , it must be that we see $ <var:b> = <nat:6> $ once series of instructions executes . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is demonstrated with Hoare techniques . Advancing on , the variable assignmet line \verb | <var:s0> := <nat:6> ; | . This transfers $ \{ <var:x> = <var:M> \} $ into the postcondition $ \{ <var:x> = <var:M> \land <var:s0> = <nat:6> \} $ . Honing in on the next step found in our list of commands , the assignment command binding $ <var:s0$ toward $ <var:b>$ . This statement moves $ \{ <var:x> = <var:M> \land <var:s0> = <nat:6> \} $ as the condition $ \{ <var:x> = <var:M> \land <var:b> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:x> = <var:M> }} <var:s0> := <nat:6> ; <var:b> := <var:s0> {{ <var:b> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:b> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 