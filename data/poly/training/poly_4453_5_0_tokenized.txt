\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:L> ; <var:K> := <var:W1> ; <var:K> := <var:K> + <var:W0> \end{verbatim} Allow taking integers $ <var:y> $ $ <var:L> = <var:y> $ ahead of evaluating the list of commands it must be that we have $ <var:K> = <nat:3> \cdot <var:y> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is accomplished through typical Hoare logic . Keeping momentum , we see the environment update statement yielding $ <nat:3> $ as $ <var:W0>$ . This command redefines $ \{ <var:L> = <var:y> \} $ to the condition $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \} $ . Considering the subsequent line in our series of instructions , we see the environment update line giving $ <nat:3> $ toward $ <var:W1>$ . This command redefines the precondition $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \} $ toward the postcondition $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \} $ . Paying attention to the next command seen in our code segment , we see the variable binding code \verb | <var:W1> := <var:W1> * <var:L> ; | . This advances $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \} $ into $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \cdot <var:y> \} $ . This is shown to be logically sound using the assignment inference rule given by usual Hoare reasoning . Now , we have the statement \verb | <var:K> := <var:W1> ; | . This transfers the precondition $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \cdot <var:y> \} $ into the condition $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:y> \} $ . This is shown to be logically sound with the assignment rule given in Hoare techniques . Further , we see the binding statement letting $ <var:K> + <var:W0$ as $ <var:K>$ . This takes the condition $ \{ <var:L> = <var:y> \land <var:W0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:y> \} $ toward $ \{ <var:L> = <var:y> \land <var:K> = <nat:3> \cdot <var:y> + <nat:3> \} $ . This is sound through the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:L> = <var:y> }} <var:W0> := <nat:3> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:L> ; <var:K> := <var:W1> ; <var:K> := <var:K> + <var:W0> {{ <var:K> = <nat:3> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:W0> = <nat:3> /\ <var:K> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K> = <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 