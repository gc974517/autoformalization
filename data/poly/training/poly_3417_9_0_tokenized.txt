\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:o0> := <nat:6> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:T> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:T> ; <var:o2> := <var:o2> * <var:T> ; <var:j> := <var:o2> ; <var:j> := <var:j> + <var:o1> ; <var:j> := <var:j> + <var:o0> \end{verbatim} Assuming it to be that $ <var:T> = <var:M> $ before running our set of commands , then we have $ <var:j> = <nat:9> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> $ when list of commands has finished . \end{theorem} \begin{proof} Using typical Hoare logic gives : \begin{eqnarray} \{ <var:T> = <var:M> \} \\ <var:o0> := <nat:6> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \} \\ <var:o1> := <nat:2> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:o1> = <nat:2> \} \\ <var:o1> := <var:o1> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:o1> = <nat:2> \times <var:M> \} \\ <var:o2> := <nat:9> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:o1> = <nat:2> \times <var:M> \land <var:o2> = <nat:9> \} \\ <var:o2> := <var:o2> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:o1> = <nat:2> \times <var:M> \land <var:o2> = <nat:9> \times <var:M> \} \\ <var:o2> := <var:o2> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:o1> = <nat:2> \times <var:M> \land <var:o2> = <nat:9> \times <var:M> ^ <nat:2> \} \\ <var:j> := <var:o2> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:o1> = <nat:2> \times <var:M> \land <var:j> = <nat:9> \times <var:M> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:o1> ; \\ \{ <var:T> = <var:M> \land <var:o0> = <nat:6> \land <var:j> = <nat:9> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> \} \\ <var:j> := <var:j> + <var:o0> \\ \{ <var:T> = <var:M> \land <var:j> = <nat:9> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:6> \} \end{eqnarray} Given the above , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:T> = <var:M> }} <var:o0> := <nat:6> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:T> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:T> ; <var:o2> := <var:o2> * <var:T> ; <var:j> := <var:o2> ; <var:j> := <var:j> + <var:o1> ; <var:j> := <var:j> + <var:o0> {{ <var:j> = <nat:9> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:2> * <var:M> /\ <var:o2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:2> * <var:M> /\ <var:o2> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:2> * <var:M> /\ <var:o2> = <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:2> * <var:M> /\ <var:j> = <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:o0> = <nat:6> /\ <var:j> = <nat:9> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:j> = <nat:9> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 