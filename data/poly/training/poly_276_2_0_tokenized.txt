\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:5> ; <var:U> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:a> = <var:s> $ ahead of the execution of the series of instructions , then $ <var:U> = <nat:5> $ once set of instructions has exited . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:a> = <var:s> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:a> = <var:s> \land <var:j0> = <nat:5> \} \\ <var:U> := <var:j0> \\ \{ <var:a> = <var:s> \land <var:U> = <nat:5> \} \end{eqnarray} Thus , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:5> ; <var:U> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:a> = <var:s> }} <def:poly> {{ <var:U> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:U> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 