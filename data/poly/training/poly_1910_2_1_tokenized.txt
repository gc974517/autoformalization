\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:9> ; <var:A> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:I> = <var:C> $ prior to running this set of commands , it must be that we see $ <var:A> = <nat:9> $ once series of instructions terminates . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:I> = <var:C> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:I> = <var:C> \land <var:e0> = <nat:9> \} \\ <var:A> := <var:e0> \\ \{ <var:I> = <var:C> \land <var:A> = <nat:9> \} \end{eqnarray} Considering the preceding argument , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:9> ; <var:A> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:I> = <var:C> }} <def:poly> {{ <var:A> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:A> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 