\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:5> ; <var:A> := <var:P0> \end{verbatim} Assume that we have $ <var:W> = <var:v> $ ahead of evaluating our segment of code , then $ <var:A> = <nat:5> $ when program exits . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:W> = <var:v> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:W> = <var:v> \land <var:P0> = <nat:5> \} \\ <var:A> := <var:P0> \\ \{ <var:W> = <var:v> \land <var:A> = <nat:5> \} \end{eqnarray} Considering the above , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:W> = <var:v> }} <var:P0> := <nat:5> ; <var:A> := <var:P0> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 