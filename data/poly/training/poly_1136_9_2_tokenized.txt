\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M> := <nat:4> ; <var:M> := <nat:2> + <var:M> * <var:m> ; <var:M> := <nat:2> + <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> ; <var:M> := <nat:3> + <var:M> * <var:m> ; <var:M> := <nat:1> + <var:M> * <var:m> ; <var:M> := <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Allow that we have $ <var:m> = <var:Y> $ ahead of executing the list of commands , it follows that we have $ <var:M> = <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:2> \cdot <var:Y> ^ <nat:7> + <nat:2> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:4> $ when program has executed . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:m> = <var:Y> \} \\ <var:M> := <nat:4> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \} \\ <var:M> := <nat:2> + <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> + <nat:2> \} \end{eqnarray} Furthering the execution of this code segment produces : \begin{eqnarray} <var:M> := <nat:2> + <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:2> \} \\ <var:M> := <nat:4> + <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:4> \} \\ <var:M> := <nat:4> + <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:4> \} \\ <var:M> := <nat:3> + <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:5> + <nat:2> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:3> \} \\ <var:M> := <nat:1> + <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:6> + <nat:2> \times <var:Y> ^ <nat:5> + <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:1> \} \\ <var:M> := <var:M> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:7> + <nat:2> \times <var:Y> ^ <nat:6> + <nat:2> \times <var:Y> ^ <nat:5> + <nat:4> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + \} \\ <var:M> := <nat:4> + <var:M> * <var:m> \\ \{ <var:m> = <var:Y> \land <var:M> = <nat:4> \times <var:Y> ^ <nat:8> + <nat:2> \times <var:Y> ^ <nat:7> + <nat:2> \times <var:Y> ^ <nat:6> + <nat:4> \times <var:Y> ^ <nat:5> + <nat:4> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:4> \} \end{eqnarray} Thusly , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:4> ; <var:M> := <nat:2> + <var:M> * <var:m> ; <var:M> := <nat:2> + <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> ; <var:M> := <nat:3> + <var:M> * <var:m> ; <var:M> := <nat:1> + <var:M> * <var:m> ; <var:M> := <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:m> = <var:Y> }} <def:poly> {{ <var:M> = <nat:4> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:M> = <nat:4> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 