\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:Z> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:2> ; <var:e> := <var:H1> <var:e> := <var:e> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:Z> = <var:X> $ prior to running this program , it must be that we see $ <var:e> = <nat:2> \times <var:X> + <nat:1> $ when series of instructions has finished . \end{theorem} \begin{proof} The flow of logic for this set of instructions can be given by typical Hoare reasoning . Looking at the next command contained in our program , we have the variable assignmet code binding $ <var:Z> $ to $ <var:H1>$ . This moves the precondition $ \{ <var:Z> = <var:X> \} $ to the condition $ \{ <var:Z> = <var:X> \land <var:H1> = <var:X> \} $ . This is given with the assignment inference rule of typical Hoare logic . Taking another step toward the following command found in the code segment , we see the variable assignmet line \verb | <var:H0> := <nat:1> ; | . This takes the precondition $ \{ <var:Z> = <var:X> \land <var:H1> = <var:X> \} $ into $ \{ <var:Z> = <var:X> \land <var:H1> = <var:X> \land <var:H0> = <nat:1> \} $ . Moving forward to the following line of code seen in our set of commands , we see the variable binding command yielding $ <var:H1> * <nat:2> $ toward $ <var:H1>$ . This moves the condition $ \{ <var:Z> = <var:X> \land <var:H1> = <var:X> \land <var:H0> = <nat:1> \} $ into the postcondition $ \{ <var:Z> = <var:X> \land <var:H1> = <nat:2> * <var:X> \land <var:H0> = <nat:1> \} $ . Jumping to the proceeding bit of code in our code , the binding code \verb | <var:e> := <var:H1> | . This code transfers the condition $ \{ <var:Z> = <var:X> \land <var:H1> = <nat:2> * <var:X> \land <var:H0> = <nat:1> \} $ into $ \{ <var:Z> = <var:X> \land <var:H0> = <nat:1> \land <var:e> = <nat:2> * <var:X> \} $ . Advancing on , we have the binding command letting $ <var:e> + <var:H0$ into $ <var:e>$ . This code transfers $ \{ <var:Z> = <var:X> \land <var:H0> = <nat:1> \land <var:e> = <nat:2> * <var:X> \} $ into $ \{ <var:Z> = <var:X> \land <var:e> = <nat:2> * <var:X> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:Z> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:2> ; <var:e> := <var:H1> <var:e> := <var:e> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Z> = <var:X> }} <def:poly> {{ <var:e> = <nat:2> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:H1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:H1> = <var:X> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:H1> = <nat:2> * <var:X> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:H0> = <nat:1> /\ <var:e> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:e> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 