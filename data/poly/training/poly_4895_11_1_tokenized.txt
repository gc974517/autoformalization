\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} : \begin{verbatim} <var:z1> := <var:G> ; <var:z2> := <var:z1> * <var:G> ; <var:z3> := <var:z2> * <var:G> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:5> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:7> ; <var:Z> := <var:z3> <var:Z> := <var:Z> + <var:z2> <var:Z> := <var:Z> + <var:z1> <var:Z> := <var:Z> + <var:z0> \end{verbatim} Allow it to be that $ <var:G> = <var:e> $ letting positive numbers $ <var:e> $ before evaluating this list of commands it follows that $ <var:Z> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:5> * <var:e> + <nat:6> $ when set of commands has finished . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:G> = <var:e> \} \\ <var:z1> := <var:G> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <var:e> \} \\ <var:z2> := <var:z1> * <var:G> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \} \end{eqnarray} Continuing executing our code segment returns : \begin{eqnarray} <var:z3> := <var:z2> * <var:G> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z3> = <var:e> ^ <nat:3> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z3> = <var:e> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ <var:z1> := <var:z1> * <nat:5> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <nat:5> \cdot <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z3> = <var:e> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ <var:z2> := <var:z2> * <nat:8> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <nat:5> \cdot <var:e> \land <var:z2> = <nat:8> \cdot <var:e> ^ <nat:2> \land <var:z3> = <var:e> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ <var:z3> := <var:z3> * <nat:7> ; \\ \{ <var:G> = <var:e> \land <var:z1> = <nat:5> \cdot <var:e> \land <var:z2> = <nat:8> \cdot <var:e> ^ <nat:2> \land <var:z3> = <nat:7> \cdot <var:e> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ <var:Z> := <var:z3> \\ \{ <var:G> = <var:e> \land <var:z1> = <nat:5> \cdot <var:e> \land <var:z2> = <nat:8> \cdot <var:e> ^ <nat:2> \land <var:z0> = <nat:6> \land <var:Z> = <nat:7> \cdot <var:e> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:z2> \\ \{ <var:G> = <var:e> \land <var:z1> = <nat:5> \cdot <var:e> \land <var:z0> = <nat:6> \land <var:Z> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:8> \cdot <var:e> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:z1> \\ \{ <var:G> = <var:e> \land <var:z0> = <nat:6> \land <var:Z> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:8> \cdot <var:e> ^ <nat:2> + <nat:5> \cdot <var:e> \} \\ <var:Z> := <var:Z> + <var:z0> \\ \{ <var:G> = <var:e> \land <var:Z> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:8> \cdot <var:e> ^ <nat:2> + <nat:5> \cdot <var:e> + <nat:6> \} \end{eqnarray} Given the above , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:G> = <var:e> }} <var:z1> := <var:G> ; <var:z2> := <var:z1> * <var:G> ; <var:z3> := <var:z2> * <var:G> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:5> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:7> ; <var:Z> := <var:z3> <var:Z> := <var:Z> + <var:z2> <var:Z> := <var:Z> + <var:z1> <var:Z> := <var:Z> + <var:z0> {{ <var:Z> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:5> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z3> = <var:e> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <nat:5> * <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z3> = <var:e> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <nat:5> * <var:e> /\ <var:z2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:z3> = <var:e> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <nat:5> * <var:e> /\ <var:z2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:z3> = <nat:7> * <var:e> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <nat:5> * <var:e> /\ <var:z2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:z0> = <nat:6> /\ <var:Z> = <nat:7> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z1> = <nat:5> * <var:e> /\ <var:z0> = <nat:6> /\ <var:Z> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:z0> = <nat:6> /\ <var:Z> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:Z> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:5> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 