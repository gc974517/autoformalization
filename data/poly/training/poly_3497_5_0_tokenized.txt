\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:5> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:R> ; <var:G> := <var:J1> ; <var:G> := <var:G> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:R> = <var:x> $ --- given every positive integer coefficients $ <var:x> $ --- prior to the execution of this set of commands , then we see $ <var:G> = <nat:9> \times <var:x> + <nat:5> $ once program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our program can be accomplished by usual Hoare reasoning . Now , the binding code \verb | <var:J0> := <nat:5> ; | . This code forwards the condition $ \{ <var:R> = <var:x> \} $ toward the condition $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \} $ . Considering the following step contained in the list of commands , we see the environment update code \verb | <var:J1> := <nat:9> ; | . This advances $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \} $ as $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \land <var:J1> = <nat:9> \} $ . Advancing to the next step , we have the binding command defining $ <var:J1> * <var:R> $ as $ <var:J1>$ . This advances $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \land <var:J1> = <nat:9> \} $ as the postcondition $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \land <var:J1> = <nat:9> * <var:x> \} $ . This is shown by the assignment rule found in typical Hoare techniques . Immediately after , we have the variable binding code \verb | <var:G> := <var:J1> ; | . This command transfers $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \land <var:J1> = <nat:9> * <var:x> \} $ as $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \land <var:G> = <nat:9> * <var:x> \} $ . Moving on to the following step contained in our set of instructions , we have the variable assignmet statement \verb | <var:G> := <var:G> + <var:J0> | . This statement takes the condition $ \{ <var:R> = <var:x> \land <var:J0> = <nat:5> \land <var:G> = <nat:9> * <var:x> \} $ toward $ \{ <var:R> = <var:x> \land <var:G> = <nat:9> * <var:x> + <nat:5> \} $ . This is guaranteed using the assignment inference rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:5> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:R> ; <var:G> := <var:J1> ; <var:G> := <var:G> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:R> = <var:x> }} <def:poly> {{ <var:G> = <nat:9> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:J0> = <nat:5> /\ <var:G> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:G> = <nat:9> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 