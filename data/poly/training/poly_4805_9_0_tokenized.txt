\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:5> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:u> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:u> ; <var:n2> := <var:n2> * <var:u> ; <var:G> := <var:n2> ; <var:G> := <var:G> + <var:n1> ; <var:G> := <var:G> + <var:n0> \end{verbatim} Assuming that we have $ <var:u> = <var:p> $ prior to the execution of this program , then we see $ <var:G> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for our list of commands is shown through typical Hoare logic . Moving onward , \[ \begin{tabular} {rcl} \{ <var:u> = <var:p> \} & <var:n0> := <nat:5> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \} & <var:n1> := <nat:5> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \} & <var:n1> := <var:n1> * <var:u> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \} & <var:n2> := <nat:3> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:n2> = <nat:3> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:n2> = <nat:3> \} & <var:n2> := <var:n2> * <var:u> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:n2> = <nat:3> \cdot <var:p> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:n2> = <nat:3> \cdot <var:p> \} & <var:n2> := <var:n2> * <var:u> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:n2> = <nat:3> \cdot <var:p> ^ <nat:2> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:n2> = <nat:3> \cdot <var:p> ^ <nat:2> \} & <var:G> := <var:n2> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:G> = <nat:3> \cdot <var:p> ^ <nat:2> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:n1> = <nat:5> \cdot <var:p> \land <var:G> = <nat:3> \cdot <var:p> ^ <nat:2> \} & <var:G> := <var:G> + <var:n1> & \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:G> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> \} \\ \{ <var:u> = <var:p> \land <var:n0> = <nat:5> \land <var:G> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> \} & <var:G> := <var:G> + <var:n0& \{ <var:u> = <var:p> \land <var:G> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> + <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:u> = <var:p> }} <var:n0> := <nat:5> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:u> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:u> ; <var:n2> := <var:n2> * <var:u> ; <var:G> := <var:n2> ; <var:G> := <var:G> + <var:n1> ; <var:G> := <var:G> + <var:n0> {{ <var:G> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:5> * <var:p> /\ <var:n2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:5> * <var:p> /\ <var:n2> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:5> * <var:p> /\ <var:n2> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:5> * <var:p> /\ <var:G> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:n0> = <nat:5> /\ <var:G> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:G> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 