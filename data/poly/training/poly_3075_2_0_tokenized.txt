\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:1> ; <var:S> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for every $ <var:Y> \in \mathbb{Z}^+ $ ) it to hold that $ <var:W> = <var:Y> $ before the execution of our series of commands it must be that $ <var:S> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be given with Hoare logic . Looking at the next bits of codecontained in the series of instructions , we see \begin{verbatim} { <var:W> = <var:Y> } <var:i0> := <nat:1> { <var:W> = <var:Y> \land <var:i0> = <nat:1> } { <var:W> = <var:Y> \land <var:i0> = <nat:1> } <var:S> := <var:i0{ <var:W> = <var:Y> \land <var:S> = <nat:1> } \end{verbatim} This is given through the variable update scheme of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:1> ; <var:S> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:W> = <var:Y> }} <def:poly> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 