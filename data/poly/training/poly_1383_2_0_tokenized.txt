\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:5> ; <var:p> := <var:O0> \end{verbatim} Allow it to hold that $ <var:J> = <var:r> $ before the evaluation of this series of commands it must be that $ <var:p> = <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:J> = <var:r> \} \\ <var:O0> := <nat:5> ; \\ \{ <var:J> = <var:r> \land <var:O0> = <nat:5> \} \\ <var:p> := <var:O0> \\ \{ <var:J> = <var:r> \land <var:p> = <nat:5> \} \end{eqnarray} Thus , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <var:O0> := <nat:5> ; <var:p> := <var:O0> {{ <var:p> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:p> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 