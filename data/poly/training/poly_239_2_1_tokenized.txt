\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:T> := <var:d0> \end{verbatim} Allowing it to be that $ <var:J> = <var:Y> $ , given some integers $ <var:Y> $ , ahead of executing our list of commands it follows that we have $ <var:T> = <nat:3> $ after series of commands is done . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:J> = <var:Y> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:J> = <var:Y> \land <var:d0> = <nat:3> \} \\ <var:T> := <var:d0> \\ \{ <var:J> = <var:Y> \land <var:T> = <nat:3> \} \end{eqnarray} Considering the above , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:J> = <var:Y> }} <var:d0> := <nat:3> ; <var:T> := <var:d0> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 