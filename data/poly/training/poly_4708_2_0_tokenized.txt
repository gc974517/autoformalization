\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:4> ; <var:L> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:l> = <var:Q> $ ahead of executing the code it holds that $ <var:L> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be done using typical Hoare logic . Observing the proceeding line of code seen in the segment of code , the line defining $ <nat:4> $ as $ <var:C0>$ . This statement takes the precondition $ \{ <var:l> = <var:Q> \} $ to the postcondition $ \{ <var:l> = <var:Q> \land <var:C0> = <nat:4> \} $ . Advancing to the next step , we see the assignment code \verb | <var:L> := <var:C0> | . This advances the precondition $ \{ <var:l> = <var:Q> \land <var:C0> = <nat:4> \} $ toward the postcondition $ \{ <var:l> = <var:Q> \land <var:L> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:4> ; <var:L> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:l> = <var:Q> }} <def:poly> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 