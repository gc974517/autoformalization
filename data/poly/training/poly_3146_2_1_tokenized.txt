\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:5> ; <var:G> := <var:c0> \end{verbatim} Given ( with some whole numbers $ <var:U> $ ) it to hold that $ <var:d> = <var:U> $ ahead of the execution of our set of commands then we have $ <var:G> = <nat:5> $ after list of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:U> \} \\ <var:c0> := <nat:5> ; \\ \{ <var:d> = <var:U> \land <var:c0> = <nat:5> \} \\ <var:G> := <var:c0> \\ \{ <var:d> = <var:U> \land <var:G> = <nat:5> \} \end{eqnarray} Using Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:d> = <var:U> }} <var:c0> := <nat:5> ; <var:G> := <var:c0> {{ <var:G> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:G> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 