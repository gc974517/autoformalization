\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:4> ; <var:Y> := <var:i0> \end{verbatim} Assuming for some positive integers $ <var:I> $ it to hold that $ <var:O> = <var:I> $ ahead of evaluating the list of instructions then we have $ <var:Y> = <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this set of commands can be shown using usual Hoare logic . Advancing to the upcoming line seen in our set of instructions , the binding statement \verb | <var:i0> := <nat:4> ; | . This moves the condition $ \{ <var:O> = <var:I> \} $ as $ \{ <var:O> = <var:I> \land <var:i0> = <nat:4> \} $ . This is sound using the assignment inference rule defined by typical Hoare reasoning . Considering the following line found in the segment of code , we have the statement \verb | <var:Y> := <var:i0> | . This takes the precondition $ \{ <var:O> = <var:I> \land <var:i0> = <nat:4> \} $ toward the postcondition $ \{ <var:O> = <var:I> \land <var:Y> = <nat:4> \} $ . This is deduced by the assignment law given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:O> = <var:I> }} <var:i0> := <nat:4> ; <var:Y> := <var:i0> {{ <var:Y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 