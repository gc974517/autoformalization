\begin{document} \begin{theorem} Define a series of commands such that \begin{verbatim} <var:j0> := <nat:1> ; <var:C> := <var:j0> \end{verbatim} Assuming it to hold that $ <var:H> = <var:T> $ ( given natural numbers $ <var:T> $ ) before running this code it follows that $ <var:C> = <nat:1> $ when list of commands has finished executing . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:H> = <var:T> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:H> = <var:T> \land <var:j0> = <nat:1> \} \end{eqnarray} Advancing executing this program produces : \begin{eqnarray} <var:C> := <var:j0> \\ \{ <var:H> = <var:T> \land <var:C> = <nat:1> \} \end{eqnarray} As a result , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:H> = <var:T> }} <var:j0> := <nat:1> ; <var:C> := <var:j0> {{ <var:C> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:C> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 