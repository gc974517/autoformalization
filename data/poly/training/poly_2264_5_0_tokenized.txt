\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:V0> := <nat:6> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:L> ; <var:Y> := <var:V1> ; <var:Y> := <var:Y> + <var:V0> \end{verbatim} Allow that $ <var:L> = <var:h> $ ahead of the execution of the code segment , then we see $ <var:Y> = <nat:1> \cdot <var:h> + <nat:6> $ when segment of code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:h> \} \\ <var:V0> := <nat:6> ; \\ \{ <var:L> = <var:h> \land <var:V0> = <nat:6> \} \\ <var:V1> := <nat:1> ; \\ \{ <var:L> = <var:h> \land <var:V0> = <nat:6> \land <var:V1> = <nat:1> \} \\ <var:V1> := <var:V1> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:V0> = <nat:6> \land <var:V1> = <nat:1> \cdot <var:h> \} \\ <var:Y> := <var:V1> ; \\ \{ <var:L> = <var:h> \land <var:V0> = <nat:6> \land <var:Y> = <nat:1> \cdot <var:h> \} \\ <var:Y> := <var:Y> + <var:V0> \\ \{ <var:L> = <var:h> \land <var:Y> = <nat:1> \cdot <var:h> + <nat:6> \} \end{eqnarray} The application of usual Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <var:V0> := <nat:6> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:L> ; <var:Y> := <var:V1> ; <var:Y> := <var:Y> + <var:V0> {{ <var:Y> = <nat:1> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:V0> = <nat:6> /\ <var:Y> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:Y> = <nat:1> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 