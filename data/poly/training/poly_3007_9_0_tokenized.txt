\begin{document} \begin{theorem} Take the following code as \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:s> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:s> ; <var:z2> := <var:z2> * <var:s> ; <var:A> := <var:z2> ; <var:A> := <var:A> + <var:z1> ; <var:A> := <var:A> + <var:z0> \end{verbatim} Allowing $ <var:s> = <var:f> $ ahead of executing this series of commands , it follows that we see $ <var:A> = <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is shown through Hoare techniques . Stepping forward , we see the environment update code \verb | <var:z0> := <nat:4> ; | . This takes $ \{ <var:s> = <var:f> \} $ into the condition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \} $ . Considering the subsequent line in our code , we see the variable assignmet line \verb | <var:z1> := <nat:2> ; | . This statement transfers the condition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \} $ into the condition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \} $ . Considering the proceeding line of code contained in the set of commands , we have the binding statement \verb | <var:z1> := <var:z1> * <var:s> ; | . This command advances $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \} $ to the postcondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \} $ . Advancing , we have the binding command \verb | <var:z2> := <nat:1> ; | . This statement redefines the precondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \} $ toward the condition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:z2> = <nat:1> \} $ . This is guaranteed through the assignment inference rule of usual Hoare logic . Immediately after , the binding line \verb | <var:z2> := <var:z2> * <var:s> ; | . This forwards the precondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:z2> = <nat:1> \} $ into the postcondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:z2> = <nat:1> \times <var:f> \} $ . This is deduced by the assignment scheme given in usual Hoare logic . Looking at the following statement found in our list of instructions , we see the variable update command yielding $ <var:z2> * <var:s> $ toward $ <var:z2>$ . This moves the precondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:z2> = <nat:1> \times <var:f> \} $ to the postcondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:z2> = <nat:1> \times <var:f> ^ <nat:2> \} $ . Jumping to the subsequent command seen in our code segment , we have the assignment line \verb | <var:A> := <var:z2> ; | . This takes the precondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:z2> = <nat:1> \times <var:f> ^ <nat:2> \} $ into the postcondition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:A> = <nat:1> \times <var:f> ^ <nat:2> \} $ . Honing in on the following line of code seen in the program , the binding statement assigning $ <var:A> + <var:z1> $ to $ <var:A>$ . This redefines $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \times <var:f> \land <var:A> = <nat:1> \times <var:f> ^ <nat:2> \} $ to the condition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:A> = <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> \} $ . Stepping through , we have the environment update command \verb | <var:A> := <var:A> + <var:z0> | . This redefines the condition $ \{ <var:s> = <var:f> \land <var:z0> = <nat:4> \land <var:A> = <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> \} $ toward the postcondition $ \{ <var:s> = <var:f> \land <var:A> = <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:4> \} $ . This is ensured by the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <var:z0> := <nat:4> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:s> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:s> ; <var:z2> := <var:z2> * <var:s> ; <var:A> := <var:z2> ; <var:A> := <var:A> + <var:z1> ; <var:A> := <var:A> + <var:z0> {{ <var:A> = <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:f> /\ <var:z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:f> /\ <var:z2> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:f> /\ <var:z2> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:f> /\ <var:A> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:z0> = <nat:4> /\ <var:A> = <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:A> = <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 