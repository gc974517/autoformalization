\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:v1> := <var:t> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:2> ; <var:W> := <var:v1> <var:W> := <var:W> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Allow that $ <var:t> = <var:q> $ prior to the execution of this set of commands , it must be that $ <var:W> = <nat:2> \times <var:q> + <nat:7> $ . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:t> = <var:q> \} \\ <var:v1> := <var:t> ; \\ \{ <var:t> = <var:q> \land <var:v1> = <var:q> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:t> = <var:q> \land <var:v1> = <var:q> \land <var:v0> = <nat:7> \} \\ <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:t> = <var:q> \land <var:v1> = <nat:2> \cdot <var:q> \land <var:v0> = <nat:7> \} \\ <var:W> := <var:v1> \\ \{ <var:t> = <var:q> \land <var:v0> = <nat:7> \land <var:W> = <nat:2> \cdot <var:q> \} \\ <var:W> := <var:W> + <var:v0> \\ \{ <var:t> = <var:q> \land <var:W> = <nat:2> \cdot <var:q> + <nat:7> \} \end{eqnarray} Considering the above , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:t> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:2> ; <var:W> := <var:v1> <var:W> := <var:W> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:t> = <var:q> }} <def:poly> {{ <var:W> = <nat:2> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:v1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:v1> = <var:q> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:v1> = <nat:2> * <var:q> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:v0> = <nat:7> /\ <var:W> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:W> = <nat:2> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 