\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:b> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:6> ; <var:f> := <var:D1> <var:f> := <var:f> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow ( for every natural numbers $ <var:x> $ ) it to be that $ <var:b> = <var:x> $ prior to the execution of this set of commands , it must be that we have $ <var:f> = <nat:6> \times <var:x> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is done with typical Hoare logic . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:x> \} & <var:D1> := <var:b> & \{ <var:b> = <var:x> \land <var:D1> = <var:x> \} \\ \{ <var:b> = <var:x> \land <var:D1> = <var:x> \} & <var:D0> := <nat:7> & \{ <var:b> = <var:x> \land <var:D1> = <var:x> \land <var:D0> = <nat:7> \} \\ \{ <var:b> = <var:x> \land <var:D1> = <var:x> \land <var:D0> = <nat:7> \} & <var:D1> := <var:D1> * <nat:6> & \{ <var:b> = <var:x> \land <var:D1> = <nat:6> * <var:x> \land <var:D0> = <nat:7> \} \\ \{ <var:b> = <var:x> \land <var:D1> = <nat:6> * <var:x> \land <var:D0> = <nat:7> \} & <var:f> := <var:D1& \{ <var:b> = <var:x> \land <var:D0> = <nat:7> \land <var:f> = <nat:6> * <var:x> \} \\ \{ <var:b> = <var:x> \land <var:D0> = <nat:7> \land <var:f> = <nat:6> * <var:x> \} & <var:f> := <var:f> + <var:D0& \{ <var:b> = <var:x> \land <var:f> = <nat:6> * <var:x> + <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:b> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:6> ; <var:f> := <var:D1> <var:f> := <var:f> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:b> = <var:x> }} <def:poly> {{ <var:f> = <nat:6> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:D1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:D1> = <var:x> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:D1> = <nat:6> * <var:x> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:D0> = <nat:7> /\ <var:f> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:f> = <nat:6> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 