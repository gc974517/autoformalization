\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:V> ; <var:f> := <var:X1> ; <var:f> := <var:f> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Allow that $ <var:V> = <var:h> $ --- given all $ <var:h> $ --- before running this segment of code it holds that $ <var:f> = <nat:3> \times <var:h> + <nat:3> $ once set of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is done by the below decorated list of instructions . \begin{eqnarray} \{ <var:V> = <var:h> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:V> = <var:h> \land <var:X0> = <nat:3> \} \\ <var:X1> := <nat:3> ; \\ \{ <var:V> = <var:h> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \} \\ <var:X1> := <var:X1> * <var:V> ; \\ \{ <var:V> = <var:h> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:h> \} \\ <var:f> := <var:X1> ; \\ \{ <var:V> = <var:h> \land <var:X0> = <nat:3> \land <var:f> = <nat:3> * <var:h> \} \\ <var:f> := <var:f> + <var:X0> \\ \{ <var:V> = <var:h> \land <var:f> = <nat:3> * <var:h> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:V> ; <var:f> := <var:X1> ; <var:f> := <var:f> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <def:poly> {{ <var:f> = <nat:3> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:X0> = <nat:3> /\ <var:f> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:f> = <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 