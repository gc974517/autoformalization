\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:x1> := <var:p> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:2> ; <var:R> := <var:x1> <var:R> := <var:R> + <var:x0> \end{verbatim} Assume , letting natural coefficients $ <var:W> $ , $ <var:p> = <var:W> $ prior to the execution of our segment of code it follows that we see $ <var:R> = <nat:2> \cdot <var:W> + <nat:1> $ when series of instructions has finished executing . \end{theorem} \begin{proof} The argument for the list of instructions can be given with typical Hoare logic . Stepping through , \verb | { <var:p> = <var:W> } <var:x1> := <var:p> { <var:p> = <var:W> \land <var:x1> = <var:W> } | . This is guaranteed with the variable binding inference rule from usual Hoare reasoning . Following , \verb | { <var:p> = <var:W> } <var:x1> := <var:p> { <var:p> = <var:W> \land <var:x1> = <var:W> } | , \verb | { <var:p> = <var:W> \land <var:x1> = <var:W> } <var:x0> := <nat:1> { <var:p> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:1> } | , \verb | { <var:p> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:1> } <var:x1> := <var:x1> * <nat:2> { <var:p> = <var:W> \land <var:x1> = <nat:2> \times <var:W> \land <var:x0> = <nat:1> } | and \verb | { <var:p> = <var:W> \land <var:x1> = <nat:2> \times <var:W> \land <var:x0> = <nat:1> } <var:R> := <var:x1{ <var:p> = <var:W> \land <var:x0> = <nat:1> \land <var:R> = <nat:2> \times <var:W> } | . This is guaranteed with the scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:p> = <var:W> }} <var:x1> := <var:p> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:2> ; <var:R> := <var:x1> <var:R> := <var:R> + <var:x0> {{ <var:R> = <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:x1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:x1> = <var:W> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:x1> = <nat:2> * <var:W> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:x0> = <nat:1> /\ <var:R> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:R> = <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 