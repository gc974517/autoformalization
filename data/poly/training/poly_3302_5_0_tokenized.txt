\begin{document} \begin{theorem} Consider a list of instructions as follows \begin{verbatim} <var:t0> := <nat:8> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:F> ; <var:i> := <var:t1> ; <var:i> := <var:i> + <var:t0> \end{verbatim} Allow that we have $ <var:F> = <var:O> $ , for every natural numbers $ <var:O> $ , ahead of interpreting the code segment , then $ <var:i> = <nat:9> * <var:O> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:O> \} \\ <var:t0> := <nat:8> ; \\ \{ <var:F> = <var:O> \land <var:t0> = <nat:8> \} \\ <var:t1> := <nat:9> ; \\ \{ <var:F> = <var:O> \land <var:t0> = <nat:8> \land <var:t1> = <nat:9> \} \\ <var:t1> := <var:t1> * <var:F> ; \\ \{ <var:F> = <var:O> \land <var:t0> = <nat:8> \land <var:t1> = <nat:9> \times <var:O> \} \\ <var:i> := <var:t1> ; \\ \{ <var:F> = <var:O> \land <var:t0> = <nat:8> \land <var:i> = <nat:9> \times <var:O> \} \\ <var:i> := <var:i> + <var:t0> \\ \{ <var:F> = <var:O> \land <var:i> = <nat:9> \times <var:O> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:F> = <var:O> }} <var:t0> := <nat:8> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:F> ; <var:i> := <var:t1> ; <var:i> := <var:i> + <var:t0> {{ <var:i> = <nat:9> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:t0> = <nat:8> /\ <var:i> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:i> = <nat:9> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 