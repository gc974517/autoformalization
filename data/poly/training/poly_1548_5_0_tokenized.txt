\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:7> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:Y> ; <var:T> := <var:G1> ; <var:T> := <var:T> + <var:G0> \end{verbatim} Allowing that $ <var:Y> = <var:o> $ before interpreting the list of commands then we have $ <var:T> = <nat:8> \cdot <var:o> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques yields : \begin{eqnarray} \{ <var:Y> = <var:o> \} \\ <var:G0> := <nat:7> ; \\ \{ <var:Y> = <var:o> \land <var:G0> = <nat:7> \} \end{eqnarray} Furthering the evaluation of this set of instructions yields : \begin{eqnarray} <var:G1> := <nat:8> ; \\ \{ <var:Y> = <var:o> \land <var:G0> = <nat:7> \land <var:G1> = <nat:8> \} \\ <var:G1> := <var:G1> * <var:Y> ; \\ \{ <var:Y> = <var:o> \land <var:G0> = <nat:7> \land <var:G1> = <nat:8> \times <var:o> \} \\ <var:T> := <var:G1> ; \\ \{ <var:Y> = <var:o> \land <var:G0> = <nat:7> \land <var:T> = <nat:8> \times <var:o> \} \\ <var:T> := <var:T> + <var:G0> \\ \{ <var:Y> = <var:o> \land <var:T> = <nat:8> \times <var:o> + <nat:7> \} \end{eqnarray} Considering the preceding argument , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Y> = <var:o> }} <var:G0> := <nat:7> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:Y> ; <var:T> := <var:G1> ; <var:T> := <var:T> + <var:G0> {{ <var:T> = <nat:8> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:G0> = <nat:7> /\ <var:T> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:T> = <nat:8> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 