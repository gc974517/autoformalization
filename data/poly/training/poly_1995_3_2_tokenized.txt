\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <nat:4> + <var:X> * <var:m> ; <var:X> := <nat:3> + <var:X> * <var:m> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Allowing ( given any natural numbers $ <var:p> $ ) $ <var:m> = <var:p> $ before executing this set of commands , it must be that we have $ <var:X> = <nat:1> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques produces : \begin{eqnarray} \{ <var:m> = <var:p> \} \\ <var:X> := <nat:1> ; \\ \{ <var:m> = <var:p> \land <var:X> = <nat:1> \} \\ <var:X> := <nat:4> + <var:X> * <var:m> ; \\ \{ <var:m> = <var:p> \land <var:X> = <nat:1> * <var:p> + <nat:4> \} \\ <var:X> := <nat:3> + <var:X> * <var:m> \\ \{ <var:m> = <var:p> \land <var:X> = <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> \} \end{eqnarray} Given the above , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:1> ; <var:X> := <nat:4> + <var:X> * <var:m> ; <var:X> := <nat:3> + <var:X> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:m> = <var:p> }} <def:poly> {{ <var:X> = <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:X> = <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:X> = <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 