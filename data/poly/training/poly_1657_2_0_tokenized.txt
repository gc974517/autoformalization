\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:R0> := <nat:6> ; <var:j> := <var:R0> \end{verbatim} Assuming $ <var:n> = <var:o> $ before the evaluation of this series of instructions it must be that we see $ <var:j> = <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:n> = <var:o> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:n> = <var:o> \land <var:R0> = <nat:6> \} \\ <var:j> := <var:R0> \\ \{ <var:n> = <var:o> \land <var:j> = <nat:6> \} \end{eqnarray} Hence , this code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:n> = <var:o> }} <var:R0> := <nat:6> ; <var:j> := <var:R0> {{ <var:j> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:j> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 