\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:6> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:S> ; <var:D> := <var:E1> ; <var:D> := <var:D> + <var:E0> \end{verbatim} Allowing $ <var:S> = <var:j> $ ( for $ <var:j> \in \mathbb{N} $ ) prior to evaluating the segment of code it follows that we have $ <var:D> = <nat:1> * <var:j> + <nat:6> $ when series of commands finishes . \end{theorem} \begin{proof} The course of logic for our program can be seen with standard Hoare reasoning . Focusing on the subsequent lines found in the code segment , we have \begin{verbatim} { <var:S> = <var:j> } <var:E0> := <nat:6> { <var:S> = <var:j> \land <var:E0> = <nat:6> } { <var:S> = <var:j> \land <var:E0> = <nat:6> } <var:E1> := <nat:1> { <var:S> = <var:j> \land <var:E0> = <nat:6> \land <var:E1> = <nat:1> } \end{verbatim} This is shown to be logically sound through the binding inference rule given by usual Hoare reasoning . Moving onward , we see \begin{verbatim} { <var:S> = <var:j> } <var:E0> := <nat:6> { <var:S> = <var:j> \land <var:E0> = <nat:6> } \end{verbatim} Moving on , \begin{verbatim} { <var:S> = <var:j> } <var:E0> := <nat:6> { <var:S> = <var:j> \land <var:E0> = <nat:6> } { <var:S> = <var:j> \land <var:E0> = <nat:6> } <var:E1> := <nat:1> { <var:S> = <var:j> \land <var:E0> = <nat:6> \land <var:E1> = <nat:1> } \end{verbatim} This is known to be sound through the variable binding inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:S> = <var:j> }} <var:E0> := <nat:6> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:S> ; <var:D> := <var:E1> ; <var:D> := <var:D> + <var:E0> {{ <var:D> = <nat:1> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:E0> = <nat:6> /\ <var:E1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:E0> = <nat:6> /\ <var:E1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:E0> = <nat:6> /\ <var:D> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:D> = <nat:1> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 