\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:J0> := <nat:4> ; <var:E> := <var:J0> \end{verbatim} Assuming $ <var:r> = <var:z> $ , for some positive integer coefficients $ <var:z> $ , prior to evaluating this set of commands it must be that we see $ <var:E> = <nat:4> $ . \end{theorem} \begin{proof} The argument for this program can be accomplished by typical Hoare techniques . Looking at the next command found in our code , we see \begin{verbatim} { <var:r> = <var:z> } <var:J0> := <nat:4> { <var:r> = <var:z> \land <var:J0> = <nat:4> } \end{verbatim} Moving on to the next statement contained in our program , we see \begin{verbatim} { <var:r> = <var:z> } <var:J0> := <nat:4> { <var:r> = <var:z> \land <var:J0> = <nat:4> } \end{verbatim} This is given using the variable binding law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:r> = <var:z> }} <var:J0> := <nat:4> ; <var:E> := <var:J0> {{ <var:E> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:E> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 