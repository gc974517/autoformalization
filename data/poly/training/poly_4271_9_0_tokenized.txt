\begin{document} \begin{theorem} Let the following code in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:2> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:O> ; <var:l2> := <nat:8> ; <var:l2> := <var:l2> * <var:O> ; <var:l2> := <var:l2> * <var:O> ; <var:o> := <var:l2> ; <var:o> := <var:o> + <var:l1> ; <var:o> := <var:o> + <var:l0> \end{verbatim} Given $ <var:O> = <var:v> $ prior to evaluating the code it must be that we see $ <var:o> = <nat:8> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands can be accomplished using typical Hoare reasoning . Going forward , the variable assignmet code \verb | <var:l0> := <nat:2> ; | . This forwards the precondition $ \{ <var:O> = <var:v> \} $ into the postcondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \} $ . This is shown using the assignment rule given by typical Hoare logic . Moving onward , the variable assignmet code letting $ <nat:1> $ into $ <var:l1>$ . This transfers $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \} $ as $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \} $ . This is rigorously given by the assignment rule defined by standard Hoare techniques . Going forward , we have the command \verb | <var:l1> := <var:l1> * <var:O> ; | . This command moves the precondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \} $ as the postcondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \} $ . Going forward , we have the binding line \verb | <var:l2> := <nat:8> ; | . This takes the precondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \} $ toward $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:l2> = <nat:8> \} $ . Considering the upcoming piece of code contained in our set of instructions , we have the statement \verb | <var:l2> := <var:l2> * <var:O> ; | . This advances the precondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:l2> = <nat:8> \} $ toward the postcondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:l2> = <nat:8> \times <var:v> \} $ . Observing the upcoming command found in the set of commands , the assignment statement \verb | <var:l2> := <var:l2> * <var:O> ; | . This statement advances $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:l2> = <nat:8> \times <var:v> \} $ as the postcondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:l2> = <nat:8> \times <var:v> ^ <nat:2> \} $ . This is guaranteed by the assignment inference rule defined in typical Hoare reasoning . Going forward , we have the variable binding statement \verb | <var:o> := <var:l2> ; | . This redefines the precondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:l2> = <nat:8> \times <var:v> ^ <nat:2> \} $ to the condition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:o> = <nat:8> \times <var:v> ^ <nat:2> \} $ . Stepping through , we have the variable binding line \verb | <var:o> := <var:o> + <var:l1> ; | . This advances the precondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:1> \times <var:v> \land <var:o> = <nat:8> \times <var:v> ^ <nat:2> \} $ as the postcondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:o> = <nat:8> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> \} $ . Paying attention to the subsequent line in our list of commands , we have the binding statement yielding $ <var:o> + <var:l0$ toward $ <var:o>$ . This moves the precondition $ \{ <var:O> = <var:v> \land <var:l0> = <nat:2> \land <var:o> = <nat:8> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> \} $ toward $ \{ <var:O> = <var:v> \land <var:o> = <nat:8> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:O> = <var:v> }} <var:l0> := <nat:2> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:O> ; <var:l2> := <nat:8> ; <var:l2> := <var:l2> * <var:O> ; <var:l2> := <var:l2> * <var:O> ; <var:o> := <var:l2> ; <var:o> := <var:o> + <var:l1> ; <var:o> := <var:o> + <var:l0> {{ <var:o> = <nat:8> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:1> * <var:v> /\ <var:l2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:1> * <var:v> /\ <var:l2> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:1> * <var:v> /\ <var:l2> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:1> * <var:v> /\ <var:o> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l0> = <nat:2> /\ <var:o> = <nat:8> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:o> = <nat:8> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 