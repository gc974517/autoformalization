\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:D1> := <var:k> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:1> ; <var:T> := <var:D1> <var:T> := <var:T> + <var:D0> \end{verbatim} Allow it to hold that $ <var:k> = <var:P> $ before evaluating our series of instructions , it holds that we have $ <var:T> = <nat:1> \times <var:P> + <nat:3> $ once series of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of this program is shown through typical Hoare techniques . Moving on to the proceeding line of code found in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:k> = <var:P> \} & <var:D1> := <var:k> & \{ <var:k> = <var:P> \land <var:D1> = <var:P> \} \end{tabular} This is deduced using the variable update inference rule from usual Hoare logic . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:P> \} & <var:D1> := <var:k> & \{ <var:k> = <var:P> \land <var:D1> = <var:P> \} \\ \{ <var:k> = <var:P> \land <var:D1> = <var:P> \} & <var:D0> := <nat:3> & \{ <var:k> = <var:P> \land <var:D1> = <var:P> \land <var:D0> = <nat:3> \} \\ \{ <var:k> = <var:P> \land <var:D1> = <var:P> \land <var:D0> = <nat:3> \} & <var:D1> := <var:D1> * <nat:1> & \{ <var:k> = <var:P> \land <var:D1> = <nat:1> \cdot <var:P> \land <var:D0> = <nat:3> \} \end{tabular} This is known to be sound using the assignment law found in standard Hoare logic . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:k> = <var:P> \} & <var:D1> := <var:k> & \{ <var:k> = <var:P> \land <var:D1> = <var:P> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:k> = <var:P> }} <var:D1> := <var:k> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:1> ; <var:T> := <var:D1> <var:T> := <var:T> + <var:D0> {{ <var:T> = <nat:1> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:D1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:D1> = <var:P> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:D1> = <nat:1> * <var:P> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:D0> = <nat:3> /\ <var:T> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:T> = <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 