\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:3> ; <var:Y> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Allow --- for $ <var:z> $ --- $ <var:w> = <var:z> $ ahead of executing this segment of code it follows that $ <var:Y> = <nat:3> $ when segment of code has executed . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:w> = <var:z> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:w> = <var:z> \land <var:a0> = <nat:3> \} \\ <var:Y> := <var:a0> \\ \{ <var:w> = <var:z> \land <var:Y> = <nat:3> \} \end{eqnarray} Given the preceding argument , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:Y> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <def:poly> {{ <var:Y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 