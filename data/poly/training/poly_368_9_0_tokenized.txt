\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:7> ; <var:W1> := <var:W1> * <var:h> ; <var:W2> := <nat:9> ; <var:W2> := <var:W2> * <var:h> ; <var:W2> := <var:W2> * <var:h> ; <var:L> := <var:W2> ; <var:L> := <var:L> + <var:W1> ; <var:L> := <var:L> + <var:W0> \end{verbatim} Assume given some positive integer coefficients $ <var:r> $ that $ <var:h> = <var:r> $ prior to the execution of our set of instructions it holds that we see $ <var:L> = <nat:9> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program is evident using usual Hoare logic . Honing in on the next bits of codein our program , \[ \begin{tabular} {rcl} \{ <var:h> = <var:r> \} & <var:W0> := <nat:1> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \} & <var:W1> := <nat:7> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> \} & <var:W1> := <var:W1> * <var:h> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \} & <var:W2> := <nat:9> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \land <var:W2> = <nat:9> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \land <var:W2> = <nat:9> \} & <var:W2> := <var:W2> * <var:h> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \land <var:W2> = <nat:9> * <var:r> \} \end{tabular} This is sound through the variable update rule defined in standard Hoare reasoning . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:r> \} & <var:W0> := <nat:1> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \} & <var:W1> := <nat:7> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> \} & <var:W1> := <var:W1> * <var:h> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \} \\ \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \} & <var:W2> := <nat:9> & \{ <var:h> = <var:r> \land <var:W0> = <nat:1> \land <var:W1> = <nat:7> * <var:r> \land <var:W2> = <nat:9> \} \end{tabular} This is shown by the assignment law found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:h> = <var:r> }} <var:W0> := <nat:1> ; <var:W1> := <nat:7> ; <var:W1> := <var:W1> * <var:h> ; <var:W2> := <nat:9> ; <var:W2> := <var:W2> * <var:h> ; <var:W2> := <var:W2> * <var:h> ; <var:L> := <var:W2> ; <var:L> := <var:L> + <var:W1> ; <var:L> := <var:L> + <var:W0> {{ <var:L> = <nat:9> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:7> * <var:r> /\ <var:W2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:7> * <var:r> /\ <var:W2> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:7> * <var:r> /\ <var:W2> = <nat:9> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:7> * <var:r> /\ <var:L> = <nat:9> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:1> /\ <var:L> = <nat:9> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:L> = <nat:9> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 