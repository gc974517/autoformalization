\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:7> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:F> ; <var:a> := <var:I1> ; <var:a> := <var:a> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:F> = <var:t> $ ahead of the evaluation of our list of instructions , it follows that we see $ <var:a> = <nat:4> \cdot <var:t> + <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} The course of logic for the list of instructions can be demonstrated with usual Hoare logic . Taking another step toward the subsequent commands seen in the segment of code , \[ \begin{tabular} {rcl} \{ <var:F> = <var:t> \} & <var:I0> := <nat:7> & \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \} \\ \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \} & <var:I1> := <nat:4> & \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \land <var:I1> = <nat:4> \} \\ \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \land <var:I1> = <nat:4> \} & <var:I1> := <var:I1> * <var:F> & \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \land <var:I1> = <nat:4> * <var:t> \} \\ \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \land <var:I1> = <nat:4> * <var:t> \} & <var:a> := <var:I1> & \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \land <var:a> = <nat:4> * <var:t> \} \\ \{ <var:F> = <var:t> \land <var:I0> = <nat:7> \land <var:a> = <nat:4> * <var:t> \} & <var:a> := <var:a> + <var:I0& \{ <var:F> = <var:t> \land <var:a> = <nat:4> * <var:t> + <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:7> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:F> ; <var:a> := <var:I1> ; <var:a> := <var:a> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:F> = <var:t> }} <def:poly> {{ <var:a> = <nat:4> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:I0> = <nat:7> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:I0> = <nat:7> /\ <var:I1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:I0> = <nat:7> /\ <var:a> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:t> /\ <var:a> = <nat:4> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 