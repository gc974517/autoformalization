\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:9> ; <var:g> := <var:l0> \end{verbatim} Assume that we have $ <var:D> = <var:h> $ ( letting whole numbers $ <var:h> $ ) before running this program , it must be that we have $ <var:g> = <nat:9> $ when list of commands has finished . \end{theorem} \begin{proof} The method of proof for this list of instructions is demonstrated by standard Hoare techniques . Focusing on the upcoming bit of code in the series of instructions , \begin{verbatim} { <var:D> = <var:h> } <var:l0> := <nat:9> { <var:D> = <var:h> \land <var:l0> = <nat:9> } \end{verbatim} This is ensured using the variable binding inference rule defined in usual Hoare reasoning . Considering the next step contained in our series of commands , we have \begin{verbatim} { <var:D> = <var:h> } <var:l0> := <nat:9> { <var:D> = <var:h> \land <var:l0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:D> = <var:h> }} <var:l0> := <nat:9> ; <var:g> := <var:l0> {{ <var:g> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:g> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 