\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:D> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:D> ; <var:H2> := <var:H2> * <var:D> ; <var:r> := <var:H2> ; <var:r> := <var:r> + <var:H1> ; <var:r> := <var:r> + <var:H0> \end{verbatim} Assuming it to hold that $ <var:D> = <var:W> $ , assuming some whole numbers $ <var:W> $ , ahead of interpreting the set of commands , it holds that we see $ <var:r> = <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:7> $ when series of instructions has exited . \end{theorem} \begin{proof} Observe that this decorated set of commands . \begin{eqnarray} \{ <var:D> = <var:W> \} \\ <var:H0> := <nat:7> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \} \\ <var:H1> := <nat:6> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:H1> = <nat:6> \} \\ <var:H1> := <var:H1> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:H1> = <nat:6> * <var:W> \} \\ <var:H2> := <nat:2> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:H1> = <nat:6> * <var:W> \land <var:H2> = <nat:2> \} \\ <var:H2> := <var:H2> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:H1> = <nat:6> * <var:W> \land <var:H2> = <nat:2> * <var:W> \} \\ <var:H2> := <var:H2> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:H1> = <nat:6> * <var:W> \land <var:H2> = <nat:2> * <var:W> ^ <nat:2> \} \\ <var:r> := <var:H2> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:H1> = <nat:6> * <var:W> \land <var:r> = <nat:2> * <var:W> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:H1> ; \\ \{ <var:D> = <var:W> \land <var:H0> = <nat:7> \land <var:r> = <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> \} \\ <var:r> := <var:r> + <var:H0> \\ \{ <var:D> = <var:W> \land <var:r> = <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:7> \} \end{eqnarray} Applying typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:D> = <var:W> }} <var:H0> := <nat:7> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:D> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:D> ; <var:H2> := <var:H2> * <var:D> ; <var:r> := <var:H2> ; <var:r> := <var:r> + <var:H1> ; <var:r> := <var:r> + <var:H0> {{ <var:r> = <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:6> * <var:W> /\ <var:H2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:6> * <var:W> /\ <var:H2> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:6> * <var:W> /\ <var:H2> = <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:6> * <var:W> /\ <var:r> = <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:H0> = <nat:7> /\ <var:r> = <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:r> = <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 