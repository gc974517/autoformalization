\begin{document} \begin{theorem} Consider a series of instructions as follows \begin{verbatim} <var:I1> := <var:t> ; <var:I2> := <var:I1> * <var:t> ; <var:I3> := <var:I2> * <var:t> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:9> ; <var:I3> := <var:I3> * <nat:3> ; <var:u> := <var:I3> <var:u> := <var:u> + <var:I2> <var:u> := <var:u> + <var:I1> <var:u> := <var:u> + <var:I0> \end{verbatim} Given that we have $ <var:t> = <var:d> $ ahead of the evaluation of this set of commands , it follows that $ <var:u> = <nat:3> \cdot <var:d> ^ <nat:3> + <nat:9> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be seen using Hoare techniques . Moving forward to the next step , the variable update code letting $ <var:t> $ toward $ <var:I1>$ . This code redefines $ \{ <var:t> = <var:d> \} $ toward the postcondition $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \} $ . This is rigorously given by the assignment scheme of Hoare reasoning . Immediately following , we see the assignment line assigning $ <var:I1> * <var:t> $ to $ <var:I2>$ . This redefines the condition $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \} $ toward $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \land <var:I2> = <var:d> ^ <nat:2> \} $ . Observing the next step found in our program , we have the environment update command \verb | <var:I3> := <var:I2> * <var:t> ; | . This command takes the precondition $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \land <var:I2> = <var:d> ^ <nat:2> \} $ toward the condition $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \land <var:I2> = <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \} $ . This is known to be sound using the assignment law given by usual Hoare reasoning . Advancing to the proceeding bit of code seen in our list of instructions , we see the binding line binding $ <nat:8> $ as $ <var:I0>$ . This command advances the condition $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \land <var:I2> = <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \} $ into the condition $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \land <var:I2> = <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . This is rigorously given using the assignment inference rule given in typical Hoare techniques . Advancing , the variable assignmet command \verb | <var:I1> := <var:I1> * <nat:4> ; | . This command transfers $ \{ <var:t> = <var:d> \land <var:I1> = <var:d> \land <var:I2> = <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ to $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . Taking another step toward the upcoming bit of code found in the set of commands , we see the assignment statement \verb | <var:I2> := <var:I2> * <nat:9> ; | . This redefines $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ as $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . This is ensured using the assignment law found in Hoare techniques . Moving forward to the proceeding piece of code seen in our list of instructions , we have the variable update code \verb | <var:I3> := <var:I3> * <nat:3> ; | . This command advances the condition $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:I3> = <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ to the postcondition $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:I3> = <nat:3> \times <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . Shifting focus toward the subsequent statement found in our set of instructions , we have the environment update statement \verb | <var:u> := <var:I3> | . This advances $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:I3> = <nat:3> \times <var:d> ^ <nat:3> \land <var:I0> = <nat:8> \} $ into the postcondition $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:I0> = <nat:8> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> \} $ . Moving forward , we see the assignment statement assigning $ <var:u> + <var:I2$ toward $ <var:u>$ . This moves the condition $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:I0> = <nat:8> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> \} $ toward the condition $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I0> = <nat:8> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> \} $ . This is known to be sound with the assignment inference rule defined in usual Hoare techniques . Advancing on , we have the binding line yielding $ <var:u> + <var:I1$ to $ <var:u>$ . This code redefines $ \{ <var:t> = <var:d> \land <var:I1> = <nat:4> \times <var:d> \land <var:I0> = <nat:8> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> \} $ into $ \{ <var:t> = <var:d> \land <var:I0> = <nat:8> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> \} $ . This is guaranteed by the assignment scheme defined in Hoare techniques . Looking at the subsequent line seen in the list of commands , we see the variable assignmet line \verb | <var:u> := <var:u> + <var:I0> | . This statement forwards $ \{ <var:t> = <var:d> \land <var:I0> = <nat:8> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> \} $ to $ \{ <var:t> = <var:d> \land <var:u> = <nat:3> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:8> \} $ . This is given through the assignment rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:t> = <var:d> }} <var:I1> := <var:t> ; <var:I2> := <var:I1> * <var:t> ; <var:I3> := <var:I2> * <var:t> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:9> ; <var:I3> := <var:I3> * <nat:3> ; <var:u> := <var:I3> <var:u> := <var:u> + <var:I2> <var:u> := <var:u> + <var:I1> <var:u> := <var:u> + <var:I0> {{ <var:u> = <nat:3> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <var:d> /\ <var:I2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <var:d> /\ <var:I2> = <var:d> ^ <nat:2> /\ <var:I3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <var:d> /\ <var:I2> = <var:d> ^ <nat:2> /\ <var:I3> = <var:d> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <nat:4> * <var:d> /\ <var:I2> = <var:d> ^ <nat:2> /\ <var:I3> = <var:d> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <nat:4> * <var:d> /\ <var:I2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:I3> = <var:d> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <nat:4> * <var:d> /\ <var:I2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:d> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <nat:4> * <var:d> /\ <var:I2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:I0> = <nat:8> /\ <var:u> = <nat:3> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I1> = <nat:4> * <var:d> /\ <var:I0> = <nat:8> /\ <var:u> = <nat:3> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:I0> = <nat:8> /\ <var:u> = <nat:3> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> + <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u> = <nat:3> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 