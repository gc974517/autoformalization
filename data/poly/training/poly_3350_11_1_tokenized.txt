\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:v> ; <var:O2> := <var:O1> * <var:v> ; <var:O3> := <var:O2> * <var:v> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:8> ; <var:O3> := <var:O3> * <nat:5> ; <var:n> := <var:O3> <var:n> := <var:n> + <var:O2> <var:n> := <var:n> + <var:O1> <var:n> := <var:n> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:v> = <var:p> $ --- for some integers $ <var:p> $ --- before running the series of commands it must be that we see $ <var:n> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the series of commands can be shown through this decorated series of instructions . \begin{eqnarray} \{ <var:v> = <var:p> \} \\ <var:O1> := <var:v> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <var:p> \} \\ <var:O2> := <var:O1> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O1> := <var:O1> * <nat:5> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <nat:5> \times <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O2> := <var:O2> * <nat:8> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <nat:5> \times <var:p> \land <var:O2> = <nat:8> \times <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O3> := <var:O3> * <nat:5> ; \\ \{ <var:v> = <var:p> \land <var:O1> = <nat:5> \times <var:p> \land <var:O2> = <nat:8> \times <var:p> ^ <nat:2> \land <var:O3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:n> := <var:O3> \\ \{ <var:v> = <var:p> \land <var:O1> = <nat:5> \times <var:p> \land <var:O2> = <nat:8> \times <var:p> ^ <nat:2> \land <var:O0> = <nat:4> \land <var:n> = <nat:5> \times <var:p> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:O2> \\ \{ <var:v> = <var:p> \land <var:O1> = <nat:5> \times <var:p> \land <var:O0> = <nat:4> \land <var:n> = <nat:5> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:O1> \\ \{ <var:v> = <var:p> \land <var:O0> = <nat:4> \land <var:n> = <nat:5> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> + <nat:5> \times <var:p> \} \end{eqnarray} Furthering evaluating our series of instructions results in : \begin{eqnarray} <var:n> := <var:n> + <var:O0> \\ \{ <var:v> = <var:p> \land <var:n> = <nat:5> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> + <nat:5> \times <var:p> + <nat:4> \} \end{eqnarray} Applying usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:v> ; <var:O2> := <var:O1> * <var:v> ; <var:O3> := <var:O2> * <var:v> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:8> ; <var:O3> := <var:O3> * <nat:5> ; <var:n> := <var:O3> <var:n> := <var:n> + <var:O2> <var:n> := <var:n> + <var:O1> <var:n> := <var:n> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:v> = <var:p> }} <def:poly> {{ <var:n> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <nat:5> * <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <nat:5> * <var:p> /\ <var:O2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <nat:5> * <var:p> /\ <var:O2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <nat:5> * <var:p> /\ <var:O2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:O0> = <nat:4> /\ <var:n> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O1> = <nat:5> * <var:p> /\ <var:O0> = <nat:4> /\ <var:n> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:O0> = <nat:4> /\ <var:n> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:n> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 