\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:1> ; <var:S> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:s> = <var:G> $ ( given any $ <var:G> $ ) ahead of interpreting this set of commands then we see $ <var:S> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be seen by usual Hoare techniques . Advancing on , \begin{eqnarray} \{ <var:s> = <var:G> \} \, <var:b0> := <nat:1> \, \{ <var:s> = <var:G> \land <var:b0> = <nat:1> \} \\ \{ <var:s> = <var:G> \land <var:b0> = <nat:1> \} \, <var:S> := <var:b0\, \{ <var:s> = <var:G> \land <var:S> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:S> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:s> = <var:G> }} <def:poly> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 