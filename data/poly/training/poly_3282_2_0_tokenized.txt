\begin{document} \begin{theorem} Consider the following code segment as follows \begin{verbatim} <var:S0> := <nat:3> ; <var:N> := <var:S0> \end{verbatim} Allowing for some positive numbers $ <var:o> $ it to be that $ <var:h> = <var:o> $ before interpreting this series of commands , it follows that we have $ <var:N> = <nat:3> $ after code has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:h> = <var:o> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:h> = <var:o> \land <var:S0> = <nat:3> \} \\ <var:N> := <var:S0> \\ \{ <var:h> = <var:o> \land <var:N> = <nat:3> \} \end{eqnarray} Given the above , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:h> = <var:o> }} <var:S0> := <nat:3> ; <var:N> := <var:S0> {{ <var:N> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:N> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 