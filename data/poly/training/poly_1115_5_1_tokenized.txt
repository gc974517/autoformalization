\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:e> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:f> := <var:Z1> <var:f> := <var:f> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Assume that $ <var:e> = <var:P> $ ahead of the execution of our series of instructions , it holds that we see $ <var:f> = <nat:8> \times <var:P> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:e> = <var:P> \} \\ <var:Z1> := <var:e> ; \\ \{ <var:e> = <var:P> \land <var:Z1> = <var:P> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:e> = <var:P> \land <var:Z1> = <var:P> \land <var:Z0> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <nat:8> ; \\ \{ <var:e> = <var:P> \land <var:Z1> = <nat:8> \cdot <var:P> \land <var:Z0> = <nat:1> \} \\ <var:f> := <var:Z1> \\ \{ <var:e> = <var:P> \land <var:Z0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:P> \} \\ <var:f> := <var:f> + <var:Z0> \\ \{ <var:e> = <var:P> \land <var:f> = <nat:8> \cdot <var:P> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:e> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:f> := <var:Z1> <var:f> := <var:f> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:e> = <var:P> }} <def:poly> {{ <var:f> = <nat:8> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:Z1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:Z1> = <var:P> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:Z1> = <nat:8> * <var:P> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:Z0> = <nat:1> /\ <var:f> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:f> = <nat:8> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 