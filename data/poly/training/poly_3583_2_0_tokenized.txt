\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:O> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assuming that $ <var:C> = <var:x> $ , for every positive integers $ <var:x> $ , ahead of the evaluation of our program , it must be that $ <var:O> = <nat:2> $ once list of commands has exited . \end{theorem} \begin{proof} The course of logic for our list of instructions is done by typical Hoare reasoning . Advancing to the next piece of code seen in our list of instructions , the assignment statement defining $ <nat:2> $ as $ <var:k0>$ . This line redefines $ \{ <var:C> = <var:x> \} $ toward the condition $ \{ <var:C> = <var:x> \land <var:k0> = <nat:2> \} $ . Jumping to the following bit of code found in our series of instructions , the environment update statement binding $ <var:k0$ to $ <var:O>$ . This redefines the precondition $ \{ <var:C> = <var:x> \land <var:k0> = <nat:2> \} $ toward the condition $ \{ <var:C> = <var:x> \land <var:O> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:O> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <def:poly> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 