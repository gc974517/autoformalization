\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:7> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:Z> ; <var:c2> := <nat:5> ; <var:c2> := <var:c2> * <var:Z> ; <var:c2> := <var:c2> * <var:Z> ; <var:D> := <var:c2> ; <var:D> := <var:D> + <var:c1> ; <var:D> := <var:D> + <var:c0> \end{verbatim} Given $ <var:Z> = <var:Q> $ prior to evaluating our set of instructions , it follows that we have $ <var:D> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:7> $ when segment of code has finished . \end{theorem} \begin{proof} The flow of logic for our code segment can be shown with typical Hoare logic . Moving on to the upcoming line of code seen in our code , we see the binding statement \verb | <var:c0> := <nat:7> ; | . This redefines $ \{ <var:Z> = <var:Q> \} $ as the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \} $ . This is ensured through the assignment rule defined by standard Hoare techniques . After , the binding code \verb | <var:c1> := <nat:5> ; | . This takes the precondition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \} $ to the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \} $ . This is ensured by the assignment scheme in typical Hoare reasoning . Moving forward to the next step , the statement assigning $ <var:c1> * <var:Z> $ to $ <var:c1>$ . This code transfers the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \} $ to the postcondition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \} $ . This is deduced with the assignment law given in Hoare techniques . Moving forward , the line \verb | <var:c2> := <nat:5> ; | . This line takes the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \} $ into the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:c2> = <nat:5> \} $ . Taking another step toward the subsequent piece of code in the code , the binding statement \verb | <var:c2> := <var:c2> * <var:Z> ; | . This moves $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:c2> = <nat:5> \} $ into the postcondition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:c2> = <nat:5> \times <var:Q> \} $ . Considering the subsequent bit of code found in our list of commands , the variable assignmet line \verb | <var:c2> := <var:c2> * <var:Z> ; | . This takes the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:c2> = <nat:5> \times <var:Q> \} $ into the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:c2> = <nat:5> \times <var:Q> ^ <nat:2> \} $ . This is deduced by the assignment scheme given in typical Hoare techniques . Looking at the upcoming line of code found in the list of commands , the variable update command \verb | <var:D> := <var:c2> ; | . This line forwards the precondition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:c2> = <nat:5> \times <var:Q> ^ <nat:2> \} $ as the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:D> = <nat:5> \times <var:Q> ^ <nat:2> \} $ . Next , the variable binding command defining $ <var:D> + <var:c1> $ into $ <var:D>$ . This moves the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:c1> = <nat:5> \times <var:Q> \land <var:D> = <nat:5> \times <var:Q> ^ <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:D> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> \} $ . This is known to be sound by the assignment scheme obtained from standard Hoare techniques . Going to the next step , we see the variable assignmet statement \verb | <var:D> := <var:D> + <var:c0> | . This forwards the condition $ \{ <var:Z> = <var:Q> \land <var:c0> = <nat:7> \land <var:D> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> \} $ to $ \{ <var:Z> = <var:Q> \land <var:D> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Z> = <var:Q> }} <var:c0> := <nat:7> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:Z> ; <var:c2> := <nat:5> ; <var:c2> := <var:c2> * <var:Z> ; <var:c2> := <var:c2> * <var:Z> ; <var:D> := <var:c2> ; <var:D> := <var:D> + <var:c1> ; <var:D> := <var:D> + <var:c0> {{ <var:D> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:5> * <var:Q> /\ <var:c2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:5> * <var:Q> /\ <var:c2> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:5> * <var:Q> /\ <var:c2> = <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:5> * <var:Q> /\ <var:D> = <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:c0> = <nat:7> /\ <var:D> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:D> = <nat:5> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 