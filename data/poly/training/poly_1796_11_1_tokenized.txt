\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:R1> := <var:m> ; <var:R2> := <var:R1> * <var:m> ; <var:R3> := <var:R2> * <var:m> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:7> ; <var:R3> := <var:R3> * <nat:3> ; <var:G> := <var:R3> <var:G> := <var:G> + <var:R2> <var:G> := <var:G> + <var:R1> <var:G> := <var:G> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:m> = <var:k> $ prior to the evaluation of this code , it follows that we have $ <var:G> = <nat:3> * <var:k> ^ <nat:3> + <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> $ once code has exited . \end{theorem} \begin{proof} Using usual Hoare techniques gives us : \begin{eqnarray} \{ <var:m> = <var:k> \} \\ <var:R1> := <var:m> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <var:k> \} \\ <var:R2> := <var:R1> * <var:m> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <var:k> \land <var:R2> = <var:k> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:m> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R1> := <var:R1> * <nat:6> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <nat:6> \cdot <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R2> := <var:R2> * <nat:7> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <nat:6> \cdot <var:k> \land <var:R2> = <nat:7> \cdot <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R3> := <var:R3> * <nat:3> ; \\ \{ <var:m> = <var:k> \land <var:R1> = <nat:6> \cdot <var:k> \land <var:R2> = <nat:7> \cdot <var:k> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:k> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:G> := <var:R3> \\ \{ <var:m> = <var:k> \land <var:R1> = <nat:6> \cdot <var:k> \land <var:R2> = <nat:7> \cdot <var:k> ^ <nat:2> \land <var:R0> = <nat:2> \land <var:G> = <nat:3> \cdot <var:k> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:R2> \\ \{ <var:m> = <var:k> \land <var:R1> = <nat:6> \cdot <var:k> \land <var:R0> = <nat:2> \land <var:G> = <nat:3> \cdot <var:k> ^ <nat:3> + <nat:7> \cdot <var:k> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:R1> \\ \{ <var:m> = <var:k> \land <var:R0> = <nat:2> \land <var:G> = <nat:3> \cdot <var:k> ^ <nat:3> + <nat:7> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> \} \\ <var:G> := <var:G> + <var:R0> \\ \{ <var:m> = <var:k> \land <var:G> = <nat:3> \cdot <var:k> ^ <nat:3> + <nat:7> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> + <nat:2> \} \end{eqnarray} Given the preceding argument , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:m> ; <var:R2> := <var:R1> * <var:m> ; <var:R3> := <var:R2> * <var:m> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:7> ; <var:R3> := <var:R3> * <nat:3> ; <var:G> := <var:R3> <var:G> := <var:G> + <var:R2> <var:G> := <var:G> + <var:R1> <var:G> := <var:G> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:m> = <var:k> }} <def:poly> {{ <var:G> = <nat:3> * <var:k> ^ <nat:3> + <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <var:k> /\ <var:R2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <nat:6> * <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <nat:6> * <var:k> /\ <var:R2> = <nat:7> * <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <nat:6> * <var:k> /\ <var:R2> = <nat:7> * <var:k> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <nat:6> * <var:k> /\ <var:R2> = <nat:7> * <var:k> ^ <nat:2> /\ <var:R0> = <nat:2> /\ <var:G> = <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R1> = <nat:6> * <var:k> /\ <var:R0> = <nat:2> /\ <var:G> = <nat:3> * <var:k> ^ <nat:3> + <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:R0> = <nat:2> /\ <var:G> = <nat:3> * <var:k> ^ <nat:3> + <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:G> = <nat:3> * <var:k> ^ <nat:3> + <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 