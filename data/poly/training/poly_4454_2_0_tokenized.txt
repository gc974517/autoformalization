\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:4> ; <var:c> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:X> = <var:m> $ before the evaluation of the set of instructions , then we have $ <var:c> = <nat:4> $ when program is done executing . \end{theorem} \begin{proof} The course of logic for this set of instructions can be accomplished with usual Hoare techniques . Immediately after , we have \begin{eqnarray} \{ <var:X> = <var:m> \} \, <var:T0> := <nat:4> \, \{ <var:X> = <var:m> \land <var:T0> = <nat:4> \} \end{eqnarray} Moving forward to the next step , we have \begin{eqnarray} \{ <var:X> = <var:m> \} \, <var:T0> := <nat:4> \, \{ <var:X> = <var:m> \land <var:T0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:4> ; <var:c> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <def:poly> {{ <var:c> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:c> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 