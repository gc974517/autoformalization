\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:6> ; <var:a1> := <nat:9> ; <var:a1> := <var:a1> * <var:V> ; <var:a2> := <nat:6> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:x> := <var:a2> ; <var:x> := <var:x> + <var:a1> ; <var:x> := <var:x> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Allow , for any whole numbers $ <var:m> $ , that $ <var:V> = <var:m> $ before interpreting our code , it follows that $ <var:x> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> $ once set of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:m> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \} \\ <var:a1> := <nat:9> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> \} \\ <var:a1> := <var:a1> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> * <var:m> \} \end{eqnarray} Advancing evaluating our series of instructions produces : \begin{eqnarray} <var:a2> := <nat:6> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> * <var:m> \land <var:a2> = <nat:6> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> * <var:m> \land <var:a2> = <nat:6> * <var:m> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> * <var:m> \land <var:a2> = <nat:6> * <var:m> ^ <nat:2> \} \\ <var:x> := <var:a2> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> * <var:m> \land <var:x> = <nat:6> * <var:m> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:a1> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:6> \land <var:x> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> \} \\ <var:x> := <var:x> + <var:a0> \\ \{ <var:V> = <var:m> \land <var:x> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:a1> := <nat:9> ; <var:a1> := <var:a1> * <var:V> ; <var:a2> := <nat:6> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:x> := <var:a2> ; <var:x> := <var:x> + <var:a1> ; <var:x> := <var:x> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:V> = <var:m> }} <def:poly> {{ <var:x> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> * <var:m> /\ <var:a2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> * <var:m> /\ <var:a2> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> * <var:m> /\ <var:a2> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> * <var:m> /\ <var:x> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:6> /\ <var:x> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:x> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 