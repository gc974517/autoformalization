\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:4> ; <var:T> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Given , for some $ <var:C> \in \mathbb{N} $ , that $ <var:L> = <var:C> $ prior to evaluating the set of instructions , then $ <var:T> = <nat:4> $ after segment of code exits . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:L> = <var:C> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:L> = <var:C> \land <var:A0> = <nat:4> \} \\ <var:T> := <var:A0> \\ \{ <var:L> = <var:C> \land <var:T> = <nat:4> \} \end{eqnarray} Considering the preceding argument , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:T> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:L> = <var:C> }} <def:poly> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 