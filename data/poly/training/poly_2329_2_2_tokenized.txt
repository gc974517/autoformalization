\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:3> + <var:W> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:i> = <var:V> $ before executing this program , it must be that we have $ <var:W> = <nat:4> * <var:V> + <nat:3> $ after code has finished executing . \end{theorem} \begin{proof} The way to prove correctness for the code segment is given with typical Hoare techniques . Moving on , we see the binding line binding $ <nat:4> $ toward $ <var:W>$ . This moves $ \{ <var:i> = <var:V> \} $ into the condition $ \{ <var:i> = <var:V> \land <var:W> = <nat:4> \} $ . This is known to be sound with the assignment scheme of typical Hoare techniques . Stepping through , we see the variable binding code \verb | <var:W> := <nat:3> + <var:W> * <var:i> | . This transfers $ \{ <var:i> = <var:V> \land <var:W> = <nat:4> \} $ toward the postcondition $ \{ <var:i> = <var:V> \land <var:W> = <nat:4> \cdot <var:V> + <nat:3> \} $ . This is given with the assignment scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:4> ; <var:W> := <nat:3> + <var:W> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <def:poly> {{ <var:W> = <nat:4> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:W> = <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 