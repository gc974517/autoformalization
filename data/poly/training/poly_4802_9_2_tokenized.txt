\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:4> ; <var:j> := <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Allowing ( given any whole numbers $ <var:z> $ ) $ <var:r> = <var:z> $ before the execution of our code then we have $ <var:j> = <nat:4> \cdot <var:z> ^ <nat:8> + <nat:1> \cdot <var:z> ^ <nat:5> + <nat:4> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is evident by standard Hoare reasoning . Going to the next step , \verb | { <var:r> = <var:z> } <var:j> := <nat:4> { <var:r> = <var:z> \land <var:j> = <nat:4> } | , \verb | { <var:r> = <var:z> \land <var:j> = <nat:4> } <var:j> := <var:j> * <var:r> { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> + } | , \verb | { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> + } <var:j> := <var:j> * <var:r> { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> ^ <nat:2> + } | and \verb | { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> ^ <nat:2> + } <var:j> := <nat:1> + <var:j> * <var:r> { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> ^ <nat:3> + <nat:1> } | . This is guaranteed using the assignment law defined in Hoare logic . Shifting focus toward the proceeding steps in our program , \verb | { <var:r> = <var:z> } <var:j> := <nat:4> { <var:r> = <var:z> \land <var:j> = <nat:4> } | , \verb | { <var:r> = <var:z> \land <var:j> = <nat:4> } <var:j> := <var:j> * <var:r> { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> + } | , \verb | { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> + } <var:j> := <var:j> * <var:r> { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> ^ <nat:2> + } | and \verb | { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> ^ <nat:2> + } <var:j> := <nat:1> + <var:j> * <var:r> { <var:r> = <var:z> \land <var:j> = <nat:4> \times <var:z> ^ <nat:3> + <nat:1> } | . Advancing , \verb | { <var:r> = <var:z> } <var:j> := <nat:4> { <var:r> = <var:z> \land <var:j> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:4> ; <var:j> := <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:r> = <var:z> }} <def:poly> {{ <var:j> = <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:j> = <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 