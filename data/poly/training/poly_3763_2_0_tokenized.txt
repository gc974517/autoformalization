\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:9> ; <var:c> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:O> = <var:f> $ given natural numbers $ <var:f> $ before interpreting the set of instructions , it follows that $ <var:c> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is done with standard Hoare reasoning . Looking at the subsequent statement seen in the segment of code , we see the variable update code \verb | <var:D0> := <nat:9> ; | . This transfers the condition $ \{ <var:O> = <var:f> \} $ toward $ \{ <var:O> = <var:f> \land <var:D0> = <nat:9> \} $ . This is guaranteed with the assignment inference rule given in usual Hoare techniques . Paying attention to the proceeding line contained in our segment of code , we see the variable update command letting $ <var:D0$ to $ <var:c>$ . This line advances the precondition $ \{ <var:O> = <var:f> \land <var:D0> = <nat:9> \} $ toward the condition $ \{ <var:O> = <var:f> \land <var:c> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:9> ; <var:c> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:O> = <var:f> }} <def:poly> {{ <var:c> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:c> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 