\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:4> ; <var:Q> := <nat:4> + <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allowing that we have $ <var:O> = <var:y> $ before the execution of our set of instructions it must be that we have $ <var:Q> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:4> $ when code segment executes . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:O> = <var:y> \} \\ <var:Q> := <nat:4> ; \\ \{ <var:O> = <var:y> \land <var:Q> = <nat:4> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:O> ; \\ \{ <var:O> = <var:y> \land <var:Q> = <nat:4> \cdot <var:y> + <nat:4> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:O> \\ \{ <var:O> = <var:y> \land <var:Q> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \end{eqnarray} Advancing interpreting this code gives us : \begin{eqnarray} \end{eqnarray} Thusly , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:4> ; <var:Q> := <nat:4> + <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:O> = <var:y> }} <def:poly> {{ <var:Q> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:Q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:Q> = <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:Q> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 