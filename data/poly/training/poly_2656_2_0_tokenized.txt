\begin{document} \begin{theorem} Take a set of commands : \begin{verbatim} <var:q0> := <nat:6> ; <var:Q> := <var:q0> \end{verbatim} Assume it to be that $ <var:B> = <var:L> $ for all positive integers $ <var:L> $ prior to running our segment of code , it holds that we see $ <var:Q> = <nat:6> $ when list of commands executes . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be done with standard Hoare techniques . Moving forward to the subsequent bit of code in the code , we have the variable update command \verb | <var:q0> := <nat:6> ; | . This command forwards the precondition $ \{ <var:B> = <var:L> \} $ as the condition $ \{ <var:B> = <var:L> \land <var:q0> = <nat:6> \} $ . Taking another step toward the subsequent line contained in the list of instructions , the variable assignmet code \verb | <var:Q> := <var:q0> | . This redefines the condition $ \{ <var:B> = <var:L> \land <var:q0> = <nat:6> \} $ to the postcondition $ \{ <var:B> = <var:L> \land <var:Q> = <nat:6> \} $ . This is deduced using the assignment law given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:B> = <var:L> }} <var:q0> := <nat:6> ; <var:Q> := <var:q0> {{ <var:Q> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:Q> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 