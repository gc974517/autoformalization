\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:5> ; <var:C1> := <var:C1> * <var:g> ; <var:G> := <var:C1> ; <var:G> := <var:G> + <var:C0> \end{verbatim} Assuming it to be that $ <var:g> = <var:z> $ taking whole numbers $ <var:z> $ ahead of evaluating the program , it holds that we see $ <var:G> = <nat:5> \times <var:z> + <nat:5> $ when set of instructions is done . \end{theorem} \begin{proof} Observe that this decorated code . \begin{eqnarray} \{ <var:g> = <var:z> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:g> = <var:z> \land <var:C0> = <nat:5> \} \\ <var:C1> := <nat:5> ; \\ \{ <var:g> = <var:z> \land <var:C0> = <nat:5> \land <var:C1> = <nat:5> \} \\ <var:C1> := <var:C1> * <var:g> ; \\ \{ <var:g> = <var:z> \land <var:C0> = <nat:5> \land <var:C1> = <nat:5> * <var:z> \} \\ <var:G> := <var:C1> ; \\ \{ <var:g> = <var:z> \land <var:C0> = <nat:5> \land <var:G> = <nat:5> * <var:z> \} \\ <var:G> := <var:G> + <var:C0> \\ \{ <var:g> = <var:z> \land <var:G> = <nat:5> * <var:z> + <nat:5> \} \end{eqnarray} The application of standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:g> = <var:z> }} <var:C0> := <nat:5> ; <var:C1> := <nat:5> ; <var:C1> := <var:C1> * <var:g> ; <var:G> := <var:C1> ; <var:G> := <var:G> + <var:C0> {{ <var:G> = <nat:5> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:C0> = <nat:5> /\ <var:G> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:G> = <nat:5> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 