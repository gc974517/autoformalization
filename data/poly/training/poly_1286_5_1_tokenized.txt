\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:y> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:6> ; <var:h> := <var:G1> <var:h> := <var:h> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allowing it to hold that $ <var:y> = <var:q> $ prior to interpreting the code , it holds that we see $ <var:h> = <nat:6> * <var:q> + <nat:1> $ once code segment has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:y> = <var:q> \} \\ <var:G1> := <var:y> ; \\ \{ <var:y> = <var:q> \land <var:G1> = <var:q> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:y> = <var:q> \land <var:G1> = <var:q> \land <var:G0> = <nat:1> \} \\ <var:G1> := <var:G1> * <nat:6> ; \\ \{ <var:y> = <var:q> \land <var:G1> = <nat:6> \times <var:q> \land <var:G0> = <nat:1> \} \\ <var:h> := <var:G1> \\ \{ <var:y> = <var:q> \land <var:G0> = <nat:1> \land <var:h> = <nat:6> \times <var:q> \} \\ <var:h> := <var:h> + <var:G0> \\ \{ <var:y> = <var:q> \land <var:h> = <nat:6> \times <var:q> + <nat:1> \} \end{eqnarray} Therefore , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:y> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:6> ; <var:h> := <var:G1> <var:h> := <var:h> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:y> = <var:q> }} <def:poly> {{ <var:h> = <nat:6> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:G1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:G1> = <var:q> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:G1> = <nat:6> * <var:q> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:G0> = <nat:1> /\ <var:h> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:h> = <nat:6> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 