\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:9> ; <var:W1> := <nat:5> ; <var:W1> := <var:W1> * <var:t> ; <var:F> := <var:W1> ; <var:F> := <var:F> + <var:W0> \end{verbatim} Assume it to hold that $ <var:t> = <var:H> $ before evaluating the program , it must be that we have $ <var:F> = <nat:5> * <var:H> + <nat:9> $ once code exits . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:t> = <var:H> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:t> = <var:H> \land <var:W0> = <nat:9> \} \\ <var:W1> := <nat:5> ; \\ \{ <var:t> = <var:H> \land <var:W0> = <nat:9> \land <var:W1> = <nat:5> \} \\ <var:W1> := <var:W1> * <var:t> ; \\ \{ <var:t> = <var:H> \land <var:W0> = <nat:9> \land <var:W1> = <nat:5> * <var:H> \} \\ <var:F> := <var:W1> ; \\ \{ <var:t> = <var:H> \land <var:W0> = <nat:9> \land <var:F> = <nat:5> * <var:H> \} \\ <var:F> := <var:F> + <var:W0> \\ \{ <var:t> = <var:H> \land <var:F> = <nat:5> * <var:H> + <nat:9> \} \end{eqnarray} Hence , our code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:t> = <var:H> }} <var:W0> := <nat:9> ; <var:W1> := <nat:5> ; <var:W1> := <var:W1> * <var:t> ; <var:F> := <var:W1> ; <var:F> := <var:F> + <var:W0> {{ <var:F> = <nat:5> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:W0> = <nat:9> /\ <var:F> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:F> = <nat:5> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 