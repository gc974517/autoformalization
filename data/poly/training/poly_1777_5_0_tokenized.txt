\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:8> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:Z> ; <var:I> := <var:J1> ; <var:I> := <var:I> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:Z> = <var:z> $ prior to evaluating our list of commands it must be that we have $ <var:I> = <nat:9> \times <var:z> + <nat:8> $ after series of commands has finished executing . \end{theorem} \begin{proof} Observe the following decorated program . \begin{eqnarray} \{ <var:Z> = <var:z> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:Z> = <var:z> \land <var:J0> = <nat:8> \} \\ <var:J1> := <nat:9> ; \\ \{ <var:Z> = <var:z> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> \} \\ <var:J1> := <var:J1> * <var:Z> ; \\ \{ <var:Z> = <var:z> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> \times <var:z> \} \\ <var:I> := <var:J1> ; \\ \{ <var:Z> = <var:z> \land <var:J0> = <nat:8> \land <var:I> = <nat:9> \times <var:z> \} \\ <var:I> := <var:I> + <var:J0> \\ \{ <var:Z> = <var:z> \land <var:I> = <nat:9> \times <var:z> + <nat:8> \} \end{eqnarray} Utilizing Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:8> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:Z> ; <var:I> := <var:J1> ; <var:I> := <var:I> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Z> = <var:z> }} <def:poly> {{ <var:I> = <nat:9> * <var:z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:J0> = <nat:8> /\ <var:I> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:I> = <nat:9> * <var:z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 