\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:p> ; <var:T> := <var:H1> ; <var:T> := <var:T> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:p> = <var:D> $ before evaluating this list of instructions , it must be that $ <var:T> = <nat:1> \cdot <var:D> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare logic yields : \begin{eqnarray} \{ <var:p> = <var:D> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:p> = <var:D> \land <var:H0> = <nat:1> \} \\ <var:H1> := <nat:1> ; \\ \{ <var:p> = <var:D> \land <var:H0> = <nat:1> \land <var:H1> = <nat:1> \} \\ <var:H1> := <var:H1> * <var:p> ; \\ \{ <var:p> = <var:D> \land <var:H0> = <nat:1> \land <var:H1> = <nat:1> * <var:D> \} \\ <var:T> := <var:H1> ; \\ \{ <var:p> = <var:D> \land <var:H0> = <nat:1> \land <var:T> = <nat:1> * <var:D> \} \\ <var:T> := <var:T> + <var:H0> \\ \{ <var:p> = <var:D> \land <var:T> = <nat:1> * <var:D> + <nat:1> \} \end{eqnarray} Given the above , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:p> ; <var:T> := <var:H1> ; <var:T> := <var:T> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:p> = <var:D> }} <def:poly> {{ <var:T> = <nat:1> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:H0> = <nat:1> /\ <var:T> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:T> = <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 