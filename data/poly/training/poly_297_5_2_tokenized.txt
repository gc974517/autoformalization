\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:M> := <nat:2> ; <var:M> := <nat:2> + <var:M> * <var:X> ; <var:M> := <nat:2> + <var:M> * <var:X> ; <var:M> := <nat:4> + <var:M> * <var:X> ; <var:M> := <nat:1> + <var:M> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> . Allow $ <var:X> = <var:a> $ prior to interpreting our program , it holds that $ <var:M> = <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:1> $ when set of commands has exited . \end{theorem} \begin{proof} The proof of our code is done using typical Hoare reasoning . Advancing , we have \begin{eqnarray} \{ <var:X> = <var:a> \} \, <var:M> := <nat:2> \, \{ <var:X> = <var:a> \land <var:M> = <nat:2> \} \\ \{ <var:X> = <var:a> \land <var:M> = <nat:2> \} \, <var:M> := <nat:2> + <var:M> * <var:X> \, \{ <var:X> = <var:a> \land <var:M> = <nat:2> \times <var:a> + <nat:2> \} \end{eqnarray} Honing in on the following statement contained in the set of commands , we see \begin{eqnarray} \{ <var:X> = <var:a> \} \, <var:M> := <nat:2> \, \{ <var:X> = <var:a> \land <var:M> = <nat:2> \} \end{eqnarray} This is shown through the variable assignmet law defined in usual Hoare reasoning . Moving on to the following line of code in the series of instructions , we see \begin{eqnarray} \{ <var:X> = <var:a> \} \, <var:M> := <nat:2> \, \{ <var:X> = <var:a> \land <var:M> = <nat:2> \} \end{eqnarray} This is given by the binding rule found in usual Hoare techniques . Honing in on the next statement seen in the code segment , we have \begin{eqnarray} \{ <var:X> = <var:a> \} \, <var:M> := <nat:2> \, \{ <var:X> = <var:a> \land <var:M> = <nat:2> \} \end{eqnarray} This is rigorously given with the variable assignmet scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:2> ; <var:M> := <nat:2> + <var:M> * <var:X> ; <var:M> := <nat:2> + <var:M> * <var:X> ; <var:M> := <nat:4> + <var:M> * <var:X> ; <var:M> := <nat:1> + <var:M> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:X> = <var:a> }} <def:poly> {{ <var:M> = <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:M> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:M> = <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:M> = <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:M> = <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:M> = <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 