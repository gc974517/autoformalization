\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:7> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:R> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:R> ; <var:L2> := <var:L2> * <var:R> ; <var:Z> := <var:L2> ; <var:Z> := <var:Z> + <var:L1> ; <var:Z> := <var:Z> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:R> = <var:o> $ taking integers $ <var:o> $ ahead of the evaluation of the set of commands it follows that we have $ <var:Z> = <nat:4> \times <var:o> ^ <nat:2> + <nat:9> \times <var:o> + <nat:7> $ after code has executed . \end{theorem} \begin{proof} Applying Hoare reasoning returns : \begin{eqnarray} \{ <var:R> = <var:o> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \} \\ <var:L1> := <nat:9> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \} \end{eqnarray} Advancing executing our series of commands results in : \begin{eqnarray} <var:L1> := <var:L1> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \cdot <var:o> \} \\ <var:L2> := <nat:4> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \cdot <var:o> \land <var:L2> = <nat:4> \} \\ <var:L2> := <var:L2> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \cdot <var:o> \land <var:L2> = <nat:4> \cdot <var:o> \} \\ <var:L2> := <var:L2> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \cdot <var:o> \land <var:L2> = <nat:4> \cdot <var:o> ^ <nat:2> \} \\ <var:Z> := <var:L2> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:L1> = <nat:9> \cdot <var:o> \land <var:Z> = <nat:4> \cdot <var:o> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:L1> ; \\ \{ <var:R> = <var:o> \land <var:L0> = <nat:7> \land <var:Z> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> \} \\ <var:Z> := <var:Z> + <var:L0> \\ \{ <var:R> = <var:o> \land <var:Z> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> + <nat:7> \} \end{eqnarray} Considering the above , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:R> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:R> ; <var:L2> := <var:L2> * <var:R> ; <var:Z> := <var:L2> ; <var:Z> := <var:Z> + <var:L1> ; <var:Z> := <var:Z> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:R> = <var:o> }} <def:poly> {{ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> * <var:o> /\ <var:L2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> * <var:o> /\ <var:L2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> * <var:o> /\ <var:L2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:9> * <var:o> /\ <var:Z> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:L0> = <nat:7> /\ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 