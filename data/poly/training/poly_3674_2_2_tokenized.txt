\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:3> + <var:L> * <var:o> \end{verbatim} Allowing it to hold that $ <var:o> = <var:l> $ prior to executing this program , it follows that we see $ <var:L> = <nat:4> \cdot <var:l> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is given by usual Hoare logic . Observing the upcoming statement contained in our list of commands , \[ \begin{tabular} {rcl} \{ <var:o> = <var:l> \} & <var:L> := <nat:4> & \{ <var:o> = <var:l> \land <var:L> = <nat:4> \} \end{tabular} Further , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:l> \} & <var:L> := <nat:4> & \{ <var:o> = <var:l> \land <var:L> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:o> = <var:l> }} <var:L> := <nat:4> ; <var:L> := <nat:3> + <var:L> * <var:o> {{ <var:L> = <nat:4> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:l> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:l> /\ <var:L> = <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 