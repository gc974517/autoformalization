\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:4> + <var:W> * <var:G> ; <var:W> := <var:W> * <var:G> ; <var:W> := <nat:3> + <var:W> * <var:G> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:3> + <var:W> * <var:G> \end{verbatim} Assuming it to be that $ <var:G> = <var:o> $ before the execution of our code then we have $ <var:W> = <nat:3> \cdot <var:o> ^ <nat:8> + <nat:2> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:4> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is evident by typical Hoare logic . Advancing to the next statements found in our set of commands , \verb | { <var:G> = <var:o> } <var:W> := <nat:3> { <var:G> = <var:o> \land <var:W> = <nat:3> } | , \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> } <var:W> := <nat:2> + <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> + <nat:2> } | , \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> + <nat:2> } <var:W> := <nat:2> + <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:2> } | , \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:2> } <var:W> := <nat:2> + <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:2> } | , \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:2> } <var:W> := <nat:4> + <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:4> } | , \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:4> } <var:W> := <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + } | and \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + } <var:W> := <nat:3> + <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:3> } | . Advancing to the next step , we have \verb | { <var:G> = <var:o> } <var:W> := <nat:3> { <var:G> = <var:o> \land <var:W> = <nat:3> } | and \verb | { <var:G> = <var:o> \land <var:W> = <nat:3> } <var:W> := <nat:2> + <var:W> * <var:G> { <var:G> = <var:o> \land <var:W> = <nat:3> \cdot <var:o> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:G> = <var:o> }} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:4> + <var:W> * <var:G> ; <var:W> := <var:W> * <var:G> ; <var:W> := <nat:3> + <var:W> * <var:G> ; <var:W> := <nat:2> + <var:W> * <var:G> ; <var:W> := <nat:3> + <var:W> * <var:G> {{ <var:W> = <nat:3> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:W> = <nat:3> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 