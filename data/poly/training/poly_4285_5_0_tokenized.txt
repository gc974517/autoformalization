\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:3> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:U> ; <var:S> := <var:R1> ; <var:S> := <var:S> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given every natural coefficients $ <var:h> $ , that $ <var:U> = <var:h> $ ahead of executing this list of instructions , then we have $ <var:S> = <nat:4> \times <var:h> + <nat:3> $ after series of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:h> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:U> = <var:h> \land <var:R0> = <nat:3> \} \\ <var:R1> := <nat:4> ; \\ \{ <var:U> = <var:h> \land <var:R0> = <nat:3> \land <var:R1> = <nat:4> \} \\ <var:R1> := <var:R1> * <var:U> ; \\ \{ <var:U> = <var:h> \land <var:R0> = <nat:3> \land <var:R1> = <nat:4> \cdot <var:h> \} \\ <var:S> := <var:R1> ; \\ \{ <var:U> = <var:h> \land <var:R0> = <nat:3> \land <var:S> = <nat:4> \cdot <var:h> \} \\ <var:S> := <var:S> + <var:R0> \\ \{ <var:U> = <var:h> \land <var:S> = <nat:4> \cdot <var:h> + <nat:3> \} \end{eqnarray} The application of Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:3> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:U> ; <var:S> := <var:R1> ; <var:S> := <var:S> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:U> = <var:h> }} <def:poly> {{ <var:S> = <nat:4> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:R0> = <nat:3> /\ <var:S> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:S> = <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 