\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:7> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:h> ; <var:O> := <var:r1> ; <var:O> := <var:O> + <var:r0> \end{verbatim} Given ( for every whole numbers $ <var:S> $ ) it to hold that $ <var:h> = <var:S> $ ahead of evaluating our program it follows that $ <var:O> = <nat:6> \times <var:S> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions is shown by this decorated program . \begin{eqnarray} \{ <var:h> = <var:S> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:h> = <var:S> \land <var:r0> = <nat:7> \} \\ <var:r1> := <nat:6> ; \\ \{ <var:h> = <var:S> \land <var:r0> = <nat:7> \land <var:r1> = <nat:6> \} \\ <var:r1> := <var:r1> * <var:h> ; \\ \{ <var:h> = <var:S> \land <var:r0> = <nat:7> \land <var:r1> = <nat:6> \cdot <var:S> \} \\ <var:O> := <var:r1> ; \\ \{ <var:h> = <var:S> \land <var:r0> = <nat:7> \land <var:O> = <nat:6> \cdot <var:S> \} \\ <var:O> := <var:O> + <var:r0> \\ \{ <var:h> = <var:S> \land <var:O> = <nat:6> \cdot <var:S> + <nat:7> \} \end{eqnarray} Utilizing Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:h> = <var:S> }} <var:r0> := <nat:7> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:h> ; <var:O> := <var:r1> ; <var:O> := <var:O> + <var:r0> {{ <var:O> = <nat:6> * <var:S> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:r0> = <nat:7> /\ <var:O> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:O> = <nat:6> * <var:S> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 