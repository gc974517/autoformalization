\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:9> ; <var:E> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming , taking natural numbers $ <var:P> $ , that we have $ <var:w> = <var:P> $ before executing the series of commands , it follows that $ <var:E> = <nat:9> $ after program has finished executing . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:w> = <var:P> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:w> = <var:P> \land <var:G0> = <nat:9> \} \\ <var:E> := <var:G0> \\ \{ <var:w> = <var:P> \land <var:E> = <nat:9> \} \end{eqnarray} As a consequence , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:9> ; <var:E> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:w> = <var:P> }} <def:poly> {{ <var:E> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:E> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 