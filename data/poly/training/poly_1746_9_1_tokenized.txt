\begin{document} \begin{theorem} We define a list of commands : \begin{verbatim} <var:X1> := <var:B> ; <var:X2> := <var:X1> * <var:B> ; <var:X3> := <var:X2> * <var:B> ; <var:X0> := <nat:3> ; <var:X1> := <var:X1> * <nat:7> ; <var:X3> := <var:X3> * <nat:4> ; <var:o> := <var:X3> <var:o> := <var:o> + <var:X1> <var:o> := <var:o> + <var:X0> \end{verbatim} Given it to be that $ <var:B> = <var:K> $ before the execution of this code it follows that we see $ <var:o> = <nat:4> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:B> = <var:K> \} \\ <var:X1> := <var:B> ; \\ \{ <var:B> = <var:K> \land <var:X1> = <var:K> \} \\ <var:X2> := <var:X1> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:X1> = <var:K> \land <var:X2> = <var:K> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:X1> = <var:K> \land <var:X2> = <var:K> ^ <nat:2> \land <var:X3> = <var:K> ^ <nat:3> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:B> = <var:K> \land <var:X1> = <var:K> \land <var:X2> = <var:K> ^ <nat:2> \land <var:X3> = <var:K> ^ <nat:3> \land <var:X0> = <nat:3> \} \\ <var:X1> := <var:X1> * <nat:7> ; \\ \{ <var:B> = <var:K> \land <var:X1> = <nat:7> \cdot <var:K> \land <var:X2> = <var:K> ^ <nat:2> \land <var:X3> = <var:K> ^ <nat:3> \land <var:X0> = <nat:3> \} \\ <var:X3> := <var:X3> * <nat:4> ; \\ \{ <var:B> = <var:K> \land <var:X1> = <nat:7> \cdot <var:K> \land <var:X2> = <var:K> ^ <nat:2> \land <var:X3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:X0> = <nat:3> \} \\ <var:o> := <var:X3> \\ \{ <var:B> = <var:K> \land <var:X1> = <nat:7> \cdot <var:K> \land <var:X2> = <var:K> ^ <nat:2> \land <var:X0> = <nat:3> \land <var:o> = <nat:4> \cdot <var:K> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:X1> \\ \{ <var:B> = <var:K> \land <var:X0> = <nat:3> \land <var:o> = <nat:4> \cdot <var:K> ^ <nat:3> + <nat:7> \cdot <var:K> \} \\ <var:o> := <var:o> + <var:X0> \\ \{ <var:B> = <var:K> \land <var:o> = <nat:4> \cdot <var:K> ^ <nat:3> + <nat:7> \cdot <var:K> + <nat:3> \} \end{eqnarray} As a consequence , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:B> = <var:K> }} <var:X1> := <var:B> ; <var:X2> := <var:X1> * <var:B> ; <var:X3> := <var:X2> * <var:B> ; <var:X0> := <nat:3> ; <var:X1> := <var:X1> * <nat:7> ; <var:X3> := <var:X3> * <nat:4> ; <var:o> := <var:X3> <var:o> := <var:o> + <var:X1> <var:o> := <var:o> + <var:X0> {{ <var:o> = <nat:4> * <var:K> ^ <nat:3> + <nat:7> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <var:K> /\ <var:X2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <var:K> /\ <var:X2> = <var:K> ^ <nat:2> /\ <var:X3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <var:K> /\ <var:X2> = <var:K> ^ <nat:2> /\ <var:X3> = <var:K> ^ <nat:3> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <nat:7> * <var:K> /\ <var:X2> = <var:K> ^ <nat:2> /\ <var:X3> = <var:K> ^ <nat:3> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <nat:7> * <var:K> /\ <var:X2> = <var:K> ^ <nat:2> /\ <var:X3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X1> = <nat:7> * <var:K> /\ <var:X2> = <var:K> ^ <nat:2> /\ <var:X0> = <nat:3> /\ <var:o> = <nat:4> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:X0> = <nat:3> /\ <var:o> = <nat:4> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:o> = <nat:4> * <var:K> ^ <nat:3> + <nat:7> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 