\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:H> ; <var:G> := <var:U1> ; <var:G> := <var:G> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- with some natural coefficients $ <var:b> $ --- that we have $ <var:H> = <var:b> $ ahead of executing our list of instructions it must be that we have $ <var:G> = <nat:7> * <var:b> + <nat:9> $ once list of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions is accomplished by Hoare techniques . Going forward , \verb | { <var:H> = <var:b> } <var:U0> := <nat:9> { <var:H> = <var:b> \land <var:U0> = <nat:9> } | and \verb | { <var:H> = <var:b> \land <var:U0> = <nat:9> } <var:U1> := <nat:7> { <var:H> = <var:b> \land <var:U0> = <nat:9> \land <var:U1> = <nat:7> } | . Immediately after , we have \verb | { <var:H> = <var:b> } <var:U0> := <nat:9> { <var:H> = <var:b> \land <var:U0> = <nat:9> } | and \verb | { <var:H> = <var:b> \land <var:U0> = <nat:9> } <var:U1> := <nat:7> { <var:H> = <var:b> \land <var:U0> = <nat:9> \land <var:U1> = <nat:7> } | . This is shown with the variable update scheme from usual Hoare reasoning . Considering the upcoming step found in the segment of code , we have \verb | { <var:H> = <var:b> } <var:U0> := <nat:9> { <var:H> = <var:b> \land <var:U0> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:H> ; <var:G> := <var:U1> ; <var:G> := <var:G> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:H> = <var:b> }} <def:poly> {{ <var:G> = <nat:7> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:U0> = <nat:9> /\ <var:G> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:G> = <nat:7> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 