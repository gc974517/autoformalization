\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:1> ; <var:q> := <var:W0> \end{verbatim} Assume $ <var:O> = <var:M> $ prior to the execution of this series of instructions it must be that we have $ <var:q> = <nat:1> $ once program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:M> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:O> = <var:M> \land <var:W0> = <nat:1> \} \\ <var:q> := <var:W0> \\ \{ <var:O> = <var:M> \land <var:q> = <nat:1> \} \end{eqnarray} The application of Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:O> = <var:M> }} <var:W0> := <nat:1> ; <var:q> := <var:W0> {{ <var:q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 