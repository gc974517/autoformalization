\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:9> ; <var:d> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:k> = <var:l> $ for all $ <var:l> \in \mathbb{Z}^+ $ ahead of interpreting our series of instructions it must be that $ <var:d> = <nat:9> $ . \end{theorem} \begin{proof} We can see that the following decorated segment of code . \begin{eqnarray} \{ <var:k> = <var:l> \} \\ <var:R0> := <nat:9> ; \\ \{ <var:k> = <var:l> \land <var:R0> = <nat:9> \} \\ <var:d> := <var:R0> \\ \{ <var:k> = <var:l> \land <var:d> = <nat:9> \} \end{eqnarray} Utilizing Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:9> ; <var:d> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:k> = <var:l> }} <def:poly> {{ <var:d> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:d> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 