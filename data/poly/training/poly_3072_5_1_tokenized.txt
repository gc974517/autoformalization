\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:H> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:2> ; <var:p> := <var:U1> <var:p> := <var:p> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Given , taking positive integer coefficients $ <var:Z> $ , $ <var:H> = <var:Z> $ ahead of running the segment of code , it follows that we have $ <var:p> = <nat:2> \times <var:Z> + <nat:7> $ when list of instructions executes . \end{theorem} \begin{proof} The course of logic for our set of instructions can be given through the following decorated series of instructions . \begin{eqnarray} \{ <var:H> = <var:Z> \} \\ <var:U1> := <var:H> ; \\ \{ <var:H> = <var:Z> \land <var:U1> = <var:Z> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:H> = <var:Z> \land <var:U1> = <var:Z> \land <var:U0> = <nat:7> \} \\ <var:U1> := <var:U1> * <nat:2> ; \\ \{ <var:H> = <var:Z> \land <var:U1> = <nat:2> \cdot <var:Z> \land <var:U0> = <nat:7> \} \\ <var:p> := <var:U1> \\ \{ <var:H> = <var:Z> \land <var:U0> = <nat:7> \land <var:p> = <nat:2> \cdot <var:Z> \} \\ <var:p> := <var:p> + <var:U0> \\ \{ <var:H> = <var:Z> \land <var:p> = <nat:2> \cdot <var:Z> + <nat:7> \} \end{eqnarray} The application of Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:H> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:2> ; <var:p> := <var:U1> <var:p> := <var:p> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:H> = <var:Z> }} <def:poly> {{ <var:p> = <nat:2> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:U1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:U1> = <nat:2> * <var:Z> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:U0> = <nat:7> /\ <var:p> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:p> = <nat:2> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 