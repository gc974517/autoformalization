\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:P1> := <var:n> ; <var:P2> := <var:P1> * <var:n> ; <var:P3> := <var:P2> * <var:n> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:3> ; <var:P2> := <var:P2> * <nat:2> ; <var:P3> := <var:P3> * <nat:7> ; <var:a> := <var:P3> <var:a> := <var:a> + <var:P2> <var:a> := <var:a> + <var:P1> <var:a> := <var:a> + <var:P0> \end{verbatim} Allow that we have $ <var:n> = <var:V> $ --- taking natural coefficients $ <var:V> $ --- prior to running our program it holds that we see $ <var:a> = <nat:7> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:4> $ once program terminates . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:V> \} \\ <var:P1> := <var:n> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <var:V> \} \\ <var:P2> := <var:P1> * <var:n> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:n> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P3> = <var:V> ^ <nat:3> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P3> = <var:V> ^ <nat:3> \land <var:P0> = <nat:4> \} \\ <var:P1> := <var:P1> * <nat:3> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <nat:3> \times <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P3> = <var:V> ^ <nat:3> \land <var:P0> = <nat:4> \} \\ <var:P2> := <var:P2> * <nat:2> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <nat:3> \times <var:V> \land <var:P2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:P3> = <var:V> ^ <nat:3> \land <var:P0> = <nat:4> \} \\ <var:P3> := <var:P3> * <nat:7> ; \\ \{ <var:n> = <var:V> \land <var:P1> = <nat:3> \times <var:V> \land <var:P2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:P3> = <nat:7> \times <var:V> ^ <nat:3> \land <var:P0> = <nat:4> \} \\ <var:a> := <var:P3> \\ \{ <var:n> = <var:V> \land <var:P1> = <nat:3> \times <var:V> \land <var:P2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:P0> = <nat:4> \land <var:a> = <nat:7> \times <var:V> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:P2> \\ \{ <var:n> = <var:V> \land <var:P1> = <nat:3> \times <var:V> \land <var:P0> = <nat:4> \land <var:a> = <nat:7> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:P1> \\ \{ <var:n> = <var:V> \land <var:P0> = <nat:4> \land <var:a> = <nat:7> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> \} \\ <var:a> := <var:a> + <var:P0> \\ \{ <var:n> = <var:V> \land <var:a> = <nat:7> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:4> \} \end{eqnarray} Given the above , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:n> = <var:V> }} <var:P1> := <var:n> ; <var:P2> := <var:P1> * <var:n> ; <var:P3> := <var:P2> * <var:n> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:3> ; <var:P2> := <var:P2> * <nat:2> ; <var:P3> := <var:P3> * <nat:7> ; <var:a> := <var:P3> <var:a> := <var:a> + <var:P2> <var:a> := <var:a> + <var:P1> <var:a> := <var:a> + <var:P0> {{ <var:a> = <nat:7> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <var:V> /\ <var:P2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <var:V> /\ <var:P2> = <var:V> ^ <nat:2> /\ <var:P3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <var:V> /\ <var:P2> = <var:V> ^ <nat:2> /\ <var:P3> = <var:V> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <nat:3> * <var:V> /\ <var:P2> = <var:V> ^ <nat:2> /\ <var:P3> = <var:V> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <nat:3> * <var:V> /\ <var:P2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:P3> = <var:V> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <nat:3> * <var:V> /\ <var:P2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <nat:3> * <var:V> /\ <var:P2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:P0> = <nat:4> /\ <var:a> = <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P1> = <nat:3> * <var:V> /\ <var:P0> = <nat:4> /\ <var:a> = <nat:7> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:P0> = <nat:4> /\ <var:a> = <nat:7> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:a> = <nat:7> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 