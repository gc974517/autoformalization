\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:I1> := <var:M> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:6> ; <var:i> := <var:I1> <var:i> := <var:i> + <var:I0> \end{verbatim} Allowing that we have $ <var:M> = <var:q> $ before the execution of the segment of code , it must be that we have $ <var:i> = <nat:6> \cdot <var:q> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is given with typical Hoare logic . Focusing on the subsequent line of code contained in our code segment , the environment update line yielding $ <var:M> $ to $ <var:I1>$ . This code redefines the condition $ \{ <var:M> = <var:q> \} $ into the postcondition $ \{ <var:M> = <var:q> \land <var:I1> = <var:q> \} $ . This is guaranteed using the assignment rule given by typical Hoare techniques . Paying attention to the subsequent bit of code contained in the program , we see the binding command assigning $ <nat:8> $ into $ <var:I0>$ . This statement moves $ \{ <var:M> = <var:q> \land <var:I1> = <var:q> \} $ as $ \{ <var:M> = <var:q> \land <var:I1> = <var:q> \land <var:I0> = <nat:8> \} $ . Stepping forward , we have the variable assignmet code giving $ <var:I1> * <nat:6> $ to $ <var:I1>$ . This forwards the precondition $ \{ <var:M> = <var:q> \land <var:I1> = <var:q> \land <var:I0> = <nat:8> \} $ as the postcondition $ \{ <var:M> = <var:q> \land <var:I1> = <nat:6> * <var:q> \land <var:I0> = <nat:8> \} $ . This is shown to be logically sound with the assignment rule found in Hoare techniques . Going to the next step , we have the environment update code \verb | <var:i> := <var:I1> | . This advances the precondition $ \{ <var:M> = <var:q> \land <var:I1> = <nat:6> * <var:q> \land <var:I0> = <nat:8> \} $ to the condition $ \{ <var:M> = <var:q> \land <var:I0> = <nat:8> \land <var:i> = <nat:6> * <var:q> \} $ . Following , we see the variable binding code giving $ <var:i> + <var:I0$ as $ <var:i>$ . This command moves $ \{ <var:M> = <var:q> \land <var:I0> = <nat:8> \land <var:i> = <nat:6> * <var:q> \} $ into the postcondition $ \{ <var:M> = <var:q> \land <var:i> = <nat:6> * <var:q> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <var:I1> := <var:M> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:6> ; <var:i> := <var:I1> <var:i> := <var:i> + <var:I0> {{ <var:i> = <nat:6> * <var:q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:I1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:I1> = <var:q> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:I1> = <nat:6> * <var:q> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:I0> = <nat:8> /\ <var:i> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:i> = <nat:6> * <var:q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 