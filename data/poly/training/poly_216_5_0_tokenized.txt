\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:B> ; <var:w> := <var:l1> ; <var:w> := <var:w> + <var:l0> \end{verbatim} Allow $ <var:B> = <var:H> $ , given any natural coefficients $ <var:H> $ , ahead of the execution of our list of instructions , it must be that we have $ <var:w> = <nat:6> * <var:H> + <nat:5> $ once series of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:H> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:B> = <var:H> \land <var:l0> = <nat:5> \} \\ <var:l1> := <nat:6> ; \\ \{ <var:B> = <var:H> \land <var:l0> = <nat:5> \land <var:l1> = <nat:6> \} \\ <var:l1> := <var:l1> * <var:B> ; \\ \{ <var:B> = <var:H> \land <var:l0> = <nat:5> \land <var:l1> = <nat:6> * <var:H> \} \\ <var:w> := <var:l1> ; \\ \{ <var:B> = <var:H> \land <var:l0> = <nat:5> \land <var:w> = <nat:6> * <var:H> \} \\ <var:w> := <var:w> + <var:l0> \\ \{ <var:B> = <var:H> \land <var:w> = <nat:6> * <var:H> + <nat:5> \} \end{eqnarray} Applying standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:B> = <var:H> }} <var:l0> := <nat:5> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:B> ; <var:w> := <var:l1> ; <var:w> := <var:w> + <var:l0> {{ <var:w> = <nat:6> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:l0> = <nat:5> /\ <var:w> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:w> = <nat:6> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 