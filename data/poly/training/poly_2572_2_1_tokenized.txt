\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:3> ; <var:t> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:X> = <var:o> $ before running our list of instructions , it follows that $ <var:t> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands can be accomplished using the below decorated code . \begin{eqnarray} \{ <var:X> = <var:o> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:X> = <var:o> \land <var:W0> = <nat:3> \} \\ <var:t> := <var:W0> \\ \{ <var:X> = <var:o> \land <var:t> = <nat:3> \} \end{eqnarray} Using typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:3> ; <var:t> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <def:poly> {{ <var:t> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:t> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 