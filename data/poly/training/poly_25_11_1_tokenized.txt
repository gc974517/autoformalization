\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:I> ; <var:G2> := <var:G1> * <var:I> ; <var:G3> := <var:G2> * <var:I> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:8> ; <var:G3> := <var:G3> * <nat:8> ; <var:f> := <var:G3> <var:f> := <var:f> + <var:G2> <var:f> := <var:f> + <var:G1> <var:f> := <var:f> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Allowing that $ <var:I> = <var:Q> $ --- with some positive coefficients $ <var:Q> $ --- ahead of the evaluation of the set of instructions it follows that we have $ <var:f> = <nat:8> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our set of instructions is accomplished by standard Hoare techniques . Focusing on the next command contained in our list of commands , we have the variable update statement \verb | <var:G1> := <var:I> ; | . This code advances $ \{ <var:I> = <var:Q> \} $ as the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \} $ . This is given through the assignment scheme defined by typical Hoare logic . Advancing , we see the assignment command assigning $ <var:G1> * <var:I> $ toward $ <var:G2>$ . This takes the precondition $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \} $ toward the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \} $ . Honing in on the next bit of code in the code , the variable binding code \verb | <var:G3> := <var:G2> * <var:I> ; | . This redefines the precondition $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \} $ into $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \} $ . Further , the statement \verb | <var:G0> := <nat:1> ; | . This command redefines $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \} $ as the postcondition $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ . This is deduced using the assignment rule given by Hoare reasoning . Moving forward , we see the variable assignmet statement letting $ <var:G1> * <nat:1> $ toward $ <var:G1>$ . This command transfers the precondition $ \{ <var:I> = <var:Q> \land <var:G1> = <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ into the postcondition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ . This is deduced with the assignment law of typical Hoare reasoning . Moving on , we see the variable update statement assigning $ <var:G2> * <nat:8> $ to $ <var:G2>$ . This redefines the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ toward the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ . This is shown to be logically sound using the assignment scheme given by standard Hoare reasoning . Moving on to the next step , we have the binding command binding $ <var:G3> * <nat:8> $ into $ <var:G3>$ . This advances the precondition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:G3> = <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ to the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:G3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ . This is known to be sound by the assignment inference rule defined in typical Hoare techniques . Moving on , we have the assignment line defining $ <var:G3$ as $ <var:f>$ . This transfers the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:G3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:G0> = <nat:1> \} $ toward the postcondition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:G0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> \} $ . Moving forward , we see the variable update command assigning $ <var:f> + <var:G2$ into $ <var:f>$ . This transfers the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:G0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> \} $ to the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> \} $ . Jumping to the proceeding step found in our series of commands , we see the variable assignmet code binding $ <var:f> + <var:G1$ as $ <var:f>$ . This redefines the condition $ \{ <var:I> = <var:Q> \land <var:G1> = <nat:1> \cdot <var:Q> \land <var:G0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> \} $ into the postcondition $ \{ <var:I> = <var:Q> \land <var:G0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> \} $ . Looking at the subsequent step found in our segment of code , we see the binding line \verb | <var:f> := <var:f> + <var:G0> | . This command takes $ \{ <var:I> = <var:Q> \land <var:G0> = <nat:1> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> \} $ toward the postcondition $ \{ <var:I> = <var:Q> \land <var:f> = <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:1> \} $ . This is rigorously given using the assignment scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:I> ; <var:G2> := <var:G1> * <var:I> ; <var:G3> := <var:G2> * <var:I> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:8> ; <var:G3> := <var:G3> * <nat:8> ; <var:f> := <var:G3> <var:f> := <var:f> + <var:G2> <var:f> := <var:f> + <var:G1> <var:f> := <var:f> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:I> = <var:Q> }} <def:poly> {{ <var:f> = <nat:8> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <var:Q> /\ <var:G2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <var:Q> /\ <var:G2> = <var:Q> ^ <nat:2> /\ <var:G3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <var:Q> /\ <var:G2> = <var:Q> ^ <nat:2> /\ <var:G3> = <var:Q> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <nat:1> * <var:Q> /\ <var:G2> = <var:Q> ^ <nat:2> /\ <var:G3> = <var:Q> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <nat:1> * <var:Q> /\ <var:G2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:G3> = <var:Q> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <nat:1> * <var:Q> /\ <var:G2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:G3> = <nat:8> * <var:Q> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <nat:1> * <var:Q> /\ <var:G2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:G0> = <nat:1> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G1> = <nat:1> * <var:Q> /\ <var:G0> = <nat:1> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:G0> = <nat:1> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 