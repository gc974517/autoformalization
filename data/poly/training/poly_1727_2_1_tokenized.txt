\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:6> ; <var:d> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:u> = <var:U> $ ahead of the execution of our series of instructions it follows that $ <var:d> = <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:u> = <var:U> \} \\ <var:p0> := <nat:6> ; \\ \{ <var:u> = <var:U> \land <var:p0> = <nat:6> \} \\ <var:d> := <var:p0> \\ \{ <var:u> = <var:U> \land <var:d> = <nat:6> \} \end{eqnarray} Considering the preceding argument , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:6> ; <var:d> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:u> = <var:U> }} <def:poly> {{ <var:d> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:d> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 