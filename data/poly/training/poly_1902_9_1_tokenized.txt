\begin{document} \begin{theorem} Take the following code segment as follows \begin{verbatim} <var:A1> := <var:w> ; <var:A2> := <var:A1> * <var:w> ; <var:A3> := <var:A2> * <var:w> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:3> ; <var:A3> := <var:A3> * <nat:4> ; <var:Z> := <var:A3> <var:Z> := <var:Z> + <var:A1> <var:Z> := <var:Z> + <var:A0> \end{verbatim} Allow $ <var:w> = <var:c> $ --- given some positive coefficients $ <var:c> $ --- ahead of the evaluation of our list of instructions it holds that $ <var:Z> = <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:c> \} \\ <var:A1> := <var:w> ; \\ \{ <var:w> = <var:c> \land <var:A1> = <var:c> \} \\ <var:A2> := <var:A1> * <var:w> ; \\ \{ <var:w> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:w> ; \\ \{ <var:w> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:w> = <var:c> \land <var:A1> = <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A1> := <var:A1> * <nat:3> ; \\ \{ <var:w> = <var:c> \land <var:A1> = <nat:3> \cdot <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <var:c> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A3> := <var:A3> * <nat:4> ; \\ \{ <var:w> = <var:c> \land <var:A1> = <nat:3> \cdot <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A3> = <nat:4> \cdot <var:c> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:Z> := <var:A3> \\ \{ <var:w> = <var:c> \land <var:A1> = <nat:3> \cdot <var:c> \land <var:A2> = <var:c> ^ <nat:2> \land <var:A0> = <nat:4> \land <var:Z> = <nat:4> \cdot <var:c> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:A1> \\ \{ <var:w> = <var:c> \land <var:A0> = <nat:4> \land <var:Z> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> \} \\ <var:Z> := <var:Z> + <var:A0> \\ \{ <var:w> = <var:c> \land <var:Z> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> + <nat:4> \} \end{eqnarray} The application of standard Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:w> = <var:c> }} <var:A1> := <var:w> ; <var:A2> := <var:A1> * <var:w> ; <var:A3> := <var:A2> * <var:w> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:3> ; <var:A3> := <var:A3> * <nat:4> ; <var:Z> := <var:A3> <var:Z> := <var:Z> + <var:A1> <var:Z> := <var:Z> + <var:A0> {{ <var:Z> = <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A3> = <var:c> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <nat:3> * <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A3> = <var:c> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <nat:3> * <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A3> = <nat:4> * <var:c> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A1> = <nat:3> * <var:c> /\ <var:A2> = <var:c> ^ <nat:2> /\ <var:A0> = <nat:4> /\ <var:Z> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:A0> = <nat:4> /\ <var:Z> = <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:Z> = <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 