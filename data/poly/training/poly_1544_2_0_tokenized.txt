\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:6> ; <var:T> := <var:G0> \end{verbatim} Assume that we have $ <var:K> = <var:Y> $ ahead of executing the code , it follows that $ <var:T> = <nat:6> $ when code segment executes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:K> = <var:Y> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:K> = <var:Y> \land <var:G0> = <nat:6> \} \\ <var:T> := <var:G0> \\ \{ <var:K> = <var:Y> \land <var:T> = <nat:6> \} \end{eqnarray} Considering the preceding argument , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:K> = <var:Y> }} <var:G0> := <nat:6> ; <var:T> := <var:G0> {{ <var:T> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:T> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 