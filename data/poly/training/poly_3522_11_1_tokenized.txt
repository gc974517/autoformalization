\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:z1> := <var:n> ; <var:z2> := <var:z1> * <var:n> ; <var:z3> := <var:z2> * <var:n> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:1> ; <var:z2> := <var:z2> * <nat:9> ; <var:z3> := <var:z3> * <nat:6> ; <var:a> := <var:z3> <var:a> := <var:a> + <var:z2> <var:a> := <var:a> + <var:z1> <var:a> := <var:a> + <var:z0> \end{verbatim} Assuming ( given every $ <var:F> \in \mathbb{N} $ ) it to hold that $ <var:n> = <var:F> $ before executing the list of instructions it must be that we have $ <var:a> = <nat:6> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is evident using standard Hoare logic . Considering the upcoming lines found in our list of commands , we have \begin{eqnarray} \{ <var:n> = <var:F> \} \, <var:z1> := <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <var:F> \} \, <var:z2> := <var:z1> * <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \} \, <var:z3> := <var:z2> * <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \} \end{eqnarray} This is ensured using the assignment scheme of usual Hoare logic . Taking a look at the subsequent pieces of code in the list of commands , we have \begin{eqnarray} \{ <var:n> = <var:F> \} \, <var:z1> := <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <var:F> \} \, <var:z2> := <var:z1> * <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \} \, <var:z3> := <var:z2> * <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \} \, <var:z0> := <nat:6> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \, <var:z1> := <var:z1> * <nat:1> \, \{ <var:n> = <var:F> \land <var:z1> = <nat:1> \times <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <nat:1> \times <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \, <var:z2> := <var:z2> * <nat:9> \, \{ <var:n> = <var:F> \land <var:z1> = <nat:1> \times <var:F> \land <var:z2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \\ \{ <var:n> = <var:F> \land <var:z1> = <nat:1> \times <var:F> \land <var:z2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \, <var:z3> := <var:z3> * <nat:6> \, \{ <var:n> = <var:F> \land <var:z1> = <nat:1> \times <var:F> \land <var:z2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:z3> = <nat:6> \times <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} \end{eqnarray} This is shown using the scheme obtained from usual Hoare reasoning . Advancing , we have \begin{eqnarray} \{ <var:n> = <var:F> \} \, <var:z1> := <var:n> \, \{ <var:n> = <var:F> \land <var:z1> = <var:F> \} \end{eqnarray} This is deduced with the variable update law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:n> = <var:F> }} <var:z1> := <var:n> ; <var:z2> := <var:z1> * <var:n> ; <var:z3> := <var:z2> * <var:n> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:1> ; <var:z2> := <var:z2> * <nat:9> ; <var:z3> := <var:z3> * <nat:6> ; <var:a> := <var:z3> <var:a> := <var:a> + <var:z2> <var:a> := <var:a> + <var:z1> <var:a> := <var:a> + <var:z0> {{ <var:a> = <nat:6> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <var:F> /\ <var:z2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <var:F> /\ <var:z2> = <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <var:F> /\ <var:z2> = <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <nat:1> * <var:F> /\ <var:z2> = <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <nat:1> * <var:F> /\ <var:z2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <nat:1> * <var:F> /\ <var:z2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:z3> = <nat:6> * <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <nat:1> * <var:F> /\ <var:z2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:z0> = <nat:6> /\ <var:a> = <nat:6> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z1> = <nat:1> * <var:F> /\ <var:z0> = <nat:6> /\ <var:a> = <nat:6> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:z0> = <nat:6> /\ <var:a> = <nat:6> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:a> = <nat:6> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 