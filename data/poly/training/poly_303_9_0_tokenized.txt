\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:H> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:H> ; <var:F2> := <var:F2> * <var:H> ; <var:V> := <var:F2> ; <var:V> := <var:V> + <var:F1> ; <var:V> := <var:V> + <var:F0> \end{verbatim} Given that we have $ <var:H> = <var:O> $ --- for $ <var:O> $ --- ahead of executing the program it must be that we have $ <var:V> = <nat:1> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:H> = <var:O> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \} \\ <var:F1> := <nat:6> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:F1> = <nat:6> \} \\ <var:F1> := <var:F1> * <var:H> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:F1> = <nat:6> \cdot <var:O> \} \\ <var:F2> := <nat:1> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:F1> = <nat:6> \cdot <var:O> \land <var:F2> = <nat:1> \} \\ <var:F2> := <var:F2> * <var:H> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:F1> = <nat:6> \cdot <var:O> \land <var:F2> = <nat:1> \cdot <var:O> \} \\ <var:F2> := <var:F2> * <var:H> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:F1> = <nat:6> \cdot <var:O> \land <var:F2> = <nat:1> \cdot <var:O> ^ <nat:2> \} \\ <var:V> := <var:F2> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:F1> = <nat:6> \cdot <var:O> \land <var:V> = <nat:1> \cdot <var:O> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:F1> ; \\ \{ <var:H> = <var:O> \land <var:F0> = <nat:4> \land <var:V> = <nat:1> \cdot <var:O> ^ <nat:2> + <nat:6> \cdot <var:O> \} \\ <var:V> := <var:V> + <var:F0> \\ \{ <var:H> = <var:O> \land <var:V> = <nat:1> \cdot <var:O> ^ <nat:2> + <nat:6> \cdot <var:O> + <nat:4> \} \end{eqnarray} Considering the above , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:H> = <var:O> }} <var:F0> := <nat:4> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:H> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:H> ; <var:F2> := <var:F2> * <var:H> ; <var:V> := <var:F2> ; <var:V> := <var:V> + <var:F1> ; <var:V> := <var:V> + <var:F0> {{ <var:V> = <nat:1> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:6> * <var:O> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:6> * <var:O> /\ <var:F2> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:6> * <var:O> /\ <var:F2> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:6> * <var:O> /\ <var:V> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:F0> = <nat:4> /\ <var:V> = <nat:1> * <var:O> ^ <nat:2> + <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:V> = <nat:1> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 