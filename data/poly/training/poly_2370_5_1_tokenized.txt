\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:W1> := <var:m> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:1> ; <var:R> := <var:W1> <var:R> := <var:R> + <var:W0> \end{verbatim} Assuming for any positive integers $ <var:j> $ $ <var:m> = <var:j> $ prior to running this segment of code then we see $ <var:R> = <nat:1> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is shown using standard Hoare techniques . Honing in on the upcoming command found in our program , the variable binding line \verb | <var:W1> := <var:m> ; | . This line forwards the condition $ \{ <var:m> = <var:j> \} $ as $ \{ <var:m> = <var:j> \land <var:W1> = <var:j> \} $ . This is guaranteed by the assignment inference rule in usual Hoare logic . Paying attention to the next command found in our series of instructions , we see the assignment statement \verb | <var:W0> := <nat:2> ; | . This forwards $ \{ <var:m> = <var:j> \land <var:W1> = <var:j> \} $ as the condition $ \{ <var:m> = <var:j> \land <var:W1> = <var:j> \land <var:W0> = <nat:2> \} $ . Advancing , we have the binding code \verb | <var:W1> := <var:W1> * <nat:1> ; | . This moves $ \{ <var:m> = <var:j> \land <var:W1> = <var:j> \land <var:W0> = <nat:2> \} $ as $ \{ <var:m> = <var:j> \land <var:W1> = <nat:1> \times <var:j> \land <var:W0> = <nat:2> \} $ . After , the variable assignmet line \verb | <var:R> := <var:W1> | . This transfers the precondition $ \{ <var:m> = <var:j> \land <var:W1> = <nat:1> \times <var:j> \land <var:W0> = <nat:2> \} $ to the postcondition $ \{ <var:m> = <var:j> \land <var:W0> = <nat:2> \land <var:R> = <nat:1> \times <var:j> \} $ . After , the environment update line defining $ <var:R> + <var:W0$ toward $ <var:R>$ . This takes $ \{ <var:m> = <var:j> \land <var:W0> = <nat:2> \land <var:R> = <nat:1> \times <var:j> \} $ toward $ \{ <var:m> = <var:j> \land <var:R> = <nat:1> \times <var:j> + <nat:2> \} $ . This is ensured with the assignment scheme found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:m> = <var:j> }} <var:W1> := <var:m> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:1> ; <var:R> := <var:W1> <var:R> := <var:R> + <var:W0> {{ <var:R> = <nat:1> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:W1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:W1> = <var:j> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:W1> = <nat:1> * <var:j> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:W0> = <nat:2> /\ <var:R> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:R> = <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 