\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:j0> := <nat:7> ; <var:a> := <var:j0> \end{verbatim} Allow for $ <var:P> $ $ <var:C> = <var:P> $ prior to running the set of instructions , then $ <var:a> = <nat:7> $ once set of instructions executes . \end{theorem} \begin{proof} The method of proof for the list of instructions is demonstrated with Hoare reasoning . Following , the variable assignmet line \verb | <var:j0> := <nat:7> ; | . This line moves $ \{ <var:C> = <var:P> \} $ as the postcondition $ \{ <var:C> = <var:P> \land <var:j0> = <nat:7> \} $ . This is known to be sound through the assignment scheme defined in usual Hoare logic . Honing in on the next line found in the program , we see the binding command assigning $ <var:j0$ to $ <var:a>$ . This command redefines $ \{ <var:C> = <var:P> \land <var:j0> = <nat:7> \} $ to $ \{ <var:C> = <var:P> \land <var:a> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:C> = <var:P> }} <var:j0> := <nat:7> ; <var:a> := <var:j0> {{ <var:a> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 