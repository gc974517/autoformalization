\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:x> ; <var:m> := <var:D1> ; <var:m> := <var:m> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assume that we have $ <var:x> = <var:f> $ prior to executing this list of instructions , it must be that $ <var:m> = <nat:2> \cdot <var:f> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is clear through standard Hoare logic . Advancing to the subsequent bit of code contained in the code segment , the variable assignmet line \verb | <var:D0> := <nat:3> ; | . This takes the condition $ \{ <var:x> = <var:f> \} $ as the postcondition $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \} $ . Moving on , we have the variable update code yielding $ <nat:2> $ as $ <var:D1>$ . This statement takes the condition $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \} $ to $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> \} $ . This is guaranteed through the assignment law from usual Hoare reasoning . Considering the subsequent line contained in the list of commands , we have the variable binding code yielding $ <var:D1> * <var:x> $ as $ <var:D1>$ . This code redefines $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> \cdot <var:f> \} $ . This is shown to be logically sound through the assignment scheme of usual Hoare techniques . Jumping to the subsequent bit of code found in the list of commands , the variable assignmet line yielding $ <var:D1> $ toward $ <var:m>$ . This line forwards the condition $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> \cdot <var:f> \} $ toward the condition $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \land <var:m> = <nat:2> \cdot <var:f> \} $ . Moving forward to the proceeding step in our series of commands , the binding statement yielding $ <var:m> + <var:D0$ to $ <var:m>$ . This command forwards $ \{ <var:x> = <var:f> \land <var:D0> = <nat:3> \land <var:m> = <nat:2> \cdot <var:f> \} $ into the condition $ \{ <var:x> = <var:f> \land <var:m> = <nat:2> \cdot <var:f> + <nat:3> \} $ . This is shown by the assignment rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:x> ; <var:m> := <var:D1> ; <var:m> := <var:m> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:x> = <var:f> }} <def:poly> {{ <var:m> = <nat:2> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:D0> = <nat:3> /\ <var:m> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:m> = <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 