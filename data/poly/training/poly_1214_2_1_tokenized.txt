\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:5> ; <var:X> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allow it to hold that $ <var:K> = <var:v> $ before evaluating our segment of code it follows that $ <var:X> = <nat:5> $ once series of commands has terminated . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:K> = <var:v> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:K> = <var:v> \land <var:o0> = <nat:5> \} \\ <var:X> := <var:o0> \\ \{ <var:K> = <var:v> \land <var:X> = <nat:5> \} \end{eqnarray} Thusly , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:5> ; <var:X> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:K> = <var:v> }} <def:poly> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 