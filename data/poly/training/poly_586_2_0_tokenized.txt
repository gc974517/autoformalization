\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:3> ; <var:z> := <var:I0> \end{verbatim} Allow that $ <var:r> = <var:v> $ ahead of the execution of this series of instructions , it must be that we see $ <var:z> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands is demonstrated through typical Hoare techniques . Honing in on the upcoming command found in the code , we have the variable assignmet code yielding $ <nat:3> $ toward $ <var:I0>$ . This advances $ \{ <var:r> = <var:v> \} $ to the postcondition $ \{ <var:r> = <var:v> \land <var:I0> = <nat:3> \} $ . Going to the next step , we see the environment update statement binding $ <var:I0$ to $ <var:z>$ . This transfers the precondition $ \{ <var:r> = <var:v> \land <var:I0> = <nat:3> \} $ as the postcondition $ \{ <var:r> = <var:v> \land <var:z> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:r> = <var:v> }} <var:I0> := <nat:3> ; <var:z> := <var:I0> {{ <var:z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 