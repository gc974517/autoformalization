\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A> := <nat:4> ; <var:A> := <nat:4> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:4> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:3> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:3> + <var:A> * <var:i> ; <var:A> := <nat:1> + <var:A> * <var:i> ; <var:A> := <nat:1> + <var:A> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:i> = <var:p> $ ( for every positive integers $ <var:p> $ ) ahead of the evaluation of the code it holds that $ <var:A> = <nat:4> \cdot <var:p> ^ <nat:10> + <nat:4> \cdot <var:p> ^ <nat:9> + <nat:2> \cdot <var:p> ^ <nat:8> + <nat:4> \cdot <var:p> ^ <nat:7> + <nat:2> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:2> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:i> = <var:p> \} \\ <var:A> := <nat:4> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \} \\ <var:A> := <nat:4> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> + <nat:4> \} \\ <var:A> := <nat:2> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:2> \} \\ <var:A> := <nat:4> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} \\ <var:A> := <nat:2> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:2> \} \\ <var:A> := <nat:3> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> \} \\ <var:A> := <nat:2> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:2> \} \\ <var:A> := <nat:2> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:2> \} \\ <var:A> := <nat:3> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> \} \\ <var:A> := <nat:1> + <var:A> * <var:i> ; \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:9> + <nat:4> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> \} \\ <var:A> := <nat:1> + <var:A> * <var:i> \\ \{ <var:i> = <var:p> \land <var:A> = <nat:4> \times <var:p> ^ <nat:10> + <nat:4> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:4> ; <var:A> := <nat:4> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:4> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:3> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:2> + <var:A> * <var:i> ; <var:A> := <nat:3> + <var:A> * <var:i> ; <var:A> := <nat:1> + <var:A> * <var:i> ; <var:A> := <nat:1> + <var:A> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:i> = <var:p> }} <def:poly> {{ <var:A> = <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:A> = <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 