\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:L1> := <var:m> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:1> ; <var:l> := <var:L1> <var:l> := <var:l> + <var:L0> \end{verbatim} Allowing it to be that $ <var:m> = <var:U> $ ahead of the execution of our list of instructions it must be that we see $ <var:l> = <nat:1> * <var:U> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:U> \} \\ <var:L1> := <var:m> ; \\ \{ <var:m> = <var:U> \land <var:L1> = <var:U> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:m> = <var:U> \land <var:L1> = <var:U> \land <var:L0> = <nat:7> \} \\ <var:L1> := <var:L1> * <nat:1> ; \\ \{ <var:m> = <var:U> \land <var:L1> = <nat:1> * <var:U> \land <var:L0> = <nat:7> \} \end{eqnarray} Continuing interpreting this code segment produces : \begin{eqnarray} <var:l> := <var:L1> \\ \{ <var:m> = <var:U> \land <var:L0> = <nat:7> \land <var:l> = <nat:1> * <var:U> \} \\ <var:l> := <var:l> + <var:L0> \\ \{ <var:m> = <var:U> \land <var:l> = <nat:1> * <var:U> + <nat:7> \} \end{eqnarray} Allowing running the code returns : \begin{eqnarray} \end{eqnarray} The application of standard Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:m> = <var:U> }} <var:L1> := <var:m> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:1> ; <var:l> := <var:L1> <var:l> := <var:l> + <var:L0> {{ <var:l> = <nat:1> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:L1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:L1> = <var:U> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:L1> = <nat:1> * <var:U> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:L0> = <nat:7> /\ <var:l> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:l> = <nat:1> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 