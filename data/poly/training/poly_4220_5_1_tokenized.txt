\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:Q> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:7> ; <var:A> := <var:g1> <var:A> := <var:A> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Assume $ <var:Q> = <var:i> $ --- for any $ <var:i> \in \mathbb{N} $ --- ahead of the evaluation of this segment of code it must be that $ <var:A> = <nat:7> \times <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our code is shown using typical Hoare reasoning . Considering the subsequent pieces of code found in the code segment , we see \begin{eqnarray} \{ <var:Q> = <var:i> \} \, <var:g1> := <var:Q> \, \{ <var:Q> = <var:i> \land <var:g1> = <var:i> \} \\ \{ <var:Q> = <var:i> \land <var:g1> = <var:i> \} \, <var:g0> := <nat:3> \, \{ <var:Q> = <var:i> \land <var:g1> = <var:i> \land <var:g0> = <nat:3> \} \\ \{ <var:Q> = <var:i> \land <var:g1> = <var:i> \land <var:g0> = <nat:3> \} \, <var:g1> := <var:g1> * <nat:7> \, \{ <var:Q> = <var:i> \land <var:g1> = <nat:7> * <var:i> \land <var:g0> = <nat:3> \} \\ \{ <var:Q> = <var:i> \land <var:g1> = <nat:7> * <var:i> \land <var:g0> = <nat:3> \} \, <var:A> := <var:g1\, \{ <var:Q> = <var:i> \land <var:g0> = <nat:3> \land <var:A> = <nat:7> * <var:i> \} \\ \{ <var:Q> = <var:i> \land <var:g0> = <nat:3> \land <var:A> = <nat:7> * <var:i> \} \, <var:A> := <var:A> + <var:g0\, \{ <var:Q> = <var:i> \land <var:A> = <nat:7> * <var:i> + <nat:3> \} \end{eqnarray} This is given through the variable binding inference rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:Q> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:7> ; <var:A> := <var:g1> <var:A> := <var:A> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Q> = <var:i> }} <def:poly> {{ <var:A> = <nat:7> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:g1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:g1> = <var:i> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:g1> = <nat:7> * <var:i> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:g0> = <nat:3> /\ <var:A> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:A> = <nat:7> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 