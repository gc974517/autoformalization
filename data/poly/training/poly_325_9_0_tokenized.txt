\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:I> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:I> ; <var:d2> := <var:d2> * <var:I> ; <var:h> := <var:d2> ; <var:h> := <var:h> + <var:d1> ; <var:h> := <var:h> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:I> = <var:g> $ --- for all $ <var:g> \in \mathbb{Z}^+ $ --- before interpreting our code , it holds that we have $ <var:h> = <nat:8> \times <var:g> ^ <nat:2> + <nat:6> \times <var:g> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands is shown using this decorated code . \begin{eqnarray} \{ <var:I> = <var:g> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \} \\ <var:d1> := <nat:6> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \} \\ <var:d1> := <var:d1> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \cdot <var:g> \} \\ <var:d2> := <nat:8> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \cdot <var:g> \land <var:d2> = <nat:8> \} \\ <var:d2> := <var:d2> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \cdot <var:g> \land <var:d2> = <nat:8> \cdot <var:g> \} \\ <var:d2> := <var:d2> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \cdot <var:g> \land <var:d2> = <nat:8> \cdot <var:g> ^ <nat:2> \} \\ <var:h> := <var:d2> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \cdot <var:g> \land <var:h> = <nat:8> \cdot <var:g> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:d1> ; \\ \{ <var:I> = <var:g> \land <var:d0> = <nat:1> \land <var:h> = <nat:8> \cdot <var:g> ^ <nat:2> + <nat:6> \cdot <var:g> \} \\ <var:h> := <var:h> + <var:d0> \\ \{ <var:I> = <var:g> \land <var:h> = <nat:8> \cdot <var:g> ^ <nat:2> + <nat:6> \cdot <var:g> + <nat:1> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:I> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:I> ; <var:d2> := <var:d2> * <var:I> ; <var:h> := <var:d2> ; <var:h> := <var:h> + <var:d1> ; <var:h> := <var:h> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:I> = <var:g> }} <def:poly> {{ <var:h> = <nat:8> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> * <var:g> /\ <var:d2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> * <var:g> /\ <var:d2> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> * <var:g> /\ <var:d2> = <nat:8> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> * <var:g> /\ <var:h> = <nat:8> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:d0> = <nat:1> /\ <var:h> = <nat:8> * <var:g> ^ <nat:2> + <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:h> = <nat:8> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 