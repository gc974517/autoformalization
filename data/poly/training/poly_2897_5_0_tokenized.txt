\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:6> ; <var:U1> := <var:U1> * <var:J> ; <var:Q> := <var:U1> ; <var:Q> := <var:Q> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:J> = <var:N> $ ahead of the execution of this code it must be that we have $ <var:Q> = <nat:6> \times <var:N> + <nat:4> $ after list of instructions exits . \end{theorem} \begin{proof} Proving correctness for this series of commands can be accomplished by standard Hoare techniques . Going forward , we have the assignment command \verb | <var:U0> := <nat:4> ; | . This takes $ \{ <var:J> = <var:N> \} $ to the condition $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \} $ . This is given by the assignment rule given by standard Hoare reasoning . Moving on to the next step , we have the variable assignmet command \verb | <var:U1> := <nat:6> ; | . This command transfers the precondition $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \} $ into $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \land <var:U1> = <nat:6> \} $ . Going forward , the binding statement \verb | <var:U1> := <var:U1> * <var:J> ; | . This takes $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \land <var:U1> = <nat:6> \} $ into $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \land <var:U1> = <nat:6> \cdot <var:N> \} $ . Moving on to the following line of code seen in our series of instructions , the variable assignmet command defining $ <var:U1> $ into $ <var:Q>$ . This statement redefines the precondition $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \land <var:U1> = <nat:6> \cdot <var:N> \} $ into the postcondition $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \land <var:Q> = <nat:6> \cdot <var:N> \} $ . Looking at the next command seen in our series of commands , we see the variable binding line \verb | <var:Q> := <var:Q> + <var:U0> | . This command transfers $ \{ <var:J> = <var:N> \land <var:U0> = <nat:4> \land <var:Q> = <nat:6> \cdot <var:N> \} $ toward the postcondition $ \{ <var:J> = <var:N> \land <var:Q> = <nat:6> \cdot <var:N> + <nat:4> \} $ . This is deduced with the assignment rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U1> := <nat:6> ; <var:U1> := <var:U1> * <var:J> ; <var:Q> := <var:U1> ; <var:Q> := <var:Q> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:J> = <var:N> }} <def:poly> {{ <var:Q> = <nat:6> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:U0> = <nat:4> /\ <var:Q> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:Q> = <nat:6> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 