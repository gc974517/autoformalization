\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:2> ; <var:h2> := <nat:5> ; <var:h2> := <var:h2> * <var:U> ; <var:h2> := <var:h2> * <var:U> ; <var:h3> := <nat:2> ; <var:h3> := <var:h3> * <var:U> ; <var:h3> := <var:h3> * <var:U> ; <var:h3> := <var:h3> * <var:U> ; <var:O> := <var:h3> ; <var:O> := <var:O> + <var:h2> ; <var:O> := <var:O> + <var:h0> \end{verbatim} Given ( for some positive integer coefficients $ <var:z> $ ) it to hold that $ <var:U> = <var:z> $ prior to evaluating the set of commands , it must be that we have $ <var:O> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> + <nat:2> $ once program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:z> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \} \\ <var:h2> := <nat:5> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \} \\ <var:h2> := <var:h2> * <var:U> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> \} \\ <var:h2> := <var:h2> * <var:U> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> ^ <nat:2> \} \\ <var:h3> := <nat:2> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:h3> = <nat:2> \} \\ <var:h3> := <var:h3> * <var:U> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:h3> = <nat:2> \cdot <var:z> \} \\ <var:h3> := <var:h3> * <var:U> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:h3> = <nat:2> \cdot <var:z> ^ <nat:2> \} \\ <var:h3> := <var:h3> * <var:U> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:h3> = <nat:2> \cdot <var:z> ^ <nat:3> \} \\ <var:O> := <var:h3> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:h2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:O> = <nat:2> \cdot <var:z> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:h2> ; \\ \{ <var:U> = <var:z> \land <var:h0> = <nat:2> \land <var:O> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:h0> \\ \{ <var:U> = <var:z> \land <var:O> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:U> = <var:z> }} <var:h0> := <nat:2> ; <var:h2> := <nat:5> ; <var:h2> := <var:h2> * <var:U> ; <var:h2> := <var:h2> * <var:U> ; <var:h3> := <nat:2> ; <var:h3> := <var:h3> * <var:U> ; <var:h3> := <var:h3> * <var:U> ; <var:h3> := <var:h3> * <var:U> ; <var:O> := <var:h3> ; <var:O> := <var:O> + <var:h2> ; <var:O> := <var:O> + <var:h0> {{ <var:O> = <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:h3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:h2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:O> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:h0> = <nat:2> /\ <var:O> = <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:O> = <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 