\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:T> ; <var:l> := <var:R1> ; <var:l> := <var:l> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:T> = <var:j> $ prior to executing this list of instructions , then we have $ <var:l> = <nat:7> \cdot <var:j> + <nat:6> $ when code segment finishes . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:T> = <var:j> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:T> = <var:j> \land <var:R0> = <nat:6> \} \\ <var:R1> := <nat:7> ; \\ \{ <var:T> = <var:j> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \} \\ <var:R1> := <var:R1> * <var:T> ; \\ \{ <var:T> = <var:j> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> * <var:j> \} \\ <var:l> := <var:R1> ; \\ \{ <var:T> = <var:j> \land <var:R0> = <nat:6> \land <var:l> = <nat:7> * <var:j> \} \\ <var:l> := <var:l> + <var:R0> \\ \{ <var:T> = <var:j> \land <var:l> = <nat:7> * <var:j> + <nat:6> \} \end{eqnarray} Given the above , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:T> ; <var:l> := <var:R1> ; <var:l> := <var:l> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:T> = <var:j> }} <def:poly> {{ <var:l> = <nat:7> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:R0> = <nat:6> /\ <var:l> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:l> = <nat:7> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 