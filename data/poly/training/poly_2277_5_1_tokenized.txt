\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:K> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:9> ; <var:d> := <var:l1> <var:d> := <var:d> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:K> = <var:E> $ before interpreting the series of commands it follows that $ <var:d> = <nat:9> * <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the list of commands can be demonstrated using standard Hoare logic . Looking at the next line in the series of commands , we have \begin{eqnarray} \{ <var:K> = <var:E> \} \, <var:l1> := <var:K> \, \{ <var:K> = <var:E> \land <var:l1> = <var:E> \} \end{eqnarray} Considering the next piece of code seen in the code , we have \begin{eqnarray} \{ <var:K> = <var:E> \} \, <var:l1> := <var:K> \, \{ <var:K> = <var:E> \land <var:l1> = <var:E> \} \end{eqnarray} Considering the subsequent statements contained in the segment of code , we have \begin{eqnarray} \{ <var:K> = <var:E> \} \, <var:l1> := <var:K> \, \{ <var:K> = <var:E> \land <var:l1> = <var:E> \} \\ \{ <var:K> = <var:E> \land <var:l1> = <var:E> \} \, <var:l0> := <nat:3> \, \{ <var:K> = <var:E> \land <var:l1> = <var:E> \land <var:l0> = <nat:3> \} \\ \{ <var:K> = <var:E> \land <var:l1> = <var:E> \land <var:l0> = <nat:3> \} \, <var:l1> := <var:l1> * <nat:9> \, \{ <var:K> = <var:E> \land <var:l1> = <nat:9> \cdot <var:E> \land <var:l0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:K> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:9> ; <var:d> := <var:l1> <var:d> := <var:d> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:K> = <var:E> }} <def:poly> {{ <var:d> = <nat:9> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:l1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:l1> = <var:E> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:l1> = <nat:9> * <var:E> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:l0> = <nat:3> /\ <var:d> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:d> = <nat:9> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 