\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:R0> := <nat:8> ; <var:b> := <var:R0> \end{verbatim} Allowing , assuming some positive numbers $ <var:h> $ , it to hold that $ <var:Y> = <var:h> $ before running this series of commands , then we see $ <var:b> = <nat:8> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques yields : \begin{eqnarray} \{ <var:Y> = <var:h> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:Y> = <var:h> \land <var:R0> = <nat:8> \} \\ <var:b> := <var:R0> \\ \{ <var:Y> = <var:h> \land <var:b> = <nat:8> \} \end{eqnarray} Thus , our series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Y> = <var:h> }} <var:R0> := <nat:8> ; <var:b> := <var:R0> {{ <var:b> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:b> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 