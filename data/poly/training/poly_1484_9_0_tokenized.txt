\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:u0> := <nat:7> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:Q> ; <var:u2> := <nat:7> ; <var:u2> := <var:u2> * <var:Q> ; <var:u2> := <var:u2> * <var:Q> ; <var:r> := <var:u2> ; <var:r> := <var:r> + <var:u1> ; <var:r> := <var:r> + <var:u0> \end{verbatim} Allowing it to hold that $ <var:Q> = <var:q> $ ahead of running the set of instructions , then we have $ <var:r> = <nat:7> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> + <nat:7> $ . \end{theorem} \begin{proof} The application of Hoare logic produces : \begin{eqnarray} \{ <var:Q> = <var:q> \} \\ <var:u0> := <nat:7> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \} \\ <var:u1> := <nat:5> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \} \\ <var:u1> := <var:u1> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:q> \} \\ <var:u2> := <nat:7> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:q> \land <var:u2> = <nat:7> \} \\ <var:u2> := <var:u2> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:q> \land <var:u2> = <nat:7> \times <var:q> \} \\ <var:u2> := <var:u2> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:q> \land <var:u2> = <nat:7> \times <var:q> ^ <nat:2> \} \\ <var:r> := <var:u2> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \times <var:q> \land <var:r> = <nat:7> \times <var:q> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:u1> ; \\ \{ <var:Q> = <var:q> \land <var:u0> = <nat:7> \land <var:r> = <nat:7> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> \} \\ <var:r> := <var:r> + <var:u0> \\ \{ <var:Q> = <var:q> \land <var:r> = <nat:7> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> + <nat:7> \} \end{eqnarray} Given the above , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <var:u0> := <nat:7> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:Q> ; <var:u2> := <nat:7> ; <var:u2> := <var:u2> * <var:Q> ; <var:u2> := <var:u2> * <var:Q> ; <var:r> := <var:u2> ; <var:r> := <var:r> + <var:u1> ; <var:r> := <var:r> + <var:u0> {{ <var:r> = <nat:7> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:q> /\ <var:u2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:q> /\ <var:u2> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:q> /\ <var:u2> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:q> /\ <var:r> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:7> /\ <var:r> = <nat:7> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:r> = <nat:7> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 