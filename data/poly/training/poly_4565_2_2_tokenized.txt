\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:2> + <var:G> * <var:d> \end{verbatim} Assuming that $ <var:d> = <var:l> $ ahead of the evaluation of the segment of code , then $ <var:G> = <nat:4> \times <var:l> + <nat:2> $ after list of instructions exits . \end{theorem} \begin{proof} The argument for the code is shown by Hoare reasoning . Moving forward , we see \verb | { <var:d> = <var:l> } <var:G> := <nat:4> { <var:d> = <var:l> \land <var:G> = <nat:4> } | . This is guaranteed with the assignment law given in Hoare techniques . Next , we have \verb | { <var:d> = <var:l> } <var:G> := <nat:4> { <var:d> = <var:l> \land <var:G> = <nat:4> } | . This is sound through the assignment law obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <var:G> := <nat:4> ; <var:G> := <nat:2> + <var:G> * <var:d> {{ <var:G> = <nat:4> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:G> = <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 