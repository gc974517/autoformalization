\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:3> ; <var:M> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:C> = <var:P> $ ( for every $ <var:P> \in \mathbb{Z}^+ $ ) ahead of the execution of the segment of code then we see $ <var:M> = <nat:3> $ when list of commands has finished executing . \end{theorem} \begin{proof} The proof of our code is given through Hoare logic . Jumping to the following step found in our segment of code , the variable update line binding $ <nat:3> $ toward $ <var:V0>$ . This transfers the precondition $ \{ <var:C> = <var:P> \} $ to $ \{ <var:C> = <var:P> \land <var:V0> = <nat:3> \} $ . This is deduced using the assignment inference rule given by typical Hoare techniques . Keeping momentum , the environment update statement \verb | <var:M> := <var:V0> | . This forwards the precondition $ \{ <var:C> = <var:P> \land <var:V0> = <nat:3> \} $ toward $ \{ <var:C> = <var:P> \land <var:M> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:M> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:C> = <var:P> }} <def:poly> {{ <var:M> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:M> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 