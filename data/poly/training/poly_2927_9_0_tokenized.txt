\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:6> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:W> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:W> ; <var:n2> := <var:n2> * <var:W> ; <var:q> := <var:n2> ; <var:q> := <var:q> + <var:n1> ; <var:q> := <var:q> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:W> = <var:C> $ before running the list of instructions , it must be that we have $ <var:q> = <nat:1> \cdot <var:C> ^ <nat:2> + <nat:7> \cdot <var:C> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for this segment of code can be accomplished with Hoare techniques . Observing the proceeding statements contained in the segment of code , \begin{eqnarray} \{ <var:W> = <var:C> \} \, <var:n0> := <nat:6> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \} \, <var:n1> := <nat:7> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \} \, <var:n1> := <var:n1> * <var:W> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \} \, <var:n2> := <nat:1> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \land <var:n2> = <nat:1> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \land <var:n2> = <nat:1> \} \, <var:n2> := <var:n2> * <var:W> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \land <var:n2> = <nat:1> * <var:C> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \land <var:n2> = <nat:1> * <var:C> \} \, <var:n2> := <var:n2> * <var:W> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \land <var:n2> = <nat:1> * <var:C> ^ <nat:2> \} \end{eqnarray} Stepping forward , we see \begin{eqnarray} \{ <var:W> = <var:C> \} \, <var:n0> := <nat:6> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \} \, <var:n1> := <nat:7> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \} \\ \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \} \, <var:n1> := <var:n1> * <var:W> \, \{ <var:W> = <var:C> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> * <var:C> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:6> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:W> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:W> ; <var:n2> := <var:n2> * <var:W> ; <var:q> := <var:n2> ; <var:q> := <var:q> + <var:n1> ; <var:q> := <var:q> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:W> = <var:C> }} <def:poly> {{ <var:q> = <nat:1> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:C> /\ <var:n2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:C> /\ <var:n2> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:C> /\ <var:n2> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:C> /\ <var:q> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n0> = <nat:6> /\ <var:q> = <nat:1> * <var:C> ^ <nat:2> + <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:q> = <nat:1> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 