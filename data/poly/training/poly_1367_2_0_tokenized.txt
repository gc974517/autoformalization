\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:6> ; <var:U> := <var:W0> \end{verbatim} Allow it to hold that $ <var:k> = <var:Z> $ prior to interpreting this set of instructions it follows that $ <var:U> = <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for the program is accomplished with usual Hoare techniques . Honing in on the following line of code seen in our series of commands , the binding command giving $ <nat:6> $ to $ <var:W0>$ . This forwards $ \{ <var:k> = <var:Z> \} $ to $ \{ <var:k> = <var:Z> \land <var:W0> = <nat:6> \} $ . This is given through the assignment inference rule of usual Hoare reasoning . Immediately following , the binding statement \verb | <var:U> := <var:W0> | . This moves the precondition $ \{ <var:k> = <var:Z> \land <var:W0> = <nat:6> \} $ into the postcondition $ \{ <var:k> = <var:Z> \land <var:U> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:k> = <var:Z> }} <var:W0> := <nat:6> ; <var:U> := <var:W0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Z> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Z> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 