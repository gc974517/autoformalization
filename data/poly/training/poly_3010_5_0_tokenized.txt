\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:1> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:m> ; <var:Q> := <var:P1> ; <var:Q> := <var:Q> + <var:P0> \end{verbatim} Allowing it to hold that $ <var:m> = <var:R> $ ahead of running the program , it holds that $ <var:Q> = <nat:2> * <var:R> + <nat:1> $ once segment of code is done . \end{theorem} \begin{proof} The proof of the code segment can be seen with standard Hoare reasoning . Further , we see the variable update command \verb | <var:P0> := <nat:1> ; | . This forwards the condition $ \{ <var:m> = <var:R> \} $ toward the postcondition $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \} $ . This is guaranteed using the assignment law of typical Hoare reasoning . Jumping to the subsequent bit of code found in our code , the command \verb | <var:P1> := <nat:2> ; | . This forwards the condition $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \} $ as $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \land <var:P1> = <nat:2> \} $ . This is given through the assignment inference rule from usual Hoare reasoning . Following , we have the variable assignmet command letting $ <var:P1> * <var:m> $ into $ <var:P1>$ . This takes $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \land <var:P1> = <nat:2> \} $ toward $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \land <var:P1> = <nat:2> * <var:R> \} $ . This is ensured using the assignment law defined in usual Hoare reasoning . Jumping to the following statement found in our list of instructions , we see the variable binding command \verb | <var:Q> := <var:P1> ; | . This takes $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \land <var:P1> = <nat:2> * <var:R> \} $ into $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \land <var:Q> = <nat:2> * <var:R> \} $ . Moving onward , we see the variable assignmet command letting $ <var:Q> + <var:P0$ into $ <var:Q>$ . This code forwards the condition $ \{ <var:m> = <var:R> \land <var:P0> = <nat:1> \land <var:Q> = <nat:2> * <var:R> \} $ toward $ \{ <var:m> = <var:R> \land <var:Q> = <nat:2> * <var:R> + <nat:1> \} $ . This is sound using the assignment scheme in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:m> = <var:R> }} <var:P0> := <nat:1> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:m> ; <var:Q> := <var:P1> ; <var:Q> := <var:Q> + <var:P0> {{ <var:Q> = <nat:2> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:P0> = <nat:1> /\ <var:Q> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:Q> = <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 