\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:r> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:r> ; <var:o2> := <var:o2> * <var:r> ; <var:v> := <var:o2> ; <var:v> := <var:v> + <var:o1> ; <var:v> := <var:v> + <var:o0> \end{verbatim} Assume $ <var:r> = <var:l> $ taking positive coefficients $ <var:l> $ ahead of evaluating our list of instructions then we see $ <var:v> = <nat:3> \times <var:l> ^ <nat:2> + <nat:7> \times <var:l> + <nat:3> $ after list of commands exits . \end{theorem} \begin{proof} The course of logic for the list of commands can be shown with typical Hoare logic . Now , \[ \begin{tabular} {rcl} \{ <var:r> = <var:l> \} & <var:o0> := <nat:3> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \} & <var:o1> := <nat:7> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> \} & <var:o1> := <var:o1> * <var:r> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \} & <var:o2> := <nat:3> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:o2> = <nat:3> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:o2> = <nat:3> \} & <var:o2> := <var:o2> * <var:r> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:o2> = <nat:3> * <var:l> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:o2> = <nat:3> * <var:l> \} & <var:o2> := <var:o2> * <var:r> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:o2> = <nat:3> * <var:l> ^ <nat:2> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:o2> = <nat:3> * <var:l> ^ <nat:2> \} & <var:v> := <var:o2> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:v> = <nat:3> * <var:l> ^ <nat:2> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:o1> = <nat:7> * <var:l> \land <var:v> = <nat:3> * <var:l> ^ <nat:2> \} & <var:v> := <var:v> + <var:o1> & \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:v> = <nat:3> * <var:l> ^ <nat:2> + <nat:7> * <var:l> \} \\ \{ <var:r> = <var:l> \land <var:o0> = <nat:3> \land <var:v> = <nat:3> * <var:l> ^ <nat:2> + <nat:7> * <var:l> \} & <var:v> := <var:v> + <var:o0& \{ <var:r> = <var:l> \land <var:v> = <nat:3> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:r> = <var:l> }} <var:o0> := <nat:3> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:r> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:r> ; <var:o2> := <var:o2> * <var:r> ; <var:v> := <var:o2> ; <var:v> := <var:v> + <var:o1> ; <var:v> := <var:v> + <var:o0> {{ <var:v> = <nat:3> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:7> * <var:l> /\ <var:o2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:7> * <var:l> /\ <var:o2> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:7> * <var:l> /\ <var:o2> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:7> * <var:l> /\ <var:v> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:o0> = <nat:3> /\ <var:v> = <nat:3> * <var:l> ^ <nat:2> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:v> = <nat:3> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 