\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:k1> := <var:z> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:5> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> \end{verbatim} Assuming it to be that $ <var:z> = <var:J> $ ahead of running the segment of code it must be that $ <var:n> = <nat:5> * <var:J> + <nat:9> $ once segment of code has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions can be demonstrated through typical Hoare logic . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:z> = <var:J> \} & <var:k1> := <var:z> & \{ <var:z> = <var:J> \land <var:k1> = <var:J> \} \\ \{ <var:z> = <var:J> \land <var:k1> = <var:J> \} & <var:k0> := <nat:9> & \{ <var:z> = <var:J> \land <var:k1> = <var:J> \land <var:k0> = <nat:9> \} \\ \{ <var:z> = <var:J> \land <var:k1> = <var:J> \land <var:k0> = <nat:9> \} & <var:k1> := <var:k1> * <nat:5> & \{ <var:z> = <var:J> \land <var:k1> = <nat:5> * <var:J> \land <var:k0> = <nat:9> \} \\ \{ <var:z> = <var:J> \land <var:k1> = <nat:5> * <var:J> \land <var:k0> = <nat:9> \} & <var:n> := <var:k1& \{ <var:z> = <var:J> \land <var:k0> = <nat:9> \land <var:n> = <nat:5> * <var:J> \} \end{tabular} Going forward , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:J> \} & <var:k1> := <var:z> & \{ <var:z> = <var:J> \land <var:k1> = <var:J> \} \end{tabular} This is ensured by the variable binding rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <var:k1> := <var:z> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:5> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> {{ <var:n> = <nat:5> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:k1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:k1> = <var:J> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:k1> = <nat:5> * <var:J> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:k0> = <nat:9> /\ <var:n> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:n> = <nat:5> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 