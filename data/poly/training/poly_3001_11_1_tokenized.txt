\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G3> := <var:G2> * <var:E> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:5> ; <var:n> := <var:G3> <var:n> := <var:n> + <var:G2> <var:n> := <var:n> + <var:G1> <var:n> := <var:n> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Allowing $ <var:E> = <var:z> $ ahead of executing our list of commands then we see $ <var:n> = <nat:5> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:5> $ when list of commands is done executing . \end{theorem} \begin{proof} The method of proof for our segment of code can be demonstrated using typical Hoare logic . Stepping forward , we see the binding code assigning $ <var:E> $ to $ <var:G1>$ . This command moves the condition $ \{ <var:E> = <var:z> \} $ into the postcondition $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \} $ . Taking another step toward the next piece of code found in the set of instructions , we see the variable binding command \verb | <var:G2> := <var:G1> * <var:E> ; | . This command transfers the precondition $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \} $ as the postcondition $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \} $ . Going forward , we have the variable assignmet statement \verb | <var:G3> := <var:G2> * <var:E> ; | . This statement transfers the precondition $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \} $ into the condition $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \} $ . This is ensured through the assignment inference rule given by usual Hoare reasoning . Moving forward to the proceeding command found in the set of commands , we have the variable update code giving $ <nat:5> $ to $ <var:G0>$ . This redefines $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \} $ as $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . Immediately following , we see the statement \verb | <var:G1> := <var:G1> * <nat:1> ; | . This code redefines $ \{ <var:E> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ as the condition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . Taking a look at the proceeding line in the series of commands , we see the environment update line \verb | <var:G2> := <var:G2> * <nat:2> ; | . This statement redefines the precondition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ as the postcondition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . This is known to be sound with the assignment scheme defined by usual Hoare logic . Taking a look at the next statement in the code segment , the environment update command \verb | <var:G3> := <var:G3> * <nat:5> ; | . This advances the precondition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ as the condition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:G3> = <nat:5> \times <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . This is sound with the assignment scheme found in usual Hoare reasoning . Immediately after , we have the environment update line \verb | <var:n> := <var:G3> | . This line moves the condition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:G3> = <nat:5> \times <var:z> ^ <nat:3> \land <var:G0> = <nat:5> \} $ toward the condition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:G0> = <nat:5> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> \} $ . This is shown through the assignment rule defined in standard Hoare logic . Honing in on the next command seen in the list of commands , the variable update code \verb | <var:n> := <var:n> + <var:G2> | . This code advances $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:G0> = <nat:5> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> \} $ to the postcondition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G0> = <nat:5> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> \} $ . This is deduced through the assignment law found in Hoare logic . Moving forward to the proceeding statement in our list of instructions , we have the assignment line giving $ <var:n> + <var:G1$ into $ <var:n>$ . This command takes the condition $ \{ <var:E> = <var:z> \land <var:G1> = <nat:1> \times <var:z> \land <var:G0> = <nat:5> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> \} $ to the condition $ \{ <var:E> = <var:z> \land <var:G0> = <nat:5> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> \} $ . This is deduced by the assignment scheme in typical Hoare logic . Moving forward , the variable binding line \verb | <var:n> := <var:n> + <var:G0> | . This forwards the precondition $ \{ <var:E> = <var:z> \land <var:G0> = <nat:5> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> \} $ as the condition $ \{ <var:E> = <var:z> \land <var:n> = <nat:5> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G3> := <var:G2> * <var:E> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:5> ; <var:n> := <var:G3> <var:n> := <var:n> + <var:G2> <var:n> := <var:n> + <var:G1> <var:n> := <var:n> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:E> = <var:z> }} <def:poly> {{ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <nat:1> * <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <nat:1> * <var:z> /\ <var:G2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <nat:1> * <var:z> /\ <var:G2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:G3> = <nat:5> * <var:z> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <nat:1> * <var:z> /\ <var:G2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:G0> = <nat:5> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G1> = <nat:1> * <var:z> /\ <var:G0> = <nat:5> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:G0> = <nat:5> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:z> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 