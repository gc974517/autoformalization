\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:i> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:3> ; <var:T> := <var:u1> <var:T> := <var:T> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Assuming , given any whole numbers $ <var:o> $ , it to be that $ <var:i> = <var:o> $ prior to the evaluation of this set of commands it must be that we have $ <var:T> = <nat:3> * <var:o> + <nat:9> $ . \end{theorem} \begin{proof} The argument for this set of commands can be accomplished with Hoare logic . Stepping through , we see \begin{eqnarray} \{ <var:i> = <var:o> \} \, <var:u1> := <var:i> \, \{ <var:i> = <var:o> \land <var:u1> = <var:o> \} \\ \{ <var:i> = <var:o> \land <var:u1> = <var:o> \} \, <var:u0> := <nat:9> \, \{ <var:i> = <var:o> \land <var:u1> = <var:o> \land <var:u0> = <nat:9> \} \\ \{ <var:i> = <var:o> \land <var:u1> = <var:o> \land <var:u0> = <nat:9> \} \, <var:u1> := <var:u1> * <nat:3> \, \{ <var:i> = <var:o> \land <var:u1> = <nat:3> \times <var:o> \land <var:u0> = <nat:9> \} \end{eqnarray} Stepping forward , we see \begin{eqnarray} \{ <var:i> = <var:o> \} \, <var:u1> := <var:i> \, \{ <var:i> = <var:o> \land <var:u1> = <var:o> \} \end{eqnarray} This is rigorously given through the binding law from standard Hoare techniques . Taking another step toward the subsequent command in the program , we see \begin{eqnarray} \{ <var:i> = <var:o> \} \, <var:u1> := <var:i> \, \{ <var:i> = <var:o> \land <var:u1> = <var:o> \} \end{eqnarray} This is deduced by the assignment inference rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:i> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:3> ; <var:T> := <var:u1> <var:T> := <var:T> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:i> = <var:o> }} <def:poly> {{ <var:T> = <nat:3> * <var:o> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:u1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:u1> = <var:o> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:u1> = <nat:3> * <var:o> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:u0> = <nat:9> /\ <var:T> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:T> = <nat:3> * <var:o> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 