\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:I1> := <var:Y> ; <var:I0> := <nat:5> ; <var:I1> := <var:I1> * <nat:7> ; <var:h> := <var:I1> <var:h> := <var:h> + <var:I0> \end{verbatim} Assume that we have $ <var:Y> = <var:v> $ ahead of running this set of instructions it holds that we have $ <var:h> = <nat:7> \times <var:v> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be shown with the following decorated series of instructions . \begin{eqnarray} \{ <var:Y> = <var:v> \} \\ <var:I1> := <var:Y> ; \\ \{ <var:Y> = <var:v> \land <var:I1> = <var:v> \} \\ <var:I0> := <nat:5> ; \\ \{ <var:Y> = <var:v> \land <var:I1> = <var:v> \land <var:I0> = <nat:5> \} \\ <var:I1> := <var:I1> * <nat:7> ; \\ \{ <var:Y> = <var:v> \land <var:I1> = <nat:7> \times <var:v> \land <var:I0> = <nat:5> \} \\ <var:h> := <var:I1> \\ \{ <var:Y> = <var:v> \land <var:I0> = <nat:5> \land <var:h> = <nat:7> \times <var:v> \} \\ <var:h> := <var:h> + <var:I0> \\ \{ <var:Y> = <var:v> \land <var:h> = <nat:7> \times <var:v> + <nat:5> \} \end{eqnarray} Utilizing typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Y> = <var:v> }} <var:I1> := <var:Y> ; <var:I0> := <nat:5> ; <var:I1> := <var:I1> * <nat:7> ; <var:h> := <var:I1> <var:h> := <var:h> + <var:I0> {{ <var:h> = <nat:7> * <var:v> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:I1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:I1> = <var:v> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:I1> = <nat:7> * <var:v> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:I0> = <nat:5> /\ <var:h> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:h> = <nat:7> * <var:v> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 