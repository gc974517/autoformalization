\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:e0> := <nat:6> ; <var:K> := <var:e0> \end{verbatim} Allowing $ <var:d> = <var:h> $ before evaluating the code segment , it must be that we see $ <var:K> = <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands can be accomplished through typical Hoare logic . Observing the subsequent command contained in the program , the statement defining $ <nat:6> $ to $ <var:e0>$ . This command transfers the condition $ \{ <var:d> = <var:h> \} $ toward the condition $ \{ <var:d> = <var:h> \land <var:e0> = <nat:6> \} $ . Advancing , the variable binding line defining $ <var:e0$ toward $ <var:K>$ . This redefines the condition $ \{ <var:d> = <var:h> \land <var:e0> = <nat:6> \} $ to the condition $ \{ <var:d> = <var:h> \land <var:K> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:d> = <var:h> }} <var:e0> := <nat:6> ; <var:K> := <var:e0> {{ <var:K> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:h> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:h> /\ <var:K> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 