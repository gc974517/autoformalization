\begin{document} \begin{theorem} Consider the following code segment as follows \begin{verbatim} <var:T1> := <var:a> ; <var:T2> := <var:T1> * <var:a> ; <var:T3> := <var:T2> * <var:a> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:1> ; <var:S> := <var:T3> <var:S> := <var:S> + <var:T2> <var:S> := <var:S> + <var:T1> <var:S> := <var:S> + <var:T0> \end{verbatim} Given --- for any positive integer coefficients $ <var:D> $ --- that $ <var:a> = <var:D> $ prior to interpreting our set of instructions , then we have $ <var:S> = <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be shown by typical Hoare logic . Considering the subsequent bits of codefound in our code , we have \begin{eqnarray} \{ <var:a> = <var:D> \} \, <var:T1> := <var:a> \, \{ <var:a> = <var:D> \land <var:T1> = <var:D> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <var:D> \} \, <var:T2> := <var:T1> * <var:a> \, \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \} \, <var:T3> := <var:T2> * <var:a> \, \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \} \, <var:T0> := <nat:4> \, \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \, <var:T1> := <var:T1> * <nat:4> \, \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \, <var:T2> := <var:T2> * <nat:2> \, \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <nat:2> * <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <nat:2> * <var:D> ^ <nat:2> \land <var:T3> = <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \, <var:T3> := <var:T3> * <nat:1> \, \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <nat:2> * <var:D> ^ <nat:2> \land <var:T3> = <nat:1> * <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <nat:2> * <var:D> ^ <nat:2> \land <var:T3> = <nat:1> * <var:D> ^ <nat:3> \land <var:T0> = <nat:4> \} \, <var:S> := <var:T3\, \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <nat:2> * <var:D> ^ <nat:2> \land <var:T0> = <nat:4> \land <var:S> = <nat:1> * <var:D> ^ <nat:3> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T2> = <nat:2> * <var:D> ^ <nat:2> \land <var:T0> = <nat:4> \land <var:S> = <nat:1> * <var:D> ^ <nat:3> \} \, <var:S> := <var:S> + <var:T2\, \{ <var:a> = <var:D> \land <var:T1> = <nat:4> * <var:D> \land <var:T0> = <nat:4> \land <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> \} \end{eqnarray} This is rigorously given by the environment update law from usual Hoare reasoning . Taking another step toward the next pieces of code seen in the list of commands , \begin{eqnarray} \{ <var:a> = <var:D> \} \, <var:T1> := <var:a> \, \{ <var:a> = <var:D> \land <var:T1> = <var:D> \} \\ \{ <var:a> = <var:D> \land <var:T1> = <var:D> \} \, <var:T2> := <var:T1> * <var:a> \, \{ <var:a> = <var:D> \land <var:T1> = <var:D> \land <var:T2> = <var:D> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:a> = <var:D> }} <var:T1> := <var:a> ; <var:T2> := <var:T1> * <var:a> ; <var:T3> := <var:T2> * <var:a> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:1> ; <var:S> := <var:T3> <var:S> := <var:S> + <var:T2> <var:S> := <var:S> + <var:T1> <var:S> := <var:S> + <var:T0> {{ <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <var:D> /\ <var:T2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <var:D> /\ <var:T2> = <var:D> ^ <nat:2> /\ <var:T3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <var:D> /\ <var:T2> = <var:D> ^ <nat:2> /\ <var:T3> = <var:D> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <nat:4> * <var:D> /\ <var:T2> = <var:D> ^ <nat:2> /\ <var:T3> = <var:D> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <nat:4> * <var:D> /\ <var:T2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:T3> = <var:D> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <nat:4> * <var:D> /\ <var:T2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <nat:4> * <var:D> /\ <var:T2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:T0> = <nat:4> /\ <var:S> = <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T1> = <nat:4> * <var:D> /\ <var:T0> = <nat:4> /\ <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:T0> = <nat:4> /\ <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 