\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:n> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:2> ; <var:d> := <var:N1> <var:d> := <var:d> + <var:N0> \end{verbatim} Assuming that we have $ <var:n> = <var:a> $ ( given some positive integer coefficients $ <var:a> $ ) prior to interpreting the set of commands it must be that $ <var:d> = <nat:2> * <var:a> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this list of commands can be seen using usual Hoare techniques . Moving on , the assignment line letting $ <var:n> $ to $ <var:N1>$ . This moves the precondition $ \{ <var:n> = <var:a> \} $ as the condition $ \{ <var:n> = <var:a> \land <var:N1> = <var:a> \} $ . Advancing to the next step , we have the variable update line \verb | <var:N0> := <nat:2> ; | . This command advances $ \{ <var:n> = <var:a> \land <var:N1> = <var:a> \} $ into the postcondition $ \{ <var:n> = <var:a> \land <var:N1> = <var:a> \land <var:N0> = <nat:2> \} $ . This is known to be sound by the assignment inference rule from standard Hoare techniques . Honing in on the following command in our series of instructions , we have the variable assignmet line \verb | <var:N1> := <var:N1> * <nat:2> ; | . This code transfers the precondition $ \{ <var:n> = <var:a> \land <var:N1> = <var:a> \land <var:N0> = <nat:2> \} $ toward the postcondition $ \{ <var:n> = <var:a> \land <var:N1> = <nat:2> * <var:a> \land <var:N0> = <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule in typical Hoare logic . Shifting focus toward the following line of code contained in the program , we see the assignment command defining $ <var:N1$ to $ <var:d>$ . This redefines the precondition $ \{ <var:n> = <var:a> \land <var:N1> = <nat:2> * <var:a> \land <var:N0> = <nat:2> \} $ into the postcondition $ \{ <var:n> = <var:a> \land <var:N0> = <nat:2> \land <var:d> = <nat:2> * <var:a> \} $ . Honing in on the proceeding line of code contained in the program , we see the binding line \verb | <var:d> := <var:d> + <var:N0> | . This statement takes the precondition $ \{ <var:n> = <var:a> \land <var:N0> = <nat:2> \land <var:d> = <nat:2> * <var:a> \} $ to the postcondition $ \{ <var:n> = <var:a> \land <var:d> = <nat:2> * <var:a> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:n> = <var:a> }} <var:N1> := <var:n> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:2> ; <var:d> := <var:N1> <var:d> := <var:d> + <var:N0> {{ <var:d> = <nat:2> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:N1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:N1> = <var:a> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:N1> = <nat:2> * <var:a> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:N0> = <nat:2> /\ <var:d> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:d> = <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 