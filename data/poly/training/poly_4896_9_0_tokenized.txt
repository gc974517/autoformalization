\begin{document} \begin{theorem} Consider the following program in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:8> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:l> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:l> ; <var:n2> := <var:n2> * <var:l> ; <var:u> := <var:n2> ; <var:u> := <var:u> + <var:n1> ; <var:u> := <var:u> + <var:n0> \end{verbatim} Assuming it to be that $ <var:l> = <var:g> $ before executing the list of instructions , it must be that we have $ <var:u> = <nat:5> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:8> $ . \end{theorem} \begin{proof} Let the following decorated program . \begin{eqnarray} \{ <var:l> = <var:g> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:l> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \times <var:g> \} \\ <var:n2> := <nat:5> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \times <var:g> \land <var:n2> = <nat:5> \} \\ <var:n2> := <var:n2> * <var:l> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \times <var:g> \land <var:n2> = <nat:5> \times <var:g> \} \\ <var:n2> := <var:n2> * <var:l> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \times <var:g> \land <var:n2> = <nat:5> \times <var:g> ^ <nat:2> \} \\ <var:u> := <var:n2> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \times <var:g> \land <var:u> = <nat:5> \times <var:g> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:n1> ; \\ \{ <var:l> = <var:g> \land <var:n0> = <nat:8> \land <var:u> = <nat:5> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> \} \\ <var:u> := <var:u> + <var:n0> \\ \{ <var:l> = <var:g> \land <var:u> = <nat:5> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:8> \} \end{eqnarray} The application of Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:l> = <var:g> }} <var:n0> := <nat:8> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:l> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:l> ; <var:n2> := <var:n2> * <var:l> ; <var:u> := <var:n2> ; <var:u> := <var:u> + <var:n1> ; <var:u> := <var:u> + <var:n0> {{ <var:u> = <nat:5> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> * <var:g> /\ <var:n2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> * <var:g> /\ <var:n2> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> * <var:g> /\ <var:n2> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> * <var:g> /\ <var:u> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n0> = <nat:8> /\ <var:u> = <nat:5> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:u> = <nat:5> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 