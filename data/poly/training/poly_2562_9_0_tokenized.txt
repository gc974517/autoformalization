\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:5> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:A> ; <var:O2> := <nat:7> ; <var:O2> := <var:O2> * <var:A> ; <var:O2> := <var:O2> * <var:A> ; <var:v> := <var:O2> ; <var:v> := <var:v> + <var:O1> ; <var:v> := <var:v> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allow it to be that $ <var:A> = <var:l> $ before running the program , it must be that we have $ <var:v> = <nat:7> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:l> \} \\ <var:O0> := <nat:5> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \} \end{eqnarray} Allowing evaluating the segment of code yields : \begin{eqnarray} <var:O1> := <nat:4> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> \} \\ <var:O1> := <var:O1> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> * <var:l> \} \\ <var:O2> := <nat:7> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> * <var:l> \land <var:O2> = <nat:7> \} \\ <var:O2> := <var:O2> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> * <var:l> \land <var:O2> = <nat:7> * <var:l> \} \\ <var:O2> := <var:O2> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> * <var:l> \land <var:O2> = <nat:7> * <var:l> ^ <nat:2> \} \\ <var:v> := <var:O2> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:O1> = <nat:4> * <var:l> \land <var:v> = <nat:7> * <var:l> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:O1> ; \\ \{ <var:A> = <var:l> \land <var:O0> = <nat:5> \land <var:v> = <nat:7> * <var:l> ^ <nat:2> + <nat:4> * <var:l> \} \\ <var:v> := <var:v> + <var:O0> \\ \{ <var:A> = <var:l> \land <var:v> = <nat:7> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:5> \} \end{eqnarray} Hence , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:5> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:A> ; <var:O2> := <nat:7> ; <var:O2> := <var:O2> * <var:A> ; <var:O2> := <var:O2> * <var:A> ; <var:v> := <var:O2> ; <var:v> := <var:v> + <var:O1> ; <var:v> := <var:v> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:A> = <var:l> }} <def:poly> {{ <var:v> = <nat:7> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> * <var:l> /\ <var:O2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> * <var:l> /\ <var:O2> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> * <var:l> /\ <var:O2> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:4> * <var:l> /\ <var:v> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:O0> = <nat:5> /\ <var:v> = <nat:7> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v> = <nat:7> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 