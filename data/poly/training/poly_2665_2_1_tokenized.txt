\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:1> ; <var:n> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Allowing that we have $ <var:T> = <var:Q> $ prior to the evaluation of our list of instructions , it holds that we see $ <var:n> = <nat:1> $ once series of commands has finished executing . \end{theorem} \begin{proof} The proof of our series of commands can be demonstrated through usual Hoare techniques . Advancing to the subsequent lines of codefound in the program , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:Q> \} & <var:P0> := <nat:1> & \{ <var:T> = <var:Q> \land <var:P0> = <nat:1> \} \\ \{ <var:T> = <var:Q> \land <var:P0> = <nat:1> \} & <var:n> := <var:P0& \{ <var:T> = <var:Q> \land <var:n> = <nat:1> \} \end{tabular} This is known to be sound with the binding law given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:1> ; <var:n> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:T> = <var:Q> }} <def:poly> {{ <var:n> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:n> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 