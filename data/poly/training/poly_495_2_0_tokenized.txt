\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:W0> := <nat:3> ; <var:c> := <var:W0> \end{verbatim} Given that $ <var:T> = <var:Z> $ given every integers $ <var:Z> $ ahead of executing our code segment , it holds that $ <var:c> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:Z> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:T> = <var:Z> \land <var:W0> = <nat:3> \} \\ <var:c> := <var:W0> \\ \{ <var:T> = <var:Z> \land <var:c> = <nat:3> \} \end{eqnarray} The application of usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <var:W0> := <nat:3> ; <var:c> := <var:W0> {{ <var:c> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 