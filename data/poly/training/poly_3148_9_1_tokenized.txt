\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:y> ; <var:Z2> := <var:Z1> * <var:y> ; <var:Z3> := <var:Z2> * <var:y> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z3> := <var:Z3> * <nat:7> ; <var:v> := <var:Z3> <var:v> := <var:v> + <var:Z1> <var:v> := <var:v> + <var:Z0> \end{verbatim} Assume it to be that $ <var:y> = <var:j> $ prior to evaluating our program , it follows that we have $ <var:v> = <nat:7> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> + <nat:7> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:y> = <var:j> \} \\ <var:Z1> := <var:y> ; \\ \{ <var:y> = <var:j> \land <var:Z1> = <var:j> \} \\ <var:Z2> := <var:Z1> * <var:y> ; \\ \{ <var:y> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:y> ; \\ \{ <var:y> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:y> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z1> := <var:Z1> * <nat:2> ; \\ \{ <var:y> = <var:j> \land <var:Z1> = <nat:2> \times <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z3> := <var:Z3> * <nat:7> ; \\ \{ <var:y> = <var:j> \land <var:Z1> = <nat:2> \times <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <nat:7> \times <var:j> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:v> := <var:Z3> \\ \{ <var:y> = <var:j> \land <var:Z1> = <nat:2> \times <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z0> = <nat:7> \land <var:v> = <nat:7> \times <var:j> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:Z1> \\ \{ <var:y> = <var:j> \land <var:Z0> = <nat:7> \land <var:v> = <nat:7> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> \} \\ <var:v> := <var:v> + <var:Z0> \\ \{ <var:y> = <var:j> \land <var:v> = <nat:7> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> + <nat:7> \} \end{eqnarray} Given the above , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:y> = <var:j> }} <var:Z1> := <var:y> ; <var:Z2> := <var:Z1> * <var:y> ; <var:Z3> := <var:Z2> * <var:y> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z3> := <var:Z3> * <nat:7> ; <var:v> := <var:Z3> <var:v> := <var:v> + <var:Z1> <var:v> := <var:v> + <var:Z0> {{ <var:v> = <nat:7> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <nat:2> * <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <nat:2> * <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:j> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z1> = <nat:2> * <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z0> = <nat:7> /\ <var:v> = <nat:7> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:Z0> = <nat:7> /\ <var:v> = <nat:7> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:v> = <nat:7> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 