\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:1> ; <var:m> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for every positive integers $ <var:x> $ , it to hold that $ <var:D> = <var:x> $ ahead of running this series of instructions it follows that we have $ <var:m> = <nat:1> $ after code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:x> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:D> = <var:x> \land <var:g0> = <nat:1> \} \\ <var:m> := <var:g0> \\ \{ <var:D> = <var:x> \land <var:m> = <nat:1> \} \end{eqnarray} Applying Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:m> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:D> = <var:x> }} <def:poly> {{ <var:m> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:m> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 