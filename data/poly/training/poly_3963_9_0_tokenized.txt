\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:k> ; <var:t2> := <nat:6> ; <var:t2> := <var:t2> * <var:k> ; <var:t2> := <var:t2> * <var:k> ; <var:I> := <var:t2> ; <var:I> := <var:I> + <var:t1> ; <var:I> := <var:I> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:k> = <var:g> $ assuming some positive integer coefficients $ <var:g> $ prior to executing the code segment it must be that $ <var:I> = <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:3> $ once code segment exits . \end{theorem} \begin{proof} The argument for this series of instructions can be seen through Hoare logic . Moving on to the subsequent line contained in the series of instructions , the variable assignmet command \verb | <var:t0> := <nat:3> ; | . This code redefines the precondition $ \{ <var:k> = <var:g> \} $ into the condition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \} $ . Honing in on the upcoming line in our program , the variable assignmet code \verb | <var:t1> := <nat:8> ; | . This forwards the condition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \} $ toward the postcondition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \} $ . Honing in on the upcoming step in the segment of code , we have the variable update command \verb | <var:t1> := <var:t1> * <var:k> ; | . This takes the condition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \} $ into $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \} $ . This is known to be sound by the assignment law in standard Hoare techniques . Shifting focus toward the upcoming line in the set of commands , the binding code letting $ <nat:6> $ as $ <var:t2>$ . This moves the condition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \} $ as the condition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:t2> = <nat:6> \} $ . Advancing to the proceeding piece of code in our set of commands , we have the variable update command assigning $ <var:t2> * <var:k> $ as $ <var:t2>$ . This line redefines the precondition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:t2> = <nat:6> \} $ to the postcondition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:t2> = <nat:6> \times <var:g> \} $ . This is rigorously given with the assignment scheme given by standard Hoare logic . Next , the variable binding code assigning $ <var:t2> * <var:k> $ toward $ <var:t2>$ . This code transfers the condition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:t2> = <nat:6> \times <var:g> \} $ into the postcondition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:t2> = <nat:6> \times <var:g> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule given in typical Hoare reasoning . Moving on to the proceeding statement seen in our set of instructions , we see the variable assignmet statement assigning $ <var:t2> $ to $ <var:I>$ . This line forwards $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:t2> = <nat:6> \times <var:g> ^ <nat:2> \} $ to $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:I> = <nat:6> \times <var:g> ^ <nat:2> \} $ . Moving on to the subsequent line contained in our series of commands , we see the binding statement \verb | <var:I> := <var:I> + <var:t1> ; | . This redefines $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \times <var:g> \land <var:I> = <nat:6> \times <var:g> ^ <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:I> = <nat:6> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> \} $ . This is shown through the assignment law found in usual Hoare techniques . Stepping through , we see the variable binding command giving $ <var:I> + <var:t0$ toward $ <var:I>$ . This redefines $ \{ <var:k> = <var:g> \land <var:t0> = <nat:3> \land <var:I> = <nat:6> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> \} $ into $ \{ <var:k> = <var:g> \land <var:I> = <nat:6> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> + <nat:3> \} $ . This is guaranteed by the assignment inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:k> ; <var:t2> := <nat:6> ; <var:t2> := <var:t2> * <var:k> ; <var:t2> := <var:t2> * <var:k> ; <var:I> := <var:t2> ; <var:I> := <var:I> + <var:t1> ; <var:I> := <var:I> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:k> = <var:g> }} <def:poly> {{ <var:I> = <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:g> /\ <var:t2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:g> /\ <var:t2> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:g> /\ <var:t2> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:g> /\ <var:I> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:t0> = <nat:3> /\ <var:I> = <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:I> = <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 