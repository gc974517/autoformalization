\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:4> ; <var:h> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:P> = <var:m> $ ahead of interpreting the program , it follows that we have $ <var:h> = <nat:4> $ after series of instructions has finished . \end{theorem} \begin{proof} The application of Hoare logic yields : \begin{eqnarray} \{ <var:P> = <var:m> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:P> = <var:m> \land <var:Q0> = <nat:4> \} \\ <var:h> := <var:Q0> \\ \{ <var:P> = <var:m> \land <var:h> = <nat:4> \} \end{eqnarray} As a result , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:h> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:P> = <var:m> }} <def:poly> {{ <var:h> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:h> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 