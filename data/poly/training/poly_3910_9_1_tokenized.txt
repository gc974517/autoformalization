\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:Q> ; <var:P2> := <var:P1> * <var:Q> ; <var:P3> := <var:P2> * <var:Q> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:9> ; <var:P3> := <var:P3> * <nat:9> ; <var:L> := <var:P3> <var:L> := <var:L> + <var:P1> <var:L> := <var:L> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume , assuming some integers $ <var:t> $ , it to be that $ <var:Q> = <var:t> $ ahead of executing our code , it follows that $ <var:L> = <nat:9> \times <var:t> ^ <nat:3> + <nat:9> \times <var:t> + <nat:3> $ once program is done executing . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:Q> = <var:t> \} \\ <var:P1> := <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:P1> = <var:t> \} \\ <var:P2> := <var:P1> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:P1> = <var:t> \land <var:P2> = <var:t> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:P1> = <var:t> \land <var:P2> = <var:t> ^ <nat:2> \land <var:P3> = <var:t> ^ <nat:3> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:Q> = <var:t> \land <var:P1> = <var:t> \land <var:P2> = <var:t> ^ <nat:2> \land <var:P3> = <var:t> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P1> := <var:P1> * <nat:9> ; \\ \{ <var:Q> = <var:t> \land <var:P1> = <nat:9> \times <var:t> \land <var:P2> = <var:t> ^ <nat:2> \land <var:P3> = <var:t> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P3> := <var:P3> * <nat:9> ; \\ \{ <var:Q> = <var:t> \land <var:P1> = <nat:9> \times <var:t> \land <var:P2> = <var:t> ^ <nat:2> \land <var:P3> = <nat:9> \times <var:t> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:L> := <var:P3> \\ \{ <var:Q> = <var:t> \land <var:P1> = <nat:9> \times <var:t> \land <var:P2> = <var:t> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:L> = <nat:9> \times <var:t> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:P1> \\ \{ <var:Q> = <var:t> \land <var:P0> = <nat:3> \land <var:L> = <nat:9> \times <var:t> ^ <nat:3> + <nat:9> \times <var:t> \} \\ <var:L> := <var:L> + <var:P0> \\ \{ <var:Q> = <var:t> \land <var:L> = <nat:9> \times <var:t> ^ <nat:3> + <nat:9> \times <var:t> + <nat:3> \} \end{eqnarray} Hence , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:Q> ; <var:P2> := <var:P1> * <var:Q> ; <var:P3> := <var:P2> * <var:Q> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:9> ; <var:P3> := <var:P3> * <nat:9> ; <var:L> := <var:P3> <var:L> := <var:L> + <var:P1> <var:L> := <var:L> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Q> = <var:t> }} <def:poly> {{ <var:L> = <nat:9> * <var:t> ^ <nat:3> + <nat:9> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <var:t> /\ <var:P2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <var:t> /\ <var:P2> = <var:t> ^ <nat:2> /\ <var:P3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <var:t> /\ <var:P2> = <var:t> ^ <nat:2> /\ <var:P3> = <var:t> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <nat:9> * <var:t> /\ <var:P2> = <var:t> ^ <nat:2> /\ <var:P3> = <var:t> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <nat:9> * <var:t> /\ <var:P2> = <var:t> ^ <nat:2> /\ <var:P3> = <nat:9> * <var:t> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P1> = <nat:9> * <var:t> /\ <var:P2> = <var:t> ^ <nat:2> /\ <var:P0> = <nat:3> /\ <var:L> = <nat:9> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:P0> = <nat:3> /\ <var:L> = <nat:9> * <var:t> ^ <nat:3> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:L> = <nat:9> * <var:t> ^ <nat:3> + <nat:9> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 