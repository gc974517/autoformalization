\begin{document} \begin{theorem} Define the following list of commands : \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <nat:1> + <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> ; <var:E> := <nat:3> + <var:E> * <var:C> ; <var:E> := <nat:3> + <var:E> * <var:C> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> ; <var:E> := <nat:1> + <var:E> * <var:C> ; <var:E> := <nat:3> + <var:E> * <var:C> \end{verbatim} Allow letting positive integer coefficients $ <var:V> $ that $ <var:C> = <var:V> $ ahead of executing our list of instructions it must be that $ <var:E> = <nat:3> \cdot <var:V> ^ <nat:10> + <nat:1> \cdot <var:V> ^ <nat:9> + <nat:2> \cdot <var:V> ^ <nat:8> + <nat:4> \cdot <var:V> ^ <nat:7> + <nat:3> \cdot <var:V> ^ <nat:6> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:1> \cdot <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the series of instructions can be demonstrated using Hoare techniques . Following , the binding line \verb | <var:E> := <nat:3> ; | . This moves $ \{ <var:C> = <var:V> \} $ as $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \} $ . This is guaranteed through the assignment scheme defined in standard Hoare logic . Focusing on the upcoming statement found in our code segment , the code assigning $ <nat:1> + <var:E> * <var:C> $ to $ <var:E>$ . This forwards the condition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \} $ to $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> + <nat:1> \} $ . This is given using the assignment inference rule given in usual Hoare reasoning . Advancing , we see the variable assignmet statement \verb | <var:E> := <nat:2> + <var:E> * <var:C> ; | . This code takes the precondition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> + <nat:1> \} $ toward the postcondition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:2> \} $ . Going to the next step , we see the assignment code \verb | <var:E> := <nat:4> + <var:E> * <var:C> ; | . This redefines the precondition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:2> \} $ toward $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:4> \} $ . Now , the variable binding statement \verb | <var:E> := <nat:3> + <var:E> * <var:C> ; | . This advances the condition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:4> \} $ to the condition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:3> \} $ . This is ensured by the assignment law defined in Hoare logic . Moving onward , we see the assignment statement assigning $ <nat:3> + <var:E> * <var:C> $ as $ <var:E>$ . This takes $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:3> \} $ toward the condition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ . Observing the upcoming command seen in the set of commands , the environment update code \verb | <var:E> := <var:E> * <var:C> ; | . This line advances $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ toward $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + \} $ . After , we have the assignment command \verb | <var:E> := <nat:4> + <var:E> * <var:C> ; | . This takes $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + \} $ as the condition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:4> \} $ . This is shown using the assignment law in usual Hoare techniques . Moving on to the next step , we see the line \verb | <var:E> := <nat:4> + <var:E> * <var:C> ; | . This advances the precondition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:7> + <nat:2> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> + <nat:4> \} $ . This is known to be sound with the assignment scheme in usual Hoare logic . Taking another step toward the upcoming piece of code found in our segment of code , we have the line \verb | <var:E> := <nat:1> + <var:E> * <var:C> ; | . This code advances the precondition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:7> + <nat:2> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> + <nat:4> \} $ toward $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:9> + <nat:1> \times <var:V> ^ <nat:8> + <nat:2> \times <var:V> ^ <nat:7> + <nat:4> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:1> \} $ . This is deduced by the assignment scheme found in typical Hoare logic . Looking at the next command in our code , the variable update statement yielding $ <nat:3> + <var:E> * <var:C$ into $ <var:E>$ . This takes $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:9> + <nat:1> \times <var:V> ^ <nat:8> + <nat:2> \times <var:V> ^ <nat:7> + <nat:4> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:1> \} $ into the postcondition $ \{ <var:C> = <var:V> \land <var:E> = <nat:3> \times <var:V> ^ <nat:10> + <nat:1> \times <var:V> ^ <nat:9> + <nat:2> \times <var:V> ^ <nat:8> + <nat:4> \times <var:V> ^ <nat:7> + <nat:3> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <var:E> := <nat:3> ; <var:E> := <nat:1> + <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> ; <var:E> := <nat:3> + <var:E> * <var:C> ; <var:E> := <nat:3> + <var:E> * <var:C> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> ; <var:E> := <nat:1> + <var:E> * <var:C> ; <var:E> := <nat:3> + <var:E> * <var:C> {{ <var:E> = <nat:3> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:9> + <nat:2> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:2> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E> = <nat:3> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:9> + <nat:2> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 