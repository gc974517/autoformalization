\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:d> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:8> ; <var:t> := <var:y1> <var:t> := <var:t> + <var:y0> \end{verbatim} Allowing it to be that $ <var:d> = <var:R> $ before evaluating our segment of code , then we see $ <var:t> = <nat:8> \times <var:R> + <nat:5> $ when segment of code has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:d> = <var:R> \} \\ <var:y1> := <var:d> ; \\ \{ <var:d> = <var:R> \land <var:y1> = <var:R> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:d> = <var:R> \land <var:y1> = <var:R> \land <var:y0> = <nat:5> \} \\ <var:y1> := <var:y1> * <nat:8> ; \\ \{ <var:d> = <var:R> \land <var:y1> = <nat:8> \cdot <var:R> \land <var:y0> = <nat:5> \} \\ <var:t> := <var:y1> \\ \{ <var:d> = <var:R> \land <var:y0> = <nat:5> \land <var:t> = <nat:8> \cdot <var:R> \} \\ <var:t> := <var:t> + <var:y0> \\ \{ <var:d> = <var:R> \land <var:t> = <nat:8> \cdot <var:R> + <nat:5> \} \end{eqnarray} Therefore , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:d> = <var:R> }} <var:y1> := <var:d> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:8> ; <var:t> := <var:y1> <var:t> := <var:t> + <var:y0> {{ <var:t> = <nat:8> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:y1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:y1> = <var:R> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:y1> = <nat:8> * <var:R> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:y0> = <nat:5> /\ <var:t> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:t> = <nat:8> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 