\begin{document} \begin{theorem} Define a program as follows \begin{verbatim} <var:W0> := <nat:6> ; <var:O> := <var:W0> \end{verbatim} Assuming that we have $ <var:d> = <var:L> $ --- given whole numbers $ <var:L> $ --- prior to executing the set of instructions , it holds that we see $ <var:O> = <nat:6> $ when series of commands has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is demonstrated by usual Hoare techniques . Focusing on the following line seen in the code segment , we have \begin{eqnarray} \{ <var:d> = <var:L> \} \, <var:W0> := <nat:6> \, \{ <var:d> = <var:L> \land <var:W0> = <nat:6> \} \end{eqnarray} This is ensured with the variable assignmet scheme found in typical Hoare logic . Immediately following , we have \begin{eqnarray} \{ <var:d> = <var:L> \} \, <var:W0> := <nat:6> \, \{ <var:d> = <var:L> \land <var:W0> = <nat:6> \} \end{eqnarray} This is ensured with the assignment scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:d> = <var:L> }} <var:W0> := <nat:6> ; <var:O> := <var:W0> {{ <var:O> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:O> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 