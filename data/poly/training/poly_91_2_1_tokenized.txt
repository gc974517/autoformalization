\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:1> ; <var:Q> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:N> = <var:i> $ prior to running the list of instructions , it follows that we see $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is demonstrated through standard Hoare logic . Immediately following , we see \begin{verbatim} { <var:N> = <var:i> } <var:M0> := <nat:1> { <var:N> = <var:i> \land <var:M0> = <nat:1> } \end{verbatim} This is rigorously given with the scheme given in usual Hoare logic . Observing the next line seen in our segment of code , we have \begin{verbatim} { <var:N> = <var:i> } <var:M0> := <nat:1> { <var:N> = <var:i> \land <var:M0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:1> ; <var:Q> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:N> = <var:i> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 