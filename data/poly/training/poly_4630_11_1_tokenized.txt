\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:W> ; <var:F2> := <var:F1> * <var:W> ; <var:F3> := <var:F2> * <var:W> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:7> ; <var:F2> := <var:F2> * <nat:2> ; <var:F3> := <var:F3> * <nat:1> ; <var:p> := <var:F3> <var:p> := <var:p> + <var:F2> <var:p> := <var:p> + <var:F1> <var:p> := <var:p> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:W> = <var:O> $ before the execution of our series of instructions it holds that we see $ <var:p> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:8> $ after code has finished . \end{theorem} \begin{proof} Let the below decorated list of commands . \begin{eqnarray} \{ <var:W> = <var:O> \} \\ <var:F1> := <var:W> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <var:O> \} \\ <var:F2> := <var:F1> * <var:W> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <var:O> \land <var:F2> = <var:O> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:W> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <var:O> \land <var:F2> = <var:O> ^ <nat:2> \land <var:F3> = <var:O> ^ <nat:3> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <var:O> \land <var:F2> = <var:O> ^ <nat:2> \land <var:F3> = <var:O> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:F1> := <var:F1> * <nat:7> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <nat:7> \times <var:O> \land <var:F2> = <var:O> ^ <nat:2> \land <var:F3> = <var:O> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:F2> := <var:F2> * <nat:2> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <nat:7> \times <var:O> \land <var:F2> = <nat:2> \times <var:O> ^ <nat:2> \land <var:F3> = <var:O> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:F3> := <var:F3> * <nat:1> ; \\ \{ <var:W> = <var:O> \land <var:F1> = <nat:7> \times <var:O> \land <var:F2> = <nat:2> \times <var:O> ^ <nat:2> \land <var:F3> = <nat:1> \times <var:O> ^ <nat:3> \land <var:F0> = <nat:8> \} \\ <var:p> := <var:F3> \\ \{ <var:W> = <var:O> \land <var:F1> = <nat:7> \times <var:O> \land <var:F2> = <nat:2> \times <var:O> ^ <nat:2> \land <var:F0> = <nat:8> \land <var:p> = <nat:1> \times <var:O> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:F2> \\ \{ <var:W> = <var:O> \land <var:F1> = <nat:7> \times <var:O> \land <var:F0> = <nat:8> \land <var:p> = <nat:1> \times <var:O> ^ <nat:3> + <nat:2> \times <var:O> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:F1> \\ \{ <var:W> = <var:O> \land <var:F0> = <nat:8> \land <var:p> = <nat:1> \times <var:O> ^ <nat:3> + <nat:2> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} \\ <var:p> := <var:p> + <var:F0> \\ \{ <var:W> = <var:O> \land <var:p> = <nat:1> \times <var:O> ^ <nat:3> + <nat:2> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:W> ; <var:F2> := <var:F1> * <var:W> ; <var:F3> := <var:F2> * <var:W> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:7> ; <var:F2> := <var:F2> * <nat:2> ; <var:F3> := <var:F3> * <nat:1> ; <var:p> := <var:F3> <var:p> := <var:p> + <var:F2> <var:p> := <var:p> + <var:F1> <var:p> := <var:p> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:W> = <var:O> }} <def:poly> {{ <var:p> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <var:O> /\ <var:F2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <var:O> /\ <var:F2> = <var:O> ^ <nat:2> /\ <var:F3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <var:O> /\ <var:F2> = <var:O> ^ <nat:2> /\ <var:F3> = <var:O> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <nat:7> * <var:O> /\ <var:F2> = <var:O> ^ <nat:2> /\ <var:F3> = <var:O> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <nat:7> * <var:O> /\ <var:F2> = <nat:2> * <var:O> ^ <nat:2> /\ <var:F3> = <var:O> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <nat:7> * <var:O> /\ <var:F2> = <nat:2> * <var:O> ^ <nat:2> /\ <var:F3> = <nat:1> * <var:O> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <nat:7> * <var:O> /\ <var:F2> = <nat:2> * <var:O> ^ <nat:2> /\ <var:F0> = <nat:8> /\ <var:p> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F1> = <nat:7> * <var:O> /\ <var:F0> = <nat:8> /\ <var:p> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:F0> = <nat:8> /\ <var:p> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:p> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 