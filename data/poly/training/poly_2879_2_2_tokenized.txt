\begin{document} \begin{theorem} Take the following list of instructions such that \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <nat:3> + <var:B> * <var:W> \end{verbatim} Allowing it to hold that $ <var:W> = <var:n> $ ahead of interpreting this series of commands it holds that $ <var:B> = <nat:2> \times <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:W> = <var:n> \} \\ <var:B> := <nat:2> ; \\ \{ <var:W> = <var:n> \land <var:B> = <nat:2> \} \\ <var:B> := <nat:3> + <var:B> * <var:W> \\ \{ <var:W> = <var:n> \land <var:B> = <nat:2> * <var:n> + <nat:3> \} \end{eqnarray} Thus , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:W> = <var:n> }} <var:B> := <nat:2> ; <var:B> := <nat:3> + <var:B> * <var:W> {{ <var:B> = <nat:2> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:n> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:n> /\ <var:B> = <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 