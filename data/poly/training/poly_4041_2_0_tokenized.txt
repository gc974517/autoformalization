\begin{document} \begin{theorem} Consider the following program as follows \begin{verbatim} <var:f0> := <nat:2> ; <var:Z> := <var:f0> \end{verbatim} Allowing that we have $ <var:d> = <var:A> $ prior to the execution of the set of instructions , then we see $ <var:Z> = <nat:2> $ after set of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is shown with Hoare techniques . Moving forward to the next step , the line \verb | <var:f0> := <nat:2> ; | . This line forwards $ \{ <var:d> = <var:A> \} $ toward $ \{ <var:d> = <var:A> \land <var:f0> = <nat:2> \} $ . This is rigorously given by the assignment scheme obtained from standard Hoare techniques . Paying attention to the proceeding bit of code found in our set of instructions , we see the binding command \verb | <var:Z> := <var:f0> | . This moves the precondition $ \{ <var:d> = <var:A> \land <var:f0> = <nat:2> \} $ into $ \{ <var:d> = <var:A> \land <var:Z> = <nat:2> \} $ . This is given using the assignment scheme defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:d> = <var:A> }} <var:f0> := <nat:2> ; <var:Z> := <var:f0> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 