\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:L0> := <nat:4> ; <var:H> := <var:L0> \end{verbatim} Allowing ( taking $ <var:p> $ ) it to be that $ <var:V> = <var:p> $ prior to running our series of instructions , then we have $ <var:H> = <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our series of commands can be accomplished with usual Hoare techniques . Honing in on the subsequent line seen in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:p> \} & <var:L0> := <nat:4> & \{ <var:V> = <var:p> \land <var:L0> = <nat:4> \} \end{tabular} This is ensured through the variable binding inference rule obtained from Hoare reasoning . Further , \[ \begin{tabular} {rcl} \{ <var:V> = <var:p> \} & <var:L0> := <nat:4> & \{ <var:V> = <var:p> \land <var:L0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <var:L0> := <nat:4> ; <var:H> := <var:L0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 