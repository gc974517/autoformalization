\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:8> ; <var:G> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Assume $ <var:L> = <var:y> $ , taking $ <var:y> \in \mathbb{N} $ , prior to interpreting this program , it must be that we see $ <var:G> = <nat:8> $ . \end{theorem} \begin{proof} The course of logic for our segment of code can be done using typical Hoare reasoning . Moving on , we see \verb | { <var:L> = <var:y> } <var:e0> := <nat:8> { <var:L> = <var:y> \land <var:e0> = <nat:8> } | and \verb | { <var:L> = <var:y> \land <var:e0> = <nat:8> } <var:G> := <var:e0{ <var:L> = <var:y> \land <var:G> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:8> ; <var:G> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:L> = <var:y> }} <def:poly> {{ <var:G> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:e0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 