\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:2> + <var:w> * <var:I> ; <var:w> := <nat:4> + <var:w> * <var:I> ; <var:w> := <nat:4> + <var:w> * <var:I> ; <var:w> := <nat:1> + <var:w> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Given --- for any natural coefficients $ <var:d> $ --- it to be that $ <var:I> = <var:d> $ ahead of executing our code segment it holds that we see $ <var:w> = <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> $ when code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:d> \} \\ <var:w> := <nat:3> ; \\ \{ <var:I> = <var:d> \land <var:w> = <nat:3> \} \\ <var:w> := <nat:2> + <var:w> * <var:I> ; \\ \{ <var:I> = <var:d> \land <var:w> = <nat:3> \cdot <var:d> + <nat:2> \} \\ <var:w> := <nat:4> + <var:w> * <var:I> ; \\ \{ <var:I> = <var:d> \land <var:w> = <nat:3> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:I> ; \\ \{ <var:I> = <var:d> \land <var:w> = <nat:3> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:I> \\ \{ <var:I> = <var:d> \land <var:w> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:2> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:3> ; <var:w> := <nat:2> + <var:w> * <var:I> ; <var:w> := <nat:4> + <var:w> * <var:I> ; <var:w> := <nat:4> + <var:w> * <var:I> ; <var:w> := <nat:1> + <var:w> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:I> = <var:d> }} <def:poly> {{ <var:w> = <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:w> = <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:w> = <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:w> = <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:w> = <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 