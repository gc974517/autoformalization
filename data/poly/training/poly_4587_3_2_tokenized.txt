\begin{document} \begin{theorem} Consider a code : \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:F> ; <var:i> := <nat:4> + <var:i> * <var:F> \end{verbatim} Allow $ <var:F> = <var:I> $ before the execution of our set of commands it must be that $ <var:i> = <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:4> $ once series of commands finishes . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:F> = <var:I> \} \\ <var:i> := <nat:3> ; \\ \{ <var:F> = <var:I> \land <var:i> = <nat:3> \} \\ <var:i> := <nat:3> + <var:i> * <var:F> ; \\ \{ <var:F> = <var:I> \land <var:i> = <nat:3> \times <var:I> + <nat:3> \} \\ <var:i> := <nat:4> + <var:i> * <var:F> \\ \{ <var:F> = <var:I> \land <var:i> = <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:4> \} \end{eqnarray} As a consequence , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:F> = <var:I> }} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:F> ; <var:i> := <nat:4> + <var:i> * <var:F> {{ <var:i> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:i> = <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:i> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 