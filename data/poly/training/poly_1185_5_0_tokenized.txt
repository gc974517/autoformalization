\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:G0> := <nat:6> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:E> ; <var:J> := <var:G1> ; <var:J> := <var:J> + <var:G0> \end{verbatim} Given it to be that $ <var:E> = <var:K> $ before running the program it holds that $ <var:J> = <nat:9> \times <var:K> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:E> = <var:K> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:E> = <var:K> \land <var:G0> = <nat:6> \} \\ <var:G1> := <nat:9> ; \\ \{ <var:E> = <var:K> \land <var:G0> = <nat:6> \land <var:G1> = <nat:9> \} \\ <var:G1> := <var:G1> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:G0> = <nat:6> \land <var:G1> = <nat:9> * <var:K> \} \\ <var:J> := <var:G1> ; \\ \{ <var:E> = <var:K> \land <var:G0> = <nat:6> \land <var:J> = <nat:9> * <var:K> \} \\ <var:J> := <var:J> + <var:G0> \\ \{ <var:E> = <var:K> \land <var:J> = <nat:9> * <var:K> + <nat:6> \} \end{eqnarray} Considering the above , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:E> = <var:K> }} <var:G0> := <nat:6> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:E> ; <var:J> := <var:G1> ; <var:J> := <var:J> + <var:G0> {{ <var:J> = <nat:9> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:G0> = <nat:6> /\ <var:J> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:J> = <nat:9> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 