\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:3> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:g> ; <var:V2> := <var:V2> * <var:g> ; <var:V3> := <nat:4> ; <var:V3> := <var:V3> * <var:g> ; <var:V3> := <var:V3> * <var:g> ; <var:V3> := <var:V3> * <var:g> ; <var:G> := <var:V3> ; <var:G> := <var:G> + <var:V2> ; <var:G> := <var:G> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:g> = <var:W> $ prior to the evaluation of the code segment it must be that we have $ <var:G> = <nat:4> \times <var:W> ^ <nat:3> + <nat:9> \times <var:W> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this code can be given through standard Hoare logic . Advancing to the following steps in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:V0> := <nat:3> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \} & <var:V2> := <nat:9> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \} \end{tabular} This is shown through the scheme found in usual Hoare techniques . Paying attention to the upcoming commands seen in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:V0> := <nat:3> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \} & <var:V2> := <nat:9> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \} & <var:V2> := <var:V2> * <var:g> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> \} & <var:V2> := <var:V2> * <var:g> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \} & <var:V3> := <nat:4> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \land <var:V3> = <nat:4> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \land <var:V3> = <nat:4> \} & <var:V3> := <var:V3> * <var:g> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:W> \} \\ \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:W> \} & <var:V3> := <var:V3> * <var:g> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \land <var:V2> = <nat:9> \times <var:W> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:W> ^ <nat:2> \} \end{tabular} This is deduced by the assignment rule of standard Hoare logic . Moving on to the proceeding statement contained in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:V0> := <nat:3> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \} \end{tabular} Considering the subsequent step in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:V0> := <nat:3> & \{ <var:g> = <var:W> \land <var:V0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:g> ; <var:V2> := <var:V2> * <var:g> ; <var:V3> := <nat:4> ; <var:V3> := <var:V3> * <var:g> ; <var:V3> := <var:V3> * <var:g> ; <var:V3> := <var:V3> * <var:g> ; <var:G> := <var:V3> ; <var:G> := <var:G> + <var:V2> ; <var:G> := <var:G> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:g> = <var:W> }} <def:poly> {{ <var:G> = <nat:4> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:V3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:V2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:G> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:V0> = <nat:3> /\ <var:G> = <nat:4> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:G> = <nat:4> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 