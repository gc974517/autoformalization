\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:D> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:9> ; <var:x> := <var:c1> <var:x> := <var:x> + <var:c0> \end{verbatim} Allowing it to be that $ <var:D> = <var:P> $ , for any positive numbers $ <var:P> $ , before running the series of commands then $ <var:x> = <nat:9> \cdot <var:P> + <nat:7> $ . \end{theorem} \begin{proof} We can see that this decorated set of instructions . \begin{eqnarray} \{ <var:D> = <var:P> \} \\ <var:c1> := <var:D> ; \\ \{ <var:D> = <var:P> \land <var:c1> = <var:P> \} \\ <var:c0> := <nat:7> ; \\ \{ <var:D> = <var:P> \land <var:c1> = <var:P> \land <var:c0> = <nat:7> \} \\ <var:c1> := <var:c1> * <nat:9> ; \\ \{ <var:D> = <var:P> \land <var:c1> = <nat:9> \cdot <var:P> \land <var:c0> = <nat:7> \} \\ <var:x> := <var:c1> \\ \{ <var:D> = <var:P> \land <var:c0> = <nat:7> \land <var:x> = <nat:9> \cdot <var:P> \} \\ <var:x> := <var:x> + <var:c0> \\ \{ <var:D> = <var:P> \land <var:x> = <nat:9> \cdot <var:P> + <nat:7> \} \end{eqnarray} Using Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:D> = <var:P> }} <var:c1> := <var:D> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:9> ; <var:x> := <var:c1> <var:x> := <var:x> + <var:c0> {{ <var:x> = <nat:9> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:c1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:c1> = <var:P> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:c1> = <nat:9> * <var:P> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:c0> = <nat:7> /\ <var:x> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:x> = <nat:9> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 