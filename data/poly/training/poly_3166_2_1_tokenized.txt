\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:1> ; <var:h> := <var:B0> \end{verbatim} Allow , assuming some natural numbers $ <var:a> $ , it to be that $ <var:i> = <var:a> $ ahead of evaluating the set of commands , it holds that we have $ <var:h> = <nat:1> $ once list of commands has finished . \end{theorem} \begin{proof} The proof of the code is clear using standard Hoare reasoning . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:i> = <var:a> \} & <var:B0> := <nat:1> & \{ <var:i> = <var:a> \land <var:B0> = <nat:1> \} \end{tabular} Taking another step toward the next statement contained in the segment of code , \[ \begin{tabular} {rcl} \{ <var:i> = <var:a> \} & <var:B0> := <nat:1> & \{ <var:i> = <var:a> \land <var:B0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:i> = <var:a> }} <var:B0> := <nat:1> ; <var:h> := <var:B0> {{ <var:h> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:h> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 