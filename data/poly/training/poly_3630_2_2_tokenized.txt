\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <nat:4> + <var:W> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:M> = <var:h> $ ahead of executing this set of commands , it must be that $ <var:W> = <nat:2> * <var:h> + <nat:4> $ after program executes . \end{theorem} \begin{proof} The flow of logic for the program is demonstrated with typical Hoare logic . Advancing to the next step , we see the binding code yielding $ <nat:2> $ toward $ <var:W>$ . This takes the condition $ \{ <var:M> = <var:h> \} $ as the postcondition $ \{ <var:M> = <var:h> \land <var:W> = <nat:2> \} $ . Following , the variable assignmet code \verb | <var:W> := <nat:4> + <var:W> * <var:M> | . This advances the condition $ \{ <var:M> = <var:h> \land <var:W> = <nat:2> \} $ as the condition $ \{ <var:M> = <var:h> \land <var:W> = <nat:2> \cdot <var:h> + <nat:4> \} $ . This is deduced with the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:2> ; <var:W> := <nat:4> + <var:W> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:M> = <var:h> }} <def:poly> {{ <var:W> = <nat:2> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:W> = <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 