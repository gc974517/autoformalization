\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:9> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:q> ; <var:R> := <var:g1> ; <var:R> := <var:R> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Given $ <var:q> = <var:O> $ ( for any $ <var:O> $ ) before running the code segment , it follows that we see $ <var:R> = <nat:1> \times <var:O> + <nat:9> $ once set of commands has exited . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:q> = <var:O> \} \\ <var:g0> := <nat:9> ; \\ \{ <var:q> = <var:O> \land <var:g0> = <nat:9> \} \\ <var:g1> := <nat:1> ; \\ \{ <var:q> = <var:O> \land <var:g0> = <nat:9> \land <var:g1> = <nat:1> \} \\ <var:g1> := <var:g1> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:g0> = <nat:9> \land <var:g1> = <nat:1> \cdot <var:O> \} \\ <var:R> := <var:g1> ; \\ \{ <var:q> = <var:O> \land <var:g0> = <nat:9> \land <var:R> = <nat:1> \cdot <var:O> \} \\ <var:R> := <var:R> + <var:g0> \\ \{ <var:q> = <var:O> \land <var:R> = <nat:1> \cdot <var:O> + <nat:9> \} \end{eqnarray} Utilizing Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:9> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:q> ; <var:R> := <var:g1> ; <var:R> := <var:R> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:q> = <var:O> }} <def:poly> {{ <var:R> = <nat:1> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:g0> = <nat:9> /\ <var:R> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:R> = <nat:1> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 