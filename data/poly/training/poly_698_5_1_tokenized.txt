\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:n1> := <var:E> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:1> ; <var:w> := <var:n1> <var:w> := <var:w> + <var:n0> \end{verbatim} Assuming ( assuming some positive integers $ <var:i> $ ) that we have $ <var:E> = <var:i> $ before the execution of this program it holds that we see $ <var:w> = <nat:1> * <var:i> + <nat:8> $ when segment of code has finished executing . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be done by Hoare logic . Moving on to the subsequent step found in our program , the environment update code \verb | <var:n1> := <var:E> ; | . This command takes the precondition $ \{ <var:E> = <var:i> \} $ into the postcondition $ \{ <var:E> = <var:i> \land <var:n1> = <var:i> \} $ . Moving on to the next step , the environment update statement letting $ <nat:8> $ to $ <var:n0>$ . This command takes the condition $ \{ <var:E> = <var:i> \land <var:n1> = <var:i> \} $ to the condition $ \{ <var:E> = <var:i> \land <var:n1> = <var:i> \land <var:n0> = <nat:8> \} $ . Following , the binding command \verb | <var:n1> := <var:n1> * <nat:1> ; | . This advances the precondition $ \{ <var:E> = <var:i> \land <var:n1> = <var:i> \land <var:n0> = <nat:8> \} $ as $ \{ <var:E> = <var:i> \land <var:n1> = <nat:1> * <var:i> \land <var:n0> = <nat:8> \} $ . Considering the upcoming piece of code in the set of commands , we have the variable update code \verb | <var:w> := <var:n1> | . This redefines the condition $ \{ <var:E> = <var:i> \land <var:n1> = <nat:1> * <var:i> \land <var:n0> = <nat:8> \} $ as $ \{ <var:E> = <var:i> \land <var:n0> = <nat:8> \land <var:w> = <nat:1> * <var:i> \} $ . Jumping to the following step in our code segment , we see the assignment statement binding $ <var:w> + <var:n0$ as $ <var:w>$ . This forwards the precondition $ \{ <var:E> = <var:i> \land <var:n0> = <nat:8> \land <var:w> = <nat:1> * <var:i> \} $ into $ \{ <var:E> = <var:i> \land <var:w> = <nat:1> * <var:i> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:E> = <var:i> }} <var:n1> := <var:E> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:1> ; <var:w> := <var:n1> <var:w> := <var:w> + <var:n0> {{ <var:w> = <nat:1> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:n1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:n1> = <var:i> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:n1> = <nat:1> * <var:i> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:n0> = <nat:8> /\ <var:w> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:w> = <nat:1> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 