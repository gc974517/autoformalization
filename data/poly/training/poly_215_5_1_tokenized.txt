\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} : \begin{verbatim} <var:W1> := <var:c> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:8> ; <var:k> := <var:W1> <var:k> := <var:k> + <var:W0> \end{verbatim} Assuming that we have $ <var:c> = <var:H> $ ( for every whole numbers $ <var:H> $ ) ahead of the execution of our program it holds that we see $ <var:k> = <nat:8> \cdot <var:H> + <nat:8> $ after set of instructions executes . \end{theorem} \begin{proof} See that the following decorated list of instructions . \begin{eqnarray} \{ <var:c> = <var:H> \} \\ <var:W1> := <var:c> ; \\ \{ <var:c> = <var:H> \land <var:W1> = <var:H> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:c> = <var:H> \land <var:W1> = <var:H> \land <var:W0> = <nat:8> \} \\ <var:W1> := <var:W1> * <nat:8> ; \\ \{ <var:c> = <var:H> \land <var:W1> = <nat:8> \times <var:H> \land <var:W0> = <nat:8> \} \\ <var:k> := <var:W1> \\ \{ <var:c> = <var:H> \land <var:W0> = <nat:8> \land <var:k> = <nat:8> \times <var:H> \} \\ <var:k> := <var:k> + <var:W0> \\ \{ <var:c> = <var:H> \land <var:k> = <nat:8> \times <var:H> + <nat:8> \} \end{eqnarray} Applying Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:W1> := <var:c> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:8> ; <var:k> := <var:W1> <var:k> := <var:k> + <var:W0> {{ <var:k> = <nat:8> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:W1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:W1> = <var:H> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:W1> = <nat:8> * <var:H> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:W0> = <nat:8> /\ <var:k> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:k> = <nat:8> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 