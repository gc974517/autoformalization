\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:1> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:A> ; <var:X> := <var:S1> ; <var:X> := <var:X> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:A> = <var:o> $ --- assuming some positive coefficients $ <var:o> $ --- before evaluating the series of commands , it holds that $ <var:X> = <nat:1> \cdot <var:o> + <nat:1> $ after segment of code terminates . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:o> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:A> = <var:o> \land <var:S0> = <nat:1> \} \\ <var:S1> := <nat:1> ; \\ \{ <var:A> = <var:o> \land <var:S0> = <nat:1> \land <var:S1> = <nat:1> \} \\ <var:S1> := <var:S1> * <var:A> ; \\ \{ <var:A> = <var:o> \land <var:S0> = <nat:1> \land <var:S1> = <nat:1> \cdot <var:o> \} \\ <var:X> := <var:S1> ; \\ \{ <var:A> = <var:o> \land <var:S0> = <nat:1> \land <var:X> = <nat:1> \cdot <var:o> \} \\ <var:X> := <var:X> + <var:S0> \\ \{ <var:A> = <var:o> \land <var:X> = <nat:1> \cdot <var:o> + <nat:1> \} \end{eqnarray} Considering the above , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:1> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:A> ; <var:X> := <var:S1> ; <var:X> := <var:X> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:A> = <var:o> }} <def:poly> {{ <var:X> = <nat:1> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:S0> = <nat:1> /\ <var:X> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:X> = <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 