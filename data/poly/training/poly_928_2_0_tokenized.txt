\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:9> ; <var:i> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:k> = <var:P> $ ( given any $ <var:P> $ ) before the execution of our list of commands , it follows that we have $ <var:i> = <nat:9> $ once code has executed . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:k> = <var:P> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:k> = <var:P> \land <var:M0> = <nat:9> \} \\ <var:i> := <var:M0> \\ \{ <var:k> = <var:P> \land <var:i> = <nat:9> \} \end{eqnarray} Considering the preceding argument , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:9> ; <var:i> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:k> = <var:P> }} <def:poly> {{ <var:i> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:i> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 