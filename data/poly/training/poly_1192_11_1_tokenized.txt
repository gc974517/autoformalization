\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:w1> := <var:q> ; <var:w2> := <var:w1> * <var:q> ; <var:w3> := <var:w2> * <var:q> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:3> ; <var:l> := <var:w3> <var:l> := <var:l> + <var:w2> <var:l> := <var:l> + <var:w1> <var:l> := <var:l> + <var:w0> \end{verbatim} Assume that $ <var:q> = <var:j> $ ( letting integers $ <var:j> $ ) ahead of the execution of our series of commands , it must be that $ <var:l> = <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:7> $ once list of commands is done executing . \end{theorem} \begin{proof} The argument for this set of instructions can be shown by typical Hoare reasoning . Moving onward , we see the variable update command \verb | <var:w1> := <var:q> ; | . This statement forwards the condition $ \{ <var:q> = <var:j> \} $ toward $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \} $ . Advancing to the next step , we have the variable binding command \verb | <var:w2> := <var:w1> * <var:q> ; | . This command forwards the condition $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \} $ toward $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \land <var:w2> = <var:j> ^ <nat:2> \} $ . Shifting focus toward the proceeding piece of code seen in the series of instructions , we see the binding code \verb | <var:w3> := <var:w2> * <var:q> ; | . This line advances the precondition $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \land <var:w2> = <var:j> ^ <nat:2> \} $ into $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \land <var:w2> = <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \} $ . Going to the next step , we see the variable binding statement defining $ <nat:7> $ to $ <var:w0>$ . This code redefines the precondition $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \land <var:w2> = <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \} $ as $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \land <var:w2> = <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . Jumping to the next line found in our program , the line letting $ <var:w1> * <nat:2> $ into $ <var:w1>$ . This forwards the precondition $ \{ <var:q> = <var:j> \land <var:w1> = <var:j> \land <var:w2> = <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ toward the postcondition $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . This is given using the assignment law defined by typical Hoare techniques . Stepping through , the environment update line defining $ <var:w2> * <nat:3> $ to $ <var:w2>$ . This command forwards $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ to the condition $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . This is deduced through the assignment inference rule from Hoare techniques . Moving on to the proceeding statement in the series of commands , the command defining $ <var:w3> * <nat:3> $ into $ <var:w3>$ . This code transfers the precondition $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:w3> = <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ toward $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:w3> = <nat:3> \times <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . Taking a look at the following line in the series of instructions , we have the environment update command yielding $ <var:w3$ toward $ <var:l>$ . This transfers $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:w3> = <nat:3> \times <var:j> ^ <nat:3> \land <var:w0> = <nat:7> \} $ toward $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:w0> = <nat:7> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> \} $ . This is ensured using the assignment rule defined by Hoare techniques . Going to the next step , we see the assignment code \verb | <var:l> := <var:l> + <var:w2> | . This statement forwards the condition $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:w0> = <nat:7> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> \} $ toward the condition $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w0> = <nat:7> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> \} $ . Immediately after , we see the variable binding command \verb | <var:l> := <var:l> + <var:w1> | . This moves $ \{ <var:q> = <var:j> \land <var:w1> = <nat:2> \times <var:j> \land <var:w0> = <nat:7> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:j> \land <var:w0> = <nat:7> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> \} $ . Taking another step toward the following command found in the series of commands , we see the statement \verb | <var:l> := <var:l> + <var:w0> | . This statement transfers the precondition $ \{ <var:q> = <var:j> \land <var:w0> = <nat:7> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> \} $ into the condition $ \{ <var:q> = <var:j> \land <var:l> = <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:q> = <var:j> }} <var:w1> := <var:q> ; <var:w2> := <var:w1> * <var:q> ; <var:w3> := <var:w2> * <var:q> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:3> ; <var:l> := <var:w3> <var:l> := <var:l> + <var:w2> <var:l> := <var:l> + <var:w1> <var:l> := <var:l> + <var:w0> {{ <var:l> = <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <var:j> /\ <var:w2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <var:j> /\ <var:w2> = <var:j> ^ <nat:2> /\ <var:w3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <var:j> /\ <var:w2> = <var:j> ^ <nat:2> /\ <var:w3> = <var:j> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <nat:2> * <var:j> /\ <var:w2> = <var:j> ^ <nat:2> /\ <var:w3> = <var:j> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <nat:2> * <var:j> /\ <var:w2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:w3> = <var:j> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <nat:2> * <var:j> /\ <var:w2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:w3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <nat:2> * <var:j> /\ <var:w2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:w0> = <nat:7> /\ <var:l> = <nat:3> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w1> = <nat:2> * <var:j> /\ <var:w0> = <nat:7> /\ <var:l> = <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w0> = <nat:7> /\ <var:l> = <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:l> = <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 