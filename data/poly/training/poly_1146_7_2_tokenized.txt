\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:d> ; <var:D> := <nat:3> + <var:D> * <var:d> ; <var:D> := <nat:1> + <var:D> * <var:d> ; <var:D> := <var:D> * <var:d> ; <var:D> := <var:D> * <var:d> ; <var:D> := <nat:1> + <var:D> * <var:d> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:d> = <var:L> $ ahead of the evaluation of this list of instructions , it follows that $ <var:D> = <nat:1> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> $ after list of commands executes . \end{theorem} \begin{proof} Arguing the correctness of our program is demonstrated through usual Hoare techniques . Honing in on the subsequent statement in our segment of code , the variable assignmet statement giving $ <nat:1> $ toward $ <var:D>$ . This forwards $ \{ <var:d> = <var:L> \} $ toward $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \} $ . Paying attention to the proceeding statement seen in the code , we see the binding command \verb | <var:D> := <nat:2> + <var:D> * <var:d> ; | . This redefines the condition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> + <nat:2> \} $ . This is rigorously given using the assignment inference rule in Hoare reasoning . Taking a look at the upcoming line found in the series of commands , we see the assignment statement letting $ <nat:3> + <var:D> * <var:d> $ to $ <var:D>$ . This code forwards the precondition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> + <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> \} $ . Considering the proceeding command found in our segment of code , the assignment code letting $ <nat:1> + <var:D> * <var:d> $ toward $ <var:D>$ . This line takes the precondition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> \} $ into the condition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:1> \} $ . This is sound through the assignment rule given in typical Hoare logic . Jumping to the subsequent statement found in our code , we have the binding command \verb | <var:D> := <var:D> * <var:d> ; | . This line moves $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:1> \} $ as the postcondition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + \} $ . This is ensured using the assignment rule defined by standard Hoare techniques . Considering the proceeding statement in our code , we have the line defining $ <var:D> * <var:d> $ toward $ <var:D>$ . This statement transfers the condition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + \} $ to the postcondition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + \} $ . This is ensured through the assignment rule in usual Hoare logic . Observing the subsequent line contained in the series of instructions , the code \verb | <var:D> := <nat:1> + <var:D> * <var:d> | . This command moves the condition $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + \} $ to $ \{ <var:d> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \} $ . This is known to be sound through the assignment scheme defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:d> ; <var:D> := <nat:3> + <var:D> * <var:d> ; <var:D> := <nat:1> + <var:D> * <var:d> ; <var:D> := <var:D> * <var:d> ; <var:D> := <var:D> * <var:d> ; <var:D> := <nat:1> + <var:D> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:d> = <var:L> }} <def:poly> {{ <var:D> = <nat:1> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:D> = <nat:1> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 