\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:r> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:2> ; <var:B> := <var:z1> <var:B> := <var:B> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assume --- given all natural numbers $ <var:c> $ --- that we have $ <var:r> = <var:c> $ before executing the list of commands , it follows that we see $ <var:B> = <nat:2> * <var:c> + <nat:6> $ after segment of code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:c> \} \\ <var:z1> := <var:r> ; \\ \{ <var:r> = <var:c> \land <var:z1> = <var:c> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:r> = <var:c> \land <var:z1> = <var:c> \land <var:z0> = <nat:6> \} \\ <var:z1> := <var:z1> * <nat:2> ; \\ \{ <var:r> = <var:c> \land <var:z1> = <nat:2> \cdot <var:c> \land <var:z0> = <nat:6> \} \\ <var:B> := <var:z1> \\ \{ <var:r> = <var:c> \land <var:z0> = <nat:6> \land <var:B> = <nat:2> \cdot <var:c> \} \\ <var:B> := <var:B> + <var:z0> \\ \{ <var:r> = <var:c> \land <var:B> = <nat:2> \cdot <var:c> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:r> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:2> ; <var:B> := <var:z1> <var:B> := <var:B> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:r> = <var:c> }} <def:poly> {{ <var:B> = <nat:2> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:z1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:z1> = <var:c> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:z1> = <nat:2> * <var:c> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:z0> = <nat:6> /\ <var:B> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:B> = <nat:2> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 