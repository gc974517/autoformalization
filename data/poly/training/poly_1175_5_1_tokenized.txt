\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:S> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:4> ; <var:l> := <var:y1> <var:l> := <var:l> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allowing $ <var:S> = <var:G> $ given every integers $ <var:G> $ before interpreting the code segment , then we have $ <var:l> = <nat:4> \cdot <var:G> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our list of commands can be accomplished by Hoare logic . Moving on , the variable assignmet statement yielding $ <var:S> $ into $ <var:y1>$ . This redefines the condition $ \{ <var:S> = <var:G> \} $ as the postcondition $ \{ <var:S> = <var:G> \land <var:y1> = <var:G> \} $ . This is rigorously given with the assignment law defined in Hoare reasoning . Considering the following step found in the code segment , the variable binding command yielding $ <nat:4> $ to $ <var:y0>$ . This statement transfers $ \{ <var:S> = <var:G> \land <var:y1> = <var:G> \} $ toward the postcondition $ \{ <var:S> = <var:G> \land <var:y1> = <var:G> \land <var:y0> = <nat:4> \} $ . Moving onward , the variable assignmet line defining $ <var:y1> * <nat:4> $ to $ <var:y1>$ . This transfers the precondition $ \{ <var:S> = <var:G> \land <var:y1> = <var:G> \land <var:y0> = <nat:4> \} $ to the postcondition $ \{ <var:S> = <var:G> \land <var:y1> = <nat:4> \times <var:G> \land <var:y0> = <nat:4> \} $ . This is known to be sound with the assignment law in typical Hoare techniques . Taking another step toward the next statement found in our program , we see the variable update line \verb | <var:l> := <var:y1> | . This statement transfers $ \{ <var:S> = <var:G> \land <var:y1> = <nat:4> \times <var:G> \land <var:y0> = <nat:4> \} $ to the postcondition $ \{ <var:S> = <var:G> \land <var:y0> = <nat:4> \land <var:l> = <nat:4> \times <var:G> \} $ . Advancing to the next piece of code in our code segment , we have the variable binding command yielding $ <var:l> + <var:y0$ toward $ <var:l>$ . This moves $ \{ <var:S> = <var:G> \land <var:y0> = <nat:4> \land <var:l> = <nat:4> \times <var:G> \} $ as $ \{ <var:S> = <var:G> \land <var:l> = <nat:4> \times <var:G> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:S> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:4> ; <var:l> := <var:y1> <var:l> := <var:l> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:S> = <var:G> }} <def:poly> {{ <var:l> = <nat:4> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:y1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:y1> = <var:G> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:y1> = <nat:4> * <var:G> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:y0> = <nat:4> /\ <var:l> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l> = <nat:4> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 