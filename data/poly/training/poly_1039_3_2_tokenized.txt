\begin{document} \begin{theorem} Define the following set of commands : \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:4> + <var:m> * <var:I> ; <var:m> := <nat:4> + <var:m> * <var:I> \end{verbatim} Allowing for all natural numbers $ <var:H> $ it to hold that $ <var:I> = <var:H> $ ahead of executing this set of instructions , then we see $ <var:m> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> $ . \end{theorem} \begin{proof} The argument for the code segment can be done using Hoare logic . Moving onward , we have \begin{verbatim} { <var:I> = <var:H> } <var:m> := <nat:3> { <var:I> = <var:H> \land <var:m> = <nat:3> } { <var:I> = <var:H> \land <var:m> = <nat:3> } <var:m> := <nat:4> + <var:m> * <var:I> { <var:I> = <var:H> \land <var:m> = <nat:3> * <var:H> + <nat:4> } \end{verbatim} Taking another step toward the following piece of code in the set of commands , \begin{verbatim} { <var:I> = <var:H> } <var:m> := <nat:3> { <var:I> = <var:H> \land <var:m> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:I> = <var:H> }} <var:m> := <nat:3> ; <var:m> := <nat:4> + <var:m> * <var:I> ; <var:m> := <nat:4> + <var:m> * <var:I> {{ <var:m> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:H> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:H> /\ <var:m> = <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:H> /\ <var:m> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 