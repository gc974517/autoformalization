\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:m> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Y> := <var:Q1> <var:Y> := <var:Y> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:m> = <var:x> $ ahead of executing this code segment , it follows that we see $ <var:Y> = <nat:8> \times <var:x> + <nat:9> $ after list of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:x> \} \\ <var:Q1> := <var:m> ; \\ \{ <var:m> = <var:x> \land <var:Q1> = <var:x> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:m> = <var:x> \land <var:Q1> = <var:x> \land <var:Q0> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <nat:8> ; \\ \{ <var:m> = <var:x> \land <var:Q1> = <nat:8> * <var:x> \land <var:Q0> = <nat:9> \} \\ <var:Y> := <var:Q1> \\ \{ <var:m> = <var:x> \land <var:Q0> = <nat:9> \land <var:Y> = <nat:8> * <var:x> \} \\ <var:Y> := <var:Y> + <var:Q0> \\ \{ <var:m> = <var:x> \land <var:Y> = <nat:8> * <var:x> + <nat:9> \} \end{eqnarray} Applying Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:m> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Y> := <var:Q1> <var:Y> := <var:Y> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:m> = <var:x> }} <def:poly> {{ <var:Y> = <nat:8> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Q1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Q1> = <var:x> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Q1> = <nat:8> * <var:x> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Q0> = <nat:9> /\ <var:Y> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Y> = <nat:8> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 