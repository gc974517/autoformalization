\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:1> ; <var:g> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:H> = <var:G> $ --- taking whole numbers $ <var:G> $ --- prior to running our code segment it follows that we see $ <var:g> = <nat:1> $ . \end{theorem} \begin{proof} See that the following decorated series of commands . \begin{eqnarray} \{ <var:H> = <var:G> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:H> = <var:G> \land <var:y0> = <nat:1> \} \\ <var:g> := <var:y0> \\ \{ <var:H> = <var:G> \land <var:g> = <nat:1> \} \end{eqnarray} The application of Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:g> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:H> = <var:G> }} <def:poly> {{ <var:g> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:g> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 