\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:3> ; <var:F> := <var:K0> \end{verbatim} Assume that we have $ <var:G> = <var:J> $ prior to running this set of instructions it follows that we have $ <var:F> = <nat:3> $ once list of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be shown with Hoare reasoning . Going to the next step , \verb | { <var:G> = <var:J> } <var:K0> := <nat:3> { <var:G> = <var:J> \land <var:K0> = <nat:3> } | . Taking a look at the proceeding step in the series of commands , we see \verb | { <var:G> = <var:J> } <var:K0> := <nat:3> { <var:G> = <var:J> \land <var:K0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <var:K0> := <nat:3> ; <var:F> := <var:K0> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 