\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:4> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:z> ; <var:c> := <var:i1> ; <var:c> := <var:c> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Allowing $ <var:z> = <var:T> $ prior to running this set of commands then we see $ <var:c> = <nat:8> \times <var:T> + <nat:4> $ when list of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:T> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:z> = <var:T> \land <var:i0> = <nat:4> \} \\ <var:i1> := <nat:8> ; \\ \{ <var:z> = <var:T> \land <var:i0> = <nat:4> \land <var:i1> = <nat:8> \} \\ <var:i1> := <var:i1> * <var:z> ; \\ \{ <var:z> = <var:T> \land <var:i0> = <nat:4> \land <var:i1> = <nat:8> * <var:T> \} \\ <var:c> := <var:i1> ; \\ \{ <var:z> = <var:T> \land <var:i0> = <nat:4> \land <var:c> = <nat:8> * <var:T> \} \\ <var:c> := <var:c> + <var:i0> \\ \{ <var:z> = <var:T> \land <var:c> = <nat:8> * <var:T> + <nat:4> \} \end{eqnarray} Using standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:z> ; <var:c> := <var:i1> ; <var:c> := <var:c> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:z> = <var:T> }} <def:poly> {{ <var:c> = <nat:8> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:i0> = <nat:4> /\ <var:c> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:c> = <nat:8> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 