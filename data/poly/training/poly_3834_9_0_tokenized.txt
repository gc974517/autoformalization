\begin{document} \begin{theorem} We define a set of commands such that \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:q> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:q> ; <var:k2> := <var:k2> * <var:q> ; <var:L> := <var:k2> ; <var:L> := <var:L> + <var:k1> ; <var:L> := <var:L> + <var:k0> \end{verbatim} Assume it to be that $ <var:q> = <var:Y> $ prior to evaluating our list of commands it follows that we have $ <var:L> = <nat:5> \times <var:Y> ^ <nat:2> + <nat:8> \times <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:q> = <var:Y> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \} \\ <var:k1> := <nat:8> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \} \\ <var:k1> := <var:k1> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:Y> \} \\ <var:k2> := <nat:5> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:Y> \land <var:k2> = <nat:5> \} \\ <var:k2> := <var:k2> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:Y> \land <var:k2> = <nat:5> \times <var:Y> \} \\ <var:k2> := <var:k2> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:Y> \land <var:k2> = <nat:5> \times <var:Y> ^ <nat:2> \} \\ <var:L> := <var:k2> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:Y> \land <var:L> = <nat:5> \times <var:Y> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:k1> ; \\ \{ <var:q> = <var:Y> \land <var:k0> = <nat:3> \land <var:L> = <nat:5> \times <var:Y> ^ <nat:2> + <nat:8> \times <var:Y> \} \\ <var:L> := <var:L> + <var:k0> \\ \{ <var:q> = <var:Y> \land <var:L> = <nat:5> \times <var:Y> ^ <nat:2> + <nat:8> \times <var:Y> + <nat:3> \} \end{eqnarray} Thus , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <var:k0> := <nat:3> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:q> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:q> ; <var:k2> := <var:k2> * <var:q> ; <var:L> := <var:k2> ; <var:L> := <var:L> + <var:k1> ; <var:L> := <var:L> + <var:k0> {{ <var:L> = <nat:5> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:Y> /\ <var:k2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:Y> /\ <var:k2> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:Y> /\ <var:k2> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:Y> /\ <var:L> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:k0> = <nat:3> /\ <var:L> = <nat:5> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:L> = <nat:5> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 