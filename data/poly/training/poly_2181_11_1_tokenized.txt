\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as \begin{verbatim} <var:i1> := <var:j> ; <var:i2> := <var:i1> * <var:j> ; <var:i3> := <var:i2> * <var:j> ; <var:i0> := <nat:4> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:6> ; <var:i3> := <var:i3> * <nat:4> ; <var:H> := <var:i3> <var:H> := <var:H> + <var:i2> <var:H> := <var:H> + <var:i1> <var:H> := <var:H> + <var:i0> \end{verbatim} Allow it to be that $ <var:j> = <var:g> $ prior to the evaluation of our list of commands it must be that we have $ <var:H> = <nat:4> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:6> \times <var:g> + <nat:4> $ after set of instructions is done . \end{theorem} \begin{proof} Observe that the following decorated set of instructions . \begin{eqnarray} \{ <var:j> = <var:g> \} \\ <var:i1> := <var:j> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <var:g> \} \\ <var:i2> := <var:i1> * <var:j> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <var:g> \land <var:i2> = <var:g> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:j> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <var:g> \land <var:i2> = <var:g> ^ <nat:2> \land <var:i3> = <var:g> ^ <nat:3> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <var:g> \land <var:i2> = <var:g> ^ <nat:2> \land <var:i3> = <var:g> ^ <nat:3> \land <var:i0> = <nat:4> \} \\ <var:i1> := <var:i1> * <nat:6> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <nat:6> \times <var:g> \land <var:i2> = <var:g> ^ <nat:2> \land <var:i3> = <var:g> ^ <nat:3> \land <var:i0> = <nat:4> \} \\ <var:i2> := <var:i2> * <nat:6> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <nat:6> \times <var:g> \land <var:i2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:i3> = <var:g> ^ <nat:3> \land <var:i0> = <nat:4> \} \\ <var:i3> := <var:i3> * <nat:4> ; \\ \{ <var:j> = <var:g> \land <var:i1> = <nat:6> \times <var:g> \land <var:i2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:g> ^ <nat:3> \land <var:i0> = <nat:4> \} \\ <var:H> := <var:i3> \\ \{ <var:j> = <var:g> \land <var:i1> = <nat:6> \times <var:g> \land <var:i2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:i0> = <nat:4> \land <var:H> = <nat:4> \times <var:g> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:i2> \\ \{ <var:j> = <var:g> \land <var:i1> = <nat:6> \times <var:g> \land <var:i0> = <nat:4> \land <var:H> = <nat:4> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> \} \end{eqnarray} Allowing the execution of our list of instructions produces : \begin{eqnarray} <var:H> := <var:H> + <var:i1> \\ \{ <var:j> = <var:g> \land <var:i0> = <nat:4> \land <var:H> = <nat:4> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:6> \times <var:g> \} \\ <var:H> := <var:H> + <var:i0> \\ \{ <var:j> = <var:g> \land <var:H> = <nat:4> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:6> \times <var:g> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:j> = <var:g> }} <var:i1> := <var:j> ; <var:i2> := <var:i1> * <var:j> ; <var:i3> := <var:i2> * <var:j> ; <var:i0> := <nat:4> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:6> ; <var:i3> := <var:i3> * <nat:4> ; <var:H> := <var:i3> <var:H> := <var:H> + <var:i2> <var:H> := <var:H> + <var:i1> <var:H> := <var:H> + <var:i0> {{ <var:H> = <nat:4> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <var:g> /\ <var:i2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <var:g> /\ <var:i2> = <var:g> ^ <nat:2> /\ <var:i3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <var:g> /\ <var:i2> = <var:g> ^ <nat:2> /\ <var:i3> = <var:g> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <nat:6> * <var:g> /\ <var:i2> = <var:g> ^ <nat:2> /\ <var:i3> = <var:g> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <nat:6> * <var:g> /\ <var:i2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:i3> = <var:g> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <nat:6> * <var:g> /\ <var:i2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:g> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <nat:6> * <var:g> /\ <var:i2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:i0> = <nat:4> /\ <var:H> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i1> = <nat:6> * <var:g> /\ <var:i0> = <nat:4> /\ <var:H> = <nat:4> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:i0> = <nat:4> /\ <var:H> = <nat:4> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:g> /\ <var:H> = <nat:4> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 