\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:m> ; <var:b2> := <var:b1> * <var:m> ; <var:b3> := <var:b2> * <var:m> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:7> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:5> ; <var:z> := <var:b3> <var:z> := <var:z> + <var:b2> <var:z> := <var:z> + <var:b1> <var:z> := <var:z> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Given that $ <var:m> = <var:B> $ given every natural numbers $ <var:B> $ before evaluating this series of commands it holds that $ <var:z> = <nat:5> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:7> $ once segment of code has finished executing . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:m> = <var:B> \} \\ <var:b1> := <var:m> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <var:B> \} \\ <var:b2> := <var:b1> * <var:m> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:m> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b0> = <nat:7> \} \\ <var:b1> := <var:b1> * <nat:7> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <nat:7> * <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b0> = <nat:7> \} \\ <var:b2> := <var:b2> * <nat:9> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <nat:7> * <var:B> \land <var:b2> = <nat:9> * <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b0> = <nat:7> \} \\ <var:b3> := <var:b3> * <nat:5> ; \\ \{ <var:m> = <var:B> \land <var:b1> = <nat:7> * <var:B> \land <var:b2> = <nat:9> * <var:B> ^ <nat:2> \land <var:b3> = <nat:5> * <var:B> ^ <nat:3> \land <var:b0> = <nat:7> \} \\ <var:z> := <var:b3> \\ \{ <var:m> = <var:B> \land <var:b1> = <nat:7> * <var:B> \land <var:b2> = <nat:9> * <var:B> ^ <nat:2> \land <var:b0> = <nat:7> \land <var:z> = <nat:5> * <var:B> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:b2> \\ \{ <var:m> = <var:B> \land <var:b1> = <nat:7> * <var:B> \land <var:b0> = <nat:7> \land <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:b1> \\ \{ <var:m> = <var:B> \land <var:b0> = <nat:7> \land <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} \\ <var:z> := <var:z> + <var:b0> \\ \{ <var:m> = <var:B> \land <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:7> \} \end{eqnarray} Considering the preceding argument , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b1> := <var:m> ; <var:b2> := <var:b1> * <var:m> ; <var:b3> := <var:b2> * <var:m> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:7> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:5> ; <var:z> := <var:b3> <var:z> := <var:z> + <var:b2> <var:z> := <var:z> + <var:b1> <var:z> := <var:z> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:m> = <var:B> }} <def:poly> {{ <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <nat:7> * <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <nat:7> * <var:B> /\ <var:b2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <nat:7> * <var:B> /\ <var:b2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:b3> = <nat:5> * <var:B> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <nat:7> * <var:B> /\ <var:b2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:b0> = <nat:7> /\ <var:z> = <nat:5> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b1> = <nat:7> * <var:B> /\ <var:b0> = <nat:7> /\ <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:b0> = <nat:7> /\ <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:z> = <nat:5> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 