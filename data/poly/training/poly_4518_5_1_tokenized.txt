\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} : \begin{verbatim} <var:V1> := <var:e> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:1> ; <var:t> := <var:V1> <var:t> := <var:t> + <var:V0> \end{verbatim} Assume it to hold that $ <var:e> = <var:v> $ before interpreting the code segment it follows that we see $ <var:t> = <nat:1> \times <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is done using typical Hoare reasoning . Focusing on the following bit of code found in our code , we see the variable update command defining $ <var:e> $ into $ <var:V1>$ . This takes the condition $ \{ <var:e> = <var:v> \} $ toward the postcondition $ \{ <var:e> = <var:v> \land <var:V1> = <var:v> \} $ . Now , the line letting $ <nat:3> $ as $ <var:V0>$ . This transfers the precondition $ \{ <var:e> = <var:v> \land <var:V1> = <var:v> \} $ toward the postcondition $ \{ <var:e> = <var:v> \land <var:V1> = <var:v> \land <var:V0> = <nat:3> \} $ . Going to the next step , we see the variable update statement binding $ <var:V1> * <nat:1> $ into $ <var:V1>$ . This code moves the precondition $ \{ <var:e> = <var:v> \land <var:V1> = <var:v> \land <var:V0> = <nat:3> \} $ as the postcondition $ \{ <var:e> = <var:v> \land <var:V1> = <nat:1> * <var:v> \land <var:V0> = <nat:3> \} $ . Going forward , we have the code binding $ <var:V1$ as $ <var:t>$ . This forwards the precondition $ \{ <var:e> = <var:v> \land <var:V1> = <nat:1> * <var:v> \land <var:V0> = <nat:3> \} $ as $ \{ <var:e> = <var:v> \land <var:V0> = <nat:3> \land <var:t> = <nat:1> * <var:v> \} $ . This is deduced using the assignment scheme found in standard Hoare reasoning . Considering the next command seen in our list of commands , we see the environment update command yielding $ <var:t> + <var:V0$ into $ <var:t>$ . This command takes $ \{ <var:e> = <var:v> \land <var:V0> = <nat:3> \land <var:t> = <nat:1> * <var:v> \} $ into the postcondition $ \{ <var:e> = <var:v> \land <var:t> = <nat:1> * <var:v> + <nat:3> \} $ . This is shown by the assignment law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:e> = <var:v> }} <var:V1> := <var:e> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:1> ; <var:t> := <var:V1> <var:t> := <var:t> + <var:V0> {{ <var:t> = <nat:1> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:V1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:V1> = <var:v> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:V1> = <nat:1> * <var:v> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:V0> = <nat:3> /\ <var:t> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:t> = <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 