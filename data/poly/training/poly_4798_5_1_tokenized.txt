\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:r> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:l> := <var:Y1> <var:l> := <var:l> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Assume it to be that $ <var:r> = <var:b> $ before interpreting this segment of code , then we have $ <var:l> = <nat:6> * <var:b> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:r> = <var:b> \} \\ <var:Y1> := <var:r> ; \\ \{ <var:r> = <var:b> \land <var:Y1> = <var:b> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:r> = <var:b> \land <var:Y1> = <var:b> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <var:Y1> * <nat:6> ; \\ \{ <var:r> = <var:b> \land <var:Y1> = <nat:6> \times <var:b> \land <var:Y0> = <nat:4> \} \\ <var:l> := <var:Y1> \\ \{ <var:r> = <var:b> \land <var:Y0> = <nat:4> \land <var:l> = <nat:6> \times <var:b> \} \\ <var:l> := <var:l> + <var:Y0> \\ \{ <var:r> = <var:b> \land <var:l> = <nat:6> \times <var:b> + <nat:4> \} \end{eqnarray} Hence , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:r> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:l> := <var:Y1> <var:l> := <var:l> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <def:poly> {{ <var:l> = <nat:6> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:Y1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:Y1> = <var:b> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:Y1> = <nat:6> * <var:b> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:Y0> = <nat:4> /\ <var:l> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:l> = <nat:6> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 