\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:2> + <var:H> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Allow , given any positive numbers $ <var:G> $ , that $ <var:s> = <var:G> $ ahead of running the program , it holds that $ <var:H> = <nat:3> \times <var:G> + <nat:2> $ when list of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of our program is evident by standard Hoare reasoning . Considering the proceeding bit of code seen in our set of instructions , we have \begin{verbatim} { <var:s> = <var:G> } <var:H> := <nat:3> { <var:s> = <var:G> \land <var:H> = <nat:3> } \end{verbatim} Considering the following statement found in the set of commands , \begin{verbatim} { <var:s> = <var:G> } <var:H> := <nat:3> { <var:s> = <var:G> \land <var:H> = <nat:3> } \end{verbatim} This is given using the scheme defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:3> ; <var:H> := <nat:2> + <var:H> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:s> = <var:G> }} <def:poly> {{ <var:H> = <nat:3> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:H> = <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 