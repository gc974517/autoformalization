\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:K1> := <var:s> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:8> ; <var:e> := <var:K1> <var:e> := <var:e> + <var:K0> \end{verbatim} Allow that $ <var:s> = <var:h> $ prior to running our segment of code then $ <var:e> = <nat:8> \times <var:h> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our set of instructions can be seen with usual Hoare logic . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:h> \} & <var:K1> := <var:s> & \{ <var:s> = <var:h> \land <var:K1> = <var:h> \} \\ \{ <var:s> = <var:h> \land <var:K1> = <var:h> \} & <var:K0> := <nat:3> & \{ <var:s> = <var:h> \land <var:K1> = <var:h> \land <var:K0> = <nat:3> \} \\ \{ <var:s> = <var:h> \land <var:K1> = <var:h> \land <var:K0> = <nat:3> \} & <var:K1> := <var:K1> * <nat:8> & \{ <var:s> = <var:h> \land <var:K1> = <nat:8> * <var:h> \land <var:K0> = <nat:3> \} \end{tabular} Further , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:h> \} & <var:K1> := <var:s> & \{ <var:s> = <var:h> \land <var:K1> = <var:h> \} \end{tabular} This is shown by the binding scheme from standard Hoare reasoning . Focusing on the following command found in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:h> \} & <var:K1> := <var:s> & \{ <var:s> = <var:h> \land <var:K1> = <var:h> \} \end{tabular} This is sound through the scheme found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:s> = <var:h> }} <var:K1> := <var:s> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:8> ; <var:e> := <var:K1> <var:e> := <var:e> + <var:K0> {{ <var:e> = <nat:8> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:K1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:K1> = <var:h> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:K1> = <nat:8> * <var:h> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:K0> = <nat:3> /\ <var:e> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:e> = <nat:8> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 