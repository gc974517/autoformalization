\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:c> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:7> ; <var:f> := <var:i1> <var:f> := <var:f> + <var:i0> \end{verbatim} Allow $ <var:c> = <var:D> $ before interpreting the segment of code , then we see $ <var:f> = <nat:7> * <var:D> + <nat:9> $ when series of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of our program can be given by standard Hoare reasoning . After , we see the variable assignmet code assigning $ <var:c> $ toward $ <var:i1>$ . This moves $ \{ <var:c> = <var:D> \} $ as $ \{ <var:c> = <var:D> \land <var:i1> = <var:D> \} $ . This is deduced through the assignment scheme defined in usual Hoare techniques . Taking another step toward the subsequent step seen in the series of commands , we have the variable assignmet line defining $ <nat:9> $ to $ <var:i0>$ . This statement takes $ \{ <var:c> = <var:D> \land <var:i1> = <var:D> \} $ into the condition $ \{ <var:c> = <var:D> \land <var:i1> = <var:D> \land <var:i0> = <nat:9> \} $ . Advancing to the subsequent statement contained in the code segment , the environment update code \verb | <var:i1> := <var:i1> * <nat:7> ; | . This code advances $ \{ <var:c> = <var:D> \land <var:i1> = <var:D> \land <var:i0> = <nat:9> \} $ toward the condition $ \{ <var:c> = <var:D> \land <var:i1> = <nat:7> \cdot <var:D> \land <var:i0> = <nat:9> \} $ . This is shown to be logically sound by the assignment scheme found in typical Hoare reasoning . After , we see the variable update command defining $ <var:i1$ into $ <var:f>$ . This command advances the precondition $ \{ <var:c> = <var:D> \land <var:i1> = <nat:7> \cdot <var:D> \land <var:i0> = <nat:9> \} $ as the condition $ \{ <var:c> = <var:D> \land <var:i0> = <nat:9> \land <var:f> = <nat:7> \cdot <var:D> \} $ . This is shown to be logically sound through the assignment inference rule found in typical Hoare reasoning . Taking a look at the subsequent statement contained in the set of instructions , we have the assignment statement \verb | <var:f> := <var:f> + <var:i0> | . This takes the condition $ \{ <var:c> = <var:D> \land <var:i0> = <nat:9> \land <var:f> = <nat:7> \cdot <var:D> \} $ as $ \{ <var:c> = <var:D> \land <var:f> = <nat:7> \cdot <var:D> + <nat:9> \} $ . This is sound using the assignment rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:c> = <var:D> }} <var:i1> := <var:c> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:7> ; <var:f> := <var:i1> <var:f> := <var:f> + <var:i0> {{ <var:f> = <nat:7> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i1> = <var:D> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i1> = <nat:7> * <var:D> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i0> = <nat:9> /\ <var:f> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:f> = <nat:7> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 