\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:C> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:C> ; <var:G2> := <var:G2> * <var:C> ; <var:y> := <var:G2> ; <var:y> := <var:y> + <var:G1> ; <var:y> := <var:y> + <var:G0> \end{verbatim} Allow taking positive integer coefficients $ <var:r> $ $ <var:C> = <var:r> $ before the execution of this list of commands it must be that $ <var:y> = <nat:3> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> + <nat:4> $ once program exits . \end{theorem} \begin{proof} The method of proof for our series of instructions can be accomplished through usual Hoare logic . Considering the following line in the list of commands , the variable assignmet line defining $ <nat:4> $ as $ <var:G0>$ . This line redefines the precondition $ \{ <var:C> = <var:r> \} $ into $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \} $ . This is shown by the assignment inference rule in Hoare techniques . Moving onward , we see the variable assignmet code defining $ <nat:8> $ to $ <var:G1>$ . This takes $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \} $ into the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> \} $ . Next , we see the variable binding code \verb | <var:G1> := <var:G1> * <var:C> ; | . This moves $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> \} $ as the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \} $ . Taking another step toward the proceeding piece of code in the series of commands , the environment update code yielding $ <nat:3> $ to $ <var:G2>$ . This command moves the precondition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \} $ as $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:G2> = <nat:3> \} $ . This is given with the assignment rule of standard Hoare reasoning . Paying attention to the proceeding step seen in our list of commands , the binding code \verb | <var:G2> := <var:G2> * <var:C> ; | . This command forwards the precondition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:G2> = <nat:3> \} $ to the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:G2> = <nat:3> * <var:r> \} $ . Moving on to the next step , we see the assignment command giving $ <var:G2> * <var:C> $ into $ <var:G2>$ . This line redefines the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:G2> = <nat:3> * <var:r> \} $ into $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:G2> = <nat:3> * <var:r> ^ <nat:2> \} $ . This is guaranteed using the assignment law found in typical Hoare logic . Moving forward to the following piece of code seen in our list of instructions , the variable update line binding $ <var:G2> $ toward $ <var:y>$ . This transfers $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:G2> = <nat:3> * <var:r> ^ <nat:2> \} $ as the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:y> = <nat:3> * <var:r> ^ <nat:2> \} $ . Shifting focus toward the following piece of code seen in our set of instructions , we see the variable assignmet statement assigning $ <var:y> + <var:G1> $ into $ <var:y>$ . This line moves the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:r> \land <var:y> = <nat:3> * <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:y> = <nat:3> * <var:r> ^ <nat:2> + <nat:8> * <var:r> \} $ . Paying attention to the following step seen in the segment of code , we have the binding line assigning $ <var:y> + <var:G0$ toward $ <var:y>$ . This code moves the condition $ \{ <var:C> = <var:r> \land <var:G0> = <nat:4> \land <var:y> = <nat:3> * <var:r> ^ <nat:2> + <nat:8> * <var:r> \} $ as $ \{ <var:C> = <var:r> \land <var:y> = <nat:3> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:C> = <var:r> }} <var:G0> := <nat:4> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:C> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:C> ; <var:G2> := <var:G2> * <var:C> ; <var:y> := <var:G2> ; <var:y> := <var:y> + <var:G1> ; <var:y> := <var:y> + <var:G0> {{ <var:y> = <nat:3> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:r> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:r> /\ <var:G2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:r> /\ <var:G2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:r> /\ <var:y> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:G0> = <nat:4> /\ <var:y> = <nat:3> * <var:r> ^ <nat:2> + <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:y> = <nat:3> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 