\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <nat:3> + <var:W> * <var:G> ; <var:W> := <nat:4> + <var:W> * <var:G> \end{verbatim} Allow $ <var:G> = <var:Z> $ --- assuming some positive numbers $ <var:Z> $ --- ahead of running our list of commands it holds that we have $ <var:W> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:Z> \} \\ <var:W> := <nat:2> ; \\ \{ <var:G> = <var:Z> \land <var:W> = <nat:2> \} \\ <var:W> := <nat:3> + <var:W> * <var:G> ; \\ \{ <var:G> = <var:Z> \land <var:W> = <nat:2> * <var:Z> + <nat:3> \} \\ <var:W> := <nat:4> + <var:W> * <var:G> \\ \{ <var:G> = <var:Z> \land <var:W> = <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:G> = <var:Z> }} <var:W> := <nat:2> ; <var:W> := <nat:3> + <var:W> * <var:G> ; <var:W> := <nat:4> + <var:W> * <var:G> {{ <var:W> = <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:W> = <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:W> = <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 