\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:i> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:i> ; <var:w2> := <var:w2> * <var:i> ; <var:e> := <var:w2> ; <var:e> := <var:e> + <var:w1> ; <var:e> := <var:e> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Given that $ <var:i> = <var:I> $ before the execution of our series of instructions , then we have $ <var:e> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:5> $ after code terminates . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is evident by typical Hoare reasoning . Advancing , we have the variable assignmet command \verb | <var:w0> := <nat:5> ; | . This takes the precondition $ \{ <var:i> = <var:I> \} $ to the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \} $ . Honing in on the proceeding piece of code seen in our set of instructions , we see the environment update statement \verb | <var:w1> := <nat:7> ; | . This takes the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \} $ to $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \} $ . Moving on to the proceeding line found in our list of commands , the variable update code \verb | <var:w1> := <var:w1> * <var:i> ; | . This statement takes $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \} $ toward $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \} $ . This is known to be sound using the assignment rule defined by Hoare techniques . Taking another step toward the upcoming step found in our set of commands , the environment update code \verb | <var:w2> := <nat:3> ; | . This moves $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \} $ into $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:w2> = <nat:3> \} $ . Moving on to the next step , the variable update statement \verb | <var:w2> := <var:w2> * <var:i> ; | . This line takes the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:w2> = <nat:3> \} $ to the postcondition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:w2> = <nat:3> \cdot <var:I> \} $ . Immediately after , the environment update code assigning $ <var:w2> * <var:i> $ into $ <var:w2>$ . This statement advances $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:w2> = <nat:3> \cdot <var:I> \} $ as the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:w2> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ . This is ensured using the assignment inference rule from typical Hoare logic . Shifting focus toward the following piece of code in the set of commands , we have the assignment statement assigning $ <var:w2> $ into $ <var:e>$ . This advances the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:w2> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ into the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:e> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ . This is given by the assignment inference rule of usual Hoare logic . Stepping forward , we see the variable assignmet code giving $ <var:e> + <var:w1> $ toward $ <var:e>$ . This command redefines the condition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \cdot <var:I> \land <var:e> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ as the postcondition $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:e> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> \} $ . Jumping to the upcoming command seen in our code , the variable update command assigning $ <var:e> + <var:w0$ as $ <var:e>$ . This transfers $ \{ <var:i> = <var:I> \land <var:w0> = <nat:5> \land <var:e> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> \} $ toward the condition $ \{ <var:i> = <var:I> \land <var:e> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> + <nat:5> \} $ . This is ensured using the assignment law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:i> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:i> ; <var:w2> := <var:w2> * <var:i> ; <var:e> := <var:w2> ; <var:e> := <var:e> + <var:w1> ; <var:e> := <var:e> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:i> = <var:I> }} <def:poly> {{ <var:e> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:I> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:I> /\ <var:w2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:I> /\ <var:w2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:I> /\ <var:e> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:w0> = <nat:5> /\ <var:e> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:e> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 