\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:G> ; <var:U2> := <nat:3> ; <var:U2> := <var:U2> * <var:G> ; <var:U2> := <var:U2> * <var:G> ; <var:S> := <var:U2> ; <var:S> := <var:S> + <var:U1> ; <var:S> := <var:S> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Allowing that $ <var:G> = <var:l> $ prior to interpreting this list of commands , then we see $ <var:S> = <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code can be shown through Hoare techniques . Observing the upcoming piece of code found in the program , we see the command binding $ <nat:9> $ to $ <var:U0>$ . This takes the condition $ \{ <var:G> = <var:l> \} $ into $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \} $ . Honing in on the proceeding step seen in the code segment , we have the environment update command letting $ <nat:4> $ into $ <var:U1>$ . This transfers $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \} $ into $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \} $ . Further , we see the binding code defining $ <var:U1> * <var:G> $ into $ <var:U1>$ . This statement takes the precondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \} $ into the postcondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \} $ . This is sound by the assignment law given in usual Hoare reasoning . Advancing to the proceeding piece of code found in our segment of code , the binding command giving $ <nat:3> $ into $ <var:U2>$ . This line forwards the condition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \} $ toward the postcondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:U2> = <nat:3> \} $ . This is given using the assignment rule obtained from standard Hoare logic . Advancing , the binding command giving $ <var:U2> * <var:G> $ as $ <var:U2>$ . This command takes the precondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:U2> = <nat:3> \} $ to the condition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:U2> = <nat:3> \times <var:l> \} $ . This is sound using the assignment rule defined by usual Hoare logic . Going to the next step , the binding code \verb | <var:U2> := <var:U2> * <var:G> ; | . This moves the precondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:U2> = <nat:3> \times <var:l> \} $ to the condition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:U2> = <nat:3> \times <var:l> ^ <nat:2> \} $ . This is sound through the assignment law obtained from standard Hoare reasoning . Shifting focus toward the subsequent bit of code in our set of commands , we see the environment update code \verb | <var:S> := <var:U2> ; | . This command takes $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:U2> = <nat:3> \times <var:l> ^ <nat:2> \} $ into $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:S> = <nat:3> \times <var:l> ^ <nat:2> \} $ . Observing the following line in the series of instructions , we have the variable binding command letting $ <var:S> + <var:U1> $ to $ <var:S>$ . This command transfers the precondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \times <var:l> \land <var:S> = <nat:3> \times <var:l> ^ <nat:2> \} $ into the postcondition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:S> = <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> \} $ . Moving forward to the proceeding piece of code seen in our list of instructions , we see the variable update command assigning $ <var:S> + <var:U0$ to $ <var:S>$ . This takes the condition $ \{ <var:G> = <var:l> \land <var:U0> = <nat:9> \land <var:S> = <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> \} $ to the condition $ \{ <var:G> = <var:l> \land <var:S> = <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:G> ; <var:U2> := <nat:3> ; <var:U2> := <var:U2> * <var:G> ; <var:U2> := <var:U2> * <var:G> ; <var:S> := <var:U2> ; <var:S> := <var:S> + <var:U1> ; <var:S> := <var:S> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:G> = <var:l> }} <def:poly> {{ <var:S> = <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:l> /\ <var:U2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:l> /\ <var:U2> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:l> /\ <var:U2> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:l> /\ <var:S> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:U0> = <nat:9> /\ <var:S> = <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:S> = <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 