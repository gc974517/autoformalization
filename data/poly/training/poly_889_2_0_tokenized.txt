\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:3> ; <var:N> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assume ( with some integers $ <var:k> $ ) that we have $ <var:F> = <var:k> $ prior to interpreting the list of instructions , then we have $ <var:N> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this code segment is shown using typical Hoare logic . Stepping through , we see the line giving $ <nat:3> $ as $ <var:R0>$ . This transfers $ \{ <var:F> = <var:k> \} $ to $ \{ <var:F> = <var:k> \land <var:R0> = <nat:3> \} $ . Following , the variable update line letting $ <var:R0$ as $ <var:N>$ . This statement redefines the precondition $ \{ <var:F> = <var:k> \land <var:R0> = <nat:3> \} $ toward $ \{ <var:F> = <var:k> \land <var:N> = <nat:3> \} $ . This is ensured through the assignment inference rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:3> ; <var:N> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:F> = <var:k> }} <def:poly> {{ <var:N> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:k> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:k> /\ <var:N> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 