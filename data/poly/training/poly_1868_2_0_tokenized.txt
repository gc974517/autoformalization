\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:7> ; <var:o> := <var:a0> \end{verbatim} Allow that $ <var:A> = <var:h> $ before interpreting our list of commands it holds that $ <var:o> = <nat:7> $ once list of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:h> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:A> = <var:h> \land <var:a0> = <nat:7> \} \\ <var:o> := <var:a0> \\ \{ <var:A> = <var:h> \land <var:o> = <nat:7> \} \end{eqnarray} The application of Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:A> = <var:h> }} <var:a0> := <nat:7> ; <var:o> := <var:a0> {{ <var:o> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:o> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 