\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:8> ; <var:M> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Allow that $ <var:W> = <var:c> $ ( given every whole numbers $ <var:c> $ ) ahead of interpreting this series of instructions it must be that $ <var:M> = <nat:8> $ when set of commands has terminated . \end{theorem} \begin{proof} The method of proof for this series of commands can be given using standard Hoare reasoning . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:c> \} & <var:T0> := <nat:8> & \{ <var:W> = <var:c> \land <var:T0> = <nat:8> \} \end{tabular} This is ensured by the assignment law defined in typical Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:W> = <var:c> \} & <var:T0> := <nat:8> & \{ <var:W> = <var:c> \land <var:T0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:8> ; <var:M> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:W> = <var:c> }} <def:poly> {{ <var:M> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 