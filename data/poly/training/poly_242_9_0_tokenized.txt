\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:3> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:p> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:p> ; <var:S2> := <var:S2> * <var:p> ; <var:F> := <var:S2> ; <var:F> := <var:F> + <var:S1> ; <var:F> := <var:F> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assuming for positive integer coefficients $ <var:K> $ it to be that $ <var:p> = <var:K> $ prior to running the list of instructions , it must be that $ <var:F> = <nat:5> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives : \begin{eqnarray} \{ <var:p> = <var:K> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \} \\ <var:S1> := <nat:2> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> \} \\ <var:S1> := <var:S1> * <var:p> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> * <var:K> \} \\ <var:S2> := <nat:5> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> * <var:K> \land <var:S2> = <nat:5> \} \\ <var:S2> := <var:S2> * <var:p> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> * <var:K> \land <var:S2> = <nat:5> * <var:K> \} \\ <var:S2> := <var:S2> * <var:p> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> * <var:K> \land <var:S2> = <nat:5> * <var:K> ^ <nat:2> \} \\ <var:F> := <var:S2> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> * <var:K> \land <var:F> = <nat:5> * <var:K> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:S1> ; \\ \{ <var:p> = <var:K> \land <var:S0> = <nat:3> \land <var:F> = <nat:5> * <var:K> ^ <nat:2> + <nat:2> * <var:K> \} \\ <var:F> := <var:F> + <var:S0> \\ \{ <var:p> = <var:K> \land <var:F> = <nat:5> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> \} \end{eqnarray} Furthering executing this series of instructions gives : \begin{eqnarray} \end{eqnarray} Thus , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:3> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:p> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:p> ; <var:S2> := <var:S2> * <var:p> ; <var:F> := <var:S2> ; <var:F> := <var:F> + <var:S1> ; <var:F> := <var:F> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:p> = <var:K> }} <def:poly> {{ <var:F> = <nat:5> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> * <var:K> /\ <var:S2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> * <var:K> /\ <var:S2> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> * <var:K> /\ <var:S2> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> * <var:K> /\ <var:F> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:S0> = <nat:3> /\ <var:F> = <nat:5> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:F> = <nat:5> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 