\begin{document} \begin{theorem} Consider the following program : \begin{verbatim} <var:T0> := <nat:7> ; <var:c> := <var:T0> \end{verbatim} Allowing that $ <var:Y> = <var:R> $ before running this code segment , it holds that $ <var:c> = <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is shown using standard Hoare techniques . Taking another step toward the subsequent piece of code contained in the program , we have the variable update code \verb | <var:T0> := <nat:7> ; | . This code forwards the precondition $ \{ <var:Y> = <var:R> \} $ as the postcondition $ \{ <var:Y> = <var:R> \land <var:T0> = <nat:7> \} $ . This is ensured by the assignment law from standard Hoare reasoning . Focusing on the next bit of code seen in the series of instructions , we have the environment update statement \verb | <var:c> := <var:T0> | . This line moves $ \{ <var:Y> = <var:R> \land <var:T0> = <nat:7> \} $ to $ \{ <var:Y> = <var:R> \land <var:c> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Y> = <var:R> }} <var:T0> := <nat:7> ; <var:c> := <var:T0> {{ <var:c> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:R> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:R> /\ <var:c> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 