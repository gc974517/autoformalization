\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:6> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:I> ; <var:A2> := <nat:7> ; <var:A2> := <var:A2> * <var:I> ; <var:A2> := <var:A2> * <var:I> ; <var:r> := <var:A2> ; <var:r> := <var:r> + <var:A1> ; <var:r> := <var:r> + <var:A0> \end{verbatim} Assume $ <var:I> = <var:X> $ before interpreting our set of commands then we have $ <var:r> = <nat:7> \times <var:X> ^ <nat:2> + <nat:5> \times <var:X> + <nat:6> $ after set of instructions executes . \end{theorem} \begin{proof} The argument for this set of instructions is shown by standard Hoare logic . Advancing to the next step , we see \verb | { <var:I> = <var:X> } <var:A0> := <nat:6> { <var:I> = <var:X> \land <var:A0> = <nat:6> } | . Moving forward to the next step , \verb | { <var:I> = <var:X> } <var:A0> := <nat:6> { <var:I> = <var:X> \land <var:A0> = <nat:6> } | , \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> } <var:A1> := <nat:5> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> } | , \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> } <var:A1> := <var:A1> * <var:I> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> } | , \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> } <var:A2> := <nat:7> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:A2> = <nat:7> } | , \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:A2> = <nat:7> } <var:A2> := <var:A2> * <var:I> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:A2> = <nat:7> \cdot <var:X> } | , \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:A2> = <nat:7> \cdot <var:X> } <var:A2> := <var:A2> * <var:I> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:A2> = <nat:7> \cdot <var:X> ^ <nat:2> } | , \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:A2> = <nat:7> \cdot <var:X> ^ <nat:2> } <var:r> := <var:A2> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:r> = <nat:7> \cdot <var:X> ^ <nat:2> } | and \verb | { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:A1> = <nat:5> \cdot <var:X> \land <var:r> = <nat:7> \cdot <var:X> ^ <nat:2> } <var:r> := <var:r> + <var:A1> { <var:I> = <var:X> \land <var:A0> = <nat:6> \land <var:r> = <nat:7> \cdot <var:X> ^ <nat:2> + <nat:5> \cdot <var:X> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:I> = <var:X> }} <var:A0> := <nat:6> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:I> ; <var:A2> := <nat:7> ; <var:A2> := <var:A2> * <var:I> ; <var:A2> := <var:A2> * <var:I> ; <var:r> := <var:A2> ; <var:r> := <var:r> + <var:A1> ; <var:r> := <var:r> + <var:A0> {{ <var:r> = <nat:7> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:5> * <var:X> /\ <var:A2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:5> * <var:X> /\ <var:A2> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:5> * <var:X> /\ <var:A2> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:5> * <var:X> /\ <var:r> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:A0> = <nat:6> /\ <var:r> = <nat:7> * <var:X> ^ <nat:2> + <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:r> = <nat:7> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 