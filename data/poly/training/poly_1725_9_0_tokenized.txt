\begin{document} \begin{theorem} Consider a list of commands such that \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:i> ; <var:U2> := <nat:6> ; <var:U2> := <var:U2> * <var:i> ; <var:U2> := <var:U2> * <var:i> ; <var:n> := <var:U2> ; <var:n> := <var:n> + <var:U1> ; <var:n> := <var:n> + <var:U0> \end{verbatim} Assume it to hold that $ <var:i> = <var:l> $ prior to executing our set of instructions it holds that we see $ <var:n> = <nat:6> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> + <nat:7> $ after list of commands has terminated . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:i> = <var:l> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \} \\ <var:U1> := <nat:8> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \} \\ <var:U1> := <var:U1> * <var:i> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \times <var:l> \} \\ <var:U2> := <nat:6> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \times <var:l> \land <var:U2> = <nat:6> \} \\ <var:U2> := <var:U2> * <var:i> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \times <var:l> \land <var:U2> = <nat:6> \times <var:l> \} \\ <var:U2> := <var:U2> * <var:i> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \times <var:l> \land <var:U2> = <nat:6> \times <var:l> ^ <nat:2> \} \\ <var:n> := <var:U2> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \times <var:l> \land <var:n> = <nat:6> \times <var:l> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:U1> ; \\ \{ <var:i> = <var:l> \land <var:U0> = <nat:7> \land <var:n> = <nat:6> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> \} \\ <var:n> := <var:n> + <var:U0> \\ \{ <var:i> = <var:l> \land <var:n> = <nat:6> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:7> \} \end{eqnarray} Given the above , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:i> = <var:l> }} <var:U0> := <nat:7> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:i> ; <var:U2> := <nat:6> ; <var:U2> := <var:U2> * <var:i> ; <var:U2> := <var:U2> * <var:i> ; <var:n> := <var:U2> ; <var:n> := <var:n> + <var:U1> ; <var:n> := <var:n> + <var:U0> {{ <var:n> = <nat:6> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:l> /\ <var:U2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:l> /\ <var:U2> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:l> /\ <var:U2> = <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:l> /\ <var:n> = <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:U0> = <nat:7> /\ <var:n> = <nat:6> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n> = <nat:6> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 