\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:R> ; <var:d2> := <var:d1> * <var:R> ; <var:d3> := <var:d2> * <var:R> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:9> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:9> ; <var:j> := <var:d3> <var:j> := <var:j> + <var:d2> <var:j> := <var:j> + <var:d1> <var:j> := <var:j> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assume that we have $ <var:R> = <var:N> $ ahead of the execution of our program it follows that we have $ <var:j> = <nat:9> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:1> $ after code segment has finished . \end{theorem} \begin{proof} The argument for this program can be demonstrated using typical Hoare reasoning . Considering the upcoming piece of code found in our code , the binding command yielding $ <var:R> $ into $ <var:d1>$ . This transfers the condition $ \{ <var:R> = <var:N> \} $ into the condition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \} $ . This is shown with the assignment inference rule obtained from usual Hoare techniques . Observing the subsequent statement in the series of commands , we have the environment update command \verb | <var:d2> := <var:d1> * <var:R> ; | . This redefines the precondition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \} $ to $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} $ . Paying attention to the next bit of code in our code segment , the environment update code \verb | <var:d3> := <var:d2> * <var:R> ; | . This line transfers the condition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \} $ . This is sound through the assignment law of usual Hoare techniques . Shifting focus toward the following statement found in our code , the variable update code \verb | <var:d0> := <nat:1> ; | . This transfers the precondition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \} $ to the condition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . This is known to be sound using the assignment law given by Hoare logic . After , the variable binding statement \verb | <var:d1> := <var:d1> * <nat:9> ; | . This line redefines the condition $ \{ <var:R> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ toward $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . This is deduced with the assignment rule obtained from standard Hoare techniques . Looking at the following step seen in our list of instructions , we have the variable update statement \verb | <var:d2> := <var:d2> * <nat:2> ; | . This command transfers the condition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ to the condition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . Stepping forward , we see the variable assignmet command \verb | <var:d3> := <var:d3> * <nat:9> ; | . This advances the precondition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ to the condition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . This is shown using the assignment inference rule given in typical Hoare reasoning . Considering the next bit of code seen in our set of commands , we see the code yielding $ <var:d3$ toward $ <var:j>$ . This command moves the condition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:N> ^ <nat:3> \land <var:d0> = <nat:1> \} $ toward the condition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> \} $ . Immediately after , we have the variable assignmet command \verb | <var:j> := <var:j> + <var:d2> | . This moves the condition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d0> = <nat:1> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> \} $ . After , the variable assignmet line defining $ <var:j> + <var:d1$ to $ <var:j>$ . This command takes the precondition $ \{ <var:R> = <var:N> \land <var:d1> = <nat:9> \cdot <var:N> \land <var:d0> = <nat:1> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> \} $ into $ \{ <var:R> = <var:N> \land <var:d0> = <nat:1> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> \} $ . Looking at the following command seen in our segment of code , the binding line \verb | <var:j> := <var:j> + <var:d0> | . This forwards the condition $ \{ <var:R> = <var:N> \land <var:d0> = <nat:1> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> \} $ into $ \{ <var:R> = <var:N> \land <var:j> = <nat:9> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:R> ; <var:d2> := <var:d1> * <var:R> ; <var:d3> := <var:d2> * <var:R> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:9> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:9> ; <var:j> := <var:d3> <var:j> := <var:j> + <var:d2> <var:j> := <var:j> + <var:d1> <var:j> := <var:j> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:R> = <var:N> }} <def:poly> {{ <var:j> = <nat:9> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <nat:9> * <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <nat:9> * <var:N> /\ <var:d2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <nat:9> * <var:N> /\ <var:d2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:N> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <nat:9> * <var:N> /\ <var:d2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:d0> = <nat:1> /\ <var:j> = <nat:9> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d1> = <nat:9> * <var:N> /\ <var:d0> = <nat:1> /\ <var:j> = <nat:9> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:d0> = <nat:1> /\ <var:j> = <nat:9> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:j> = <nat:9> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 