\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:9> ; <var:X> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:g> = <var:f> $ before running our program it follows that we have $ <var:X> = <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is accomplished with usual Hoare techniques . Honing in on the following bit of code contained in the code , we have the binding statement defining $ <nat:9> $ as $ <var:t0>$ . This line forwards the precondition $ \{ <var:g> = <var:f> \} $ as the condition $ \{ <var:g> = <var:f> \land <var:t0> = <nat:9> \} $ . This is guaranteed by the assignment scheme given by Hoare techniques . Advancing to the next step , we have the variable binding statement giving $ <var:t0$ as $ <var:X>$ . This code moves the condition $ \{ <var:g> = <var:f> \land <var:t0> = <nat:9> \} $ as the postcondition $ \{ <var:g> = <var:f> \land <var:X> = <nat:9> \} $ . This is shown to be logically sound by the assignment inference rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:9> ; <var:X> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:g> = <var:f> }} <def:poly> {{ <var:X> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:X> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 