\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:2> ; <var:N> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for some positive coefficients $ <var:X> $ ) it to be that $ <var:f> = <var:X> $ before the execution of our list of commands , it follows that $ <var:N> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions can be shown through Hoare techniques . Advancing , we have the variable update line assigning $ <nat:2> $ toward $ <var:V0>$ . This code transfers the condition $ \{ <var:f> = <var:X> \} $ into the postcondition $ \{ <var:f> = <var:X> \land <var:V0> = <nat:2> \} $ . Paying attention to the subsequent line found in the segment of code , we see the binding code \verb | <var:N> := <var:V0> | . This moves the precondition $ \{ <var:f> = <var:X> \land <var:V0> = <nat:2> \} $ to the condition $ \{ <var:f> = <var:X> \land <var:N> = <nat:2> \} $ . This is rigorously given through the assignment rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:2> ; <var:N> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <def:poly> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 