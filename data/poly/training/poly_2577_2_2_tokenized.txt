\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:4> + <var:W> * <var:I> \end{verbatim} Given it to hold that $ <var:I> = <var:Q> $ ahead of evaluating our program it must be that we see $ <var:W> = <nat:1> \times <var:Q> + <nat:4> $ when code segment has terminated . \end{theorem} \begin{proof} Note that the following decorated set of instructions . \begin{eqnarray} \{ <var:I> = <var:Q> \} \\ <var:W> := <nat:1> ; \\ \{ <var:I> = <var:Q> \land <var:W> = <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:I> \\ \{ <var:I> = <var:Q> \land <var:W> = <nat:1> * <var:Q> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:I> = <var:Q> }} <var:W> := <nat:1> ; <var:W> := <nat:4> + <var:W> * <var:I> {{ <var:W> = <nat:1> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:W> = <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 