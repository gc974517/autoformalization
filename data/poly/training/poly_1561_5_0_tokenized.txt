\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:T> ; <var:w> := <var:l1> ; <var:w> := <var:w> + <var:l0> \end{verbatim} Allowing it to hold that $ <var:T> = <var:V> $ ahead of the execution of our segment of code , it follows that we see $ <var:w> = <nat:2> * <var:V> + <nat:5> $ when list of instructions finishes . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:T> = <var:V> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:T> = <var:V> \land <var:l0> = <nat:5> \} \\ <var:l1> := <nat:2> ; \\ \{ <var:T> = <var:V> \land <var:l0> = <nat:5> \land <var:l1> = <nat:2> \} \\ <var:l1> := <var:l1> * <var:T> ; \\ \{ <var:T> = <var:V> \land <var:l0> = <nat:5> \land <var:l1> = <nat:2> \times <var:V> \} \\ <var:w> := <var:l1> ; \\ \{ <var:T> = <var:V> \land <var:l0> = <nat:5> \land <var:w> = <nat:2> \times <var:V> \} \\ <var:w> := <var:w> + <var:l0> \\ \{ <var:T> = <var:V> \land <var:w> = <nat:2> \times <var:V> + <nat:5> \} \end{eqnarray} As a result , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:T> = <var:V> }} <var:l0> := <nat:5> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:T> ; <var:w> := <var:l1> ; <var:w> := <var:w> + <var:l0> {{ <var:w> = <nat:2> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:l0> = <nat:5> /\ <var:w> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:w> = <nat:2> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 