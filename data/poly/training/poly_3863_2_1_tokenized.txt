\begin{document} \begin{theorem} Define the following list of commands as \begin{verbatim} <var:t0> := <nat:4> ; <var:F> := <var:t0> \end{verbatim} Assuming that $ <var:x> = <var:P> $ ( for all positive numbers $ <var:P> $ ) ahead of the execution of the set of instructions , it holds that $ <var:F> = <nat:4> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:P> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:x> = <var:P> \land <var:t0> = <nat:4> \} \\ <var:F> := <var:t0> \\ \{ <var:x> = <var:P> \land <var:F> = <nat:4> \} \end{eqnarray} Considering the above , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:x> = <var:P> }} <var:t0> := <nat:4> ; <var:F> := <var:t0> {{ <var:F> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:F> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 