\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:3> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:O> ; <var:P> := <var:H1> ; <var:P> := <var:P> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Allow ( letting $ <var:u> $ ) that we have $ <var:O> = <var:u> $ before interpreting our list of instructions , it follows that we see $ <var:P> = <nat:9> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is clear by the following decorated set of instructions . \begin{eqnarray} \{ <var:O> = <var:u> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:O> = <var:u> \land <var:H0> = <nat:3> \} \\ <var:H1> := <nat:9> ; \\ \{ <var:O> = <var:u> \land <var:H0> = <nat:3> \land <var:H1> = <nat:9> \} \\ <var:H1> := <var:H1> * <var:O> ; \\ \{ <var:O> = <var:u> \land <var:H0> = <nat:3> \land <var:H1> = <nat:9> * <var:u> \} \\ <var:P> := <var:H1> ; \\ \{ <var:O> = <var:u> \land <var:H0> = <nat:3> \land <var:P> = <nat:9> * <var:u> \} \\ <var:P> := <var:P> + <var:H0> \\ \{ <var:O> = <var:u> \land <var:P> = <nat:9> * <var:u> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:3> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:O> ; <var:P> := <var:H1> ; <var:P> := <var:P> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:O> = <var:u> }} <def:poly> {{ <var:P> = <nat:9> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:H0> = <nat:3> /\ <var:P> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:P> = <nat:9> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 