\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:E1> := <var:A> ; <var:E2> := <var:E1> * <var:A> ; <var:E3> := <var:E2> * <var:A> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:3> ; <var:E3> := <var:E3> * <nat:1> ; <var:W> := <var:E3> <var:W> := <var:W> + <var:E2> <var:W> := <var:W> + <var:E1> <var:W> := <var:W> + <var:E0> \end{verbatim} Given that we have $ <var:A> = <var:s> $ --- taking natural numbers $ <var:s> $ --- before the evaluation of our code it follows that we see $ <var:W> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:1> $ once segment of code has finished . \end{theorem} \begin{proof} The argument for the set of commands can be demonstrated with usual Hoare logic . Stepping forward , \begin{verbatim} { <var:A> = <var:s> } <var:E1> := <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> } { <var:A> = <var:s> \land <var:E1> = <var:s> } <var:E2> := <var:E1> * <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> } { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> } <var:E3> := <var:E2> * <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> } { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> } <var:E0> := <nat:1> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> } \end{verbatim} Following , \begin{verbatim} { <var:A> = <var:s> } <var:E1> := <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> } { <var:A> = <var:s> \land <var:E1> = <var:s> } <var:E2> := <var:E1> * <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> } { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> } <var:E3> := <var:E2> * <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> } { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> } <var:E0> := <nat:1> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> } { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> } <var:E1> := <var:E1> * <nat:4> { <var:A> = <var:s> \land <var:E1> = <nat:4> \times <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> } \end{verbatim} Shifting focus toward the subsequent commands contained in our list of instructions , we have \begin{verbatim} { <var:A> = <var:s> } <var:E1> := <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> } { <var:A> = <var:s> \land <var:E1> = <var:s> } <var:E2> := <var:E1> * <var:A> { <var:A> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:A> = <var:s> }} <var:E1> := <var:A> ; <var:E2> := <var:E1> * <var:A> ; <var:E3> := <var:E2> * <var:A> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:3> ; <var:E3> := <var:E3> * <nat:1> ; <var:W> := <var:E3> <var:W> := <var:W> + <var:E2> <var:W> := <var:W> + <var:E1> <var:W> := <var:W> + <var:E0> {{ <var:W> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <nat:4> * <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <nat:4> * <var:s> /\ <var:E2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <nat:4> * <var:s> /\ <var:E2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:E3> = <nat:1> * <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <nat:4> * <var:s> /\ <var:E2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:E0> = <nat:1> /\ <var:W> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E1> = <nat:4> * <var:s> /\ <var:E0> = <nat:1> /\ <var:W> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:E0> = <nat:1> /\ <var:W> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:W> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 