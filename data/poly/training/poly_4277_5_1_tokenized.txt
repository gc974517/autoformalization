\begin{document} \begin{theorem} Consider the following code such that \begin{verbatim} <var:N1> := <var:h> ; <var:N0> := <nat:6> ; <var:N1> := <var:N1> * <nat:6> ; <var:x> := <var:N1> <var:x> := <var:x> + <var:N0> \end{verbatim} Given that $ <var:h> = <var:E> $ given some $ <var:E> \in \mathbb{N} $ prior to the evaluation of the set of commands it follows that we see $ <var:x> = <nat:6> * <var:E> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is shown using Hoare logic . Moving forward to the next lines contained in the program , we have \begin{eqnarray} \{ <var:h> = <var:E> \} \, <var:N1> := <var:h> \, \{ <var:h> = <var:E> \land <var:N1> = <var:E> \} \\ \{ <var:h> = <var:E> \land <var:N1> = <var:E> \} \, <var:N0> := <nat:6> \, \{ <var:h> = <var:E> \land <var:N1> = <var:E> \land <var:N0> = <nat:6> \} \\ \{ <var:h> = <var:E> \land <var:N1> = <var:E> \land <var:N0> = <nat:6> \} \, <var:N1> := <var:N1> * <nat:6> \, \{ <var:h> = <var:E> \land <var:N1> = <nat:6> * <var:E> \land <var:N0> = <nat:6> \} \\ \{ <var:h> = <var:E> \land <var:N1> = <nat:6> * <var:E> \land <var:N0> = <nat:6> \} \, <var:x> := <var:N1\, \{ <var:h> = <var:E> \land <var:N0> = <nat:6> \land <var:x> = <nat:6> * <var:E> \} \\ \{ <var:h> = <var:E> \land <var:N0> = <nat:6> \land <var:x> = <nat:6> * <var:E> \} \, <var:x> := <var:x> + <var:N0\, \{ <var:h> = <var:E> \land <var:x> = <nat:6> * <var:E> + <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:h> = <var:E> }} <var:N1> := <var:h> ; <var:N0> := <nat:6> ; <var:N1> := <var:N1> * <nat:6> ; <var:x> := <var:N1> <var:x> := <var:x> + <var:N0> {{ <var:x> = <nat:6> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:N1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:N1> = <var:E> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:N1> = <nat:6> * <var:E> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:N0> = <nat:6> /\ <var:x> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:x> = <nat:6> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 