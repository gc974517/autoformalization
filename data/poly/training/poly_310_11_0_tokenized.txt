\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:3> ; <var:P2> := <nat:5> ; <var:P2> := <var:P2> * <var:W> ; <var:P2> := <var:P2> * <var:W> ; <var:P3> := <nat:7> ; <var:P3> := <var:P3> * <var:W> ; <var:P3> := <var:P3> * <var:W> ; <var:P3> := <var:P3> * <var:W> ; <var:n> := <var:P3> ; <var:n> := <var:n> + <var:P2> ; <var:n> := <var:n> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Assume $ <var:W> = <var:C> $ , taking positive integer coefficients $ <var:C> $ , ahead of evaluating the program then we see $ <var:n> = <nat:7> \times <var:C> ^ <nat:3> + <nat:5> \times <var:C> ^ <nat:2> + <nat:3> $ after code segment has exited . \end{theorem} \begin{proof} The argument for our list of commands is evident using standard Hoare techniques . Moving on to the following piece of code seen in the series of instructions , we have the binding statement \verb | <var:P0> := <nat:3> ; | . This line takes the condition $ \{ <var:W> = <var:C> \} $ into the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \} $ . Further , we have the assignment command \verb | <var:P2> := <nat:5> ; | . This command transfers $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \} $ into the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \} $ . This is guaranteed with the assignment scheme of standard Hoare techniques . Moving forward , the binding command yielding $ <var:P2> * <var:W> $ toward $ <var:P2>$ . This code moves the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \} $ as the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> \} $ . Following , we see the binding code letting $ <var:P2> * <var:W> $ toward $ <var:P2>$ . This advances $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> \} $ as the postcondition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \} $ . Taking another step toward the following line contained in our series of commands , we have the line yielding $ <nat:7> $ to $ <var:P3>$ . This moves the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \} $ toward $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \} $ . This is ensured with the assignment rule defined in Hoare techniques . Considering the proceeding piece of code contained in our segment of code , the assignment line binding $ <var:P3> * <var:W> $ toward $ <var:P3>$ . This takes $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \} $ to $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:C> \} $ . Moving forward to the subsequent step in our series of instructions , we see the variable assignmet code \verb | <var:P3> := <var:P3> * <var:W> ; | . This redefines $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:C> \} $ to $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:C> ^ <nat:2> \} $ . This is deduced through the assignment rule defined in typical Hoare techniques . Observing the subsequent piece of code in our code , we see the command yielding $ <var:P3> * <var:W> $ into $ <var:P3>$ . This takes the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:C> ^ <nat:2> \} $ toward the postcondition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:C> ^ <nat:3> \} $ . Jumping to the proceeding statement seen in the segment of code , we have the environment update command \verb | <var:n> := <var:P3> ; | . This transfers the condition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:C> ^ <nat:3> \} $ into $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:n> = <nat:7> \cdot <var:C> ^ <nat:3> \} $ . Going to the next step , we have the command \verb | <var:n> := <var:n> + <var:P2> ; | . This code redefines $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:P2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:n> = <nat:7> \cdot <var:C> ^ <nat:3> \} $ to the postcondition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:n> = <nat:7> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> \} $ . This is shown with the assignment inference rule in usual Hoare logic . Further , we see the variable binding command \verb | <var:n> := <var:n> + <var:P0> | . This forwards the precondition $ \{ <var:W> = <var:C> \land <var:P0> = <nat:3> \land <var:n> = <nat:7> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> \} $ as the condition $ \{ <var:W> = <var:C> \land <var:n> = <nat:7> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P0> := <nat:3> ; <var:P2> := <nat:5> ; <var:P2> := <var:P2> * <var:W> ; <var:P2> := <var:P2> * <var:W> ; <var:P3> := <nat:7> ; <var:P3> := <var:P3> * <var:W> ; <var:P3> := <var:P3> * <var:W> ; <var:P3> := <var:P3> * <var:W> ; <var:n> := <var:P3> ; <var:n> := <var:n> + <var:P2> ; <var:n> := <var:n> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:W> = <var:C> }} <def:poly> {{ <var:n> = <nat:7> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:P3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:n> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:P0> = <nat:3> /\ <var:n> = <nat:7> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:C> /\ <var:n> = <nat:7> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 