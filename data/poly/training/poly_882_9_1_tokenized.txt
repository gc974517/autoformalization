\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:t> ; <var:V2> := <var:V1> * <var:t> ; <var:V3> := <var:V2> * <var:t> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:8> ; <var:V3> := <var:V3> * <nat:2> ; <var:F> := <var:V3> <var:F> := <var:F> + <var:V1> <var:F> := <var:F> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given given all positive numbers $ <var:g> $ that $ <var:t> = <var:g> $ before evaluating this series of commands , then we see $ <var:F> = <nat:2> \times <var:g> ^ <nat:3> + <nat:8> \times <var:g> + <nat:1> $ when code segment has terminated . \end{theorem} \begin{proof} The proof of our code is given through usual Hoare reasoning . Immediately after , we see \begin{verbatim} { <var:t> = <var:g> } <var:V1> := <var:t> { <var:t> = <var:g> \land <var:V1> = <var:g> } { <var:t> = <var:g> \land <var:V1> = <var:g> } <var:V2> := <var:V1> * <var:t> { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> } { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> } <var:V3> := <var:V2> * <var:t> { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <var:g> ^ <nat:3> } { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <var:g> ^ <nat:3> } <var:V0> := <nat:1> { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <var:g> ^ <nat:3> \land <var:V0> = <nat:1> } { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <var:g> ^ <nat:3> \land <var:V0> = <nat:1> } <var:V1> := <var:V1> * <nat:8> { <var:t> = <var:g> \land <var:V1> = <nat:8> * <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <var:g> ^ <nat:3> \land <var:V0> = <nat:1> } { <var:t> = <var:g> \land <var:V1> = <nat:8> * <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <var:g> ^ <nat:3> \land <var:V0> = <nat:1> } <var:V3> := <var:V3> * <nat:2> { <var:t> = <var:g> \land <var:V1> = <nat:8> * <var:g> \land <var:V2> = <var:g> ^ <nat:2> \land <var:V3> = <nat:2> * <var:g> ^ <nat:3> \land <var:V0> = <nat:1> } \end{verbatim} This is shown through the binding rule defined by Hoare logic . Advancing to the proceeding lines seen in the code segment , we have \begin{verbatim} { <var:t> = <var:g> } <var:V1> := <var:t> { <var:t> = <var:g> \land <var:V1> = <var:g> } { <var:t> = <var:g> \land <var:V1> = <var:g> } <var:V2> := <var:V1> * <var:t> { <var:t> = <var:g> \land <var:V1> = <var:g> \land <var:V2> = <var:g> ^ <nat:2> } \end{verbatim} Taking another step toward the following line found in our set of commands , we have \begin{verbatim} { <var:t> = <var:g> } <var:V1> := <var:t> { <var:t> = <var:g> \land <var:V1> = <var:g> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:t> ; <var:V2> := <var:V1> * <var:t> ; <var:V3> := <var:V2> * <var:t> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:8> ; <var:V3> := <var:V3> * <nat:2> ; <var:F> := <var:V3> <var:F> := <var:F> + <var:V1> <var:F> := <var:F> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:t> = <var:g> }} <def:poly> {{ <var:F> = <nat:2> * <var:g> ^ <nat:3> + <nat:8> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <var:g> /\ <var:V2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <var:g> /\ <var:V2> = <var:g> ^ <nat:2> /\ <var:V3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <var:g> /\ <var:V2> = <var:g> ^ <nat:2> /\ <var:V3> = <var:g> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <nat:8> * <var:g> /\ <var:V2> = <var:g> ^ <nat:2> /\ <var:V3> = <var:g> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <nat:8> * <var:g> /\ <var:V2> = <var:g> ^ <nat:2> /\ <var:V3> = <nat:2> * <var:g> ^ <nat:3> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V1> = <nat:8> * <var:g> /\ <var:V2> = <var:g> ^ <nat:2> /\ <var:V0> = <nat:1> /\ <var:F> = <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:V0> = <nat:1> /\ <var:F> = <nat:2> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:F> = <nat:2> * <var:g> ^ <nat:3> + <nat:8> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 