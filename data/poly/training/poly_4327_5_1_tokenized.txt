\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:z> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:m> := <var:N1> <var:m> := <var:m> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:z> = <var:o> $ --- for all $ <var:o> \in \mathbb{Z}^+ $ --- prior to evaluating the series of instructions it must be that $ <var:m> = <nat:3> * <var:o> + <nat:1> $ when list of commands has executed . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be seen using usual Hoare reasoning . Moving forward to the next step , we have the variable assignmet line \verb | <var:N1> := <var:z> ; | . This code takes $ \{ <var:z> = <var:o> \} $ as the condition $ \{ <var:z> = <var:o> \land <var:N1> = <var:o> \} $ . This is guaranteed using the assignment rule defined in usual Hoare logic . Further , the variable assignmet code \verb | <var:N0> := <nat:1> ; | . This code moves the condition $ \{ <var:z> = <var:o> \land <var:N1> = <var:o> \} $ as $ \{ <var:z> = <var:o> \land <var:N1> = <var:o> \land <var:N0> = <nat:1> \} $ . Advancing on , we have the variable assignmet statement \verb | <var:N1> := <var:N1> * <nat:3> ; | . This takes $ \{ <var:z> = <var:o> \land <var:N1> = <var:o> \land <var:N0> = <nat:1> \} $ toward the condition $ \{ <var:z> = <var:o> \land <var:N1> = <nat:3> \times <var:o> \land <var:N0> = <nat:1> \} $ . This is guaranteed through the assignment inference rule defined by typical Hoare techniques . Taking another step toward the proceeding statement contained in our list of instructions , the variable assignmet command \verb | <var:m> := <var:N1> | . This statement advances the precondition $ \{ <var:z> = <var:o> \land <var:N1> = <nat:3> \times <var:o> \land <var:N0> = <nat:1> \} $ into the condition $ \{ <var:z> = <var:o> \land <var:N0> = <nat:1> \land <var:m> = <nat:3> \times <var:o> \} $ . Moving on , we see the variable assignmet statement \verb | <var:m> := <var:m> + <var:N0> | . This moves the condition $ \{ <var:z> = <var:o> \land <var:N0> = <nat:1> \land <var:m> = <nat:3> \times <var:o> \} $ to the condition $ \{ <var:z> = <var:o> \land <var:m> = <nat:3> \times <var:o> + <nat:1> \} $ . This is sound by the assignment inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:z> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:m> := <var:N1> <var:m> := <var:m> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <def:poly> {{ <var:m> = <nat:3> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:N1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:N1> = <var:o> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:N1> = <nat:3> * <var:o> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:N0> = <nat:1> /\ <var:m> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:m> = <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 