\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:2> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:I> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:I> ; <var:h2> := <var:h2> * <var:I> ; <var:Y> := <var:h2> ; <var:Y> := <var:Y> + <var:h1> ; <var:Y> := <var:Y> + <var:h0> \end{verbatim} Allowing $ <var:I> = <var:n> $ before the evaluation of this set of commands , it holds that we see $ <var:Y> = <nat:6> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> + <nat:2> $ once segment of code executes . \end{theorem} \begin{proof} Proving correctness for this list of commands is evident by the below decorated set of instructions . \begin{eqnarray} \{ <var:I> = <var:n> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \} \\ <var:h1> := <nat:6> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:h1> = <nat:6> \} \\ <var:h1> := <var:h1> * <var:I> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:h1> = <nat:6> \times <var:n> \} \\ <var:h2> := <nat:6> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:h1> = <nat:6> \times <var:n> \land <var:h2> = <nat:6> \} \\ <var:h2> := <var:h2> * <var:I> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:h1> = <nat:6> \times <var:n> \land <var:h2> = <nat:6> \times <var:n> \} \\ <var:h2> := <var:h2> * <var:I> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:h1> = <nat:6> \times <var:n> \land <var:h2> = <nat:6> \times <var:n> ^ <nat:2> \} \\ <var:Y> := <var:h2> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:h1> = <nat:6> \times <var:n> \land <var:Y> = <nat:6> \times <var:n> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:h1> ; \\ \{ <var:I> = <var:n> \land <var:h0> = <nat:2> \land <var:Y> = <nat:6> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> \} \\ <var:Y> := <var:Y> + <var:h0> \\ \{ <var:I> = <var:n> \land <var:Y> = <nat:6> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> + <nat:2> \} \end{eqnarray} Using typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <var:h0> := <nat:2> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:I> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:I> ; <var:h2> := <var:h2> * <var:I> ; <var:Y> := <var:h2> ; <var:Y> := <var:Y> + <var:h1> ; <var:Y> := <var:Y> + <var:h0> {{ <var:Y> = <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:6> * <var:n> /\ <var:h2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:6> * <var:n> /\ <var:h2> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:6> * <var:n> /\ <var:h2> = <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:6> * <var:n> /\ <var:Y> = <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:h0> = <nat:2> /\ <var:Y> = <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:Y> = <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 