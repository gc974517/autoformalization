\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:3> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:o> ; <var:c> := <var:K1> ; <var:c> := <var:c> + <var:K0> \end{verbatim} Given it to hold that $ <var:o> = <var:H> $ ahead of executing our series of instructions , then we see $ <var:c> = <nat:7> \cdot <var:H> + <nat:3> $ once series of instructions is done . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:o> = <var:H> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:o> = <var:H> \land <var:K0> = <nat:3> \} \\ <var:K1> := <nat:7> ; \\ \{ <var:o> = <var:H> \land <var:K0> = <nat:3> \land <var:K1> = <nat:7> \} \\ <var:K1> := <var:K1> * <var:o> ; \\ \{ <var:o> = <var:H> \land <var:K0> = <nat:3> \land <var:K1> = <nat:7> \times <var:H> \} \\ <var:c> := <var:K1> ; \\ \{ <var:o> = <var:H> \land <var:K0> = <nat:3> \land <var:c> = <nat:7> \times <var:H> \} \\ <var:c> := <var:c> + <var:K0> \\ \{ <var:o> = <var:H> \land <var:c> = <nat:7> \times <var:H> + <nat:3> \} \end{eqnarray} Therefore , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:o> = <var:H> }} <var:K0> := <nat:3> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:o> ; <var:c> := <var:K1> ; <var:c> := <var:c> + <var:K0> {{ <var:c> = <nat:7> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:K0> = <nat:3> /\ <var:c> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:c> = <nat:7> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 