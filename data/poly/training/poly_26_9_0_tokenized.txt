\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:Q> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:Q> ; <var:k2> := <var:k2> * <var:Q> ; <var:v> := <var:k2> ; <var:v> := <var:v> + <var:k1> ; <var:v> := <var:v> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:Q> = <var:O> $ --- letting positive numbers $ <var:O> $ --- ahead of the execution of our code segment , it follows that we see $ <var:v> = <nat:5> \times <var:O> ^ <nat:2> + <nat:8> \times <var:O> + <nat:2> $ when code terminates . \end{theorem} \begin{proof} The way to prove correctness for our code segment can be given through this decorated program . \begin{eqnarray} \{ <var:Q> = <var:O> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \} \\ <var:k1> := <nat:8> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> \} \\ <var:k1> := <var:k1> * <var:Q> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:O> \} \\ <var:k2> := <nat:5> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:O> \land <var:k2> = <nat:5> \} \\ <var:k2> := <var:k2> * <var:Q> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:O> \land <var:k2> = <nat:5> * <var:O> \} \\ <var:k2> := <var:k2> * <var:Q> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:O> \land <var:k2> = <nat:5> * <var:O> ^ <nat:2> \} \\ <var:v> := <var:k2> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:O> \land <var:v> = <nat:5> * <var:O> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:k1> ; \\ \{ <var:Q> = <var:O> \land <var:k0> = <nat:2> \land <var:v> = <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> \} \\ <var:v> := <var:v> + <var:k0> \\ \{ <var:Q> = <var:O> \land <var:v> = <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:2> \} \end{eqnarray} Using Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:Q> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:Q> ; <var:k2> := <var:k2> * <var:Q> ; <var:v> := <var:k2> ; <var:v> := <var:v> + <var:k1> ; <var:v> := <var:v> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Q> = <var:O> }} <def:poly> {{ <var:v> = <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:O> /\ <var:k2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:O> /\ <var:k2> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:O> /\ <var:k2> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:O> /\ <var:v> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:k0> = <nat:2> /\ <var:v> = <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:v> = <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 