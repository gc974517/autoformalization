\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:G0> := <nat:5> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:z> ; <var:L> := <var:G1> ; <var:L> := <var:L> + <var:G0> \end{verbatim} Allow that we have $ <var:z> = <var:d> $ prior to the evaluation of the series of instructions it holds that $ <var:L> = <nat:8> \cdot <var:d> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our code can be given with Hoare reasoning . Immediately after , we have the variable update line \verb | <var:G0> := <nat:5> ; | . This code redefines the precondition $ \{ <var:z> = <var:d> \} $ to $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \} $ . This is rigorously given by the assignment rule of Hoare logic . Looking at the next line seen in the segment of code , we have the assignment statement \verb | <var:G1> := <nat:8> ; | . This takes $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \} $ toward the postcondition $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \land <var:G1> = <nat:8> \} $ . This is shown to be logically sound by the assignment law from usual Hoare reasoning . Immediately following , we see the variable assignmet line \verb | <var:G1> := <var:G1> * <var:z> ; | . This statement redefines the precondition $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \land <var:G1> = <nat:8> \} $ as the condition $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \land <var:G1> = <nat:8> * <var:d> \} $ . Now , we have the environment update statement \verb | <var:L> := <var:G1> ; | . This takes $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \land <var:G1> = <nat:8> * <var:d> \} $ to $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \land <var:L> = <nat:8> * <var:d> \} $ . This is sound by the assignment rule found in usual Hoare reasoning . Next , we see the variable update line \verb | <var:L> := <var:L> + <var:G0> | . This takes the precondition $ \{ <var:z> = <var:d> \land <var:G0> = <nat:5> \land <var:L> = <nat:8> * <var:d> \} $ as the postcondition $ \{ <var:z> = <var:d> \land <var:L> = <nat:8> * <var:d> + <nat:5> \} $ . This is guaranteed with the assignment scheme of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:z> = <var:d> }} <var:G0> := <nat:5> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:z> ; <var:L> := <var:G1> ; <var:L> := <var:L> + <var:G0> {{ <var:L> = <nat:8> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:G0> = <nat:5> /\ <var:L> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:L> = <nat:8> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 