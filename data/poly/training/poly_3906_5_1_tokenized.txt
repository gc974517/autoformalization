\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:x1> := <var:I> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:6> ; <var:m> := <var:x1> <var:m> := <var:m> + <var:x0> \end{verbatim} Given given every positive integer coefficients $ <var:j> $ $ <var:I> = <var:j> $ before the execution of the list of commands , it follows that we see $ <var:m> = <nat:6> \cdot <var:j> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be given through Hoare reasoning . Moving on to the next step , we have \begin{eqnarray} \{ <var:I> = <var:j> \} \, <var:x1> := <var:I> \, \{ <var:I> = <var:j> \land <var:x1> = <var:j> \} \\ \{ <var:I> = <var:j> \land <var:x1> = <var:j> \} \, <var:x0> := <nat:9> \, \{ <var:I> = <var:j> \land <var:x1> = <var:j> \land <var:x0> = <nat:9> \} \end{eqnarray} This is rigorously given with the variable assignmet law in standard Hoare logic . Moving forward , \begin{eqnarray} \{ <var:I> = <var:j> \} \, <var:x1> := <var:I> \, \{ <var:I> = <var:j> \land <var:x1> = <var:j> \} \\ \{ <var:I> = <var:j> \land <var:x1> = <var:j> \} \, <var:x0> := <nat:9> \, \{ <var:I> = <var:j> \land <var:x1> = <var:j> \land <var:x0> = <nat:9> \} \\ \{ <var:I> = <var:j> \land <var:x1> = <var:j> \land <var:x0> = <nat:9> \} \, <var:x1> := <var:x1> * <nat:6> \, \{ <var:I> = <var:j> \land <var:x1> = <nat:6> \times <var:j> \land <var:x0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:I> = <var:j> }} <var:x1> := <var:I> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:6> ; <var:m> := <var:x1> <var:m> := <var:m> + <var:x0> {{ <var:m> = <nat:6> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:x1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:x1> = <var:j> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:x1> = <nat:6> * <var:j> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:x0> = <nat:9> /\ <var:m> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:m> = <nat:6> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 