\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:f> ; <var:M2> := <var:M1> * <var:f> ; <var:M3> := <var:M2> * <var:f> ; <var:M0> := <nat:6> ; <var:M2> := <var:M2> * <nat:4> ; <var:M3> := <var:M3> * <nat:3> ; <var:L> := <var:M3> <var:L> := <var:L> + <var:M2> <var:L> := <var:L> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Assuming it to hold that $ <var:f> = <var:v> $ before evaluating this code segment , it must be that $ <var:L> = <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} The proof of the list of instructions is accomplished by typical Hoare logic . Advancing to the subsequent bits of codeseen in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:v> \} & <var:M1> := <var:f> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \} \\ \{ <var:f> = <var:v> \land <var:M1> = <var:v> \} & <var:M2> := <var:M1> * <var:f> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \} \\ \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \} & <var:M3> := <var:M2> * <var:f> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \land <var:M3> = <var:v> ^ <nat:3> \} \\ \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \land <var:M3> = <var:v> ^ <nat:3> \} & <var:M0> := <nat:6> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \land <var:M3> = <var:v> ^ <nat:3> \land <var:M0> = <nat:6> \} \\ \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \land <var:M3> = <var:v> ^ <nat:3> \land <var:M0> = <nat:6> \} & <var:M2> := <var:M2> * <nat:4> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <nat:4> * <var:v> ^ <nat:2> \land <var:M3> = <var:v> ^ <nat:3> \land <var:M0> = <nat:6> \} \\ \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <nat:4> * <var:v> ^ <nat:2> \land <var:M3> = <var:v> ^ <nat:3> \land <var:M0> = <nat:6> \} & <var:M3> := <var:M3> * <nat:3> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <nat:4> * <var:v> ^ <nat:2> \land <var:M3> = <nat:3> * <var:v> ^ <nat:3> \land <var:M0> = <nat:6> \} \end{tabular} This is deduced by the binding law found in usual Hoare logic . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:v> \} & <var:M1> := <var:f> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \} \\ \{ <var:f> = <var:v> \land <var:M1> = <var:v> \} & <var:M2> := <var:M1> * <var:f> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \land <var:M2> = <var:v> ^ <nat:2> \} \end{tabular} This is guaranteed using the binding rule obtained from typical Hoare reasoning . Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:v> \} & <var:M1> := <var:f> & \{ <var:f> = <var:v> \land <var:M1> = <var:v> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:f> ; <var:M2> := <var:M1> * <var:f> ; <var:M3> := <var:M2> * <var:f> ; <var:M0> := <nat:6> ; <var:M2> := <var:M2> * <nat:4> ; <var:M3> := <var:M3> * <nat:3> ; <var:L> := <var:M3> <var:L> := <var:L> + <var:M2> <var:L> := <var:L> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:f> = <var:v> }} <def:poly> {{ <var:L> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M2> = <var:v> ^ <nat:2> /\ <var:M3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M2> = <var:v> ^ <nat:2> /\ <var:M3> = <var:v> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:M3> = <var:v> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:M0> = <nat:6> /\ <var:L> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:M1> = <var:v> /\ <var:M0> = <nat:6> /\ <var:L> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:L> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 