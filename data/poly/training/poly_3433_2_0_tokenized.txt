\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:3> ; <var:n> := <var:p0> \end{verbatim} Allow for all $ <var:G> $ that $ <var:v> = <var:G> $ ahead of interpreting the code , then $ <var:n> = <nat:3> $ when segment of code terminates . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:v> = <var:G> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:v> = <var:G> \land <var:p0> = <nat:3> \} \\ <var:n> := <var:p0> \\ \{ <var:v> = <var:G> \land <var:n> = <nat:3> \} \end{eqnarray} Therefore , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:v> = <var:G> }} <var:p0> := <nat:3> ; <var:n> := <var:p0> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 