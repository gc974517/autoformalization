\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:1> ; <var:f> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Assume that we have $ <var:A> = <var:V> $ prior to evaluating our series of instructions then $ <var:f> = <nat:1> $ when series of instructions is done executing . \end{theorem} \begin{proof} Observe the below decorated list of commands . \begin{eqnarray} \{ <var:A> = <var:V> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:A> = <var:V> \land <var:K0> = <nat:1> \} \\ <var:f> := <var:K0> \\ \{ <var:A> = <var:V> \land <var:f> = <nat:1> \} \end{eqnarray} Using usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:f> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:A> = <var:V> }} <def:poly> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 