\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:D> ; <var:Q> := <nat:4> + <var:Q> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Assume that $ <var:D> = <var:p> $ , given natural coefficients $ <var:p> $ , prior to the evaluation of the series of commands , it follows that $ <var:Q> = <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:p> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:D> = <var:p> \land <var:Q> = <nat:3> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:D> ; \\ \{ <var:D> = <var:p> \land <var:Q> = <nat:3> \times <var:p> + <nat:1> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:D> \\ \{ <var:D> = <var:p> \land <var:Q> = <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} \end{eqnarray} Using standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:D> ; <var:Q> := <nat:4> + <var:Q> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:D> = <var:p> }} <def:poly> {{ <var:Q> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:Q> = <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:Q> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 