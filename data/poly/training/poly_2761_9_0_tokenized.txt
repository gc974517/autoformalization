\begin{document} \begin{theorem} Take a code segment in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:9> ; <var:d1> := <var:d1> * <var:f> ; <var:d2> := <nat:9> ; <var:d2> := <var:d2> * <var:f> ; <var:d2> := <var:d2> * <var:f> ; <var:b> := <var:d2> ; <var:b> := <var:b> + <var:d1> ; <var:b> := <var:b> + <var:d0> \end{verbatim} Assuming it to be that $ <var:f> = <var:k> $ before interpreting our program then we see $ <var:b> = <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> + <nat:3> $ once segment of code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:k> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:9> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:d1> = <nat:9> \} \\ <var:d1> := <var:d1> * <var:f> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:d1> = <nat:9> \times <var:k> \} \\ <var:d2> := <nat:9> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:d1> = <nat:9> \times <var:k> \land <var:d2> = <nat:9> \} \\ <var:d2> := <var:d2> * <var:f> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:d1> = <nat:9> \times <var:k> \land <var:d2> = <nat:9> \times <var:k> \} \end{eqnarray} Allowing interpreting our series of commands gives us : \begin{eqnarray} <var:d2> := <var:d2> * <var:f> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:d1> = <nat:9> \times <var:k> \land <var:d2> = <nat:9> \times <var:k> ^ <nat:2> \} \\ <var:b> := <var:d2> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:d1> = <nat:9> \times <var:k> \land <var:b> = <nat:9> \times <var:k> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:d1> ; \\ \{ <var:f> = <var:k> \land <var:d0> = <nat:3> \land <var:b> = <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> \} \\ <var:b> := <var:b> + <var:d0> \\ \{ <var:f> = <var:k> \land <var:b> = <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> + <nat:3> \} \end{eqnarray} Using Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:f> = <var:k> }} <var:d0> := <nat:3> ; <var:d1> := <nat:9> ; <var:d1> := <var:d1> * <var:f> ; <var:d2> := <nat:9> ; <var:d2> := <var:d2> * <var:f> ; <var:d2> := <var:d2> * <var:f> ; <var:b> := <var:d2> ; <var:b> := <var:b> + <var:d1> ; <var:b> := <var:b> + <var:d0> {{ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:9> * <var:k> /\ <var:d2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:9> * <var:k> /\ <var:d2> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:9> * <var:k> /\ <var:d2> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:9> * <var:k> /\ <var:b> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:d0> = <nat:3> /\ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 