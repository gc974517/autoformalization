\begin{document} \begin{theorem} Let the following code segment : \begin{verbatim} <var:m1> := <var:d> ; <var:m2> := <var:m1> * <var:d> ; <var:m3> := <var:m2> * <var:d> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:9> ; <var:m3> := <var:m3> * <nat:7> ; <var:e> := <var:m3> <var:e> := <var:e> + <var:m2> <var:e> := <var:e> + <var:m1> <var:e> := <var:e> + <var:m0> \end{verbatim} Allowing $ <var:d> = <var:W> $ before evaluating this segment of code then we see $ <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> + <nat:9> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> $ after segment of code is done . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is demonstrated using standard Hoare logic . Further , we have the environment update line defining $ <var:d> $ as $ <var:m1>$ . This statement redefines the precondition $ \{ <var:d> = <var:W> \} $ into $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \} $ . Stepping forward , we have the variable update statement \verb | <var:m2> := <var:m1> * <var:d> ; | . This line redefines $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \} $ into the postcondition $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \} $ . Jumping to the subsequent command seen in our set of commands , we see the binding code giving $ <var:m2> * <var:d> $ to $ <var:m3>$ . This advances the condition $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \} $ as the condition $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \} $ . After , the variable binding code \verb | <var:m0> := <nat:2> ; | . This statement redefines $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \} $ toward the condition $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ . Shifting focus toward the following line of code seen in the list of commands , the variable update code \verb | <var:m1> := <var:m1> * <nat:1> ; | . This command advances the condition $ \{ <var:d> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ toward the condition $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ . Advancing to the upcoming step seen in our set of instructions , we have the environment update line \verb | <var:m2> := <var:m2> * <nat:9> ; | . This forwards $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <nat:9> \cdot <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ . This is shown through the assignment law from usual Hoare reasoning . Following , the variable binding command \verb | <var:m3> := <var:m3> * <nat:7> ; | . This code transfers the condition $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <nat:9> \cdot <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <nat:9> \cdot <var:W> ^ <nat:2> \land <var:m3> = <nat:7> \cdot <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ . Immediately following , we see the variable assignmet command assigning $ <var:m3$ into $ <var:e>$ . This statement redefines $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <nat:9> \cdot <var:W> ^ <nat:2> \land <var:m3> = <nat:7> \cdot <var:W> ^ <nat:3> \land <var:m0> = <nat:2> \} $ toward $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <nat:9> \cdot <var:W> ^ <nat:2> \land <var:m0> = <nat:2> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> \} $ . Looking at the upcoming line contained in our program , the variable binding line assigning $ <var:e> + <var:m2$ into $ <var:e>$ . This moves the precondition $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m2> = <nat:9> \cdot <var:W> ^ <nat:2> \land <var:m0> = <nat:2> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> \} $ as $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m0> = <nat:2> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> + <nat:9> \cdot <var:W> ^ <nat:2> \} $ . This is known to be sound by the assignment scheme in usual Hoare techniques . Advancing to the following step seen in the set of instructions , we have the environment update line letting $ <var:e> + <var:m1$ to $ <var:e>$ . This statement redefines the precondition $ \{ <var:d> = <var:W> \land <var:m1> = <nat:1> \cdot <var:W> \land <var:m0> = <nat:2> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> + <nat:9> \cdot <var:W> ^ <nat:2> \} $ toward $ \{ <var:d> = <var:W> \land <var:m0> = <nat:2> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> + <nat:9> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} $ . Honing in on the proceeding line in our set of instructions , we see the assignment code letting $ <var:e> + <var:m0$ as $ <var:e>$ . This transfers the precondition $ \{ <var:d> = <var:W> \land <var:m0> = <nat:2> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> + <nat:9> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} $ toward the condition $ \{ <var:d> = <var:W> \land <var:e> = <nat:7> \cdot <var:W> ^ <nat:3> + <nat:9> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:d> = <var:W> }} <var:m1> := <var:d> ; <var:m2> := <var:m1> * <var:d> ; <var:m3> := <var:m2> * <var:d> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:9> ; <var:m3> := <var:m3> * <nat:7> ; <var:e> := <var:m3> <var:e> := <var:e> + <var:m2> <var:e> := <var:e> + <var:m1> <var:e> := <var:e> + <var:m0> {{ <var:e> = <nat:7> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <nat:1> * <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <nat:1> * <var:W> /\ <var:m2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <nat:1> * <var:W> /\ <var:m2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:W> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <nat:1> * <var:W> /\ <var:m2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:m0> = <nat:2> /\ <var:e> = <nat:7> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m1> = <nat:1> * <var:W> /\ <var:m0> = <nat:2> /\ <var:e> = <nat:7> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:m0> = <nat:2> /\ <var:e> = <nat:7> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:e> = <nat:7> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 