\begin{document} \begin{theorem} Define a segment of code : \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:e> \end{verbatim} Allow $ <var:e> = <var:w> $ before the execution of this code segment , it holds that $ <var:v> = <nat:1> \cdot <var:w> + <nat:4> $ once code segment exits . \end{theorem} \begin{proof} Utilizing Hoare reasoning produces : \begin{eqnarray} \{ <var:e> = <var:w> \} \\ <var:v> := <nat:1> ; \\ \{ <var:e> = <var:w> \land <var:v> = <nat:1> \} \\ <var:v> := <nat:4> + <var:v> * <var:e> \\ \{ <var:e> = <var:w> \land <var:v> = <nat:1> \cdot <var:w> + <nat:4> \} \end{eqnarray} Given the preceding argument , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:e> = <var:w> }} <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:e> {{ <var:v> = <nat:1> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:w> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:w> /\ <var:v> = <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 