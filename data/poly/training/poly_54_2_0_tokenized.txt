\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:5> ; <var:R> := <var:r0> \end{verbatim} Given that we have $ <var:x> = <var:O> $ prior to evaluating this program , then we see $ <var:R> = <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be seen with Hoare techniques . Further , we see the variable update code binding $ <nat:5> $ to $ <var:r0>$ . This takes the condition $ \{ <var:x> = <var:O> \} $ toward the postcondition $ \{ <var:x> = <var:O> \land <var:r0> = <nat:5> \} $ . Moving onward , we see the line \verb | <var:R> := <var:r0> | . This transfers the precondition $ \{ <var:x> = <var:O> \land <var:r0> = <nat:5> \} $ to the postcondition $ \{ <var:x> = <var:O> \land <var:R> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:x> = <var:O> }} <var:r0> := <nat:5> ; <var:R> := <var:r0> {{ <var:R> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:R> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 