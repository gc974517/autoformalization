\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:J> ; <var:k> := <var:M1> ; <var:k> := <var:k> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given given all whole numbers $ <var:R> $ that $ <var:J> = <var:R> $ before evaluating this program , it must be that we have $ <var:k> = <nat:1> \cdot <var:R> + <nat:4> $ once set of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:R> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:J> = <var:R> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:1> ; \\ \{ <var:J> = <var:R> \land <var:M0> = <nat:4> \land <var:M1> = <nat:1> \} \\ <var:M1> := <var:M1> * <var:J> ; \\ \{ <var:J> = <var:R> \land <var:M0> = <nat:4> \land <var:M1> = <nat:1> \cdot <var:R> \} \\ <var:k> := <var:M1> ; \\ \{ <var:J> = <var:R> \land <var:M0> = <nat:4> \land <var:k> = <nat:1> \cdot <var:R> \} \\ <var:k> := <var:k> + <var:M0> \\ \{ <var:J> = <var:R> \land <var:k> = <nat:1> \cdot <var:R> + <nat:4> \} \end{eqnarray} Applying typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:J> ; <var:k> := <var:M1> ; <var:k> := <var:k> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:J> = <var:R> }} <def:poly> {{ <var:k> = <nat:1> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:M0> = <nat:4> /\ <var:k> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:k> = <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 