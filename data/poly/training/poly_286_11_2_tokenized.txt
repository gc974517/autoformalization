\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:2> + <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <nat:2> + <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <nat:1> + <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <nat:1> + <var:G> * <var:Z> \end{verbatim} Assume it to hold that $ <var:Z> = <var:Q> $ ( given some positive numbers $ <var:Q> $ ) before interpreting the series of instructions it holds that we see $ <var:G> = <nat:1> \cdot <var:Q> ^ <nat:10> + <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> $ after set of commands has finished . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:Z> = <var:Q> \} \\ <var:G> := <nat:1> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> + <nat:2> \} \\ <var:G> := <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + \} \\ <var:G> := <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + \} \\ <var:G> := <nat:2> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> \} \\ <var:G> := <nat:3> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> + <nat:3> \} \\ <var:G> := <nat:1> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> \} \\ <var:G> := <nat:3> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> \} \\ <var:G> := <nat:3> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> \} \\ <var:G> := <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + \} \\ <var:G> := <nat:1> + <var:G> * <var:Z> \\ \{ <var:Z> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> \} \end{eqnarray} Considering the preceding argument , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Z> = <var:Q> }} <var:G> := <nat:1> ; <var:G> := <nat:2> + <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <nat:2> + <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <nat:1> + <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <nat:1> + <var:G> * <var:Z> {{ <var:G> = <nat:1> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 