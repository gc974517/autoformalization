\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:w1> := <var:h> ; <var:w2> := <var:w1> * <var:h> ; <var:w3> := <var:w2> * <var:h> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:7> ; <var:g> := <var:w3> <var:g> := <var:g> + <var:w2> <var:g> := <var:g> + <var:w1> <var:g> := <var:g> + <var:w0> \end{verbatim} Allow it to be that $ <var:h> = <var:V> $ prior to running the set of commands , it must be that $ <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> $ once list of instructions is done . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:h> = <var:V> \} \\ <var:w1> := <var:h> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <var:V> \} \\ <var:w2> := <var:w1> * <var:h> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <var:V> \land <var:w2> = <var:V> ^ <nat:2> \} \\ <var:w3> := <var:w2> * <var:h> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <var:V> \land <var:w2> = <var:V> ^ <nat:2> \land <var:w3> = <var:V> ^ <nat:3> \} \\ <var:w0> := <nat:8> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <var:V> \land <var:w2> = <var:V> ^ <nat:2> \land <var:w3> = <var:V> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:w1> := <var:w1> * <nat:4> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <nat:4> * <var:V> \land <var:w2> = <var:V> ^ <nat:2> \land <var:w3> = <var:V> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:w2> := <var:w2> * <nat:6> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <nat:4> * <var:V> \land <var:w2> = <nat:6> * <var:V> ^ <nat:2> \land <var:w3> = <var:V> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:w3> := <var:w3> * <nat:7> ; \\ \{ <var:h> = <var:V> \land <var:w1> = <nat:4> * <var:V> \land <var:w2> = <nat:6> * <var:V> ^ <nat:2> \land <var:w3> = <nat:7> * <var:V> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:g> := <var:w3> \\ \{ <var:h> = <var:V> \land <var:w1> = <nat:4> * <var:V> \land <var:w2> = <nat:6> * <var:V> ^ <nat:2> \land <var:w0> = <nat:8> \land <var:g> = <nat:7> * <var:V> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:w2> \\ \{ <var:h> = <var:V> \land <var:w1> = <nat:4> * <var:V> \land <var:w0> = <nat:8> \land <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:w1> \\ \{ <var:h> = <var:V> \land <var:w0> = <nat:8> \land <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> \} \\ <var:g> := <var:g> + <var:w0> \\ \{ <var:h> = <var:V> \land <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> \} \end{eqnarray} Therefore , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <var:w1> := <var:h> ; <var:w2> := <var:w1> * <var:h> ; <var:w3> := <var:w2> * <var:h> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:7> ; <var:g> := <var:w3> <var:g> := <var:g> + <var:w2> <var:g> := <var:g> + <var:w1> <var:g> := <var:g> + <var:w0> {{ <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <var:V> /\ <var:w2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <var:V> /\ <var:w2> = <var:V> ^ <nat:2> /\ <var:w3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <var:V> /\ <var:w2> = <var:V> ^ <nat:2> /\ <var:w3> = <var:V> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <nat:4> * <var:V> /\ <var:w2> = <var:V> ^ <nat:2> /\ <var:w3> = <var:V> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <nat:4> * <var:V> /\ <var:w2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:w3> = <var:V> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <nat:4> * <var:V> /\ <var:w2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:w3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <nat:4> * <var:V> /\ <var:w2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:w0> = <nat:8> /\ <var:g> = <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w1> = <nat:4> * <var:V> /\ <var:w0> = <nat:8> /\ <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:w0> = <nat:8> /\ <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:g> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 