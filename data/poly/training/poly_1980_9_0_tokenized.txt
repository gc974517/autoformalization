\begin{document} \begin{theorem} We define the following program such that \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:S> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:S> ; <var:P2> := <var:P2> * <var:S> ; <var:T> := <var:P2> ; <var:T> := <var:T> + <var:P1> ; <var:T> := <var:T> + <var:P0> \end{verbatim} Allowing $ <var:S> = <var:O> $ ahead of executing our set of commands then we have $ <var:T> = <nat:9> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> $ once series of commands exits . \end{theorem} \begin{proof} Using Hoare techniques yields : \begin{eqnarray} \{ <var:S> = <var:O> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \} \\ <var:P1> := <nat:4> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> \} \\ <var:P1> := <var:P1> * <var:S> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:O> \} \\ <var:P2> := <nat:9> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:O> \land <var:P2> = <nat:9> \} \\ <var:P2> := <var:P2> * <var:S> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:O> \land <var:P2> = <nat:9> * <var:O> \} \\ <var:P2> := <var:P2> * <var:S> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:O> \land <var:P2> = <nat:9> * <var:O> ^ <nat:2> \} \\ <var:T> := <var:P2> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:O> \land <var:T> = <nat:9> * <var:O> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:P1> ; \\ \{ <var:S> = <var:O> \land <var:P0> = <nat:4> \land <var:T> = <nat:9> * <var:O> ^ <nat:2> + <nat:4> * <var:O> \} \\ <var:T> := <var:T> + <var:P0> \\ \{ <var:S> = <var:O> \land <var:T> = <nat:9> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> \} \end{eqnarray} As a consequence , our list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:S> = <var:O> }} <var:P0> := <nat:4> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:S> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:S> ; <var:P2> := <var:P2> * <var:S> ; <var:T> := <var:P2> ; <var:T> := <var:T> + <var:P1> ; <var:T> := <var:T> + <var:P0> {{ <var:T> = <nat:9> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:O> /\ <var:P2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:O> /\ <var:P2> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:O> /\ <var:P2> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:O> /\ <var:T> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P0> = <nat:4> /\ <var:T> = <nat:9> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:T> = <nat:9> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 