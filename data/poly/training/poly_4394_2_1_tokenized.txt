\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:4> ; <var:E> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:R> = <var:y> $ ( with some natural coefficients $ <var:y> $ ) prior to the execution of our code segment , it follows that $ <var:E> = <nat:4> $ once code segment exits . \end{theorem} \begin{proof} The application of Hoare reasoning returns : \begin{eqnarray} \{ <var:R> = <var:y> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:R> = <var:y> \land <var:K0> = <nat:4> \} \\ <var:E> := <var:K0> \\ \{ <var:R> = <var:y> \land <var:E> = <nat:4> \} \end{eqnarray} Considering the preceding argument , our series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:4> ; <var:E> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:R> = <var:y> }} <def:poly> {{ <var:E> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:E> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 