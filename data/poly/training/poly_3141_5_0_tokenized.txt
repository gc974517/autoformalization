\begin{document} \begin{theorem} We define the following program in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:1> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:K> ; <var:z> := <var:m1> ; <var:z> := <var:z> + <var:m0> \end{verbatim} Allow it to hold that $ <var:K> = <var:x> $ ahead of executing the list of commands then we have $ <var:z> = <nat:5> \cdot <var:x> + <nat:1> $ after segment of code has finished . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:K> = <var:x> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:K> = <var:x> \land <var:m0> = <nat:1> \} \\ <var:m1> := <nat:5> ; \\ \{ <var:K> = <var:x> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \} \\ <var:m1> := <var:m1> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \cdot <var:x> \} \\ <var:z> := <var:m1> ; \\ \{ <var:K> = <var:x> \land <var:m0> = <nat:1> \land <var:z> = <nat:5> \cdot <var:x> \} \\ <var:z> := <var:z> + <var:m0> \\ \{ <var:K> = <var:x> \land <var:z> = <nat:5> \cdot <var:x> + <nat:1> \} \end{eqnarray} Considering the above , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:K> = <var:x> }} <var:m0> := <nat:1> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:K> ; <var:z> := <var:m1> ; <var:z> := <var:z> + <var:m0> {{ <var:z> = <nat:5> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:m0> = <nat:1> /\ <var:z> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:z> = <nat:5> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 