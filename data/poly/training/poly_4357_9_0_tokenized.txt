\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:X> ; <var:Y2> := <nat:7> ; <var:Y2> := <var:Y2> * <var:X> ; <var:Y2> := <var:Y2> * <var:X> ; <var:t> := <var:Y2> ; <var:t> := <var:t> + <var:Y1> ; <var:t> := <var:t> + <var:Y0> \end{verbatim} Assume that $ <var:X> = <var:j> $ ahead of the evaluation of the program then $ <var:t> = <nat:7> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:7> $ once set of commands has terminated . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be accomplished with typical Hoare reasoning . Immediately following , we see the assignment statement assigning $ <nat:7> $ into $ <var:Y0>$ . This forwards $ \{ <var:X> = <var:j> \} $ as $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \} $ . This is ensured through the assignment rule of usual Hoare logic . Moving on , we see the variable binding line yielding $ <nat:3> $ to $ <var:Y1>$ . This code forwards the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \} $ into $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \} $ . Observing the upcoming line of code seen in the set of commands , the environment update line giving $ <var:Y1> * <var:X> $ as $ <var:Y1>$ . This line redefines $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \} $ toward the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \} $ . This is ensured with the assignment inference rule defined in standard Hoare reasoning . Immediately after , we have the environment update code \verb | <var:Y2> := <nat:7> ; | . This transfers the precondition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \} $ into $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y2> = <nat:7> \} $ . This is rigorously given using the assignment rule in typical Hoare logic . Moving on to the next step , we see the assignment code \verb | <var:Y2> := <var:Y2> * <var:X> ; | . This line redefines $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y2> = <nat:7> \} $ toward the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y2> = <nat:7> \times <var:j> \} $ . Considering the proceeding bit of code in our code segment , we have the binding statement defining $ <var:Y2> * <var:X> $ to $ <var:Y2>$ . This line forwards the precondition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y2> = <nat:7> \times <var:j> \} $ into the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y2> = <nat:7> \times <var:j> ^ <nat:2> \} $ . Moving forward , the environment update command \verb | <var:t> := <var:Y2> ; | . This line takes the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y2> = <nat:7> \times <var:j> ^ <nat:2> \} $ to $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:t> = <nat:7> \times <var:j> ^ <nat:2> \} $ . Following , we have the environment update code defining $ <var:t> + <var:Y1> $ toward $ <var:t>$ . This statement takes the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:3> \times <var:j> \land <var:t> = <nat:7> \times <var:j> ^ <nat:2> \} $ into $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:t> = <nat:7> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> \} $ . This is deduced with the assignment law found in Hoare logic . Moving forward to the next step , we have the command \verb | <var:t> := <var:t> + <var:Y0> | . This moves the condition $ \{ <var:X> = <var:j> \land <var:Y0> = <nat:7> \land <var:t> = <nat:7> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> \} $ toward $ \{ <var:X> = <var:j> \land <var:t> = <nat:7> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:X> = <var:j> }} <var:Y0> := <nat:7> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:X> ; <var:Y2> := <nat:7> ; <var:Y2> := <var:Y2> * <var:X> ; <var:Y2> := <var:Y2> * <var:X> ; <var:t> := <var:Y2> ; <var:t> := <var:t> + <var:Y1> ; <var:t> := <var:t> + <var:Y0> {{ <var:t> = <nat:7> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> * <var:j> /\ <var:Y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> * <var:j> /\ <var:Y2> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> * <var:j> /\ <var:Y2> = <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:3> * <var:j> /\ <var:t> = <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:Y0> = <nat:7> /\ <var:t> = <nat:7> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:t> = <nat:7> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 