\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:Y0> := <nat:4> ; <var:T> := <var:Y0> \end{verbatim} Assuming $ <var:K> = <var:t> $ , given some natural numbers $ <var:t> $ , before running our list of instructions it holds that we have $ <var:T> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is clear through typical Hoare logic . Taking another step toward the proceeding line of code contained in our code , we have the assignment line \verb | <var:Y0> := <nat:4> ; | . This code transfers the condition $ \{ <var:K> = <var:t> \} $ as the condition $ \{ <var:K> = <var:t> \land <var:Y0> = <nat:4> \} $ . This is sound using the assignment scheme given in standard Hoare logic . Shifting focus toward the upcoming bit of code contained in our segment of code , we have the variable assignmet code \verb | <var:T> := <var:Y0> | . This redefines $ \{ <var:K> = <var:t> \land <var:Y0> = <nat:4> \} $ as the postcondition $ \{ <var:K> = <var:t> \land <var:T> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:K> = <var:t> }} <var:Y0> := <nat:4> ; <var:T> := <var:Y0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 