\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:7> ; <var:L> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Given that we have $ <var:f> = <var:N> $ ahead of executing the set of instructions , it holds that we see $ <var:L> = <nat:7> $ when set of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is accomplished with Hoare techniques . Taking a look at the next line in the code , we have the command \verb | <var:l0> := <nat:7> ; | . This takes $ \{ <var:f> = <var:N> \} $ into $ \{ <var:f> = <var:N> \land <var:l0> = <nat:7> \} $ . Next , we see the environment update command binding $ <var:l0$ toward $ <var:L>$ . This forwards $ \{ <var:f> = <var:N> \land <var:l0> = <nat:7> \} $ into the condition $ \{ <var:f> = <var:N> \land <var:L> = <nat:7> \} $ . This is given using the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:7> ; <var:L> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:f> = <var:N> }} <def:poly> {{ <var:L> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:L> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 