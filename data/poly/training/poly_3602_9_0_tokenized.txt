\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:4> ; <var:W1> := <nat:7> ; <var:W1> := <var:W1> * <var:q> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:q> ; <var:W2> := <var:W2> * <var:q> ; <var:K> := <var:W2> ; <var:K> := <var:K> + <var:W1> ; <var:K> := <var:K> + <var:W0> \end{verbatim} Allowing it to be that $ <var:q> = <var:h> $ --- given positive numbers $ <var:h> $ --- prior to running the list of instructions it must be that $ <var:K> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:7> \cdot <var:h> + <nat:4> $ after segment of code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:h> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \} \\ <var:W1> := <nat:7> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> \} \\ <var:W1> := <var:W1> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:h> \} \\ <var:W2> := <nat:4> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:h> \land <var:W2> = <nat:4> \} \\ <var:W2> := <var:W2> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:h> \land <var:W2> = <nat:4> * <var:h> \} \\ <var:W2> := <var:W2> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:h> \land <var:W2> = <nat:4> * <var:h> ^ <nat:2> \} \\ <var:K> := <var:W2> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:h> \land <var:K> = <nat:4> * <var:h> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:W1> ; \\ \{ <var:q> = <var:h> \land <var:W0> = <nat:4> \land <var:K> = <nat:4> * <var:h> ^ <nat:2> + <nat:7> * <var:h> \} \\ <var:K> := <var:K> + <var:W0> \\ \{ <var:q> = <var:h> \land <var:K> = <nat:4> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:q> = <var:h> }} <var:W0> := <nat:4> ; <var:W1> := <nat:7> ; <var:W1> := <var:W1> * <var:q> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:q> ; <var:W2> := <var:W2> * <var:q> ; <var:K> := <var:W2> ; <var:K> := <var:K> + <var:W1> ; <var:K> := <var:K> + <var:W0> {{ <var:K> = <nat:4> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:h> /\ <var:W2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:h> /\ <var:W2> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:h> /\ <var:W2> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:h> /\ <var:K> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:W0> = <nat:4> /\ <var:K> = <nat:4> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:K> = <nat:4> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 