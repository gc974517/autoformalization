\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:z0> := <nat:5> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:Q> ; <var:z2> := <nat:4> ; <var:z2> := <var:z2> * <var:Q> ; <var:z2> := <var:z2> * <var:Q> ; <var:h> := <var:z2> ; <var:h> := <var:h> + <var:z1> ; <var:h> := <var:h> + <var:z0> \end{verbatim} Allowing it to hold that $ <var:Q> = <var:M> $ --- for some positive integers $ <var:M> $ --- before running the set of instructions it holds that we have $ <var:h> = <nat:4> \times <var:M> ^ <nat:2> + <nat:7> \times <var:M> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our set of commands can be seen through standard Hoare logic . Honing in on the proceeding pieces of code contained in the series of instructions , \begin{verbatim} { <var:Q> = <var:M> } <var:z0> := <nat:5> { <var:Q> = <var:M> \land <var:z0> = <nat:5> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> } <var:z1> := <nat:7> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> } <var:z1> := <var:z1> * <var:Q> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> } <var:z2> := <nat:4> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:z2> = <nat:4> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:z2> = <nat:4> } <var:z2> := <var:z2> * <var:Q> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:z2> = <nat:4> \cdot <var:M> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:z2> = <nat:4> \cdot <var:M> } <var:z2> := <var:z2> * <var:Q> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:z2> = <nat:4> \cdot <var:M> ^ <nat:2> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:z2> = <nat:4> \cdot <var:M> ^ <nat:2> } <var:h> := <var:z2> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> \cdot <var:M> \land <var:h> = <nat:4> \cdot <var:M> ^ <nat:2> } \end{verbatim} Shifting focus toward the next lines of codefound in our code segment , \begin{verbatim} { <var:Q> = <var:M> } <var:z0> := <nat:5> { <var:Q> = <var:M> \land <var:z0> = <nat:5> } { <var:Q> = <var:M> \land <var:z0> = <nat:5> } <var:z1> := <nat:7> { <var:Q> = <var:M> \land <var:z0> = <nat:5> \land <var:z1> = <nat:7> } \end{verbatim} This is shown using the variable binding law obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Q> = <var:M> }} <var:z0> := <nat:5> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:Q> ; <var:z2> := <nat:4> ; <var:z2> := <var:z2> * <var:Q> ; <var:z2> := <var:z2> * <var:Q> ; <var:h> := <var:z2> ; <var:h> := <var:h> + <var:z1> ; <var:h> := <var:h> + <var:z0> {{ <var:h> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:7> * <var:M> /\ <var:z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:7> * <var:M> /\ <var:z2> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:7> * <var:M> /\ <var:z2> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:7> * <var:M> /\ <var:h> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:z0> = <nat:5> /\ <var:h> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 