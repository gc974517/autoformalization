\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:p> := <nat:2> ; <var:p> := <nat:3> + <var:p> * <var:v> \end{verbatim} Given that we have $ <var:v> = <var:f> $ before the execution of this list of instructions it follows that we see $ <var:p> = <nat:2> * <var:f> + <nat:3> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for the code segment can be done through usual Hoare techniques . Moving forward to the next step , we see the environment update line assigning $ <nat:2> $ toward $ <var:p>$ . This command forwards the precondition $ \{ <var:v> = <var:f> \} $ to the condition $ \{ <var:v> = <var:f> \land <var:p> = <nat:2> \} $ . This is given using the assignment scheme given by typical Hoare reasoning . Observing the upcoming step seen in our code segment , we have the command binding $ <nat:3> + <var:p> * <var:v$ into $ <var:p>$ . This moves the precondition $ \{ <var:v> = <var:f> \land <var:p> = <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:f> \land <var:p> = <nat:2> \cdot <var:f> + <nat:3> \} $ . This is rigorously given through the assignment rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:v> = <var:f> }} <var:p> := <nat:2> ; <var:p> := <nat:3> + <var:p> * <var:v> {{ <var:p> = <nat:2> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:f> /\ <var:p> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:f> /\ <var:p> = <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 