\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y1> := <var:s> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:v> := <var:Y1> <var:v> := <var:v> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Allowing --- taking $ <var:w> \in \mathbb{N} $ --- that we have $ <var:s> = <var:w> $ ahead of running this set of commands , it holds that $ <var:v> = <nat:3> \cdot <var:w> + <nat:5> $ when list of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be seen using standard Hoare techniques . Observing the following line of code contained in the list of instructions , \begin{verbatim} { <var:s> = <var:w> } <var:Y1> := <var:s> { <var:s> = <var:w> \land <var:Y1> = <var:w> } \end{verbatim} This is shown by the rule defined in standard Hoare reasoning . Considering the proceeding line of code found in our program , we see \begin{verbatim} { <var:s> = <var:w> } <var:Y1> := <var:s> { <var:s> = <var:w> \land <var:Y1> = <var:w> } \end{verbatim} This is shown to be logically sound through the variable assignmet inference rule from typical Hoare logic . Taking a look at the upcoming pieces of code seen in the code segment , \begin{verbatim} { <var:s> = <var:w> } <var:Y1> := <var:s> { <var:s> = <var:w> \land <var:Y1> = <var:w> } { <var:s> = <var:w> \land <var:Y1> = <var:w> } <var:Y0> := <nat:5> { <var:s> = <var:w> \land <var:Y1> = <var:w> \land <var:Y0> = <nat:5> } { <var:s> = <var:w> \land <var:Y1> = <var:w> \land <var:Y0> = <nat:5> } <var:Y1> := <var:Y1> * <nat:3> { <var:s> = <var:w> \land <var:Y1> = <nat:3> * <var:w> \land <var:Y0> = <nat:5> } \end{verbatim} This is given with the binding scheme given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:s> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:v> := <var:Y1> <var:v> := <var:v> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:s> = <var:w> }} <def:poly> {{ <var:v> = <nat:3> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:Y1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:Y1> = <var:w> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:Y1> = <nat:3> * <var:w> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:Y0> = <nat:5> /\ <var:v> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:v> = <nat:3> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 