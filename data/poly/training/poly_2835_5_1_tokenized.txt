\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:V> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:1> ; <var:Y> := <var:I1> <var:Y> := <var:Y> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( letting natural numbers $ <var:X> $ ) it to be that $ <var:V> = <var:X> $ prior to executing this program then we see $ <var:Y> = <nat:1> \times <var:X> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this code can be shown using Hoare reasoning . Immediately after , we see the statement defining $ <var:V> $ into $ <var:I1>$ . This takes the precondition $ \{ <var:V> = <var:X> \} $ as $ \{ <var:V> = <var:X> \land <var:I1> = <var:X> \} $ . Keeping momentum , the environment update statement binding $ <nat:4> $ into $ <var:I0>$ . This transfers the condition $ \{ <var:V> = <var:X> \land <var:I1> = <var:X> \} $ toward $ \{ <var:V> = <var:X> \land <var:I1> = <var:X> \land <var:I0> = <nat:4> \} $ . Looking at the upcoming statement found in the series of commands , the assignment command yielding $ <var:I1> * <nat:1> $ into $ <var:I1>$ . This forwards the condition $ \{ <var:V> = <var:X> \land <var:I1> = <var:X> \land <var:I0> = <nat:4> \} $ to the condition $ \{ <var:V> = <var:X> \land <var:I1> = <nat:1> * <var:X> \land <var:I0> = <nat:4> \} $ . Moving on to the next step , we see the variable update code binding $ <var:I1$ toward $ <var:Y>$ . This transfers $ \{ <var:V> = <var:X> \land <var:I1> = <nat:1> * <var:X> \land <var:I0> = <nat:4> \} $ as $ \{ <var:V> = <var:X> \land <var:I0> = <nat:4> \land <var:Y> = <nat:1> * <var:X> \} $ . This is known to be sound by the assignment rule given in typical Hoare techniques . Advancing to the next bit of code seen in our program , we have the variable binding command assigning $ <var:Y> + <var:I0$ to $ <var:Y>$ . This advances the precondition $ \{ <var:V> = <var:X> \land <var:I0> = <nat:4> \land <var:Y> = <nat:1> * <var:X> \} $ as $ \{ <var:V> = <var:X> \land <var:Y> = <nat:1> * <var:X> + <nat:4> \} $ . This is deduced with the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:V> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:1> ; <var:Y> := <var:I1> <var:Y> := <var:Y> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <def:poly> {{ <var:Y> = <nat:1> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:I1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:I1> = <var:X> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:I0> = <nat:4> /\ <var:Y> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:Y> = <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 