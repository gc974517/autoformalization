\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:I> ; <var:p2> := <var:p1> * <var:I> ; <var:p3> := <var:p2> * <var:I> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:3> ; <var:p3> := <var:p3> * <nat:3> ; <var:m> := <var:p3> <var:m> := <var:m> + <var:p1> <var:m> := <var:m> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming it to hold that $ <var:I> = <var:w> $ ahead of evaluating the program it holds that we have $ <var:m> = <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is demonstrated through standard Hoare reasoning . Honing in on the next statement contained in the set of commands , the binding line defining $ <var:I> $ toward $ <var:p1>$ . This forwards $ \{ <var:I> = <var:w> \} $ into the postcondition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \} $ . This is shown by the assignment scheme defined by usual Hoare techniques . After , we have the code assigning $ <var:p1> * <var:I> $ into $ <var:p2>$ . This line takes the precondition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \} $ toward the postcondition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \land <var:p2> = <var:w> ^ <nat:2> \} $ . This is rigorously given through the assignment scheme defined by standard Hoare techniques . Observing the proceeding bit of code seen in our list of instructions , we have the binding code \verb | <var:p3> := <var:p2> * <var:I> ; | . This takes the precondition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \land <var:p2> = <var:w> ^ <nat:2> \} $ into the postcondition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <var:w> ^ <nat:3> \} $ . This is guaranteed by the assignment rule obtained from typical Hoare reasoning . Honing in on the subsequent piece of code contained in our code , we see the command \verb | <var:p0> := <nat:1> ; | . This redefines $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <var:w> ^ <nat:3> \} $ as the condition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <var:w> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . This is deduced with the assignment scheme defined by typical Hoare reasoning . Paying attention to the proceeding command contained in the series of commands , we see the variable assignmet statement \verb | <var:p1> := <var:p1> * <nat:3> ; | . This statement moves the condition $ \{ <var:I> = <var:w> \land <var:p1> = <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <var:w> ^ <nat:3> \land <var:p0> = <nat:1> \} $ toward the postcondition $ \{ <var:I> = <var:w> \land <var:p1> = <nat:3> \cdot <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <var:w> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . Advancing to the following bit of code in the program , we have the variable assignmet statement \verb | <var:p3> := <var:p3> * <nat:3> ; | . This code redefines $ \{ <var:I> = <var:w> \land <var:p1> = <nat:3> \cdot <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <var:w> ^ <nat:3> \land <var:p0> = <nat:1> \} $ into $ \{ <var:I> = <var:w> \land <var:p1> = <nat:3> \cdot <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:w> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . Taking a look at the next command seen in our code segment , we see the environment update statement letting $ <var:p3$ to $ <var:m>$ . This redefines $ \{ <var:I> = <var:w> \land <var:p1> = <nat:3> \cdot <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:w> ^ <nat:3> \land <var:p0> = <nat:1> \} $ to $ \{ <var:I> = <var:w> \land <var:p1> = <nat:3> \cdot <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:m> = <nat:3> \cdot <var:w> ^ <nat:3> \} $ . This is sound using the assignment inference rule of typical Hoare logic . Further , we see the variable update line \verb | <var:m> := <var:m> + <var:p1> | . This transfers the condition $ \{ <var:I> = <var:w> \land <var:p1> = <nat:3> \cdot <var:w> \land <var:p2> = <var:w> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:m> = <nat:3> \cdot <var:w> ^ <nat:3> \} $ toward the postcondition $ \{ <var:I> = <var:w> \land <var:p0> = <nat:1> \land <var:m> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> \} $ . Further , we see the variable assignmet line \verb | <var:m> := <var:m> + <var:p0> | . This statement advances $ \{ <var:I> = <var:w> \land <var:p0> = <nat:1> \land <var:m> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> \} $ toward the condition $ \{ <var:I> = <var:w> \land <var:m> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:I> ; <var:p2> := <var:p1> * <var:I> ; <var:p3> := <var:p2> * <var:I> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:3> ; <var:p3> := <var:p3> * <nat:3> ; <var:m> := <var:p3> <var:m> := <var:m> + <var:p1> <var:m> := <var:m> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:I> = <var:w> }} <def:poly> {{ <var:m> = <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <var:w> /\ <var:p2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <var:w> /\ <var:p2> = <var:w> ^ <nat:2> /\ <var:p3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <var:w> /\ <var:p2> = <var:w> ^ <nat:2> /\ <var:p3> = <var:w> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <nat:3> * <var:w> /\ <var:p2> = <var:w> ^ <nat:2> /\ <var:p3> = <var:w> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <nat:3> * <var:w> /\ <var:p2> = <var:w> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:w> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p1> = <nat:3> * <var:w> /\ <var:p2> = <var:w> ^ <nat:2> /\ <var:p0> = <nat:1> /\ <var:m> = <nat:3> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:p0> = <nat:1> /\ <var:m> = <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:m> = <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 