\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:9> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:u> ; <var:M> := <var:g1> ; <var:M> := <var:M> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:u> = <var:C> $ before the execution of this segment of code , it must be that we see $ <var:M> = <nat:7> * <var:C> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be accomplished using usual Hoare techniques . Stepping forward , we have \begin{verbatim} { <var:u> = <var:C> } <var:g0> := <nat:9> { <var:u> = <var:C> \land <var:g0> = <nat:9> } \end{verbatim} Considering the upcoming commands in our series of instructions , \begin{verbatim} { <var:u> = <var:C> } <var:g0> := <nat:9> { <var:u> = <var:C> \land <var:g0> = <nat:9> } { <var:u> = <var:C> \land <var:g0> = <nat:9> } <var:g1> := <nat:7> { <var:u> = <var:C> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> } { <var:u> = <var:C> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> } <var:g1> := <var:g1> * <var:u> { <var:u> = <var:C> \land <var:g0> = <nat:9> \land <var:g1> = <nat:7> * <var:C> } \end{verbatim} Shifting focus toward the following command found in the set of instructions , \begin{verbatim} { <var:u> = <var:C> } <var:g0> := <nat:9> { <var:u> = <var:C> \land <var:g0> = <nat:9> } \end{verbatim} This is deduced using the variable update inference rule defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:9> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:u> ; <var:M> := <var:g1> ; <var:M> := <var:M> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:u> = <var:C> }} <def:poly> {{ <var:M> = <nat:7> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:g0> = <nat:9> /\ <var:M> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:C> /\ <var:M> = <nat:7> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 