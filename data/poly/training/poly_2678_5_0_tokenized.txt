\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:8> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:J> ; <var:V> := <var:u1> ; <var:V> := <var:V> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:J> = <var:Z> $ before the execution of this series of instructions , it holds that we have $ <var:V> = <nat:8> \times <var:Z> + <nat:8> $ when list of instructions has terminated . \end{theorem} \begin{proof} The argument for the set of instructions can be given by typical Hoare techniques . Looking at the subsequent step found in our set of commands , we have the variable update code yielding $ <nat:8> $ to $ <var:u0>$ . This forwards the precondition $ \{ <var:J> = <var:Z> \} $ to the condition $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \} $ . This is sound through the assignment law of usual Hoare techniques . Going forward , we have the variable update line yielding $ <nat:8> $ as $ <var:u1>$ . This command transfers $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \} $ toward the condition $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> \} $ . This is sound using the assignment rule defined by Hoare logic . Following , we have the binding line \verb | <var:u1> := <var:u1> * <var:J> ; | . This forwards $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> \} $ to $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> \times <var:Z> \} $ . After , the environment update statement \verb | <var:V> := <var:u1> ; | . This forwards the condition $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \land <var:u1> = <nat:8> \times <var:Z> \} $ to the postcondition $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \land <var:V> = <nat:8> \times <var:Z> \} $ . Next , we have the variable update statement binding $ <var:V> + <var:u0$ into $ <var:V>$ . This advances the condition $ \{ <var:J> = <var:Z> \land <var:u0> = <nat:8> \land <var:V> = <nat:8> \times <var:Z> \} $ into $ \{ <var:J> = <var:Z> \land <var:V> = <nat:8> \times <var:Z> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:8> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:J> ; <var:V> := <var:u1> ; <var:V> := <var:V> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:J> = <var:Z> }} <def:poly> {{ <var:V> = <nat:8> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:u0> = <nat:8> /\ <var:V> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:V> = <nat:8> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 