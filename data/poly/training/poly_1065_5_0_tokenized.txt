\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:8> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:t> ; <var:e> := <var:w1> ; <var:e> := <var:e> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:t> = <var:p> $ prior to evaluating this list of commands , it holds that we have $ <var:e> = <nat:5> \cdot <var:p> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this program is given with typical Hoare reasoning . After , we have the variable update command \verb | <var:w0> := <nat:8> ; | . This redefines $ \{ <var:t> = <var:p> \} $ into $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \} $ . Observing the next command contained in the series of commands , we see the command \verb | <var:w1> := <nat:5> ; | . This forwards $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \} $ toward the condition $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \land <var:w1> = <nat:5> \} $ . This is known to be sound by the assignment inference rule given in usual Hoare logic . Going to the next step , the variable update command giving $ <var:w1> * <var:t> $ into $ <var:w1>$ . This takes the precondition $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \land <var:w1> = <nat:5> \} $ into the postcondition $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \land <var:w1> = <nat:5> \times <var:p> \} $ . Taking another step toward the following bit of code found in the series of instructions , we see the environment update statement defining $ <var:w1> $ into $ <var:e>$ . This line transfers $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \land <var:w1> = <nat:5> \times <var:p> \} $ to $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \land <var:e> = <nat:5> \times <var:p> \} $ . This is shown to be logically sound through the assignment inference rule given in typical Hoare techniques . Focusing on the proceeding command found in the code segment , we have the binding line \verb | <var:e> := <var:e> + <var:w0> | . This code moves $ \{ <var:t> = <var:p> \land <var:w0> = <nat:8> \land <var:e> = <nat:5> \times <var:p> \} $ toward $ \{ <var:t> = <var:p> \land <var:e> = <nat:5> \times <var:p> + <nat:8> \} $ . This is rigorously given using the assignment rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:8> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:t> ; <var:e> := <var:w1> ; <var:e> := <var:e> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:t> = <var:p> }} <def:poly> {{ <var:e> = <nat:5> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:w0> = <nat:8> /\ <var:e> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:e> = <nat:5> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 