\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:7> ; <var:S> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:x> = <var:P> $ for any $ <var:P> \in \mathbb{Z}^+ $ before evaluating this set of commands it holds that we see $ <var:S> = <nat:7> $ after set of commands has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:x> = <var:P> \} \\ <var:D0> := <nat:7> ; \\ \{ <var:x> = <var:P> \land <var:D0> = <nat:7> \} \\ <var:S> := <var:D0> \\ \{ <var:x> = <var:P> \land <var:S> = <nat:7> \} \end{eqnarray} Therefore , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:7> ; <var:S> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:x> = <var:P> }} <def:poly> {{ <var:S> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:S> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 