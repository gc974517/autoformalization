\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:5> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:w> ; <var:W2> := <nat:1> ; <var:W2> := <var:W2> * <var:w> ; <var:W2> := <var:W2> * <var:w> ; <var:M> := <var:W2> ; <var:M> := <var:M> + <var:W1> ; <var:M> := <var:M> + <var:W0> \end{verbatim} Given that $ <var:w> = <var:i> $ --- letting $ <var:i> \in \mathbb{Z}^+ $ --- prior to running our segment of code then we see $ <var:M> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:5> $ after program has terminated . \end{theorem} \begin{proof} The argument for the set of instructions can be accomplished by usual Hoare techniques . Taking a look at the subsequent lines contained in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:i> \} & <var:W0> := <nat:5> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} \\ \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} & <var:W1> := <nat:9> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \} \\ \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \} & <var:W1> := <var:W1> * <var:w> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \cdot <var:i> \} \end{tabular} Advancing to the following bits of codefound in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:w> = <var:i> \} & <var:W0> := <nat:5> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} \\ \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} & <var:W1> := <nat:9> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \} \\ \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \} & <var:W1> := <var:W1> * <var:w> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \cdot <var:i> \} \end{tabular} This is rigorously given with the variable assignmet scheme defined by Hoare logic . Paying attention to the following lines of codecontained in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:i> \} & <var:W0> := <nat:5> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} \\ \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} & <var:W1> := <nat:9> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:9> \} \end{tabular} Honing in on the upcoming statement seen in the set of commands , \[ \begin{tabular} {rcl} \{ <var:w> = <var:i> \} & <var:W0> := <nat:5> & \{ <var:w> = <var:i> \land <var:W0> = <nat:5> \} \end{tabular} This is shown using the variable binding rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:w> = <var:i> }} <var:W0> := <nat:5> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:w> ; <var:W2> := <nat:1> ; <var:W2> := <var:W2> * <var:w> ; <var:W2> := <var:W2> * <var:w> ; <var:M> := <var:W2> ; <var:M> := <var:M> + <var:W1> ; <var:M> := <var:M> + <var:W0> {{ <var:M> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:9> * <var:i> /\ <var:W2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:9> * <var:i> /\ <var:W2> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:9> * <var:i> /\ <var:W2> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:9> * <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:W0> = <nat:5> /\ <var:M> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 