\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:8> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:L> ; <var:W> := <var:B1> ; <var:W> := <var:W> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allow --- letting positive integer coefficients $ <var:Y> $ --- $ <var:L> = <var:Y> $ prior to executing this set of commands then we see $ <var:W> = <nat:7> \cdot <var:Y> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:L> = <var:Y> \} \\ <var:B0> := <nat:8> ; \\ \{ <var:L> = <var:Y> \land <var:B0> = <nat:8> \} \\ <var:B1> := <nat:7> ; \\ \{ <var:L> = <var:Y> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \} \\ <var:B1> := <var:B1> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:B0> = <nat:8> \land <var:B1> = <nat:7> \times <var:Y> \} \\ <var:W> := <var:B1> ; \\ \{ <var:L> = <var:Y> \land <var:B0> = <nat:8> \land <var:W> = <nat:7> \times <var:Y> \} \\ <var:W> := <var:W> + <var:B0> \\ \{ <var:L> = <var:Y> \land <var:W> = <nat:7> \times <var:Y> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:8> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:L> ; <var:W> := <var:B1> ; <var:W> := <var:W> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:L> = <var:Y> }} <def:poly> {{ <var:W> = <nat:7> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:B0> = <nat:8> /\ <var:W> = <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:W> = <nat:7> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 