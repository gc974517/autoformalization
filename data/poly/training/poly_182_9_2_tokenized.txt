\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:W> ; <var:y> := <nat:2> + <var:y> * <var:W> ; <var:y> := <nat:1> + <var:y> * <var:W> ; <var:y> := <var:y> * <var:W> ; <var:y> := <nat:3> + <var:y> * <var:W> ; <var:y> := <var:y> * <var:W> ; <var:y> := <nat:2> + <var:y> * <var:W> ; <var:y> := <nat:2> + <var:y> * <var:W> \end{verbatim} Allowing --- given some $ <var:v> $ --- it to hold that $ <var:W> = <var:v> $ before evaluating this series of instructions , then we have $ <var:y> = <nat:4> \cdot <var:v> ^ <nat:8> + <nat:2> \cdot <var:v> ^ <nat:7> + <nat:2> \cdot <var:v> ^ <nat:6> + <nat:1> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> + <nat:2> $ after series of instructions has terminated . \end{theorem} \begin{proof} The application of Hoare reasoning gives : \begin{eqnarray} \{ <var:W> = <var:v> \} \\ <var:y> := <nat:4> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> \} \\ <var:y> := <nat:2> + <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> + <nat:2> \} \\ <var:y> := <nat:2> + <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> \} \\ <var:y> := <nat:1> + <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> \} \\ <var:y> := <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + \} \\ <var:y> := <nat:3> + <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> \} \\ <var:y> := <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + \} \\ <var:y> := <nat:2> + <var:y> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> \} \\ <var:y> := <nat:2> + <var:y> * <var:W> \\ \{ <var:W> = <var:v> \land <var:y> = <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:2> \} \end{eqnarray} Hence , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:W> = <var:v> }} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:W> ; <var:y> := <nat:2> + <var:y> * <var:W> ; <var:y> := <nat:1> + <var:y> * <var:W> ; <var:y> := <var:y> * <var:W> ; <var:y> := <nat:3> + <var:y> * <var:W> ; <var:y> := <var:y> * <var:W> ; <var:y> := <nat:2> + <var:y> * <var:W> ; <var:y> := <nat:2> + <var:y> * <var:W> {{ <var:y> = <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:y> = <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 