\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:3> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:M> ; <var:q> := <var:v1> ; <var:q> := <var:q> + <var:v0> \end{verbatim} Allow $ <var:M> = <var:Q> $ , for any natural coefficients $ <var:Q> $ , prior to evaluating this program then we have $ <var:q> = <nat:3> * <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} Notice this decorated set of instructions . \begin{eqnarray} \{ <var:M> = <var:Q> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:M> = <var:Q> \land <var:v0> = <nat:3> \} \\ <var:v1> := <nat:3> ; \\ \{ <var:M> = <var:Q> \land <var:v0> = <nat:3> \land <var:v1> = <nat:3> \} \\ <var:v1> := <var:v1> * <var:M> ; \\ \{ <var:M> = <var:Q> \land <var:v0> = <nat:3> \land <var:v1> = <nat:3> \times <var:Q> \} \\ <var:q> := <var:v1> ; \\ \{ <var:M> = <var:Q> \land <var:v0> = <nat:3> \land <var:q> = <nat:3> \times <var:Q> \} \\ <var:q> := <var:q> + <var:v0> \\ \{ <var:M> = <var:Q> \land <var:q> = <nat:3> \times <var:Q> + <nat:3> \} \end{eqnarray} The application of usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:M> = <var:Q> }} <var:v0> := <nat:3> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:M> ; <var:q> := <var:v1> ; <var:q> := <var:q> + <var:v0> {{ <var:q> = <nat:3> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:v0> = <nat:3> /\ <var:q> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:q> = <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 