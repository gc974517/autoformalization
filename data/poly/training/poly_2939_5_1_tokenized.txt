\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I1> := <var:w> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:3> ; <var:m> := <var:I1> <var:m> := <var:m> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:w> = <var:d> $ ahead of the execution of the list of commands , then $ <var:m> = <nat:3> \cdot <var:d> + <nat:2> $ once list of commands has finished . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:w> = <var:d> \} \\ <var:I1> := <var:w> ; \\ \{ <var:w> = <var:d> \land <var:I1> = <var:d> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:w> = <var:d> \land <var:I1> = <var:d> \land <var:I0> = <nat:2> \} \\ <var:I1> := <var:I1> * <nat:3> ; \\ \{ <var:w> = <var:d> \land <var:I1> = <nat:3> \cdot <var:d> \land <var:I0> = <nat:2> \} \\ <var:m> := <var:I1> \\ \{ <var:w> = <var:d> \land <var:I0> = <nat:2> \land <var:m> = <nat:3> \cdot <var:d> \} \\ <var:m> := <var:m> + <var:I0> \\ \{ <var:w> = <var:d> \land <var:m> = <nat:3> \cdot <var:d> + <nat:2> \} \end{eqnarray} Given the preceding argument , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:w> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:3> ; <var:m> := <var:I1> <var:m> := <var:m> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:w> = <var:d> }} <def:poly> {{ <var:m> = <nat:3> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:I1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:I1> = <var:d> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:I1> = <nat:3> * <var:d> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:I0> = <nat:2> /\ <var:m> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:m> = <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 