\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:5> ; <var:L> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:U> = <var:x> $ for some $ <var:x> $ ahead of running this code segment it must be that $ <var:L> = <nat:5> $ when program is done executing . \end{theorem} \begin{proof} Using Hoare logic produces : \begin{eqnarray} \{ <var:U> = <var:x> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:U> = <var:x> \land <var:r0> = <nat:5> \} \\ <var:L> := <var:r0> \\ \{ <var:U> = <var:x> \land <var:L> = <nat:5> \} \end{eqnarray} Given the preceding argument , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:5> ; <var:L> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <def:poly> {{ <var:L> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:L> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 