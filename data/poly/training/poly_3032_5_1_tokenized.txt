\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:E1> := <var:O> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:2> ; <var:w> := <var:E1> <var:w> := <var:w> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Given $ <var:O> = <var:F> $ ( given some $ <var:F> \in \mathbb{N} $ ) prior to evaluating the program , it holds that we have $ <var:w> = <nat:2> \cdot <var:F> + <nat:6> $ after code has finished . \end{theorem} \begin{proof} Let the following decorated list of instructions . \begin{eqnarray} \{ <var:O> = <var:F> \} \\ <var:E1> := <var:O> ; \\ \{ <var:O> = <var:F> \land <var:E1> = <var:F> \} \\ <var:E0> := <nat:6> ; \\ \{ <var:O> = <var:F> \land <var:E1> = <var:F> \land <var:E0> = <nat:6> \} \\ <var:E1> := <var:E1> * <nat:2> ; \\ \{ <var:O> = <var:F> \land <var:E1> = <nat:2> * <var:F> \land <var:E0> = <nat:6> \} \\ <var:w> := <var:E1> \\ \{ <var:O> = <var:F> \land <var:E0> = <nat:6> \land <var:w> = <nat:2> * <var:F> \} \\ <var:w> := <var:w> + <var:E0> \\ \{ <var:O> = <var:F> \land <var:w> = <nat:2> * <var:F> + <nat:6> \} \end{eqnarray} Advancing interpreting the segment of code gives : \begin{eqnarray} \end{eqnarray} Using usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:O> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:2> ; <var:w> := <var:E1> <var:w> := <var:w> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:O> = <var:F> }} <def:poly> {{ <var:w> = <nat:2> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:E1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:E1> = <var:F> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:E1> = <nat:2> * <var:F> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:E0> = <nat:6> /\ <var:w> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:w> = <nat:2> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 