\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:1> ; <var:J> := <var:B0> \end{verbatim} Allowing that $ <var:R> = <var:s> $ ahead of the execution of the segment of code , it follows that $ <var:J> = <nat:1> $ . \end{theorem} \begin{proof} Notice the following decorated set of commands . \begin{eqnarray} \{ <var:R> = <var:s> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:R> = <var:s> \land <var:B0> = <nat:1> \} \\ <var:J> := <var:B0> \\ \{ <var:R> = <var:s> \land <var:J> = <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:R> = <var:s> }} <var:B0> := <nat:1> ; <var:J> := <var:B0> {{ <var:J> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:J> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 