\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:s> ; <var:W0> := <nat:9> ; <var:W1> := <var:W1> * <nat:4> ; <var:X> := <var:W1> <var:X> := <var:X> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:s> = <var:J> $ , given $ <var:J> $ , before executing our series of instructions it must be that $ <var:X> = <nat:4> * <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:s> = <var:J> \} \\ <var:W1> := <var:s> ; \\ \{ <var:s> = <var:J> \land <var:W1> = <var:J> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:s> = <var:J> \land <var:W1> = <var:J> \land <var:W0> = <nat:9> \} \\ <var:W1> := <var:W1> * <nat:4> ; \\ \{ <var:s> = <var:J> \land <var:W1> = <nat:4> \cdot <var:J> \land <var:W0> = <nat:9> \} \\ <var:X> := <var:W1> \\ \{ <var:s> = <var:J> \land <var:W0> = <nat:9> \land <var:X> = <nat:4> \cdot <var:J> \} \\ <var:X> := <var:X> + <var:W0> \\ \{ <var:s> = <var:J> \land <var:X> = <nat:4> \cdot <var:J> + <nat:9> \} \end{eqnarray} Given the above , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:s> ; <var:W0> := <nat:9> ; <var:W1> := <var:W1> * <nat:4> ; <var:X> := <var:W1> <var:X> := <var:X> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:s> = <var:J> }} <def:poly> {{ <var:X> = <nat:4> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:W1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:W1> = <var:J> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:W1> = <nat:4> * <var:J> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:W0> = <nat:9> /\ <var:X> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:X> = <nat:4> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 