\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:9> ; <var:R> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Given it to be that $ <var:h> = <var:t> $ prior to interpreting the program it follows that $ <var:R> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be given with Hoare reasoning . Stepping through , we have \begin{verbatim} { <var:h> = <var:t> } <var:M0> := <nat:9> { <var:h> = <var:t> \land <var:M0> = <nat:9> } \end{verbatim} This is deduced using the variable update scheme in typical Hoare techniques . Stepping through , we have \begin{verbatim} { <var:h> = <var:t> } <var:M0> := <nat:9> { <var:h> = <var:t> \land <var:M0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:9> ; <var:R> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:h> = <var:t> }} <def:poly> {{ <var:R> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:R> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 