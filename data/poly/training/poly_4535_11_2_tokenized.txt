\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:n> ; <var:u> := <nat:4> + <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <nat:3> + <var:u> * <var:n> ; <var:u> := <nat:3> + <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <nat:4> + <var:u> * <var:n> ; <var:u> := <nat:3> + <var:u> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:n> = <var:v> $ ( for every natural numbers $ <var:v> $ ) before running this code segment it must be that $ <var:u> = <nat:2> \times <var:v> ^ <nat:10> + <nat:4> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:n> = <var:v> \} \\ <var:u> := <nat:2> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \} \\ <var:u> := <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> + \} \\ <var:u> := <nat:4> + <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:2> + <nat:4> \} \\ <var:u> := <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> + \} \\ <var:u> := <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:4> + <nat:4> \times <var:v> ^ <nat:2> + \} \\ <var:u> := <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:5> + <nat:4> \times <var:v> ^ <nat:3> + \} \\ <var:u> := <nat:3> + <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:6> + <nat:4> \times <var:v> ^ <nat:4> + <nat:3> \} \\ <var:u> := <nat:3> + <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:7> + <nat:4> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> + <nat:3> \} \\ <var:u> := <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:8> + <nat:4> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + \} \\ <var:u> := <nat:4> + <var:u> * <var:n> ; \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:9> + <nat:4> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:4> \} \\ <var:u> := <nat:3> + <var:u> * <var:n> \\ \{ <var:n> = <var:v> \land <var:u> = <nat:2> \times <var:v> ^ <nat:10> + <nat:4> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> + <nat:3> \} \end{eqnarray} Considering the above , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:2> ; <var:u> := <var:u> * <var:n> ; <var:u> := <nat:4> + <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <nat:3> + <var:u> * <var:n> ; <var:u> := <nat:3> + <var:u> * <var:n> ; <var:u> := <var:u> * <var:n> ; <var:u> := <nat:4> + <var:u> * <var:n> ; <var:u> := <nat:3> + <var:u> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:n> = <var:v> }} <def:poly> {{ <var:u> = <nat:2> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:4> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:u> = <nat:2> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 