\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:g> ; <var:M2> := <var:M1> * <var:g> ; <var:M3> := <var:M2> * <var:g> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:2> ; <var:f> := <var:M3> <var:f> := <var:f> + <var:M2> <var:f> := <var:f> + <var:M1> <var:f> := <var:f> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:g> = <var:F> $ , given positive numbers $ <var:F> $ , prior to executing the code it follows that we see $ <var:f> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:6> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the code is given by Hoare techniques . Observing the proceeding commands found in our set of commands , we see \begin{eqnarray} \{ <var:g> = <var:F> \} \, <var:M1> := <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \, <var:M2> := <var:M1> * <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \land <var:M3> = <var:F> ^ <nat:3> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \land <var:M3> = <var:F> ^ <nat:3> \} \, <var:M0> := <nat:1> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \land <var:M3> = <var:F> ^ <nat:3> \land <var:M0> = <nat:1> \} \end{eqnarray} Following , we have \begin{eqnarray} \{ <var:g> = <var:F> \} \, <var:M1> := <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \, <var:M2> := <var:M1> * <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \land <var:M3> = <var:F> ^ <nat:3> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \land <var:M3> = <var:F> ^ <nat:3> \} \, <var:M0> := <nat:1> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \land <var:M3> = <var:F> ^ <nat:3> \land <var:M0> = <nat:1> \} \end{eqnarray} Paying attention to the upcoming commands seen in the list of instructions , \begin{eqnarray} \{ <var:g> = <var:F> \} \, <var:M1> := <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \\ \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \, <var:M2> := <var:M1> * <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \land <var:M2> = <var:F> ^ <nat:2> \} \end{eqnarray} Considering the following command seen in the code segment , we see \begin{eqnarray} \{ <var:g> = <var:F> \} \, <var:M1> := <var:g> \, \{ <var:g> = <var:F> \land <var:M1> = <var:F> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:g> ; <var:M2> := <var:M1> * <var:g> ; <var:M3> := <var:M2> * <var:g> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:2> ; <var:f> := <var:M3> <var:f> := <var:f> + <var:M2> <var:f> := <var:f> + <var:M1> <var:f> := <var:f> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:g> = <var:F> }} <def:poly> {{ <var:f> = <nat:2> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <var:F> /\ <var:M2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <var:F> /\ <var:M2> = <var:F> ^ <nat:2> /\ <var:M3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <var:F> /\ <var:M2> = <var:F> ^ <nat:2> /\ <var:M3> = <var:F> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <nat:4> * <var:F> /\ <var:M2> = <var:F> ^ <nat:2> /\ <var:M3> = <var:F> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <nat:4> * <var:F> /\ <var:M2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:M3> = <var:F> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <nat:4> * <var:F> /\ <var:M2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:M3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <nat:4> * <var:F> /\ <var:M2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:M0> = <nat:1> /\ <var:f> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M1> = <nat:4> * <var:F> /\ <var:M0> = <nat:1> /\ <var:f> = <nat:2> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:M0> = <nat:1> /\ <var:f> = <nat:2> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 