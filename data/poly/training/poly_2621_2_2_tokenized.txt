\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:3> + <var:f> * <var:n> \end{verbatim} Allow that $ <var:n> = <var:k> $ for any $ <var:k> \in \mathbb{Z}^+ $ ahead of the execution of this list of commands , it follows that we see $ <var:f> = <nat:1> \times <var:k> + <nat:3> $ when set of commands is done . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:n> = <var:k> \} \\ <var:f> := <nat:1> ; \\ \{ <var:n> = <var:k> \land <var:f> = <nat:1> \} \\ <var:f> := <nat:3> + <var:f> * <var:n> \\ \{ <var:n> = <var:k> \land <var:f> = <nat:1> \cdot <var:k> + <nat:3> \} \end{eqnarray} Given the above , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:n> = <var:k> }} <var:f> := <nat:1> ; <var:f> := <nat:3> + <var:f> * <var:n> {{ <var:f> = <nat:1> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:f> = <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 