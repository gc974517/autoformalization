\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:g> ; <var:o2> := <var:o1> * <var:g> ; <var:o3> := <var:o2> * <var:g> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:2> ; <var:c> := <var:o3> <var:c> := <var:c> + <var:o2> <var:c> := <var:c> + <var:o1> <var:c> := <var:c> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:g> = <var:v> $ given some natural numbers $ <var:v> $ before evaluating this set of instructions it follows that $ <var:c> = <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> + <nat:7> $ once code segment is done . \end{theorem} \begin{proof} Observe that the following decorated code . \begin{eqnarray} \{ <var:g> = <var:v> \} \\ <var:o1> := <var:g> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <var:v> \} \\ <var:o2> := <var:o1> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:o1> := <var:o1> * <nat:7> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <nat:7> \cdot <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:o2> := <var:o2> * <nat:1> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <nat:7> \cdot <var:v> \land <var:o2> = <nat:1> \cdot <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:o3> := <var:o3> * <nat:2> ; \\ \{ <var:g> = <var:v> \land <var:o1> = <nat:7> \cdot <var:v> \land <var:o2> = <nat:1> \cdot <var:v> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:v> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:c> := <var:o3> \\ \{ <var:g> = <var:v> \land <var:o1> = <nat:7> \cdot <var:v> \land <var:o2> = <nat:1> \cdot <var:v> ^ <nat:2> \land <var:o0> = <nat:7> \land <var:c> = <nat:2> \cdot <var:v> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:o2> \\ \{ <var:g> = <var:v> \land <var:o1> = <nat:7> \cdot <var:v> \land <var:o0> = <nat:7> \land <var:c> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:o1> \\ \{ <var:g> = <var:v> \land <var:o0> = <nat:7> \land <var:c> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> + <nat:7> \cdot <var:v> \} \\ <var:c> := <var:c> + <var:o0> \\ \{ <var:g> = <var:v> \land <var:c> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> + <nat:7> \cdot <var:v> + <nat:7> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:g> ; <var:o2> := <var:o1> * <var:g> ; <var:o3> := <var:o2> * <var:g> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:2> ; <var:c> := <var:o3> <var:c> := <var:c> + <var:o2> <var:c> := <var:c> + <var:o1> <var:c> := <var:c> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:g> = <var:v> }} <def:poly> {{ <var:c> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <var:v> /\ <var:o2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <var:v> /\ <var:o2> = <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <var:v> /\ <var:o2> = <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <nat:7> * <var:v> /\ <var:o2> = <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <nat:7> * <var:v> /\ <var:o2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <nat:7> * <var:v> /\ <var:o2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:v> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <nat:7> * <var:v> /\ <var:o2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:o0> = <nat:7> /\ <var:c> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o1> = <nat:7> * <var:v> /\ <var:o0> = <nat:7> /\ <var:c> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:o0> = <nat:7> /\ <var:c> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 