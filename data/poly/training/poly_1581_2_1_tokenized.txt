\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:2> ; <var:F> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Allowing $ <var:j> = <var:d> $ ( given some positive coefficients $ <var:d> $ ) prior to executing our code segment , it holds that we see $ <var:F> = <nat:2> $ once list of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be demonstrated through standard Hoare logic . Looking at the upcoming step seen in our set of commands , \begin{verbatim} { <var:j> = <var:d> } <var:S0> := <nat:2> { <var:j> = <var:d> \land <var:S0> = <nat:2> } \end{verbatim} This is shown through the binding scheme given in typical Hoare reasoning . Moving on to the subsequent bit of code seen in our code , we have \begin{verbatim} { <var:j> = <var:d> } <var:S0> := <nat:2> { <var:j> = <var:d> \land <var:S0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:2> ; <var:F> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:j> = <var:d> }} <def:poly> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:d> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:d> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 