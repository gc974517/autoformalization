\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:5> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:o> ; <var:m> := <var:E1> ; <var:m> := <var:m> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Allow taking positive coefficients $ <var:L> $ that we have $ <var:o> = <var:L> $ prior to the execution of this series of commands then we see $ <var:m> = <nat:9> \times <var:L> + <nat:5> $ when program has finished . \end{theorem} \begin{proof} The course of logic for the list of instructions can be demonstrated using standard Hoare techniques . Looking at the next statement found in the code segment , we have the statement \verb | <var:E0> := <nat:5> ; | . This forwards the condition $ \{ <var:o> = <var:L> \} $ into the postcondition $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \} $ . Stepping forward , we see the code yielding $ <nat:9> $ into $ <var:E1>$ . This moves the precondition $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \} $ toward the postcondition $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \land <var:E1> = <nat:9> \} $ . This is shown to be logically sound with the assignment law in standard Hoare logic . Moving on to the next step , we have the statement binding $ <var:E1> * <var:o> $ to $ <var:E1>$ . This forwards $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \land <var:E1> = <nat:9> \} $ toward $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \land <var:E1> = <nat:9> * <var:L> \} $ . Immediately after , we see the assignment line \verb | <var:m> := <var:E1> ; | . This line moves the condition $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \land <var:E1> = <nat:9> * <var:L> \} $ toward $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \land <var:m> = <nat:9> * <var:L> \} $ . Advancing on , the binding code \verb | <var:m> := <var:m> + <var:E0> | . This takes the condition $ \{ <var:o> = <var:L> \land <var:E0> = <nat:5> \land <var:m> = <nat:9> * <var:L> \} $ to $ \{ <var:o> = <var:L> \land <var:m> = <nat:9> * <var:L> + <nat:5> \} $ . This is guaranteed through the assignment inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:5> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:o> ; <var:m> := <var:E1> ; <var:m> := <var:m> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <def:poly> {{ <var:m> = <nat:9> * <var:L> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:E0> = <nat:5> /\ <var:m> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:m> = <nat:9> * <var:L> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 