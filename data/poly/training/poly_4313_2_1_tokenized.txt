\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:d0> := <nat:3> ; <var:M> := <var:d0> \end{verbatim} Allowing it to be that $ <var:I> = <var:A> $ before interpreting our code it must be that we see $ <var:M> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be shown by Hoare reasoning . Moving forward , we have the binding line \verb | <var:d0> := <nat:3> ; | . This statement advances $ \{ <var:I> = <var:A> \} $ as the postcondition $ \{ <var:I> = <var:A> \land <var:d0> = <nat:3> \} $ . Moving onward , we see the variable binding code binding $ <var:d0$ into $ <var:M>$ . This transfers the precondition $ \{ <var:I> = <var:A> \land <var:d0> = <nat:3> \} $ into the condition $ \{ <var:I> = <var:A> \land <var:M> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <var:d0> := <nat:3> ; <var:M> := <var:d0> {{ <var:M> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:M> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 