\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:8> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:h> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:h> ; <var:f2> := <var:f2> * <var:h> ; <var:Z> := <var:f2> ; <var:Z> := <var:Z> + <var:f1> ; <var:Z> := <var:Z> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:h> = <var:U> $ --- for every $ <var:U> \in \mathbb{N} $ --- ahead of interpreting the list of commands , it must be that we see $ <var:Z> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> + <nat:8> $ once segment of code is done . \end{theorem} \begin{proof} The argument for our code segment is clear with Hoare techniques . Immediately after , we have the variable assignmet statement \verb | <var:f0> := <nat:8> ; | . This line redefines the precondition $ \{ <var:h> = <var:U> \} $ to $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \} $ . Keeping momentum , the assignment line yielding $ <nat:7> $ as $ <var:f1>$ . This command advances the precondition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \} $ toward the postcondition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \} $ . This is given by the assignment rule obtained from Hoare reasoning . Advancing on , we have the binding command \verb | <var:f1> := <var:f1> * <var:h> ; | . This statement moves the precondition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \} $ as the condition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \} $ . Honing in on the proceeding bit of code seen in our series of instructions , we have the variable assignmet statement \verb | <var:f2> := <nat:6> ; | . This line advances $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \} $ toward the postcondition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:f2> = <nat:6> \} $ . This is rigorously given by the assignment law obtained from Hoare reasoning . Following , we have the variable assignmet code letting $ <var:f2> * <var:h> $ to $ <var:f2>$ . This forwards the precondition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:f2> = <nat:6> \} $ toward the condition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:f2> = <nat:6> \cdot <var:U> \} $ . This is shown to be logically sound using the assignment rule defined by usual Hoare reasoning . Focusing on the upcoming piece of code seen in our set of commands , we have the environment update line assigning $ <var:f2> * <var:h> $ toward $ <var:f2>$ . This line transfers the precondition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:f2> = <nat:6> \cdot <var:U> \} $ into $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:f2> = <nat:6> \cdot <var:U> ^ <nat:2> \} $ . This is ensured by the assignment inference rule from typical Hoare techniques . Shifting focus toward the following piece of code found in the set of commands , we have the variable assignmet line \verb | <var:Z> := <var:f2> ; | . This line forwards the condition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:f2> = <nat:6> \cdot <var:U> ^ <nat:2> \} $ into $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:Z> = <nat:6> \cdot <var:U> ^ <nat:2> \} $ . This is guaranteed by the assignment law obtained from usual Hoare reasoning . Following , we see the environment update code \verb | <var:Z> := <var:Z> + <var:f1> ; | . This code moves $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:f1> = <nat:7> \cdot <var:U> \land <var:Z> = <nat:6> \cdot <var:U> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:Z> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> \} $ . This is deduced using the assignment rule given by usual Hoare logic . Stepping forward , we see the command giving $ <var:Z> + <var:f0$ to $ <var:Z>$ . This takes $ \{ <var:h> = <var:U> \land <var:f0> = <nat:8> \land <var:Z> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> \} $ to $ \{ <var:h> = <var:U> \land <var:Z> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:8> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:h> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:h> ; <var:f2> := <var:f2> * <var:h> ; <var:Z> := <var:f2> ; <var:Z> := <var:Z> + <var:f1> ; <var:Z> := <var:Z> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:h> = <var:U> }} <def:poly> {{ <var:Z> = <nat:6> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:7> * <var:U> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:7> * <var:U> /\ <var:f2> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:7> * <var:U> /\ <var:f2> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:7> * <var:U> /\ <var:Z> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:f0> = <nat:8> /\ <var:Z> = <nat:6> * <var:U> ^ <nat:2> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:U> /\ <var:Z> = <nat:6> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 