\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:G> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:4> ; <var:f> := <var:m1> <var:f> := <var:f> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:G> = <var:i> $ ahead of interpreting our set of instructions , it holds that we see $ <var:f> = <nat:4> * <var:i> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions is accomplished using typical Hoare techniques . Next , \verb | { <var:G> = <var:i> } <var:m1> := <var:G> { <var:G> = <var:i> \land <var:m1> = <var:i> } | . This is known to be sound using the binding law found in standard Hoare techniques . After , we have \verb | { <var:G> = <var:i> } <var:m1> := <var:G> { <var:G> = <var:i> \land <var:m1> = <var:i> } | , \verb | { <var:G> = <var:i> \land <var:m1> = <var:i> } <var:m0> := <nat:4> { <var:G> = <var:i> \land <var:m1> = <var:i> \land <var:m0> = <nat:4> } | , \verb | { <var:G> = <var:i> \land <var:m1> = <var:i> \land <var:m0> = <nat:4> } <var:m1> := <var:m1> * <nat:4> { <var:G> = <var:i> \land <var:m1> = <nat:4> \cdot <var:i> \land <var:m0> = <nat:4> } | and \verb | { <var:G> = <var:i> \land <var:m1> = <nat:4> \cdot <var:i> \land <var:m0> = <nat:4> } <var:f> := <var:m1{ <var:G> = <var:i> \land <var:m0> = <nat:4> \land <var:f> = <nat:4> \cdot <var:i> } | . This is rigorously given by the variable assignmet rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:G> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:4> ; <var:f> := <var:m1> <var:f> := <var:f> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:G> = <var:i> }} <def:poly> {{ <var:f> = <nat:4> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:m1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:m1> = <var:i> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:m1> = <nat:4> * <var:i> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:m0> = <nat:4> /\ <var:f> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:f> = <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 