\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:4> ; <var:d> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( given any positive integers $ <var:q> $ ) that $ <var:G> = <var:q> $ prior to the execution of this series of commands , it holds that we see $ <var:d> = <nat:4> $ when series of commands terminates . \end{theorem} \begin{proof} See that this decorated program . \begin{eqnarray} \{ <var:G> = <var:q> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:G> = <var:q> \land <var:b0> = <nat:4> \} \\ <var:d> := <var:b0> \\ \{ <var:G> = <var:q> \land <var:d> = <nat:4> \} \end{eqnarray} Utilizing standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:d> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:G> = <var:q> }} <def:poly> {{ <var:d> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:d> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 