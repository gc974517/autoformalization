\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:S> ; <var:u2> := <var:u1> * <var:S> ; <var:u3> := <var:u2> * <var:S> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:1> ; <var:s> := <var:u3> <var:s> := <var:s> + <var:u2> <var:s> := <var:s> + <var:u1> <var:s> := <var:s> + <var:u0> \end{verbatim} Given that $ <var:S> = <var:A> $ prior to running the list of instructions it holds that we see $ <var:s> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is evident through typical Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:S> = <var:A> } <var:u1> := <var:S> { <var:S> = <var:A> \land <var:u1> = <var:A> } { <var:S> = <var:A> \land <var:u1> = <var:A> } <var:u2> := <var:u1> * <var:S> { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> } { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> } <var:u3> := <var:u2> * <var:S> { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> } \end{verbatim} After , \begin{verbatim} { <var:S> = <var:A> } <var:u1> := <var:S> { <var:S> = <var:A> \land <var:u1> = <var:A> } { <var:S> = <var:A> \land <var:u1> = <var:A> } <var:u2> := <var:u1> * <var:S> { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> } { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> } <var:u3> := <var:u2> * <var:S> { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> } { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> } <var:u0> := <nat:2> { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } { <var:S> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } <var:u1> := <var:u1> * <nat:1> { <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } { <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } <var:u2> := <var:u2> * <nat:3> { <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } { <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:u3> = <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } <var:u3> := <var:u3> * <nat:1> { <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } { <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:A> ^ <nat:3> \land <var:u0> = <nat:2> } <var:s> := <var:u3{ <var:S> = <var:A> \land <var:u1> = <nat:1> \times <var:A> \land <var:u2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:u0> = <nat:2> \land <var:s> = <nat:1> \times <var:A> ^ <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:S> = <var:A> }} <var:u1> := <var:S> ; <var:u2> := <var:u1> * <var:S> ; <var:u3> := <var:u2> * <var:S> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:1> ; <var:s> := <var:u3> <var:s> := <var:s> + <var:u2> <var:s> := <var:s> + <var:u1> <var:s> := <var:s> + <var:u0> {{ <var:s> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <var:A> /\ <var:u2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <var:A> /\ <var:u2> = <var:A> ^ <nat:2> /\ <var:u3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <var:A> /\ <var:u2> = <var:A> ^ <nat:2> /\ <var:u3> = <var:A> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <nat:1> * <var:A> /\ <var:u2> = <var:A> ^ <nat:2> /\ <var:u3> = <var:A> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <nat:1> * <var:A> /\ <var:u2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:u3> = <var:A> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <nat:1> * <var:A> /\ <var:u2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:A> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <nat:1> * <var:A> /\ <var:u2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:s> = <nat:1> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u1> = <nat:1> * <var:A> /\ <var:u0> = <nat:2> /\ <var:s> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:u0> = <nat:2> /\ <var:s> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:s> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 