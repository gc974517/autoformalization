\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:J> ; <var:p> := <var:b1> ; <var:p> := <var:p> + <var:b0> \end{verbatim} Given $ <var:J> = <var:E> $ , given some whole numbers $ <var:E> $ , before interpreting this list of commands , it follows that we see $ <var:p> = <nat:3> \times <var:E> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands is clear by Hoare logic . Jumping to the upcoming commands seen in the set of instructions , we see \verb | { <var:J> = <var:E> } <var:b0> := <nat:4> { <var:J> = <var:E> \land <var:b0> = <nat:4> } | , \verb | { <var:J> = <var:E> \land <var:b0> = <nat:4> } <var:b1> := <nat:3> { <var:J> = <var:E> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> } | and \verb | { <var:J> = <var:E> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> } <var:b1> := <var:b1> * <var:J> { <var:J> = <var:E> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \times <var:E> } | . Moving on to the next step , we see \verb | { <var:J> = <var:E> } <var:b0> := <nat:4> { <var:J> = <var:E> \land <var:b0> = <nat:4> } | . This is ensured through the assignment rule obtained from standard Hoare logic . Jumping to the proceeding step contained in the series of commands , we see \verb | { <var:J> = <var:E> } <var:b0> := <nat:4> { <var:J> = <var:E> \land <var:b0> = <nat:4> } | . This is deduced using the binding inference rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:J> = <var:E> }} <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:J> ; <var:p> := <var:b1> ; <var:p> := <var:p> + <var:b0> {{ <var:p> = <nat:3> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:b0> = <nat:4> /\ <var:p> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:p> = <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 