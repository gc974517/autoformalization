\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:9> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:z> ; <var:p> := <var:H1> ; <var:p> := <var:p> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:z> = <var:f> $ prior to executing the set of instructions , it must be that we see $ <var:p> = <nat:8> \cdot <var:f> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:f> \} \\ <var:H0> := <nat:9> ; \\ \{ <var:z> = <var:f> \land <var:H0> = <nat:9> \} \\ <var:H1> := <nat:8> ; \\ \{ <var:z> = <var:f> \land <var:H0> = <nat:9> \land <var:H1> = <nat:8> \} \\ <var:H1> := <var:H1> * <var:z> ; \\ \{ <var:z> = <var:f> \land <var:H0> = <nat:9> \land <var:H1> = <nat:8> \cdot <var:f> \} \\ <var:p> := <var:H1> ; \\ \{ <var:z> = <var:f> \land <var:H0> = <nat:9> \land <var:p> = <nat:8> \cdot <var:f> \} \\ <var:p> := <var:p> + <var:H0> \\ \{ <var:z> = <var:f> \land <var:p> = <nat:8> \cdot <var:f> + <nat:9> \} \end{eqnarray} Applying Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:z> ; <var:p> := <var:H1> ; <var:p> := <var:p> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:z> = <var:f> }} <def:poly> {{ <var:p> = <nat:8> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:H0> = <nat:9> /\ <var:p> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:p> = <nat:8> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 