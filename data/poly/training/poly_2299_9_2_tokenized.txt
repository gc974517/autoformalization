\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:4> + <var:h> * <var:P> ; <var:h> := <nat:3> + <var:h> * <var:P> ; <var:h> := <nat:4> + <var:h> * <var:P> ; <var:h> := <var:h> * <var:P> ; <var:h> := <var:h> * <var:P> ; <var:h> := <nat:1> + <var:h> * <var:P> ; <var:h> := <nat:1> + <var:h> * <var:P> ; <var:h> := <nat:2> + <var:h> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:P> = <var:Z> $ ahead of the execution of our code it holds that we see $ <var:h> = <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is clear with Hoare techniques . Going forward , we have the statement \verb | <var:h> := <nat:3> ; | . This redefines the condition $ \{ <var:P> = <var:Z> \} $ into $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> \} $ . Moving forward to the next step , we have the binding command \verb | <var:h> := <nat:4> + <var:h> * <var:P> ; | . This command moves the precondition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> \} $ into the postcondition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> + <nat:4> \} $ . This is given using the assignment rule in usual Hoare logic . Looking at the following piece of code in our series of instructions , we have the environment update line \verb | <var:h> := <nat:3> + <var:h> * <var:P> ; | . This command forwards $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> + <nat:4> \} $ to the condition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> \} $ . Advancing , we have the variable assignmet line letting $ <nat:4> + <var:h> * <var:P> $ as $ <var:h>$ . This command transfers the precondition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> \} $ as $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> \} $ . Advancing to the following line seen in our set of instructions , we see the environment update command giving $ <var:h> * <var:P> $ as $ <var:h>$ . This forwards $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> \} $ into $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + \} $ . This is guaranteed through the assignment rule given in Hoare logic . Keeping momentum , we see the variable update statement \verb | <var:h> := <var:h> * <var:P> ; | . This code advances $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + \} $ toward $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + \} $ . This is rigorously given with the assignment law given by Hoare reasoning . Keeping momentum , we have the variable binding code assigning $ <nat:1> + <var:h> * <var:P> $ toward $ <var:h>$ . This advances $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + \} $ to $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> \} $ . This is deduced by the assignment law given by standard Hoare logic . Moving forward to the next statement contained in our series of instructions , we see the binding line \verb | <var:h> := <nat:1> + <var:h> * <var:P> ; | . This code transfers the condition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> \} $ into the condition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> + <nat:1> \} $ . This is rigorously given using the assignment inference rule of Hoare reasoning . Looking at the proceeding line found in our series of instructions , we have the binding statement letting $ <nat:2> + <var:h> * <var:P$ toward $ <var:h>$ . This moves the precondition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> + <nat:1> \} $ as the condition $ \{ <var:P> = <var:Z> \land <var:h> = <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> \} $ . This is given through the assignment law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:4> + <var:h> * <var:P> ; <var:h> := <nat:3> + <var:h> * <var:P> ; <var:h> := <nat:4> + <var:h> * <var:P> ; <var:h> := <var:h> * <var:P> ; <var:h> := <var:h> * <var:P> ; <var:h> := <nat:1> + <var:h> * <var:P> ; <var:h> := <nat:1> + <var:h> * <var:P> ; <var:h> := <nat:2> + <var:h> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:P> = <var:Z> }} <def:poly> {{ <var:h> = <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 