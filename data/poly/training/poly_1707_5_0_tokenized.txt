\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:a> ; <var:T> := <var:g1> ; <var:T> := <var:T> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assume ( for every natural numbers $ <var:A> $ ) it to hold that $ <var:a> = <var:A> $ before evaluating our code , it must be that $ <var:T> = <nat:9> * <var:A> + <nat:7> $ once series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:A> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:a> = <var:A> \land <var:g0> = <nat:7> \} \\ <var:g1> := <nat:9> ; \\ \{ <var:a> = <var:A> \land <var:g0> = <nat:7> \land <var:g1> = <nat:9> \} \\ <var:g1> := <var:g1> * <var:a> ; \\ \{ <var:a> = <var:A> \land <var:g0> = <nat:7> \land <var:g1> = <nat:9> \times <var:A> \} \\ <var:T> := <var:g1> ; \\ \{ <var:a> = <var:A> \land <var:g0> = <nat:7> \land <var:T> = <nat:9> \times <var:A> \} \\ <var:T> := <var:T> + <var:g0> \\ \{ <var:a> = <var:A> \land <var:T> = <nat:9> \times <var:A> + <nat:7> \} \end{eqnarray} Using Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:7> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:a> ; <var:T> := <var:g1> ; <var:T> := <var:T> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:a> = <var:A> }} <def:poly> {{ <var:T> = <nat:9> * <var:A> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:g0> = <nat:7> /\ <var:T> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:T> = <nat:9> * <var:A> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 