\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <var:c> * <var:q> ; <var:c> := <nat:4> + <var:c> * <var:q> ; <var:c> := <nat:4> + <var:c> * <var:q> ; <var:c> := <nat:3> + <var:c> * <var:q> ; <var:c> := <nat:4> + <var:c> * <var:q> ; <var:c> := <nat:3> + <var:c> * <var:q> ; <var:c> := <var:c> * <var:q> ; <var:c> := <nat:3> + <var:c> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Given $ <var:q> = <var:v> $ ( with some natural coefficients $ <var:v> $ ) ahead of the evaluation of our set of instructions , it holds that we have $ <var:c> = <nat:2> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:q> = <var:v> \} \\ <var:c> := <nat:2> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> \} \end{eqnarray} Advancing interpreting this series of commands yields : \begin{eqnarray} <var:c> := <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> + \} \\ <var:c> := <nat:4> + <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:2> + <nat:4> \} \\ <var:c> := <nat:4> + <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:4> \} \\ <var:c> := <nat:3> + <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> \} \\ <var:c> := <nat:4> + <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> \} \\ <var:c> := <nat:3> + <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> \} \\ <var:c> := <var:c> * <var:q> ; \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + \} \\ <var:c> := <nat:3> + <var:c> * <var:q> \\ \{ <var:q> = <var:v> \land <var:c> = <nat:2> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:2> ; <var:c> := <var:c> * <var:q> ; <var:c> := <nat:4> + <var:c> * <var:q> ; <var:c> := <nat:4> + <var:c> * <var:q> ; <var:c> := <nat:3> + <var:c> * <var:q> ; <var:c> := <nat:4> + <var:c> * <var:q> ; <var:c> := <nat:3> + <var:c> * <var:q> ; <var:c> := <var:c> * <var:q> ; <var:c> := <nat:3> + <var:c> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:q> = <var:v> }} <def:poly> {{ <var:c> = <nat:2> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:c> = <nat:2> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 