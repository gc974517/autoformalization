\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <nat:2> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:3> + <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:2> + <var:j> * <var:C> \end{verbatim} Given that $ <var:C> = <var:v> $ , given every $ <var:v> $ , before the evaluation of the code it must be that we have $ <var:j> = <nat:2> \times <var:v> ^ <nat:8> + <nat:1> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be demonstrated by the following decorated list of commands . \begin{eqnarray} \{ <var:C> = <var:v> \} \\ <var:j> := <nat:2> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> \} \\ <var:j> := <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> + \} \\ <var:j> := <nat:1> + <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:2> + <nat:1> \} \\ <var:j> := <nat:2> + <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> + <nat:2> \} \\ <var:j> := <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + \} \\ <var:j> := <nat:3> + <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:1> \} \\ <var:j> := <var:j> * <var:C> ; \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + \} \\ <var:j> := <nat:2> + <var:j> * <var:C> \\ \{ <var:C> = <var:v> \land <var:j> = <nat:2> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> \} \end{eqnarray} Applying Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:C> = <var:v> }} <var:j> := <nat:2> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <nat:2> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:3> + <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:2> + <var:j> * <var:C> {{ <var:j> = <nat:2> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:v> /\ <var:j> = <nat:2> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 