\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:7> ; <var:e> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:R> = <var:b> $ prior to executing our program it must be that we see $ <var:e> = <nat:7> $ after list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:b> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:R> = <var:b> \land <var:r0> = <nat:7> \} \end{eqnarray} Furthering the execution of this list of commands yields : \begin{eqnarray} <var:e> := <var:r0> \\ \{ <var:R> = <var:b> \land <var:e> = <nat:7> \} \end{eqnarray} The application of usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:7> ; <var:e> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:R> = <var:b> }} <def:poly> {{ <var:e> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:e> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 