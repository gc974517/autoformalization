\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:6> ; <var:f1> := <var:f1> * <var:u> ; <var:f2> := <nat:8> ; <var:f2> := <var:f2> * <var:u> ; <var:f2> := <var:f2> * <var:u> ; <var:k> := <var:f2> ; <var:k> := <var:k> + <var:f1> ; <var:k> := <var:k> + <var:f0> \end{verbatim} Assume $ <var:u> = <var:S> $ ahead of running our list of commands it holds that we have $ <var:k> = <nat:8> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is done through usual Hoare techniques . Following , we see the variable binding statement \verb | <var:f0> := <nat:9> ; | . This advances $ \{ <var:u> = <var:S> \} $ toward the postcondition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \} $ . This is known to be sound with the assignment rule in typical Hoare logic . Advancing to the next step , we have the binding line \verb | <var:f1> := <nat:6> ; | . This command redefines the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \} $ toward the postcondition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \} $ . This is given with the assignment rule from standard Hoare techniques . Now , the assignment statement defining $ <var:f1> * <var:u> $ as $ <var:f1>$ . This line transfers the precondition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \} $ to $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \} $ . Observing the subsequent line found in the code segment , we have the variable binding command \verb | <var:f2> := <nat:8> ; | . This moves $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \} $ as $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:f2> = <nat:8> \} $ . This is given through the assignment law found in typical Hoare logic . Taking a look at the subsequent piece of code found in the list of instructions , the variable binding code \verb | <var:f2> := <var:f2> * <var:u> ; | . This line moves the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:f2> = <nat:8> \} $ as $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:f2> = <nat:8> \times <var:S> \} $ . Going forward , we see the variable binding statement giving $ <var:f2> * <var:u> $ toward $ <var:f2>$ . This code advances $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:f2> = <nat:8> \times <var:S> \} $ into the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:f2> = <nat:8> \times <var:S> ^ <nat:2> \} $ . This is ensured using the assignment law from Hoare reasoning . Observing the subsequent statement in the program , the assignment statement \verb | <var:k> := <var:f2> ; | . This statement transfers the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:f2> = <nat:8> \times <var:S> ^ <nat:2> \} $ into the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:k> = <nat:8> \times <var:S> ^ <nat:2> \} $ . Moving forward , the variable binding code binding $ <var:k> + <var:f1> $ into $ <var:k>$ . This statement forwards the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:f1> = <nat:6> \times <var:S> \land <var:k> = <nat:8> \times <var:S> ^ <nat:2> \} $ as the condition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:k> = <nat:8> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> \} $ . Observing the subsequent statement contained in our list of instructions , we see the assignment command assigning $ <var:k> + <var:f0$ as $ <var:k>$ . This command advances the precondition $ \{ <var:u> = <var:S> \land <var:f0> = <nat:9> \land <var:k> = <nat:8> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> \} $ to $ \{ <var:u> = <var:S> \land <var:k> = <nat:8> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:9> \} $ . This is deduced using the assignment rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:u> = <var:S> }} <var:f0> := <nat:9> ; <var:f1> := <nat:6> ; <var:f1> := <var:f1> * <var:u> ; <var:f2> := <nat:8> ; <var:f2> := <var:f2> * <var:u> ; <var:f2> := <var:f2> * <var:u> ; <var:k> := <var:f2> ; <var:k> := <var:k> + <var:f1> ; <var:k> := <var:k> + <var:f0> {{ <var:k> = <nat:8> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:6> * <var:S> /\ <var:f2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:6> * <var:S> /\ <var:f2> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:6> * <var:S> /\ <var:f2> = <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:6> * <var:S> /\ <var:k> = <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:f0> = <nat:9> /\ <var:k> = <nat:8> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:k> = <nat:8> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 