\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:5> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:t> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:t> ; <var:U2> := <var:U2> * <var:t> ; <var:Y> := <var:U2> ; <var:Y> := <var:Y> + <var:U1> ; <var:Y> := <var:Y> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Allowing $ <var:t> = <var:n> $ --- for all positive numbers $ <var:n> $ --- before the evaluation of the program it follows that $ <var:Y> = <nat:8> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is demonstrated using the below decorated list of commands . \begin{eqnarray} \{ <var:t> = <var:n> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \} \\ <var:U1> := <nat:3> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:U1> = <nat:3> \} \\ <var:U1> := <var:U1> * <var:t> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:U1> = <nat:3> \times <var:n> \} \\ <var:U2> := <nat:8> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:U1> = <nat:3> \times <var:n> \land <var:U2> = <nat:8> \} \\ <var:U2> := <var:U2> * <var:t> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:U1> = <nat:3> \times <var:n> \land <var:U2> = <nat:8> \times <var:n> \} \\ <var:U2> := <var:U2> * <var:t> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:U1> = <nat:3> \times <var:n> \land <var:U2> = <nat:8> \times <var:n> ^ <nat:2> \} \\ <var:Y> := <var:U2> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:U1> = <nat:3> \times <var:n> \land <var:Y> = <nat:8> \times <var:n> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:U1> ; \\ \{ <var:t> = <var:n> \land <var:U0> = <nat:5> \land <var:Y> = <nat:8> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> \} \\ <var:Y> := <var:Y> + <var:U0> \\ \{ <var:t> = <var:n> \land <var:Y> = <nat:8> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:5> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:t> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:t> ; <var:U2> := <var:U2> * <var:t> ; <var:Y> := <var:U2> ; <var:Y> := <var:Y> + <var:U1> ; <var:Y> := <var:Y> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:t> = <var:n> }} <def:poly> {{ <var:Y> = <nat:8> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:3> * <var:n> /\ <var:U2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:3> * <var:n> /\ <var:U2> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:3> * <var:n> /\ <var:U2> = <nat:8> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:3> * <var:n> /\ <var:Y> = <nat:8> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:U0> = <nat:5> /\ <var:Y> = <nat:8> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:Y> = <nat:8> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 