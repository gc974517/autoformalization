\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:8> ; <var:C> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Assume ( for any natural numbers $ <var:Z> $ ) that we have $ <var:D> = <var:Z> $ before the execution of this list of instructions it must be that $ <var:C> = <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is shown through standard Hoare logic . Moving on to the upcoming step seen in the list of instructions , the variable update statement \verb | <var:Y0> := <nat:8> ; | . This moves the precondition $ \{ <var:D> = <var:Z> \} $ as the postcondition $ \{ <var:D> = <var:Z> \land <var:Y0> = <nat:8> \} $ . This is sound with the assignment law of standard Hoare logic . Considering the upcoming statement found in our set of commands , we have the assignment code \verb | <var:C> := <var:Y0> | . This command transfers the precondition $ \{ <var:D> = <var:Z> \land <var:Y0> = <nat:8> \} $ to $ \{ <var:D> = <var:Z> \land <var:C> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:8> ; <var:C> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:D> = <var:Z> }} <def:poly> {{ <var:C> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:C> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 