\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <nat:3> + <var:k> * <var:u> ; <var:k> := <nat:4> + <var:k> * <var:u> ; <var:k> := <nat:1> + <var:k> * <var:u> ; <var:k> := <nat:1> + <var:k> * <var:u> ; <var:k> := <nat:3> + <var:k> * <var:u> ; <var:k> := <nat:3> + <var:k> * <var:u> \end{verbatim} Assume that $ <var:u> = <var:Z> $ --- given all positive numbers $ <var:Z> $ --- prior to the execution of our segment of code then $ <var:k> = <nat:4> \times <var:Z> ^ <nat:6> + <nat:3> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:3> $ after series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:Z> \} \\ <var:k> := <nat:4> ; \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \} \\ <var:k> := <nat:3> + <var:k> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \times <var:Z> + <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:1> \} \\ <var:k> := <nat:1> + <var:k> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:1> \} \\ <var:k> := <nat:3> + <var:k> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:3> \} \\ <var:k> := <nat:3> + <var:k> * <var:u> \\ \{ <var:u> = <var:Z> \land <var:k> = <nat:4> \times <var:Z> ^ <nat:6> + <nat:3> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:u> = <var:Z> }} <var:k> := <nat:4> ; <var:k> := <nat:3> + <var:k> * <var:u> ; <var:k> := <nat:4> + <var:k> * <var:u> ; <var:k> := <nat:1> + <var:k> * <var:u> ; <var:k> := <nat:1> + <var:k> * <var:u> ; <var:k> := <nat:3> + <var:k> * <var:u> ; <var:k> := <nat:3> + <var:k> * <var:u> {{ <var:k> = <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:k> = <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 