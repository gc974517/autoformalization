\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:j> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:j> ; <var:U2> := <var:U2> * <var:j> ; <var:a> := <var:U2> ; <var:a> := <var:a> + <var:U1> ; <var:a> := <var:a> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:j> = <var:r> $ before evaluating the series of instructions , it must be that $ <var:a> = <nat:7> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> + <nat:4> $ once segment of code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:r> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \} \\ <var:U1> := <nat:7> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \} \\ <var:U1> := <var:U1> * <var:j> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \cdot <var:r> \} \\ <var:U2> := <nat:7> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \cdot <var:r> \land <var:U2> = <nat:7> \} \\ <var:U2> := <var:U2> * <var:j> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \cdot <var:r> \land <var:U2> = <nat:7> \cdot <var:r> \} \\ <var:U2> := <var:U2> * <var:j> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \cdot <var:r> \land <var:U2> = <nat:7> \cdot <var:r> ^ <nat:2> \} \\ <var:a> := <var:U2> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \cdot <var:r> \land <var:a> = <nat:7> \cdot <var:r> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:U1> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:4> \land <var:a> = <nat:7> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> \} \\ <var:a> := <var:a> + <var:U0> \\ \{ <var:j> = <var:r> \land <var:a> = <nat:7> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:j> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:j> ; <var:U2> := <var:U2> * <var:j> ; <var:a> := <var:U2> ; <var:a> := <var:a> + <var:U1> ; <var:a> := <var:a> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <def:poly> {{ <var:a> = <nat:7> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:r> /\ <var:U2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:r> /\ <var:U2> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:r> /\ <var:U2> = <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:r> /\ <var:a> = <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:4> /\ <var:a> = <nat:7> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a> = <nat:7> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 