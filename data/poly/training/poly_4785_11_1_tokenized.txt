\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:X> ; <var:B2> := <var:B1> * <var:X> ; <var:B3> := <var:B2> * <var:X> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:1> ; <var:K> := <var:B3> <var:K> := <var:K> + <var:B2> <var:K> := <var:K> + <var:B1> <var:K> := <var:K> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Given , for positive integer coefficients $ <var:b> $ , that we have $ <var:X> = <var:b> $ ahead of executing the code it holds that we see $ <var:K> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the set of commands is demonstrated using Hoare techniques . Shifting focus toward the next statement contained in the series of instructions , we see the binding command assigning $ <var:X> $ as $ <var:B1>$ . This transfers the condition $ \{ <var:X> = <var:b> \} $ toward $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \} $ . Moving on to the following bit of code contained in our program , we see the variable assignmet command \verb | <var:B2> := <var:B1> * <var:X> ; | . This advances the precondition $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \} $ as the postcondition $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \land <var:B2> = <var:b> ^ <nat:2> \} $ . This is sound through the assignment inference rule obtained from Hoare reasoning . Moving forward to the next step , we see the statement giving $ <var:B2> * <var:X> $ into $ <var:B3>$ . This code advances $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \land <var:B2> = <var:b> ^ <nat:2> \} $ into the postcondition $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \land <var:B2> = <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \} $ . Moving on to the subsequent piece of code seen in the list of instructions , the binding statement \verb | <var:B0> := <nat:1> ; | . This moves the precondition $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \land <var:B2> = <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \} $ toward $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \land <var:B2> = <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . This is deduced through the assignment scheme given by Hoare techniques . Paying attention to the subsequent statement found in our list of commands , we have the environment update statement \verb | <var:B1> := <var:B1> * <nat:1> ; | . This advances the precondition $ \{ <var:X> = <var:b> \land <var:B1> = <var:b> \land <var:B2> = <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ toward $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . Moving on to the upcoming statement found in our program , we have the binding command \verb | <var:B2> := <var:B2> * <nat:4> ; | . This redefines $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ as the postcondition $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . This is deduced through the assignment rule defined by Hoare logic . Taking another step toward the proceeding command found in the code , we have the binding command giving $ <var:B3> * <nat:1> $ as $ <var:B3>$ . This moves $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:B3> = <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ toward the condition $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:B3> = <nat:1> \times <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . This is guaranteed with the assignment law defined in Hoare techniques . Advancing to the following line in our set of commands , we see the environment update command letting $ <var:B3$ to $ <var:K>$ . This command advances the precondition $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:B3> = <nat:1> \times <var:b> ^ <nat:3> \land <var:B0> = <nat:1> \} $ as $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> \} $ . Looking at the following line found in our set of commands , we see the variable assignmet code \verb | <var:K> := <var:K> + <var:B2> | . This statement forwards the precondition $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> \} $ toward the condition $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B0> = <nat:1> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> \} $ . This is ensured using the assignment inference rule of usual Hoare reasoning . Moving forward to the upcoming step found in our code segment , the assignment command \verb | <var:K> := <var:K> + <var:B1> | . This transfers the precondition $ \{ <var:X> = <var:b> \land <var:B1> = <nat:1> \times <var:b> \land <var:B0> = <nat:1> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> \} $ as the condition $ \{ <var:X> = <var:b> \land <var:B0> = <nat:1> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> \} $ . This is guaranteed using the assignment inference rule defined in usual Hoare techniques . Jumping to the upcoming statement contained in our code , the line giving $ <var:K> + <var:B0$ toward $ <var:K>$ . This takes the condition $ \{ <var:X> = <var:b> \land <var:B0> = <nat:1> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> \} $ as the postcondition $ \{ <var:X> = <var:b> \land <var:K> = <nat:1> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:1> \} $ . This is known to be sound using the assignment inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:X> ; <var:B2> := <var:B1> * <var:X> ; <var:B3> := <var:B2> * <var:X> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:1> ; <var:K> := <var:B3> <var:K> := <var:K> + <var:B2> <var:K> := <var:K> + <var:B1> <var:K> := <var:K> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:X> = <var:b> }} <def:poly> {{ <var:K> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <var:b> /\ <var:B2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <var:b> /\ <var:B2> = <var:b> ^ <nat:2> /\ <var:B3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <var:b> /\ <var:B2> = <var:b> ^ <nat:2> /\ <var:B3> = <var:b> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <nat:1> * <var:b> /\ <var:B2> = <var:b> ^ <nat:2> /\ <var:B3> = <var:b> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <nat:1> * <var:b> /\ <var:B2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:B3> = <var:b> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <nat:1> * <var:b> /\ <var:B2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:b> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <nat:1> * <var:b> /\ <var:B2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:B0> = <nat:1> /\ <var:K> = <nat:1> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B1> = <nat:1> * <var:b> /\ <var:B0> = <nat:1> /\ <var:K> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:B0> = <nat:1> /\ <var:K> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:K> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 