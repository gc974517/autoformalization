\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:X> ; <var:F> := <var:T1> ; <var:F> := <var:F> + <var:T0> \end{verbatim} Assume $ <var:X> = <var:i> $ , for all integers $ <var:i> $ , ahead of running this segment of code then we see $ <var:F> = <nat:5> * <var:i> + <nat:2> $ when code has finished . \end{theorem} \begin{proof} Applying usual Hoare logic gives us : \begin{eqnarray} \{ <var:X> = <var:i> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:X> = <var:i> \land <var:T0> = <nat:2> \} \\ <var:T1> := <nat:5> ; \\ \{ <var:X> = <var:i> \land <var:T0> = <nat:2> \land <var:T1> = <nat:5> \} \\ <var:T1> := <var:T1> * <var:X> ; \\ \{ <var:X> = <var:i> \land <var:T0> = <nat:2> \land <var:T1> = <nat:5> \cdot <var:i> \} \\ <var:F> := <var:T1> ; \\ \{ <var:X> = <var:i> \land <var:T0> = <nat:2> \land <var:F> = <nat:5> \cdot <var:i> \} \\ <var:F> := <var:F> + <var:T0> \\ \{ <var:X> = <var:i> \land <var:F> = <nat:5> \cdot <var:i> + <nat:2> \} \end{eqnarray} As a result , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:X> = <var:i> }} <var:T0> := <nat:2> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:X> ; <var:F> := <var:T1> ; <var:F> := <var:F> + <var:T0> {{ <var:F> = <nat:5> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:T0> = <nat:2> /\ <var:F> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:F> = <nat:5> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 