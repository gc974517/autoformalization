\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:U1> := <var:e> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:7> ; <var:c> := <var:U1> <var:c> := <var:c> + <var:U0> \end{verbatim} Allow that $ <var:e> = <var:y> $ ( given $ <var:y> $ ) prior to evaluating the list of instructions , it follows that we have $ <var:c> = <nat:7> \times <var:y> + <nat:7> $ after list of instructions finishes . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is shown through Hoare logic . Paying attention to the upcoming piece of code found in our list of commands , we have the variable assignmet statement \verb | <var:U1> := <var:e> ; | . This forwards the condition $ \{ <var:e> = <var:y> \} $ into $ \{ <var:e> = <var:y> \land <var:U1> = <var:y> \} $ . Paying attention to the next piece of code contained in the series of commands , we see the variable update statement \verb | <var:U0> := <nat:7> ; | . This redefines the precondition $ \{ <var:e> = <var:y> \land <var:U1> = <var:y> \} $ as $ \{ <var:e> = <var:y> \land <var:U1> = <var:y> \land <var:U0> = <nat:7> \} $ . Focusing on the next line of code found in our segment of code , we see the statement \verb | <var:U1> := <var:U1> * <nat:7> ; | . This advances the condition $ \{ <var:e> = <var:y> \land <var:U1> = <var:y> \land <var:U0> = <nat:7> \} $ into the condition $ \{ <var:e> = <var:y> \land <var:U1> = <nat:7> \cdot <var:y> \land <var:U0> = <nat:7> \} $ . Moving on to the next step found in the series of instructions , the statement binding $ <var:U1$ toward $ <var:c>$ . This redefines the precondition $ \{ <var:e> = <var:y> \land <var:U1> = <nat:7> \cdot <var:y> \land <var:U0> = <nat:7> \} $ toward the postcondition $ \{ <var:e> = <var:y> \land <var:U0> = <nat:7> \land <var:c> = <nat:7> \cdot <var:y> \} $ . Now , we have the binding line \verb | <var:c> := <var:c> + <var:U0> | . This line transfers the precondition $ \{ <var:e> = <var:y> \land <var:U0> = <nat:7> \land <var:c> = <nat:7> \cdot <var:y> \} $ to $ \{ <var:e> = <var:y> \land <var:c> = <nat:7> \cdot <var:y> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:e> = <var:y> }} <var:U1> := <var:e> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:7> ; <var:c> := <var:U1> <var:c> := <var:c> + <var:U0> {{ <var:c> = <nat:7> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:U1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:U1> = <var:y> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:U1> = <nat:7> * <var:y> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:U0> = <nat:7> /\ <var:c> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:c> = <nat:7> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 