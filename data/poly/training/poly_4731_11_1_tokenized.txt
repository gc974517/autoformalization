\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:i> ; <var:n2> := <var:n1> * <var:i> ; <var:n3> := <var:n2> * <var:i> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:8> ; <var:n2> := <var:n2> * <nat:8> ; <var:n3> := <var:n3> * <nat:6> ; <var:B> := <var:n3> <var:B> := <var:B> + <var:n2> <var:B> := <var:B> + <var:n1> <var:B> := <var:B> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:i> = <var:l> $ before interpreting the series of commands , then we see $ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:l> \} \\ <var:n1> := <var:i> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <var:l> \} \\ <var:n2> := <var:n1> * <var:i> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:i> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n3> = <var:l> ^ <nat:3> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n3> = <var:l> ^ <nat:3> \land <var:n0> = <nat:8> \} \\ <var:n1> := <var:n1> * <nat:8> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <nat:8> \cdot <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n3> = <var:l> ^ <nat:3> \land <var:n0> = <nat:8> \} \\ <var:n2> := <var:n2> * <nat:8> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <nat:8> \cdot <var:l> \land <var:n2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:n3> = <var:l> ^ <nat:3> \land <var:n0> = <nat:8> \} \\ <var:n3> := <var:n3> * <nat:6> ; \\ \{ <var:i> = <var:l> \land <var:n1> = <nat:8> \cdot <var:l> \land <var:n2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:n3> = <nat:6> \cdot <var:l> ^ <nat:3> \land <var:n0> = <nat:8> \} \\ <var:B> := <var:n3> \\ \{ <var:i> = <var:l> \land <var:n1> = <nat:8> \cdot <var:l> \land <var:n2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:n0> = <nat:8> \land <var:B> = <nat:6> \cdot <var:l> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:n2> \\ \{ <var:i> = <var:l> \land <var:n1> = <nat:8> \cdot <var:l> \land <var:n0> = <nat:8> \land <var:B> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:n1> \\ \{ <var:i> = <var:l> \land <var:n0> = <nat:8> \land <var:B> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> \} \\ <var:B> := <var:B> + <var:n0> \\ \{ <var:i> = <var:l> \land <var:B> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:i> ; <var:n2> := <var:n1> * <var:i> ; <var:n3> := <var:n2> * <var:i> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:8> ; <var:n2> := <var:n2> * <nat:8> ; <var:n3> := <var:n3> * <nat:6> ; <var:B> := <var:n3> <var:B> := <var:B> + <var:n2> <var:B> := <var:B> + <var:n1> <var:B> := <var:B> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:i> = <var:l> }} <def:poly> {{ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <var:l> /\ <var:n2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <var:l> /\ <var:n2> = <var:l> ^ <nat:2> /\ <var:n3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <var:l> /\ <var:n2> = <var:l> ^ <nat:2> /\ <var:n3> = <var:l> ^ <nat:3> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <nat:8> * <var:l> /\ <var:n2> = <var:l> ^ <nat:2> /\ <var:n3> = <var:l> ^ <nat:3> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <nat:8> * <var:l> /\ <var:n2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:n3> = <var:l> ^ <nat:3> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <nat:8> * <var:l> /\ <var:n2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:l> ^ <nat:3> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <nat:8> * <var:l> /\ <var:n2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:n0> = <nat:8> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n1> = <nat:8> * <var:l> /\ <var:n0> = <nat:8> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:n0> = <nat:8> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 