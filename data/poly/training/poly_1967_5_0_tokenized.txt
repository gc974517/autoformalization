\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:D0> := <nat:8> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:c> ; <var:V> := <var:D1> ; <var:V> := <var:V> + <var:D0> \end{verbatim} Allow ( letting $ <var:b> \in \mathbb{Z}^+ $ ) it to hold that $ <var:c> = <var:b> $ prior to executing our code segment , it follows that we see $ <var:V> = <nat:9> * <var:b> + <nat:8> $ after list of instructions is done . \end{theorem} \begin{proof} The method of proof for this series of commands can be shown using standard Hoare reasoning . Advancing to the proceeding bits of codefound in the list of instructions , we see \begin{eqnarray} \{ <var:c> = <var:b> \} \, <var:D0> := <nat:8> \, \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \} \\ \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \} \, <var:D1> := <nat:9> \, \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \land <var:D1> = <nat:9> \} \\ \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \land <var:D1> = <nat:9> \} \, <var:D1> := <var:D1> * <var:c> \, \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \land <var:D1> = <nat:9> \cdot <var:b> \} \\ \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \land <var:D1> = <nat:9> \cdot <var:b> \} \, <var:V> := <var:D1> \, \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \land <var:V> = <nat:9> \cdot <var:b> \} \end{eqnarray} Advancing , we see \begin{eqnarray} \{ <var:c> = <var:b> \} \, <var:D0> := <nat:8> \, \{ <var:c> = <var:b> \land <var:D0> = <nat:8> \} \end{eqnarray} This is sound using the variable update inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:c> = <var:b> }} <var:D0> := <nat:8> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:c> ; <var:V> := <var:D1> ; <var:V> := <var:V> + <var:D0> {{ <var:V> = <nat:9> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:D0> = <nat:8> /\ <var:V> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:V> = <nat:9> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 