\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:A> := <nat:2> ; <var:A> := <var:A> * <var:u> ; <var:A> := <var:A> * <var:u> ; <var:A> := <var:A> * <var:u> ; <var:A> := <nat:2> + <var:A> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:u> = <var:O> $ before evaluating the list of instructions , it follows that we see $ <var:A> = <nat:2> \times <var:O> ^ <nat:4> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:u> = <var:O> \} \\ <var:A> := <nat:2> ; \\ \{ <var:u> = <var:O> \land <var:A> = <nat:2> \} \\ <var:A> := <var:A> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:A> = <nat:2> * <var:O> + \} \\ <var:A> := <var:A> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:A> = <nat:2> * <var:O> ^ <nat:2> + \} \\ <var:A> := <var:A> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:A> = <nat:2> * <var:O> ^ <nat:3> + \} \\ <var:A> := <nat:2> + <var:A> * <var:u> \\ \{ <var:u> = <var:O> \land <var:A> = <nat:2> * <var:O> ^ <nat:4> + <nat:2> \} \end{eqnarray} Therefore , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:2> ; <var:A> := <var:A> * <var:u> ; <var:A> := <var:A> * <var:u> ; <var:A> := <var:A> * <var:u> ; <var:A> := <nat:2> + <var:A> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:u> = <var:O> }} <def:poly> {{ <var:A> = <nat:2> * <var:O> ^ <nat:4> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:A> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:A> = <nat:2> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:A> = <nat:2> * <var:O> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:A> = <nat:2> * <var:O> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:A> = <nat:2> * <var:O> ^ <nat:4> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 