\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z3> := <nat:7> ; <var:Z3> := <var:Z3> * <var:A> ; <var:Z3> := <var:Z3> * <var:A> ; <var:Z3> := <var:Z3> * <var:A> ; <var:U> := <var:Z3> ; <var:U> := <var:U> + <var:Z0> \end{verbatim} Allow $ <var:A> = <var:c> $ --- assuming some natural numbers $ <var:c> $ --- before running this set of instructions it follows that $ <var:U> = <nat:7> \cdot <var:c> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:A> = <var:c> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:A> = <var:c> \land <var:Z0> = <nat:4> \} \\ <var:Z3> := <nat:7> ; \\ \{ <var:A> = <var:c> \land <var:Z0> = <nat:4> \land <var:Z3> = <nat:7> \} \\ <var:Z3> := <var:Z3> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:Z0> = <nat:4> \land <var:Z3> = <nat:7> \cdot <var:c> \} \\ <var:Z3> := <var:Z3> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:Z0> = <nat:4> \land <var:Z3> = <nat:7> \cdot <var:c> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:Z0> = <nat:4> \land <var:Z3> = <nat:7> \cdot <var:c> ^ <nat:3> \} \\ <var:U> := <var:Z3> ; \\ \{ <var:A> = <var:c> \land <var:Z0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:c> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:Z0> \\ \{ <var:A> = <var:c> \land <var:U> = <nat:7> \cdot <var:c> ^ <nat:3> + <nat:4> \} \end{eqnarray} Given the preceding argument , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:A> = <var:c> }} <var:Z0> := <nat:4> ; <var:Z3> := <nat:7> ; <var:Z3> := <var:Z3> * <var:A> ; <var:Z3> := <var:Z3> * <var:A> ; <var:Z3> := <var:Z3> * <var:A> ; <var:U> := <var:Z3> ; <var:U> := <var:U> + <var:Z0> {{ <var:U> = <nat:7> * <var:c> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:Z0> = <nat:4> /\ <var:Z3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:Z0> = <nat:4> /\ <var:Z3> = <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:Z0> = <nat:4> /\ <var:Z3> = <nat:7> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:Z0> = <nat:4> /\ <var:Z3> = <nat:7> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:Z0> = <nat:4> /\ <var:U> = <nat:7> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:U> = <nat:7> * <var:c> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 