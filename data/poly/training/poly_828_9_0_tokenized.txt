\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:k> ; <var:V2> := <nat:8> ; <var:V2> := <var:V2> * <var:k> ; <var:V2> := <var:V2> * <var:k> ; <var:O> := <var:V2> ; <var:O> := <var:O> + <var:V1> ; <var:O> := <var:O> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:k> = <var:U> $ ahead of the execution of our program , it holds that we see $ <var:O> = <nat:8> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> + <nat:8> $ once code exits . \end{theorem} \begin{proof} The course of logic for the list of commands is shown through the following decorated segment of code . \begin{eqnarray} \{ <var:k> = <var:U> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \} \\ <var:V1> := <nat:7> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:V1> = <nat:7> \} \\ <var:V1> := <var:V1> * <var:k> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:V1> = <nat:7> \times <var:U> \} \\ <var:V2> := <nat:8> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:V1> = <nat:7> \times <var:U> \land <var:V2> = <nat:8> \} \\ <var:V2> := <var:V2> * <var:k> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:V1> = <nat:7> \times <var:U> \land <var:V2> = <nat:8> \times <var:U> \} \\ <var:V2> := <var:V2> * <var:k> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:V1> = <nat:7> \times <var:U> \land <var:V2> = <nat:8> \times <var:U> ^ <nat:2> \} \\ <var:O> := <var:V2> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:V1> = <nat:7> \times <var:U> \land <var:O> = <nat:8> \times <var:U> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:V1> ; \\ \{ <var:k> = <var:U> \land <var:V0> = <nat:8> \land <var:O> = <nat:8> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> \} \\ <var:O> := <var:O> + <var:V0> \\ \{ <var:k> = <var:U> \land <var:O> = <nat:8> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> + <nat:8> \} \end{eqnarray} Using usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:k> ; <var:V2> := <nat:8> ; <var:V2> := <var:V2> * <var:k> ; <var:V2> := <var:V2> * <var:k> ; <var:O> := <var:V2> ; <var:O> := <var:O> + <var:V1> ; <var:O> := <var:O> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:k> = <var:U> }} <def:poly> {{ <var:O> = <nat:8> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:7> * <var:U> /\ <var:V2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:7> * <var:U> /\ <var:V2> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:7> * <var:U> /\ <var:V2> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:7> * <var:U> /\ <var:O> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:V0> = <nat:8> /\ <var:O> = <nat:8> * <var:U> ^ <nat:2> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:O> = <nat:8> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 