\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:3> ; <var:r> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allow that we have $ <var:R> = <var:q> $ before interpreting our list of commands , it holds that we see $ <var:r> = <nat:3> $ when segment of code finishes . \end{theorem} \begin{proof} The proof of the set of commands is shown through standard Hoare reasoning . Moving forward to the next line of code found in our list of commands , the variable update statement \verb | <var:a0> := <nat:3> ; | . This forwards $ \{ <var:R> = <var:q> \} $ toward the condition $ \{ <var:R> = <var:q> \land <var:a0> = <nat:3> \} $ . Moving on to the next step , we have the environment update code \verb | <var:r> := <var:a0> | . This command redefines $ \{ <var:R> = <var:q> \land <var:a0> = <nat:3> \} $ as the postcondition $ \{ <var:R> = <var:q> \land <var:r> = <nat:3> \} $ . This is known to be sound with the assignment inference rule defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:r> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:R> = <var:q> }} <def:poly> {{ <var:r> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:r> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 