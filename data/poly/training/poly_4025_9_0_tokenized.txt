\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:P> ; <var:U2> := <nat:3> ; <var:U2> := <var:U2> * <var:P> ; <var:U2> := <var:U2> * <var:P> ; <var:F> := <var:U2> ; <var:F> := <var:F> + <var:U1> ; <var:F> := <var:F> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:P> = <var:d> $ prior to running this list of instructions it follows that we see $ <var:F> = <nat:3> \times <var:d> ^ <nat:2> + <nat:7> \times <var:d> + <nat:7> $ after series of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is accomplished using typical Hoare reasoning . Focusing on the subsequent statement seen in our list of commands , we see the variable update command binding $ <nat:7> $ toward $ <var:U0>$ . This code takes the precondition $ \{ <var:P> = <var:d> \} $ into the postcondition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \} $ . This is known to be sound through the assignment inference rule given by Hoare logic . Keeping momentum , the assignment statement \verb | <var:U1> := <nat:7> ; | . This forwards $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \} $ to $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \} $ . This is guaranteed using the assignment scheme defined in standard Hoare logic . Moving forward to the next step , we have the variable assignmet code \verb | <var:U1> := <var:U1> * <var:P> ; | . This transfers the condition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \} $ into $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \} $ . This is guaranteed by the assignment inference rule of typical Hoare reasoning . Shifting focus toward the proceeding bit of code contained in the segment of code , we have the variable update line yielding $ <nat:3> $ as $ <var:U2>$ . This moves the condition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \} $ as $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:U2> = <nat:3> \} $ . This is given through the assignment inference rule defined by typical Hoare reasoning . Advancing on , we see the variable update code \verb | <var:U2> := <var:U2> * <var:P> ; | . This command moves $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:U2> = <nat:3> \} $ as $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:U2> = <nat:3> \times <var:d> \} $ . Advancing to the next step , we see the binding line giving $ <var:U2> * <var:P> $ into $ <var:U2>$ . This forwards the precondition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:U2> = <nat:3> \times <var:d> \} $ to the condition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:U2> = <nat:3> \times <var:d> ^ <nat:2> \} $ . This is guaranteed by the assignment law defined by Hoare reasoning . Considering the following statement seen in our series of commands , we have the assignment command binding $ <var:U2> $ as $ <var:F>$ . This takes $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:U2> = <nat:3> \times <var:d> ^ <nat:2> \} $ into the postcondition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:F> = <nat:3> \times <var:d> ^ <nat:2> \} $ . Advancing on , we see the assignment command assigning $ <var:F> + <var:U1> $ to $ <var:F>$ . This line moves the precondition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:U1> = <nat:7> \times <var:d> \land <var:F> = <nat:3> \times <var:d> ^ <nat:2> \} $ toward the postcondition $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:F> = <nat:3> \times <var:d> ^ <nat:2> + <nat:7> \times <var:d> \} $ . Keeping momentum , the binding statement binding $ <var:F> + <var:U0$ into $ <var:F>$ . This redefines $ \{ <var:P> = <var:d> \land <var:U0> = <nat:7> \land <var:F> = <nat:3> \times <var:d> ^ <nat:2> + <nat:7> \times <var:d> \} $ into the postcondition $ \{ <var:P> = <var:d> \land <var:F> = <nat:3> \times <var:d> ^ <nat:2> + <nat:7> \times <var:d> + <nat:7> \} $ . This is shown using the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:7> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:P> ; <var:U2> := <nat:3> ; <var:U2> := <var:U2> * <var:P> ; <var:U2> := <var:U2> * <var:P> ; <var:F> := <var:U2> ; <var:F> := <var:F> + <var:U1> ; <var:F> := <var:F> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:P> = <var:d> }} <def:poly> {{ <var:F> = <nat:3> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:7> * <var:d> /\ <var:U2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:7> * <var:d> /\ <var:U2> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:7> * <var:d> /\ <var:U2> = <nat:3> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:7> * <var:d> /\ <var:F> = <nat:3> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:U0> = <nat:7> /\ <var:F> = <nat:3> * <var:d> ^ <nat:2> + <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:F> = <nat:3> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 