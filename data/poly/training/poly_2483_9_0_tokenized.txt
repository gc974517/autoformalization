\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:f> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:f> ; <var:K2> := <var:K2> * <var:f> ; <var:a> := <var:K2> ; <var:a> := <var:a> + <var:K1> ; <var:a> := <var:a> + <var:K0> \end{verbatim} Assuming it to be that $ <var:f> = <var:j> $ prior to evaluating our segment of code , it must be that we have $ <var:a> = <nat:9> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> $ . \end{theorem} \begin{proof} Observe the following decorated series of instructions . \begin{eqnarray} \{ <var:f> = <var:j> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \} \\ <var:K1> := <nat:1> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:K1> = <nat:1> \} \\ <var:K1> := <var:K1> * <var:f> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:K1> = <nat:1> \times <var:j> \} \\ <var:K2> := <nat:9> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:K1> = <nat:1> \times <var:j> \land <var:K2> = <nat:9> \} \\ <var:K2> := <var:K2> * <var:f> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:K1> = <nat:1> \times <var:j> \land <var:K2> = <nat:9> \times <var:j> \} \\ <var:K2> := <var:K2> * <var:f> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:K1> = <nat:1> \times <var:j> \land <var:K2> = <nat:9> \times <var:j> ^ <nat:2> \} \\ <var:a> := <var:K2> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:K1> = <nat:1> \times <var:j> \land <var:a> = <nat:9> \times <var:j> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:K1> ; \\ \{ <var:f> = <var:j> \land <var:K0> = <nat:1> \land <var:a> = <nat:9> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> \} \\ <var:a> := <var:a> + <var:K0> \\ \{ <var:f> = <var:j> \land <var:a> = <nat:9> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:f> = <var:j> }} <var:K0> := <nat:1> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:f> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:f> ; <var:K2> := <var:K2> * <var:f> ; <var:a> := <var:K2> ; <var:a> := <var:a> + <var:K1> ; <var:a> := <var:a> + <var:K0> {{ <var:a> = <nat:9> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:1> * <var:j> /\ <var:K2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:1> * <var:j> /\ <var:K2> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:1> * <var:j> /\ <var:K2> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:1> * <var:j> /\ <var:a> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:K0> = <nat:1> /\ <var:a> = <nat:9> * <var:j> ^ <nat:2> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:a> = <nat:9> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 