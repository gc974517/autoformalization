\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:z> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:9> ; <var:R> := <var:E1> <var:R> := <var:R> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Given , assuming some positive integers $ <var:o> $ , it to be that $ <var:z> = <var:o> $ prior to executing this code , it must be that we have $ <var:R> = <nat:9> \cdot <var:o> + <nat:7> $ after set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:E1> := <var:z> ; \\ \{ <var:z> = <var:o> \land <var:E1> = <var:o> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:z> = <var:o> \land <var:E1> = <var:o> \land <var:E0> = <nat:7> \} \\ <var:E1> := <var:E1> * <nat:9> ; \\ \{ <var:z> = <var:o> \land <var:E1> = <nat:9> \times <var:o> \land <var:E0> = <nat:7> \} \\ <var:R> := <var:E1> \\ \{ <var:z> = <var:o> \land <var:E0> = <nat:7> \land <var:R> = <nat:9> \times <var:o> \} \\ <var:R> := <var:R> + <var:E0> \\ \{ <var:z> = <var:o> \land <var:R> = <nat:9> \times <var:o> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:z> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:9> ; <var:R> := <var:E1> <var:R> := <var:R> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <def:poly> {{ <var:R> = <nat:9> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:E1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:E1> = <var:o> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:E1> = <nat:9> * <var:o> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:E0> = <nat:7> /\ <var:R> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:R> = <nat:9> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 