\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:Q> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:Q> ; <var:Y2> := <var:Y2> * <var:Q> ; <var:x> := <var:Y2> ; <var:x> := <var:x> + <var:Y1> ; <var:x> := <var:x> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:Q> = <var:r> $ before running this set of instructions , it holds that $ <var:x> = <nat:5> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> + <nat:3> $ after series of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of the program can be accomplished by the following decorated code . \begin{eqnarray} \{ <var:Q> = <var:r> \} \\ <var:Y0> := <nat:3> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \} \\ <var:Y1> := <nat:8> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \} \\ <var:Y1> := <var:Y1> * <var:Q> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \cdot <var:r> \} \\ <var:Y2> := <nat:5> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \cdot <var:r> \land <var:Y2> = <nat:5> \} \\ <var:Y2> := <var:Y2> * <var:Q> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \cdot <var:r> \land <var:Y2> = <nat:5> \cdot <var:r> \} \\ <var:Y2> := <var:Y2> * <var:Q> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \cdot <var:r> \land <var:Y2> = <nat:5> \cdot <var:r> ^ <nat:2> \} \\ <var:x> := <var:Y2> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \cdot <var:r> \land <var:x> = <nat:5> \cdot <var:r> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:Y1> ; \\ \{ <var:Q> = <var:r> \land <var:Y0> = <nat:3> \land <var:x> = <nat:5> \cdot <var:r> ^ <nat:2> + <nat:8> \cdot <var:r> \} \\ <var:x> := <var:x> + <var:Y0> \\ \{ <var:Q> = <var:r> \land <var:x> = <nat:5> \cdot <var:r> ^ <nat:2> + <nat:8> \cdot <var:r> + <nat:3> \} \end{eqnarray} The application of usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:Q> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:Q> ; <var:Y2> := <var:Y2> * <var:Q> ; <var:x> := <var:Y2> ; <var:x> := <var:x> + <var:Y1> ; <var:x> := <var:x> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Q> = <var:r> }} <def:poly> {{ <var:x> = <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> * <var:r> /\ <var:Y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> * <var:r> /\ <var:Y2> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> * <var:r> /\ <var:Y2> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> * <var:r> /\ <var:x> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:x> = <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:x> = <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 