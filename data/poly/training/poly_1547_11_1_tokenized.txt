\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:A> ; <var:j2> := <var:j1> * <var:A> ; <var:j3> := <var:j2> * <var:A> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:4> ; <var:j3> := <var:j3> * <nat:6> ; <var:a> := <var:j3> <var:a> := <var:a> + <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:A> = <var:d> $ , assuming some positive coefficients $ <var:d> $ , prior to the evaluation of the code segment , it follows that $ <var:a> = <nat:6> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:8> \times <var:d> + <nat:3> $ once list of commands exits . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:A> = <var:d> \} \\ <var:j1> := <var:A> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <var:d> \} \\ <var:j2> := <var:j1> * <var:A> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:A> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j0> = <nat:3> \} \\ <var:j1> := <var:j1> * <nat:8> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <nat:8> \times <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j0> = <nat:3> \} \\ <var:j2> := <var:j2> * <nat:4> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <nat:8> \times <var:d> \land <var:j2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j0> = <nat:3> \} \\ <var:j3> := <var:j3> * <nat:6> ; \\ \{ <var:A> = <var:d> \land <var:j1> = <nat:8> \times <var:d> \land <var:j2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:d> ^ <nat:3> \land <var:j0> = <nat:3> \} \\ <var:a> := <var:j3> \\ \{ <var:A> = <var:d> \land <var:j1> = <nat:8> \times <var:d> \land <var:j2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:j0> = <nat:3> \land <var:a> = <nat:6> \times <var:d> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:j2> \\ \{ <var:A> = <var:d> \land <var:j1> = <nat:8> \times <var:d> \land <var:j0> = <nat:3> \land <var:a> = <nat:6> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:j1> \\ \{ <var:A> = <var:d> \land <var:j0> = <nat:3> \land <var:a> = <nat:6> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:8> \times <var:d> \} \\ <var:a> := <var:a> + <var:j0> \\ \{ <var:A> = <var:d> \land <var:a> = <nat:6> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:8> \times <var:d> + <nat:3> \} \end{eqnarray} Considering the above , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j1> := <var:A> ; <var:j2> := <var:j1> * <var:A> ; <var:j3> := <var:j2> * <var:A> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:4> ; <var:j3> := <var:j3> * <nat:6> ; <var:a> := <var:j3> <var:a> := <var:a> + <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:A> = <var:d> }} <def:poly> {{ <var:a> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <nat:8> * <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <nat:8> * <var:d> /\ <var:j2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <nat:8> * <var:d> /\ <var:j2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:d> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <nat:8> * <var:d> /\ <var:j2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:j0> = <nat:3> /\ <var:a> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j1> = <nat:8> * <var:d> /\ <var:j0> = <nat:3> /\ <var:a> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:j0> = <nat:3> /\ <var:a> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:a> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 