\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:1> ; <var:O> := <var:o0> \end{verbatim} Allowing --- for all natural numbers $ <var:n> $ --- $ <var:K> = <var:n> $ ahead of the execution of the series of instructions it holds that we have $ <var:O> = <nat:1> $ after list of instructions terminates . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:K> = <var:n> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:K> = <var:n> \land <var:o0> = <nat:1> \} \\ <var:O> := <var:o0> \\ \{ <var:K> = <var:n> \land <var:O> = <nat:1> \} \end{eqnarray} As a result , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:K> = <var:n> }} <var:o0> := <nat:1> ; <var:O> := <var:o0> {{ <var:O> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:O> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 