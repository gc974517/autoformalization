\begin{document} \begin{theorem} We define a set of commands as follows \begin{verbatim} <var:E1> := <var:P> ; <var:E2> := <var:E1> * <var:P> ; <var:E3> := <var:E2> * <var:P> ; <var:E0> := <nat:4> ; <var:E2> := <var:E2> * <nat:1> ; <var:E3> := <var:E3> * <nat:2> ; <var:w> := <var:E3> <var:w> := <var:w> + <var:E2> <var:w> := <var:w> + <var:E0> \end{verbatim} Given it to hold that $ <var:P> = <var:B> $ before running the set of instructions , then we have $ <var:w> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> $ after code segment is done executing . \end{theorem} \begin{proof} Observe that the below decorated set of commands . \begin{eqnarray} \{ <var:P> = <var:B> \} \\ <var:E1> := <var:P> ; \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \} \\ <var:E2> := <var:E1> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:4> \} \\ <var:E2> := <var:E2> * <nat:1> ; \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <nat:1> * <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:4> \} \\ <var:E3> := <var:E3> * <nat:2> ; \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <nat:1> * <var:B> ^ <nat:2> \land <var:E3> = <nat:2> * <var:B> ^ <nat:3> \land <var:E0> = <nat:4> \} \\ <var:w> := <var:E3> \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <nat:1> * <var:B> ^ <nat:2> \land <var:E0> = <nat:4> \land <var:w> = <nat:2> * <var:B> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:E2> \\ \{ <var:P> = <var:B> \land <var:E1> = <var:B> \land <var:E0> = <nat:4> \land <var:w> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:E0> \\ \{ <var:P> = <var:B> \land <var:w> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:P> = <var:B> }} <var:E1> := <var:P> ; <var:E2> := <var:E1> * <var:P> ; <var:E3> := <var:E2> * <var:P> ; <var:E0> := <nat:4> ; <var:E2> := <var:E2> * <nat:1> ; <var:E3> := <var:E3> * <nat:2> ; <var:w> := <var:E3> <var:w> := <var:w> + <var:E2> <var:w> := <var:w> + <var:E0> {{ <var:w> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:E0> = <nat:4> /\ <var:w> = <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:E1> = <var:B> /\ <var:E0> = <nat:4> /\ <var:w> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:w> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 