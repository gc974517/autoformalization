\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:6> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:a> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:a> ; <var:K2> := <var:K2> * <var:a> ; <var:m> := <var:K2> ; <var:m> := <var:m> + <var:K1> ; <var:m> := <var:m> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:a> = <var:v> $ given every whole numbers $ <var:v> $ prior to the evaluation of the series of instructions it holds that we have $ <var:m> = <nat:9> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> + <nat:6> $ when set of commands is done executing . \end{theorem} \begin{proof} The proof of the set of commands is done by Hoare logic . Advancing to the proceeding statement in the program , the assignment code \verb | <var:K0> := <nat:6> ; | . This line moves $ \{ <var:a> = <var:v> \} $ toward the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \} $ . Further , the assignment line \verb | <var:K1> := <nat:5> ; | . This transfers $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \} $ as the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \} $ . Focusing on the proceeding step found in the list of instructions , we have the code assigning $ <var:K1> * <var:a> $ toward $ <var:K1>$ . This transfers the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \} $ into the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \} $ . This is given through the assignment law given in typical Hoare logic . Moving onward , the variable assignmet command defining $ <nat:9> $ as $ <var:K2>$ . This line transfers the precondition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \} $ toward the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K2> = <nat:9> \} $ . This is shown with the assignment inference rule found in typical Hoare reasoning . Advancing to the next step contained in our segment of code , we have the variable update command assigning $ <var:K2> * <var:a> $ into $ <var:K2>$ . This redefines the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K2> = <nat:9> \} $ into the postcondition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K2> = <nat:9> \cdot <var:v> \} $ . This is guaranteed using the assignment rule given by Hoare reasoning . Advancing to the proceeding step seen in the list of instructions , we have the environment update command yielding $ <var:K2> * <var:a> $ into $ <var:K2>$ . This takes the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K2> = <nat:9> \cdot <var:v> \} $ to $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K2> = <nat:9> \cdot <var:v> ^ <nat:2> \} $ . Moving onward , we see the code letting $ <var:K2> $ as $ <var:m>$ . This statement advances the precondition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K2> = <nat:9> \cdot <var:v> ^ <nat:2> \} $ as $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:m> = <nat:9> \cdot <var:v> ^ <nat:2> \} $ . This is shown through the assignment scheme from typical Hoare techniques . Advancing to the next step , the variable assignmet line yielding $ <var:m> + <var:K1> $ into $ <var:m>$ . This code advances the condition $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:m> = <nat:9> \cdot <var:v> ^ <nat:2> \} $ toward $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> \} $ . This is given by the assignment inference rule found in usual Hoare techniques . Moving on to the next step , we see the variable assignmet line \verb | <var:m> := <var:m> + <var:K0> | . This transfers $ \{ <var:a> = <var:v> \land <var:K0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> \} $ as the postcondition $ \{ <var:a> = <var:v> \land <var:m> = <nat:9> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:6> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:a> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:a> ; <var:K2> := <var:K2> * <var:a> ; <var:m> := <var:K2> ; <var:m> := <var:m> + <var:K1> ; <var:m> := <var:m> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:a> = <var:v> }} <def:poly> {{ <var:m> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:v> /\ <var:K2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:v> /\ <var:K2> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:v> /\ <var:K2> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:v> /\ <var:m> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:K0> = <nat:6> /\ <var:m> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:m> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 