\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as \begin{verbatim} <var:n1> := <var:b> ; <var:n2> := <var:n1> * <var:b> ; <var:n3> := <var:n2> * <var:b> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:5> ; <var:n3> := <var:n3> * <nat:8> ; <var:j> := <var:n3> <var:j> := <var:j> + <var:n2> <var:j> := <var:j> + <var:n1> <var:j> := <var:j> + <var:n0> \end{verbatim} Allowing --- letting natural numbers $ <var:D> $ --- that we have $ <var:b> = <var:D> $ before executing the set of instructions then we have $ <var:j> = <nat:8> \cdot <var:D> ^ <nat:3> + <nat:5> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions is done by standard Hoare techniques . Moving forward to the next step in our list of instructions , the variable assignmet command \verb | <var:n1> := <var:b> ; | . This command moves the condition $ \{ <var:b> = <var:D> \} $ as the condition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \} $ . Looking at the upcoming piece of code contained in the series of instructions , we have the assignment statement assigning $ <var:n1> * <var:b> $ as $ <var:n2>$ . This takes the precondition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \} $ as $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \land <var:n2> = <var:D> ^ <nat:2> \} $ . Paying attention to the next statement contained in our code , the variable assignmet line \verb | <var:n3> := <var:n2> * <var:b> ; | . This forwards the condition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \land <var:n2> = <var:D> ^ <nat:2> \} $ into the condition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \land <var:n2> = <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \} $ . Going to the next step , the variable binding statement binding $ <nat:6> $ to $ <var:n0>$ . This forwards the precondition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \land <var:n2> = <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \} $ to the condition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \land <var:n2> = <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ . Advancing , we see the variable binding code yielding $ <var:n1> * <nat:3> $ toward $ <var:n1>$ . This advances the condition $ \{ <var:b> = <var:D> \land <var:n1> = <var:D> \land <var:n2> = <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ to the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ . This is ensured using the assignment rule from typical Hoare logic . Looking at the upcoming statement contained in our list of instructions , we have the variable update code \verb | <var:n2> := <var:n2> * <nat:5> ; | . This line moves the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ as the postcondition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <nat:5> \times <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ . Stepping through , we have the binding code \verb | <var:n3> := <var:n3> * <nat:8> ; | . This advances the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <nat:5> \times <var:D> ^ <nat:2> \land <var:n3> = <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ into the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <nat:5> \times <var:D> ^ <nat:2> \land <var:n3> = <nat:8> \times <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ . After , the environment update line defining $ <var:n3$ into $ <var:j>$ . This takes $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <nat:5> \times <var:D> ^ <nat:2> \land <var:n3> = <nat:8> \times <var:D> ^ <nat:3> \land <var:n0> = <nat:6> \} $ to the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <nat:5> \times <var:D> ^ <nat:2> \land <var:n0> = <nat:6> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> \} $ . This is given through the assignment scheme of usual Hoare logic . Further , the variable assignmet code \verb | <var:j> := <var:j> + <var:n2> | . This line advances the precondition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n2> = <nat:5> \times <var:D> ^ <nat:2> \land <var:n0> = <nat:6> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> \} $ into the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n0> = <nat:6> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> \} $ . Now , we have the variable assignmet code yielding $ <var:j> + <var:n1$ into $ <var:j>$ . This redefines the condition $ \{ <var:b> = <var:D> \land <var:n1> = <nat:3> \times <var:D> \land <var:n0> = <nat:6> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> \} $ as the condition $ \{ <var:b> = <var:D> \land <var:n0> = <nat:6> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> \} $ . This is shown to be logically sound using the assignment scheme given in typical Hoare reasoning . Immediately after , the assignment command \verb | <var:j> := <var:j> + <var:n0> | . This redefines the precondition $ \{ <var:b> = <var:D> \land <var:n0> = <nat:6> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> \} $ toward the postcondition $ \{ <var:b> = <var:D> \land <var:j> = <nat:8> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:b> = <var:D> }} <var:n1> := <var:b> ; <var:n2> := <var:n1> * <var:b> ; <var:n3> := <var:n2> * <var:b> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:5> ; <var:n3> := <var:n3> * <nat:8> ; <var:j> := <var:n3> <var:j> := <var:j> + <var:n2> <var:j> := <var:j> + <var:n1> <var:j> := <var:j> + <var:n0> {{ <var:j> = <nat:8> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <var:D> /\ <var:n2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <var:D> /\ <var:n2> = <var:D> ^ <nat:2> /\ <var:n3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <var:D> /\ <var:n2> = <var:D> ^ <nat:2> /\ <var:n3> = <var:D> ^ <nat:3> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <nat:3> * <var:D> /\ <var:n2> = <var:D> ^ <nat:2> /\ <var:n3> = <var:D> ^ <nat:3> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <nat:3> * <var:D> /\ <var:n2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:n3> = <var:D> ^ <nat:3> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <nat:3> * <var:D> /\ <var:n2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:D> ^ <nat:3> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <nat:3> * <var:D> /\ <var:n2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:n0> = <nat:6> /\ <var:j> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n1> = <nat:3> * <var:D> /\ <var:n0> = <nat:6> /\ <var:j> = <nat:8> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:n0> = <nat:6> /\ <var:j> = <nat:8> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:j> = <nat:8> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 