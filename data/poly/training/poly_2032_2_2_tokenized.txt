\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:1> + <var:W> * <var:B> \end{verbatim} Allow it to be that $ <var:B> = <var:Z> $ before the evaluation of our list of instructions , it follows that we have $ <var:W> = <nat:3> \cdot <var:Z> + <nat:1> $ once set of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for this code can be accomplished using typical Hoare logic . Going forward , we see the environment update command defining $ <nat:3> $ into $ <var:W>$ . This command takes the condition $ \{ <var:B> = <var:Z> \} $ to the postcondition $ \{ <var:B> = <var:Z> \land <var:W> = <nat:3> \} $ . This is shown to be logically sound using the assignment rule found in usual Hoare logic . Going forward , we have the variable update code yielding $ <nat:1> + <var:W> * <var:B$ as $ <var:W>$ . This transfers the condition $ \{ <var:B> = <var:Z> \land <var:W> = <nat:3> \} $ toward $ \{ <var:B> = <var:Z> \land <var:W> = <nat:3> \times <var:Z> + <nat:1> \} $ . This is deduced by the assignment law obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:B> = <var:Z> }} <var:W> := <nat:3> ; <var:W> := <nat:1> + <var:W> * <var:B> {{ <var:W> = <nat:3> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:W> = <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 