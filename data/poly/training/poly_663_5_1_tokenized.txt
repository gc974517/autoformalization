\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:b> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:7> ; <var:E> := <var:O1> <var:E> := <var:E> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming , for positive integers $ <var:R> $ , it to be that $ <var:b> = <var:R> $ before running the list of instructions then we have $ <var:E> = <nat:7> \cdot <var:R> + <nat:6> $ once set of commands exits . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be demonstrated through standard Hoare logic . Paying attention to the next statement in our series of instructions , we see the assignment code \verb | <var:O1> := <var:b> ; | . This advances the condition $ \{ <var:b> = <var:R> \} $ toward the postcondition $ \{ <var:b> = <var:R> \land <var:O1> = <var:R> \} $ . This is shown by the assignment inference rule defined by usual Hoare logic . Keeping momentum , we have the binding command \verb | <var:O0> := <nat:6> ; | . This command moves the condition $ \{ <var:b> = <var:R> \land <var:O1> = <var:R> \} $ as the postcondition $ \{ <var:b> = <var:R> \land <var:O1> = <var:R> \land <var:O0> = <nat:6> \} $ . Taking a look at the next statement seen in the set of commands , we see the assignment line \verb | <var:O1> := <var:O1> * <nat:7> ; | . This code forwards $ \{ <var:b> = <var:R> \land <var:O1> = <var:R> \land <var:O0> = <nat:6> \} $ into the postcondition $ \{ <var:b> = <var:R> \land <var:O1> = <nat:7> \cdot <var:R> \land <var:O0> = <nat:6> \} $ . Jumping to the next statement seen in the set of commands , we have the environment update command \verb | <var:E> := <var:O1> | . This advances the condition $ \{ <var:b> = <var:R> \land <var:O1> = <nat:7> \cdot <var:R> \land <var:O0> = <nat:6> \} $ toward the condition $ \{ <var:b> = <var:R> \land <var:O0> = <nat:6> \land <var:E> = <nat:7> \cdot <var:R> \} $ . This is deduced by the assignment law from typical Hoare logic . Immediately after , we see the binding statement assigning $ <var:E> + <var:O0$ to $ <var:E>$ . This forwards the condition $ \{ <var:b> = <var:R> \land <var:O0> = <nat:6> \land <var:E> = <nat:7> \cdot <var:R> \} $ to $ \{ <var:b> = <var:R> \land <var:E> = <nat:7> \cdot <var:R> + <nat:6> \} $ . This is guaranteed by the assignment law from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:b> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:7> ; <var:E> := <var:O1> <var:E> := <var:E> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:b> = <var:R> }} <def:poly> {{ <var:E> = <nat:7> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:O1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:O1> = <var:R> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:O1> = <nat:7> * <var:R> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:O0> = <nat:6> /\ <var:E> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:E> = <nat:7> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 