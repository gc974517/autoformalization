\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:4> ; <var:d> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:c> = <var:K> $ with some natural coefficients $ <var:K> $ ahead of running this set of instructions , it holds that we see $ <var:d> = <nat:4> $ when program has finished . \end{theorem} \begin{proof} The method of proof for the code segment is shown using typical Hoare logic . Shifting focus toward the next statement seen in our series of instructions , we have the variable update command giving $ <nat:4> $ to $ <var:Q0>$ . This forwards the precondition $ \{ <var:c> = <var:K> \} $ to $ \{ <var:c> = <var:K> \land <var:Q0> = <nat:4> \} $ . This is known to be sound by the assignment scheme from Hoare reasoning . Taking another step toward the subsequent line seen in our program , we see the environment update line \verb | <var:d> := <var:Q0> | . This statement transfers the precondition $ \{ <var:c> = <var:K> \land <var:Q0> = <nat:4> \} $ as $ \{ <var:c> = <var:K> \land <var:d> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:d> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:c> = <var:K> }} <def:poly> {{ <var:d> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:d> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 