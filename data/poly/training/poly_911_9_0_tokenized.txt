\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:4> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:C> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:C> ; <var:r2> := <var:r2> * <var:C> ; <var:R> := <var:r2> ; <var:R> := <var:R> + <var:r1> ; <var:R> := <var:R> + <var:r0> \end{verbatim} Allowing that we have $ <var:C> = <var:i> $ prior to the execution of our list of instructions it follows that we have $ <var:R> = <nat:2> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> + <nat:4> $ when segment of code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:i> \} \\ <var:r0> := <nat:4> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \} \\ <var:r1> := <nat:5> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:r1> = <nat:5> \} \\ <var:r1> := <var:r1> * <var:C> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:r1> = <nat:5> \cdot <var:i> \} \\ <var:r2> := <nat:2> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:r2> = <nat:2> \} \\ <var:r2> := <var:r2> * <var:C> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:r2> = <nat:2> \cdot <var:i> \} \\ <var:r2> := <var:r2> * <var:C> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:r2> = <nat:2> \cdot <var:i> ^ <nat:2> \} \\ <var:R> := <var:r2> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:R> = <nat:2> \cdot <var:i> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:r1> ; \\ \{ <var:C> = <var:i> \land <var:r0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> \} \\ <var:R> := <var:R> + <var:r0> \\ \{ <var:C> = <var:i> \land <var:R> = <nat:2> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:C> = <var:i> }} <var:r0> := <nat:4> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:C> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:C> ; <var:r2> := <var:r2> * <var:C> ; <var:R> := <var:r2> ; <var:R> := <var:R> + <var:r1> ; <var:R> := <var:R> + <var:r0> {{ <var:R> = <nat:2> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:5> * <var:i> /\ <var:r2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:5> * <var:i> /\ <var:r2> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:5> * <var:i> /\ <var:r2> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:5> * <var:i> /\ <var:R> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:r0> = <nat:4> /\ <var:R> = <nat:2> * <var:i> ^ <nat:2> + <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:R> = <nat:2> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 