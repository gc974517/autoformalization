\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:6> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:N> ; <var:V2> := <nat:2> ; <var:V2> := <var:V2> * <var:N> ; <var:V2> := <var:V2> * <var:N> ; <var:M> := <var:V2> ; <var:M> := <var:M> + <var:V1> ; <var:M> := <var:M> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assume ( given integers $ <var:I> $ ) $ <var:N> = <var:I> $ prior to the execution of our set of commands it must be that we have $ <var:M> = <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:6> $ after code has finished . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is done with standard Hoare reasoning . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:I> \} & <var:V0> := <nat:6> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \} & <var:V1> := <nat:3> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \} & <var:V1> := <var:V1> * <var:N> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \} & <var:V2> := <nat:2> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:V2> = <nat:2> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:V2> = <nat:2> \} & <var:V2> := <var:V2> * <var:N> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:V2> = <nat:2> \cdot <var:I> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:V2> = <nat:2> \cdot <var:I> \} & <var:V2> := <var:V2> * <var:N> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:V2> = <nat:2> \cdot <var:I> ^ <nat:2> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:V2> = <nat:2> \cdot <var:I> ^ <nat:2> \} & <var:M> := <var:V2> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:M> = <nat:2> \cdot <var:I> ^ <nat:2> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:V1> = <nat:3> \cdot <var:I> \land <var:M> = <nat:2> \cdot <var:I> ^ <nat:2> \} & <var:M> := <var:M> + <var:V1> & \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:M> = <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> \} \\ \{ <var:N> = <var:I> \land <var:V0> = <nat:6> \land <var:M> = <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> \} & <var:M> := <var:M> + <var:V0& \{ <var:N> = <var:I> \land <var:M> = <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:6> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:N> ; <var:V2> := <nat:2> ; <var:V2> := <var:V2> * <var:N> ; <var:V2> := <var:V2> * <var:N> ; <var:M> := <var:V2> ; <var:M> := <var:M> + <var:V1> ; <var:M> := <var:M> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:N> = <var:I> }} <def:poly> {{ <var:M> = <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:3> * <var:I> /\ <var:V2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:3> * <var:I> /\ <var:V2> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:3> * <var:I> /\ <var:V2> = <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:3> * <var:I> /\ <var:M> = <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:V0> = <nat:6> /\ <var:M> = <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:I> /\ <var:M> = <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 