\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:A1> := <var:n> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:7> ; <var:V> := <var:A1> <var:V> := <var:V> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given ( assuming some natural coefficients $ <var:Q> $ ) that we have $ <var:n> = <var:Q> $ prior to evaluating the code it holds that we have $ <var:V> = <nat:7> * <var:Q> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this set of instructions is clear using standard Hoare logic . Observing the proceeding lines of codecontained in the segment of code , we have \verb | { <var:n> = <var:Q> } <var:A1> := <var:n> { <var:n> = <var:Q> \land <var:A1> = <var:Q> } | and \verb | { <var:n> = <var:Q> \land <var:A1> = <var:Q> } <var:A0> := <nat:9> { <var:n> = <var:Q> \land <var:A1> = <var:Q> \land <var:A0> = <nat:9> } | . Looking at the proceeding piece of code in the series of instructions , we have \verb | { <var:n> = <var:Q> } <var:A1> := <var:n> { <var:n> = <var:Q> \land <var:A1> = <var:Q> } | . This is guaranteed through the environment update scheme found in Hoare logic . Advancing to the subsequent piece of code found in the set of commands , \verb | { <var:n> = <var:Q> } <var:A1> := <var:n> { <var:n> = <var:Q> \land <var:A1> = <var:Q> } | . This is shown using the variable binding scheme found in typical Hoare logic . Moving forward to the next step , \verb | { <var:n> = <var:Q> } <var:A1> := <var:n> { <var:n> = <var:Q> \land <var:A1> = <var:Q> } | . This is ensured with the variable binding scheme given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:n> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:7> ; <var:V> := <var:A1> <var:V> := <var:V> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:n> = <var:Q> }} <def:poly> {{ <var:V> = <nat:7> * <var:Q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:A1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:A1> = <var:Q> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:A1> = <nat:7> * <var:Q> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:A0> = <nat:9> /\ <var:V> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:V> = <nat:7> * <var:Q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 