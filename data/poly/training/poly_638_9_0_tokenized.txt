\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:6> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:i> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:i> ; <var:W2> := <var:W2> * <var:i> ; <var:z> := <var:W2> ; <var:z> := <var:z> + <var:W1> ; <var:z> := <var:z> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:i> = <var:K> $ before evaluating the set of commands , it follows that we see $ <var:z> = <nat:6> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:6> $ when program has terminated . \end{theorem} \begin{proof} The method of proof for our code segment is shown by standard Hoare reasoning . Moving forward to the proceeding step in our series of instructions , we have the assignment line \verb | <var:W0> := <nat:6> ; | . This transfers the precondition $ \{ <var:i> = <var:K> \} $ to the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \} $ . This is rigorously given with the assignment rule in typical Hoare techniques . Taking a look at the subsequent statement found in our series of instructions , we have the variable update code giving $ <nat:1> $ into $ <var:W1>$ . This line forwards $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \} $ to the postcondition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \} $ . This is given by the assignment rule from usual Hoare logic . Moving forward , we see the assignment code defining $ <var:W1> * <var:i> $ to $ <var:W1>$ . This line redefines the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \} $ to the postcondition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \} $ . This is shown to be logically sound by the assignment law found in usual Hoare techniques . Advancing , we see the variable update statement binding $ <nat:6> $ into $ <var:W2>$ . This line takes the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \} $ toward the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:W2> = <nat:6> \} $ . This is known to be sound through the assignment inference rule in standard Hoare logic . Advancing to the next step , we see the variable binding command \verb | <var:W2> := <var:W2> * <var:i> ; | . This line moves the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:W2> = <nat:6> \} $ toward $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:W2> = <nat:6> \cdot <var:K> \} $ . This is deduced through the assignment inference rule given by standard Hoare techniques . Observing the next statement in our segment of code , the statement \verb | <var:W2> := <var:W2> * <var:i> ; | . This moves the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:W2> = <nat:6> \cdot <var:K> \} $ toward the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:W2> = <nat:6> \cdot <var:K> ^ <nat:2> \} $ . Moving on to the subsequent command found in our code segment , we see the environment update command \verb | <var:z> := <var:W2> ; | . This statement transfers the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:W2> = <nat:6> \cdot <var:K> ^ <nat:2> \} $ into the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:z> = <nat:6> \cdot <var:K> ^ <nat:2> \} $ . This is guaranteed using the assignment inference rule from typical Hoare techniques . Immediately after , we have the environment update code \verb | <var:z> := <var:z> + <var:W1> ; | . This forwards the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:W1> = <nat:1> \cdot <var:K> \land <var:z> = <nat:6> \cdot <var:K> ^ <nat:2> \} $ to the condition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:z> = <nat:6> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> \} $ . Advancing on , the environment update code defining $ <var:z> + <var:W0$ toward $ <var:z>$ . This code takes the precondition $ \{ <var:i> = <var:K> \land <var:W0> = <nat:6> \land <var:z> = <nat:6> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> \} $ as $ \{ <var:i> = <var:K> \land <var:z> = <nat:6> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:6> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:i> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:i> ; <var:W2> := <var:W2> * <var:i> ; <var:z> := <var:W2> ; <var:z> := <var:z> + <var:W1> ; <var:z> := <var:z> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:i> = <var:K> }} <def:poly> {{ <var:z> = <nat:6> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:K> /\ <var:W2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:K> /\ <var:W2> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:K> /\ <var:W2> = <nat:6> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:1> * <var:K> /\ <var:z> = <nat:6> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:W0> = <nat:6> /\ <var:z> = <nat:6> * <var:K> ^ <nat:2> + <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:z> = <nat:6> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 