\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:G> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:1> ; <var:b> := <var:S1> <var:b> := <var:b> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allowing , given any whole numbers $ <var:O> $ , that we have $ <var:G> = <var:O> $ before executing this code segment , then we see $ <var:b> = <nat:1> \cdot <var:O> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be done by usual Hoare logic . Immediately following , \begin{verbatim} { <var:G> = <var:O> } <var:S1> := <var:G> { <var:G> = <var:O> \land <var:S1> = <var:O> } \end{verbatim} This is given using the binding inference rule found in Hoare reasoning . Looking at the following lines found in the set of instructions , we see \begin{verbatim} { <var:G> = <var:O> } <var:S1> := <var:G> { <var:G> = <var:O> \land <var:S1> = <var:O> } { <var:G> = <var:O> \land <var:S1> = <var:O> } <var:S0> := <nat:1> { <var:G> = <var:O> \land <var:S1> = <var:O> \land <var:S0> = <nat:1> } \end{verbatim} This is known to be sound using the variable update scheme given in typical Hoare logic . Moving on to the upcoming piece of code in our set of instructions , \begin{verbatim} { <var:G> = <var:O> } <var:S1> := <var:G> { <var:G> = <var:O> \land <var:S1> = <var:O> } \end{verbatim} This is deduced by the assignment rule defined by typical Hoare reasoning . Moving on , we see \begin{verbatim} { <var:G> = <var:O> } <var:S1> := <var:G> { <var:G> = <var:O> \land <var:S1> = <var:O> } \end{verbatim} This is given using the variable binding scheme given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S1> := <var:G> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:1> ; <var:b> := <var:S1> <var:b> := <var:b> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:G> = <var:O> }} <def:poly> {{ <var:b> = <nat:1> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:S1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:S1> = <var:O> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:S1> = <nat:1> * <var:O> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:S0> = <nat:1> /\ <var:b> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:b> = <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 