\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:H> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:O> := <var:Q1> <var:O> := <var:O> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given some natural coefficients $ <var:A> $ , that $ <var:H> = <var:A> $ before the evaluation of the series of instructions then we see $ <var:O> = <nat:8> * <var:A> + <nat:9> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques gives us : \begin{eqnarray} \{ <var:H> = <var:A> \} \\ <var:Q1> := <var:H> ; \\ \{ <var:H> = <var:A> \land <var:Q1> = <var:A> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:H> = <var:A> \land <var:Q1> = <var:A> \land <var:Q0> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <nat:8> ; \\ \{ <var:H> = <var:A> \land <var:Q1> = <nat:8> \cdot <var:A> \land <var:Q0> = <nat:9> \} \\ <var:O> := <var:Q1> \\ \{ <var:H> = <var:A> \land <var:Q0> = <nat:9> \land <var:O> = <nat:8> \cdot <var:A> \} \\ <var:O> := <var:O> + <var:Q0> \\ \{ <var:H> = <var:A> \land <var:O> = <nat:8> \cdot <var:A> + <nat:9> \} \end{eqnarray} Hence , this list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:H> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:O> := <var:Q1> <var:O> := <var:O> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:H> = <var:A> }} <def:poly> {{ <var:O> = <nat:8> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Q1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Q1> = <var:A> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Q1> = <nat:8> * <var:A> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Q0> = <nat:9> /\ <var:O> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:O> = <nat:8> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 