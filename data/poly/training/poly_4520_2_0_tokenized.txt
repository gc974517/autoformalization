\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:p0> := <nat:9> ; <var:z> := <var:p0> \end{verbatim} Assuming it to hold that $ <var:H> = <var:R> $ prior to running our set of commands it must be that $ <var:z> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions is given with usual Hoare techniques . Advancing to the next commands in the series of instructions , we have \begin{verbatim} { <var:H> = <var:R> } <var:p0> := <nat:9> { <var:H> = <var:R> \land <var:p0> = <nat:9> } { <var:H> = <var:R> \land <var:p0> = <nat:9> } <var:z> := <var:p0{ <var:H> = <var:R> \land <var:z> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:H> = <var:R> }} <var:p0> := <nat:9> ; <var:z> := <var:p0> {{ <var:z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 