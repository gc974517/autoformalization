\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:1> ; <var:i> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:z> = <var:l> $ ahead of evaluating this code segment , it follows that $ <var:i> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands can be done through Hoare reasoning . Looking at the subsequent line of code in our list of commands , \begin{eqnarray} \{ <var:z> = <var:l> \} \, <var:R0> := <nat:1> \, \{ <var:z> = <var:l> \land <var:R0> = <nat:1> \} \end{eqnarray} This is guaranteed by the assignment scheme found in Hoare reasoning . Moving forward to the next step , we see \begin{eqnarray} \{ <var:z> = <var:l> \} \, <var:R0> := <nat:1> \, \{ <var:z> = <var:l> \land <var:R0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:i> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:z> = <var:l> }} <def:poly> {{ <var:i> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:i> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 