\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:i1> := <var:F> ; <var:i2> := <var:i1> * <var:F> ; <var:i3> := <var:i2> * <var:F> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:1> ; <var:i2> := <var:i2> * <nat:1> ; <var:i3> := <var:i3> * <nat:4> ; <var:X> := <var:i3> <var:X> := <var:X> + <var:i2> <var:X> := <var:X> + <var:i1> <var:X> := <var:X> + <var:i0> \end{verbatim} Given it to be that $ <var:F> = <var:D> $ , taking integers $ <var:D> $ , prior to executing the code segment then we have $ <var:X> = <nat:4> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:2> $ after series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is clear with standard Hoare techniques . Looking at the next statement found in our list of instructions , the variable assignmet line \verb | <var:i1> := <var:F> ; | . This redefines the precondition $ \{ <var:F> = <var:D> \} $ toward $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \} $ . This is rigorously given by the assignment rule from typical Hoare techniques . Advancing to the next bit of code in our code segment , we have the variable assignmet line yielding $ <var:i1> * <var:F> $ toward $ <var:i2>$ . This advances $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \} $ toward the condition $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \} $ . Advancing to the upcoming step contained in the segment of code , we have the variable binding command \verb | <var:i3> := <var:i2> * <var:F> ; | . This command redefines $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \} $ . Taking a look at the following bit of code in our program , we have the statement defining $ <nat:2> $ into $ <var:i0>$ . This statement advances the condition $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \} $ to $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . This is sound through the assignment scheme of Hoare logic . Moving onward , the line yielding $ <var:i1> * <nat:1> $ into $ <var:i1>$ . This takes $ \{ <var:F> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . This is guaranteed with the assignment inference rule from standard Hoare reasoning . Next , we have the binding line binding $ <var:i2> * <nat:1> $ toward $ <var:i2>$ . This redefines $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ into $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <nat:1> * <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . This is known to be sound with the assignment law in standard Hoare reasoning . Moving on , we have the variable binding line giving $ <var:i3> * <nat:4> $ toward $ <var:i3>$ . This line advances the condition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <nat:1> * <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <nat:1> * <var:D> ^ <nat:2> \land <var:i3> = <nat:4> * <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ . This is guaranteed by the assignment scheme from typical Hoare techniques . Advancing to the next step , the variable binding statement yielding $ <var:i3$ toward $ <var:X>$ . This code transfers the precondition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <nat:1> * <var:D> ^ <nat:2> \land <var:i3> = <nat:4> * <var:D> ^ <nat:3> \land <var:i0> = <nat:2> \} $ toward the postcondition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <nat:1> * <var:D> ^ <nat:2> \land <var:i0> = <nat:2> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> \} $ . Considering the following statement contained in our list of instructions , we see the variable assignmet command defining $ <var:X> + <var:i2$ into $ <var:X>$ . This command transfers $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i2> = <nat:1> * <var:D> ^ <nat:2> \land <var:i0> = <nat:2> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> \} $ into the condition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i0> = <nat:2> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule of typical Hoare techniques . Advancing to the next command found in the series of commands , we have the environment update line giving $ <var:X> + <var:i1$ as $ <var:X>$ . This transfers the precondition $ \{ <var:F> = <var:D> \land <var:i1> = <nat:1> * <var:D> \land <var:i0> = <nat:2> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> \} $ into the condition $ \{ <var:F> = <var:D> \land <var:i0> = <nat:2> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> \} $ . This is guaranteed by the assignment law from Hoare reasoning . Advancing on , the binding line binding $ <var:X> + <var:i0$ into $ <var:X>$ . This code takes $ \{ <var:F> = <var:D> \land <var:i0> = <nat:2> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> \} $ as $ \{ <var:F> = <var:D> \land <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> \} $ . This is sound with the assignment rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:F> = <var:D> }} <var:i1> := <var:F> ; <var:i2> := <var:i1> * <var:F> ; <var:i3> := <var:i2> * <var:F> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:1> ; <var:i2> := <var:i2> * <nat:1> ; <var:i3> := <var:i3> * <nat:4> ; <var:X> := <var:i3> <var:X> := <var:X> + <var:i2> <var:X> := <var:X> + <var:i1> <var:X> := <var:X> + <var:i0> {{ <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <nat:1> * <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <nat:1> * <var:D> /\ <var:i2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <nat:1> * <var:D> /\ <var:i2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:D> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <nat:1> * <var:D> /\ <var:i2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:i0> = <nat:2> /\ <var:X> = <nat:4> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i1> = <nat:1> * <var:D> /\ <var:i0> = <nat:2> /\ <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:i0> = <nat:2> /\ <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 