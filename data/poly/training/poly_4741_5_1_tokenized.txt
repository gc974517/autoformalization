\begin{document} \begin{theorem} We define a code segment : \begin{verbatim} <var:y1> := <var:x> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:4> ; <var:O> := <var:y1> <var:O> := <var:O> + <var:y0> \end{verbatim} Allowing it to be that $ <var:x> = <var:i> $ , given whole numbers $ <var:i> $ , prior to interpreting the segment of code it follows that we have $ <var:O> = <nat:4> \times <var:i> + <nat:6> $ once series of instructions finishes . \end{theorem} \begin{proof} The proof of this series of instructions is shown with Hoare techniques . Looking at the upcoming pieces of code in our list of instructions , we have \begin{verbatim} { <var:x> = <var:i> } <var:y1> := <var:x> { <var:x> = <var:i> \land <var:y1> = <var:i> } { <var:x> = <var:i> \land <var:y1> = <var:i> } <var:y0> := <nat:6> { <var:x> = <var:i> \land <var:y1> = <var:i> \land <var:y0> = <nat:6> } { <var:x> = <var:i> \land <var:y1> = <var:i> \land <var:y0> = <nat:6> } <var:y1> := <var:y1> * <nat:4> { <var:x> = <var:i> \land <var:y1> = <nat:4> \times <var:i> \land <var:y0> = <nat:6> } \end{verbatim} Further , \begin{verbatim} { <var:x> = <var:i> } <var:y1> := <var:x> { <var:x> = <var:i> \land <var:y1> = <var:i> } \end{verbatim} This is rigorously given using the rule from typical Hoare reasoning . Moving on to the next step , we see \begin{verbatim} { <var:x> = <var:i> } <var:y1> := <var:x> { <var:x> = <var:i> \land <var:y1> = <var:i> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:x> = <var:i> }} <var:y1> := <var:x> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:4> ; <var:O> := <var:y1> <var:O> := <var:O> + <var:y0> {{ <var:O> = <nat:4> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:y1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:y1> = <var:i> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:y1> = <nat:4> * <var:i> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:y0> = <nat:6> /\ <var:O> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:O> = <nat:4> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 