\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:3> ; <var:n> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming for some positive coefficients $ <var:u> $ it to be that $ <var:H> = <var:u> $ prior to running our set of commands , it follows that $ <var:n> = <nat:3> $ after code segment has executed . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be given with standard Hoare reasoning . Taking a look at the following command seen in the program , we see the environment update command \verb | <var:N0> := <nat:3> ; | . This statement takes the condition $ \{ <var:H> = <var:u> \} $ to the condition $ \{ <var:H> = <var:u> \land <var:N0> = <nat:3> \} $ . This is shown using the assignment inference rule found in Hoare reasoning . After , the variable update command binding $ <var:N0$ as $ <var:n>$ . This transfers the precondition $ \{ <var:H> = <var:u> \land <var:N0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:u> \land <var:n> = <nat:3> \} $ . This is ensured through the assignment scheme given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:3> ; <var:n> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:H> = <var:u> }} <def:poly> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 