\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:3> ; <var:C> := <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> ; <var:C> := <nat:4> + <var:C> * <var:c> ; <var:C> := <nat:3> + <var:C> * <var:c> ; <var:C> := <nat:2> + <var:C> * <var:c> ; <var:C> := <nat:4> + <var:C> * <var:c> ; <var:C> := <nat:2> + <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> \end{verbatim} Given , with some $ <var:V> $ , that $ <var:c> = <var:V> $ ahead of the evaluation of our set of instructions , it holds that we have $ <var:C> = <nat:3> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:V> \} \\ <var:C> := <nat:3> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \} \\ <var:C> := <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> + \} \\ <var:C> := <nat:1> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \} \\ <var:C> := <nat:4> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> + <nat:4> \} \\ <var:C> := <nat:3> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:3> \} \\ <var:C> := <nat:2> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:2> \} \\ <var:C> := <nat:4> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:4> \} \\ <var:C> := <nat:2> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:2> \} \\ <var:C> := <nat:1> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:1> \} \\ <var:C> := <nat:1> + <var:C> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:9> + <nat:1> \times <var:V> ^ <nat:7> + <nat:4> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \\ <var:C> := <nat:1> + <var:C> * <var:c> \\ \{ <var:c> = <var:V> \land <var:C> = <nat:3> \times <var:V> ^ <nat:10> + <nat:1> \times <var:V> ^ <nat:8> + <nat:4> \times <var:V> ^ <nat:7> + <nat:3> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:c> = <var:V> }} <var:C> := <nat:3> ; <var:C> := <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> ; <var:C> := <nat:4> + <var:C> * <var:c> ; <var:C> := <nat:3> + <var:C> * <var:c> ; <var:C> := <nat:2> + <var:C> * <var:c> ; <var:C> := <nat:4> + <var:C> * <var:c> ; <var:C> := <nat:2> + <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> ; <var:C> := <nat:1> + <var:C> * <var:c> {{ <var:C> = <nat:3> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:C> = <nat:3> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 