\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:g> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:6> ; <var:F> := <var:K1> <var:F> := <var:F> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:g> = <var:s> $ ahead of running our list of instructions , it holds that we have $ <var:F> = <nat:6> \times <var:s> + <nat:7> $ once list of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:s> \} \\ <var:K1> := <var:g> ; \\ \{ <var:g> = <var:s> \land <var:K1> = <var:s> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:g> = <var:s> \land <var:K1> = <var:s> \land <var:K0> = <nat:7> \} \\ <var:K1> := <var:K1> * <nat:6> ; \\ \{ <var:g> = <var:s> \land <var:K1> = <nat:6> \cdot <var:s> \land <var:K0> = <nat:7> \} \\ <var:F> := <var:K1> \\ \{ <var:g> = <var:s> \land <var:K0> = <nat:7> \land <var:F> = <nat:6> \cdot <var:s> \} \\ <var:F> := <var:F> + <var:K0> \\ \{ <var:g> = <var:s> \land <var:F> = <nat:6> \cdot <var:s> + <nat:7> \} \end{eqnarray} Using typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:g> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:6> ; <var:F> := <var:K1> <var:F> := <var:F> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:g> = <var:s> }} <def:poly> {{ <var:F> = <nat:6> * <var:s> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:K1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:K1> = <var:s> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:K1> = <nat:6> * <var:s> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:K0> = <nat:7> /\ <var:F> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:F> = <nat:6> * <var:s> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 