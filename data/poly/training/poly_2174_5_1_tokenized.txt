\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:X> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:3> ; <var:n> := <var:q1> <var:n> := <var:n> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Allowing that we have $ <var:X> = <var:M> $ ahead of the evaluation of this list of instructions then we have $ <var:n> = <nat:3> * <var:M> + <nat:8> $ once program has finished executing . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:X> = <var:M> \} \\ <var:q1> := <var:X> ; \\ \{ <var:X> = <var:M> \land <var:q1> = <var:M> \} \\ <var:q0> := <nat:8> ; \\ \{ <var:X> = <var:M> \land <var:q1> = <var:M> \land <var:q0> = <nat:8> \} \\ <var:q1> := <var:q1> * <nat:3> ; \\ \{ <var:X> = <var:M> \land <var:q1> = <nat:3> \times <var:M> \land <var:q0> = <nat:8> \} \\ <var:n> := <var:q1> \\ \{ <var:X> = <var:M> \land <var:q0> = <nat:8> \land <var:n> = <nat:3> \times <var:M> \} \\ <var:n> := <var:n> + <var:q0> \\ \{ <var:X> = <var:M> \land <var:n> = <nat:3> \times <var:M> + <nat:8> \} \end{eqnarray} Given the above , the series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:X> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:3> ; <var:n> := <var:q1> <var:n> := <var:n> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:X> = <var:M> }} <def:poly> {{ <var:n> = <nat:3> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:q1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:q1> = <var:M> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:q1> = <nat:3> * <var:M> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:q0> = <nat:8> /\ <var:n> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:n> = <nat:3> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 