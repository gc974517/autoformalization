\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:f> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:u> := <var:Z1> <var:u> := <var:u> + <var:Z0> \end{verbatim} Allowing it to hold that $ <var:f> = <var:L> $ ahead of running the program then we have $ <var:u> = <nat:4> \times <var:L> + <nat:8> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning results in : \begin{eqnarray} \{ <var:f> = <var:L> \} \\ <var:Z1> := <var:f> ; \\ \{ <var:f> = <var:L> \land <var:Z1> = <var:L> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:f> = <var:L> \land <var:Z1> = <var:L> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <nat:4> ; \\ \{ <var:f> = <var:L> \land <var:Z1> = <nat:4> \times <var:L> \land <var:Z0> = <nat:8> \} \\ <var:u> := <var:Z1> \\ \{ <var:f> = <var:L> \land <var:Z0> = <nat:8> \land <var:u> = <nat:4> \times <var:L> \} \\ <var:u> := <var:u> + <var:Z0> \\ \{ <var:f> = <var:L> \land <var:u> = <nat:4> \times <var:L> + <nat:8> \} \end{eqnarray} As a consequence , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:f> = <var:L> }} <var:Z1> := <var:f> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:u> := <var:Z1> <var:u> := <var:u> + <var:Z0> {{ <var:u> = <nat:4> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Z1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Z1> = <var:L> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Z1> = <nat:4> * <var:L> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Z0> = <nat:8> /\ <var:u> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:u> = <nat:4> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 