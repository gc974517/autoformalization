\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:x> := <nat:1> ; <var:x> := <nat:1> + <var:x> * <var:i> \end{verbatim} Allow $ <var:i> = <var:M> $ before executing our set of instructions it must be that $ <var:x> = <nat:1> * <var:M> + <nat:1> $ once list of instructions exits . \end{theorem} \begin{proof} The flow of logic for the list of commands can be shown with Hoare techniques . Moving on to the subsequent bit of code contained in the series of instructions , the variable binding code defining $ <nat:1> $ toward $ <var:x>$ . This transfers $ \{ <var:i> = <var:M> \} $ as the condition $ \{ <var:i> = <var:M> \land <var:x> = <nat:1> \} $ . This is guaranteed by the assignment inference rule defined by usual Hoare techniques . Moving onward , we see the variable binding line letting $ <nat:1> + <var:x> * <var:i$ to $ <var:x>$ . This transfers the condition $ \{ <var:i> = <var:M> \land <var:x> = <nat:1> \} $ toward $ \{ <var:i> = <var:M> \land <var:x> = <nat:1> * <var:M> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:i> = <var:M> }} <var:x> := <nat:1> ; <var:x> := <nat:1> + <var:x> * <var:i> {{ <var:x> = <nat:1> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:x> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:x> = <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 