\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:3> ; <var:Q> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assume taking positive coefficients $ <var:b> $ that $ <var:t> = <var:b> $ prior to interpreting the set of instructions , then $ <var:Q> = <nat:3> $ after list of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:b> \} \\ <var:T0> := <nat:3> ; \\ \{ <var:t> = <var:b> \land <var:T0> = <nat:3> \} \\ <var:Q> := <var:T0> \\ \{ <var:t> = <var:b> \land <var:Q> = <nat:3> \} \end{eqnarray} The application of Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:3> ; <var:Q> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:t> = <var:b> }} <def:poly> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 