\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:p> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:3> ; <var:h> := <var:m1> <var:h> := <var:h> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:p> = <var:Q> $ before evaluating our list of instructions , it holds that $ <var:h> = <nat:3> * <var:Q> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the set of instructions is demonstrated using standard Hoare reasoning . Keeping momentum , we have the variable binding line \verb | <var:m1> := <var:p> ; | . This redefines $ \{ <var:p> = <var:Q> \} $ into $ \{ <var:p> = <var:Q> \land <var:m1> = <var:Q> \} $ . This is ensured by the assignment law defined in standard Hoare techniques . Going to the next step , the variable update code \verb | <var:m0> := <nat:7> ; | . This line forwards the condition $ \{ <var:p> = <var:Q> \land <var:m1> = <var:Q> \} $ toward the condition $ \{ <var:p> = <var:Q> \land <var:m1> = <var:Q> \land <var:m0> = <nat:7> \} $ . Observing the subsequent line contained in the code , we have the line letting $ <var:m1> * <nat:3> $ as $ <var:m1>$ . This advances the precondition $ \{ <var:p> = <var:Q> \land <var:m1> = <var:Q> \land <var:m0> = <nat:7> \} $ into the postcondition $ \{ <var:p> = <var:Q> \land <var:m1> = <nat:3> * <var:Q> \land <var:m0> = <nat:7> \} $ . This is shown using the assignment rule defined in usual Hoare reasoning . Immediately following , we have the command \verb | <var:h> := <var:m1> | . This code advances the precondition $ \{ <var:p> = <var:Q> \land <var:m1> = <nat:3> * <var:Q> \land <var:m0> = <nat:7> \} $ into the condition $ \{ <var:p> = <var:Q> \land <var:m0> = <nat:7> \land <var:h> = <nat:3> * <var:Q> \} $ . Focusing on the proceeding step in our set of commands , we have the binding statement binding $ <var:h> + <var:m0$ as $ <var:h>$ . This redefines $ \{ <var:p> = <var:Q> \land <var:m0> = <nat:7> \land <var:h> = <nat:3> * <var:Q> \} $ toward the condition $ \{ <var:p> = <var:Q> \land <var:h> = <nat:3> * <var:Q> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:p> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:3> ; <var:h> := <var:m1> <var:h> := <var:h> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:p> = <var:Q> }} <def:poly> {{ <var:h> = <nat:3> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:m1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:m1> = <var:Q> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:m1> = <nat:3> * <var:Q> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:m0> = <nat:7> /\ <var:h> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:h> = <nat:3> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 