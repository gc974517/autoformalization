\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:w> ; <var:x2> := <var:x1> * <var:w> ; <var:x3> := <var:x2> * <var:w> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:5> ; <var:x3> := <var:x3> * <nat:5> ; <var:X> := <var:x3> <var:X> := <var:X> + <var:x1> <var:X> := <var:X> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:w> = <var:J> $ ahead of the evaluation of this segment of code , it follows that we have $ <var:X> = <nat:5> \cdot <var:J> ^ <nat:3> + <nat:5> \cdot <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning produces : \begin{eqnarray} \{ <var:w> = <var:J> \} \\ <var:x1> := <var:w> ; \\ \{ <var:w> = <var:J> \land <var:x1> = <var:J> \} \\ <var:x2> := <var:x1> * <var:w> ; \\ \{ <var:w> = <var:J> \land <var:x1> = <var:J> \land <var:x2> = <var:J> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:w> ; \\ \{ <var:w> = <var:J> \land <var:x1> = <var:J> \land <var:x2> = <var:J> ^ <nat:2> \land <var:x3> = <var:J> ^ <nat:3> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:w> = <var:J> \land <var:x1> = <var:J> \land <var:x2> = <var:J> ^ <nat:2> \land <var:x3> = <var:J> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:x1> := <var:x1> * <nat:5> ; \\ \{ <var:w> = <var:J> \land <var:x1> = <nat:5> \times <var:J> \land <var:x2> = <var:J> ^ <nat:2> \land <var:x3> = <var:J> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:x3> := <var:x3> * <nat:5> ; \\ \{ <var:w> = <var:J> \land <var:x1> = <nat:5> \times <var:J> \land <var:x2> = <var:J> ^ <nat:2> \land <var:x3> = <nat:5> \times <var:J> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:X> := <var:x3> \\ \{ <var:w> = <var:J> \land <var:x1> = <nat:5> \times <var:J> \land <var:x2> = <var:J> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:X> = <nat:5> \times <var:J> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:x1> \\ \{ <var:w> = <var:J> \land <var:x0> = <nat:4> \land <var:X> = <nat:5> \times <var:J> ^ <nat:3> + <nat:5> \times <var:J> \} \\ <var:X> := <var:X> + <var:x0> \\ \{ <var:w> = <var:J> \land <var:X> = <nat:5> \times <var:J> ^ <nat:3> + <nat:5> \times <var:J> + <nat:4> \} \end{eqnarray} Thusly , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:w> ; <var:x2> := <var:x1> * <var:w> ; <var:x3> := <var:x2> * <var:w> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:5> ; <var:x3> := <var:x3> * <nat:5> ; <var:X> := <var:x3> <var:X> := <var:X> + <var:x1> <var:X> := <var:X> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:w> = <var:J> }} <def:poly> {{ <var:X> = <nat:5> * <var:J> ^ <nat:3> + <nat:5> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <var:J> /\ <var:x2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <var:J> /\ <var:x2> = <var:J> ^ <nat:2> /\ <var:x3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <var:J> /\ <var:x2> = <var:J> ^ <nat:2> /\ <var:x3> = <var:J> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <nat:5> * <var:J> /\ <var:x2> = <var:J> ^ <nat:2> /\ <var:x3> = <var:J> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <nat:5> * <var:J> /\ <var:x2> = <var:J> ^ <nat:2> /\ <var:x3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x1> = <nat:5> * <var:J> /\ <var:x2> = <var:J> ^ <nat:2> /\ <var:x0> = <nat:4> /\ <var:X> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:x0> = <nat:4> /\ <var:X> = <nat:5> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:X> = <nat:5> * <var:J> ^ <nat:3> + <nat:5> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 