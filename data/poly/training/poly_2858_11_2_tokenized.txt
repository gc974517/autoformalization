\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assume , given some $ <var:p> \in \mathbb{N} $ , $ <var:k> = <var:p> $ prior to evaluating the series of commands , it follows that $ <var:h> = <nat:4> \times <var:p> ^ <nat:10> + <nat:4> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> + <nat:4> $ . \end{theorem} \begin{proof} Observe that the following decorated set of instructions . \begin{eqnarray} \{ <var:k> = <var:p> \} \\ <var:h> := <nat:4> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> \} \\ <var:h> := <nat:4> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> + <nat:4> \} \end{eqnarray} Advancing executing the list of commands gives : \begin{eqnarray} <var:h> := <nat:1> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> \} \\ <var:h> := <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + \} \\ <var:h> := <nat:1> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:1> \} \\ <var:h> := <nat:4> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:4> \} \\ <var:h> := <nat:1> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> \} \\ <var:h> := <nat:4> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> \} \\ <var:h> := <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + \} \\ <var:h> := <nat:4> + <var:h> * <var:k> ; \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> \} \\ <var:h> := <nat:4> + <var:h> * <var:k> \\ \{ <var:k> = <var:p> \land <var:h> = <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:4> \} \end{eqnarray} Applying standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:4> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> ; <var:h> := <nat:4> + <var:h> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:k> = <var:p> }} <def:poly> {{ <var:h> = <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:p> /\ <var:h> = <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 