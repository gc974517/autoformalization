\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:B> ; <var:L2> := <nat:8> ; <var:L2> := <var:L2> * <var:B> ; <var:L2> := <var:L2> * <var:B> ; <var:n> := <var:L2> ; <var:n> := <var:n> + <var:L1> ; <var:n> := <var:n> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:B> = <var:w> $ , given $ <var:w> \in \mathbb{N} $ , before interpreting the program then $ <var:n> = <nat:8> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:2> $ when series of instructions has finished executing . \end{theorem} \begin{proof} The application of typical Hoare logic gives us : \begin{eqnarray} \{ <var:B> = <var:w> \} \\ <var:L0> := <nat:2> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \} \\ <var:L1> := <nat:3> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \} \\ <var:L1> := <var:L1> * <var:B> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \cdot <var:w> \} \\ <var:L2> := <nat:8> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \cdot <var:w> \land <var:L2> = <nat:8> \} \\ <var:L2> := <var:L2> * <var:B> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \cdot <var:w> \land <var:L2> = <nat:8> \cdot <var:w> \} \\ <var:L2> := <var:L2> * <var:B> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \cdot <var:w> \land <var:L2> = <nat:8> \cdot <var:w> ^ <nat:2> \} \\ <var:n> := <var:L2> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:L1> = <nat:3> \cdot <var:w> \land <var:n> = <nat:8> \cdot <var:w> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:L1> ; \\ \{ <var:B> = <var:w> \land <var:L0> = <nat:2> \land <var:n> = <nat:8> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> \} \\ <var:n> := <var:n> + <var:L0> \\ \{ <var:B> = <var:w> \land <var:n> = <nat:8> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:2> \} \end{eqnarray} Considering the above , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:2> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:B> ; <var:L2> := <nat:8> ; <var:L2> := <var:L2> * <var:B> ; <var:L2> := <var:L2> * <var:B> ; <var:n> := <var:L2> ; <var:n> := <var:n> + <var:L1> ; <var:n> := <var:n> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:B> = <var:w> }} <def:poly> {{ <var:n> = <nat:8> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> * <var:w> /\ <var:L2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> * <var:w> /\ <var:L2> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> * <var:w> /\ <var:L2> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:3> * <var:w> /\ <var:n> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:L0> = <nat:2> /\ <var:n> = <nat:8> * <var:w> ^ <nat:2> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:n> = <nat:8> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 