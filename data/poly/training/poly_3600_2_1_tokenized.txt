\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:1> ; <var:M> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:c> = <var:z> $ prior to executing our code segment , it must be that $ <var:M> = <nat:1> $ . \end{theorem} \begin{proof} The argument for our list of commands is done using typical Hoare techniques . Taking a look at the next piece of code contained in the code , the assignment code yielding $ <nat:1> $ to $ <var:X0>$ . This statement moves $ \{ <var:c> = <var:z> \} $ as $ \{ <var:c> = <var:z> \land <var:X0> = <nat:1> \} $ . Stepping forward , we see the variable assignmet statement \verb | <var:M> := <var:X0> | . This moves the precondition $ \{ <var:c> = <var:z> \land <var:X0> = <nat:1> \} $ into the postcondition $ \{ <var:c> = <var:z> \land <var:M> = <nat:1> \} $ . This is sound by the assignment scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:M> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:c> = <var:z> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 