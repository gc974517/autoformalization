\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:S1> := <var:b> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:1> ; <var:V> := <var:S1> <var:V> := <var:V> + <var:S0> \end{verbatim} Assuming $ <var:b> = <var:D> $ ahead of the evaluation of the program , it holds that we have $ <var:V> = <nat:1> \cdot <var:D> + <nat:9> $ after code segment executes . \end{theorem} \begin{proof} The method of proof for this list of instructions can be given by typical Hoare techniques . Moving forward to the next step , we see the command \verb | <var:S1> := <var:b> ; | . This takes the precondition $ \{ <var:b> = <var:D> \} $ into the postcondition $ \{ <var:b> = <var:D> \land <var:S1> = <var:D> \} $ . This is deduced using the assignment rule from standard Hoare logic . Advancing on , we have the line giving $ <nat:9> $ toward $ <var:S0>$ . This statement takes the condition $ \{ <var:b> = <var:D> \land <var:S1> = <var:D> \} $ toward the postcondition $ \{ <var:b> = <var:D> \land <var:S1> = <var:D> \land <var:S0> = <nat:9> \} $ . This is deduced with the assignment rule given in Hoare techniques . Advancing to the next step , we see the variable assignmet command yielding $ <var:S1> * <nat:1> $ toward $ <var:S1>$ . This command takes the condition $ \{ <var:b> = <var:D> \land <var:S1> = <var:D> \land <var:S0> = <nat:9> \} $ into the condition $ \{ <var:b> = <var:D> \land <var:S1> = <nat:1> \times <var:D> \land <var:S0> = <nat:9> \} $ . This is guaranteed with the assignment law defined in typical Hoare reasoning . Moving on to the next step , we have the assignment statement \verb | <var:V> := <var:S1> | . This moves the precondition $ \{ <var:b> = <var:D> \land <var:S1> = <nat:1> \times <var:D> \land <var:S0> = <nat:9> \} $ toward the condition $ \{ <var:b> = <var:D> \land <var:S0> = <nat:9> \land <var:V> = <nat:1> \times <var:D> \} $ . Looking at the next line found in the series of commands , we see the assignment command \verb | <var:V> := <var:V> + <var:S0> | . This redefines $ \{ <var:b> = <var:D> \land <var:S0> = <nat:9> \land <var:V> = <nat:1> \times <var:D> \} $ to the condition $ \{ <var:b> = <var:D> \land <var:V> = <nat:1> \times <var:D> + <nat:9> \} $ . This is shown to be logically sound by the assignment scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:b> = <var:D> }} <var:S1> := <var:b> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:1> ; <var:V> := <var:S1> <var:V> := <var:V> + <var:S0> {{ <var:V> = <nat:1> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:S1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:S1> = <var:D> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:S1> = <nat:1> * <var:D> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:S0> = <nat:9> /\ <var:V> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:V> = <nat:1> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 