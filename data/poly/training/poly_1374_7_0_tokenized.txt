\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:2> ; <var:c3> := <nat:1> ; <var:c3> := <var:c3> * <var:i> ; <var:c3> := <var:c3> * <var:i> ; <var:c3> := <var:c3> * <var:i> ; <var:R> := <var:c3> ; <var:R> := <var:R> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:i> = <var:T> $ before running our list of commands it follows that $ <var:R> = <nat:1> \times <var:T> ^ <nat:3> + <nat:2> $ once code segment terminates . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is accomplished through usual Hoare techniques . Advancing , we have the binding line defining $ <nat:2> $ to $ <var:c0>$ . This command forwards $ \{ <var:i> = <var:T> \} $ as the postcondition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \} $ . This is sound by the assignment rule defined by Hoare reasoning . Advancing , the command \verb | <var:c3> := <nat:1> ; | . This moves the precondition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \} $ as the postcondition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \} $ . This is guaranteed by the assignment inference rule given in usual Hoare reasoning . Honing in on the subsequent step contained in our code , we see the variable update code \verb | <var:c3> := <var:c3> * <var:i> ; | . This advances the condition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \} $ into the condition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \cdot <var:T> \} $ . Looking at the proceeding command found in the series of instructions , we have the environment update line \verb | <var:c3> := <var:c3> * <var:i> ; | . This statement advances $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \cdot <var:T> \} $ into the condition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \cdot <var:T> ^ <nat:2> \} $ . This is shown by the assignment law given in usual Hoare reasoning . Immediately after , we see the environment update command \verb | <var:c3> := <var:c3> * <var:i> ; | . This code takes $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \cdot <var:T> ^ <nat:2> \} $ as the postcondition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \cdot <var:T> ^ <nat:3> \} $ . Jumping to the proceeding command in the set of commands , we see the variable update statement \verb | <var:R> := <var:c3> ; | . This forwards the condition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:c3> = <nat:1> \cdot <var:T> ^ <nat:3> \} $ toward the condition $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:R> = <nat:1> \cdot <var:T> ^ <nat:3> \} $ . Advancing to the next step , the binding statement \verb | <var:R> := <var:R> + <var:c0> | . This statement transfers $ \{ <var:i> = <var:T> \land <var:c0> = <nat:2> \land <var:R> = <nat:1> \cdot <var:T> ^ <nat:3> \} $ toward the condition $ \{ <var:i> = <var:T> \land <var:R> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:2> \} $ . This is ensured by the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:2> ; <var:c3> := <nat:1> ; <var:c3> := <var:c3> * <var:i> ; <var:c3> := <var:c3> * <var:i> ; <var:c3> := <var:c3> * <var:i> ; <var:R> := <var:c3> ; <var:R> := <var:R> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:i> = <var:T> }} <def:poly> {{ <var:R> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:c0> = <nat:2> /\ <var:c3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:c0> = <nat:2> /\ <var:c3> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:c0> = <nat:2> /\ <var:c3> = <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:c0> = <nat:2> /\ <var:c3> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:c0> = <nat:2> /\ <var:R> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:R> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 