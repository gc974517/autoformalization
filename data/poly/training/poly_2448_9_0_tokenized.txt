\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:5> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:J> ; <var:z2> := <nat:4> ; <var:z2> := <var:z2> * <var:J> ; <var:z2> := <var:z2> * <var:J> ; <var:b> := <var:z2> ; <var:b> := <var:b> + <var:z1> ; <var:b> := <var:b> + <var:z0> \end{verbatim} Assuming it to hold that $ <var:J> = <var:y> $ ahead of executing the set of commands , it must be that we see $ <var:b> = <nat:4> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:5> $ . \end{theorem} \begin{proof} We can see that the following decorated program . \begin{eqnarray} \{ <var:J> = <var:y> \} \\ <var:z0> := <nat:5> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \} \\ <var:z1> := <nat:8> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:z1> = <nat:8> \} \\ <var:z1> := <var:z1> * <var:J> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:z1> = <nat:8> \times <var:y> \} \\ <var:z2> := <nat:4> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:z1> = <nat:8> \times <var:y> \land <var:z2> = <nat:4> \} \\ <var:z2> := <var:z2> * <var:J> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:z1> = <nat:8> \times <var:y> \land <var:z2> = <nat:4> \times <var:y> \} \\ <var:z2> := <var:z2> * <var:J> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:z1> = <nat:8> \times <var:y> \land <var:z2> = <nat:4> \times <var:y> ^ <nat:2> \} \end{eqnarray} Allowing the evaluation of the program gives : \begin{eqnarray} <var:b> := <var:z2> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:z1> = <nat:8> \times <var:y> \land <var:b> = <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:z1> ; \\ \{ <var:J> = <var:y> \land <var:z0> = <nat:5> \land <var:b> = <nat:4> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> \} \\ <var:b> := <var:b> + <var:z0> \\ \{ <var:J> = <var:y> \land <var:b> = <nat:4> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:5> \} \end{eqnarray} Utilizing Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:J> = <var:y> }} <var:z0> := <nat:5> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:J> ; <var:z2> := <nat:4> ; <var:z2> := <var:z2> * <var:J> ; <var:z2> := <var:z2> * <var:J> ; <var:b> := <var:z2> ; <var:b> := <var:b> + <var:z1> ; <var:b> := <var:b> + <var:z0> {{ <var:b> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:8> * <var:y> /\ <var:z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:8> * <var:y> /\ <var:z2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:8> * <var:y> /\ <var:z2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:8> * <var:y> /\ <var:b> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:z0> = <nat:5> /\ <var:b> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:b> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 