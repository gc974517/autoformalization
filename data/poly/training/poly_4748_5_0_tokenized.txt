\begin{document} \begin{theorem} Define a code in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:6> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:F> ; <var:h> := <var:B1> ; <var:h> := <var:h> + <var:B0> \end{verbatim} Assuming that we have $ <var:F> = <var:X> $ ahead of evaluating the series of commands it follows that $ <var:h> = <nat:6> \cdot <var:X> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for this code can be done with usual Hoare techniques . Observing the subsequent command found in our list of commands , we have the assignment line \verb | <var:B0> := <nat:6> ; | . This line transfers the precondition $ \{ <var:F> = <var:X> \} $ toward $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \} $ . This is sound with the assignment scheme given by Hoare logic . Next , we have the variable binding code letting $ <nat:6> $ to $ <var:B1>$ . This advances $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \} $ as the condition $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \land <var:B1> = <nat:6> \} $ . Paying attention to the upcoming line of code found in our program , we see the binding code assigning $ <var:B1> * <var:F> $ as $ <var:B1>$ . This moves $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \land <var:B1> = <nat:6> \} $ to the condition $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \land <var:B1> = <nat:6> * <var:X> \} $ . After , we see the variable assignmet code \verb | <var:h> := <var:B1> ; | . This code redefines $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \land <var:B1> = <nat:6> * <var:X> \} $ into $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \land <var:h> = <nat:6> * <var:X> \} $ . This is ensured using the assignment inference rule defined in Hoare logic . Advancing , we have the variable update line \verb | <var:h> := <var:h> + <var:B0> | . This transfers $ \{ <var:F> = <var:X> \land <var:B0> = <nat:6> \land <var:h> = <nat:6> * <var:X> \} $ to $ \{ <var:F> = <var:X> \land <var:h> = <nat:6> * <var:X> + <nat:6> \} $ . This is shown with the assignment law of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:F> = <var:X> }} <var:B0> := <nat:6> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:F> ; <var:h> := <var:B1> ; <var:h> := <var:h> + <var:B0> {{ <var:h> = <nat:6> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:B0> = <nat:6> /\ <var:h> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:h> = <nat:6> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 