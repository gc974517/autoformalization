\begin{document} \begin{theorem} Define a set of commands : \begin{verbatim} <var:V1> := <var:j> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:1> ; <var:h> := <var:V1> <var:h> := <var:h> + <var:V0> \end{verbatim} Assuming that $ <var:j> = <var:Y> $ before running the segment of code , it follows that $ <var:h> = <nat:1> * <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:Y> \} \\ <var:V1> := <var:j> ; \\ \{ <var:j> = <var:Y> \land <var:V1> = <var:Y> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:j> = <var:Y> \land <var:V1> = <var:Y> \land <var:V0> = <nat:4> \} \\ <var:V1> := <var:V1> * <nat:1> ; \\ \{ <var:j> = <var:Y> \land <var:V1> = <nat:1> \times <var:Y> \land <var:V0> = <nat:4> \} \\ <var:h> := <var:V1> \\ \{ <var:j> = <var:Y> \land <var:V0> = <nat:4> \land <var:h> = <nat:1> \times <var:Y> \} \\ <var:h> := <var:h> + <var:V0> \\ \{ <var:j> = <var:Y> \land <var:h> = <nat:1> \times <var:Y> + <nat:4> \} \end{eqnarray} The application of Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:j> = <var:Y> }} <var:V1> := <var:j> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:1> ; <var:h> := <var:V1> <var:h> := <var:h> + <var:V0> {{ <var:h> = <nat:1> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:V1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:V1> = <var:Y> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:V1> = <nat:1> * <var:Y> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:V0> = <nat:4> /\ <var:h> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:h> = <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 