\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:E0> := <nat:2> ; <var:e> := <var:E0> \end{verbatim} Assuming $ <var:K> = <var:k> $ prior to interpreting our list of commands then $ <var:e> = <nat:2> $ when set of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of our code segment is clear through usual Hoare reasoning . Observing the following lines seen in our program , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:k> \} & <var:E0> := <nat:2> & \{ <var:K> = <var:k> \land <var:E0> = <nat:2> \} \\ \{ <var:K> = <var:k> \land <var:E0> = <nat:2> \} & <var:e> := <var:E0& \{ <var:K> = <var:k> \land <var:e> = <nat:2> \} \end{tabular} This is rigorously given by the variable binding law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:K> = <var:k> }} <var:E0> := <nat:2> ; <var:e> := <var:E0> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:k> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:k> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 