\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:2> ; <var:Y> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Given that $ <var:w> = <var:t> $ before running the set of instructions then we have $ <var:Y> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is accomplished using standard Hoare techniques . Immediately following , the code assigning $ <nat:2> $ into $ <var:Z0>$ . This line redefines the precondition $ \{ <var:w> = <var:t> \} $ to the condition $ \{ <var:w> = <var:t> \land <var:Z0> = <nat:2> \} $ . This is sound through the assignment inference rule obtained from standard Hoare techniques . Taking another step toward the upcoming line found in the list of instructions , we have the environment update statement \verb | <var:Y> := <var:Z0> | . This command redefines the condition $ \{ <var:w> = <var:t> \land <var:Z0> = <nat:2> \} $ into $ \{ <var:w> = <var:t> \land <var:Y> = <nat:2> \} $ . This is sound with the assignment law in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:Y> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:w> = <var:t> }} <def:poly> {{ <var:Y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:Y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 