\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:1> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:y> ; <var:U> := <var:I1> ; <var:U> := <var:U> + <var:I0> \end{verbatim} Allowing --- given natural numbers $ <var:X> $ --- it to be that $ <var:y> = <var:X> $ before running this code segment it holds that we have $ <var:U> = <nat:2> * <var:X> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be accomplished with Hoare reasoning . Jumping to the following lines found in the series of commands , we see \begin{eqnarray} \{ <var:y> = <var:X> \} \, <var:I0> := <nat:1> \, \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \} \\ \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \} \, <var:I1> := <nat:2> \, \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \land <var:I1> = <nat:2> \} \end{eqnarray} This is deduced by the binding inference rule from typical Hoare logic . Jumping to the subsequent commands seen in our segment of code , we have \begin{eqnarray} \{ <var:y> = <var:X> \} \, <var:I0> := <nat:1> \, \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \} \\ \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \} \, <var:I1> := <nat:2> \, \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \land <var:I1> = <nat:2> \} \\ \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \land <var:I1> = <nat:2> \} \, <var:I1> := <var:I1> * <var:y> \, \{ <var:y> = <var:X> \land <var:I0> = <nat:1> \land <var:I1> = <nat:2> \cdot <var:X> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:y> = <var:X> }} <var:I0> := <nat:1> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:y> ; <var:U> := <var:I1> ; <var:U> := <var:U> + <var:I0> {{ <var:U> = <nat:2> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:I0> = <nat:1> /\ <var:U> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:U> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 