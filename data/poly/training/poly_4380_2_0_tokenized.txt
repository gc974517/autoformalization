\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:5> ; <var:L> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume , given $ <var:X> \in \mathbb{N} $ , it to be that $ <var:v> = <var:X> $ ahead of evaluating this list of instructions , it follows that we see $ <var:L> = <nat:5> $ when series of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be shown through standard Hoare logic . Advancing to the proceeding piece of code found in the set of commands , the variable binding code assigning $ <nat:5> $ toward $ <var:r0>$ . This advances the precondition $ \{ <var:v> = <var:X> \} $ as the condition $ \{ <var:v> = <var:X> \land <var:r0> = <nat:5> \} $ . This is rigorously given by the assignment rule defined by usual Hoare techniques . Further , we see the variable update code \verb | <var:L> := <var:r0> | . This transfers $ \{ <var:v> = <var:X> \land <var:r0> = <nat:5> \} $ into the postcondition $ \{ <var:v> = <var:X> \land <var:L> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:5> ; <var:L> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:v> = <var:X> }} <def:poly> {{ <var:L> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:L> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 