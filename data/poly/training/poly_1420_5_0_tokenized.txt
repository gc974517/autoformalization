\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:8> ; <var:J1> := <var:J1> * <var:m> ; <var:Y> := <var:J1> ; <var:Y> := <var:Y> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:m> = <var:N> $ prior to interpreting this set of commands , it must be that we see $ <var:Y> = <nat:8> * <var:N> + <nat:6> $ after program has terminated . \end{theorem} \begin{proof} The method of proof for this segment of code can be accomplished with standard Hoare techniques . Now , we have the variable binding statement \verb | <var:J0> := <nat:6> ; | . This statement moves the precondition $ \{ <var:m> = <var:N> \} $ into the postcondition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \} $ . Keeping momentum , we see the variable binding command \verb | <var:J1> := <nat:8> ; | . This forwards the condition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \} $ into the postcondition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \land <var:J1> = <nat:8> \} $ . After , the code \verb | <var:J1> := <var:J1> * <var:m> ; | . This takes the condition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \land <var:J1> = <nat:8> \} $ as the condition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \land <var:J1> = <nat:8> * <var:N> \} $ . Focusing on the next statement seen in our program , we have the variable binding statement \verb | <var:Y> := <var:J1> ; | . This line forwards the condition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \land <var:J1> = <nat:8> * <var:N> \} $ toward the postcondition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \land <var:Y> = <nat:8> * <var:N> \} $ . This is guaranteed with the assignment scheme given in usual Hoare reasoning . Observing the subsequent statement contained in our list of instructions , the binding line letting $ <var:Y> + <var:J0$ to $ <var:Y>$ . This command forwards the condition $ \{ <var:m> = <var:N> \land <var:J0> = <nat:6> \land <var:Y> = <nat:8> * <var:N> \} $ toward the postcondition $ \{ <var:m> = <var:N> \land <var:Y> = <nat:8> * <var:N> + <nat:6> \} $ . This is known to be sound through the assignment inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:J1> := <nat:8> ; <var:J1> := <var:J1> * <var:m> ; <var:Y> := <var:J1> ; <var:Y> := <var:Y> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:m> = <var:N> }} <def:poly> {{ <var:Y> = <nat:8> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:J0> = <nat:6> /\ <var:Y> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:Y> = <nat:8> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 