\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:2> ; <var:Q> := <var:l0> \end{verbatim} Given it to hold that $ <var:q> = <var:C> $ ahead of evaluating this set of commands , it follows that $ <var:Q> = <nat:2> $ once set of commands has finished executing . \end{theorem} \begin{proof} The proof of this set of instructions can be shown by standard Hoare reasoning . Focusing on the following lines of codein the program , we have \verb | { <var:q> = <var:C> } <var:l0> := <nat:2> { <var:q> = <var:C> \land <var:l0> = <nat:2> } | and \verb | { <var:q> = <var:C> \land <var:l0> = <nat:2> } <var:Q> := <var:l0{ <var:q> = <var:C> \land <var:Q> = <nat:2> } | . This is given using the scheme found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:q> = <var:C> }} <var:l0> := <nat:2> ; <var:Q> := <var:l0> {{ <var:Q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 