\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:Q> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:Q> ; <var:c2> := <var:c2> * <var:Q> ; <var:q> := <var:c2> ; <var:q> := <var:q> + <var:c1> ; <var:q> := <var:q> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:Q> = <var:m> $ prior to the execution of the series of commands , then $ <var:q> = <nat:3> \times <var:m> ^ <nat:2> + <nat:8> \times <var:m> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the code segment can be shown with standard Hoare logic . Moving onward , \begin{verbatim} { <var:Q> = <var:m> } <var:c0> := <nat:4> { <var:Q> = <var:m> \land <var:c0> = <nat:4> } { <var:Q> = <var:m> \land <var:c0> = <nat:4> } <var:c1> := <nat:8> { <var:Q> = <var:m> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> } { <var:Q> = <var:m> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> } <var:c1> := <var:c1> * <var:Q> { <var:Q> = <var:m> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:m> } { <var:Q> = <var:m> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:m> } <var:c2> := <nat:3> { <var:Q> = <var:m> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:m> \land <var:c2> = <nat:3> } \end{verbatim} This is known to be sound by the environment update scheme given by usual Hoare reasoning . Looking at the upcoming statement in our set of commands , we see \begin{verbatim} { <var:Q> = <var:m> } <var:c0> := <nat:4> { <var:Q> = <var:m> \land <var:c0> = <nat:4> } \end{verbatim} Advancing to the next step , \begin{verbatim} { <var:Q> = <var:m> } <var:c0> := <nat:4> { <var:Q> = <var:m> \land <var:c0> = <nat:4> } \end{verbatim} This is shown through the environment update law given in typical Hoare techniques . Further , we have \begin{verbatim} { <var:Q> = <var:m> } <var:c0> := <nat:4> { <var:Q> = <var:m> \land <var:c0> = <nat:4> } \end{verbatim} Moving forward to the next step , we see \begin{verbatim} { <var:Q> = <var:m> } <var:c0> := <nat:4> { <var:Q> = <var:m> \land <var:c0> = <nat:4> } { <var:Q> = <var:m> \land <var:c0> = <nat:4> } <var:c1> := <nat:8> { <var:Q> = <var:m> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:Q> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:Q> ; <var:c2> := <var:c2> * <var:Q> ; <var:q> := <var:c2> ; <var:q> := <var:q> + <var:c1> ; <var:q> := <var:q> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Q> = <var:m> }} <def:poly> {{ <var:q> = <nat:3> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:m> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:m> /\ <var:c2> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:m> /\ <var:c2> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:m> /\ <var:q> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:c0> = <nat:4> /\ <var:q> = <nat:3> * <var:m> ^ <nat:2> + <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:q> = <nat:3> * <var:m> ^ <nat:2> + <nat:8> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 