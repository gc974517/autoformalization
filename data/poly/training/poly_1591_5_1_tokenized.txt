\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:Z> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:9> ; <var:y> := <var:A1> <var:y> := <var:y> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:Z> = <var:Y> $ prior to running this series of instructions it holds that we have $ <var:y> = <nat:9> \cdot <var:Y> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:Z> = <var:Y> \} \\ <var:A1> := <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:A1> = <var:Y> \} \\ <var:A0> := <nat:1> ; \\ \{ <var:Z> = <var:Y> \land <var:A1> = <var:Y> \land <var:A0> = <nat:1> \} \\ <var:A1> := <var:A1> * <nat:9> ; \\ \{ <var:Z> = <var:Y> \land <var:A1> = <nat:9> \cdot <var:Y> \land <var:A0> = <nat:1> \} \\ <var:y> := <var:A1> \\ \{ <var:Z> = <var:Y> \land <var:A0> = <nat:1> \land <var:y> = <nat:9> \cdot <var:Y> \} \\ <var:y> := <var:y> + <var:A0> \\ \{ <var:Z> = <var:Y> \land <var:y> = <nat:9> \cdot <var:Y> + <nat:1> \} \end{eqnarray} Considering the above , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:Z> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:9> ; <var:y> := <var:A1> <var:y> := <var:y> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Z> = <var:Y> }} <def:poly> {{ <var:y> = <nat:9> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:A1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:A1> = <var:Y> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:A1> = <nat:9> * <var:Y> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:A0> = <nat:1> /\ <var:y> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:y> = <nat:9> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 