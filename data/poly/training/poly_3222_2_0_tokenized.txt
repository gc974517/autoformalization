\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:L0> := <nat:8> ; <var:W> := <var:L0> \end{verbatim} Allowing , letting integers $ <var:x> $ , $ <var:h> = <var:x> $ ahead of interpreting this series of instructions , it follows that we see $ <var:W> = <nat:8> $ when code segment is done executing . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives : \begin{eqnarray} \{ <var:h> = <var:x> \} \\ <var:L0> := <nat:8> ; \\ \{ <var:h> = <var:x> \land <var:L0> = <nat:8> \} \\ <var:W> := <var:L0> \\ \{ <var:h> = <var:x> \land <var:W> = <nat:8> \} \end{eqnarray} Considering the above , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <var:L0> := <nat:8> ; <var:W> := <var:L0> {{ <var:W> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:W> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 