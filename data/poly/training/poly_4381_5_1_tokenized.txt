\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:g1> := <var:E> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:8> ; <var:J> := <var:g1> <var:J> := <var:J> + <var:g0> \end{verbatim} Assuming that $ <var:E> = <var:H> $ ahead of interpreting our program then $ <var:J> = <nat:8> * <var:H> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques results in : \begin{eqnarray} \{ <var:E> = <var:H> \} \\ <var:g1> := <var:E> ; \\ \{ <var:E> = <var:H> \land <var:g1> = <var:H> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:E> = <var:H> \land <var:g1> = <var:H> \land <var:g0> = <nat:4> \} \\ <var:g1> := <var:g1> * <nat:8> ; \\ \{ <var:E> = <var:H> \land <var:g1> = <nat:8> \cdot <var:H> \land <var:g0> = <nat:4> \} \\ <var:J> := <var:g1> \\ \{ <var:E> = <var:H> \land <var:g0> = <nat:4> \land <var:J> = <nat:8> \cdot <var:H> \} \\ <var:J> := <var:J> + <var:g0> \\ \{ <var:E> = <var:H> \land <var:J> = <nat:8> \cdot <var:H> + <nat:4> \} \end{eqnarray} Hence , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:E> = <var:H> }} <var:g1> := <var:E> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:8> ; <var:J> := <var:g1> <var:J> := <var:J> + <var:g0> {{ <var:J> = <nat:8> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:g1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:g1> = <var:H> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:g1> = <nat:8> * <var:H> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:g0> = <nat:4> /\ <var:J> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:J> = <nat:8> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 