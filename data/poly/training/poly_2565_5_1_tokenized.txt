\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:L> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:k> := <var:a1> <var:k> := <var:k> + <var:a0> \end{verbatim} Assuming it to be that $ <var:L> = <var:W> $ --- for some whole numbers $ <var:W> $ --- before executing the set of commands it follows that we see $ <var:k> = <nat:2> \cdot <var:W> + <nat:3> $ after set of instructions exits . \end{theorem} \begin{proof} See that the below decorated segment of code . \begin{eqnarray} \{ <var:L> = <var:W> \} \\ <var:a1> := <var:L> ; \\ \{ <var:L> = <var:W> \land <var:a1> = <var:W> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:L> = <var:W> \land <var:a1> = <var:W> \land <var:a0> = <nat:3> \} \\ <var:a1> := <var:a1> * <nat:2> ; \\ \{ <var:L> = <var:W> \land <var:a1> = <nat:2> \cdot <var:W> \land <var:a0> = <nat:3> \} \\ <var:k> := <var:a1> \\ \{ <var:L> = <var:W> \land <var:a0> = <nat:3> \land <var:k> = <nat:2> \cdot <var:W> \} \\ <var:k> := <var:k> + <var:a0> \\ \{ <var:L> = <var:W> \land <var:k> = <nat:2> \cdot <var:W> + <nat:3> \} \end{eqnarray} The application of usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:L> = <var:W> }} <var:a1> := <var:L> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:k> := <var:a1> <var:k> := <var:k> + <var:a0> {{ <var:k> = <nat:2> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:a1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:a1> = <var:W> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:a1> = <nat:2> * <var:W> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:a0> = <nat:3> /\ <var:k> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:k> = <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 