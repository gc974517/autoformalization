\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:S> ; <var:L0> := <nat:5> ; <var:L1> := <var:L1> * <nat:1> ; <var:R> := <var:L1> <var:R> := <var:R> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:S> = <var:o> $ before the execution of the list of instructions , it must be that $ <var:R> = <nat:1> \times <var:o> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions can be given using the below decorated set of commands . \begin{eqnarray} \{ <var:S> = <var:o> \} \\ <var:L1> := <var:S> ; \\ \{ <var:S> = <var:o> \land <var:L1> = <var:o> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:S> = <var:o> \land <var:L1> = <var:o> \land <var:L0> = <nat:5> \} \\ <var:L1> := <var:L1> * <nat:1> ; \\ \{ <var:S> = <var:o> \land <var:L1> = <nat:1> \cdot <var:o> \land <var:L0> = <nat:5> \} \\ <var:R> := <var:L1> \\ \{ <var:S> = <var:o> \land <var:L0> = <nat:5> \land <var:R> = <nat:1> \cdot <var:o> \} \\ <var:R> := <var:R> + <var:L0> \\ \{ <var:S> = <var:o> \land <var:R> = <nat:1> \cdot <var:o> + <nat:5> \} \end{eqnarray} The application of standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:S> ; <var:L0> := <nat:5> ; <var:L1> := <var:L1> * <nat:1> ; <var:R> := <var:L1> <var:R> := <var:R> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:S> = <var:o> }} <def:poly> {{ <var:R> = <nat:1> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:L1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:L1> = <var:o> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:L1> = <nat:1> * <var:o> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:L0> = <nat:5> /\ <var:R> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:R> = <nat:1> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 