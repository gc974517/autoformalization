\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:J> ; <var:x> := <var:g1> ; <var:x> := <var:x> + <var:g0> \end{verbatim} Assume it to hold that $ <var:J> = <var:R> $ , for some natural coefficients $ <var:R> $ , ahead of interpreting our segment of code it holds that $ <var:x> = <nat:7> \cdot <var:R> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:R> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:J> = <var:R> \land <var:g0> = <nat:6> \} \\ <var:g1> := <nat:7> ; \\ \{ <var:J> = <var:R> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \} \\ <var:g1> := <var:g1> * <var:J> ; \\ \{ <var:J> = <var:R> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \times <var:R> \} \\ <var:x> := <var:g1> ; \\ \{ <var:J> = <var:R> \land <var:g0> = <nat:6> \land <var:x> = <nat:7> \times <var:R> \} \\ <var:x> := <var:x> + <var:g0> \\ \{ <var:J> = <var:R> \land <var:x> = <nat:7> \times <var:R> + <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:J> = <var:R> }} <var:g0> := <nat:6> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:J> ; <var:x> := <var:g1> ; <var:x> := <var:x> + <var:g0> {{ <var:x> = <nat:7> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:g0> = <nat:6> /\ <var:x> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:x> = <nat:7> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 