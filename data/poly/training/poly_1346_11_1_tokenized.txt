\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:X1> := <var:e> ; <var:X2> := <var:X1> * <var:e> ; <var:X3> := <var:X2> * <var:e> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:1> ; <var:X2> := <var:X2> * <nat:2> ; <var:X3> := <var:X3> * <nat:5> ; <var:N> := <var:X3> <var:N> := <var:N> + <var:X2> <var:N> := <var:N> + <var:X1> <var:N> := <var:N> + <var:X0> \end{verbatim} Allowing it to be that $ <var:e> = <var:x> $ before the execution of the program it follows that we have $ <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> $ after series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:x> \} \\ <var:X1> := <var:e> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <var:x> \} \\ <var:X2> := <var:X1> * <var:e> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <var:x> \land <var:X2> = <var:x> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:e> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <var:x> \land <var:X2> = <var:x> ^ <nat:2> \land <var:X3> = <var:x> ^ <nat:3> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <var:x> \land <var:X2> = <var:x> ^ <nat:2> \land <var:X3> = <var:x> ^ <nat:3> \land <var:X0> = <nat:2> \} \\ <var:X1> := <var:X1> * <nat:1> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <nat:1> * <var:x> \land <var:X2> = <var:x> ^ <nat:2> \land <var:X3> = <var:x> ^ <nat:3> \land <var:X0> = <nat:2> \} \\ <var:X2> := <var:X2> * <nat:2> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <nat:1> * <var:x> \land <var:X2> = <nat:2> * <var:x> ^ <nat:2> \land <var:X3> = <var:x> ^ <nat:3> \land <var:X0> = <nat:2> \} \\ <var:X3> := <var:X3> * <nat:5> ; \\ \{ <var:e> = <var:x> \land <var:X1> = <nat:1> * <var:x> \land <var:X2> = <nat:2> * <var:x> ^ <nat:2> \land <var:X3> = <nat:5> * <var:x> ^ <nat:3> \land <var:X0> = <nat:2> \} \\ <var:N> := <var:X3> \\ \{ <var:e> = <var:x> \land <var:X1> = <nat:1> * <var:x> \land <var:X2> = <nat:2> * <var:x> ^ <nat:2> \land <var:X0> = <nat:2> \land <var:N> = <nat:5> * <var:x> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:X2> \\ \{ <var:e> = <var:x> \land <var:X1> = <nat:1> * <var:x> \land <var:X0> = <nat:2> \land <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:X1> \\ \{ <var:e> = <var:x> \land <var:X0> = <nat:2> \land <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> \} \\ <var:N> := <var:N> + <var:X0> \\ \{ <var:e> = <var:x> \land <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:e> = <var:x> }} <var:X1> := <var:e> ; <var:X2> := <var:X1> * <var:e> ; <var:X3> := <var:X2> * <var:e> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:1> ; <var:X2> := <var:X2> * <nat:2> ; <var:X3> := <var:X3> * <nat:5> ; <var:N> := <var:X3> <var:N> := <var:N> + <var:X2> <var:N> := <var:N> + <var:X1> <var:N> := <var:N> + <var:X0> {{ <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <var:x> /\ <var:X2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <var:x> /\ <var:X2> = <var:x> ^ <nat:2> /\ <var:X3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <var:x> /\ <var:X2> = <var:x> ^ <nat:2> /\ <var:X3> = <var:x> ^ <nat:3> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X2> = <var:x> ^ <nat:2> /\ <var:X3> = <var:x> ^ <nat:3> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:X3> = <var:x> ^ <nat:3> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:X3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:X0> = <nat:2> /\ <var:N> = <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X0> = <nat:2> /\ <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:X0> = <nat:2> /\ <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:N> = <nat:5> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 