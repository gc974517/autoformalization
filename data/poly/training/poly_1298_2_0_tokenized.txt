\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:6> ; <var:W> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allow that we have $ <var:i> = <var:o> $ before executing this series of commands it holds that $ <var:W> = <nat:6> $ when code segment is done . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is evident using usual Hoare techniques . Looking at the upcoming statement seen in the series of commands , we have \verb | { <var:i> = <var:o> } <var:a0> := <nat:6> { <var:i> = <var:o> \land <var:a0> = <nat:6> } | . Moving forward to the proceeding bit of code in our series of instructions , we see \verb | { <var:i> = <var:o> } <var:a0> := <nat:6> { <var:i> = <var:o> \land <var:a0> = <nat:6> } | . This is rigorously given through the variable binding scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:W> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:i> = <var:o> }} <def:poly> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 