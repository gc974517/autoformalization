\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:S0> := <nat:3> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:Y> ; <var:c> := <var:S1> ; <var:c> := <var:c> + <var:S0> \end{verbatim} Assume $ <var:Y> = <var:Z> $ prior to interpreting the program , it must be that we have $ <var:c> = <nat:9> * <var:Z> + <nat:3> $ when program terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:Z> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:Y> = <var:Z> \land <var:S0> = <nat:3> \} \\ <var:S1> := <nat:9> ; \\ \{ <var:Y> = <var:Z> \land <var:S0> = <nat:3> \land <var:S1> = <nat:9> \} \\ <var:S1> := <var:S1> * <var:Y> ; \\ \{ <var:Y> = <var:Z> \land <var:S0> = <nat:3> \land <var:S1> = <nat:9> \cdot <var:Z> \} \\ <var:c> := <var:S1> ; \\ \{ <var:Y> = <var:Z> \land <var:S0> = <nat:3> \land <var:c> = <nat:9> \cdot <var:Z> \} \\ <var:c> := <var:c> + <var:S0> \\ \{ <var:Y> = <var:Z> \land <var:c> = <nat:9> \cdot <var:Z> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <var:S0> := <nat:3> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:Y> ; <var:c> := <var:S1> ; <var:c> := <var:c> + <var:S0> {{ <var:c> = <nat:9> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:S0> = <nat:3> /\ <var:c> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:c> = <nat:9> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 