\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P1> := <var:C> ; <var:P2> := <var:P1> * <var:C> ; <var:P3> := <var:P2> * <var:C> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:1> ; <var:P3> := <var:P3> * <nat:3> ; <var:n> := <var:P3> <var:n> := <var:n> + <var:P2> <var:n> := <var:n> + <var:P1> <var:n> := <var:n> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Allowing that $ <var:C> = <var:i> $ before the evaluation of this series of commands then we see $ <var:n> = <nat:3> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:C> = <var:i> \} \\ <var:P1> := <var:C> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <var:i> \} \\ <var:P2> := <var:P1> * <var:C> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <var:i> \land <var:P2> = <var:i> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:C> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <var:i> \land <var:P2> = <var:i> ^ <nat:2> \land <var:P3> = <var:i> ^ <nat:3> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <var:i> \land <var:P2> = <var:i> ^ <nat:2> \land <var:P3> = <var:i> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P1> := <var:P1> * <nat:4> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <nat:4> \cdot <var:i> \land <var:P2> = <var:i> ^ <nat:2> \land <var:P3> = <var:i> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P2> := <var:P2> * <nat:1> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <nat:4> \cdot <var:i> \land <var:P2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:P3> = <var:i> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P3> := <var:P3> * <nat:3> ; \\ \{ <var:C> = <var:i> \land <var:P1> = <nat:4> \cdot <var:i> \land <var:P2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:P3> = <nat:3> \cdot <var:i> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:n> := <var:P3> \\ \{ <var:C> = <var:i> \land <var:P1> = <nat:4> \cdot <var:i> \land <var:P2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:n> = <nat:3> \cdot <var:i> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:P2> \\ \{ <var:C> = <var:i> \land <var:P1> = <nat:4> \cdot <var:i> \land <var:P0> = <nat:3> \land <var:n> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:P1> \\ \{ <var:C> = <var:i> \land <var:P0> = <nat:3> \land <var:n> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> \} \\ <var:n> := <var:n> + <var:P0> \\ \{ <var:C> = <var:i> \land <var:n> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:3> \} \end{eqnarray} Therefore , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:C> ; <var:P2> := <var:P1> * <var:C> ; <var:P3> := <var:P2> * <var:C> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:1> ; <var:P3> := <var:P3> * <nat:3> ; <var:n> := <var:P3> <var:n> := <var:n> + <var:P2> <var:n> := <var:n> + <var:P1> <var:n> := <var:n> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:C> = <var:i> }} <def:poly> {{ <var:n> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <var:i> /\ <var:P2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <var:i> /\ <var:P2> = <var:i> ^ <nat:2> /\ <var:P3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <var:i> /\ <var:P2> = <var:i> ^ <nat:2> /\ <var:P3> = <var:i> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <nat:4> * <var:i> /\ <var:P2> = <var:i> ^ <nat:2> /\ <var:P3> = <var:i> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <nat:4> * <var:i> /\ <var:P2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:P3> = <var:i> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <nat:4> * <var:i> /\ <var:P2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:P3> = <nat:3> * <var:i> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <nat:4> * <var:i> /\ <var:P2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:P0> = <nat:3> /\ <var:n> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P1> = <nat:4> * <var:i> /\ <var:P0> = <nat:3> /\ <var:n> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:P0> = <nat:3> /\ <var:n> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:n> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 