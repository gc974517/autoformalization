\begin{document} \begin{theorem} Consider the following series of commands as \begin{verbatim} <var:t1> := <var:a> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:8> ; <var:C> := <var:t1> <var:C> := <var:C> + <var:t0> \end{verbatim} Given that $ <var:a> = <var:R> $ , given natural numbers $ <var:R> $ , prior to executing the set of commands then we see $ <var:C> = <nat:8> * <var:R> + <nat:8> $ . \end{theorem} \begin{proof} The proof of our set of commands is accomplished by standard Hoare logic . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:R> \} & <var:t1> := <var:a> & \{ <var:a> = <var:R> \land <var:t1> = <var:R> \} \\ \{ <var:a> = <var:R> \land <var:t1> = <var:R> \} & <var:t0> := <nat:8> & \{ <var:a> = <var:R> \land <var:t1> = <var:R> \land <var:t0> = <nat:8> \} \end{tabular} Advancing , \[ \begin{tabular} {rcl} \{ <var:a> = <var:R> \} & <var:t1> := <var:a> & \{ <var:a> = <var:R> \land <var:t1> = <var:R> \} \\ \{ <var:a> = <var:R> \land <var:t1> = <var:R> \} & <var:t0> := <nat:8> & \{ <var:a> = <var:R> \land <var:t1> = <var:R> \land <var:t0> = <nat:8> \} \\ \{ <var:a> = <var:R> \land <var:t1> = <var:R> \land <var:t0> = <nat:8> \} & <var:t1> := <var:t1> * <nat:8> & \{ <var:a> = <var:R> \land <var:t1> = <nat:8> * <var:R> \land <var:t0> = <nat:8> \} \end{tabular} This is deduced through the scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:a> = <var:R> }} <var:t1> := <var:a> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:8> ; <var:C> := <var:t1> <var:C> := <var:C> + <var:t0> {{ <var:C> = <nat:8> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:t1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:t1> = <var:R> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:t1> = <nat:8> * <var:R> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:t0> = <nat:8> /\ <var:C> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:C> = <nat:8> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 