\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:k1> := <var:F> ; <var:k2> := <var:k1> * <var:F> ; <var:k3> := <var:k2> * <var:F> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:2> ; <var:r> := <var:k3> <var:r> := <var:r> + <var:k2> <var:r> := <var:r> + <var:k1> <var:r> := <var:r> + <var:k0> \end{verbatim} Given that $ <var:F> = <var:W> $ before the execution of the list of commands , it holds that $ <var:r> = <nat:2> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:7> \cdot <var:W> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our set of commands is shown by typical Hoare logic . Jumping to the next statements found in our set of commands , we see \begin{eqnarray} \{ <var:F> = <var:W> \} \, <var:k1> := <var:F> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \} \, <var:k2> := <var:k1> * <var:F> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \} \, <var:k3> := <var:k2> * <var:F> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \} \, <var:k0> := <nat:9> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \, <var:k1> := <var:k1> * <nat:7> \, \{ <var:F> = <var:W> \land <var:k1> = <nat:7> \cdot <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <nat:7> \cdot <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \, <var:k2> := <var:k2> * <nat:4> \, \{ <var:F> = <var:W> \land <var:k1> = <nat:7> \cdot <var:W> \land <var:k2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <nat:7> \cdot <var:W> \land <var:k2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \, <var:k3> := <var:k3> * <nat:2> \, \{ <var:F> = <var:W> \land <var:k1> = <nat:7> \cdot <var:W> \land <var:k2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:k3> = <nat:2> \cdot <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \end{eqnarray} This is known to be sound by the variable update scheme obtained from standard Hoare techniques . Further , \begin{eqnarray} \{ <var:F> = <var:W> \} \, <var:k1> := <var:F> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \} \, <var:k2> := <var:k1> * <var:F> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \} \, <var:k3> := <var:k2> * <var:F> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \} \\ \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \} \, <var:k0> := <nat:9> \, \{ <var:F> = <var:W> \land <var:k1> = <var:W> \land <var:k2> = <var:W> ^ <nat:2> \land <var:k3> = <var:W> ^ <nat:3> \land <var:k0> = <nat:9> \} \end{eqnarray} This is known to be sound with the variable assignmet scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:F> = <var:W> }} <var:k1> := <var:F> ; <var:k2> := <var:k1> * <var:F> ; <var:k3> := <var:k2> * <var:F> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:2> ; <var:r> := <var:k3> <var:r> := <var:r> + <var:k2> <var:r> := <var:r> + <var:k1> <var:r> := <var:r> + <var:k0> {{ <var:r> = <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <var:W> /\ <var:k2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <var:W> /\ <var:k2> = <var:W> ^ <nat:2> /\ <var:k3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <var:W> /\ <var:k2> = <var:W> ^ <nat:2> /\ <var:k3> = <var:W> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <nat:7> * <var:W> /\ <var:k2> = <var:W> ^ <nat:2> /\ <var:k3> = <var:W> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <nat:7> * <var:W> /\ <var:k2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:k3> = <var:W> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <nat:7> * <var:W> /\ <var:k2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:W> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <nat:7> * <var:W> /\ <var:k2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:k0> = <nat:9> /\ <var:r> = <nat:2> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k1> = <nat:7> * <var:W> /\ <var:k0> = <nat:9> /\ <var:r> = <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:k0> = <nat:9> /\ <var:r> = <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:r> = <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 