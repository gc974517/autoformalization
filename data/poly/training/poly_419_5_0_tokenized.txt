\begin{document} \begin{theorem} Consider the following list of commands as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:X> ; <var:t> := <var:H1> ; <var:t> := <var:t> + <var:H0> \end{verbatim} Allow that $ <var:X> = <var:T> $ --- given any positive coefficients $ <var:T> $ --- ahead of the execution of the set of instructions , it must be that $ <var:t> = <nat:4> \cdot <var:T> + <nat:1> $ . \end{theorem} \begin{proof} Notice the following decorated set of instructions . \begin{eqnarray} \{ <var:X> = <var:T> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:X> = <var:T> \land <var:H0> = <nat:1> \} \\ <var:H1> := <nat:4> ; \\ \{ <var:X> = <var:T> \land <var:H0> = <nat:1> \land <var:H1> = <nat:4> \} \\ <var:H1> := <var:H1> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:H0> = <nat:1> \land <var:H1> = <nat:4> \times <var:T> \} \\ <var:t> := <var:H1> ; \\ \{ <var:X> = <var:T> \land <var:H0> = <nat:1> \land <var:t> = <nat:4> \times <var:T> \} \\ <var:t> := <var:t> + <var:H0> \\ \{ <var:X> = <var:T> \land <var:t> = <nat:4> \times <var:T> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <var:H0> := <nat:1> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:X> ; <var:t> := <var:H1> ; <var:t> := <var:t> + <var:H0> {{ <var:t> = <nat:4> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:H0> = <nat:1> /\ <var:t> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:t> = <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 