\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:R> ; <var:o2> := <var:o1> * <var:R> ; <var:o3> := <var:o2> * <var:R> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:3> ; <var:o3> := <var:o3> * <nat:6> ; <var:y> := <var:o3> <var:y> := <var:y> + <var:o2> <var:y> := <var:y> + <var:o1> <var:y> := <var:y> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:R> = <var:x> $ ahead of evaluating our code segment it must be that we have $ <var:y> = <nat:6> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> + <nat:7> $ once list of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our program is demonstrated using standard Hoare logic . Jumping to the upcoming step seen in the series of instructions , we have the variable assignmet line assigning $ <var:R> $ into $ <var:o1>$ . This command advances $ \{ <var:R> = <var:x> \} $ to $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \} $ . Further , we see the assignment statement \verb | <var:o2> := <var:o1> * <var:R> ; | . This statement redefines $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \} $ into the condition $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \} $ . Advancing to the next step , we have the variable binding line \verb | <var:o3> := <var:o2> * <var:R> ; | . This takes $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \} $ into $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \} $ . Advancing on , the variable binding statement yielding $ <nat:7> $ toward $ <var:o0>$ . This code transfers the precondition $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \} $ as the postcondition $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . Moving forward to the following line of code seen in our series of instructions , we see the variable binding line \verb | <var:o1> := <var:o1> * <nat:8> ; | . This line moves the precondition $ \{ <var:R> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ as the postcondition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . This is given by the assignment law defined by standard Hoare reasoning . Jumping to the proceeding line contained in the segment of code , we have the variable binding code \verb | <var:o2> := <var:o2> * <nat:3> ; | . This transfers the condition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ to $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <nat:3> * <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . This is ensured using the assignment rule defined in Hoare reasoning . Focusing on the upcoming command seen in the set of instructions , we see the binding code \verb | <var:o3> := <var:o3> * <nat:6> ; | . This takes the precondition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <nat:3> * <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ toward $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <nat:3> * <var:x> ^ <nat:2> \land <var:o3> = <nat:6> * <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . Shifting focus toward the proceeding line in our series of instructions , the variable update line defining $ <var:o3$ into $ <var:y>$ . This advances the condition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <nat:3> * <var:x> ^ <nat:2> \land <var:o3> = <nat:6> * <var:x> ^ <nat:3> \land <var:o0> = <nat:7> \} $ toward the condition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <nat:3> * <var:x> ^ <nat:2> \land <var:o0> = <nat:7> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> \} $ . Considering the following line in our list of instructions , the assignment command giving $ <var:y> + <var:o2$ into $ <var:y>$ . This takes the precondition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o2> = <nat:3> * <var:x> ^ <nat:2> \land <var:o0> = <nat:7> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> \} $ to the condition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o0> = <nat:7> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> \} $ . This is given using the assignment law in standard Hoare logic . Moving forward to the subsequent line of code contained in our set of instructions , we have the variable binding code \verb | <var:y> := <var:y> + <var:o1> | . This moves the condition $ \{ <var:R> = <var:x> \land <var:o1> = <nat:8> * <var:x> \land <var:o0> = <nat:7> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:x> \land <var:o0> = <nat:7> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> \} $ . This is given through the assignment scheme found in Hoare reasoning . Looking at the subsequent statement contained in our code , we see the assignment code assigning $ <var:y> + <var:o0$ toward $ <var:y>$ . This redefines $ \{ <var:R> = <var:x> \land <var:o0> = <nat:7> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> \} $ toward the postcondition $ \{ <var:R> = <var:x> \land <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:R> ; <var:o2> := <var:o1> * <var:R> ; <var:o3> := <var:o2> * <var:R> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:3> ; <var:o3> := <var:o3> * <nat:6> ; <var:y> := <var:o3> <var:y> := <var:y> + <var:o2> <var:y> := <var:y> + <var:o1> <var:y> := <var:y> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:R> = <var:x> }} <def:poly> {{ <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <nat:8> * <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <nat:8> * <var:x> /\ <var:o2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <nat:8> * <var:x> /\ <var:o2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:o3> = <nat:6> * <var:x> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <nat:8> * <var:x> /\ <var:o2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:o0> = <nat:7> /\ <var:y> = <nat:6> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o1> = <nat:8> * <var:x> /\ <var:o0> = <nat:7> /\ <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:o0> = <nat:7> /\ <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:y> = <nat:6> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 