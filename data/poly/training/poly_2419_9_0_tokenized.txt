\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:3> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:X> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:X> ; <var:J2> := <var:J2> * <var:X> ; <var:S> := <var:J2> ; <var:S> := <var:S> + <var:J1> ; <var:S> := <var:S> + <var:J0> \end{verbatim} Given $ <var:X> = <var:s> $ prior to the execution of this code it holds that $ <var:S> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this program is accomplished using usual Hoare reasoning . Honing in on the upcoming statements in the program , we see \begin{eqnarray} \{ <var:X> = <var:s> \} \, <var:J0> := <nat:3> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \} \, <var:J1> := <nat:4> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \} \, <var:J1> := <var:J1> * <var:X> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \} \, <var:J2> := <nat:2> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:J2> = <nat:2> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:J2> = <nat:2> \} \, <var:J2> := <var:J2> * <var:X> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:J2> = <nat:2> \times <var:s> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:J2> = <nat:2> \times <var:s> \} \, <var:J2> := <var:J2> * <var:X> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:J2> = <nat:2> \times <var:s> ^ <nat:2> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:J2> = <nat:2> \times <var:s> ^ <nat:2> \} \, <var:S> := <var:J2> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:S> = <nat:2> \times <var:s> ^ <nat:2> \} \\ \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:J1> = <nat:4> \times <var:s> \land <var:S> = <nat:2> \times <var:s> ^ <nat:2> \} \, <var:S> := <var:S> + <var:J1> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \land <var:S> = <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> \} \end{eqnarray} Jumping to the next step in the list of instructions , \begin{eqnarray} \{ <var:X> = <var:s> \} \, <var:J0> := <nat:3> \, \{ <var:X> = <var:s> \land <var:J0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:X> = <var:s> }} <var:J0> := <nat:3> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:X> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:X> ; <var:J2> := <var:J2> * <var:X> ; <var:S> := <var:J2> ; <var:S> := <var:S> + <var:J1> ; <var:S> := <var:S> + <var:J0> {{ <var:S> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:4> * <var:s> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:4> * <var:s> /\ <var:J2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:4> * <var:s> /\ <var:J2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:4> * <var:s> /\ <var:S> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:J0> = <nat:3> /\ <var:S> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:S> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 