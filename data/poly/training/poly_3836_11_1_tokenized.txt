\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:f1> := <var:m> ; <var:f2> := <var:f1> * <var:m> ; <var:f3> := <var:f2> * <var:m> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:1> ; <var:W> := <var:f3> <var:W> := <var:W> + <var:f2> <var:W> := <var:W> + <var:f1> <var:W> := <var:W> + <var:f0> \end{verbatim} Given it to hold that $ <var:m> = <var:u> $ before running our program it must be that we see $ <var:W> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:8> \times <var:u> + <nat:2> $ when series of commands has terminated . \end{theorem} \begin{proof} The application of usual Hoare reasoning yields : \begin{eqnarray} \{ <var:m> = <var:u> \} \\ <var:f1> := <var:m> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <var:u> \} \\ <var:f2> := <var:f1> * <var:m> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:m> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:f1> := <var:f1> * <nat:8> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <nat:8> * <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:f2> := <var:f2> * <nat:2> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <nat:8> * <var:u> \land <var:f2> = <nat:2> * <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:f3> := <var:f3> * <nat:1> ; \\ \{ <var:m> = <var:u> \land <var:f1> = <nat:8> * <var:u> \land <var:f2> = <nat:2> * <var:u> ^ <nat:2> \land <var:f3> = <nat:1> * <var:u> ^ <nat:3> \land <var:f0> = <nat:2> \} \\ <var:W> := <var:f3> \\ \{ <var:m> = <var:u> \land <var:f1> = <nat:8> * <var:u> \land <var:f2> = <nat:2> * <var:u> ^ <nat:2> \land <var:f0> = <nat:2> \land <var:W> = <nat:1> * <var:u> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:f2> \\ \{ <var:m> = <var:u> \land <var:f1> = <nat:8> * <var:u> \land <var:f0> = <nat:2> \land <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> \} \end{eqnarray} Allowing evaluating the list of instructions yields : \begin{eqnarray} <var:W> := <var:W> + <var:f1> \\ \{ <var:m> = <var:u> \land <var:f0> = <nat:2> \land <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:8> * <var:u> \} \\ <var:W> := <var:W> + <var:f0> \\ \{ <var:m> = <var:u> \land <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:2> \} \end{eqnarray} Thus , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:m> = <var:u> }} <var:f1> := <var:m> ; <var:f2> := <var:f1> * <var:m> ; <var:f3> := <var:f2> * <var:m> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:1> ; <var:W> := <var:f3> <var:W> := <var:W> + <var:f2> <var:W> := <var:W> + <var:f1> <var:W> := <var:W> + <var:f0> {{ <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <nat:8> * <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <nat:8> * <var:u> /\ <var:f2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <nat:8> * <var:u> /\ <var:f2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <nat:8> * <var:u> /\ <var:f2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:f0> = <nat:2> /\ <var:W> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f1> = <nat:8> * <var:u> /\ <var:f0> = <nat:2> /\ <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:f0> = <nat:2> /\ <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:W> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 