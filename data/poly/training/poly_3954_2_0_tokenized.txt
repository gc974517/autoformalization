\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:5> ; <var:d> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:g> = <var:v> $ given any $ <var:v> $ ahead of evaluating this set of instructions , it holds that $ <var:d> = <nat:5> $ after code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:v> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:g> = <var:v> \land <var:e0> = <nat:5> \} \\ <var:d> := <var:e0> \\ \{ <var:g> = <var:v> \land <var:d> = <nat:5> \} \end{eqnarray} Using usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:5> ; <var:d> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:g> = <var:v> }} <def:poly> {{ <var:d> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:d> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 