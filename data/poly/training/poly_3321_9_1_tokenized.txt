\begin{document} \begin{theorem} Consider the following segment of code as follows \begin{verbatim} <var:y1> := <var:f> ; <var:y2> := <var:y1> * <var:f> ; <var:y3> := <var:y2> * <var:f> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:3> ; <var:y3> := <var:y3> * <nat:6> ; <var:k> := <var:y3> <var:k> := <var:k> + <var:y1> <var:k> := <var:k> + <var:y0> \end{verbatim} Given it to hold that $ <var:f> = <var:c> $ ahead of interpreting our list of instructions , then $ <var:k> = <nat:6> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:9> $ when code terminates . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be demonstrated using the following decorated series of instructions . \begin{eqnarray} \{ <var:f> = <var:c> \} \\ <var:y1> := <var:f> ; \\ \{ <var:f> = <var:c> \land <var:y1> = <var:c> \} \\ <var:y2> := <var:y1> * <var:f> ; \\ \{ <var:f> = <var:c> \land <var:y1> = <var:c> \land <var:y2> = <var:c> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:f> ; \\ \{ <var:f> = <var:c> \land <var:y1> = <var:c> \land <var:y2> = <var:c> ^ <nat:2> \land <var:y3> = <var:c> ^ <nat:3> \} \\ <var:y0> := <nat:9> ; \\ \{ <var:f> = <var:c> \land <var:y1> = <var:c> \land <var:y2> = <var:c> ^ <nat:2> \land <var:y3> = <var:c> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:y1> := <var:y1> * <nat:3> ; \\ \{ <var:f> = <var:c> \land <var:y1> = <nat:3> \cdot <var:c> \land <var:y2> = <var:c> ^ <nat:2> \land <var:y3> = <var:c> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:y3> := <var:y3> * <nat:6> ; \\ \{ <var:f> = <var:c> \land <var:y1> = <nat:3> \cdot <var:c> \land <var:y2> = <var:c> ^ <nat:2> \land <var:y3> = <nat:6> \cdot <var:c> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:k> := <var:y3> \\ \{ <var:f> = <var:c> \land <var:y1> = <nat:3> \cdot <var:c> \land <var:y2> = <var:c> ^ <nat:2> \land <var:y0> = <nat:9> \land <var:k> = <nat:6> \cdot <var:c> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:y1> \\ \{ <var:f> = <var:c> \land <var:y0> = <nat:9> \land <var:k> = <nat:6> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> \} \\ <var:k> := <var:k> + <var:y0> \\ \{ <var:f> = <var:c> \land <var:k> = <nat:6> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> + <nat:9> \} \end{eqnarray} Applying Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:f> = <var:c> }} <var:y1> := <var:f> ; <var:y2> := <var:y1> * <var:f> ; <var:y3> := <var:y2> * <var:f> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:3> ; <var:y3> := <var:y3> * <nat:6> ; <var:k> := <var:y3> <var:k> := <var:k> + <var:y1> <var:k> := <var:k> + <var:y0> {{ <var:k> = <nat:6> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <var:c> /\ <var:y2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <var:c> /\ <var:y2> = <var:c> ^ <nat:2> /\ <var:y3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <var:c> /\ <var:y2> = <var:c> ^ <nat:2> /\ <var:y3> = <var:c> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <nat:3> * <var:c> /\ <var:y2> = <var:c> ^ <nat:2> /\ <var:y3> = <var:c> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <nat:3> * <var:c> /\ <var:y2> = <var:c> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:c> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y1> = <nat:3> * <var:c> /\ <var:y2> = <var:c> ^ <nat:2> /\ <var:y0> = <nat:9> /\ <var:k> = <nat:6> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:y0> = <nat:9> /\ <var:k> = <nat:6> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:k> = <nat:6> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 