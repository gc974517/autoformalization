\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:I> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:8> ; <var:Q> := <var:B1> <var:Q> := <var:Q> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Assuming ( given all $ <var:v> \in \mathbb{Z}^+ $ ) that $ <var:I> = <var:v> $ ahead of evaluating our program , it follows that we see $ <var:Q> = <nat:8> * <var:v> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is shown by typical Hoare reasoning . Next , we have the environment update code \verb | <var:B1> := <var:I> ; | . This command forwards the condition $ \{ <var:I> = <var:v> \} $ toward $ \{ <var:I> = <var:v> \land <var:B1> = <var:v> \} $ . Moving forward to the next step , the variable binding code yielding $ <nat:9> $ as $ <var:B0>$ . This statement moves the condition $ \{ <var:I> = <var:v> \land <var:B1> = <var:v> \} $ as the condition $ \{ <var:I> = <var:v> \land <var:B1> = <var:v> \land <var:B0> = <nat:9> \} $ . This is guaranteed with the assignment law from typical Hoare logic . Advancing to the next step , the binding statement binding $ <var:B1> * <nat:8> $ into $ <var:B1>$ . This command takes the precondition $ \{ <var:I> = <var:v> \land <var:B1> = <var:v> \land <var:B0> = <nat:9> \} $ into the condition $ \{ <var:I> = <var:v> \land <var:B1> = <nat:8> \times <var:v> \land <var:B0> = <nat:9> \} $ . Now , we see the variable binding code assigning $ <var:B1$ into $ <var:Q>$ . This line takes the precondition $ \{ <var:I> = <var:v> \land <var:B1> = <nat:8> \times <var:v> \land <var:B0> = <nat:9> \} $ toward the condition $ \{ <var:I> = <var:v> \land <var:B0> = <nat:9> \land <var:Q> = <nat:8> \times <var:v> \} $ . Observing the proceeding step seen in the series of instructions , we see the code \verb | <var:Q> := <var:Q> + <var:B0> | . This moves $ \{ <var:I> = <var:v> \land <var:B0> = <nat:9> \land <var:Q> = <nat:8> \times <var:v> \} $ toward the condition $ \{ <var:I> = <var:v> \land <var:Q> = <nat:8> \times <var:v> + <nat:9> \} $ . This is shown to be logically sound through the assignment inference rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:I> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:8> ; <var:Q> := <var:B1> <var:Q> := <var:Q> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:I> = <var:v> }} <def:poly> {{ <var:Q> = <nat:8> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:B1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:B1> = <var:v> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:B1> = <nat:8> * <var:v> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:B0> = <nat:9> /\ <var:Q> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:Q> = <nat:8> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 