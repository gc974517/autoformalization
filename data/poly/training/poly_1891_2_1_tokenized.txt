\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:4> ; <var:V> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assume --- assuming some positive numbers $ <var:r> $ --- $ <var:a> = <var:r> $ before interpreting this series of commands , it follows that we see $ <var:V> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our code can be shown by standard Hoare reasoning . Taking a look at the proceeding bit of code seen in our segment of code , we have \begin{eqnarray} \{ <var:a> = <var:r> \} \, <var:l0> := <nat:4> \, \{ <var:a> = <var:r> \land <var:l0> = <nat:4> \} \end{eqnarray} Stepping forward , \begin{eqnarray} \{ <var:a> = <var:r> \} \, <var:l0> := <nat:4> \, \{ <var:a> = <var:r> \land <var:l0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:4> ; <var:V> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:a> = <var:r> }} <def:poly> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 