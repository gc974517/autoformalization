\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:D> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:D> ; <var:o2> := <var:o2> * <var:D> ; <var:J> := <var:o2> ; <var:J> := <var:J> + <var:o1> ; <var:J> := <var:J> + <var:o0> \end{verbatim} Allowing it to be that $ <var:D> = <var:P> $ --- given some whole numbers $ <var:P> $ --- before interpreting our code segment it follows that we see $ <var:J> = <nat:5> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:6> $ when set of commands has executed . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:D> = <var:P> \} \\ <var:o0> := <nat:6> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \} \\ <var:o1> := <nat:1> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} \\ <var:o1> := <var:o1> * <var:D> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:P> \} \\ <var:o2> := <nat:5> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:P> \land <var:o2> = <nat:5> \} \\ <var:o2> := <var:o2> * <var:D> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:P> \land <var:o2> = <nat:5> * <var:P> \} \\ <var:o2> := <var:o2> * <var:D> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:P> \land <var:o2> = <nat:5> * <var:P> ^ <nat:2> \} \\ <var:J> := <var:o2> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:P> \land <var:J> = <nat:5> * <var:P> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:o1> ; \\ \{ <var:D> = <var:P> \land <var:o0> = <nat:6> \land <var:J> = <nat:5> * <var:P> ^ <nat:2> + <nat:1> * <var:P> \} \\ <var:J> := <var:J> + <var:o0> \\ \{ <var:D> = <var:P> \land <var:J> = <nat:5> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:6> \} \end{eqnarray} Considering the above , our list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:D> = <var:P> }} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:D> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:D> ; <var:o2> := <var:o2> * <var:D> ; <var:J> := <var:o2> ; <var:J> := <var:J> + <var:o1> ; <var:J> := <var:J> + <var:o0> {{ <var:J> = <nat:5> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:P> /\ <var:o2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:P> /\ <var:o2> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:P> /\ <var:o2> = <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:P> /\ <var:J> = <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:6> /\ <var:J> = <nat:5> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:J> = <nat:5> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 