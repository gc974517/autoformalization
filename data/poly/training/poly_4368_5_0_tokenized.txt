\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:7> ; <var:m1> := <var:m1> * <var:P> ; <var:Z> := <var:m1> ; <var:Z> := <var:Z> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:P> = <var:l> $ prior to running our program , it holds that we see $ <var:Z> = <nat:7> \times <var:l> + <nat:4> $ when segment of code has exited . \end{theorem} \begin{proof} Proving correctness for this list of commands can be accomplished through Hoare logic . Immediately following , we have the variable update statement \verb | <var:m0> := <nat:4> ; | . This forwards $ \{ <var:P> = <var:l> \} $ as $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \} $ . Going forward , we have the binding statement \verb | <var:m1> := <nat:7> ; | . This command advances $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \} $ to $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \} $ . Advancing to the following line of code in the series of commands , the variable binding statement letting $ <var:m1> * <var:P> $ into $ <var:m1>$ . This takes the precondition $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \} $ as the postcondition $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:l> \} $ . This is known to be sound with the assignment law from typical Hoare techniques . Now , we have the variable update code \verb | <var:Z> := <var:m1> ; | . This code advances $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:l> \} $ into the condition $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \land <var:Z> = <nat:7> \cdot <var:l> \} $ . This is ensured by the assignment rule found in standard Hoare techniques . Considering the upcoming line of code found in the code , we see the line \verb | <var:Z> := <var:Z> + <var:m0> | . This moves the condition $ \{ <var:P> = <var:l> \land <var:m0> = <nat:4> \land <var:Z> = <nat:7> \cdot <var:l> \} $ toward the postcondition $ \{ <var:P> = <var:l> \land <var:Z> = <nat:7> \cdot <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:m1> := <nat:7> ; <var:m1> := <var:m1> * <var:P> ; <var:Z> := <var:m1> ; <var:Z> := <var:Z> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:P> = <var:l> }} <def:poly> {{ <var:Z> = <nat:7> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:m0> = <nat:4> /\ <var:Z> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:Z> = <nat:7> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 