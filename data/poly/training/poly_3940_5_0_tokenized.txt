\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:L0> := <nat:9> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:v> ; <var:Y> := <var:L1> ; <var:Y> := <var:Y> + <var:L0> \end{verbatim} Assume that we have $ <var:v> = <var:S> $ prior to interpreting our set of instructions , it holds that we have $ <var:Y> = <nat:1> \cdot <var:S> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for this set of commands is demonstrated by usual Hoare reasoning . Observing the next lines of codefound in our program , we have \verb | { <var:v> = <var:S> } <var:L0> := <nat:9> { <var:v> = <var:S> \land <var:L0> = <nat:9> } | and \verb | { <var:v> = <var:S> \land <var:L0> = <nat:9> } <var:L1> := <nat:1> { <var:v> = <var:S> \land <var:L0> = <nat:9> \land <var:L1> = <nat:1> } | . Advancing to the following line of code contained in the list of instructions , we see \verb | { <var:v> = <var:S> } <var:L0> := <nat:9> { <var:v> = <var:S> \land <var:L0> = <nat:9> } | . This is known to be sound by the environment update inference rule of typical Hoare reasoning . Now , \verb | { <var:v> = <var:S> } <var:L0> := <nat:9> { <var:v> = <var:S> \land <var:L0> = <nat:9> } | . This is ensured through the binding rule defined by typical Hoare reasoning . Honing in on the following statement seen in our list of instructions , we have \verb | { <var:v> = <var:S> } <var:L0> := <nat:9> { <var:v> = <var:S> \land <var:L0> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:v> = <var:S> }} <var:L0> := <nat:9> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:v> ; <var:Y> := <var:L1> ; <var:Y> := <var:Y> + <var:L0> {{ <var:Y> = <nat:1> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:L0> = <nat:9> /\ <var:Y> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:Y> = <nat:1> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 