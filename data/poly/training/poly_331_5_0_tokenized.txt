\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:A0> := <nat:8> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:O> ; <var:i> := <var:A1> ; <var:i> := <var:i> + <var:A0> \end{verbatim} Allow ( for any whole numbers $ <var:W> $ ) it to be that $ <var:O> = <var:W> $ prior to executing our list of instructions then we see $ <var:i> = <nat:4> \times <var:W> + <nat:8> $ when series of instructions has executed . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:O> = <var:W> \} \\ <var:A0> := <nat:8> ; \\ \{ <var:O> = <var:W> \land <var:A0> = <nat:8> \} \\ <var:A1> := <nat:4> ; \\ \{ <var:O> = <var:W> \land <var:A0> = <nat:8> \land <var:A1> = <nat:4> \} \\ <var:A1> := <var:A1> * <var:O> ; \\ \{ <var:O> = <var:W> \land <var:A0> = <nat:8> \land <var:A1> = <nat:4> \times <var:W> \} \\ <var:i> := <var:A1> ; \\ \{ <var:O> = <var:W> \land <var:A0> = <nat:8> \land <var:i> = <nat:4> \times <var:W> \} \\ <var:i> := <var:i> + <var:A0> \\ \{ <var:O> = <var:W> \land <var:i> = <nat:4> \times <var:W> + <nat:8> \} \end{eqnarray} Considering the above , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:O> = <var:W> }} <var:A0> := <nat:8> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:O> ; <var:i> := <var:A1> ; <var:i> := <var:i> + <var:A0> {{ <var:i> = <nat:4> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:A0> = <nat:8> /\ <var:i> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:i> = <nat:4> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 