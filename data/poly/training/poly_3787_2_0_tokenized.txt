\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:R0> := <nat:7> ; <var:c> := <var:R0> \end{verbatim} Assume that we have $ <var:n> = <var:i> $ , for some $ <var:i> $ , prior to executing the series of commands , it must be that $ <var:c> = <nat:7> $ after code exits . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:i> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:n> = <var:i> \land <var:R0> = <nat:7> \} \\ <var:c> := <var:R0> \\ \{ <var:n> = <var:i> \land <var:c> = <nat:7> \} \end{eqnarray} Hence , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:n> = <var:i> }} <var:R0> := <nat:7> ; <var:c> := <var:R0> {{ <var:c> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:c> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 