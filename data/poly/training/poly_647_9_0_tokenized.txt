\begin{document} \begin{theorem} Consider the following series of commands as follows \begin{verbatim} <var:R0> := <nat:5> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:H> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:H> ; <var:R2> := <var:R2> * <var:H> ; <var:O> := <var:R2> ; <var:O> := <var:O> + <var:R1> ; <var:O> := <var:O> + <var:R0> \end{verbatim} Given it to hold that $ <var:H> = <var:y> $ ahead of interpreting this segment of code , then we have $ <var:O> = <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be demonstrated using standard Hoare logic . Moving forward , we see \verb | { <var:H> = <var:y> } <var:R0> := <nat:5> { <var:H> = <var:y> \land <var:R0> = <nat:5> } | , \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> } <var:R1> := <nat:3> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> } | , \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> } <var:R1> := <var:R1> * <var:H> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> } | , \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> } <var:R2> := <nat:4> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:R2> = <nat:4> } | , \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:R2> = <nat:4> } <var:R2> := <var:R2> * <var:H> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:R2> = <nat:4> \cdot <var:y> } | , \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:R2> = <nat:4> \cdot <var:y> } <var:R2> := <var:R2> * <var:H> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:R2> = <nat:4> \cdot <var:y> ^ <nat:2> } | , \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:R2> = <nat:4> \cdot <var:y> ^ <nat:2> } <var:O> := <var:R2> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:O> = <nat:4> \cdot <var:y> ^ <nat:2> } | and \verb | { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \cdot <var:y> \land <var:O> = <nat:4> \cdot <var:y> ^ <nat:2> } <var:O> := <var:O> + <var:R1> { <var:H> = <var:y> \land <var:R0> = <nat:5> \land <var:O> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> } | . Keeping momentum , \verb | { <var:H> = <var:y> } <var:R0> := <nat:5> { <var:H> = <var:y> \land <var:R0> = <nat:5> } | . This is ensured by the binding scheme found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:H> = <var:y> }} <var:R0> := <nat:5> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:H> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:H> ; <var:R2> := <var:R2> * <var:H> ; <var:O> := <var:R2> ; <var:O> := <var:O> + <var:R1> ; <var:O> := <var:O> + <var:R0> {{ <var:O> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> * <var:y> /\ <var:R2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> * <var:y> /\ <var:R2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> * <var:y> /\ <var:R2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> * <var:y> /\ <var:O> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:R0> = <nat:5> /\ <var:O> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:O> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 