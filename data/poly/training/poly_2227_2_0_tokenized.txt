\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:v0> := <nat:6> ; <var:t> := <var:v0> \end{verbatim} Allowing for some $ <var:D> \in \mathbb{Z}^+ $ it to be that $ <var:n> = <var:D> $ ahead of the execution of the series of instructions , it follows that we see $ <var:t> = <nat:6> $ when series of commands is done executing . \end{theorem} \begin{proof} The argument for the series of commands is demonstrated by Hoare reasoning . Taking another step toward the proceeding step in our set of commands , we see the line \verb | <var:v0> := <nat:6> ; | . This redefines $ \{ <var:n> = <var:D> \} $ into the condition $ \{ <var:n> = <var:D> \land <var:v0> = <nat:6> \} $ . This is guaranteed with the assignment rule defined in typical Hoare logic . Paying attention to the upcoming line in the list of commands , the assignment statement letting $ <var:v0$ into $ <var:t>$ . This moves the precondition $ \{ <var:n> = <var:D> \land <var:v0> = <nat:6> \} $ into $ \{ <var:n> = <var:D> \land <var:t> = <nat:6> \} $ . This is deduced with the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <var:v0> := <nat:6> ; <var:t> := <var:v0> {{ <var:t> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:t> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 