\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:V> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:V> ; <var:d2> := <var:d2> * <var:V> ; <var:M> := <var:d2> ; <var:M> := <var:M> + <var:d1> ; <var:M> := <var:M> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given given all $ <var:h> \in \mathbb{N} $ that $ <var:V> = <var:h> $ before the execution of the set of instructions it holds that we have $ <var:M> = <nat:8> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:V> = <var:h> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:7> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:d1> = <nat:7> \} \\ <var:d1> := <var:d1> * <var:V> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:d1> = <nat:7> * <var:h> \} \end{eqnarray} Continuing interpreting our list of instructions gives us : \begin{eqnarray} <var:d2> := <nat:8> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:d1> = <nat:7> * <var:h> \land <var:d2> = <nat:8> \} \\ <var:d2> := <var:d2> * <var:V> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:d1> = <nat:7> * <var:h> \land <var:d2> = <nat:8> * <var:h> \} \\ <var:d2> := <var:d2> * <var:V> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:d1> = <nat:7> * <var:h> \land <var:d2> = <nat:8> * <var:h> ^ <nat:2> \} \\ <var:M> := <var:d2> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:d1> = <nat:7> * <var:h> \land <var:M> = <nat:8> * <var:h> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:d1> ; \\ \{ <var:V> = <var:h> \land <var:d0> = <nat:4> \land <var:M> = <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> \} \\ <var:M> := <var:M> + <var:d0> \\ \{ <var:V> = <var:h> \land <var:M> = <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:4> \} \end{eqnarray} Hence , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:V> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:V> ; <var:d2> := <var:d2> * <var:V> ; <var:M> := <var:d2> ; <var:M> := <var:M> + <var:d1> ; <var:M> := <var:M> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <def:poly> {{ <var:M> = <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:7> * <var:h> /\ <var:d2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:7> * <var:h> /\ <var:d2> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:7> * <var:h> /\ <var:d2> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:7> * <var:h> /\ <var:M> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:d0> = <nat:4> /\ <var:M> = <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:M> = <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 