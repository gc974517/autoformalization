\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:t> ; <var:d> := <var:E1> ; <var:d> := <var:d> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given given any $ <var:O> \in \mathbb{Z}^+ $ it to be that $ <var:t> = <var:O> $ before the evaluation of this list of commands , it follows that we see $ <var:d> = <nat:3> \cdot <var:O> + <nat:4> $ when program has terminated . \end{theorem} \begin{proof} The flow of logic for our code segment is accomplished with Hoare logic . Further , the code defining $ <nat:4> $ into $ <var:E0>$ . This moves $ \{ <var:t> = <var:O> \} $ as the postcondition $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \} $ . This is known to be sound with the assignment law in typical Hoare techniques . Going forward , we see the assignment code yielding $ <nat:3> $ into $ <var:E1>$ . This takes $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \} $ into the postcondition $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \} $ . Advancing to the subsequent piece of code in our code , we see the variable binding line yielding $ <var:E1> * <var:t> $ to $ <var:E1>$ . This code advances the precondition $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \} $ as $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> * <var:O> \} $ . Paying attention to the upcoming command in our set of commands , we have the statement \verb | <var:d> := <var:E1> ; | . This statement advances the precondition $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> * <var:O> \} $ toward the postcondition $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \land <var:d> = <nat:3> * <var:O> \} $ . After , the variable update code \verb | <var:d> := <var:d> + <var:E0> | . This statement redefines the precondition $ \{ <var:t> = <var:O> \land <var:E0> = <nat:4> \land <var:d> = <nat:3> * <var:O> \} $ toward the condition $ \{ <var:t> = <var:O> \land <var:d> = <nat:3> * <var:O> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:t> ; <var:d> := <var:E1> ; <var:d> := <var:d> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:t> = <var:O> }} <def:poly> {{ <var:d> = <nat:3> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:O> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:O> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:O> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:O> /\ <var:E0> = <nat:4> /\ <var:d> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:O> /\ <var:d> = <nat:3> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 