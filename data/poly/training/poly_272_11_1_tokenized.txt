\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:f> ; <var:m2> := <var:m1> * <var:f> ; <var:m3> := <var:m2> * <var:f> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:5> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:6> ; <var:X> := <var:m3> <var:X> := <var:X> + <var:m2> <var:X> := <var:X> + <var:m1> <var:X> := <var:X> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:f> = <var:c> $ prior to running the code segment it holds that we see $ <var:X> = <nat:6> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:6> $ once program finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:c> \} \\ <var:m1> := <var:f> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <var:c> \} \\ <var:m2> := <var:m1> * <var:f> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:f> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \} \\ <var:m0> := <nat:6> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:6> \} \\ <var:m1> := <var:m1> * <nat:5> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <nat:5> \times <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:6> \} \\ <var:m2> := <var:m2> * <nat:5> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <nat:5> \times <var:c> \land <var:m2> = <nat:5> \times <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:6> \} \\ <var:m3> := <var:m3> * <nat:6> ; \\ \{ <var:f> = <var:c> \land <var:m1> = <nat:5> \times <var:c> \land <var:m2> = <nat:5> \times <var:c> ^ <nat:2> \land <var:m3> = <nat:6> \times <var:c> ^ <nat:3> \land <var:m0> = <nat:6> \} \\ <var:X> := <var:m3> \\ \{ <var:f> = <var:c> \land <var:m1> = <nat:5> \times <var:c> \land <var:m2> = <nat:5> \times <var:c> ^ <nat:2> \land <var:m0> = <nat:6> \land <var:X> = <nat:6> \times <var:c> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:m2> \\ \{ <var:f> = <var:c> \land <var:m1> = <nat:5> \times <var:c> \land <var:m0> = <nat:6> \land <var:X> = <nat:6> \times <var:c> ^ <nat:3> + <nat:5> \times <var:c> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:m1> \\ \{ <var:f> = <var:c> \land <var:m0> = <nat:6> \land <var:X> = <nat:6> \times <var:c> ^ <nat:3> + <nat:5> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> \} \\ <var:X> := <var:X> + <var:m0> \\ \{ <var:f> = <var:c> \land <var:X> = <nat:6> \times <var:c> ^ <nat:3> + <nat:5> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:f> ; <var:m2> := <var:m1> * <var:f> ; <var:m3> := <var:m2> * <var:f> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:5> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:6> ; <var:X> := <var:m3> <var:X> := <var:X> + <var:m2> <var:X> := <var:X> + <var:m1> <var:X> := <var:X> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:f> = <var:c> }} <def:poly> {{ <var:X> = <nat:6> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <nat:5> * <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <nat:5> * <var:c> /\ <var:m2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <nat:5> * <var:c> /\ <var:m2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:m3> = <nat:6> * <var:c> ^ <nat:3> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <nat:5> * <var:c> /\ <var:m2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:m0> = <nat:6> /\ <var:X> = <nat:6> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m1> = <nat:5> * <var:c> /\ <var:m0> = <nat:6> /\ <var:X> = <nat:6> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:m0> = <nat:6> /\ <var:X> = <nat:6> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:X> = <nat:6> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 