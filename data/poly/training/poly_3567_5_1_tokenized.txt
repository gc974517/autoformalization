\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:i> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:2> ; <var:s> := <var:V1> <var:s> := <var:s> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Assuming $ <var:i> = <var:j> $ , letting positive numbers $ <var:j> $ , prior to running the series of instructions , it follows that we see $ <var:s> = <nat:2> * <var:j> + <nat:1> $ once series of commands terminates . \end{theorem} \begin{proof} Notice the below decorated list of commands . \begin{eqnarray} \{ <var:i> = <var:j> \} \\ <var:V1> := <var:i> ; \\ \{ <var:i> = <var:j> \land <var:V1> = <var:j> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:i> = <var:j> \land <var:V1> = <var:j> \land <var:V0> = <nat:1> \} \\ <var:V1> := <var:V1> * <nat:2> ; \\ \{ <var:i> = <var:j> \land <var:V1> = <nat:2> \cdot <var:j> \land <var:V0> = <nat:1> \} \\ <var:s> := <var:V1> \\ \{ <var:i> = <var:j> \land <var:V0> = <nat:1> \land <var:s> = <nat:2> \cdot <var:j> \} \\ <var:s> := <var:s> + <var:V0> \\ \{ <var:i> = <var:j> \land <var:s> = <nat:2> \cdot <var:j> + <nat:1> \} \end{eqnarray} The application of standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:i> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:2> ; <var:s> := <var:V1> <var:s> := <var:s> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:i> = <var:j> }} <def:poly> {{ <var:s> = <nat:2> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:V1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:V1> = <var:j> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:V1> = <nat:2> * <var:j> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:V0> = <nat:1> /\ <var:s> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:s> = <nat:2> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 