\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:w> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:1> ; <var:N> := <var:c1> <var:N> := <var:N> + <var:c0> \end{verbatim} Given that $ <var:w> = <var:Z> $ ahead of executing our segment of code , then $ <var:N> = <nat:1> \cdot <var:Z> + <nat:3> $ when code finishes . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be demonstrated with typical Hoare reasoning . Moving on to the next line in our code segment , we have the statement letting $ <var:w> $ as $ <var:c1>$ . This line forwards the condition $ \{ <var:w> = <var:Z> \} $ to $ \{ <var:w> = <var:Z> \land <var:c1> = <var:Z> \} $ . This is guaranteed using the assignment law from typical Hoare techniques . After , we have the command letting $ <nat:3> $ as $ <var:c0>$ . This takes $ \{ <var:w> = <var:Z> \land <var:c1> = <var:Z> \} $ to the postcondition $ \{ <var:w> = <var:Z> \land <var:c1> = <var:Z> \land <var:c0> = <nat:3> \} $ . Keeping momentum , the binding line assigning $ <var:c1> * <nat:1> $ as $ <var:c1>$ . This forwards $ \{ <var:w> = <var:Z> \land <var:c1> = <var:Z> \land <var:c0> = <nat:3> \} $ into $ \{ <var:w> = <var:Z> \land <var:c1> = <nat:1> \times <var:Z> \land <var:c0> = <nat:3> \} $ . Taking a look at the following bit of code in the code , we have the environment update statement \verb | <var:N> := <var:c1> | . This statement transfers the precondition $ \{ <var:w> = <var:Z> \land <var:c1> = <nat:1> \times <var:Z> \land <var:c0> = <nat:3> \} $ into the condition $ \{ <var:w> = <var:Z> \land <var:c0> = <nat:3> \land <var:N> = <nat:1> \times <var:Z> \} $ . Advancing to the proceeding piece of code found in the series of commands , the code \verb | <var:N> := <var:N> + <var:c0> | . This command forwards the precondition $ \{ <var:w> = <var:Z> \land <var:c0> = <nat:3> \land <var:N> = <nat:1> \times <var:Z> \} $ into the condition $ \{ <var:w> = <var:Z> \land <var:N> = <nat:1> \times <var:Z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:c1> := <var:w> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:1> ; <var:N> := <var:c1> <var:N> := <var:N> + <var:c0> {{ <var:N> = <nat:1> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:c1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:c1> = <var:Z> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:c1> = <nat:1> * <var:Z> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:c0> = <nat:3> /\ <var:N> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:N> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 