\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:5> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:l> ; <var:I2> := <nat:4> ; <var:I2> := <var:I2> * <var:l> ; <var:I2> := <var:I2> * <var:l> ; <var:z> := <var:I2> ; <var:z> := <var:z> + <var:I1> ; <var:z> := <var:z> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Assuming given natural coefficients $ <var:J> $ it to hold that $ <var:l> = <var:J> $ ahead of the execution of this segment of code , it follows that we see $ <var:z> = <nat:4> \times <var:J> ^ <nat:2> + <nat:9> \times <var:J> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques results in : \begin{eqnarray} \{ <var:l> = <var:J> \} \\ <var:I0> := <nat:5> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \} \\ <var:I1> := <nat:9> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:I1> = <nat:9> \} \\ <var:I1> := <var:I1> * <var:l> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:I1> = <nat:9> * <var:J> \} \\ <var:I2> := <nat:4> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:I1> = <nat:9> * <var:J> \land <var:I2> = <nat:4> \} \\ <var:I2> := <var:I2> * <var:l> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:I1> = <nat:9> * <var:J> \land <var:I2> = <nat:4> * <var:J> \} \\ <var:I2> := <var:I2> * <var:l> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:I1> = <nat:9> * <var:J> \land <var:I2> = <nat:4> * <var:J> ^ <nat:2> \} \\ <var:z> := <var:I2> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:I1> = <nat:9> * <var:J> \land <var:z> = <nat:4> * <var:J> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:I1> ; \\ \{ <var:l> = <var:J> \land <var:I0> = <nat:5> \land <var:z> = <nat:4> * <var:J> ^ <nat:2> + <nat:9> * <var:J> \} \\ <var:z> := <var:z> + <var:I0> \\ \{ <var:l> = <var:J> \land <var:z> = <nat:4> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:5> \} \end{eqnarray} Therefore , our program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:5> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:l> ; <var:I2> := <nat:4> ; <var:I2> := <var:I2> * <var:l> ; <var:I2> := <var:I2> * <var:l> ; <var:z> := <var:I2> ; <var:z> := <var:z> + <var:I1> ; <var:z> := <var:z> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:l> = <var:J> }} <def:poly> {{ <var:z> = <nat:4> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:9> * <var:J> /\ <var:I2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:9> * <var:J> /\ <var:I2> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:9> * <var:J> /\ <var:I2> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:9> * <var:J> /\ <var:z> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:I0> = <nat:5> /\ <var:z> = <nat:4> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:z> = <nat:4> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 