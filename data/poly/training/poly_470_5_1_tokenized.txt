\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:e> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:1> ; <var:G> := <var:X1> <var:G> := <var:G> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Given it to be that $ <var:e> = <var:Y> $ ( with some positive integer coefficients $ <var:Y> $ ) before the evaluation of our code it holds that $ <var:G> = <nat:1> * <var:Y> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this code can be given with Hoare logic . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:Y> \} & <var:X1> := <var:e> & \{ <var:e> = <var:Y> \land <var:X1> = <var:Y> \} \\ \{ <var:e> = <var:Y> \land <var:X1> = <var:Y> \} & <var:X0> := <nat:7> & \{ <var:e> = <var:Y> \land <var:X1> = <var:Y> \land <var:X0> = <nat:7> \} \\ \{ <var:e> = <var:Y> \land <var:X1> = <var:Y> \land <var:X0> = <nat:7> \} & <var:X1> := <var:X1> * <nat:1> & \{ <var:e> = <var:Y> \land <var:X1> = <nat:1> \cdot <var:Y> \land <var:X0> = <nat:7> \} \\ \{ <var:e> = <var:Y> \land <var:X1> = <nat:1> \cdot <var:Y> \land <var:X0> = <nat:7> \} & <var:G> := <var:X1& \{ <var:e> = <var:Y> \land <var:X0> = <nat:7> \land <var:G> = <nat:1> \cdot <var:Y> \} \\ \{ <var:e> = <var:Y> \land <var:X0> = <nat:7> \land <var:G> = <nat:1> \cdot <var:Y> \} & <var:G> := <var:G> + <var:X0& \{ <var:e> = <var:Y> \land <var:G> = <nat:1> \cdot <var:Y> + <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:e> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:1> ; <var:G> := <var:X1> <var:G> := <var:G> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:e> = <var:Y> }} <def:poly> {{ <var:G> = <nat:1> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:X1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:X1> = <var:Y> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:X1> = <nat:1> * <var:Y> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:X0> = <nat:7> /\ <var:G> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:G> = <nat:1> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 