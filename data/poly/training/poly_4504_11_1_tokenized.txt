\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:X> ; <var:E2> := <var:E1> * <var:X> ; <var:E3> := <var:E2> * <var:X> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:I> := <var:E3> <var:I> := <var:I> + <var:E2> <var:I> := <var:I> + <var:E1> <var:I> := <var:I> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Given it to hold that $ <var:X> = <var:v> $ prior to executing the segment of code , it must be that we have $ <var:I> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:8> \cdot <var:v> + <nat:1> $ once series of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions can be seen through typical Hoare reasoning . Honing in on the subsequent bits of codefound in the segment of code , \[ \begin{tabular} {rcl} \{ <var:X> = <var:v> \} & <var:E1> := <var:X> & \{ <var:X> = <var:v> \land <var:E1> = <var:v> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <var:v> \} & <var:E2> := <var:E1> * <var:X> & \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \} & <var:E3> := <var:E2> * <var:X> & \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \} & <var:E0> := <nat:1> & \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} & <var:E1> := <var:E1> * <nat:8> & \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} & <var:E2> := <var:E2> * <nat:2> & \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} & <var:E3> := <var:E3> * <nat:2> & \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \} & <var:I> := <var:E3& \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:I> = <nat:2> \times <var:v> ^ <nat:3> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:I> = <nat:2> \times <var:v> ^ <nat:3> \} & <var:I> := <var:I> + <var:E2& \{ <var:X> = <var:v> \land <var:E1> = <nat:8> \times <var:v> \land <var:E0> = <nat:1> \land <var:I> = <nat:2> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> \} \end{tabular} After , we have \[ \begin{tabular} {rcl} \{ <var:X> = <var:v> \} & <var:E1> := <var:X> & \{ <var:X> = <var:v> \land <var:E1> = <var:v> \} \\ \{ <var:X> = <var:v> \land <var:E1> = <var:v> \} & <var:E2> := <var:E1> * <var:X> & \{ <var:X> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:X> ; <var:E2> := <var:E1> * <var:X> ; <var:E3> := <var:E2> * <var:X> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:I> := <var:E3> <var:I> := <var:I> + <var:E2> <var:I> := <var:I> + <var:E1> <var:I> := <var:I> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:X> = <var:v> }} <def:poly> {{ <var:I> = <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <nat:8> * <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <nat:8> * <var:v> /\ <var:E2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <nat:8> * <var:v> /\ <var:E2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:v> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <nat:8> * <var:v> /\ <var:E2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:E0> = <nat:1> /\ <var:I> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E1> = <nat:8> * <var:v> /\ <var:E0> = <nat:1> /\ <var:I> = <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E0> = <nat:1> /\ <var:I> = <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:I> = <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 