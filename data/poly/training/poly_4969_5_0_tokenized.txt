\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:r> ; <var:h> := <var:w1> ; <var:h> := <var:h> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assuming it to hold that $ <var:r> = <var:o> $ ahead of interpreting our set of commands , it must be that $ <var:h> = <nat:3> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:o> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:r> = <var:o> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:3> ; \\ \{ <var:r> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \} \\ <var:w1> := <var:w1> * <var:r> ; \\ \{ <var:r> = <var:o> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \times <var:o> \} \\ <var:h> := <var:w1> ; \\ \{ <var:r> = <var:o> \land <var:w0> = <nat:1> \land <var:h> = <nat:3> \times <var:o> \} \\ <var:h> := <var:h> + <var:w0> \\ \{ <var:r> = <var:o> \land <var:h> = <nat:3> \times <var:o> + <nat:1> \} \end{eqnarray} Using Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:r> ; <var:h> := <var:w1> ; <var:h> := <var:h> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:r> = <var:o> }} <def:poly> {{ <var:h> = <nat:3> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:w0> = <nat:1> /\ <var:h> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:h> = <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 