\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:l0> := <nat:7> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:W> ; <var:z> := <var:l1> ; <var:z> := <var:z> + <var:l0> \end{verbatim} Assume it to hold that $ <var:W> = <var:c> $ before the execution of our program , it follows that $ <var:z> = <nat:2> \times <var:c> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for our program is done using Hoare logic . Taking a look at the proceeding bit of code found in the set of commands , \begin{verbatim} { <var:W> = <var:c> } <var:l0> := <nat:7> { <var:W> = <var:c> \land <var:l0> = <nat:7> } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:W> = <var:c> } <var:l0> := <nat:7> { <var:W> = <var:c> \land <var:l0> = <nat:7> } { <var:W> = <var:c> \land <var:l0> = <nat:7> } <var:l1> := <nat:2> { <var:W> = <var:c> \land <var:l0> = <nat:7> \land <var:l1> = <nat:2> } { <var:W> = <var:c> \land <var:l0> = <nat:7> \land <var:l1> = <nat:2> } <var:l1> := <var:l1> * <var:W> { <var:W> = <var:c> \land <var:l0> = <nat:7> \land <var:l1> = <nat:2> \times <var:c> } { <var:W> = <var:c> \land <var:l0> = <nat:7> \land <var:l1> = <nat:2> \times <var:c> } <var:z> := <var:l1> { <var:W> = <var:c> \land <var:l0> = <nat:7> \land <var:z> = <nat:2> \times <var:c> } \end{verbatim} This is deduced by the variable assignmet law obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:W> = <var:c> }} <var:l0> := <nat:7> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:W> ; <var:z> := <var:l1> ; <var:z> := <var:z> + <var:l0> {{ <var:z> = <nat:2> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l0> = <nat:7> /\ <var:z> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:z> = <nat:2> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 