\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:3> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:r> ; <var:n> := <var:Q1> ; <var:n> := <var:n> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Assume $ <var:r> = <var:z> $ ( letting positive integer coefficients $ <var:z> $ ) prior to the evaluation of this code segment then we see $ <var:n> = <nat:7> \cdot <var:z> + <nat:3> $ once set of instructions has terminated . \end{theorem} \begin{proof} The argument for this set of commands can be accomplished by standard Hoare logic . Shifting focus toward the subsequent piece of code found in the series of commands , the variable binding statement defining $ <nat:3> $ as $ <var:Q0>$ . This redefines the condition $ \{ <var:r> = <var:z> \} $ toward the postcondition $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \} $ . This is shown to be logically sound using the assignment scheme found in usual Hoare reasoning . Advancing to the next step contained in the program , we see the environment update line \verb | <var:Q1> := <nat:7> ; | . This transfers the precondition $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \} $ to $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:7> \} $ . This is known to be sound using the assignment law defined by Hoare techniques . Moving forward , we have the variable update line letting $ <var:Q1> * <var:r> $ into $ <var:Q1>$ . This takes $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:7> \} $ to $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:7> \times <var:z> \} $ . This is guaranteed using the assignment rule defined in usual Hoare logic . Now , we have the environment update command letting $ <var:Q1> $ as $ <var:n>$ . This advances the condition $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:7> \times <var:z> \} $ to $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \land <var:n> = <nat:7> \times <var:z> \} $ . This is rigorously given by the assignment scheme of standard Hoare techniques . Advancing to the proceeding command in the program , we see the command giving $ <var:n> + <var:Q0$ to $ <var:n>$ . This command transfers the condition $ \{ <var:r> = <var:z> \land <var:Q0> = <nat:3> \land <var:n> = <nat:7> \times <var:z> \} $ as the condition $ \{ <var:r> = <var:z> \land <var:n> = <nat:7> \times <var:z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:r> ; <var:n> := <var:Q1> ; <var:n> := <var:n> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:r> = <var:z> }} <def:poly> {{ <var:n> = <nat:7> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:n> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:n> = <nat:7> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 