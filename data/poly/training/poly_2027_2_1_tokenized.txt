\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:7> ; <var:w> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:u> = <var:m> $ before evaluating our program , it must be that we have $ <var:w> = <nat:7> $ . \end{theorem} \begin{proof} The argument for the code segment is evident with typical Hoare reasoning . Moving onward , we have \begin{verbatim} { <var:u> = <var:m> } <var:v0> := <nat:7> { <var:u> = <var:m> \land <var:v0> = <nat:7> } \end{verbatim} Honing in on the following statement found in the list of instructions , we have \begin{verbatim} { <var:u> = <var:m> } <var:v0> := <nat:7> { <var:u> = <var:m> \land <var:v0> = <nat:7> } \end{verbatim} This is shown to be logically sound by the variable binding scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:7> ; <var:w> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:u> = <var:m> }} <def:poly> {{ <var:w> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:w> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 