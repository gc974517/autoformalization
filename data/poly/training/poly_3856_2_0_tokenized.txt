\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:P0> := <nat:1> ; <var:l> := <var:P0> \end{verbatim} Allowing it to hold that $ <var:W> = <var:w> $ assuming some $ <var:w> $ prior to the evaluation of the code segment it must be that we have $ <var:l> = <nat:1> $ after program is done . \end{theorem} \begin{proof} The flow of logic for the set of commands can be given by usual Hoare techniques . Moving onward , the assignment line yielding $ <nat:1> $ into $ <var:P0>$ . This statement takes the precondition $ \{ <var:W> = <var:w> \} $ as the postcondition $ \{ <var:W> = <var:w> \land <var:P0> = <nat:1> \} $ . This is given using the assignment scheme defined in Hoare techniques . Now , we see the variable assignmet line \verb | <var:l> := <var:P0> | . This redefines $ \{ <var:W> = <var:w> \land <var:P0> = <nat:1> \} $ to the postcondition $ \{ <var:W> = <var:w> \land <var:l> = <nat:1> \} $ . This is sound by the assignment inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:W> = <var:w> }} <var:P0> := <nat:1> ; <var:l> := <var:P0> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 