\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:9> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:P> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:P> ; <var:g2> := <var:g2> * <var:P> ; <var:O> := <var:g2> ; <var:O> := <var:O> + <var:g1> ; <var:O> := <var:O> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:P> = <var:m> $ prior to interpreting this code it holds that $ <var:O> = <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:9> $ once set of commands exits . \end{theorem} \begin{proof} The method of proof for our list of commands can be seen by standard Hoare reasoning . Moving forward to the upcoming lines of codeseen in the series of instructions , we see \begin{eqnarray} \{ <var:P> = <var:m> \} \, <var:g0> := <nat:9> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \} \\ \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \} \, <var:g1> := <nat:4> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \\ \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \, <var:g1> := <var:g1> * <var:P> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> * <var:m> \} \\ \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> * <var:m> \} \, <var:g2> := <nat:3> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> * <var:m> \land <var:g2> = <nat:3> \} \end{eqnarray} This is deduced using the environment update scheme defined in Hoare reasoning . Taking a look at the proceeding lines found in the code , we have \begin{eqnarray} \{ <var:P> = <var:m> \} \, <var:g0> := <nat:9> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \} \\ \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \} \, <var:g1> := <nat:4> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \end{eqnarray} This is shown to be logically sound using the environment update law from standard Hoare techniques . Taking a look at the upcoming pieces of code in the set of instructions , \begin{eqnarray} \{ <var:P> = <var:m> \} \, <var:g0> := <nat:9> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \} \\ \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \} \, <var:g1> := <nat:4> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \\ \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> \} \, <var:g1> := <var:g1> * <var:P> \, \{ <var:P> = <var:m> \land <var:g0> = <nat:9> \land <var:g1> = <nat:4> * <var:m> \} \end{eqnarray} This is guaranteed using the binding law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <def:poly> := <var:g0> := <nat:9> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:P> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:P> ; <var:g2> := <var:g2> * <var:P> ; <var:O> := <var:g2> ; <var:O> := <var:O> + <var:g1> ; <var:O> := <var:O> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:P> = <var:m> }} <def:poly> {{ <var:O> = <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:m> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:m> /\ <var:g2> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:m> /\ <var:g2> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:4> * <var:m> /\ <var:O> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:g0> = <nat:9> /\ <var:O> = <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:O> = <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 