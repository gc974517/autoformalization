\begin{document} \begin{theorem} Let the following list of commands as \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:3> + <var:H> * <var:v> ; <var:H> := <nat:3> + <var:H> * <var:v> ; <var:H> := <nat:1> + <var:H> * <var:v> ; <var:H> := <var:H> * <var:v> ; <var:H> := <nat:4> + <var:H> * <var:v> ; <var:H> := <nat:3> + <var:H> * <var:v> \end{verbatim} Allowing that we have $ <var:v> = <var:P> $ ( letting whole numbers $ <var:P> $ ) before running this code , then we have $ <var:H> = <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:3> $ once series of instructions has finished . \end{theorem} \begin{proof} Arguing the correctness of this program can be done using standard Hoare techniques . Immediately following , we have the variable binding statement yielding $ <nat:3> $ to $ <var:H>$ . This redefines the precondition $ \{ <var:v> = <var:P> \} $ to $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \} $ . Advancing , the assignment line \verb | <var:H> := <nat:3> + <var:H> * <var:v> ; | . This command forwards $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \} $ as $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> + <nat:3> \} $ . Moving forward to the subsequent line of code seen in our program , we have the variable update statement defining $ <nat:3> + <var:H> * <var:v> $ into $ <var:H>$ . This moves the precondition $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> + <nat:3> \} $ toward $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:3> \} $ . This is ensured by the assignment scheme in typical Hoare logic . Following , the assignment line giving $ <nat:1> + <var:H> * <var:v> $ toward $ <var:H>$ . This advances $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:3> \} $ as the postcondition $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:1> \} $ . Focusing on the proceeding statement seen in the set of commands , we have the line assigning $ <var:H> * <var:v> $ to $ <var:H>$ . This forwards the precondition $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:1> \} $ toward the condition $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + \} $ . Advancing to the upcoming bit of code seen in our segment of code , we have the code \verb | <var:H> := <nat:4> + <var:H> * <var:v> ; | . This command advances the precondition $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + \} $ into the condition $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:4> \} $ . This is shown to be logically sound through the assignment rule found in usual Hoare techniques . Going forward , we have the variable assignmet statement \verb | <var:H> := <nat:3> + <var:H> * <var:v> | . This moves $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:v> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:6> + <nat:3> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:1> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> + <nat:3> \} $ . This is sound by the assignment law given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:v> = <var:P> }} <var:H> := <nat:3> ; <var:H> := <nat:3> + <var:H> * <var:v> ; <var:H> := <nat:3> + <var:H> * <var:v> ; <var:H> := <nat:1> + <var:H> * <var:v> ; <var:H> := <var:H> * <var:v> ; <var:H> := <nat:4> + <var:H> * <var:v> ; <var:H> := <nat:3> + <var:H> * <var:v> {{ <var:H> = <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 