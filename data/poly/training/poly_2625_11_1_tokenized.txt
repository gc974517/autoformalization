\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:v1> := <var:Q> ; <var:v2> := <var:v1> * <var:Q> ; <var:v3> := <var:v2> * <var:Q> ; <var:v0> := <nat:8> ; <var:v1> := <var:v1> * <nat:9> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:7> ; <var:U> := <var:v3> <var:U> := <var:U> + <var:v2> <var:U> := <var:U> + <var:v1> <var:U> := <var:U> + <var:v0> \end{verbatim} Assuming it to hold that $ <var:Q> = <var:m> $ prior to the evaluation of the program , it follows that we see $ <var:U> = <nat:7> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this set of commands is clear through usual Hoare techniques . Following , we see the variable assignmet line \verb | <var:v1> := <var:Q> ; | . This redefines the condition $ \{ <var:Q> = <var:m> \} $ into the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \} $ . Keeping momentum , we see the line \verb | <var:v2> := <var:v1> * <var:Q> ; | . This forwards the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \} $ toward $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \} $ . This is known to be sound with the assignment rule given by standard Hoare logic . Observing the next statement found in our list of commands , we have the binding line \verb | <var:v3> := <var:v2> * <var:Q> ; | . This forwards the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \} $ toward the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \} $ . This is ensured by the assignment inference rule in typical Hoare reasoning . Now , we see the environment update code giving $ <nat:8> $ as $ <var:v0>$ . This advances $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \} $ toward $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . This is given using the assignment rule of Hoare techniques . Going to the next step , we see the environment update line defining $ <var:v1> * <nat:9> $ toward $ <var:v1>$ . This command takes the precondition $ \{ <var:Q> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ as the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . Moving forward to the proceeding line of code found in the set of instructions , we see the variable assignmet statement \verb | <var:v2> := <var:v2> * <nat:3> ; | . This code moves the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ as the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <nat:3> * <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . This is known to be sound with the assignment scheme in usual Hoare reasoning . Paying attention to the upcoming line of code seen in our list of commands , we see the variable binding line yielding $ <var:v3> * <nat:7> $ to $ <var:v3>$ . This statement takes the precondition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <nat:3> * <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ into $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <nat:3> * <var:m> ^ <nat:2> \land <var:v3> = <nat:7> * <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . Moving on to the proceeding line found in the program , we have the binding statement letting $ <var:v3$ to $ <var:U>$ . This statement moves the condition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <nat:3> * <var:m> ^ <nat:2> \land <var:v3> = <nat:7> * <var:m> ^ <nat:3> \land <var:v0> = <nat:8> \} $ toward the postcondition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <nat:3> * <var:m> ^ <nat:2> \land <var:v0> = <nat:8> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> \} $ . This is deduced with the assignment inference rule of typical Hoare techniques . Immediately after , we see the variable binding line giving $ <var:U> + <var:v2$ toward $ <var:U>$ . This takes $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v2> = <nat:3> * <var:m> ^ <nat:2> \land <var:v0> = <nat:8> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> \} $ to the postcondition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v0> = <nat:8> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> \} $ . Moving on to the next step , we see the variable assignmet statement \verb | <var:U> := <var:U> + <var:v1> | . This code takes the precondition $ \{ <var:Q> = <var:m> \land <var:v1> = <nat:9> * <var:m> \land <var:v0> = <nat:8> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> \} $ to the condition $ \{ <var:Q> = <var:m> \land <var:v0> = <nat:8> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> \} $ . Moving forward to the next step , the variable binding line \verb | <var:U> := <var:U> + <var:v0> | . This line transfers $ \{ <var:Q> = <var:m> \land <var:v0> = <nat:8> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> \} $ toward the postcondition $ \{ <var:Q> = <var:m> \land <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:8> \} $ . This is shown using the assignment inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Q> = <var:m> }} <var:v1> := <var:Q> ; <var:v2> := <var:v1> * <var:Q> ; <var:v3> := <var:v2> * <var:Q> ; <var:v0> := <nat:8> ; <var:v1> := <var:v1> * <nat:9> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:7> ; <var:U> := <var:v3> <var:U> := <var:U> + <var:v2> <var:U> := <var:U> + <var:v1> <var:U> := <var:U> + <var:v0> {{ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <nat:9> * <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <nat:9> * <var:m> /\ <var:v2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <nat:9> * <var:m> /\ <var:v2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:7> * <var:m> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <nat:9> * <var:m> /\ <var:v2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:v0> = <nat:8> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v1> = <nat:9> * <var:m> /\ <var:v0> = <nat:8> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:v0> = <nat:8> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 