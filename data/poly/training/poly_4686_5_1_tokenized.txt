\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:s> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:H> := <var:Y1> <var:H> := <var:H> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:s> = <var:E> $ for all positive integer coefficients $ <var:E> $ ahead of running this set of commands , it must be that $ <var:H> = <nat:5> \cdot <var:E> + <nat:8> $ after list of commands terminates . \end{theorem} \begin{proof} Proving correctness for our set of commands can be demonstrated by the below decorated program . \begin{eqnarray} \{ <var:s> = <var:E> \} \\ <var:Y1> := <var:s> ; \\ \{ <var:s> = <var:E> \land <var:Y1> = <var:E> \} \\ <var:Y0> := <nat:8> ; \\ \{ <var:s> = <var:E> \land <var:Y1> = <var:E> \land <var:Y0> = <nat:8> \} \\ <var:Y1> := <var:Y1> * <nat:5> ; \\ \{ <var:s> = <var:E> \land <var:Y1> = <nat:5> * <var:E> \land <var:Y0> = <nat:8> \} \\ <var:H> := <var:Y1> \\ \{ <var:s> = <var:E> \land <var:Y0> = <nat:8> \land <var:H> = <nat:5> * <var:E> \} \\ <var:H> := <var:H> + <var:Y0> \\ \{ <var:s> = <var:E> \land <var:H> = <nat:5> * <var:E> + <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:s> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:H> := <var:Y1> <var:H> := <var:H> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:s> = <var:E> }} <def:poly> {{ <var:H> = <nat:5> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:Y1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:Y1> = <var:E> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:Y1> = <nat:5> * <var:E> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:Y0> = <nat:8> /\ <var:H> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:H> = <nat:5> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 