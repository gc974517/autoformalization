\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:5> ; <var:S> := <var:I0> \end{verbatim} Assume that $ <var:w> = <var:P> $ prior to the execution of this list of instructions it must be that we have $ <var:S> = <nat:5> $ once series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:P> \} \\ <var:I0> := <nat:5> ; \\ \{ <var:w> = <var:P> \land <var:I0> = <nat:5> \} \\ <var:S> := <var:I0> \\ \{ <var:w> = <var:P> \land <var:S> = <nat:5> \} \end{eqnarray} Using standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:w> = <var:P> }} <var:I0> := <nat:5> ; <var:S> := <var:I0> {{ <var:S> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:S> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 