\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:u1> := <var:K> ; <var:u2> := <var:u1> * <var:K> ; <var:u3> := <var:u2> * <var:K> ; <var:u0> := <nat:8> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:7> ; <var:u3> := <var:u3> * <nat:1> ; <var:s> := <var:u3> <var:s> := <var:s> + <var:u2> <var:s> := <var:s> + <var:u1> <var:s> := <var:s> + <var:u0> \end{verbatim} Given that $ <var:K> = <var:G> $ prior to running this set of commands it follows that we see $ <var:s> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> + <nat:6> \cdot <var:G> + <nat:8> $ when list of commands has terminated . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:K> = <var:G> \} \\ <var:u1> := <var:K> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <var:G> \} \end{eqnarray} Advancing interpreting this set of instructions results in : \begin{eqnarray} <var:u2> := <var:u1> * <var:K> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:K> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \} \\ <var:u0> := <nat:8> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:8> \} \\ <var:u1> := <var:u1> * <nat:6> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <nat:6> * <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:8> \} \end{eqnarray} Advancing the execution of the code gives us : \begin{eqnarray} <var:u2> := <var:u2> * <nat:7> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <nat:6> * <var:G> \land <var:u2> = <nat:7> * <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:8> \} \\ <var:u3> := <var:u3> * <nat:1> ; \\ \{ <var:K> = <var:G> \land <var:u1> = <nat:6> * <var:G> \land <var:u2> = <nat:7> * <var:G> ^ <nat:2> \land <var:u3> = <nat:1> * <var:G> ^ <nat:3> \land <var:u0> = <nat:8> \} \\ <var:s> := <var:u3> \\ \{ <var:K> = <var:G> \land <var:u1> = <nat:6> * <var:G> \land <var:u2> = <nat:7> * <var:G> ^ <nat:2> \land <var:u0> = <nat:8> \land <var:s> = <nat:1> * <var:G> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:u2> \\ \{ <var:K> = <var:G> \land <var:u1> = <nat:6> * <var:G> \land <var:u0> = <nat:8> \land <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:u1> \\ \{ <var:K> = <var:G> \land <var:u0> = <nat:8> \land <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:6> * <var:G> \} \\ <var:s> := <var:s> + <var:u0> \\ \{ <var:K> = <var:G> \land <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:8> \} \end{eqnarray} Hence , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:K> = <var:G> }} <var:u1> := <var:K> ; <var:u2> := <var:u1> * <var:K> ; <var:u3> := <var:u2> * <var:K> ; <var:u0> := <nat:8> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:7> ; <var:u3> := <var:u3> * <nat:1> ; <var:s> := <var:u3> <var:s> := <var:s> + <var:u2> <var:s> := <var:s> + <var:u1> <var:s> := <var:s> + <var:u0> {{ <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <var:G> /\ <var:u2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <var:G> /\ <var:u2> = <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <var:G> /\ <var:u2> = <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <nat:6> * <var:G> /\ <var:u2> = <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <nat:6> * <var:G> /\ <var:u2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <nat:6> * <var:G> /\ <var:u2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:G> ^ <nat:3> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <nat:6> * <var:G> /\ <var:u2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:u0> = <nat:8> /\ <var:s> = <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u1> = <nat:6> * <var:G> /\ <var:u0> = <nat:8> /\ <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:u0> = <nat:8> /\ <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:s> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 