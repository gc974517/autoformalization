\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:8> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:M> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:M> ; <var:R2> := <var:R2> * <var:M> ; <var:Q> := <var:R2> ; <var:Q> := <var:Q> + <var:R1> ; <var:Q> := <var:Q> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assume that we have $ <var:M> = <var:h> $ prior to running our set of instructions it must be that $ <var:Q> = <nat:1> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> + <nat:8> $ when code terminates . \end{theorem} \begin{proof} Demonstrating correctness of the code is done using typical Hoare reasoning . Moving forward to the following command contained in our series of instructions , we see the binding command giving $ <nat:8> $ to $ <var:R0>$ . This statement moves $ \{ <var:M> = <var:h> \} $ into the condition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \} $ . This is rigorously given with the assignment rule obtained from Hoare techniques . Looking at the subsequent piece of code in the set of commands , the variable binding code \verb | <var:R1> := <nat:5> ; | . This takes $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \} $ into the postcondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \} $ . Moving on , the environment update line assigning $ <var:R1> * <var:M> $ toward $ <var:R1>$ . This transfers $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \} $ to $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \} $ . Taking another step toward the next line seen in our list of instructions , we see the variable update line \verb | <var:R2> := <nat:1> ; | . This redefines $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \} $ to the postcondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R2> = <nat:1> \} $ . Moving onward , we see the assignment line yielding $ <var:R2> * <var:M> $ as $ <var:R2>$ . This takes $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R2> = <nat:1> \} $ to the condition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R2> = <nat:1> \cdot <var:h> \} $ . This is known to be sound using the assignment inference rule obtained from standard Hoare techniques . Advancing on , the assignment code \verb | <var:R2> := <var:R2> * <var:M> ; | . This transfers the precondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R2> = <nat:1> \cdot <var:h> \} $ toward the postcondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R2> = <nat:1> \cdot <var:h> ^ <nat:2> \} $ . Focusing on the proceeding bit of code found in our code , we have the assignment command assigning $ <var:R2> $ toward $ <var:Q>$ . This forwards the precondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R2> = <nat:1> \cdot <var:h> ^ <nat:2> \} $ toward $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:Q> = <nat:1> \cdot <var:h> ^ <nat:2> \} $ . Considering the proceeding statement found in the list of instructions , we have the environment update code \verb | <var:Q> := <var:Q> + <var:R1> ; | . This line takes the precondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:Q> = <nat:1> \cdot <var:h> ^ <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:Q> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:5> \cdot <var:h> \} $ . Advancing to the upcoming command contained in our code segment , we see the variable binding command \verb | <var:Q> := <var:Q> + <var:R0> | . This advances $ \{ <var:M> = <var:h> \land <var:R0> = <nat:8> \land <var:Q> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:5> \cdot <var:h> \} $ toward $ \{ <var:M> = <var:h> \land <var:Q> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:5> \cdot <var:h> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:M> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:M> ; <var:R2> := <var:R2> * <var:M> ; <var:Q> := <var:R2> ; <var:Q> := <var:Q> + <var:R1> ; <var:Q> := <var:Q> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:M> = <var:h> }} <def:poly> {{ <var:Q> = <nat:1> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R2> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R2> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:5> * <var:h> /\ <var:Q> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:R0> = <nat:8> /\ <var:Q> = <nat:1> * <var:h> ^ <nat:2> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:Q> = <nat:1> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 