\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:3> ; <var:G> := <var:E0> \end{verbatim} Assume , given any positive integers $ <var:l> $ , that we have $ <var:P> = <var:l> $ prior to the evaluation of the series of instructions , it follows that we have $ <var:G> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be demonstrated through usual Hoare logic . Immediately following , we see the assignment statement giving $ <nat:3> $ toward $ <var:E0>$ . This takes the condition $ \{ <var:P> = <var:l> \} $ as $ \{ <var:P> = <var:l> \land <var:E0> = <nat:3> \} $ . Considering the next command in the code segment , we see the environment update command \verb | <var:G> := <var:E0> | . This transfers $ \{ <var:P> = <var:l> \land <var:E0> = <nat:3> \} $ into $ \{ <var:P> = <var:l> \land <var:G> = <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:P> = <var:l> }} <var:E0> := <nat:3> ; <var:G> := <var:E0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 