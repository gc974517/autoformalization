\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:9> ; <var:T> := <var:i0> \end{verbatim} Given letting $ <var:x> \in \mathbb{Z}^+ $ $ <var:k> = <var:x> $ before the execution of our series of commands it follows that we have $ <var:T> = <nat:9> $ . \end{theorem} \begin{proof} The proof of the code segment can be accomplished through Hoare reasoning . Next , \begin{verbatim} { <var:k> = <var:x> } <var:i0> := <nat:9> { <var:k> = <var:x> \land <var:i0> = <nat:9> } { <var:k> = <var:x> \land <var:i0> = <nat:9> } <var:T> := <var:i0{ <var:k> = <var:x> \land <var:T> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:k> = <var:x> }} <var:i0> := <nat:9> ; <var:T> := <var:i0> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 