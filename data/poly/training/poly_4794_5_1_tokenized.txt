\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:J1> := <var:W> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:2> ; <var:O> := <var:J1> <var:O> := <var:O> + <var:J0> \end{verbatim} Assuming ( assuming some $ <var:p> \in \mathbb{N} $ ) $ <var:W> = <var:p> $ prior to executing the code segment , it must be that we see $ <var:O> = <nat:2> * <var:p> + <nat:8> $ once list of instructions has exited . \end{theorem} \begin{proof} The argument for this segment of code can be shown by usual Hoare logic . Keeping momentum , we see the environment update line \verb | <var:J1> := <var:W> ; | . This command forwards the condition $ \{ <var:W> = <var:p> \} $ as the postcondition $ \{ <var:W> = <var:p> \land <var:J1> = <var:p> \} $ . Immediately after , the variable binding command assigning $ <nat:8> $ to $ <var:J0>$ . This forwards the condition $ \{ <var:W> = <var:p> \land <var:J1> = <var:p> \} $ into the postcondition $ \{ <var:W> = <var:p> \land <var:J1> = <var:p> \land <var:J0> = <nat:8> \} $ . Advancing to the next step , we see the variable update statement \verb | <var:J1> := <var:J1> * <nat:2> ; | . This advances the precondition $ \{ <var:W> = <var:p> \land <var:J1> = <var:p> \land <var:J0> = <nat:8> \} $ toward the postcondition $ \{ <var:W> = <var:p> \land <var:J1> = <nat:2> \times <var:p> \land <var:J0> = <nat:8> \} $ . This is known to be sound with the assignment inference rule obtained from Hoare logic . Moving forward , we see the binding command \verb | <var:O> := <var:J1> | . This command forwards the condition $ \{ <var:W> = <var:p> \land <var:J1> = <nat:2> \times <var:p> \land <var:J0> = <nat:8> \} $ as $ \{ <var:W> = <var:p> \land <var:J0> = <nat:8> \land <var:O> = <nat:2> \times <var:p> \} $ . Going to the next step , we have the variable binding command letting $ <var:O> + <var:J0$ as $ <var:O>$ . This moves the precondition $ \{ <var:W> = <var:p> \land <var:J0> = <nat:8> \land <var:O> = <nat:2> \times <var:p> \} $ to the postcondition $ \{ <var:W> = <var:p> \land <var:O> = <nat:2> \times <var:p> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:W> = <var:p> }} <var:J1> := <var:W> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:2> ; <var:O> := <var:J1> <var:O> := <var:O> + <var:J0> {{ <var:O> = <nat:2> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:J1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:J1> = <var:p> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:J1> = <nat:2> * <var:p> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:J0> = <nat:8> /\ <var:O> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:O> = <nat:2> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 