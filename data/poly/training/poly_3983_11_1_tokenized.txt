\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:b1> := <var:I> ; <var:b2> := <var:b1> * <var:I> ; <var:b3> := <var:b2> * <var:I> ; <var:b0> := <nat:8> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:4> ; <var:b3> := <var:b3> * <nat:1> ; <var:T> := <var:b3> <var:T> := <var:T> + <var:b2> <var:T> := <var:T> + <var:b1> <var:T> := <var:T> + <var:b0> \end{verbatim} Given that we have $ <var:I> = <var:L> $ before evaluating the code segment , it must be that we see $ <var:T> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:8> $ after series of instructions exits . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:I> = <var:L> \} \\ <var:b1> := <var:I> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <var:L> \} \\ <var:b2> := <var:b1> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b3> = <var:L> ^ <nat:3> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b3> = <var:L> ^ <nat:3> \land <var:b0> = <nat:8> \} \\ <var:b1> := <var:b1> * <nat:5> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <nat:5> \cdot <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b3> = <var:L> ^ <nat:3> \land <var:b0> = <nat:8> \} \\ <var:b2> := <var:b2> * <nat:4> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <nat:5> \cdot <var:L> \land <var:b2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:b3> = <var:L> ^ <nat:3> \land <var:b0> = <nat:8> \} \\ <var:b3> := <var:b3> * <nat:1> ; \\ \{ <var:I> = <var:L> \land <var:b1> = <nat:5> \cdot <var:L> \land <var:b2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:b3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:b0> = <nat:8> \} \\ <var:T> := <var:b3> \\ \{ <var:I> = <var:L> \land <var:b1> = <nat:5> \cdot <var:L> \land <var:b2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:b0> = <nat:8> \land <var:T> = <nat:1> \cdot <var:L> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:b2> \\ \{ <var:I> = <var:L> \land <var:b1> = <nat:5> \cdot <var:L> \land <var:b0> = <nat:8> \land <var:T> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:b1> \\ \{ <var:I> = <var:L> \land <var:b0> = <nat:8> \land <var:T> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:5> \cdot <var:L> \} \\ <var:T> := <var:T> + <var:b0> \\ \{ <var:I> = <var:L> \land <var:T> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:5> \cdot <var:L> + <nat:8> \} \end{eqnarray} As a result , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:I> = <var:L> }} <var:b1> := <var:I> ; <var:b2> := <var:b1> * <var:I> ; <var:b3> := <var:b2> * <var:I> ; <var:b0> := <nat:8> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:4> ; <var:b3> := <var:b3> * <nat:1> ; <var:T> := <var:b3> <var:T> := <var:T> + <var:b2> <var:T> := <var:T> + <var:b1> <var:T> := <var:T> + <var:b0> {{ <var:T> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> /\ <var:b3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> /\ <var:b3> = <var:L> ^ <nat:3> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <nat:5> * <var:L> /\ <var:b2> = <var:L> ^ <nat:2> /\ <var:b3> = <var:L> ^ <nat:3> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <nat:5> * <var:L> /\ <var:b2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:b3> = <var:L> ^ <nat:3> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <nat:5> * <var:L> /\ <var:b2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <nat:5> * <var:L> /\ <var:b2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:b0> = <nat:8> /\ <var:T> = <nat:1> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b1> = <nat:5> * <var:L> /\ <var:b0> = <nat:8> /\ <var:T> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:b0> = <nat:8> /\ <var:T> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:T> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 