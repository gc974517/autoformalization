\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:e> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:e> ; <var:M2> := <var:M2> * <var:e> ; <var:C> := <var:M2> ; <var:C> := <var:C> + <var:M1> ; <var:C> := <var:C> + <var:M0> \end{verbatim} Allowing it to be that $ <var:e> = <var:U> $ before the evaluation of this set of instructions , it follows that we see $ <var:C> = <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be seen using standard Hoare reasoning . Stepping through , we have \begin{verbatim} { <var:e> = <var:U> } <var:M0> := <nat:4> { <var:e> = <var:U> \land <var:M0> = <nat:4> } \end{verbatim} Moving forward to the following lines of codefound in the list of instructions , we see \begin{verbatim} { <var:e> = <var:U> } <var:M0> := <nat:4> { <var:e> = <var:U> \land <var:M0> = <nat:4> } { <var:e> = <var:U> \land <var:M0> = <nat:4> } <var:M1> := <nat:5> { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> } { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> } <var:M1> := <var:M1> * <var:e> { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> } { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> } <var:M2> := <nat:2> { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:M2> = <nat:2> } { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:M2> = <nat:2> } <var:M2> := <var:M2> * <var:e> { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:M2> = <nat:2> \cdot <var:U> } { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:M2> = <nat:2> \cdot <var:U> } <var:M2> := <var:M2> * <var:e> { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:M2> = <nat:2> \cdot <var:U> ^ <nat:2> } { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:M2> = <nat:2> \cdot <var:U> ^ <nat:2> } <var:C> := <var:M2> { <var:e> = <var:U> \land <var:M0> = <nat:4> \land <var:M1> = <nat:5> \cdot <var:U> \land <var:C> = <nat:2> \cdot <var:U> ^ <nat:2> } \end{verbatim} After , \begin{verbatim} { <var:e> = <var:U> } <var:M0> := <nat:4> { <var:e> = <var:U> \land <var:M0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:e> = <var:U> }} <var:M0> := <nat:4> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:e> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:e> ; <var:M2> := <var:M2> * <var:e> ; <var:C> := <var:M2> ; <var:C> := <var:C> + <var:M1> ; <var:C> := <var:C> + <var:M0> {{ <var:C> = <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:5> * <var:U> /\ <var:M2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:5> * <var:U> /\ <var:M2> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:5> * <var:U> /\ <var:M2> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:5> * <var:U> /\ <var:C> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:M0> = <nat:4> /\ <var:C> = <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:C> = <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 