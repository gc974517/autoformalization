\begin{document} \begin{theorem} Let the following code segment : \begin{verbatim} <var:e> := <nat:2> ; <var:e> := <nat:3> + <var:e> * <var:f> \end{verbatim} Allow it to be that $ <var:f> = <var:G> $ prior to evaluating this list of instructions then $ <var:e> = <nat:2> \cdot <var:G> + <nat:3> $ after series of commands has finished . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be seen using Hoare reasoning . Considering the following statement contained in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:G> \} & <var:e> := <nat:2> & \{ <var:f> = <var:G> \land <var:e> = <nat:2> \} \end{tabular} This is guaranteed by the variable update law found in Hoare logic . Considering the upcoming statement in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:G> \} & <var:e> := <nat:2> & \{ <var:f> = <var:G> \land <var:e> = <nat:2> \} \end{tabular} This is known to be sound with the environment update inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:f> = <var:G> }} <var:e> := <nat:2> ; <var:e> := <nat:3> + <var:e> * <var:f> {{ <var:e> = <nat:2> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:e> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:e> = <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 