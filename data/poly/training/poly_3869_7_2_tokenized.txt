\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:y> := <nat:2> ; <var:y> := <nat:2> + <var:y> * <var:H> ; <var:y> := <var:y> * <var:H> ; <var:y> := <var:y> * <var:H> ; <var:y> := <nat:3> + <var:y> * <var:H> ; <var:y> := <nat:4> + <var:y> * <var:H> ; <var:y> := <nat:1> + <var:y> * <var:H> \end{verbatim} Assuming it to hold that $ <var:H> = <var:u> $ ahead of executing the set of commands , it follows that $ <var:y> = <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> $ when code has finished executing . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:H> = <var:u> \} \\ <var:y> := <nat:2> ; \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> \} \\ <var:y> := <nat:2> + <var:y> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> * <var:u> + <nat:2> \} \\ <var:y> := <var:y> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + \} \\ <var:y> := <var:y> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + \} \\ <var:y> := <nat:3> + <var:y> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:3> \} \\ <var:y> := <nat:4> + <var:y> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> + <nat:4> \} \\ <var:y> := <nat:1> + <var:y> * <var:H> \\ \{ <var:H> = <var:u> \land <var:y> = <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> \} \end{eqnarray} Allowing interpreting this code segment yields : \begin{eqnarray} \end{eqnarray} As a consequence , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:H> = <var:u> }} <var:y> := <nat:2> ; <var:y> := <nat:2> + <var:y> * <var:H> ; <var:y> := <var:y> * <var:H> ; <var:y> := <var:y> * <var:H> ; <var:y> := <nat:3> + <var:y> * <var:H> ; <var:y> := <nat:4> + <var:y> * <var:H> ; <var:y> := <nat:1> + <var:y> * <var:H> {{ <var:y> = <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:y> = <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 