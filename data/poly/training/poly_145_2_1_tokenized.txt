\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:2> ; <var:u> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:O> = <var:f> $ for integers $ <var:f> $ before interpreting this set of commands then $ <var:u> = <nat:2> $ when set of commands has exited . \end{theorem} \begin{proof} Proving correctness for our list of instructions can be done using the below decorated set of instructions . \begin{eqnarray} \{ <var:O> = <var:f> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:O> = <var:f> \land <var:C0> = <nat:2> \} \\ <var:u> := <var:C0> \\ \{ <var:O> = <var:f> \land <var:u> = <nat:2> \} \end{eqnarray} Continuing interpreting our code gives : \begin{eqnarray} \end{eqnarray} Using typical Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:u> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:O> = <var:f> }} <def:poly> {{ <var:u> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:u> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 