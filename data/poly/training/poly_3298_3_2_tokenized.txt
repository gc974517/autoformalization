\begin{document} \begin{theorem} Define a list of instructions as \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <nat:4> + <var:m> * <var:v> ; <var:m> := <nat:4> + <var:m> * <var:v> \end{verbatim} Assuming it to be that $ <var:v> = <var:O> $ prior to evaluating this series of instructions , it holds that we see $ <var:m> = <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> $ after series of commands is done . \end{theorem} \begin{proof} The argument for the code segment is demonstrated by Hoare techniques . Moving on , the variable binding line letting $ <nat:2> $ to $ <var:m>$ . This line redefines the condition $ \{ <var:v> = <var:O> \} $ to the condition $ \{ <var:v> = <var:O> \land <var:m> = <nat:2> \} $ . This is rigorously given with the assignment inference rule obtained from typical Hoare reasoning . Honing in on the proceeding command seen in the set of commands , we have the assignment code yielding $ <nat:4> + <var:m> * <var:v> $ toward $ <var:m>$ . This forwards $ \{ <var:v> = <var:O> \land <var:m> = <nat:2> \} $ into $ \{ <var:v> = <var:O> \land <var:m> = <nat:2> * <var:O> + <nat:4> \} $ . Moving forward to the upcoming piece of code contained in our code , we see the variable binding line yielding $ <nat:4> + <var:m> * <var:v$ toward $ <var:m>$ . This command redefines $ \{ <var:v> = <var:O> \land <var:m> = <nat:2> * <var:O> + <nat:4> \} $ to $ \{ <var:v> = <var:O> \land <var:m> = <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:v> = <var:O> }} <var:m> := <nat:2> ; <var:m> := <nat:4> + <var:m> * <var:v> ; <var:m> := <nat:4> + <var:m> * <var:v> {{ <var:m> = <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:m> = <nat:2> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:m> = <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 