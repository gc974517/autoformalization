\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:g> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:W> := <var:Y1> <var:W> := <var:W> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow , given any positive integers $ <var:G> $ , that $ <var:g> = <var:G> $ before evaluating our list of instructions , it holds that we see $ <var:W> = <nat:9> * <var:G> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands is given by usual Hoare logic . Observing the subsequent bit of code seen in our series of instructions , the variable binding statement \verb | <var:Y1> := <var:g> ; | . This advances the precondition $ \{ <var:g> = <var:G> \} $ to the condition $ \{ <var:g> = <var:G> \land <var:Y1> = <var:G> \} $ . Going to the next step , we see the variable update command \verb | <var:Y0> := <nat:4> ; | . This advances the condition $ \{ <var:g> = <var:G> \land <var:Y1> = <var:G> \} $ as the condition $ \{ <var:g> = <var:G> \land <var:Y1> = <var:G> \land <var:Y0> = <nat:4> \} $ . Jumping to the proceeding bit of code contained in our code , we have the variable binding statement defining $ <var:Y1> * <nat:9> $ toward $ <var:Y1>$ . This transfers the condition $ \{ <var:g> = <var:G> \land <var:Y1> = <var:G> \land <var:Y0> = <nat:4> \} $ into the postcondition $ \{ <var:g> = <var:G> \land <var:Y1> = <nat:9> * <var:G> \land <var:Y0> = <nat:4> \} $ . This is ensured by the assignment law found in Hoare reasoning . Taking another step toward the proceeding step seen in our set of instructions , the code \verb | <var:W> := <var:Y1> | . This redefines the condition $ \{ <var:g> = <var:G> \land <var:Y1> = <nat:9> * <var:G> \land <var:Y0> = <nat:4> \} $ to the condition $ \{ <var:g> = <var:G> \land <var:Y0> = <nat:4> \land <var:W> = <nat:9> * <var:G> \} $ . Advancing to the subsequent statement seen in our series of instructions , we have the environment update statement defining $ <var:W> + <var:Y0$ as $ <var:W>$ . This line forwards the condition $ \{ <var:g> = <var:G> \land <var:Y0> = <nat:4> \land <var:W> = <nat:9> * <var:G> \} $ toward the condition $ \{ <var:g> = <var:G> \land <var:W> = <nat:9> * <var:G> + <nat:4> \} $ . This is guaranteed using the assignment scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:g> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:W> := <var:Y1> <var:W> := <var:W> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:g> = <var:G> }} <def:poly> {{ <var:W> = <nat:9> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:G> /\ <var:Y1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:G> /\ <var:Y1> = <var:G> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:G> /\ <var:Y1> = <nat:9> * <var:G> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:G> /\ <var:Y0> = <nat:4> /\ <var:W> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:G> /\ <var:W> = <nat:9> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 