\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:4> ; <var:R> := <var:D0> \end{verbatim} Allowing it to be that $ <var:F> = <var:T> $ ahead of the execution of our list of instructions then we see $ <var:R> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be shown through usual Hoare techniques . Following , the variable assignmet command defining $ <nat:4> $ into $ <var:D0>$ . This moves the condition $ \{ <var:F> = <var:T> \} $ into $ \{ <var:F> = <var:T> \land <var:D0> = <nat:4> \} $ . Looking at the proceeding piece of code seen in our series of commands , we see the line \verb | <var:R> := <var:D0> | . This code transfers $ \{ <var:F> = <var:T> \land <var:D0> = <nat:4> \} $ into the postcondition $ \{ <var:F> = <var:T> \land <var:R> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:F> = <var:T> }} <var:D0> := <nat:4> ; <var:R> := <var:D0> {{ <var:R> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:R> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 