\begin{document} \begin{theorem} We define a program in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:8> ; <var:M> := <var:t0> \end{verbatim} Assuming that $ <var:k> = <var:w> $ ahead of evaluating our series of commands it must be that we have $ <var:M> = <nat:8> $ once segment of code has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is shown using usual Hoare logic . Taking another step toward the subsequent statements seen in the set of commands , we have \verb | { <var:k> = <var:w> } <var:t0> := <nat:8> { <var:k> = <var:w> \land <var:t0> = <nat:8> } | and \verb | { <var:k> = <var:w> \land <var:t0> = <nat:8> } <var:M> := <var:t0{ <var:k> = <var:w> \land <var:M> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:k> = <var:w> }} <var:t0> := <nat:8> ; <var:M> := <var:t0> {{ <var:M> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:M> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 