\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:5> ; <var:z> := <var:v0> \end{verbatim} Assuming that $ <var:W> = <var:B> $ ( taking positive integers $ <var:B> $ ) before interpreting the set of instructions it follows that $ <var:z> = <nat:5> $ after set of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:B> \} \\ <var:v0> := <nat:5> ; \\ \{ <var:W> = <var:B> \land <var:v0> = <nat:5> \} \\ <var:z> := <var:v0> \\ \{ <var:W> = <var:B> \land <var:z> = <nat:5> \} \end{eqnarray} Applying typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:W> = <var:B> }} <var:v0> := <nat:5> ; <var:z> := <var:v0> {{ <var:z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 