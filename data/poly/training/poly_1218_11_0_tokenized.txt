\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:L> := <var:Z3> ; <var:L> := <var:L> + <var:Z2> ; <var:L> := <var:L> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume for every $ <var:i> \in \mathbb{N} $ it to be that $ <var:O> = <var:i> $ prior to interpreting this list of instructions it holds that we see $ <var:L> = <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> $ once code segment terminates . \end{theorem} \begin{proof} The flow of logic for the set of commands can be accomplished by standard Hoare logic . Considering the next lines in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:i> \} & <var:Z0> := <nat:3> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \} & <var:Z2> := <nat:4> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> \} & <var:Z2> := <var:Z2> * <var:O> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> \} & <var:Z2> := <var:Z2> * <var:O> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> ^ <nat:2> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> ^ <nat:2> \} & <var:Z3> := <nat:2> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> ^ <nat:2> \land <var:Z3> = <nat:2> \} \end{tabular} Considering the next bits of codefound in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:i> \} & <var:Z0> := <nat:3> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \} & <var:Z2> := <nat:4> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> \} & <var:Z2> := <var:Z2> * <var:O> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> \} & <var:Z2> := <var:Z2> * <var:O> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> ^ <nat:2> \} \\ \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> ^ <nat:2> \} & <var:Z3> := <nat:2> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \land <var:Z2> = <nat:4> * <var:i> ^ <nat:2> \land <var:Z3> = <nat:2> \} \end{tabular} This is guaranteed through the variable update rule of usual Hoare techniques . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:i> \} & <var:Z0> := <nat:3> & \{ <var:O> = <var:i> \land <var:Z0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:3> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:L> := <var:Z3> ; <var:L> := <var:L> + <var:Z2> ; <var:L> := <var:L> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:O> = <var:i> }} <def:poly> {{ <var:L> = <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:Z3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:Z2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:L> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:Z0> = <nat:3> /\ <var:L> = <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:L> = <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 