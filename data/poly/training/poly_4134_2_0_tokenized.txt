\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:g0> := <nat:8> ; <var:F> := <var:g0> \end{verbatim} Assuming $ <var:A> = <var:Y> $ before running this series of commands it holds that we have $ <var:F> = <nat:8> $ once list of instructions executes . \end{theorem} \begin{proof} Applying standard Hoare reasoning produces : \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:A> = <var:Y> \land <var:g0> = <nat:8> \} \\ <var:F> := <var:g0> \\ \{ <var:A> = <var:Y> \land <var:F> = <nat:8> \} \end{eqnarray} Given the preceding argument , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <var:g0> := <nat:8> ; <var:F> := <var:g0> {{ <var:F> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:F> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 