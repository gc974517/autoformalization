\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:1> + <var:s> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:q> = <var:W> $ prior to evaluating this code segment , it follows that we have $ <var:s> = <nat:4> \times <var:W> + <nat:1> $ once set of commands has exited . \end{theorem} \begin{proof} Arguing the correctness of the program can be demonstrated through typical Hoare logic . Following , \[ \begin{tabular} {rcl} \{ <var:q> = <var:W> \} & <var:s> := <nat:4> & \{ <var:q> = <var:W> \land <var:s> = <nat:4> \} \\ \{ <var:q> = <var:W> \land <var:s> = <nat:4> \} & <var:s> := <nat:1> + <var:s> * <var:q& \{ <var:q> = <var:W> \land <var:s> = <nat:4> \times <var:W> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:4> ; <var:s> := <nat:1> + <var:s> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:q> = <var:W> }} <def:poly> {{ <var:s> = <nat:4> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:s> = <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 