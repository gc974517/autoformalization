\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:Y> ; <var:S2> := <var:S1> * <var:Y> ; <var:S3> := <var:S2> * <var:Y> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:1> ; <var:S2> := <var:S2> * <nat:5> ; <var:S3> := <var:S3> * <nat:2> ; <var:M> := <var:S3> <var:M> := <var:M> + <var:S2> <var:M> := <var:M> + <var:S1> <var:M> := <var:M> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:Y> = <var:m> $ for any positive integer coefficients $ <var:m> $ before the execution of our list of instructions , it holds that we see $ <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be shown using usual Hoare logic . Moving onward , the variable update command \verb | <var:S1> := <var:Y> ; | . This statement takes the condition $ \{ <var:Y> = <var:m> \} $ into $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \} $ . Shifting focus toward the proceeding command found in the list of instructions , the variable update line \verb | <var:S2> := <var:S1> * <var:Y> ; | . This command redefines $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \} $ to the postcondition $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \land <var:S2> = <var:m> ^ <nat:2> \} $ . Moving onward , the statement yielding $ <var:S2> * <var:Y> $ as $ <var:S3>$ . This command takes $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \land <var:S2> = <var:m> ^ <nat:2> \} $ to the postcondition $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \land <var:S2> = <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \} $ . Advancing on , we see the variable assignmet code defining $ <nat:8> $ as $ <var:S0>$ . This line moves the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \land <var:S2> = <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \} $ as $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \land <var:S2> = <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ . Advancing on , the variable update statement \verb | <var:S1> := <var:S1> * <nat:1> ; | . This transfers the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <var:m> \land <var:S2> = <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ toward the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ . Taking a look at the next line seen in the list of instructions , the variable binding statement \verb | <var:S2> := <var:S2> * <nat:5> ; | . This forwards the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ to the postcondition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ . This is shown to be logically sound using the assignment scheme defined by typical Hoare techniques . Moving forward to the next command contained in the set of commands , we have the variable binding statement \verb | <var:S3> := <var:S3> * <nat:2> ; | . This redefines $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:S3> = <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ into the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:S3> = <nat:2> \times <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ . Advancing to the subsequent line contained in the code segment , the variable update line \verb | <var:M> := <var:S3> | . This statement advances the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:S3> = <nat:2> \times <var:m> ^ <nat:3> \land <var:S0> = <nat:8> \} $ to the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:S0> = <nat:8> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> \} $ . Taking a look at the proceeding line seen in our program , we have the binding code defining $ <var:M> + <var:S2$ to $ <var:M>$ . This redefines the condition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:S0> = <nat:8> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> \} $ as the postcondition $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S0> = <nat:8> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> \} $ . Moving forward to the next piece of code found in the series of commands , we see the binding code \verb | <var:M> := <var:M> + <var:S1> | . This takes $ \{ <var:Y> = <var:m> \land <var:S1> = <nat:1> \times <var:m> \land <var:S0> = <nat:8> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> \} $ to the postcondition $ \{ <var:Y> = <var:m> \land <var:S0> = <nat:8> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> \} $ . Advancing to the upcoming statement found in the program , the variable binding code giving $ <var:M> + <var:S0$ into $ <var:M>$ . This line advances the precondition $ \{ <var:Y> = <var:m> \land <var:S0> = <nat:8> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> \} $ into the condition $ \{ <var:Y> = <var:m> \land <var:M> = <nat:2> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:8> \} $ . This is shown through the assignment scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S1> := <var:Y> ; <var:S2> := <var:S1> * <var:Y> ; <var:S3> := <var:S2> * <var:Y> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:1> ; <var:S2> := <var:S2> * <nat:5> ; <var:S3> := <var:S3> * <nat:2> ; <var:M> := <var:S3> <var:M> := <var:M> + <var:S2> <var:M> := <var:M> + <var:S1> <var:M> := <var:M> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Y> = <var:m> }} <def:poly> {{ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <var:m> /\ <var:S2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <var:m> /\ <var:S2> = <var:m> ^ <nat:2> /\ <var:S3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <var:m> /\ <var:S2> = <var:m> ^ <nat:2> /\ <var:S3> = <var:m> ^ <nat:3> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <nat:1> * <var:m> /\ <var:S2> = <var:m> ^ <nat:2> /\ <var:S3> = <var:m> ^ <nat:3> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <nat:1> * <var:m> /\ <var:S2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:S3> = <var:m> ^ <nat:3> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <nat:1> * <var:m> /\ <var:S2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:m> ^ <nat:3> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <nat:1> * <var:m> /\ <var:S2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:S0> = <nat:8> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S1> = <nat:1> * <var:m> /\ <var:S0> = <nat:8> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:S0> = <nat:8> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 