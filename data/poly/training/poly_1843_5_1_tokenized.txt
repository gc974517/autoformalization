\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:w> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:1> ; <var:e> := <var:F1> <var:e> := <var:e> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:w> = <var:z> $ before the execution of our series of instructions , it holds that we have $ <var:e> = <nat:1> \cdot <var:z> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the program can be seen through usual Hoare techniques . Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:w> = <var:z> \} & <var:F1> := <var:w> & \{ <var:w> = <var:z> \land <var:F1> = <var:z> \} \end{tabular} This is given by the environment update rule of typical Hoare logic . Honing in on the proceeding step in our list of instructions , \[ \begin{tabular} {rcl} \{ <var:w> = <var:z> \} & <var:F1> := <var:w> & \{ <var:w> = <var:z> \land <var:F1> = <var:z> \} \end{tabular} Advancing to the following commands contained in the code , \[ \begin{tabular} {rcl} \{ <var:w> = <var:z> \} & <var:F1> := <var:w> & \{ <var:w> = <var:z> \land <var:F1> = <var:z> \} \\ \{ <var:w> = <var:z> \land <var:F1> = <var:z> \} & <var:F0> := <nat:9> & \{ <var:w> = <var:z> \land <var:F1> = <var:z> \land <var:F0> = <nat:9> \} \end{tabular} Going forward , we have \[ \begin{tabular} {rcl} \{ <var:w> = <var:z> \} & <var:F1> := <var:w> & \{ <var:w> = <var:z> \land <var:F1> = <var:z> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:w> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:1> ; <var:e> := <var:F1> <var:e> := <var:e> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <def:poly> {{ <var:e> = <nat:1> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:F1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:F1> = <var:z> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:F1> = <nat:1> * <var:z> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:F0> = <nat:9> /\ <var:e> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:e> = <nat:1> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 