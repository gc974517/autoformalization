\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <nat:1> + <var:L> * <var:V> ; <var:L> := <nat:3> + <var:L> * <var:V> ; <var:L> := <nat:4> + <var:L> * <var:V> ; <var:L> := <nat:3> + <var:L> * <var:V> ; <var:L> := <nat:1> + <var:L> * <var:V> ; <var:L> := <nat:2> + <var:L> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:V> = <var:n> $ before the execution of our list of instructions , it follows that we have $ <var:L> = <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is demonstrated using Hoare reasoning . After , \begin{verbatim} { <var:V> = <var:n> } <var:L> := <nat:1> { <var:V> = <var:n> \land <var:L> = <nat:1> } { <var:V> = <var:n> \land <var:L> = <nat:1> } <var:L> := <nat:1> + <var:L> * <var:V> { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> + <nat:1> } { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> + <nat:1> } <var:L> := <nat:3> + <var:L> * <var:V> { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:3> } { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:3> } <var:L> := <nat:4> + <var:L> * <var:V> { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:4> } { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:4> } <var:L> := <nat:3> + <var:L> * <var:V> { <var:V> = <var:n> \land <var:L> = <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:3> } \end{verbatim} This is shown to be logically sound through the binding law defined in usual Hoare techniques . Paying attention to the upcoming bit of code found in our series of commands , we see \begin{verbatim} { <var:V> = <var:n> } <var:L> := <nat:1> { <var:V> = <var:n> \land <var:L> = <nat:1> } \end{verbatim} This is shown to be logically sound by the assignment scheme defined by usual Hoare techniques . Observing the next piece of code contained in the series of instructions , we have \begin{verbatim} { <var:V> = <var:n> } <var:L> := <nat:1> { <var:V> = <var:n> \land <var:L> = <nat:1> } \end{verbatim} This is guaranteed using the law given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:1> ; <var:L> := <nat:1> + <var:L> * <var:V> ; <var:L> := <nat:3> + <var:L> * <var:V> ; <var:L> := <nat:4> + <var:L> * <var:V> ; <var:L> := <nat:3> + <var:L> * <var:V> ; <var:L> := <nat:1> + <var:L> * <var:V> ; <var:L> := <nat:2> + <var:L> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <def:poly> {{ <var:L> = <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:L> = <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 