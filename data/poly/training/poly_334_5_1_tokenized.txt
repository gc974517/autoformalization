\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:O1> := <var:n> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:1> ; <var:u> := <var:O1> <var:u> := <var:u> + <var:O0> \end{verbatim} Allow $ <var:n> = <var:y> $ --- given natural numbers $ <var:y> $ --- ahead of interpreting our code segment , it follows that we see $ <var:u> = <nat:1> * <var:y> + <nat:4> $ after series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:y> \} \\ <var:O1> := <var:n> ; \\ \{ <var:n> = <var:y> \land <var:O1> = <var:y> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:n> = <var:y> \land <var:O1> = <var:y> \land <var:O0> = <nat:4> \} \\ <var:O1> := <var:O1> * <nat:1> ; \\ \{ <var:n> = <var:y> \land <var:O1> = <nat:1> \times <var:y> \land <var:O0> = <nat:4> \} \\ <var:u> := <var:O1> \\ \{ <var:n> = <var:y> \land <var:O0> = <nat:4> \land <var:u> = <nat:1> \times <var:y> \} \\ <var:u> := <var:u> + <var:O0> \\ \{ <var:n> = <var:y> \land <var:u> = <nat:1> \times <var:y> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:n> = <var:y> }} <var:O1> := <var:n> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:1> ; <var:u> := <var:O1> <var:u> := <var:u> + <var:O0> {{ <var:u> = <nat:1> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:O1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:O1> = <var:y> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:O1> = <nat:1> * <var:y> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:O0> = <nat:4> /\ <var:u> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:u> = <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 