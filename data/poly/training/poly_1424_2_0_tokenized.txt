\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:2> ; <var:L> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:M> = <var:u> $ ahead of running the program it holds that we see $ <var:L> = <nat:2> $ once code segment executes . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:M> = <var:u> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:M> = <var:u> \land <var:V0> = <nat:2> \} \\ <var:L> := <var:V0> \\ \{ <var:M> = <var:u> \land <var:L> = <nat:2> \} \end{eqnarray} Therefore , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:2> ; <var:L> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:M> = <var:u> }} <def:poly> {{ <var:L> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:L> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 