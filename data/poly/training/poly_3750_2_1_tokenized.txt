\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:1> ; <var:i> := <var:V0> \end{verbatim} Given $ <var:T> = <var:C> $ ahead of the execution of this set of commands , it follows that we have $ <var:i> = <nat:1> $ once list of commands has terminated . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:T> = <var:C> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:T> = <var:C> \land <var:V0> = <nat:1> \} \\ <var:i> := <var:V0> \\ \{ <var:T> = <var:C> \land <var:i> = <nat:1> \} \end{eqnarray} As a consequence , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:T> = <var:C> }} <var:V0> := <nat:1> ; <var:i> := <var:V0> {{ <var:i> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:i> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 