\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:9> ; <var:V> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:s> = <var:u> $ ahead of the execution of our set of instructions it follows that we see $ <var:V> = <nat:9> $ after code segment has executed . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be given with typical Hoare reasoning . Advancing on , we have the variable update statement defining $ <nat:9> $ to $ <var:x0>$ . This statement redefines $ \{ <var:s> = <var:u> \} $ into $ \{ <var:s> = <var:u> \land <var:x0> = <nat:9> \} $ . This is rigorously given by the assignment law of usual Hoare techniques . Immediately after , we have the variable update line giving $ <var:x0$ toward $ <var:V>$ . This code forwards the precondition $ \{ <var:s> = <var:u> \land <var:x0> = <nat:9> \} $ toward the postcondition $ \{ <var:s> = <var:u> \land <var:V> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:9> ; <var:V> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:s> = <var:u> }} <def:poly> {{ <var:V> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:V> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 