\begin{document} \begin{theorem} We define a segment of code : \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:D> ; <var:g> := <var:q1> ; <var:g> := <var:g> + <var:q0> \end{verbatim} Assume that $ <var:D> = <var:c> $ --- letting whole numbers $ <var:c> $ --- prior to the evaluation of our segment of code it must be that we have $ <var:g> = <nat:9> \times <var:c> + <nat:3> $ when list of commands is done . \end{theorem} \begin{proof} Proving correctness for our list of commands is given through standard Hoare techniques . After , \[ \begin{tabular} {rcl} \{ <var:D> = <var:c> \} & <var:q0> := <nat:3> & \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \} \\ \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \} & <var:q1> := <nat:9> & \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \land <var:q1> = <nat:9> \} \\ \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \land <var:q1> = <nat:9> \} & <var:q1> := <var:q1> * <var:D> & \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \land <var:q1> = <nat:9> \times <var:c> \} \\ \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \land <var:q1> = <nat:9> \times <var:c> \} & <var:g> := <var:q1> & \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \land <var:g> = <nat:9> \times <var:c> \} \end{tabular} Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:c> \} & <var:q0> := <nat:3> & \{ <var:D> = <var:c> \land <var:q0> = <nat:3> \} \end{tabular} This is shown through the assignment rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:D> = <var:c> }} <var:q0> := <nat:3> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:D> ; <var:g> := <var:q1> ; <var:g> := <var:g> + <var:q0> {{ <var:g> = <nat:9> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:q0> = <nat:3> /\ <var:g> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:g> = <nat:9> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 