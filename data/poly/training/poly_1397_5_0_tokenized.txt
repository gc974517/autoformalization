\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:9> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:O> ; <var:z> := <var:d1> ; <var:z> := <var:z> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:O> = <var:u> $ ahead of running our program , it must be that we see $ <var:z> = <nat:3> * <var:u> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be accomplished with standard Hoare logic . Moving on to the next commands seen in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:u> \} & <var:d0> := <nat:9> & \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \} \\ \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \} & <var:d1> := <nat:3> & \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \land <var:d1> = <nat:3> \} \\ \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \land <var:d1> = <nat:3> \} & <var:d1> := <var:d1> * <var:O> & \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \land <var:d1> = <nat:3> \times <var:u> \} \\ \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \land <var:d1> = <nat:3> \times <var:u> \} & <var:z> := <var:d1> & \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \land <var:z> = <nat:3> \times <var:u> \} \\ \{ <var:O> = <var:u> \land <var:d0> = <nat:9> \land <var:z> = <nat:3> \times <var:u> \} & <var:z> := <var:z> + <var:d0& \{ <var:O> = <var:u> \land <var:z> = <nat:3> \times <var:u> + <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:9> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:O> ; <var:z> := <var:d1> ; <var:z> := <var:z> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:O> = <var:u> }} <def:poly> {{ <var:z> = <nat:3> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:d0> = <nat:9> /\ <var:z> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:u> /\ <var:z> = <nat:3> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 