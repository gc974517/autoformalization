\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:g1> := <var:U> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:9> ; <var:j> := <var:g1> <var:j> := <var:j> + <var:g0> \end{verbatim} Assume , given every positive coefficients $ <var:r> $ , that we have $ <var:U> = <var:r> $ before evaluating this list of commands , then we see $ <var:j> = <nat:9> \cdot <var:r> + <nat:4> $ when set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:r> \} \\ <var:g1> := <var:U> ; \\ \{ <var:U> = <var:r> \land <var:g1> = <var:r> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:U> = <var:r> \land <var:g1> = <var:r> \land <var:g0> = <nat:4> \} \\ <var:g1> := <var:g1> * <nat:9> ; \\ \{ <var:U> = <var:r> \land <var:g1> = <nat:9> \times <var:r> \land <var:g0> = <nat:4> \} \\ <var:j> := <var:g1> \\ \{ <var:U> = <var:r> \land <var:g0> = <nat:4> \land <var:j> = <nat:9> \times <var:r> \} \\ <var:j> := <var:j> + <var:g0> \\ \{ <var:U> = <var:r> \land <var:j> = <nat:9> \times <var:r> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <var:g1> := <var:U> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:9> ; <var:j> := <var:g1> <var:j> := <var:j> + <var:g0> {{ <var:j> = <nat:9> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:g1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:g1> = <var:r> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:g0> = <nat:4> /\ <var:j> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:j> = <nat:9> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 