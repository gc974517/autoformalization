\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:L> ; <var:r2> := <var:r1> * <var:L> ; <var:r3> := <var:r2> * <var:L> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:6> ; <var:r3> := <var:r3> * <nat:4> ; <var:h> := <var:r3> <var:h> := <var:h> + <var:r2> <var:h> := <var:h> + <var:r1> <var:h> := <var:h> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:L> = <var:T> $ --- letting $ <var:T> \in \mathbb{N} $ --- prior to evaluating our set of instructions , it follows that $ <var:h> = <nat:4> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:5> $ after set of instructions finishes . \end{theorem} \begin{proof} The course of logic for the program is done through typical Hoare logic . Shifting focus toward the proceeding line found in the program , we have the variable binding line giving $ <var:L> $ into $ <var:r1>$ . This advances the precondition $ \{ <var:L> = <var:T> \} $ to the condition $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \} $ . Taking another step toward the following bit of code in our code segment , we have the assignment command assigning $ <var:r1> * <var:L> $ toward $ <var:r2>$ . This advances the condition $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \} $ to the condition $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \land <var:r2> = <var:T> ^ <nat:2> \} $ . This is ensured by the assignment inference rule found in Hoare reasoning . Observing the next line contained in our list of commands , we have the binding line \verb | <var:r3> := <var:r2> * <var:L> ; | . This command forwards $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \land <var:r2> = <var:T> ^ <nat:2> \} $ as the condition $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \land <var:r2> = <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \} $ . This is shown by the assignment law given by usual Hoare reasoning . Moving on to the following bit of code in our segment of code , we have the assignment command \verb | <var:r0> := <nat:5> ; | . This moves the condition $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \land <var:r2> = <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \} $ as the postcondition $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \land <var:r2> = <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ . This is rigorously given using the assignment inference rule of Hoare logic . Taking another step toward the proceeding statement found in the segment of code , the variable binding command \verb | <var:r1> := <var:r1> * <nat:3> ; | . This takes $ \{ <var:L> = <var:T> \land <var:r1> = <var:T> \land <var:r2> = <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ into $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ . Moving forward to the subsequent bit of code in the series of instructions , we see the variable binding statement \verb | <var:r2> := <var:r2> * <nat:6> ; | . This redefines $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ toward $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <nat:6> \cdot <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ . This is guaranteed with the assignment law from Hoare reasoning . Stepping through , the line yielding $ <var:r3> * <nat:4> $ as $ <var:r3>$ . This statement advances the condition $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <nat:6> \cdot <var:T> ^ <nat:2> \land <var:r3> = <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ toward the condition $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <nat:6> \cdot <var:T> ^ <nat:2> \land <var:r3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ . Paying attention to the next piece of code in our list of commands , the variable binding code \verb | <var:h> := <var:r3> | . This statement takes the condition $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <nat:6> \cdot <var:T> ^ <nat:2> \land <var:r3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:r0> = <nat:5> \} $ into the postcondition $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <nat:6> \cdot <var:T> ^ <nat:2> \land <var:r0> = <nat:5> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> \} $ . Taking another step toward the subsequent bit of code found in the series of commands , we see the variable update code giving $ <var:h> + <var:r2$ toward $ <var:h>$ . This code takes $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r2> = <nat:6> \cdot <var:T> ^ <nat:2> \land <var:r0> = <nat:5> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> \} $ as the postcondition $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r0> = <nat:5> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:6> \cdot <var:T> ^ <nat:2> \} $ . Stepping forward , the binding line binding $ <var:h> + <var:r1$ toward $ <var:h>$ . This transfers the precondition $ \{ <var:L> = <var:T> \land <var:r1> = <nat:3> \cdot <var:T> \land <var:r0> = <nat:5> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:6> \cdot <var:T> ^ <nat:2> \} $ as the postcondition $ \{ <var:L> = <var:T> \land <var:r0> = <nat:5> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:6> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> \} $ . Immediately following , we have the variable assignmet line \verb | <var:h> := <var:h> + <var:r0> | . This statement forwards $ \{ <var:L> = <var:T> \land <var:r0> = <nat:5> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:6> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> \} $ to $ \{ <var:L> = <var:T> \land <var:h> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:6> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:5> \} $ . This is shown by the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:L> ; <var:r2> := <var:r1> * <var:L> ; <var:r3> := <var:r2> * <var:L> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:6> ; <var:r3> := <var:r3> * <nat:4> ; <var:h> := <var:r3> <var:h> := <var:h> + <var:r2> <var:h> := <var:h> + <var:r1> <var:h> := <var:h> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:L> = <var:T> }} <def:poly> {{ <var:h> = <nat:4> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <var:T> /\ <var:r2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <var:T> /\ <var:r2> = <var:T> ^ <nat:2> /\ <var:r3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <var:T> /\ <var:r2> = <var:T> ^ <nat:2> /\ <var:r3> = <var:T> ^ <nat:3> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <nat:3> * <var:T> /\ <var:r2> = <var:T> ^ <nat:2> /\ <var:r3> = <var:T> ^ <nat:3> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <nat:3> * <var:T> /\ <var:r2> = <nat:6> * <var:T> ^ <nat:2> /\ <var:r3> = <var:T> ^ <nat:3> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <nat:3> * <var:T> /\ <var:r2> = <nat:6> * <var:T> ^ <nat:2> /\ <var:r3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <nat:3> * <var:T> /\ <var:r2> = <nat:6> * <var:T> ^ <nat:2> /\ <var:r0> = <nat:5> /\ <var:h> = <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r1> = <nat:3> * <var:T> /\ <var:r0> = <nat:5> /\ <var:h> = <nat:4> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:r0> = <nat:5> /\ <var:h> = <nat:4> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:h> = <nat:4> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 