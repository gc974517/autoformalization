\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:y1> := <var:j> ; <var:y2> := <var:y1> * <var:j> ; <var:y3> := <var:y2> * <var:j> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:6> ; <var:y2> := <var:y2> * <nat:2> ; <var:y3> := <var:y3> * <nat:1> ; <var:N> := <var:y3> <var:N> := <var:N> + <var:y2> <var:N> := <var:N> + <var:y1> <var:N> := <var:N> + <var:y0> \end{verbatim} Allow that $ <var:j> = <var:z> $ prior to the evaluation of the set of commands , it follows that we have $ <var:N> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:5> $ once series of commands executes . \end{theorem} \begin{proof} The proof of the set of instructions can be shown by usual Hoare reasoning . Observing the subsequent bit of code found in our segment of code , we see the variable assignmet command \verb | <var:y1> := <var:j> ; | . This command forwards the condition $ \{ <var:j> = <var:z> \} $ to the condition $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \} $ . Considering the following line of code in the set of commands , the variable binding command giving $ <var:y1> * <var:j> $ as $ <var:y2>$ . This command takes the condition $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \} $ toward the condition $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} $ . Honing in on the following line of code contained in our code , we have the binding code \verb | <var:y3> := <var:y2> * <var:j> ; | . This forwards the precondition $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} $ into the condition $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} $ . This is deduced through the assignment inference rule found in typical Hoare reasoning . Going forward , we have the environment update line assigning $ <nat:5> $ toward $ <var:y0>$ . This moves $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} $ into $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ . This is shown to be logically sound through the assignment law found in Hoare logic . Immediately following , the variable binding statement giving $ <var:y1> * <nat:6> $ into $ <var:y1>$ . This takes $ \{ <var:j> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ as $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ . This is shown to be logically sound through the assignment law in typical Hoare techniques . Moving forward , we see the variable assignmet line \verb | <var:y2> := <var:y2> * <nat:2> ; | . This statement advances $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ to $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ . Focusing on the subsequent line of code contained in the segment of code , we have the assignment code letting $ <var:y3> * <nat:1> $ to $ <var:y3>$ . This statement takes $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ into $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:y3> = <nat:1> \times <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ . This is guaranteed with the assignment scheme of standard Hoare techniques . Moving on to the next step , the variable assignmet code giving $ <var:y3$ into $ <var:N>$ . This moves the precondition $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:y3> = <nat:1> \times <var:z> ^ <nat:3> \land <var:y0> = <nat:5> \} $ as the condition $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:y0> = <nat:5> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> \} $ . This is given using the assignment inference rule of typical Hoare techniques . Going to the next step , we see the variable binding code \verb | <var:N> := <var:N> + <var:y2> | . This forwards the precondition $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:y0> = <nat:5> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> \} $ into $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y0> = <nat:5> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> \} $ . Now , the binding code \verb | <var:N> := <var:N> + <var:y1> | . This command advances $ \{ <var:j> = <var:z> \land <var:y1> = <nat:6> \times <var:z> \land <var:y0> = <nat:5> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> \} $ to $ \{ <var:j> = <var:z> \land <var:y0> = <nat:5> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> \} $ . This is guaranteed through the assignment rule defined in Hoare logic . Moving on to the next step , we see the variable binding code \verb | <var:N> := <var:N> + <var:y0> | . This statement forwards the precondition $ \{ <var:j> = <var:z> \land <var:y0> = <nat:5> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> \} $ into $ \{ <var:j> = <var:z> \land <var:N> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> + <nat:5> \} $ . This is deduced through the assignment scheme found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:j> = <var:z> }} <var:y1> := <var:j> ; <var:y2> := <var:y1> * <var:j> ; <var:y3> := <var:y2> * <var:j> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:6> ; <var:y2> := <var:y2> * <nat:2> ; <var:y3> := <var:y3> * <nat:1> ; <var:N> := <var:y3> <var:N> := <var:N> + <var:y2> <var:N> := <var:N> + <var:y1> <var:N> := <var:N> + <var:y0> {{ <var:N> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:y0> = <nat:5> /\ <var:N> = <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y0> = <nat:5> /\ <var:N> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:y0> = <nat:5> /\ <var:N> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:N> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 