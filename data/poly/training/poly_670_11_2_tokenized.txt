\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:3> + <var:F> * <var:I> ; <var:F> := <var:F> * <var:I> ; <var:F> := <var:F> * <var:I> ; <var:F> := <nat:4> + <var:F> * <var:I> ; <var:F> := <nat:2> + <var:F> * <var:I> ; <var:F> := <nat:1> + <var:F> * <var:I> ; <var:F> := <nat:2> + <var:F> * <var:I> ; <var:F> := <nat:4> + <var:F> * <var:I> ; <var:F> := <nat:3> + <var:F> * <var:I> ; <var:F> := <nat:2> + <var:F> * <var:I> \end{verbatim} Assuming $ <var:I> = <var:X> $ before the evaluation of our list of commands , it must be that we have $ <var:F> = <nat:1> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> $ once code has finished . \end{theorem} \begin{proof} The flow of logic for this segment of code can be given by usual Hoare techniques . Immediately after , we see the binding statement binding $ <nat:1> $ toward $ <var:F>$ . This statement takes the condition $ \{ <var:I> = <var:X> \} $ into $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \} $ . Moving on to the next step , the variable update command \verb | <var:F> := <nat:3> + <var:F> * <var:I> ; | . This takes $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \} $ into the postcondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> + <nat:3> \} $ . Moving on , the variable binding line assigning $ <var:F> * <var:I> $ to $ <var:F>$ . This transfers $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> + <nat:3> \} $ as $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + \} $ . Following , we see the assignment code \verb | <var:F> := <var:F> * <var:I> ; | . This statement moves the condition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + \} $ to the postcondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + \} $ . Considering the next bit of code seen in our series of instructions , the environment update statement giving $ <nat:4> + <var:F> * <var:I> $ into $ <var:F>$ . This forwards the condition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + \} $ as the condition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:4> \} $ . This is rigorously given by the assignment rule given in Hoare techniques . Honing in on the upcoming piece of code seen in our set of instructions , we see the variable update code \verb | <var:F> := <nat:2> + <var:F> * <var:I> ; | . This advances the precondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:4> \} $ into $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:5> + <nat:3> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> + <nat:2> \} $ . This is given using the assignment inference rule from usual Hoare logic . Next , we see the command yielding $ <nat:1> + <var:F> * <var:I> $ to $ <var:F>$ . This command transfers the condition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:5> + <nat:3> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> + <nat:2> \} $ into the postcondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:6> + <nat:3> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:1> \} $ . This is shown by the assignment rule defined by standard Hoare logic . Going forward , the binding line letting $ <nat:2> + <var:F> * <var:I> $ to $ <var:F>$ . This statement redefines the precondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:6> + <nat:3> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:1> \} $ to the postcondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:7> + <nat:3> \cdot <var:X> ^ <nat:6> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:2> \} $ . Focusing on the subsequent bit of code seen in the list of instructions , the variable update code \verb | <var:F> := <nat:4> + <var:F> * <var:I> ; | . This command takes the condition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:7> + <nat:3> \cdot <var:X> ^ <nat:6> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:2> \} $ as the postcondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:8> + <nat:3> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:4> \} $ . This is guaranteed using the assignment inference rule given in typical Hoare reasoning . Stepping through , we see the binding statement \verb | <var:F> := <nat:3> + <var:F> * <var:I> ; | . This command forwards the precondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:8> + <nat:3> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:4> \} $ toward $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:9> + <nat:3> \cdot <var:X> ^ <nat:8> + <nat:4> \cdot <var:X> ^ <nat:5> + <nat:2> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:3> \} $ . Following , the statement \verb | <var:F> := <nat:2> + <var:F> * <var:I> | . This statement transfers the precondition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:9> + <nat:3> \cdot <var:X> ^ <nat:8> + <nat:4> \cdot <var:X> ^ <nat:5> + <nat:2> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:3> \} $ as the condition $ \{ <var:I> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> ^ <nat:10> + <nat:3> \cdot <var:X> ^ <nat:9> + <nat:4> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:I> = <var:X> }} <var:F> := <nat:1> ; <var:F> := <nat:3> + <var:F> * <var:I> ; <var:F> := <var:F> * <var:I> ; <var:F> := <var:F> * <var:I> ; <var:F> := <nat:4> + <var:F> * <var:I> ; <var:F> := <nat:2> + <var:F> * <var:I> ; <var:F> := <nat:1> + <var:F> * <var:I> ; <var:F> := <nat:2> + <var:F> * <var:I> ; <var:F> := <nat:4> + <var:F> * <var:I> ; <var:F> := <nat:3> + <var:F> * <var:I> ; <var:F> := <nat:2> + <var:F> * <var:I> {{ <var:F> = <nat:1> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:9> + <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:F> = <nat:1> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 