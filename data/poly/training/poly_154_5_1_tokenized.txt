\begin{document} \begin{theorem} Take the following code in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:m> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:V> := <var:Q1> <var:V> := <var:V> + <var:Q0> \end{verbatim} Assuming --- for any natural numbers $ <var:g> $ --- $ <var:m> = <var:g> $ before interpreting the series of instructions , then we have $ <var:V> = <nat:6> \cdot <var:g> + <nat:2> $ after series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:g> \} \\ <var:Q1> := <var:m> ; \\ \{ <var:m> = <var:g> \land <var:Q1> = <var:g> \} \\ <var:Q0> := <nat:2> ; \\ \{ <var:m> = <var:g> \land <var:Q1> = <var:g> \land <var:Q0> = <nat:2> \} \\ <var:Q1> := <var:Q1> * <nat:6> ; \\ \{ <var:m> = <var:g> \land <var:Q1> = <nat:6> \cdot <var:g> \land <var:Q0> = <nat:2> \} \\ <var:V> := <var:Q1> \\ \{ <var:m> = <var:g> \land <var:Q0> = <nat:2> \land <var:V> = <nat:6> \cdot <var:g> \} \\ <var:V> := <var:V> + <var:Q0> \\ \{ <var:m> = <var:g> \land <var:V> = <nat:6> \cdot <var:g> + <nat:2> \} \end{eqnarray} Applying standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <var:Q1> := <var:m> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:V> := <var:Q1> <var:V> := <var:V> + <var:Q0> {{ <var:V> = <nat:6> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:Q1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:Q1> = <var:g> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:Q1> = <nat:6> * <var:g> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:Q0> = <nat:2> /\ <var:V> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:V> = <nat:6> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 