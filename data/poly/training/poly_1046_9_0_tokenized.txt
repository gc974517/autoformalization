\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:k> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:k> ; <var:S2> := <var:S2> * <var:k> ; <var:J> := <var:S2> ; <var:J> := <var:J> + <var:S1> ; <var:J> := <var:J> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Given , for all positive coefficients $ <var:E> $ , $ <var:k> = <var:E> $ ahead of the evaluation of this program , it follows that $ <var:J> = <nat:3> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:8> $ once code segment has finished executing . \end{theorem} \begin{proof} The course of logic for the list of commands can be accomplished with standard Hoare reasoning . Shifting focus toward the subsequent bit of code found in our segment of code , we see \begin{eqnarray} \{ <var:k> = <var:E> \} \, <var:S0> := <nat:8> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \} \end{eqnarray} Moving on to the next step , we have \begin{eqnarray} \{ <var:k> = <var:E> \} \, <var:S0> := <nat:8> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \} \, <var:S1> := <nat:5> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \} \, <var:S1> := <var:S1> * <var:k> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \} \, <var:S2> := <nat:3> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:S2> = <nat:3> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:S2> = <nat:3> \} \, <var:S2> := <var:S2> * <var:k> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:S2> = <nat:3> * <var:E> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:S2> = <nat:3> * <var:E> \} \, <var:S2> := <var:S2> * <var:k> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:S2> = <nat:3> * <var:E> ^ <nat:2> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:S2> = <nat:3> * <var:E> ^ <nat:2> \} \, <var:J> := <var:S2> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:J> = <nat:3> * <var:E> ^ <nat:2> \} \\ \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> * <var:E> \land <var:J> = <nat:3> * <var:E> ^ <nat:2> \} \, <var:J> := <var:J> + <var:S1> \, \{ <var:k> = <var:E> \land <var:S0> = <nat:8> \land <var:J> = <nat:3> * <var:E> ^ <nat:2> + <nat:5> * <var:E> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:k> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:k> ; <var:S2> := <var:S2> * <var:k> ; <var:J> := <var:S2> ; <var:J> := <var:J> + <var:S1> ; <var:J> := <var:J> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:k> = <var:E> }} <def:poly> {{ <var:J> = <nat:3> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:E> /\ <var:S2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:E> /\ <var:S2> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:E> /\ <var:S2> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:E> /\ <var:J> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:S0> = <nat:8> /\ <var:J> = <nat:3> * <var:E> ^ <nat:2> + <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:J> = <nat:3> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 