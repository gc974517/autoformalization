\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:N> ; <var:x2> := <nat:1> ; <var:x2> := <var:x2> * <var:N> ; <var:x2> := <var:x2> * <var:N> ; <var:d> := <var:x2> ; <var:d> := <var:d> + <var:x1> ; <var:d> := <var:d> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:N> = <var:r> $ prior to interpreting our set of commands it holds that $ <var:d> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> $ when series of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be accomplished with typical Hoare logic . Further , we have the assignment command letting $ <nat:3> $ as $ <var:x0>$ . This redefines $ \{ <var:N> = <var:r> \} $ to $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \} $ . This is ensured with the assignment inference rule given by standard Hoare techniques . Advancing to the upcoming line of code contained in our series of commands , the binding command \verb | <var:x1> := <nat:2> ; | . This command takes the precondition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \} $ to the condition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> \} $ . This is ensured through the assignment inference rule found in usual Hoare reasoning . Jumping to the upcoming line of code in our series of commands , we have the environment update statement \verb | <var:x1> := <var:x1> * <var:N> ; | . This forwards the condition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> \} $ to the condition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \} $ . This is guaranteed with the assignment rule of usual Hoare reasoning . Advancing , the code \verb | <var:x2> := <nat:1> ; | . This redefines $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \} $ into the condition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:x2> = <nat:1> \} $ . This is ensured through the assignment scheme given by standard Hoare reasoning . Immediately following , we see the variable update command binding $ <var:x2> * <var:N> $ toward $ <var:x2>$ . This forwards $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:x2> = <nat:1> \} $ into $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:x2> = <nat:1> * <var:r> \} $ . This is rigorously given using the assignment scheme from usual Hoare reasoning . Immediately after , the command \verb | <var:x2> := <var:x2> * <var:N> ; | . This command redefines the condition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:x2> = <nat:1> * <var:r> \} $ toward the postcondition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:x2> = <nat:1> * <var:r> ^ <nat:2> \} $ . Immediately after , the variable assignmet command \verb | <var:d> := <var:x2> ; | . This code redefines $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:x2> = <nat:1> * <var:r> ^ <nat:2> \} $ into $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:d> = <nat:1> * <var:r> ^ <nat:2> \} $ . This is guaranteed with the assignment rule given by usual Hoare reasoning . Stepping through , we see the environment update line giving $ <var:d> + <var:x1> $ to $ <var:d>$ . This command redefines the condition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:x1> = <nat:2> * <var:r> \land <var:d> = <nat:1> * <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> \} $ . This is ensured with the assignment rule from standard Hoare techniques . Stepping through , we have the binding code giving $ <var:d> + <var:x0$ toward $ <var:d>$ . This forwards the precondition $ \{ <var:N> = <var:r> \land <var:x0> = <nat:3> \land <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> \} $ to the postcondition $ \{ <var:N> = <var:r> \land <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:N> ; <var:x2> := <nat:1> ; <var:x2> := <var:x2> * <var:N> ; <var:x2> := <var:x2> * <var:N> ; <var:d> := <var:x2> ; <var:d> := <var:d> + <var:x1> ; <var:d> := <var:d> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:N> = <var:r> }} <def:poly> {{ <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> * <var:r> /\ <var:x2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> * <var:r> /\ <var:x2> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> * <var:r> /\ <var:x2> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:2> * <var:r> /\ <var:d> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:x0> = <nat:3> /\ <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 