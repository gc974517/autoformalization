\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:1> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:s> ; <var:b2> := <nat:4> ; <var:b2> := <var:b2> * <var:s> ; <var:b2> := <var:b2> * <var:s> ; <var:G> := <var:b2> ; <var:G> := <var:G> + <var:b1> ; <var:G> := <var:G> + <var:b0> \end{verbatim} Assume it to be that $ <var:s> = <var:y> $ ( with some natural coefficients $ <var:y> $ ) before running the code segment then we see $ <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:s> = <var:y> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \} \\ <var:b1> := <nat:4> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \} \\ <var:b1> := <var:b1> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \times <var:y> \} \\ <var:b2> := <nat:4> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:4> \} \\ <var:b2> := <var:b2> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:4> \times <var:y> \} \\ <var:b2> := <var:b2> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:G> := <var:b2> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:b1> = <nat:4> \times <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:b1> ; \\ \{ <var:s> = <var:y> \land <var:b0> = <nat:1> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> \} \\ <var:G> := <var:G> + <var:b0> \\ \{ <var:s> = <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:1> \} \end{eqnarray} Continuing running this code produces : \begin{eqnarray} \end{eqnarray} As a consequence , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:s> = <var:y> }} <var:b0> := <nat:1> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:s> ; <var:b2> := <nat:4> ; <var:b2> := <var:b2> * <var:s> ; <var:b2> := <var:b2> * <var:s> ; <var:G> := <var:b2> ; <var:G> := <var:G> + <var:b1> ; <var:G> := <var:G> + <var:b0> {{ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:4> * <var:y> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:b0> = <nat:1> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 