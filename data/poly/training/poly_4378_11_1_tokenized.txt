\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:A1> := <var:l> ; <var:A2> := <var:A1> * <var:l> ; <var:A3> := <var:A2> * <var:l> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:5> ; <var:A2> := <var:A2> * <nat:3> ; <var:A3> := <var:A3> * <nat:8> ; <var:M> := <var:A3> <var:M> := <var:M> + <var:A2> <var:M> := <var:M> + <var:A1> <var:M> := <var:M> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:l> = <var:V> $ ahead of interpreting this list of instructions , it holds that we have $ <var:M> = <nat:8> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:5> \cdot <var:V> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for this code segment is done using Hoare logic . Moving forward , we have \begin{verbatim} { <var:l> = <var:V> } <var:A1> := <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> } { <var:l> = <var:V> \land <var:A1> = <var:V> } <var:A2> := <var:A1> * <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> } { <var:l> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> } <var:A3> := <var:A2> * <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> } { <var:l> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> } <var:A0> := <nat:5> { <var:l> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:5> } { <var:l> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:5> } <var:A1> := <var:A1> * <nat:5> { <var:l> = <var:V> \land <var:A1> = <nat:5> * <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:5> } { <var:l> = <var:V> \land <var:A1> = <nat:5> * <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:5> } <var:A2> := <var:A2> * <nat:3> { <var:l> = <var:V> \land <var:A1> = <nat:5> * <var:V> \land <var:A2> = <nat:3> * <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:5> } \end{verbatim} Focusing on the following line in the segment of code , we have \begin{verbatim} { <var:l> = <var:V> } <var:A1> := <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> } \end{verbatim} This is known to be sound with the variable binding rule given by Hoare logic . Moving forward to the subsequent step in our series of instructions , we have \begin{verbatim} { <var:l> = <var:V> } <var:A1> := <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> } \end{verbatim} This is deduced through the inference rule found in standard Hoare reasoning . Moving on to the next step , we see \begin{verbatim} { <var:l> = <var:V> } <var:A1> := <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> } \end{verbatim} This is rigorously given using the variable assignmet rule found in usual Hoare logic . Advancing to the proceeding step seen in the list of commands , we see \begin{verbatim} { <var:l> = <var:V> } <var:A1> := <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> } \end{verbatim} This is known to be sound using the variable binding law in usual Hoare logic . Moving onward , \begin{verbatim} { <var:l> = <var:V> } <var:A1> := <var:l> { <var:l> = <var:V> \land <var:A1> = <var:V> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:l> ; <var:A2> := <var:A1> * <var:l> ; <var:A3> := <var:A2> * <var:l> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:5> ; <var:A2> := <var:A2> * <nat:3> ; <var:A3> := <var:A3> * <nat:8> ; <var:M> := <var:A3> <var:M> := <var:M> + <var:A2> <var:M> := <var:M> + <var:A1> <var:M> := <var:M> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:l> = <var:V> }} <def:poly> {{ <var:M> = <nat:8> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <nat:5> * <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <nat:5> * <var:V> /\ <var:A2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <nat:5> * <var:V> /\ <var:A2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:A3> = <nat:8> * <var:V> ^ <nat:3> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <nat:5> * <var:V> /\ <var:A2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:A0> = <nat:5> /\ <var:M> = <nat:8> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A1> = <nat:5> * <var:V> /\ <var:A0> = <nat:5> /\ <var:M> = <nat:8> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:A0> = <nat:5> /\ <var:M> = <nat:8> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:M> = <nat:8> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 