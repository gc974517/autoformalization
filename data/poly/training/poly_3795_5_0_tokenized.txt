\begin{document} \begin{theorem} Let the following set of instructions : \begin{verbatim} <var:o0> := <nat:7> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:q> ; <var:I> := <var:o1> ; <var:I> := <var:I> + <var:o0> \end{verbatim} Allowing that $ <var:q> = <var:W> $ before evaluating our list of instructions , then we have $ <var:I> = <nat:5> * <var:W> + <nat:7> $ when segment of code has finished . \end{theorem} \begin{proof} Proving correctness for our set of instructions is given through this decorated list of commands . \begin{eqnarray} \{ <var:q> = <var:W> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:q> = <var:W> \land <var:o0> = <nat:7> \} \\ <var:o1> := <nat:5> ; \\ \{ <var:q> = <var:W> \land <var:o0> = <nat:7> \land <var:o1> = <nat:5> \} \\ <var:o1> := <var:o1> * <var:q> ; \\ \{ <var:q> = <var:W> \land <var:o0> = <nat:7> \land <var:o1> = <nat:5> \cdot <var:W> \} \\ <var:I> := <var:o1> ; \\ \{ <var:q> = <var:W> \land <var:o0> = <nat:7> \land <var:I> = <nat:5> \cdot <var:W> \} \\ <var:I> := <var:I> + <var:o0> \\ \{ <var:q> = <var:W> \land <var:I> = <nat:5> \cdot <var:W> + <nat:7> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:q> = <var:W> }} <var:o0> := <nat:7> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:q> ; <var:I> := <var:o1> ; <var:I> := <var:I> + <var:o0> {{ <var:I> = <nat:5> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:o0> = <nat:7> /\ <var:o1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:o0> = <nat:7> /\ <var:o1> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:o0> = <nat:7> /\ <var:I> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:I> = <nat:5> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 