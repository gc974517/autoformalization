\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:C> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:5> ; <var:g> := <var:E1> <var:g> := <var:g> + <var:E0> \end{verbatim} Allowing that $ <var:C> = <var:U> $ ahead of the evaluation of the series of instructions , it follows that we see $ <var:g> = <nat:5> \cdot <var:U> + <nat:3> $ when program executes . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is evident with Hoare logic . Immediately following , we have the assignment line \verb | <var:E1> := <var:C> ; | . This transfers the precondition $ \{ <var:C> = <var:U> \} $ to $ \{ <var:C> = <var:U> \land <var:E1> = <var:U> \} $ . This is sound with the assignment inference rule in typical Hoare logic . Honing in on the following bit of code in our set of instructions , we see the assignment statement binding $ <nat:3> $ toward $ <var:E0>$ . This advances the condition $ \{ <var:C> = <var:U> \land <var:E1> = <var:U> \} $ as the postcondition $ \{ <var:C> = <var:U> \land <var:E1> = <var:U> \land <var:E0> = <nat:3> \} $ . This is sound with the assignment scheme in standard Hoare techniques . Further , we see the line binding $ <var:E1> * <nat:5> $ into $ <var:E1>$ . This code forwards the condition $ \{ <var:C> = <var:U> \land <var:E1> = <var:U> \land <var:E0> = <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:U> \land <var:E1> = <nat:5> \cdot <var:U> \land <var:E0> = <nat:3> \} $ . Observing the upcoming piece of code found in our code , we see the variable binding line \verb | <var:g> := <var:E1> | . This line redefines $ \{ <var:C> = <var:U> \land <var:E1> = <nat:5> \cdot <var:U> \land <var:E0> = <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:U> \land <var:E0> = <nat:3> \land <var:g> = <nat:5> \cdot <var:U> \} $ . Paying attention to the following line of code seen in the series of instructions , we have the variable binding code \verb | <var:g> := <var:g> + <var:E0> | . This code takes the precondition $ \{ <var:C> = <var:U> \land <var:E0> = <nat:3> \land <var:g> = <nat:5> \cdot <var:U> \} $ to the postcondition $ \{ <var:C> = <var:U> \land <var:g> = <nat:5> \cdot <var:U> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:C> = <var:U> }} <var:E1> := <var:C> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:5> ; <var:g> := <var:E1> <var:g> := <var:g> + <var:E0> {{ <var:g> = <nat:5> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:E1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:E1> = <var:U> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:E1> = <nat:5> * <var:U> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:E0> = <nat:3> /\ <var:g> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:g> = <nat:5> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 