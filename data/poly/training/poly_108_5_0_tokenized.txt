\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:e> ; <var:V> := <var:b1> ; <var:V> := <var:V> + <var:b0> \end{verbatim} Given , given every natural numbers $ <var:U> $ , $ <var:e> = <var:U> $ before interpreting the series of instructions then we have $ <var:V> = <nat:5> \cdot <var:U> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:U> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:e> = <var:U> \land <var:b0> = <nat:6> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:e> = <var:U> \land <var:b0> = <nat:6> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:e> ; \\ \{ <var:e> = <var:U> \land <var:b0> = <nat:6> \land <var:b1> = <nat:5> * <var:U> \} \\ <var:V> := <var:b1> ; \\ \{ <var:e> = <var:U> \land <var:b0> = <nat:6> \land <var:V> = <nat:5> * <var:U> \} \\ <var:V> := <var:V> + <var:b0> \\ \{ <var:e> = <var:U> \land <var:V> = <nat:5> * <var:U> + <nat:6> \} \end{eqnarray} Using usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:e> = <var:U> }} <var:b0> := <nat:6> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:e> ; <var:V> := <var:b1> ; <var:V> := <var:V> + <var:b0> {{ <var:V> = <nat:5> * <var:U> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:b0> = <nat:6> /\ <var:V> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:V> = <nat:5> * <var:U> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 