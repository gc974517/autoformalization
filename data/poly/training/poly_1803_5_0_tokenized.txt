\begin{document} \begin{theorem} We define a set of commands as follows \begin{verbatim} <var:d0> := <nat:6> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:B> ; <var:W> := <var:d1> ; <var:W> := <var:W> + <var:d0> \end{verbatim} Given $ <var:B> = <var:z> $ before interpreting this code segment , then $ <var:W> = <nat:1> \cdot <var:z> + <nat:6> $ once list of commands is done executing . \end{theorem} \begin{proof} The method of proof for the set of instructions is accomplished with typical Hoare logic . Going forward , we have \verb | { <var:B> = <var:z> } <var:d0> := <nat:6> { <var:B> = <var:z> \land <var:d0> = <nat:6> } | , \verb | { <var:B> = <var:z> \land <var:d0> = <nat:6> } <var:d1> := <nat:1> { <var:B> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> } | , \verb | { <var:B> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> } <var:d1> := <var:d1> * <var:B> { <var:B> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \cdot <var:z> } | , \verb | { <var:B> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \cdot <var:z> } <var:W> := <var:d1> { <var:B> = <var:z> \land <var:d0> = <nat:6> \land <var:W> = <nat:1> \cdot <var:z> } | and \verb | { <var:B> = <var:z> \land <var:d0> = <nat:6> \land <var:W> = <nat:1> \cdot <var:z> } <var:W> := <var:W> + <var:d0{ <var:B> = <var:z> \land <var:W> = <nat:1> \cdot <var:z> + <nat:6> } | . This is deduced through the assignment rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:B> = <var:z> }} <var:d0> := <nat:6> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:B> ; <var:W> := <var:d1> ; <var:W> := <var:W> + <var:d0> {{ <var:W> = <nat:1> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:d0> = <nat:6> /\ <var:W> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:W> = <nat:1> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 