\begin{document} \begin{theorem} Consider a series of commands such that \begin{verbatim} <var:l0> := <nat:6> ; <var:l2> := <nat:2> ; <var:l2> := <var:l2> * <var:j> ; <var:l2> := <var:l2> * <var:j> ; <var:l3> := <nat:7> ; <var:l3> := <var:l3> * <var:j> ; <var:l3> := <var:l3> * <var:j> ; <var:l3> := <var:l3> * <var:j> ; <var:H> := <var:l3> ; <var:H> := <var:H> + <var:l2> ; <var:H> := <var:H> + <var:l0> \end{verbatim} Assuming ( with some positive integers $ <var:Q> $ ) that $ <var:j> = <var:Q> $ ahead of evaluating this program , it follows that $ <var:H> = <nat:7> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is accomplished using typical Hoare logic . Moving forward to the proceeding commands in the list of instructions , we have \begin{eqnarray} \{ <var:j> = <var:Q> \} \, <var:l0> := <nat:6> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \} \, <var:l2> := <nat:2> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \} \, <var:l2> := <var:l2> * <var:j> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> \} \, <var:l2> := <var:l2> * <var:j> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \} \, <var:l3> := <nat:7> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:l3> = <nat:7> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:l3> = <nat:7> \} \, <var:l3> := <var:l3> * <var:j> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:l3> = <nat:7> \cdot <var:Q> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:l3> = <nat:7> \cdot <var:Q> \} \, <var:l3> := <var:l3> * <var:j> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:l3> = <nat:7> \cdot <var:Q> ^ <nat:2> \} \end{eqnarray} Moving on to the next step , we have \begin{eqnarray} \{ <var:j> = <var:Q> \} \, <var:l0> := <nat:6> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \} \, <var:l2> := <nat:2> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \} \, <var:l2> := <var:l2> * <var:j> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> \} \\ \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> \} \, <var:l2> := <var:l2> * <var:j> \, \{ <var:j> = <var:Q> \land <var:l0> = <nat:6> \land <var:l2> = <nat:2> \cdot <var:Q> ^ <nat:2> \} \end{eqnarray} This is guaranteed through the variable assignmet inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:j> = <var:Q> }} <var:l0> := <nat:6> ; <var:l2> := <nat:2> ; <var:l2> := <var:l2> * <var:j> ; <var:l2> := <var:l2> * <var:j> ; <var:l3> := <nat:7> ; <var:l3> := <var:l3> * <var:j> ; <var:l3> := <var:l3> * <var:j> ; <var:l3> := <var:l3> * <var:j> ; <var:H> := <var:l3> ; <var:H> := <var:H> + <var:l2> ; <var:H> := <var:H> + <var:l0> {{ <var:H> = <nat:7> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:H> = <nat:7> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:l0> = <nat:6> /\ <var:H> = <nat:7> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:H> = <nat:7> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 