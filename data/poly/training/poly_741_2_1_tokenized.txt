\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:7> ; <var:s> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:W> = <var:p> $ ahead of running this series of instructions , it must be that $ <var:s> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be demonstrated by this decorated set of instructions . \begin{eqnarray} \{ <var:W> = <var:p> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:W> = <var:p> \land <var:k0> = <nat:7> \} \\ <var:s> := <var:k0> \\ \{ <var:W> = <var:p> \land <var:s> = <nat:7> \} \end{eqnarray} Using standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:s> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:W> = <var:p> }} <def:poly> {{ <var:s> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:s> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 