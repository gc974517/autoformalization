\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:X> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:4> ; <var:U> := <var:T1> <var:U> := <var:U> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:X> = <var:e> $ before running this series of commands then we see $ <var:U> = <nat:4> * <var:e> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be accomplished using standard Hoare logic . Moving forward , we see the assignment command \verb | <var:T1> := <var:X> ; | . This command moves the condition $ \{ <var:X> = <var:e> \} $ into $ \{ <var:X> = <var:e> \land <var:T1> = <var:e> \} $ . Advancing on , we have the assignment statement \verb | <var:T0> := <nat:8> ; | . This statement moves $ \{ <var:X> = <var:e> \land <var:T1> = <var:e> \} $ into $ \{ <var:X> = <var:e> \land <var:T1> = <var:e> \land <var:T0> = <nat:8> \} $ . Advancing to the next piece of code seen in our list of commands , we have the code binding $ <var:T1> * <nat:4> $ into $ <var:T1>$ . This command takes the condition $ \{ <var:X> = <var:e> \land <var:T1> = <var:e> \land <var:T0> = <nat:8> \} $ into $ \{ <var:X> = <var:e> \land <var:T1> = <nat:4> * <var:e> \land <var:T0> = <nat:8> \} $ . Jumping to the subsequent line of code found in our set of commands , we have the assignment command \verb | <var:U> := <var:T1> | . This line moves the precondition $ \{ <var:X> = <var:e> \land <var:T1> = <nat:4> * <var:e> \land <var:T0> = <nat:8> \} $ to the condition $ \{ <var:X> = <var:e> \land <var:T0> = <nat:8> \land <var:U> = <nat:4> * <var:e> \} $ . This is known to be sound through the assignment scheme of typical Hoare techniques . Stepping forward , we see the variable binding line defining $ <var:U> + <var:T0$ as $ <var:U>$ . This forwards the condition $ \{ <var:X> = <var:e> \land <var:T0> = <nat:8> \land <var:U> = <nat:4> * <var:e> \} $ into the postcondition $ \{ <var:X> = <var:e> \land <var:U> = <nat:4> * <var:e> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:X> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:4> ; <var:U> := <var:T1> <var:U> := <var:U> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:X> = <var:e> }} <def:poly> {{ <var:U> = <nat:4> * <var:e> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T1> = <var:e> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T1> = <nat:4> * <var:e> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T0> = <nat:8> /\ <var:U> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:U> = <nat:4> * <var:e> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 