\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:e> ; <var:G> := <var:N1> ; <var:G> := <var:G> + <var:N0> \end{verbatim} Allowing that we have $ <var:e> = <var:u> $ for integers $ <var:u> $ ahead of interpreting this set of commands , then we see $ <var:G> = <nat:3> \cdot <var:u> + <nat:1> $ once series of instructions is done . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:e> = <var:u> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:e> = <var:u> \land <var:N0> = <nat:1> \} \\ <var:N1> := <nat:3> ; \\ \{ <var:e> = <var:u> \land <var:N0> = <nat:1> \land <var:N1> = <nat:3> \} \\ <var:N1> := <var:N1> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:N0> = <nat:1> \land <var:N1> = <nat:3> \times <var:u> \} \\ <var:G> := <var:N1> ; \\ \{ <var:e> = <var:u> \land <var:N0> = <nat:1> \land <var:G> = <nat:3> \times <var:u> \} \\ <var:G> := <var:G> + <var:N0> \\ \{ <var:e> = <var:u> \land <var:G> = <nat:3> \times <var:u> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:e> = <var:u> }} <var:N0> := <nat:1> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:e> ; <var:G> := <var:N1> ; <var:G> := <var:G> + <var:N0> {{ <var:G> = <nat:3> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:N0> = <nat:1> /\ <var:G> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 