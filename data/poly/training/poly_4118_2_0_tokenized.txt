\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:q0> := <nat:1> ; <var:v> := <var:q0> \end{verbatim} Allowing $ <var:u> = <var:W> $ ahead of executing our program it holds that we have $ <var:v> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the series of commands is evident through typical Hoare techniques . Advancing to the following step in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:u> = <var:W> \} & <var:q0> := <nat:1> & \{ <var:u> = <var:W> \land <var:q0> = <nat:1> \} \end{tabular} This is given through the environment update rule of Hoare logic . Next , \[ \begin{tabular} {rcl} \{ <var:u> = <var:W> \} & <var:q0> := <nat:1> & \{ <var:u> = <var:W> \land <var:q0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:u> = <var:W> }} <var:q0> := <nat:1> ; <var:v> := <var:q0> {{ <var:v> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:v> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 