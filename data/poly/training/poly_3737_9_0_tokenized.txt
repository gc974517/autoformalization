\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:z> ; <var:w2> := <nat:2> ; <var:w2> := <var:w2> * <var:z> ; <var:w2> := <var:w2> * <var:z> ; <var:t> := <var:w2> ; <var:t> := <var:t> + <var:w1> ; <var:t> := <var:t> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:z> = <var:M> $ prior to running the series of instructions it holds that $ <var:t> = <nat:2> \times <var:M> ^ <nat:2> + <nat:8> \times <var:M> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be accomplished with the following decorated series of instructions . \begin{eqnarray} \{ <var:z> = <var:M> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:8> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> \} \\ <var:w1> := <var:w1> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> * <var:M> \} \\ <var:w2> := <nat:2> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> * <var:M> \land <var:w2> = <nat:2> \} \\ <var:w2> := <var:w2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> * <var:M> \land <var:w2> = <nat:2> * <var:M> \} \\ <var:w2> := <var:w2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> * <var:M> \land <var:w2> = <nat:2> * <var:M> ^ <nat:2> \} \\ <var:t> := <var:w2> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> * <var:M> \land <var:t> = <nat:2> * <var:M> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:w1> ; \\ \{ <var:z> = <var:M> \land <var:w0> = <nat:1> \land <var:t> = <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> \} \\ <var:t> := <var:t> + <var:w0> \\ \{ <var:z> = <var:M> \land <var:t> = <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:z> ; <var:w2> := <nat:2> ; <var:w2> := <var:w2> * <var:z> ; <var:w2> := <var:w2> * <var:z> ; <var:t> := <var:w2> ; <var:t> := <var:t> + <var:w1> ; <var:t> := <var:t> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <def:poly> {{ <var:t> = <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> * <var:M> /\ <var:w2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> * <var:M> /\ <var:w2> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> * <var:M> /\ <var:w2> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> * <var:M> /\ <var:t> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:w0> = <nat:1> /\ <var:t> = <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t> = <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 