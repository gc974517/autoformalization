\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:6> ; <var:a> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing --- assuming some integers $ <var:F> $ --- that we have $ <var:s> = <var:F> $ prior to the execution of our set of instructions , it follows that we see $ <var:a> = <nat:6> $ after program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:F> \} \\ <var:V0> := <nat:6> ; \\ \{ <var:s> = <var:F> \land <var:V0> = <nat:6> \} \\ <var:a> := <var:V0> \\ \{ <var:s> = <var:F> \land <var:a> = <nat:6> \} \end{eqnarray} Allowing the evaluation of our segment of code gives : \begin{eqnarray} \end{eqnarray} The application of standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:6> ; <var:a> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:s> = <var:F> }} <def:poly> {{ <var:a> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:a> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 