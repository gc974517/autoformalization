\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:6> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:A> ; <var:P> := <var:c1> ; <var:P> := <var:P> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:A> = <var:H> $ before interpreting this series of instructions , it holds that we see $ <var:P> = <nat:8> \times <var:H> + <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:A> = <var:H> \} \\ <var:c0> := <nat:6> ; \\ \{ <var:A> = <var:H> \land <var:c0> = <nat:6> \} \\ <var:c1> := <nat:8> ; \\ \{ <var:A> = <var:H> \land <var:c0> = <nat:6> \land <var:c1> = <nat:8> \} \\ <var:c1> := <var:c1> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:c0> = <nat:6> \land <var:c1> = <nat:8> \times <var:H> \} \\ <var:P> := <var:c1> ; \\ \{ <var:A> = <var:H> \land <var:c0> = <nat:6> \land <var:P> = <nat:8> \times <var:H> \} \\ <var:P> := <var:P> + <var:c0> \\ \{ <var:A> = <var:H> \land <var:P> = <nat:8> \times <var:H> + <nat:6> \} \end{eqnarray} Therefore , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:6> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:A> ; <var:P> := <var:c1> ; <var:P> := <var:P> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <def:poly> {{ <var:P> = <nat:8> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:c0> = <nat:6> /\ <var:P> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:P> = <nat:8> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 