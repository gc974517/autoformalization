\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:9> ; <var:n> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Assume that we have $ <var:s> = <var:w> $ ahead of interpreting the list of instructions then we have $ <var:n> = <nat:9> $ when set of commands has terminated . \end{theorem} \begin{proof} We can see that the below decorated list of commands . \begin{eqnarray} \{ <var:s> = <var:w> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:s> = <var:w> \land <var:W0> = <nat:9> \} \\ <var:n> := <var:W0> \\ \{ <var:s> = <var:w> \land <var:n> = <nat:9> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:9> ; <var:n> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:s> = <var:w> }} <def:poly> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 