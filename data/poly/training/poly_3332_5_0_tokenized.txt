\begin{document} \begin{theorem} We define the following set of commands as \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:6> ; <var:n1> := <var:n1> * <var:U> ; <var:s> := <var:n1> ; <var:s> := <var:s> + <var:n0> \end{verbatim} Allow $ <var:U> = <var:W> $ before the execution of our code segment it must be that we see $ <var:s> = <nat:6> * <var:W> + <nat:2> $ when code has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is shown using Hoare logic . Taking a look at the next command in the series of instructions , we have the variable binding statement assigning $ <nat:2> $ into $ <var:n0>$ . This line moves $ \{ <var:U> = <var:W> \} $ to $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \} $ . This is deduced with the assignment rule found in standard Hoare reasoning . Honing in on the proceeding step in our series of commands , the variable update command \verb | <var:n1> := <nat:6> ; | . This moves the precondition $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \land <var:n1> = <nat:6> \} $ . Advancing to the next step in the segment of code , we have the environment update line binding $ <var:n1> * <var:U> $ toward $ <var:n1>$ . This line moves the condition $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \land <var:n1> = <nat:6> \} $ to the condition $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \land <var:n1> = <nat:6> * <var:W> \} $ . This is known to be sound by the assignment scheme given by typical Hoare techniques . Jumping to the next command in the series of instructions , we see the variable binding line letting $ <var:n1> $ into $ <var:s>$ . This command moves the precondition $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \land <var:n1> = <nat:6> * <var:W> \} $ as $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \land <var:s> = <nat:6> * <var:W> \} $ . Moving on , we see the variable update command \verb | <var:s> := <var:s> + <var:n0> | . This transfers the precondition $ \{ <var:U> = <var:W> \land <var:n0> = <nat:2> \land <var:s> = <nat:6> * <var:W> \} $ into the condition $ \{ <var:U> = <var:W> \land <var:s> = <nat:6> * <var:W> + <nat:2> \} $ . This is rigorously given through the assignment rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:U> = <var:W> }} <var:n0> := <nat:2> ; <var:n1> := <nat:6> ; <var:n1> := <var:n1> * <var:U> ; <var:s> := <var:n1> ; <var:s> := <var:s> + <var:n0> {{ <var:s> = <nat:6> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:W> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:W> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:W> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:W> /\ <var:n0> = <nat:2> /\ <var:s> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:W> /\ <var:s> = <nat:6> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 