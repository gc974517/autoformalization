\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:h> := <nat:2> ; <var:h> := <nat:3> + <var:h> * <var:m> ; <var:h> := <nat:1> + <var:h> * <var:m> \end{verbatim} Assuming --- taking $ <var:s> \in \mathbb{N} $ --- that $ <var:m> = <var:s> $ prior to running the set of commands it follows that we see $ <var:h> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:1> $ when segment of code finishes . \end{theorem} \begin{proof} Proving correctness for our set of commands can be shown through Hoare reasoning . Focusing on the proceeding statement found in our code , the binding code assigning $ <nat:2> $ to $ <var:h>$ . This line moves the condition $ \{ <var:m> = <var:s> \} $ to $ \{ <var:m> = <var:s> \land <var:h> = <nat:2> \} $ . This is shown to be logically sound through the assignment law given by standard Hoare techniques . Moving on to the proceeding statement in our series of instructions , we have the variable binding line letting $ <nat:3> + <var:h> * <var:m> $ toward $ <var:h>$ . This advances $ \{ <var:m> = <var:s> \land <var:h> = <nat:2> \} $ into $ \{ <var:m> = <var:s> \land <var:h> = <nat:2> * <var:s> + <nat:3> \} $ . This is ensured using the assignment law from usual Hoare logic . After , we see the variable update command \verb | <var:h> := <nat:1> + <var:h> * <var:m> | . This statement moves the condition $ \{ <var:m> = <var:s> \land <var:h> = <nat:2> * <var:s> + <nat:3> \} $ to the condition $ \{ <var:m> = <var:s> \land <var:h> = <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> \} $ . This is rigorously given with the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:m> = <var:s> }} <var:h> := <nat:2> ; <var:h> := <nat:3> + <var:h> * <var:m> ; <var:h> := <nat:1> + <var:h> * <var:m> {{ <var:h> = <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:h> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:h> = <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:h> = <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 