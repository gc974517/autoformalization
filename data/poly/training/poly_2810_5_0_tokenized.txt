\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:2> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:k> ; <var:q> := <var:p1> ; <var:q> := <var:q> + <var:p0> \end{verbatim} Given it to be that $ <var:k> = <var:M> $ ahead of the evaluation of this series of instructions , it holds that we see $ <var:q> = <nat:9> * <var:M> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:M> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:k> = <var:M> \land <var:p0> = <nat:2> \} \\ <var:p1> := <nat:9> ; \\ \{ <var:k> = <var:M> \land <var:p0> = <nat:2> \land <var:p1> = <nat:9> \} \\ <var:p1> := <var:p1> * <var:k> ; \\ \{ <var:k> = <var:M> \land <var:p0> = <nat:2> \land <var:p1> = <nat:9> \cdot <var:M> \} \end{eqnarray} Furthering running the series of commands gives us : \begin{eqnarray} <var:q> := <var:p1> ; \\ \{ <var:k> = <var:M> \land <var:p0> = <nat:2> \land <var:q> = <nat:9> \cdot <var:M> \} \\ <var:q> := <var:q> + <var:p0> \\ \{ <var:k> = <var:M> \land <var:q> = <nat:9> \cdot <var:M> + <nat:2> \} \end{eqnarray} The application of standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:k> = <var:M> }} <var:p0> := <nat:2> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:k> ; <var:q> := <var:p1> ; <var:q> := <var:q> + <var:p0> {{ <var:q> = <nat:9> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:p0> = <nat:2> /\ <var:q> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:q> = <nat:9> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 