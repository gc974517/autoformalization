\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:a> ; <var:Z2> := <var:Z1> * <var:a> ; <var:Z3> := <var:Z2> * <var:a> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:Z2> := <var:Z2> * <nat:3> ; <var:Z3> := <var:Z3> * <nat:3> ; <var:w> := <var:Z3> <var:w> := <var:w> + <var:Z2> <var:w> := <var:w> + <var:Z1> <var:w> := <var:w> + <var:Z0> \end{verbatim} Allowing --- for all positive integer coefficients $ <var:h> $ --- that we have $ <var:a> = <var:h> $ before the execution of our set of commands , then $ <var:w> = <nat:3> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:2> $ when segment of code has finished . \end{theorem} \begin{proof} The proof of the segment of code is clear through usual Hoare logic . Moving forward to the upcoming piece of code found in the list of instructions , we see the binding command \verb | <var:Z1> := <var:a> ; | . This takes the condition $ \{ <var:a> = <var:h> \} $ as the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \} $ . This is rigorously given through the assignment scheme in Hoare logic . Moving onward , the variable assignmet command defining $ <var:Z1> * <var:a> $ as $ <var:Z2>$ . This line forwards the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \} $ toward the postcondition $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \} $ . Moving forward to the proceeding line in our series of instructions , we see the variable assignmet command yielding $ <var:Z2> * <var:a> $ toward $ <var:Z3>$ . This code transfers $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \} $ . Jumping to the proceeding line of code found in the series of commands , we have the variable binding command \verb | <var:Z0> := <nat:2> ; | . This command moves the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \} $ to the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . This is ensured with the assignment scheme defined by standard Hoare logic . Advancing , we see the environment update statement giving $ <var:Z1> * <nat:4> $ as $ <var:Z1>$ . This statement transfers $ \{ <var:a> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ into $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . Going forward , the variable update command \verb | <var:Z2> := <var:Z2> * <nat:3> ; | . This redefines the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ into the postcondition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <nat:3> * <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . Shifting focus toward the proceeding line of code found in our code segment , the binding statement \verb | <var:Z3> := <var:Z3> * <nat:3> ; | . This statement moves the precondition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <nat:3> * <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <nat:3> * <var:h> ^ <nat:2> \land <var:Z3> = <nat:3> * <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule from Hoare techniques . Observing the next line found in our set of commands , the assignment line defining $ <var:Z3$ to $ <var:w>$ . This transfers $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <nat:3> * <var:h> ^ <nat:2> \land <var:Z3> = <nat:3> * <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ toward the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <nat:3> * <var:h> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> \} $ . Stepping through , we see the variable update command \verb | <var:w> := <var:w> + <var:Z2> | . This code forwards the precondition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z2> = <nat:3> * <var:h> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> \} $ as the condition $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z0> = <nat:2> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> \} $ . This is given using the assignment rule given by typical Hoare logic . Now , we have the variable binding command \verb | <var:w> := <var:w> + <var:Z1> | . This code moves $ \{ <var:a> = <var:h> \land <var:Z1> = <nat:4> * <var:h> \land <var:Z0> = <nat:2> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> \} $ as $ \{ <var:a> = <var:h> \land <var:Z0> = <nat:2> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> \} $ . This is rigorously given using the assignment rule defined by typical Hoare techniques . Advancing to the next step , the environment update line giving $ <var:w> + <var:Z0$ as $ <var:w>$ . This line takes $ \{ <var:a> = <var:h> \land <var:Z0> = <nat:2> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> \} $ into the postcondition $ \{ <var:a> = <var:h> \land <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> \} $ . This is shown by the assignment rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <var:Z1> := <var:a> ; <var:Z2> := <var:Z1> * <var:a> ; <var:Z3> := <var:Z2> * <var:a> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:Z2> := <var:Z2> * <nat:3> ; <var:Z3> := <var:Z3> * <nat:3> ; <var:w> := <var:Z3> <var:w> := <var:w> + <var:Z2> <var:w> := <var:w> + <var:Z1> <var:w> := <var:w> + <var:Z0> {{ <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <nat:4> * <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <nat:4> * <var:h> /\ <var:Z2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <nat:4> * <var:h> /\ <var:Z2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <nat:4> * <var:h> /\ <var:Z2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:Z0> = <nat:2> /\ <var:w> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z1> = <nat:4> * <var:h> /\ <var:Z0> = <nat:2> /\ <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:Z0> = <nat:2> /\ <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:w> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 