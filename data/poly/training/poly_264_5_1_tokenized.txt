\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:K> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:5> ; <var:y> := <var:m1> <var:y> := <var:y> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:K> = <var:X> $ --- given some $ <var:X> \in \mathbb{N} $ --- prior to the evaluation of this segment of code , it follows that $ <var:y> = <nat:5> \times <var:X> + <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:K> = <var:X> \} \\ <var:m1> := <var:K> ; \\ \{ <var:K> = <var:X> \land <var:m1> = <var:X> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:K> = <var:X> \land <var:m1> = <var:X> \land <var:m0> = <nat:8> \} \\ <var:m1> := <var:m1> * <nat:5> ; \\ \{ <var:K> = <var:X> \land <var:m1> = <nat:5> \times <var:X> \land <var:m0> = <nat:8> \} \\ <var:y> := <var:m1> \\ \{ <var:K> = <var:X> \land <var:m0> = <nat:8> \land <var:y> = <nat:5> \times <var:X> \} \\ <var:y> := <var:y> + <var:m0> \\ \{ <var:K> = <var:X> \land <var:y> = <nat:5> \times <var:X> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:K> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:5> ; <var:y> := <var:m1> <var:y> := <var:y> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <def:poly> {{ <var:y> = <nat:5> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:m1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:m1> = <var:X> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:m1> = <nat:5> * <var:X> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:m0> = <nat:8> /\ <var:y> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:y> = <nat:5> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 