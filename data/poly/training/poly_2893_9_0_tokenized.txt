\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:f> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:f> ; <var:u2> := <var:u2> * <var:f> ; <var:k> := <var:u2> ; <var:k> := <var:k> + <var:u1> ; <var:k> := <var:k> + <var:u0> \end{verbatim} Assume $ <var:f> = <var:F> $ before executing the program , it holds that we have $ <var:k> = <nat:3> \times <var:F> ^ <nat:2> + <nat:8> \times <var:F> + <nat:2> $ . \end{theorem} \begin{proof} Note that the below decorated code segment . \begin{eqnarray} \{ <var:f> = <var:F> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \} \\ <var:u1> := <nat:8> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:u1> = <nat:8> \} \end{eqnarray} Allowing the execution of this program yields : \begin{eqnarray} <var:u1> := <var:u1> * <var:f> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:u1> = <nat:8> * <var:F> \} \\ <var:u2> := <nat:3> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:u1> = <nat:8> * <var:F> \land <var:u2> = <nat:3> \} \\ <var:u2> := <var:u2> * <var:f> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:u1> = <nat:8> * <var:F> \land <var:u2> = <nat:3> * <var:F> \} \\ <var:u2> := <var:u2> * <var:f> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:u1> = <nat:8> * <var:F> \land <var:u2> = <nat:3> * <var:F> ^ <nat:2> \} \\ <var:k> := <var:u2> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:u1> = <nat:8> * <var:F> \land <var:k> = <nat:3> * <var:F> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:u1> ; \\ \{ <var:f> = <var:F> \land <var:u0> = <nat:2> \land <var:k> = <nat:3> * <var:F> ^ <nat:2> + <nat:8> * <var:F> \} \\ <var:k> := <var:k> + <var:u0> \\ \{ <var:f> = <var:F> \land <var:k> = <nat:3> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:f> = <var:F> }} <var:u0> := <nat:2> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:f> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:f> ; <var:u2> := <var:u2> * <var:f> ; <var:k> := <var:u2> ; <var:k> := <var:k> + <var:u1> ; <var:k> := <var:k> + <var:u0> {{ <var:k> = <nat:3> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:8> * <var:F> /\ <var:u2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:8> * <var:F> /\ <var:u2> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:8> * <var:F> /\ <var:u2> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:8> * <var:F> /\ <var:k> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:u0> = <nat:2> /\ <var:k> = <nat:3> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:F> /\ <var:k> = <nat:3> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 