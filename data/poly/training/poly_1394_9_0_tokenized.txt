\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:J> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:J> ; <var:e2> := <var:e2> * <var:J> ; <var:j> := <var:e2> ; <var:j> := <var:j> + <var:e1> ; <var:j> := <var:j> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:J> = <var:c> $ ahead of the execution of the series of instructions , it must be that we see $ <var:j> = <nat:1> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:3> $ when program executes . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:J> = <var:c> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \} \\ <var:e1> := <nat:8> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:e1> = <nat:8> \} \\ <var:e1> := <var:e1> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:e1> = <nat:8> \cdot <var:c> \} \\ <var:e2> := <nat:1> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:e1> = <nat:8> \cdot <var:c> \land <var:e2> = <nat:1> \} \\ <var:e2> := <var:e2> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:e1> = <nat:8> \cdot <var:c> \land <var:e2> = <nat:1> \cdot <var:c> \} \\ <var:e2> := <var:e2> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:e1> = <nat:8> \cdot <var:c> \land <var:e2> = <nat:1> \cdot <var:c> ^ <nat:2> \} \\ <var:j> := <var:e2> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:e1> = <nat:8> \cdot <var:c> \land <var:j> = <nat:1> \cdot <var:c> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:e1> ; \\ \{ <var:J> = <var:c> \land <var:e0> = <nat:3> \land <var:j> = <nat:1> \cdot <var:c> ^ <nat:2> + <nat:8> \cdot <var:c> \} \\ <var:j> := <var:j> + <var:e0> \\ \{ <var:J> = <var:c> \land <var:j> = <nat:1> \cdot <var:c> ^ <nat:2> + <nat:8> \cdot <var:c> + <nat:3> \} \end{eqnarray} As a result , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:3> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:J> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:J> ; <var:e2> := <var:e2> * <var:J> ; <var:j> := <var:e2> ; <var:j> := <var:j> + <var:e1> ; <var:j> := <var:j> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:J> = <var:c> }} <def:poly> {{ <var:j> = <nat:1> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:8> * <var:c> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:8> * <var:c> /\ <var:e2> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:8> * <var:c> /\ <var:e2> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:8> * <var:c> /\ <var:j> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:e0> = <nat:3> /\ <var:j> = <nat:1> * <var:c> ^ <nat:2> + <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:j> = <nat:1> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 