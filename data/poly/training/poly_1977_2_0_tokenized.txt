\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:7> ; <var:i> := <var:e0> \end{verbatim} Allowing it to be that $ <var:m> = <var:D> $ --- given any natural coefficients $ <var:D> $ --- ahead of interpreting this program it follows that $ <var:i> = <nat:7> $ when list of commands has executed . \end{theorem} \begin{proof} The proof of this code segment is evident with standard Hoare logic . Moving on to the next step , we have \verb | { <var:m> = <var:D> } <var:e0> := <nat:7> { <var:m> = <var:D> \land <var:e0> = <nat:7> } | and \verb | { <var:m> = <var:D> \land <var:e0> = <nat:7> } <var:i> := <var:e0{ <var:m> = <var:D> \land <var:i> = <nat:7> } | . This is known to be sound with the binding rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:m> = <var:D> }} <var:e0> := <nat:7> ; <var:i> := <var:e0> {{ <var:i> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:D> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:D> /\ <var:i> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 