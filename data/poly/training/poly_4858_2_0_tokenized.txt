\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:5> ; <var:x> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:g> = <var:B> $ before running this series of instructions it holds that $ <var:x> = <nat:5> $ after list of commands exits . \end{theorem} \begin{proof} The proof of the program can be given by this decorated list of commands . \begin{eqnarray} \{ <var:g> = <var:B> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:g> = <var:B> \land <var:j0> = <nat:5> \} \\ <var:x> := <var:j0> \\ \{ <var:g> = <var:B> \land <var:x> = <nat:5> \} \end{eqnarray} Utilizing typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:5> ; <var:x> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:g> = <var:B> }} <def:poly> {{ <var:x> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:x> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 