\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:1> ; <var:k> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Given it to hold that $ <var:h> = <var:u> $ before executing the series of instructions , it follows that $ <var:k> = <nat:1> $ after list of commands finishes . \end{theorem} \begin{proof} The application of usual Hoare techniques gives : \begin{eqnarray} \{ <var:h> = <var:u> \} \\ <var:i0> := <nat:1> ; \\ \{ <var:h> = <var:u> \land <var:i0> = <nat:1> \} \end{eqnarray} Advancing evaluating this set of commands gives us : \begin{eqnarray} <var:k> := <var:i0> \\ \{ <var:h> = <var:u> \land <var:k> = <nat:1> \} \end{eqnarray} Given the preceding argument , our list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:1> ; <var:k> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:h> = <var:u> }} <def:poly> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 