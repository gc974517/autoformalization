\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:8> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:j> ; <var:F2> := <nat:2> ; <var:F2> := <var:F2> * <var:j> ; <var:F2> := <var:F2> * <var:j> ; <var:n> := <var:F2> ; <var:n> := <var:n> + <var:F1> ; <var:n> := <var:n> + <var:F0> \end{verbatim} Assuming --- taking positive coefficients $ <var:C> $ --- it to hold that $ <var:j> = <var:C> $ ahead of running the list of commands , it must be that $ <var:n> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is given by typical Hoare techniques . Moving on , we see \begin{verbatim} { <var:j> = <var:C> } <var:F0> := <nat:8> { <var:j> = <var:C> \land <var:F0> = <nat:8> } { <var:j> = <var:C> \land <var:F0> = <nat:8> } <var:F1> := <nat:1> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> } { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> } <var:F1> := <var:F1> * <var:j> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> } { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> } <var:F2> := <nat:2> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> \land <var:F2> = <nat:2> } \end{verbatim} This is rigorously given by the rule given in Hoare techniques . Jumping to the upcoming commands contained in the list of instructions , we have \begin{verbatim} { <var:j> = <var:C> } <var:F0> := <nat:8> { <var:j> = <var:C> \land <var:F0> = <nat:8> } { <var:j> = <var:C> \land <var:F0> = <nat:8> } <var:F1> := <nat:1> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> } { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> } <var:F1> := <var:F1> * <var:j> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> } { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> } <var:F2> := <nat:2> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> \land <var:F2> = <nat:2> } { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> \land <var:F2> = <nat:2> } <var:F2> := <var:F2> * <var:j> { <var:j> = <var:C> \land <var:F0> = <nat:8> \land <var:F1> = <nat:1> \cdot <var:C> \land <var:F2> = <nat:2> \cdot <var:C> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:j> = <var:C> }} <var:F0> := <nat:8> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:j> ; <var:F2> := <nat:2> ; <var:F2> := <var:F2> * <var:j> ; <var:F2> := <var:F2> * <var:j> ; <var:n> := <var:F2> ; <var:n> := <var:n> + <var:F1> ; <var:n> := <var:n> + <var:F0> {{ <var:n> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:1> * <var:C> /\ <var:F2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:1> * <var:C> /\ <var:F2> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:1> * <var:C> /\ <var:F2> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:1> * <var:C> /\ <var:n> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:F0> = <nat:8> /\ <var:n> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:n> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 