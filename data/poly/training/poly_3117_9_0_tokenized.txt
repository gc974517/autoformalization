\begin{document} \begin{theorem} Take a code segment as \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:E> ; <var:D2> := <nat:4> ; <var:D2> := <var:D2> * <var:E> ; <var:D2> := <var:D2> * <var:E> ; <var:S> := <var:D2> ; <var:S> := <var:S> + <var:D1> ; <var:S> := <var:S> + <var:D0> \end{verbatim} Assuming that $ <var:E> = <var:Q> $ ahead of running this segment of code , it holds that $ <var:S> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> + <nat:6> $ when list of commands has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be accomplished using usual Hoare reasoning . Next , we have \begin{verbatim} { <var:E> = <var:Q> } <var:D0> := <nat:6> { <var:E> = <var:Q> \land <var:D0> = <nat:6> } { <var:E> = <var:Q> \land <var:D0> = <nat:6> } <var:D1> := <nat:9> { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> } { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> } <var:D1> := <var:D1> * <var:E> { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> } { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> } <var:D2> := <nat:4> { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:D2> = <nat:4> } { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:D2> = <nat:4> } <var:D2> := <var:D2> * <var:E> { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:D2> = <nat:4> * <var:Q> } { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:D2> = <nat:4> * <var:Q> } <var:D2> := <var:D2> * <var:E> { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:D2> = <nat:4> * <var:Q> ^ <nat:2> } { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:D2> = <nat:4> * <var:Q> ^ <nat:2> } <var:S> := <var:D2> { <var:E> = <var:Q> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> * <var:Q> \land <var:S> = <nat:4> * <var:Q> ^ <nat:2> } \end{verbatim} Advancing on , we see \begin{verbatim} { <var:E> = <var:Q> } <var:D0> := <nat:6> { <var:E> = <var:Q> \land <var:D0> = <nat:6> } \end{verbatim} This is guaranteed with the environment update scheme found in Hoare reasoning . Taking a look at the next line of code in our set of instructions , \begin{verbatim} { <var:E> = <var:Q> } <var:D0> := <nat:6> { <var:E> = <var:Q> \land <var:D0> = <nat:6> } \end{verbatim} This is shown with the variable binding law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:E> = <var:Q> }} <var:D0> := <nat:6> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:E> ; <var:D2> := <nat:4> ; <var:D2> := <var:D2> * <var:E> ; <var:D2> := <var:D2> * <var:E> ; <var:S> := <var:D2> ; <var:S> := <var:S> + <var:D1> ; <var:S> := <var:S> + <var:D0> {{ <var:S> = <nat:4> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:Q> /\ <var:D2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:Q> /\ <var:D2> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:Q> /\ <var:D2> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:Q> /\ <var:S> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:D0> = <nat:6> /\ <var:S> = <nat:4> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:S> = <nat:4> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 