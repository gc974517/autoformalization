\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:l> ; <var:S2> := <var:S1> * <var:l> ; <var:S3> := <var:S2> * <var:l> ; <var:S0> := <nat:1> ; <var:S2> := <var:S2> * <nat:7> ; <var:S3> := <var:S3> * <nat:9> ; <var:T> := <var:S3> <var:T> := <var:T> + <var:S2> <var:T> := <var:T> + <var:S0> \end{verbatim} Allow $ <var:l> = <var:C> $ prior to interpreting the set of commands , it follows that we have $ <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> + <nat:1> $ after segment of code is done . \end{theorem} \begin{proof} The way to prove correctness for our code can be seen by Hoare reasoning . Taking another step toward the upcoming bit of code found in the series of instructions , the variable update line \verb | <var:S1> := <var:l> ; | . This command moves the precondition $ \{ <var:l> = <var:C> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \} $ . This is sound through the assignment inference rule defined by Hoare logic . Jumping to the proceeding bit of code found in the set of instructions , the binding line \verb | <var:S2> := <var:S1> * <var:l> ; | . This statement forwards the precondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \} $ to the condition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <var:C> ^ <nat:2> \} $ . This is guaranteed with the assignment rule found in usual Hoare techniques . Paying attention to the next line found in the code segment , the line assigning $ <var:S2> * <var:l> $ toward $ <var:S3>$ . This advances the precondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <var:C> ^ <nat:2> \} $ as $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <var:C> ^ <nat:2> \land <var:S3> = <var:C> ^ <nat:3> \} $ . Stepping forward , we see the statement \verb | <var:S0> := <nat:1> ; | . This advances $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <var:C> ^ <nat:2> \land <var:S3> = <var:C> ^ <nat:3> \} $ as the condition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <var:C> ^ <nat:2> \land <var:S3> = <var:C> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Taking another step toward the next line of code contained in the segment of code , we see the variable assignmet statement \verb | <var:S2> := <var:S2> * <nat:7> ; | . This command redefines the condition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <var:C> ^ <nat:2> \land <var:S3> = <var:C> ^ <nat:3> \land <var:S0> = <nat:1> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <nat:7> * <var:C> ^ <nat:2> \land <var:S3> = <var:C> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Immediately after , we see the code \verb | <var:S3> := <var:S3> * <nat:9> ; | . This line advances the precondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <nat:7> * <var:C> ^ <nat:2> \land <var:S3> = <var:C> ^ <nat:3> \land <var:S0> = <nat:1> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <nat:7> * <var:C> ^ <nat:2> \land <var:S3> = <nat:9> * <var:C> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Jumping to the following step seen in our series of instructions , we see the line \verb | <var:T> := <var:S3> | . This code takes the precondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <nat:7> * <var:C> ^ <nat:2> \land <var:S3> = <nat:9> * <var:C> ^ <nat:3> \land <var:S0> = <nat:1> \} $ as $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <nat:7> * <var:C> ^ <nat:2> \land <var:S0> = <nat:1> \land <var:T> = <nat:9> * <var:C> ^ <nat:3> \} $ . Taking another step toward the next bit of code found in the set of instructions , we have the variable update line \verb | <var:T> := <var:T> + <var:S2> | . This statement forwards the condition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S2> = <nat:7> * <var:C> ^ <nat:2> \land <var:S0> = <nat:1> \land <var:T> = <nat:9> * <var:C> ^ <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S0> = <nat:1> \land <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> \} $ . Moving forward to the next step , we have the variable update command yielding $ <var:T> + <var:S0$ into $ <var:T>$ . This line redefines the condition $ \{ <var:l> = <var:C> \land <var:S1> = <var:C> \land <var:S0> = <nat:1> \land <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> \} $ as $ \{ <var:l> = <var:C> \land <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:l> = <var:C> }} <var:S1> := <var:l> ; <var:S2> := <var:S1> * <var:l> ; <var:S3> := <var:S2> * <var:l> ; <var:S0> := <nat:1> ; <var:S2> := <var:S2> * <nat:7> ; <var:S3> := <var:S3> * <nat:9> ; <var:T> := <var:S3> <var:T> := <var:T> + <var:S2> <var:T> := <var:T> + <var:S0> {{ <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S2> = <var:C> ^ <nat:2> /\ <var:S3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S2> = <var:C> ^ <nat:2> /\ <var:S3> = <var:C> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S2> = <nat:7> * <var:C> ^ <nat:2> /\ <var:S3> = <var:C> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S2> = <nat:7> * <var:C> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:C> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S2> = <nat:7> * <var:C> ^ <nat:2> /\ <var:S0> = <nat:1> /\ <var:T> = <nat:9> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:S1> = <var:C> /\ <var:S0> = <nat:1> /\ <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:T> = <nat:9> * <var:C> ^ <nat:3> + <nat:7> * <var:C> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 