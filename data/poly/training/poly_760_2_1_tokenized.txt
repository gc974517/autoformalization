\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:1> ; <var:h> := <var:a0> \end{verbatim} Allow it to be that $ <var:e> = <var:y> $ prior to evaluating this list of instructions it follows that we have $ <var:h> = <nat:1> $ . \end{theorem} \begin{proof} The proof of the list of instructions can be demonstrated with typical Hoare reasoning . Taking another step toward the subsequent line contained in our series of instructions , we have the environment update statement assigning $ <nat:1> $ to $ <var:a0>$ . This statement forwards the condition $ \{ <var:e> = <var:y> \} $ as $ \{ <var:e> = <var:y> \land <var:a0> = <nat:1> \} $ . This is rigorously given with the assignment scheme defined in standard Hoare reasoning . Considering the next line of code contained in our set of commands , we have the statement letting $ <var:a0$ into $ <var:h>$ . This line forwards the condition $ \{ <var:e> = <var:y> \land <var:a0> = <nat:1> \} $ into $ \{ <var:e> = <var:y> \land <var:h> = <nat:1> \} $ . This is known to be sound using the assignment law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:e> = <var:y> }} <var:a0> := <nat:1> ; <var:h> := <var:a0> {{ <var:h> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:h> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 