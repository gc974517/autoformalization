\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:2> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:v> ; <var:n> := <var:H1> ; <var:n> := <var:n> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:v> = <var:W> $ prior to the evaluation of the set of commands it follows that we see $ <var:n> = <nat:6> \cdot <var:W> + <nat:2> $ once set of instructions has exited . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:v> = <var:W> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:v> = <var:W> \land <var:H0> = <nat:2> \} \\ <var:H1> := <nat:6> ; \\ \{ <var:v> = <var:W> \land <var:H0> = <nat:2> \land <var:H1> = <nat:6> \} \\ <var:H1> := <var:H1> * <var:v> ; \\ \{ <var:v> = <var:W> \land <var:H0> = <nat:2> \land <var:H1> = <nat:6> * <var:W> \} \\ <var:n> := <var:H1> ; \\ \{ <var:v> = <var:W> \land <var:H0> = <nat:2> \land <var:n> = <nat:6> * <var:W> \} \\ <var:n> := <var:n> + <var:H0> \\ \{ <var:v> = <var:W> \land <var:n> = <nat:6> * <var:W> + <nat:2> \} \end{eqnarray} Thusly , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:v> ; <var:n> := <var:H1> ; <var:n> := <var:n> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:v> = <var:W> }} <def:poly> {{ <var:n> = <nat:6> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:H0> = <nat:2> /\ <var:n> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:n> = <nat:6> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 