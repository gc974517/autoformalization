\begin{document} \begin{theorem} Define the following program in \emph{Imp} as \begin{verbatim} <var:s1> := <var:p> ; <var:s2> := <var:s1> * <var:p> ; <var:s3> := <var:s2> * <var:p> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:1> ; <var:s3> := <var:s3> * <nat:5> ; <var:G> := <var:s3> <var:G> := <var:G> + <var:s2> <var:G> := <var:G> + <var:s1> <var:G> := <var:G> + <var:s0> \end{verbatim} Allowing that we have $ <var:p> = <var:E> $ before running this list of instructions , it follows that we have $ <var:G> = <nat:5> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} Proving correctness for our set of instructions is accomplished through usual Hoare reasoning . Now , we have the variable binding code \verb | <var:s1> := <var:p> ; | . This advances the condition $ \{ <var:p> = <var:E> \} $ into the condition $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \} $ . Advancing to the proceeding step found in the list of commands , the assignment statement \verb | <var:s2> := <var:s1> * <var:p> ; | . This transfers $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \} $ as the condition $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \land <var:s2> = <var:E> ^ <nat:2> \} $ . This is deduced using the assignment rule given by typical Hoare reasoning . Looking at the following step seen in our set of commands , we have the variable update line \verb | <var:s3> := <var:s2> * <var:p> ; | . This statement advances the condition $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \land <var:s2> = <var:E> ^ <nat:2> \} $ as $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \land <var:s2> = <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \} $ . Taking another step toward the subsequent bit of code found in our set of commands , we have the binding code giving $ <nat:7> $ toward $ <var:s0>$ . This moves the condition $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \land <var:s2> = <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \} $ into the postcondition $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \land <var:s2> = <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ . This is shown using the assignment scheme obtained from usual Hoare reasoning . Moving forward to the next piece of code in our list of commands , the binding command \verb | <var:s1> := <var:s1> * <nat:4> ; | . This command takes the precondition $ \{ <var:p> = <var:E> \land <var:s1> = <var:E> \land <var:s2> = <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ to the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ . This is known to be sound by the assignment rule obtained from typical Hoare reasoning . Focusing on the proceeding bit of code contained in the set of instructions , we have the variable assignmet line binding $ <var:s2> * <nat:1> $ into $ <var:s2>$ . This takes the precondition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ into the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <nat:1> \times <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ . Moving on to the next step , we see the assignment command giving $ <var:s3> * <nat:5> $ into $ <var:s3>$ . This transfers the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <nat:1> \times <var:E> ^ <nat:2> \land <var:s3> = <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ into the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <nat:1> \times <var:E> ^ <nat:2> \land <var:s3> = <nat:5> \times <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ . This is shown to be logically sound using the assignment inference rule defined by typical Hoare logic . Shifting focus toward the following bit of code in our list of instructions , we have the environment update statement binding $ <var:s3$ into $ <var:G>$ . This redefines the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <nat:1> \times <var:E> ^ <nat:2> \land <var:s3> = <nat:5> \times <var:E> ^ <nat:3> \land <var:s0> = <nat:7> \} $ toward the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <nat:1> \times <var:E> ^ <nat:2> \land <var:s0> = <nat:7> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> \} $ . Shifting focus toward the following line of code seen in the code segment , the environment update command \verb | <var:G> := <var:G> + <var:s2> | . This transfers the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s2> = <nat:1> \times <var:E> ^ <nat:2> \land <var:s0> = <nat:7> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> \} $ into $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s0> = <nat:7> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> \} $ . This is ensured using the assignment rule defined in typical Hoare reasoning . Honing in on the subsequent command in the list of instructions , the variable binding line \verb | <var:G> := <var:G> + <var:s1> | . This line transfers the condition $ \{ <var:p> = <var:E> \land <var:s1> = <nat:4> \times <var:E> \land <var:s0> = <nat:7> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> \} $ as the condition $ \{ <var:p> = <var:E> \land <var:s0> = <nat:7> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> \} $ . Moving on , we see the binding code assigning $ <var:G> + <var:s0$ into $ <var:G>$ . This statement forwards $ \{ <var:p> = <var:E> \land <var:s0> = <nat:7> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> \} $ toward the postcondition $ \{ <var:p> = <var:E> \land <var:G> = <nat:5> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:s1> := <var:p> ; <var:s2> := <var:s1> * <var:p> ; <var:s3> := <var:s2> * <var:p> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:1> ; <var:s3> := <var:s3> * <nat:5> ; <var:G> := <var:s3> <var:G> := <var:G> + <var:s2> <var:G> := <var:G> + <var:s1> <var:G> := <var:G> + <var:s0> {{ <var:G> = <nat:5> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <var:E> /\ <var:s2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <var:E> /\ <var:s2> = <var:E> ^ <nat:2> /\ <var:s3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <var:E> /\ <var:s2> = <var:E> ^ <nat:2> /\ <var:s3> = <var:E> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <nat:4> * <var:E> /\ <var:s2> = <var:E> ^ <nat:2> /\ <var:s3> = <var:E> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <nat:4> * <var:E> /\ <var:s2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:s3> = <var:E> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <nat:4> * <var:E> /\ <var:s2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:s3> = <nat:5> * <var:E> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <nat:4> * <var:E> /\ <var:s2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:s0> = <nat:7> /\ <var:G> = <nat:5> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s1> = <nat:4> * <var:E> /\ <var:s0> = <nat:7> /\ <var:G> = <nat:5> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:s0> = <nat:7> /\ <var:G> = <nat:5> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:G> = <nat:5> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 