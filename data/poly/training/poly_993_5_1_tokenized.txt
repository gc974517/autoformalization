\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:G> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:3> ; <var:M> := <var:E1> <var:M> := <var:M> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:G> = <var:a> $ --- taking integers $ <var:a> $ --- ahead of the evaluation of this list of instructions it follows that we have $ <var:M> = <nat:3> * <var:a> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:G> = <var:a> \} \\ <var:E1> := <var:G> ; \\ \{ <var:G> = <var:a> \land <var:E1> = <var:a> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:G> = <var:a> \land <var:E1> = <var:a> \land <var:E0> = <nat:9> \} \\ <var:E1> := <var:E1> * <nat:3> ; \\ \{ <var:G> = <var:a> \land <var:E1> = <nat:3> \times <var:a> \land <var:E0> = <nat:9> \} \\ <var:M> := <var:E1> \\ \{ <var:G> = <var:a> \land <var:E0> = <nat:9> \land <var:M> = <nat:3> \times <var:a> \} \\ <var:M> := <var:M> + <var:E0> \\ \{ <var:G> = <var:a> \land <var:M> = <nat:3> \times <var:a> + <nat:9> \} \end{eqnarray} As a result , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:G> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:3> ; <var:M> := <var:E1> <var:M> := <var:M> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:G> = <var:a> }} <def:poly> {{ <var:M> = <nat:3> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:E1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:E1> = <var:a> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:E1> = <nat:3> * <var:a> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:E0> = <nat:9> /\ <var:M> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:M> = <nat:3> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 