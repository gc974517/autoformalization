\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P1> := <var:x> ; <var:P2> := <var:P1> * <var:x> ; <var:P3> := <var:P2> * <var:x> ; <var:P4> := <var:P3> * <var:x> ; <var:P5> := <var:P4> * <var:x> ; <var:P0> := <nat:3> ; <var:P2> := <var:P2> * <nat:1> ; <var:P5> := <var:P5> * <nat:2> ; <var:q> := <var:P5> <var:q> := <var:q> + <var:P2> <var:q> := <var:q> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:x> = <var:K> $ for whole numbers $ <var:K> $ ahead of evaluating our code segment , it must be that $ <var:q> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be done using the following decorated series of commands . \begin{eqnarray} \{ <var:x> = <var:K> \} \\ <var:P1> := <var:x> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \} \\ <var:P2> := <var:P1> * <var:x> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <var:K> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:x> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \} \\ <var:P4> := <var:P3> * <var:x> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \land <var:P4> = <var:K> ^ <nat:4> \} \\ <var:P5> := <var:P4> * <var:x> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \land <var:P4> = <var:K> ^ <nat:4> \land <var:P5> = <var:K> ^ <nat:5> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \land <var:P4> = <var:K> ^ <nat:4> \land <var:P5> = <var:K> ^ <nat:5> \land <var:P0> = <nat:3> \} \\ <var:P2> := <var:P2> * <nat:1> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <nat:1> \cdot <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \land <var:P4> = <var:K> ^ <nat:4> \land <var:P5> = <var:K> ^ <nat:5> \land <var:P0> = <nat:3> \} \\ <var:P5> := <var:P5> * <nat:2> ; \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <nat:1> \cdot <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \land <var:P4> = <var:K> ^ <nat:4> \land <var:P5> = <nat:2> \cdot <var:K> ^ <nat:5> \land <var:P0> = <nat:3> \} \\ <var:q> := <var:P5> \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P2> = <nat:1> \cdot <var:K> ^ <nat:2> \land <var:P3> = <var:K> ^ <nat:3> \land <var:P4> = <var:K> ^ <nat:4> \land <var:P0> = <nat:3> \land <var:q> = <nat:2> \cdot <var:K> ^ <nat:5> \} \\ <var:q> := <var:q> + <var:P2> \\ \{ <var:x> = <var:K> \land <var:P1> = <var:K> \land <var:P0> = <nat:3> \land <var:q> = <nat:2> \cdot <var:K> ^ <nat:5> + <nat:1> \cdot <var:K> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:P0> \\ \{ <var:x> = <var:K> \land <var:q> = <nat:2> \cdot <var:K> ^ <nat:5> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Definition <var:P5> : string := " <var:P5> " . Definition <def:poly> := <var:P1> := <var:x> ; <var:P2> := <var:P1> * <var:x> ; <var:P3> := <var:P2> * <var:x> ; <var:P4> := <var:P3> * <var:x> ; <var:P5> := <var:P4> * <var:x> ; <var:P0> := <nat:3> ; <var:P2> := <var:P2> * <nat:1> ; <var:P5> := <var:P5> * <nat:2> ; <var:q> := <var:P5> <var:q> := <var:q> + <var:P2> <var:q> := <var:q> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:x> = <var:K> }} <def:poly> {{ <var:q> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> /\ <var:P4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> /\ <var:P4> = <var:K> ^ <nat:4> /\ <var:P5> = <var:K> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> /\ <var:P4> = <var:K> ^ <nat:4> /\ <var:P5> = <var:K> ^ <nat:5> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> /\ <var:P4> = <var:K> ^ <nat:4> /\ <var:P5> = <var:K> ^ <nat:5> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> /\ <var:P4> = <var:K> ^ <nat:4> /\ <var:P5> = <nat:2> * <var:K> ^ <nat:5> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:P3> = <var:K> ^ <nat:3> /\ <var:P4> = <var:K> ^ <nat:4> /\ <var:P0> = <nat:3> /\ <var:q> = <nat:2> * <var:K> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:P1> = <var:K> /\ <var:P0> = <nat:3> /\ <var:q> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:q> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 