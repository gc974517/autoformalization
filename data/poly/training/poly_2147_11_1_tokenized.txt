\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:x1> := <var:c> ; <var:x2> := <var:x1> * <var:c> ; <var:x3> := <var:x2> * <var:c> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:4> ; <var:x2> := <var:x2> * <nat:6> ; <var:x3> := <var:x3> * <nat:9> ; <var:t> := <var:x3> <var:t> := <var:t> + <var:x2> <var:t> := <var:t> + <var:x1> <var:t> := <var:t> + <var:x0> \end{verbatim} Assume --- for some integers $ <var:f> $ --- that $ <var:c> = <var:f> $ prior to the execution of the series of instructions , it follows that we have $ <var:t> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:5> $ once set of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for our program is accomplished using typical Hoare logic . Paying attention to the subsequent piece of code seen in our program , we see the binding statement \verb | <var:x1> := <var:c> ; | . This transfers the condition $ \{ <var:c> = <var:f> \} $ into the postcondition $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \} $ . This is known to be sound through the assignment law defined in usual Hoare techniques . Moving onward , we have the command letting $ <var:x1> * <var:c> $ into $ <var:x2>$ . This forwards the condition $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \} $ toward $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \} $ . Observing the following step seen in the code segment , we see the assignment code \verb | <var:x3> := <var:x2> * <var:c> ; | . This takes the condition $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \} $ toward the condition $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \} $ . Considering the proceeding line of code seen in the set of commands , we have the binding command yielding $ <nat:5> $ toward $ <var:x0>$ . This redefines the precondition $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \} $ into $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ . This is ensured by the assignment law given by standard Hoare logic . Moving on , we have the binding statement letting $ <var:x1> * <nat:4> $ to $ <var:x1>$ . This line advances the condition $ \{ <var:c> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ as the postcondition $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ . This is ensured through the assignment law given by standard Hoare techniques . Advancing , we have the variable update code letting $ <var:x2> * <nat:6> $ as $ <var:x2>$ . This command redefines the precondition $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ to the postcondition $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ . Jumping to the upcoming line in the set of instructions , the variable assignmet code \verb | <var:x3> := <var:x3> * <nat:9> ; | . This command forwards the precondition $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ as $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:x3> = <nat:9> \times <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ . Moving on to the next bit of code seen in our series of instructions , we see the variable update line giving $ <var:x3$ to $ <var:t>$ . This forwards $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:x3> = <nat:9> \times <var:f> ^ <nat:3> \land <var:x0> = <nat:5> \} $ into $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:x0> = <nat:5> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> \} $ . This is rigorously given by the assignment scheme found in typical Hoare reasoning . Honing in on the next piece of code found in our segment of code , we have the assignment statement \verb | <var:t> := <var:t> + <var:x2> | . This moves the condition $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x2> = <nat:6> \times <var:f> ^ <nat:2> \land <var:x0> = <nat:5> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> \} $ to the postcondition $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x0> = <nat:5> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> \} $ . Next , the line assigning $ <var:t> + <var:x1$ as $ <var:t>$ . This code moves $ \{ <var:c> = <var:f> \land <var:x1> = <nat:4> \times <var:f> \land <var:x0> = <nat:5> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> \} $ to $ \{ <var:c> = <var:f> \land <var:x0> = <nat:5> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> \} $ . Now , we see the variable assignmet statement \verb | <var:t> := <var:t> + <var:x0> | . This redefines the precondition $ \{ <var:c> = <var:f> \land <var:x0> = <nat:5> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> \} $ toward $ \{ <var:c> = <var:f> \land <var:t> = <nat:9> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:5> \} $ . This is ensured by the assignment rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:c> = <var:f> }} <var:x1> := <var:c> ; <var:x2> := <var:x1> * <var:c> ; <var:x3> := <var:x2> * <var:c> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:4> ; <var:x2> := <var:x2> * <nat:6> ; <var:x3> := <var:x3> * <nat:9> ; <var:t> := <var:x3> <var:t> := <var:t> + <var:x2> <var:t> := <var:t> + <var:x1> <var:t> := <var:t> + <var:x0> {{ <var:t> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <nat:4> * <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <nat:4> * <var:f> /\ <var:x2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <nat:4> * <var:f> /\ <var:x2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:f> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <nat:4> * <var:f> /\ <var:x2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:x0> = <nat:5> /\ <var:t> = <nat:9> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x1> = <nat:4> * <var:f> /\ <var:x0> = <nat:5> /\ <var:t> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:x0> = <nat:5> /\ <var:t> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:t> = <nat:9> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 