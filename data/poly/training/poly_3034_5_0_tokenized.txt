\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:d> ; <var:v> := <var:G1> ; <var:v> := <var:v> + <var:G0> \end{verbatim} Assume ( given all $ <var:I> \in \mathbb{N} $ ) that we have $ <var:d> = <var:I> $ ahead of running this program , it must be that we see $ <var:v> = <nat:4> * <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is accomplished using Hoare techniques . Paying attention to the proceeding statement seen in the code , we see the assignment command binding $ <nat:4> $ as $ <var:G0>$ . This forwards the condition $ \{ <var:d> = <var:I> \} $ into the postcondition $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \} $ . This is guaranteed using the assignment law found in Hoare techniques . Stepping forward , the assignment command yielding $ <nat:4> $ into $ <var:G1>$ . This advances the precondition $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \} $ toward the postcondition $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \} $ . This is shown by the assignment inference rule defined by usual Hoare logic . Observing the next step contained in the list of commands , we see the variable update line yielding $ <var:G1> * <var:d> $ to $ <var:G1>$ . This command takes $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \} $ to the postcondition $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:I> \} $ . Keeping momentum , we see the binding command defining $ <var:G1> $ as $ <var:v>$ . This advances $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:I> \} $ toward $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \land <var:v> = <nat:4> \cdot <var:I> \} $ . Going forward , the assignment statement letting $ <var:v> + <var:G0$ into $ <var:v>$ . This code redefines $ \{ <var:d> = <var:I> \land <var:G0> = <nat:4> \land <var:v> = <nat:4> \cdot <var:I> \} $ to the postcondition $ \{ <var:d> = <var:I> \land <var:v> = <nat:4> \cdot <var:I> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:d> = <var:I> }} <var:G0> := <nat:4> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:d> ; <var:v> := <var:G1> ; <var:v> := <var:v> + <var:G0> {{ <var:v> = <nat:4> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:G0> = <nat:4> /\ <var:v> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:v> = <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 