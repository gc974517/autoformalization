\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <var:S> * <var:L> ; <var:S> := <var:S> * <var:L> ; <var:S> := <nat:3> + <var:S> * <var:L> ; <var:S> := <nat:2> + <var:S> * <var:L> ; <var:S> := <nat:3> + <var:S> * <var:L> ; <var:S> := <nat:3> + <var:S> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Assuming $ <var:L> = <var:q> $ --- given any $ <var:q> \in \mathbb{N} $ --- before interpreting the code segment it must be that we have $ <var:S> = <nat:1> \cdot <var:q> ^ <nat:6> + <nat:3> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:3> $ after list of commands exits . \end{theorem} \begin{proof} The method of proof for this program is demonstrated with Hoare techniques . Moving on to the following statement seen in our series of instructions , the variable assignmet code giving $ <nat:1> $ as $ <var:S>$ . This code transfers the precondition $ \{ <var:L> = <var:q> \} $ as $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \} $ . Advancing to the subsequent step in the code , we have the environment update statement letting $ <var:S> * <var:L> $ to $ <var:S>$ . This command moves the precondition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \} $ as $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> + \} $ . This is given through the assignment rule of standard Hoare logic . Considering the following bit of code found in the series of instructions , the binding code assigning $ <var:S> * <var:L> $ toward $ <var:S>$ . This line takes the precondition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> + \} $ to the condition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:2> + \} $ . Taking a look at the following bit of code seen in our segment of code , the assignment command yielding $ <nat:3> + <var:S> * <var:L> $ to $ <var:S>$ . This redefines $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:2> + \} $ to the postcondition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:3> + <nat:3> \} $ . This is shown to be logically sound with the assignment scheme defined in standard Hoare techniques . Immediately after , we see the variable binding statement yielding $ <nat:2> + <var:S> * <var:L> $ into $ <var:S>$ . This code forwards the precondition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:3> + <nat:3> \} $ as the condition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:4> + <nat:3> \times <var:q> + <nat:2> \} $ . Moving forward , the variable binding statement assigning $ <nat:3> + <var:S> * <var:L> $ to $ <var:S>$ . This transfers the condition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:4> + <nat:3> \times <var:q> + <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:5> + <nat:3> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:3> \} $ . Honing in on the subsequent line found in the set of commands , we have the environment update code \verb | <var:S> := <nat:3> + <var:S> * <var:L> | . This statement moves $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:5> + <nat:3> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:3> \} $ into the condition $ \{ <var:L> = <var:q> \land <var:S> = <nat:1> \times <var:q> ^ <nat:6> + <nat:3> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:1> ; <var:S> := <var:S> * <var:L> ; <var:S> := <var:S> * <var:L> ; <var:S> := <nat:3> + <var:S> * <var:L> ; <var:S> := <nat:2> + <var:S> * <var:L> ; <var:S> := <nat:3> + <var:S> * <var:L> ; <var:S> := <nat:3> + <var:S> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:L> = <var:q> }} <def:poly> {{ <var:S> = <nat:1> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> * <var:q> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> * <var:q> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:S> = <nat:1> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 