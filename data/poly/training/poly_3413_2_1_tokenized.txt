\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:8> ; <var:W> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:U> = <var:Y> $ before executing this list of commands , it holds that we have $ <var:W> = <nat:8> $ . \end{theorem} \begin{proof} The proof of our program is accomplished through typical Hoare logic . Stepping through , we have \begin{verbatim} { <var:U> = <var:Y> } <var:J0> := <nat:8> { <var:U> = <var:Y> \land <var:J0> = <nat:8> } { <var:U> = <var:Y> \land <var:J0> = <nat:8> } <var:W> := <var:J0{ <var:U> = <var:Y> \land <var:W> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:8> ; <var:W> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:U> = <var:Y> }} <def:poly> {{ <var:W> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:W> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 