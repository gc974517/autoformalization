\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:E0> := <nat:7> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:D> ; <var:L> := <var:E1> ; <var:L> := <var:L> + <var:E0> \end{verbatim} Assume $ <var:D> = <var:a> $ prior to running this series of commands , it must be that we see $ <var:L> = <nat:4> * <var:a> + <nat:7> $ when code has finished . \end{theorem} \begin{proof} The course of logic for this set of commands is demonstrated by the below decorated code segment . \begin{eqnarray} \{ <var:D> = <var:a> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:D> = <var:a> \land <var:E0> = <nat:7> \} \\ <var:E1> := <nat:4> ; \\ \{ <var:D> = <var:a> \land <var:E0> = <nat:7> \land <var:E1> = <nat:4> \} \\ <var:E1> := <var:E1> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:E0> = <nat:7> \land <var:E1> = <nat:4> \times <var:a> \} \\ <var:L> := <var:E1> ; \\ \{ <var:D> = <var:a> \land <var:E0> = <nat:7> \land <var:L> = <nat:4> \times <var:a> \} \\ <var:L> := <var:L> + <var:E0> \\ \{ <var:D> = <var:a> \land <var:L> = <nat:4> \times <var:a> + <nat:7> \} \end{eqnarray} Applying Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:D> = <var:a> }} <var:E0> := <nat:7> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:D> ; <var:L> := <var:E1> ; <var:L> := <var:L> + <var:E0> {{ <var:L> = <nat:4> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:E0> = <nat:7> /\ <var:L> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:L> = <nat:4> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 