\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:q1> := <var:N> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:8> ; <var:T> := <var:q1> <var:T> := <var:T> + <var:q0> \end{verbatim} Assume $ <var:N> = <var:A> $ prior to the evaluation of the series of commands , it follows that $ <var:T> = <nat:8> \cdot <var:A> + <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:N> = <var:A> \} \\ <var:q1> := <var:N> ; \\ \{ <var:N> = <var:A> \land <var:q1> = <var:A> \} \\ <var:q0> := <nat:8> ; \\ \{ <var:N> = <var:A> \land <var:q1> = <var:A> \land <var:q0> = <nat:8> \} \\ <var:q1> := <var:q1> * <nat:8> ; \\ \{ <var:N> = <var:A> \land <var:q1> = <nat:8> * <var:A> \land <var:q0> = <nat:8> \} \end{eqnarray} Furthering executing the set of instructions gives : \begin{eqnarray} <var:T> := <var:q1> \\ \{ <var:N> = <var:A> \land <var:q0> = <nat:8> \land <var:T> = <nat:8> * <var:A> \} \\ <var:T> := <var:T> + <var:q0> \\ \{ <var:N> = <var:A> \land <var:T> = <nat:8> * <var:A> + <nat:8> \} \end{eqnarray} Therefore , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:N> = <var:A> }} <var:q1> := <var:N> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:8> ; <var:T> := <var:q1> <var:T> := <var:T> + <var:q0> {{ <var:T> = <nat:8> * <var:A> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:q1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:q1> = <var:A> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:q1> = <nat:8> * <var:A> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:q0> = <nat:8> /\ <var:T> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:T> = <nat:8> * <var:A> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 