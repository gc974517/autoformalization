\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:S1> := <var:q> ; <var:S0> := <nat:6> ; <var:S1> := <var:S1> * <nat:1> ; <var:n> := <var:S1> <var:n> := <var:n> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:q> = <var:A> $ ahead of executing the list of commands , it must be that we see $ <var:n> = <nat:1> \cdot <var:A> + <nat:6> $ . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:q> = <var:A> \} \\ <var:S1> := <var:q> ; \\ \{ <var:q> = <var:A> \land <var:S1> = <var:A> \} \\ <var:S0> := <nat:6> ; \\ \{ <var:q> = <var:A> \land <var:S1> = <var:A> \land <var:S0> = <nat:6> \} \\ <var:S1> := <var:S1> * <nat:1> ; \\ \{ <var:q> = <var:A> \land <var:S1> = <nat:1> \times <var:A> \land <var:S0> = <nat:6> \} \\ <var:n> := <var:S1> \\ \{ <var:q> = <var:A> \land <var:S0> = <nat:6> \land <var:n> = <nat:1> \times <var:A> \} \\ <var:n> := <var:n> + <var:S0> \\ \{ <var:q> = <var:A> \land <var:n> = <nat:1> \times <var:A> + <nat:6> \} \end{eqnarray} Considering the preceding argument , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S1> := <var:q> ; <var:S0> := <nat:6> ; <var:S1> := <var:S1> * <nat:1> ; <var:n> := <var:S1> <var:n> := <var:n> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:q> = <var:A> }} <def:poly> {{ <var:n> = <nat:1> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:S1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:S1> = <var:A> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:S1> = <nat:1> * <var:A> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:S0> = <nat:6> /\ <var:n> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:n> = <nat:1> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 