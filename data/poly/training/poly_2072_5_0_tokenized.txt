\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:3> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:C> ; <var:L> := <var:Q1> ; <var:L> := <var:L> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:C> = <var:W> $ --- taking whole numbers $ <var:W> $ --- before the evaluation of the segment of code , it must be that we have $ <var:L> = <nat:8> \cdot <var:W> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:W> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:C> = <var:W> \land <var:Q0> = <nat:3> \} \\ <var:Q1> := <nat:8> ; \\ \{ <var:C> = <var:W> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:8> \} \\ <var:Q1> := <var:Q1> * <var:C> ; \\ \{ <var:C> = <var:W> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:8> \times <var:W> \} \\ <var:L> := <var:Q1> ; \\ \{ <var:C> = <var:W> \land <var:Q0> = <nat:3> \land <var:L> = <nat:8> \times <var:W> \} \\ <var:L> := <var:L> + <var:Q0> \\ \{ <var:C> = <var:W> \land <var:L> = <nat:8> \times <var:W> + <nat:3> \} \end{eqnarray} The application of typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:C> ; <var:L> := <var:Q1> ; <var:L> := <var:L> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:C> = <var:W> }} <def:poly> {{ <var:L> = <nat:8> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:Q0> = <nat:3> /\ <var:L> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:L> = <nat:8> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 