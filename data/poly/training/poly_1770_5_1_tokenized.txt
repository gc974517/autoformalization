\begin{document} \begin{theorem} Consider the following set of commands as follows \begin{verbatim} <var:A1> := <var:I> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:6> ; <var:x> := <var:A1> <var:x> := <var:x> + <var:A0> \end{verbatim} Given , given some positive numbers $ <var:G> $ , it to hold that $ <var:I> = <var:G> $ prior to the execution of this code , it must be that we see $ <var:x> = <nat:6> \cdot <var:G> + <nat:9> $ after code segment terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be demonstrated using typical Hoare reasoning . Looking at the subsequent pieces of code found in our set of instructions , we see \begin{eqnarray} \{ <var:I> = <var:G> \} \, <var:A1> := <var:I> \, \{ <var:I> = <var:G> \land <var:A1> = <var:G> \} \\ \{ <var:I> = <var:G> \land <var:A1> = <var:G> \} \, <var:A0> := <nat:9> \, \{ <var:I> = <var:G> \land <var:A1> = <var:G> \land <var:A0> = <nat:9> \} \\ \{ <var:I> = <var:G> \land <var:A1> = <var:G> \land <var:A0> = <nat:9> \} \, <var:A1> := <var:A1> * <nat:6> \, \{ <var:I> = <var:G> \land <var:A1> = <nat:6> * <var:G> \land <var:A0> = <nat:9> \} \\ \{ <var:I> = <var:G> \land <var:A1> = <nat:6> * <var:G> \land <var:A0> = <nat:9> \} \, <var:x> := <var:A1\, \{ <var:I> = <var:G> \land <var:A0> = <nat:9> \land <var:x> = <nat:6> * <var:G> \} \\ \{ <var:I> = <var:G> \land <var:A0> = <nat:9> \land <var:x> = <nat:6> * <var:G> \} \, <var:x> := <var:x> + <var:A0\, \{ <var:I> = <var:G> \land <var:x> = <nat:6> * <var:G> + <nat:9> \} \end{eqnarray} This is guaranteed by the binding scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:I> = <var:G> }} <var:A1> := <var:I> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:6> ; <var:x> := <var:A1> <var:x> := <var:x> + <var:A0> {{ <var:x> = <nat:6> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:A1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:A1> = <var:G> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:A1> = <nat:6> * <var:G> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:A0> = <nat:9> /\ <var:x> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:x> = <nat:6> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 