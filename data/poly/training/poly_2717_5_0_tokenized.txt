\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:v> ; <var:s> := <var:I1> ; <var:s> := <var:s> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allowing that $ <var:v> = <var:m> $ before the evaluation of the code segment it must be that $ <var:s> = <nat:1> \times <var:m> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code can be shown using the below decorated segment of code . \begin{eqnarray} \{ <var:v> = <var:m> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:v> = <var:m> \land <var:I0> = <nat:8> \} \\ <var:I1> := <nat:1> ; \\ \{ <var:v> = <var:m> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \} \\ <var:I1> := <var:I1> * <var:v> ; \\ \{ <var:v> = <var:m> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:m> \} \\ <var:s> := <var:I1> ; \\ \{ <var:v> = <var:m> \land <var:I0> = <nat:8> \land <var:s> = <nat:1> \times <var:m> \} \\ <var:s> := <var:s> + <var:I0> \\ \{ <var:v> = <var:m> \land <var:s> = <nat:1> \times <var:m> + <nat:8> \} \end{eqnarray} The application of usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:v> ; <var:s> := <var:I1> ; <var:s> := <var:s> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:v> = <var:m> }} <def:poly> {{ <var:s> = <nat:1> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:I0> = <nat:8> /\ <var:s> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:s> = <nat:1> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 