\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:6> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:p> ; <var:N2> := <nat:4> ; <var:N2> := <var:N2> * <var:p> ; <var:N2> := <var:N2> * <var:p> ; <var:D> := <var:N2> ; <var:D> := <var:D> + <var:N1> ; <var:D> := <var:D> + <var:N0> \end{verbatim} Assume that $ <var:p> = <var:W> $ ( for every positive integer coefficients $ <var:W> $ ) before evaluating the code then $ <var:D> = <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is done using typical Hoare logic . Shifting focus toward the following bit of code seen in the list of instructions , we see the binding command assigning $ <nat:6> $ into $ <var:N0>$ . This forwards the precondition $ \{ <var:p> = <var:W> \} $ into $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \} $ . Looking at the following piece of code contained in our set of instructions , the environment update line assigning $ <nat:7> $ toward $ <var:N1>$ . This line advances the precondition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \} $ into the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \} $ . Moving on to the proceeding piece of code seen in our set of instructions , we have the variable update code \verb | <var:N1> := <var:N1> * <var:p> ; | . This takes the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \} $ to the postcondition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \} $ . Jumping to the following bit of code contained in our list of instructions , we see the assignment command giving $ <nat:4> $ to $ <var:N2>$ . This advances the precondition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \} $ into $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:N2> = <nat:4> \} $ . This is shown through the assignment rule obtained from Hoare logic . Going to the next step , we have the variable update line assigning $ <var:N2> * <var:p> $ toward $ <var:N2>$ . This code takes the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:N2> = <nat:4> \} $ into the postcondition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:N2> = <nat:4> \cdot <var:W> \} $ . This is deduced using the assignment law of usual Hoare logic . Jumping to the upcoming step contained in the program , we see the command defining $ <var:N2> * <var:p> $ toward $ <var:N2>$ . This forwards the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:N2> = <nat:4> \cdot <var:W> \} $ into the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:N2> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ . Moving onward , we see the binding line \verb | <var:D> := <var:N2> ; | . This code transfers the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:N2> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ into $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:D> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ . This is guaranteed through the assignment law of Hoare logic . Looking at the upcoming statement seen in the code segment , we see the command assigning $ <var:D> + <var:N1> $ into $ <var:D>$ . This transfers the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:N1> = <nat:7> \cdot <var:W> \land <var:D> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:D> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:7> \cdot <var:W> \} $ . This is shown using the assignment rule obtained from usual Hoare techniques . Considering the following step in the set of instructions , we see the variable binding statement binding $ <var:D> + <var:N0$ into $ <var:D>$ . This redefines the condition $ \{ <var:p> = <var:W> \land <var:N0> = <nat:6> \land <var:D> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:7> \cdot <var:W> \} $ toward the condition $ \{ <var:p> = <var:W> \land <var:D> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:7> \cdot <var:W> + <nat:6> \} $ . This is shown using the assignment law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:p> = <var:W> }} <var:N0> := <nat:6> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:p> ; <var:N2> := <nat:4> ; <var:N2> := <var:N2> * <var:p> ; <var:N2> := <var:N2> * <var:p> ; <var:D> := <var:N2> ; <var:D> := <var:D> + <var:N1> ; <var:D> := <var:D> + <var:N0> {{ <var:D> = <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:7> * <var:W> /\ <var:N2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:7> * <var:W> /\ <var:N2> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:7> * <var:W> /\ <var:N2> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:7> * <var:W> /\ <var:D> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:N0> = <nat:6> /\ <var:D> = <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:D> = <nat:4> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 