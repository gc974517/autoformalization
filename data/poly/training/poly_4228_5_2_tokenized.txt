\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y> := <nat:1> ; <var:y> := <nat:4> + <var:y> * <var:T> ; <var:y> := <var:y> * <var:T> ; <var:y> := <nat:2> + <var:y> * <var:T> ; <var:y> := <nat:2> + <var:y> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Given , given any positive integers $ <var:c> $ , $ <var:T> = <var:c> $ before the evaluation of our series of commands , it holds that $ <var:y> = <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions can be shown using Hoare reasoning . Moving forward to the upcoming statement seen in the program , we see the assignment statement \verb | <var:y> := <nat:1> ; | . This statement forwards $ \{ <var:T> = <var:c> \} $ to $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \} $ . Moving forward , we have the variable binding command \verb | <var:y> := <nat:4> + <var:y> * <var:T> ; | . This moves $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \} $ as the condition $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> + <nat:4> \} $ . This is guaranteed by the assignment law defined in usual Hoare techniques . Immediately after , we see the command yielding $ <var:y> * <var:T> $ toward $ <var:y>$ . This statement takes the condition $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> + <nat:4> \} $ into the condition $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + \} $ . Paying attention to the upcoming line of code seen in the series of instructions , we have the variable binding code \verb | <var:y> := <nat:2> + <var:y> * <var:T> ; | . This transfers the condition $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + \} $ as $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \} $ . This is rigorously given by the assignment rule given by Hoare reasoning . Stepping through , we have the statement \verb | <var:y> := <nat:2> + <var:y> * <var:T> | . This line redefines $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \} $ toward $ \{ <var:T> = <var:c> \land <var:y> = <nat:1> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> + <nat:2> \} $ . This is rigorously given by the assignment law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:1> ; <var:y> := <nat:4> + <var:y> * <var:T> ; <var:y> := <var:y> * <var:T> ; <var:y> := <nat:2> + <var:y> * <var:T> ; <var:y> := <nat:2> + <var:y> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:T> = <var:c> }} <def:poly> {{ <var:y> = <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:y> = <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:y> = <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:y> = <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:y> = <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 