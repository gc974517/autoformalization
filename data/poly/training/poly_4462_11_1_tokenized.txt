\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:t> ; <var:Y2> := <var:Y1> * <var:t> ; <var:Y3> := <var:Y2> * <var:t> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:Y2> := <var:Y2> * <nat:9> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:i> := <var:Y3> <var:i> := <var:i> + <var:Y2> <var:i> := <var:i> + <var:Y1> <var:i> := <var:i> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:t> = <var:A> $ prior to the execution of this code segment , it follows that $ <var:i> = <nat:2> \times <var:A> ^ <nat:3> + <nat:9> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> + <nat:6> $ when code is done executing . \end{theorem} \begin{proof} The method of proof for this series of commands is done using Hoare logic . Now , we see \verb | { <var:t> = <var:A> } <var:Y1> := <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> } | , \verb | { <var:t> = <var:A> \land <var:Y1> = <var:A> } <var:Y2> := <var:Y1> * <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> } | , \verb | { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> } <var:Y3> := <var:Y2> * <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> } | , \verb | { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> } <var:Y0> := <nat:6> { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:6> } | , \verb | { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:6> } <var:Y1> := <var:Y1> * <nat:8> { <var:t> = <var:A> \land <var:Y1> = <nat:8> \times <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:6> } | and \verb | { <var:t> = <var:A> \land <var:Y1> = <nat:8> \times <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:6> } <var:Y2> := <var:Y2> * <nat:9> { <var:t> = <var:A> \land <var:Y1> = <nat:8> \times <var:A> \land <var:Y2> = <nat:9> \times <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:6> } | . This is guaranteed with the variable binding inference rule defined in Hoare reasoning . Taking another step toward the proceeding lines of codein the code segment , \verb | { <var:t> = <var:A> } <var:Y1> := <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> } | , \verb | { <var:t> = <var:A> \land <var:Y1> = <var:A> } <var:Y2> := <var:Y1> * <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> } | and \verb | { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> } <var:Y3> := <var:Y2> * <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> } | . Advancing to the next step , we have \verb | { <var:t> = <var:A> } <var:Y1> := <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> } | . This is shown through the variable binding inference rule given in typical Hoare logic . Looking at the subsequent command contained in the set of instructions , \verb | { <var:t> = <var:A> } <var:Y1> := <var:t> { <var:t> = <var:A> \land <var:Y1> = <var:A> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <def:poly> := <var:Y1> := <var:t> ; <var:Y2> := <var:Y1> * <var:t> ; <var:Y3> := <var:Y2> * <var:t> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:Y2> := <var:Y2> * <nat:9> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:i> := <var:Y3> <var:i> := <var:i> + <var:Y2> <var:i> := <var:i> + <var:Y1> <var:i> := <var:i> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:t> = <var:A> }} <def:poly> {{ <var:i> = <nat:2> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:A> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:Y0> = <nat:6> /\ <var:i> = <nat:2> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y0> = <nat:6> /\ <var:i> = <nat:2> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:Y0> = <nat:6> /\ <var:i> = <nat:2> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:i> = <nat:2> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 