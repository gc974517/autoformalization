\begin{document} \begin{theorem} We define a list of commands such that \begin{verbatim} <var:l0> := <nat:8> ; <var:l1> := <nat:7> ; <var:l1> := <var:l1> * <var:J> ; <var:N> := <var:l1> ; <var:N> := <var:N> + <var:l0> \end{verbatim} Given $ <var:J> = <var:r> $ before the execution of our code then $ <var:N> = <nat:7> * <var:r> + <nat:8> $ once code segment has exited . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be seen through usual Hoare logic . Advancing on , we have the line \verb | <var:l0> := <nat:8> ; | . This moves the condition $ \{ <var:J> = <var:r> \} $ into $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \} $ . This is shown to be logically sound with the assignment law given by usual Hoare logic . Moving on to the proceeding command in the set of commands , the assignment code \verb | <var:l1> := <nat:7> ; | . This statement takes $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \} $ toward the condition $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \land <var:l1> = <nat:7> \} $ . Moving forward to the next bit of code found in our list of commands , we see the variable assignmet line defining $ <var:l1> * <var:J> $ into $ <var:l1>$ . This redefines the precondition $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \land <var:l1> = <nat:7> \} $ toward $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \land <var:l1> = <nat:7> \cdot <var:r> \} $ . This is given with the assignment rule defined by typical Hoare reasoning . Honing in on the next command in our series of instructions , we have the variable binding command \verb | <var:N> := <var:l1> ; | . This forwards the condition $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \land <var:l1> = <nat:7> \cdot <var:r> \} $ to $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \land <var:N> = <nat:7> \cdot <var:r> \} $ . Going to the next step , the variable binding command \verb | <var:N> := <var:N> + <var:l0> | . This statement takes the condition $ \{ <var:J> = <var:r> \land <var:l0> = <nat:8> \land <var:N> = <nat:7> \cdot <var:r> \} $ toward the postcondition $ \{ <var:J> = <var:r> \land <var:N> = <nat:7> \cdot <var:r> + <nat:8> \} $ . This is guaranteed by the assignment inference rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <var:l0> := <nat:8> ; <var:l1> := <nat:7> ; <var:l1> := <var:l1> * <var:J> ; <var:N> := <var:l1> ; <var:N> := <var:N> + <var:l0> {{ <var:N> = <nat:7> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:l0> = <nat:8> /\ <var:N> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:N> = <nat:7> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 