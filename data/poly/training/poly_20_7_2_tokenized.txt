\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <var:r> * <var:o> ; <var:r> := <nat:2> + <var:r> * <var:o> ; <var:r> := <nat:1> + <var:r> * <var:o> ; <var:r> := <nat:3> + <var:r> * <var:o> ; <var:r> := <var:r> * <var:o> ; <var:r> := <nat:1> + <var:r> * <var:o> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:o> = <var:I> $ before the evaluation of the segment of code it must be that $ <var:r> = <nat:2> \times <var:I> ^ <nat:6> + <nat:2> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the list of commands can be given through this decorated series of commands . \begin{eqnarray} \{ <var:o> = <var:I> \} \\ <var:r> := <nat:2> ; \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> \} \\ <var:r> := <var:r> * <var:o> ; \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> * <var:I> + \} \\ <var:r> := <nat:2> + <var:r> * <var:o> ; \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> * <var:I> ^ <nat:2> + <nat:2> \} \\ <var:r> := <nat:1> + <var:r> * <var:o> ; \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:1> \} \\ <var:r> := <nat:3> + <var:r> * <var:o> ; \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> \} \\ <var:r> := <var:r> * <var:o> ; \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + \} \\ <var:r> := <nat:1> + <var:r> * <var:o> \\ \{ <var:o> = <var:I> \land <var:r> = <nat:2> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:2> ; <var:r> := <var:r> * <var:o> ; <var:r> := <nat:2> + <var:r> * <var:o> ; <var:r> := <nat:1> + <var:r> * <var:o> ; <var:r> := <nat:3> + <var:r> * <var:o> ; <var:r> := <var:r> * <var:o> ; <var:r> := <nat:1> + <var:r> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:o> = <var:I> }} <def:poly> {{ <var:r> = <nat:2> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:r> = <nat:2> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 