\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:4> ; <var:T> := <var:v0> \end{verbatim} Assuming that we have $ <var:s> = <var:k> $ , given some positive numbers $ <var:k> $ , before evaluating this code segment , it holds that $ <var:T> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is evident by Hoare reasoning . Paying attention to the proceeding statements contained in our code , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:k> \} & <var:v0> := <nat:4> & \{ <var:s> = <var:k> \land <var:v0> = <nat:4> \} \\ \{ <var:s> = <var:k> \land <var:v0> = <nat:4> \} & <var:T> := <var:v0& \{ <var:s> = <var:k> \land <var:T> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:s> = <var:k> }} <var:v0> := <nat:4> ; <var:T> := <var:v0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 