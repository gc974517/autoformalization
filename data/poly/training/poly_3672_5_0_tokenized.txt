\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:8> ; <var:D1> := <nat:5> ; <var:D1> := <var:D1> * <var:r> ; <var:C> := <var:D1> ; <var:C> := <var:C> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allow that we have $ <var:r> = <var:V> $ prior to running our series of commands , it must be that we see $ <var:C> = <nat:5> \times <var:V> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be given using the following decorated code segment . \begin{eqnarray} \{ <var:r> = <var:V> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:r> = <var:V> \land <var:D0> = <nat:8> \} \\ <var:D1> := <nat:5> ; \\ \{ <var:r> = <var:V> \land <var:D0> = <nat:8> \land <var:D1> = <nat:5> \} \\ <var:D1> := <var:D1> * <var:r> ; \\ \{ <var:r> = <var:V> \land <var:D0> = <nat:8> \land <var:D1> = <nat:5> \times <var:V> \} \\ <var:C> := <var:D1> ; \\ \{ <var:r> = <var:V> \land <var:D0> = <nat:8> \land <var:C> = <nat:5> \times <var:V> \} \\ <var:C> := <var:C> + <var:D0> \\ \{ <var:r> = <var:V> \land <var:C> = <nat:5> \times <var:V> + <nat:8> \} \end{eqnarray} Using standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:8> ; <var:D1> := <nat:5> ; <var:D1> := <var:D1> * <var:r> ; <var:C> := <var:D1> ; <var:C> := <var:C> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:r> = <var:V> }} <def:poly> {{ <var:C> = <nat:5> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:V> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:V> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:V> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:V> /\ <var:D0> = <nat:8> /\ <var:C> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:V> /\ <var:C> = <nat:5> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 