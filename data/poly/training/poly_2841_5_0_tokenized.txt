\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:t> ; <var:H> := <var:a1> ; <var:H> := <var:H> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:t> = <var:D> $ ahead of interpreting our series of instructions , it must be that we see $ <var:H> = <nat:1> \cdot <var:D> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the series of commands is clear with typical Hoare reasoning . Paying attention to the next step found in the program , \[ \begin{tabular} {rcl} \{ <var:t> = <var:D> \} & <var:a0> := <nat:3> & \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \} \end{tabular} This is guaranteed using the variable update scheme from typical Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:D> \} & <var:a0> := <nat:3> & \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \} \\ \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \} & <var:a1> := <nat:1> & \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \land <var:a1> = <nat:1> \} \\ \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \land <var:a1> = <nat:1> \} & <var:a1> := <var:a1> * <var:t> & \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \land <var:a1> = <nat:1> \cdot <var:D> \} \end{tabular} This is shown with the scheme obtained from standard Hoare logic . After , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:D> \} & <var:a0> := <nat:3> & \{ <var:t> = <var:D> \land <var:a0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:t> ; <var:H> := <var:a1> ; <var:H> := <var:H> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:t> = <var:D> }} <def:poly> {{ <var:H> = <nat:1> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:a0> = <nat:3> /\ <var:H> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:H> = <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 