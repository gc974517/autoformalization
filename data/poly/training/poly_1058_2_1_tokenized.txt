\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:2> ; <var:q> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming taking natural coefficients $ <var:t> $ $ <var:Z> = <var:t> $ prior to the execution of this code segment it follows that we see $ <var:q> = <nat:2> $ once series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is accomplished through typical Hoare reasoning . Advancing on , we have \begin{eqnarray} \{ <var:Z> = <var:t> \} \, <var:R0> := <nat:2> \, \{ <var:Z> = <var:t> \land <var:R0> = <nat:2> \} \end{eqnarray} This is guaranteed with the inference rule defined by typical Hoare techniques . Taking another step toward the proceeding bit of code found in the series of instructions , we see \begin{eqnarray} \{ <var:Z> = <var:t> \} \, <var:R0> := <nat:2> \, \{ <var:Z> = <var:t> \land <var:R0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:2> ; <var:q> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Z> = <var:t> }} <def:poly> {{ <var:q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 