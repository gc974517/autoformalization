\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:1> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:k> ; <var:e2> := <var:e2> * <var:k> ; <var:e3> := <nat:3> ; <var:e3> := <var:e3> * <var:k> ; <var:e3> := <var:e3> * <var:k> ; <var:e3> := <var:e3> * <var:k> ; <var:Q> := <var:e3> ; <var:Q> := <var:Q> + <var:e2> ; <var:Q> := <var:Q> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow , assuming some $ <var:N> $ , it to be that $ <var:k> = <var:N> $ before running our segment of code , it must be that $ <var:Q> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our code segment is clear using usual Hoare techniques . Stepping forward , we see \verb | { <var:k> = <var:N> } <var:e0> := <nat:1> { <var:k> = <var:N> \land <var:e0> = <nat:1> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> } <var:e2> := <nat:3> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> } <var:e2> := <var:e2> * <var:k> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> } | and \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> } <var:e2> := <var:e2> * <var:k> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> } | . Going forward , we have \verb | { <var:k> = <var:N> } <var:e0> := <nat:1> { <var:k> = <var:N> \land <var:e0> = <nat:1> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> } <var:e2> := <nat:3> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> } <var:e2> := <var:e2> * <var:k> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> } <var:e2> := <var:e2> * <var:k> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> } <var:e3> := <nat:3> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:e3> = <nat:3> } | , \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:e3> = <nat:3> } <var:e3> := <var:e3> * <var:k> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:e3> = <nat:3> \cdot <var:N> } | and \verb | { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:e3> = <nat:3> \cdot <var:N> } <var:e3> := <var:e3> * <var:k> { <var:k> = <var:N> \land <var:e0> = <nat:1> \land <var:e2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:e3> = <nat:3> \cdot <var:N> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e0> := <nat:1> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:k> ; <var:e2> := <var:e2> * <var:k> ; <var:e3> := <nat:3> ; <var:e3> := <var:e3> * <var:k> ; <var:e3> := <var:e3> * <var:k> ; <var:e3> := <var:e3> * <var:k> ; <var:Q> := <var:e3> ; <var:Q> := <var:Q> + <var:e2> ; <var:Q> := <var:Q> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:k> = <var:N> }} <def:poly> {{ <var:Q> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:e2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:Q> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:e0> = <nat:1> /\ <var:Q> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:Q> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 