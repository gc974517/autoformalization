\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:M> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:3> ; <var:q> := <var:U1> <var:q> := <var:q> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:M> = <var:u> $ --- for natural numbers $ <var:u> $ --- before executing our series of instructions , it must be that we have $ <var:q> = <nat:3> * <var:u> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:u> \} \\ <var:U1> := <var:M> ; \\ \{ <var:M> = <var:u> \land <var:U1> = <var:u> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:M> = <var:u> \land <var:U1> = <var:u> \land <var:U0> = <nat:7> \} \\ <var:U1> := <var:U1> * <nat:3> ; \\ \{ <var:M> = <var:u> \land <var:U1> = <nat:3> \times <var:u> \land <var:U0> = <nat:7> \} \\ <var:q> := <var:U1> \\ \{ <var:M> = <var:u> \land <var:U0> = <nat:7> \land <var:q> = <nat:3> \times <var:u> \} \\ <var:q> := <var:q> + <var:U0> \\ \{ <var:M> = <var:u> \land <var:q> = <nat:3> \times <var:u> + <nat:7> \} \end{eqnarray} Using typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:M> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:3> ; <var:q> := <var:U1> <var:q> := <var:q> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:M> = <var:u> }} <def:poly> {{ <var:q> = <nat:3> * <var:u> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:U1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:U1> = <var:u> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:U1> = <nat:3> * <var:u> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:U0> = <nat:7> /\ <var:q> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:q> = <nat:3> * <var:u> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 