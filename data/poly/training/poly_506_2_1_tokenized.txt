\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:5> ; <var:u> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allowing ( given any positive integers $ <var:B> $ ) that we have $ <var:j> = <var:B> $ before the evaluation of our code segment it follows that $ <var:u> = <nat:5> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques yields : \begin{eqnarray} \{ <var:j> = <var:B> \} \\ <var:z0> := <nat:5> ; \\ \{ <var:j> = <var:B> \land <var:z0> = <nat:5> \} \\ <var:u> := <var:z0> \\ \{ <var:j> = <var:B> \land <var:u> = <nat:5> \} \end{eqnarray} Thusly , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:5> ; <var:u> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:j> = <var:B> }} <def:poly> {{ <var:u> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:u> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 