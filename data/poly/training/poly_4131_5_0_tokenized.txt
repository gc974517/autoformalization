\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:G> ; <var:H> := <var:q1> ; <var:H> := <var:H> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Allow that $ <var:G> = <var:j> $ ahead of interpreting our segment of code , it holds that we have $ <var:H> = <nat:4> \times <var:j> + <nat:2> $ once code executes . \end{theorem} \begin{proof} The argument for our set of instructions can be accomplished through usual Hoare reasoning . Moving forward , we see the variable update code defining $ <nat:2> $ toward $ <var:q0>$ . This moves $ \{ <var:G> = <var:j> \} $ to $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \} $ . Going to the next step , we have the variable binding command \verb | <var:q1> := <nat:4> ; | . This code advances the precondition $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \} $ as $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \} $ . This is given through the assignment inference rule given in standard Hoare logic . Honing in on the next line of code contained in the list of instructions , we have the variable binding statement defining $ <var:q1> * <var:G> $ into $ <var:q1>$ . This code forwards the condition $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \} $ into the condition $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \cdot <var:j> \} $ . Observing the next step in our series of instructions , the binding line \verb | <var:H> := <var:q1> ; | . This statement forwards the condition $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \cdot <var:j> \} $ as $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \land <var:H> = <nat:4> \cdot <var:j> \} $ . This is known to be sound with the assignment scheme defined by standard Hoare reasoning . Moving onward , the statement \verb | <var:H> := <var:H> + <var:q0> | . This statement moves the precondition $ \{ <var:G> = <var:j> \land <var:q0> = <nat:2> \land <var:H> = <nat:4> \cdot <var:j> \} $ into the condition $ \{ <var:G> = <var:j> \land <var:H> = <nat:4> \cdot <var:j> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:G> ; <var:H> := <var:q1> ; <var:H> := <var:H> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:G> = <var:j> }} <def:poly> {{ <var:H> = <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:q0> = <nat:2> /\ <var:H> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:H> = <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 