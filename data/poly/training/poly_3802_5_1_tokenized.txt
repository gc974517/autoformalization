\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:h> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:8> ; <var:g> := <var:F1> <var:g> := <var:g> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for any whole numbers $ <var:n> $ , that $ <var:h> = <var:n> $ before executing this program , it holds that $ <var:g> = <nat:8> * <var:n> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:h> = <var:n> \} \\ <var:F1> := <var:h> ; \\ \{ <var:h> = <var:n> \land <var:F1> = <var:n> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:h> = <var:n> \land <var:F1> = <var:n> \land <var:F0> = <nat:8> \} \\ <var:F1> := <var:F1> * <nat:8> ; \\ \{ <var:h> = <var:n> \land <var:F1> = <nat:8> \cdot <var:n> \land <var:F0> = <nat:8> \} \\ <var:g> := <var:F1> \\ \{ <var:h> = <var:n> \land <var:F0> = <nat:8> \land <var:g> = <nat:8> \cdot <var:n> \} \\ <var:g> := <var:g> + <var:F0> \\ \{ <var:h> = <var:n> \land <var:g> = <nat:8> \cdot <var:n> + <nat:8> \} \end{eqnarray} Therefore , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:h> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:8> ; <var:g> := <var:F1> <var:g> := <var:g> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:h> = <var:n> }} <def:poly> {{ <var:g> = <nat:8> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:F1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:F1> = <var:n> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:F1> = <nat:8> * <var:n> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:F0> = <nat:8> /\ <var:g> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:g> = <nat:8> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 