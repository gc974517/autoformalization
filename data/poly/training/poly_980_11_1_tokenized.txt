\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:P> ; <var:Y2> := <var:Y1> * <var:P> ; <var:Y3> := <var:Y2> * <var:P> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:Y3> := <var:Y3> * <nat:4> ; <var:E> := <var:Y3> <var:E> := <var:E> + <var:Y2> <var:E> := <var:E> + <var:Y1> <var:E> := <var:E> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Allowing that $ <var:P> = <var:h> $ for any $ <var:h> \in \mathbb{N} $ prior to the execution of this set of commands , it must be that we have $ <var:E> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is clear through typical Hoare reasoning . Further , we have \verb | { <var:P> = <var:h> } <var:Y1> := <var:P> { <var:P> = <var:h> \land <var:Y1> = <var:h> } | . Moving forward to the next pieces of code seen in the list of commands , we see \verb | { <var:P> = <var:h> } <var:Y1> := <var:P> { <var:P> = <var:h> \land <var:Y1> = <var:h> } | , \verb | { <var:P> = <var:h> \land <var:Y1> = <var:h> } <var:Y2> := <var:Y1> * <var:P> { <var:P> = <var:h> \land <var:Y1> = <var:h> \land <var:Y2> = <var:h> ^ <nat:2> } | , \verb | { <var:P> = <var:h> \land <var:Y1> = <var:h> \land <var:Y2> = <var:h> ^ <nat:2> } <var:Y3> := <var:Y2> * <var:P> { <var:P> = <var:h> \land <var:Y1> = <var:h> \land <var:Y2> = <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> } | , \verb | { <var:P> = <var:h> \land <var:Y1> = <var:h> \land <var:Y2> = <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> } <var:Y0> := <nat:3> { <var:P> = <var:h> \land <var:Y1> = <var:h> \land <var:Y2> = <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } | , \verb | { <var:P> = <var:h> \land <var:Y1> = <var:h> \land <var:Y2> = <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } <var:Y1> := <var:Y1> * <nat:1> { <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } | , \verb | { <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } <var:Y2> := <var:Y2> * <nat:3> { <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } | , \verb | { <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:Y3> = <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } <var:Y3> := <var:Y3> * <nat:4> { <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:Y3> = <nat:4> \cdot <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } | and \verb | { <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:Y3> = <nat:4> \cdot <var:h> ^ <nat:3> \land <var:Y0> = <nat:3> } <var:E> := <var:Y3{ <var:P> = <var:h> \land <var:Y1> = <nat:1> \cdot <var:h> \land <var:Y2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:Y0> = <nat:3> \land <var:E> = <nat:4> \cdot <var:h> ^ <nat:3> } | . Advancing to the following line contained in the program , we see \verb | { <var:P> = <var:h> } <var:Y1> := <var:P> { <var:P> = <var:h> \land <var:Y1> = <var:h> } | . Looking at the next bit of code seen in our series of commands , we see \verb | { <var:P> = <var:h> } <var:Y1> := <var:P> { <var:P> = <var:h> \land <var:Y1> = <var:h> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <def:poly> := <var:Y1> := <var:P> ; <var:Y2> := <var:Y1> * <var:P> ; <var:Y3> := <var:Y2> * <var:P> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:Y3> := <var:Y3> * <nat:4> ; <var:E> := <var:Y3> <var:E> := <var:E> + <var:Y2> <var:E> := <var:E> + <var:Y1> <var:E> := <var:E> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:P> = <var:h> }} <def:poly> {{ <var:E> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <var:h> /\ <var:Y2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <var:h> /\ <var:Y2> = <var:h> ^ <nat:2> /\ <var:Y3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <var:h> /\ <var:Y2> = <var:h> ^ <nat:2> /\ <var:Y3> = <var:h> ^ <nat:3> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <nat:1> * <var:h> /\ <var:Y2> = <var:h> ^ <nat:2> /\ <var:Y3> = <var:h> ^ <nat:3> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <nat:1> * <var:h> /\ <var:Y2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:Y3> = <var:h> ^ <nat:3> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <nat:1> * <var:h> /\ <var:Y2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:Y3> = <nat:4> * <var:h> ^ <nat:3> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <nat:1> * <var:h> /\ <var:Y2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:Y0> = <nat:3> /\ <var:E> = <nat:4> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y1> = <nat:1> * <var:h> /\ <var:Y0> = <nat:3> /\ <var:E> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:Y0> = <nat:3> /\ <var:E> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:E> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 