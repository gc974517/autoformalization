\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:5> ; <var:Z> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Given it to be that $ <var:P> = <var:z> $ before the execution of this list of instructions , then we see $ <var:Z> = <nat:5> $ after series of instructions has finished . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:P> = <var:z> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:P> = <var:z> \land <var:u0> = <nat:5> \} \\ <var:Z> := <var:u0> \\ \{ <var:P> = <var:z> \land <var:Z> = <nat:5> \} \end{eqnarray} Considering the above , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:Z> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:P> = <var:z> }} <def:poly> {{ <var:Z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:Z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 