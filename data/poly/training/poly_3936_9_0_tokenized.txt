\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:5> ; <var:p1> := <nat:4> ; <var:p1> := <var:p1> * <var:x> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:x> ; <var:p2> := <var:p2> * <var:x> ; <var:w> := <var:p2> ; <var:w> := <var:w> + <var:p1> ; <var:w> := <var:w> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for any positive integer coefficients $ <var:t> $ ) it to be that $ <var:x> = <var:t> $ before the evaluation of our code then we see $ <var:w> = <nat:6> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:5> $ once code segment has exited . \end{theorem} \begin{proof} The argument for our list of commands can be shown through standard Hoare logic . After , \verb | { <var:x> = <var:t> } <var:p0> := <nat:5> { <var:x> = <var:t> \land <var:p0> = <nat:5> } | and \verb | { <var:x> = <var:t> \land <var:p0> = <nat:5> } <var:p1> := <nat:4> { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> } | . Stepping forward , we have \verb | { <var:x> = <var:t> } <var:p0> := <nat:5> { <var:x> = <var:t> \land <var:p0> = <nat:5> } | . This is shown to be logically sound with the assignment rule given by standard Hoare logic . Taking a look at the following commands contained in the set of instructions , \verb | { <var:x> = <var:t> } <var:p0> := <nat:5> { <var:x> = <var:t> \land <var:p0> = <nat:5> } | , \verb | { <var:x> = <var:t> \land <var:p0> = <nat:5> } <var:p1> := <nat:4> { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> } | , \verb | { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> } <var:p1> := <var:p1> * <var:x> { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> \times <var:t> } | , \verb | { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> \times <var:t> } <var:p2> := <nat:6> { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> \times <var:t> \land <var:p2> = <nat:6> } | and \verb | { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> \times <var:t> \land <var:p2> = <nat:6> } <var:p2> := <var:p2> * <var:x> { <var:x> = <var:t> \land <var:p0> = <nat:5> \land <var:p1> = <nat:4> \times <var:t> \land <var:p2> = <nat:6> \times <var:t> } | . This is known to be sound by the environment update law in typical Hoare logic . Going to the next step , we see \verb | { <var:x> = <var:t> } <var:p0> := <nat:5> { <var:x> = <var:t> \land <var:p0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:5> ; <var:p1> := <nat:4> ; <var:p1> := <var:p1> * <var:x> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:x> ; <var:p2> := <var:p2> * <var:x> ; <var:w> := <var:p2> ; <var:w> := <var:w> + <var:p1> ; <var:w> := <var:w> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:x> = <var:t> }} <def:poly> {{ <var:w> = <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:4> * <var:t> /\ <var:p2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:4> * <var:t> /\ <var:p2> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:4> * <var:t> /\ <var:p2> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:4> * <var:t> /\ <var:w> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:p0> = <nat:5> /\ <var:w> = <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:w> = <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 