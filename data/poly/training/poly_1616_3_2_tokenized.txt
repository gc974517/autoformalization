\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Assuming ( for some positive numbers $ <var:E> $ ) that we have $ <var:n> = <var:E> $ prior to the evaluation of the set of instructions , it must be that we have $ <var:I> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is given through standard Hoare reasoning . Taking another step toward the subsequent statement contained in the code segment , \[ \begin{tabular} {rcl} \{ <var:n> = <var:E> \} & <var:I> := <nat:2> & \{ <var:n> = <var:E> \land <var:I> = <nat:2> \} \end{tabular} Going forward , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:E> \} & <var:I> := <nat:2> & \{ <var:n> = <var:E> \land <var:I> = <nat:2> \} \\ \{ <var:n> = <var:E> \land <var:I> = <nat:2> \} & <var:I> := <nat:1> + <var:I> * <var:n> & \{ <var:n> = <var:E> \land <var:I> = <nat:2> * <var:E> + <nat:1> \} \end{tabular} This is guaranteed by the law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:2> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:n> = <var:E> }} <def:poly> {{ <var:I> = <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:I> = <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 