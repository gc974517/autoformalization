\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:6> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:O> ; <var:f> := <var:X1> ; <var:f> := <var:f> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Given that we have $ <var:O> = <var:C> $ ahead of the execution of this series of instructions , it holds that we see $ <var:f> = <nat:2> \times <var:C> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is evident through typical Hoare logic . Focusing on the next command seen in the program , we have the assignment code \verb | <var:X0> := <nat:6> ; | . This code redefines the precondition $ \{ <var:O> = <var:C> \} $ to $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \} $ . This is deduced through the assignment rule given by Hoare logic . Following , the assignment command yielding $ <nat:2> $ into $ <var:X1>$ . This line takes the precondition $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \} $ into the postcondition $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \} $ . Considering the upcoming statement in our code , we have the environment update command defining $ <var:X1> * <var:O> $ toward $ <var:X1>$ . This takes the precondition $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> \} $ toward the condition $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> * <var:C> \} $ . This is ensured through the assignment law in typical Hoare reasoning . Immediately following , the code \verb | <var:f> := <var:X1> ; | . This advances $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \land <var:X1> = <nat:2> * <var:C> \} $ to $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \land <var:f> = <nat:2> * <var:C> \} $ . This is known to be sound with the assignment law given in Hoare logic . Moving on , we see the variable update statement \verb | <var:f> := <var:f> + <var:X0> | . This forwards the condition $ \{ <var:O> = <var:C> \land <var:X0> = <nat:6> \land <var:f> = <nat:2> * <var:C> \} $ toward the postcondition $ \{ <var:O> = <var:C> \land <var:f> = <nat:2> * <var:C> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:6> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:O> ; <var:f> := <var:X1> ; <var:f> := <var:f> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:O> = <var:C> }} <def:poly> {{ <var:f> = <nat:2> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:X0> = <nat:6> /\ <var:f> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:f> = <nat:2> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 