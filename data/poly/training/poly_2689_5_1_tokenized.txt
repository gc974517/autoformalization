\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:h> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:8> ; <var:D> := <var:T1> <var:D> := <var:D> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assume it to hold that $ <var:h> = <var:N> $ before the execution of this code segment then we see $ <var:D> = <nat:8> * <var:N> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our list of instructions can be demonstrated with standard Hoare reasoning . Taking a look at the upcoming piece of code found in our series of commands , we have the command letting $ <var:h> $ into $ <var:T1>$ . This moves the condition $ \{ <var:h> = <var:N> \} $ into the condition $ \{ <var:h> = <var:N> \land <var:T1> = <var:N> \} $ . Next , we see the variable update code \verb | <var:T0> := <nat:6> ; | . This moves $ \{ <var:h> = <var:N> \land <var:T1> = <var:N> \} $ into the postcondition $ \{ <var:h> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:6> \} $ . Moving forward to the next step , the variable update code \verb | <var:T1> := <var:T1> * <nat:8> ; | . This code advances the precondition $ \{ <var:h> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:6> \} $ toward the postcondition $ \{ <var:h> = <var:N> \land <var:T1> = <nat:8> * <var:N> \land <var:T0> = <nat:6> \} $ . Looking at the subsequent line in the series of commands , the binding command \verb | <var:D> := <var:T1> | . This takes the condition $ \{ <var:h> = <var:N> \land <var:T1> = <nat:8> * <var:N> \land <var:T0> = <nat:6> \} $ toward $ \{ <var:h> = <var:N> \land <var:T0> = <nat:6> \land <var:D> = <nat:8> * <var:N> \} $ . Focusing on the subsequent statement in our series of instructions , we have the assignment line \verb | <var:D> := <var:D> + <var:T0> | . This command redefines the precondition $ \{ <var:h> = <var:N> \land <var:T0> = <nat:6> \land <var:D> = <nat:8> * <var:N> \} $ to $ \{ <var:h> = <var:N> \land <var:D> = <nat:8> * <var:N> + <nat:6> \} $ . This is known to be sound through the assignment law of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:h> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:8> ; <var:D> := <var:T1> <var:D> := <var:D> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:h> = <var:N> }} <def:poly> {{ <var:D> = <nat:8> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T1> = <var:N> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T0> = <nat:6> /\ <var:D> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:D> = <nat:8> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 