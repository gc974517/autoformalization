\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:3> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:4> + <var:v> * <var:V> ; <var:v> := <nat:4> + <var:v> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:V> = <var:g> $ ( with some positive coefficients $ <var:g> $ ) prior to executing this segment of code it must be that $ <var:v> = <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> $ . \end{theorem} \begin{proof} Observe that the below decorated set of instructions . \begin{eqnarray} \{ <var:V> = <var:g> \} \\ <var:v> := <nat:1> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \} \end{eqnarray} Advancing the evaluation of this code segment produces : \begin{eqnarray} <var:v> := <nat:4> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> + <nat:4> \} \\ <var:v> := <nat:2> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:2> \} \\ <var:v> := <nat:2> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> \} \\ <var:v> := <nat:2> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> \} \\ <var:v> := <nat:3> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:5> + <nat:4> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> \} \\ <var:v> := <nat:2> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:6> + <nat:4> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:2> \} \\ <var:v> := <nat:4> + <var:v> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:7> + <nat:4> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:4> \} \\ <var:v> := <nat:4> + <var:v> * <var:V> \\ \{ <var:V> = <var:g> \land <var:v> = <nat:1> \times <var:g> ^ <nat:8> + <nat:4> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:4> \} \end{eqnarray} Using usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:3> + <var:v> * <var:V> ; <var:v> := <nat:2> + <var:v> * <var:V> ; <var:v> := <nat:4> + <var:v> * <var:V> ; <var:v> := <nat:4> + <var:v> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:V> = <var:g> }} <def:poly> {{ <var:v> = <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:v> = <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 