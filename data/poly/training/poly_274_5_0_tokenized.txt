\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:1> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:m> ; <var:r> := <var:e1> ; <var:r> := <var:r> + <var:e0> \end{verbatim} Given that we have $ <var:m> = <var:a> $ ahead of interpreting our list of instructions , it must be that we have $ <var:r> = <nat:1> * <var:a> + <nat:1> $ after set of commands has executed . \end{theorem} \begin{proof} The argument for our code segment can be done with typical Hoare reasoning . Moving on , \verb | { <var:m> = <var:a> } <var:e0> := <nat:1> { <var:m> = <var:a> \land <var:e0> = <nat:1> } | , \verb | { <var:m> = <var:a> \land <var:e0> = <nat:1> } <var:e1> := <nat:1> { <var:m> = <var:a> \land <var:e0> = <nat:1> \land <var:e1> = <nat:1> } | and \verb | { <var:m> = <var:a> \land <var:e0> = <nat:1> \land <var:e1> = <nat:1> } <var:e1> := <var:e1> * <var:m> { <var:m> = <var:a> \land <var:e0> = <nat:1> \land <var:e1> = <nat:1> \times <var:a> } | . This is sound using the variable assignmet inference rule in standard Hoare reasoning . Focusing on the following line of code contained in the program , \verb | { <var:m> = <var:a> } <var:e0> := <nat:1> { <var:m> = <var:a> \land <var:e0> = <nat:1> } | . Moving forward to the proceeding piece of code seen in our series of commands , we see \verb | { <var:m> = <var:a> } <var:e0> := <nat:1> { <var:m> = <var:a> \land <var:e0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:m> = <var:a> }} <var:e0> := <nat:1> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:m> ; <var:r> := <var:e1> ; <var:r> := <var:r> + <var:e0> {{ <var:r> = <nat:1> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:e0> = <nat:1> /\ <var:r> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r> = <nat:1> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 