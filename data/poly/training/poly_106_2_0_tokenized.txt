\begin{document} \begin{theorem} Let the following series of commands : \begin{verbatim} <var:r0> := <nat:9> ; <var:W> := <var:r0> \end{verbatim} Given $ <var:a> = <var:D> $ ahead of running our program it follows that $ <var:W> = <nat:9> $ . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:a> = <var:D> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:a> = <var:D> \land <var:r0> = <nat:9> \} \\ <var:W> := <var:r0> \\ \{ <var:a> = <var:D> \land <var:W> = <nat:9> \} \end{eqnarray} Given the above , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:a> = <var:D> }} <var:r0> := <nat:9> ; <var:W> := <var:r0> {{ <var:W> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:W> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 