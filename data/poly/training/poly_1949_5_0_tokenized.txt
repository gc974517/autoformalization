\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:z> ; <var:s> := <var:U1> ; <var:s> := <var:s> + <var:U0> \end{verbatim} Assuming $ <var:z> = <var:h> $ --- assuming some $ <var:h> $ --- before the execution of this code segment then we see $ <var:s> = <nat:7> \times <var:h> + <nat:4> $ after set of commands executes . \end{theorem} \begin{proof} The flow of logic for this list of commands can be given by usual Hoare techniques . Stepping forward , we have the variable assignmet line \verb | <var:U0> := <nat:4> ; | . This advances $ \{ <var:z> = <var:h> \} $ toward the condition $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \} $ . Immediately following , we have the variable update statement giving $ <nat:7> $ into $ <var:U1>$ . This command forwards $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \} $ into $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \} $ . Jumping to the next step in our program , the binding line assigning $ <var:U1> * <var:z> $ as $ <var:U1>$ . This statement advances the precondition $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \} $ as the condition $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \times <var:h> \} $ . This is deduced by the assignment law obtained from Hoare techniques . Going forward , the variable assignmet command \verb | <var:s> := <var:U1> ; | . This line takes the condition $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \land <var:U1> = <nat:7> \times <var:h> \} $ into the condition $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \land <var:s> = <nat:7> \times <var:h> \} $ . This is known to be sound through the assignment scheme given by Hoare reasoning . Paying attention to the next command contained in the list of commands , we have the variable update statement defining $ <var:s> + <var:U0$ toward $ <var:s>$ . This moves the condition $ \{ <var:z> = <var:h> \land <var:U0> = <nat:4> \land <var:s> = <nat:7> \times <var:h> \} $ into the postcondition $ \{ <var:z> = <var:h> \land <var:s> = <nat:7> \times <var:h> + <nat:4> \} $ . This is sound by the assignment scheme given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:z> = <var:h> }} <var:U0> := <nat:4> ; <var:U1> := <nat:7> ; <var:U1> := <var:U1> * <var:z> ; <var:s> := <var:U1> ; <var:s> := <var:s> + <var:U0> {{ <var:s> = <nat:7> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:U0> = <nat:4> /\ <var:s> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:s> = <nat:7> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 