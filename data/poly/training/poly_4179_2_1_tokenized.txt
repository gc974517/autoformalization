\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:8> ; <var:I> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Allow ( given some positive numbers $ <var:K> $ ) $ <var:W> = <var:K> $ ahead of the execution of our series of commands , it must be that $ <var:I> = <nat:8> $ . \end{theorem} \begin{proof} Let this decorated set of commands . \begin{eqnarray} \{ <var:W> = <var:K> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:W> = <var:K> \land <var:N0> = <nat:8> \} \\ <var:I> := <var:N0> \\ \{ <var:W> = <var:K> \land <var:I> = <nat:8> \} \end{eqnarray} Applying usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:8> ; <var:I> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:W> = <var:K> }} <def:poly> {{ <var:I> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:I> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 