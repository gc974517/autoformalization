\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:i> ; <var:d> := <var:M1> ; <var:d> := <var:d> + <var:M0> \end{verbatim} Allow it to be that $ <var:i> = <var:f> $ before executing this set of instructions it holds that we see $ <var:d> = <nat:2> * <var:f> + <nat:4> $ after code has finished executing . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:i> = <var:f> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:i> = <var:f> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:i> = <var:f> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:i> ; \\ \{ <var:i> = <var:f> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \cdot <var:f> \} \\ <var:d> := <var:M1> ; \\ \{ <var:i> = <var:f> \land <var:M0> = <nat:4> \land <var:d> = <nat:2> \cdot <var:f> \} \\ <var:d> := <var:d> + <var:M0> \\ \{ <var:i> = <var:f> \land <var:d> = <nat:2> \cdot <var:f> + <nat:4> \} \end{eqnarray} Given the above , our code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:i> = <var:f> }} <var:M0> := <nat:4> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:i> ; <var:d> := <var:M1> ; <var:d> := <var:d> + <var:M0> {{ <var:d> = <nat:2> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:M0> = <nat:4> /\ <var:d> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:d> = <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 