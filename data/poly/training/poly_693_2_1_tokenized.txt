\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:5> ; <var:O> := <var:D0> \end{verbatim} Assuming $ <var:P> = <var:f> $ --- given integers $ <var:f> $ --- ahead of the execution of the series of instructions , it holds that $ <var:O> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our code can be demonstrated using this decorated code segment . \begin{eqnarray} \{ <var:P> = <var:f> \} \\ <var:D0> := <nat:5> ; \\ \{ <var:P> = <var:f> \land <var:D0> = <nat:5> \} \\ <var:O> := <var:D0> \\ \{ <var:P> = <var:f> \land <var:O> = <nat:5> \} \end{eqnarray} Applying standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:P> = <var:f> }} <var:D0> := <nat:5> ; <var:O> := <var:D0> {{ <var:O> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:O> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 