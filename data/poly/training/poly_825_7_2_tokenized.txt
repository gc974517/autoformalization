\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <nat:4> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:1> + <var:m> * <var:d> ; <var:m> := <nat:1> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> \end{verbatim} Allowing ( for every $ <var:e> \in \mathbb{N} $ ) that $ <var:d> = <var:e> $ ahead of executing this list of instructions , it follows that we have $ <var:m> = <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this program can be done using typical Hoare techniques . Paying attention to the next line of code contained in our segment of code , we have the variable assignmet command \verb | <var:m> := <nat:4> ; | . This moves $ \{ <var:d> = <var:e> \} $ to $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \} $ . This is rigorously given with the assignment scheme from standard Hoare reasoning . Observing the following line of code contained in the code , the environment update statement \verb | <var:m> := <nat:4> + <var:m> * <var:d> ; | . This statement advances the precondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \} $ to $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> + <nat:4> \} $ . Looking at the proceeding command seen in the code segment , we have the variable binding command \verb | <var:m> := <nat:2> + <var:m> * <var:d> ; | . This line redefines $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> + <nat:4> \} $ to $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:2> \} $ . Looking at the next line of code found in the series of commands , we have the variable assignmet line \verb | <var:m> := <nat:1> + <var:m> * <var:d> ; | . This command advances the precondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:2> \} $ as the postcondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:1> \} $ . Jumping to the subsequent statement contained in the series of instructions , we have the assignment code \verb | <var:m> := <nat:1> + <var:m> * <var:d> ; | . This line takes $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:1> \} $ . Immediately following , we see the assignment line \verb | <var:m> := <nat:3> + <var:m> * <var:d> ; | . This forwards $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:1> \} $ as the postcondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:3> \} $ . Moving forward to the next command seen in our series of commands , we have the variable update statement \verb | <var:m> := <nat:3> + <var:m> * <var:d> | . This line transfers the precondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:3> \} $ to the postcondition $ \{ <var:d> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:d> = <var:e> }} <var:m> := <nat:4> ; <var:m> := <nat:4> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:1> + <var:m> * <var:d> ; <var:m> := <nat:1> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> {{ <var:m> = <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:m> = <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 