\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:2> + <var:Q> * <var:k> ; <var:Q> := <var:Q> * <var:k> ; <var:Q> := <nat:1> + <var:Q> * <var:k> ; <var:Q> := <nat:4> + <var:Q> * <var:k> ; <var:Q> := <nat:4> + <var:Q> * <var:k> ; <var:Q> := <nat:1> + <var:Q> * <var:k> ; <var:Q> := <nat:4> + <var:Q> * <var:k> ; <var:Q> := <nat:2> + <var:Q> * <var:k> ; <var:Q> := <nat:1> + <var:Q> * <var:k> ; <var:Q> := <nat:3> + <var:Q> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Assuming , given any $ <var:q> $ , that we have $ <var:k> = <var:q> $ prior to the execution of this list of instructions then we have $ <var:Q> = <nat:1> \cdot <var:q> ^ <nat:10> + <nat:2> \cdot <var:q> ^ <nat:9> + <nat:1> \cdot <var:q> ^ <nat:7> + <nat:4> \cdot <var:q> ^ <nat:6> + <nat:4> \cdot <var:q> ^ <nat:5> + <nat:1> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:3> $ when set of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is clear with standard Hoare reasoning . Moving forward , we have the binding line binding $ <nat:1> $ as $ <var:Q>$ . This line advances the precondition $ \{ <var:k> = <var:q> \} $ as the postcondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> \} $ . Focusing on the following step in the list of commands , the variable binding code yielding $ <nat:2> + <var:Q> * <var:k> $ to $ <var:Q>$ . This redefines $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> \} $ to the postcondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> + <nat:2> \} $ . This is ensured by the assignment inference rule from typical Hoare techniques . Going to the next step , we see the variable assignmet line giving $ <var:Q> * <var:k> $ as $ <var:Q>$ . This line forwards $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> + <nat:2> \} $ to the condition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + \} $ . This is shown by the assignment rule in usual Hoare techniques . After , we see the binding statement letting $ <nat:1> + <var:Q> * <var:k> $ into $ <var:Q>$ . This statement transfers the condition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + \} $ as the postcondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> \} $ . This is guaranteed with the assignment law defined in typical Hoare techniques . Following , we have the variable assignmet statement \verb | <var:Q> := <nat:4> + <var:Q> * <var:k> ; | . This command takes $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:4> \} $ . Observing the proceeding piece of code in the list of commands , we have the assignment statement \verb | <var:Q> := <nat:4> + <var:Q> * <var:k> ; | . This line redefines the condition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:4> \} $ as the postcondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> \} $ . Now , the assignment command letting $ <nat:1> + <var:Q> * <var:k> $ into $ <var:Q>$ . This advances the precondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> \} $ toward the condition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:1> \} $ . This is sound through the assignment law defined in standard Hoare techniques . Next , we have the variable update line \verb | <var:Q> := <nat:4> + <var:Q> * <var:k> ; | . This statement moves $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:1> \} $ into the postcondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> \} $ . Shifting focus toward the next statement contained in our set of instructions , we see the environment update command defining $ <nat:2> + <var:Q> * <var:k> $ toward $ <var:Q>$ . This command advances $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> \} $ to $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> \} $ . Focusing on the subsequent line of code found in our code segment , we see the binding command \verb | <var:Q> := <nat:1> + <var:Q> * <var:k> ; | . This statement transfers $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> \} $ . After , we have the environment update code \verb | <var:Q> := <nat:3> + <var:Q> * <var:k> | . This line advances the condition $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> \} $ as $ \{ <var:k> = <var:q> \land <var:Q> = <nat:1> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:1> ; <var:Q> := <nat:2> + <var:Q> * <var:k> ; <var:Q> := <var:Q> * <var:k> ; <var:Q> := <nat:1> + <var:Q> * <var:k> ; <var:Q> := <nat:4> + <var:Q> * <var:k> ; <var:Q> := <nat:4> + <var:Q> * <var:k> ; <var:Q> := <nat:1> + <var:Q> * <var:k> ; <var:Q> := <nat:4> + <var:Q> * <var:k> ; <var:Q> := <nat:2> + <var:Q> * <var:k> ; <var:Q> := <nat:1> + <var:Q> * <var:k> ; <var:Q> := <nat:3> + <var:Q> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:k> = <var:q> }} <def:poly> {{ <var:Q> = <nat:1> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:Q> = <nat:1> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 