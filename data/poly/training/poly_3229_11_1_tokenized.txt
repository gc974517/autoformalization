\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:c1> := <var:b> ; <var:c2> := <var:c1> * <var:b> ; <var:c3> := <var:c2> * <var:b> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:c2> := <var:c2> * <nat:7> ; <var:c3> := <var:c3> * <nat:9> ; <var:B> := <var:c3> <var:B> := <var:B> + <var:c2> <var:B> := <var:B> + <var:c1> <var:B> := <var:B> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:b> = <var:v> $ ( for every integers $ <var:v> $ ) prior to evaluating our code , it holds that $ <var:B> = <nat:9> \times <var:v> ^ <nat:3> + <nat:7> \times <var:v> ^ <nat:2> + <nat:8> \times <var:v> + <nat:5> $ after series of instructions has exited . \end{theorem} \begin{proof} The flow of logic for our series of commands can be shown using usual Hoare logic . Advancing to the subsequent piece of code found in the code , the line \verb | <var:c1> := <var:b> ; | . This line moves the condition $ \{ <var:b> = <var:v> \} $ toward the condition $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \} $ . This is sound by the assignment law defined in Hoare reasoning . Moving forward to the following statement seen in the list of commands , the variable assignmet line \verb | <var:c2> := <var:c1> * <var:b> ; | . This moves the precondition $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \} $ as $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \} $ . Moving on , we have the assignment command \verb | <var:c3> := <var:c2> * <var:b> ; | . This redefines $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \} $ . This is guaranteed with the assignment law given by usual Hoare reasoning . Moving on to the upcoming line of code contained in the list of commands , the variable assignmet code defining $ <nat:5> $ to $ <var:c0>$ . This moves $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \} $ toward $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ . This is guaranteed through the assignment rule of usual Hoare logic . Moving on to the proceeding line in the list of commands , we have the statement \verb | <var:c1> := <var:c1> * <nat:8> ; | . This command advances the precondition $ \{ <var:b> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ as the condition $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ . This is sound using the assignment scheme given by usual Hoare reasoning . Considering the upcoming step seen in our series of instructions , we see the line \verb | <var:c2> := <var:c2> * <nat:7> ; | . This command advances the condition $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ as the postcondition $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <nat:7> * <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ . This is ensured through the assignment scheme defined in standard Hoare logic . Going forward , we see the statement \verb | <var:c3> := <var:c3> * <nat:9> ; | . This command redefines $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <nat:7> * <var:v> ^ <nat:2> \land <var:c3> = <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ as the condition $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <nat:7> * <var:v> ^ <nat:2> \land <var:c3> = <nat:9> * <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ . This is shown with the assignment rule given in typical Hoare reasoning . Advancing to the following line of code contained in the series of instructions , we see the variable binding code binding $ <var:c3$ as $ <var:B>$ . This forwards the condition $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <nat:7> * <var:v> ^ <nat:2> \land <var:c3> = <nat:9> * <var:v> ^ <nat:3> \land <var:c0> = <nat:5> \} $ into the postcondition $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <nat:7> * <var:v> ^ <nat:2> \land <var:c0> = <nat:5> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> \} $ . Taking a look at the proceeding piece of code contained in the list of instructions , we have the variable update code \verb | <var:B> := <var:B> + <var:c2> | . This statement forwards $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c2> = <nat:7> * <var:v> ^ <nat:2> \land <var:c0> = <nat:5> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> \} $ to $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c0> = <nat:5> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> \} $ . Taking another step toward the upcoming command contained in the series of commands , we see the binding command defining $ <var:B> + <var:c1$ as $ <var:B>$ . This redefines $ \{ <var:b> = <var:v> \land <var:c1> = <nat:8> * <var:v> \land <var:c0> = <nat:5> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:v> \land <var:c0> = <nat:5> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:8> * <var:v> \} $ . Now , we have the variable binding code \verb | <var:B> := <var:B> + <var:c0> | . This redefines the condition $ \{ <var:b> = <var:v> \land <var:c0> = <nat:5> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:8> * <var:v> \} $ into $ \{ <var:b> = <var:v> \land <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:5> \} $ . This is given by the assignment rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c1> := <var:b> ; <var:c2> := <var:c1> * <var:b> ; <var:c3> := <var:c2> * <var:b> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:c2> := <var:c2> * <nat:7> ; <var:c3> := <var:c3> * <nat:9> ; <var:B> := <var:c3> <var:B> := <var:B> + <var:c2> <var:B> := <var:B> + <var:c1> <var:B> := <var:B> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:b> = <var:v> }} <def:poly> {{ <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <var:v> /\ <var:c2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <var:v> /\ <var:c2> = <var:v> ^ <nat:2> /\ <var:c3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <var:v> /\ <var:c2> = <var:v> ^ <nat:2> /\ <var:c3> = <var:v> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <nat:8> * <var:v> /\ <var:c2> = <var:v> ^ <nat:2> /\ <var:c3> = <var:v> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <nat:8> * <var:v> /\ <var:c2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:c3> = <var:v> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <nat:8> * <var:v> /\ <var:c2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:c3> = <nat:9> * <var:v> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <nat:8> * <var:v> /\ <var:c2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:c0> = <nat:5> /\ <var:B> = <nat:9> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c1> = <nat:8> * <var:v> /\ <var:c0> = <nat:5> /\ <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:c0> = <nat:5> /\ <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:v> /\ <var:B> = <nat:9> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 