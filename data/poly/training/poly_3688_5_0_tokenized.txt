\begin{document} \begin{theorem} Let the following series of commands : \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:m> ; <var:Q> := <var:F1> ; <var:Q> := <var:Q> + <var:F0> \end{verbatim} Allowing $ <var:m> = <var:e> $ given any whole numbers $ <var:e> $ before the evaluation of this set of commands , then $ <var:Q> = <nat:4> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the set of instructions can be seen by usual Hoare logic . Honing in on the subsequent pieces of code contained in the list of instructions , we have \verb | { <var:m> = <var:e> } <var:F0> := <nat:1> { <var:m> = <var:e> \land <var:F0> = <nat:1> } | and \verb | { <var:m> = <var:e> \land <var:F0> = <nat:1> } <var:F1> := <nat:4> { <var:m> = <var:e> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> } | . This is known to be sound using the environment update rule of usual Hoare reasoning . Moving forward , \verb | { <var:m> = <var:e> } <var:F0> := <nat:1> { <var:m> = <var:e> \land <var:F0> = <nat:1> } | . This is rigorously given using the variable update law obtained from standard Hoare reasoning . Going forward , \verb | { <var:m> = <var:e> } <var:F0> := <nat:1> { <var:m> = <var:e> \land <var:F0> = <nat:1> } | and \verb | { <var:m> = <var:e> \land <var:F0> = <nat:1> } <var:F1> := <nat:4> { <var:m> = <var:e> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> } | . This is sound through the assignment law defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:m> = <var:e> }} <var:F0> := <nat:1> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:m> ; <var:Q> := <var:F1> ; <var:Q> := <var:Q> + <var:F0> {{ <var:Q> = <nat:4> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:F0> = <nat:1> /\ <var:Q> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Q> = <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 