\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:3> + <var:L> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Given ( given all $ <var:X> \in \mathbb{Z}^+ $ ) that $ <var:e> = <var:X> $ prior to running our list of commands , it must be that we see $ <var:L> = <nat:4> \cdot <var:X> + <nat:3> $ once set of instructions is done . \end{theorem} \begin{proof} The argument for the program is evident through Hoare reasoning . Going forward , we see \begin{verbatim} { <var:e> = <var:X> } <var:L> := <nat:4> { <var:e> = <var:X> \land <var:L> = <nat:4> } \end{verbatim} Advancing to the following statement seen in our series of instructions , \begin{verbatim} { <var:e> = <var:X> } <var:L> := <nat:4> { <var:e> = <var:X> \land <var:L> = <nat:4> } \end{verbatim} This is ensured with the assignment inference rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:4> ; <var:L> := <nat:3> + <var:L> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:e> = <var:X> }} <def:poly> {{ <var:L> = <nat:4> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:L> = <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 