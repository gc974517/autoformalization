\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:z1> := <var:J> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:4> ; <var:I> := <var:z1> <var:I> := <var:I> + <var:z0> \end{verbatim} Assume it to hold that $ <var:J> = <var:b> $ , given every $ <var:b> \in \mathbb{N} $ , before the execution of the segment of code , then we have $ <var:I> = <nat:4> \cdot <var:b> + <nat:1> $ after set of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:b> \} \\ <var:z1> := <var:J> ; \\ \{ <var:J> = <var:b> \land <var:z1> = <var:b> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:J> = <var:b> \land <var:z1> = <var:b> \land <var:z0> = <nat:1> \} \\ <var:z1> := <var:z1> * <nat:4> ; \\ \{ <var:J> = <var:b> \land <var:z1> = <nat:4> * <var:b> \land <var:z0> = <nat:1> \} \\ <var:I> := <var:z1> \\ \{ <var:J> = <var:b> \land <var:z0> = <nat:1> \land <var:I> = <nat:4> * <var:b> \} \\ <var:I> := <var:I> + <var:z0> \\ \{ <var:J> = <var:b> \land <var:I> = <nat:4> * <var:b> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:J> = <var:b> }} <var:z1> := <var:J> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:4> ; <var:I> := <var:z1> <var:I> := <var:I> + <var:z0> {{ <var:I> = <nat:4> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:z1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:z1> = <var:b> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:z1> = <nat:4> * <var:b> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:z0> = <nat:1> /\ <var:I> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:I> = <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 