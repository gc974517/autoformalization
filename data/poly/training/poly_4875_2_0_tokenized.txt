\begin{document} \begin{theorem} Define the following code in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:1> ; <var:i> := <var:c0> \end{verbatim} Assuming $ <var:p> = <var:A> $ before running this list of instructions , it follows that we have $ <var:i> = <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:p> = <var:A> \} \\ <var:c0> := <nat:1> ; \\ \{ <var:p> = <var:A> \land <var:c0> = <nat:1> \} \\ <var:i> := <var:c0> \\ \{ <var:p> = <var:A> \land <var:i> = <nat:1> \} \end{eqnarray} Hence , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:p> = <var:A> }} <var:c0> := <nat:1> ; <var:i> := <var:c0> {{ <var:i> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:i> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 