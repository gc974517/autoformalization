\begin{document} \begin{theorem} We define the following program in \emph{Imp} as follows \begin{verbatim} <var:z1> := <var:x> ; <var:z2> := <var:z1> * <var:x> ; <var:z3> := <var:z2> * <var:x> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:3> ; <var:z3> := <var:z3> * <nat:3> ; <var:S> := <var:z3> <var:S> := <var:S> + <var:z2> <var:S> := <var:S> + <var:z1> <var:S> := <var:S> + <var:z0> \end{verbatim} Given --- for $ <var:X> \in \mathbb{Z}^+ $ --- that $ <var:x> = <var:X> $ before interpreting our list of commands it follows that we see $ <var:S> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:7> \times <var:X> + <nat:8> $ when series of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is given through standard Hoare techniques . Looking at the proceeding command in our set of instructions , we see the command \verb | <var:z1> := <var:x> ; | . This command takes $ \{ <var:x> = <var:X> \} $ as the postcondition $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \} $ . This is deduced by the assignment scheme from usual Hoare logic . Jumping to the next step seen in our program , the variable assignmet statement yielding $ <var:z1> * <var:x> $ as $ <var:z2>$ . This moves $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \} $ as the condition $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \land <var:z2> = <var:X> ^ <nat:2> \} $ . This is shown with the assignment law given by Hoare reasoning . Taking a look at the following piece of code seen in the code , the variable update statement defining $ <var:z2> * <var:x> $ to $ <var:z3>$ . This transfers $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \land <var:z2> = <var:X> ^ <nat:2> \} $ as the condition $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \land <var:z2> = <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \} $ . Paying attention to the subsequent bit of code in the segment of code , the environment update code \verb | <var:z0> := <nat:8> ; | . This statement forwards the precondition $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \land <var:z2> = <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \} $ to the condition $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \land <var:z2> = <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ . Moving on to the proceeding command contained in the segment of code , we have the assignment command assigning $ <var:z1> * <nat:7> $ into $ <var:z1>$ . This statement advances $ \{ <var:x> = <var:X> \land <var:z1> = <var:X> \land <var:z2> = <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ as $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ . This is rigorously given with the assignment inference rule given by usual Hoare logic . Considering the upcoming command in the segment of code , the assignment line letting $ <var:z2> * <nat:3> $ toward $ <var:z2>$ . This transfers $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ into the postcondition $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ . This is sound with the assignment scheme obtained from standard Hoare reasoning . Following , we see the binding line \verb | <var:z3> := <var:z3> * <nat:3> ; | . This moves the precondition $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:z3> = <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ as the condition $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ . Advancing on , we have the variable assignmet command assigning $ <var:z3$ into $ <var:S>$ . This code advances $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:X> ^ <nat:3> \land <var:z0> = <nat:8> \} $ toward the condition $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:z0> = <nat:8> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> \} $ . This is rigorously given by the assignment law of Hoare reasoning . Following , we see the line \verb | <var:S> := <var:S> + <var:z2> | . This statement moves the condition $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:z0> = <nat:8> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> \} $ toward $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z0> = <nat:8> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> \} $ . Shifting focus toward the subsequent command seen in the code segment , the assignment command assigning $ <var:S> + <var:z1$ to $ <var:S>$ . This advances $ \{ <var:x> = <var:X> \land <var:z1> = <nat:7> \cdot <var:X> \land <var:z0> = <nat:8> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> \} $ as the condition $ \{ <var:x> = <var:X> \land <var:z0> = <nat:8> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> \} $ . Taking another step toward the following bit of code seen in our set of commands , we see the environment update command yielding $ <var:S> + <var:z0$ as $ <var:S>$ . This statement redefines the condition $ \{ <var:x> = <var:X> \land <var:z0> = <nat:8> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> \} $ to the condition $ \{ <var:x> = <var:X> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:x> = <var:X> }} <var:z1> := <var:x> ; <var:z2> := <var:z1> * <var:x> ; <var:z3> := <var:z2> * <var:x> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:3> ; <var:z3> := <var:z3> * <nat:3> ; <var:S> := <var:z3> <var:S> := <var:S> + <var:z2> <var:S> := <var:S> + <var:z1> <var:S> := <var:S> + <var:z0> {{ <var:S> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <var:X> /\ <var:z2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <var:X> /\ <var:z2> = <var:X> ^ <nat:2> /\ <var:z3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <var:X> /\ <var:z2> = <var:X> ^ <nat:2> /\ <var:z3> = <var:X> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <nat:7> * <var:X> /\ <var:z2> = <var:X> ^ <nat:2> /\ <var:z3> = <var:X> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <nat:7> * <var:X> /\ <var:z2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:z3> = <var:X> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <nat:7> * <var:X> /\ <var:z2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <nat:7> * <var:X> /\ <var:z2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:z0> = <nat:8> /\ <var:S> = <nat:3> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z1> = <nat:7> * <var:X> /\ <var:z0> = <nat:8> /\ <var:S> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:z0> = <nat:8> /\ <var:S> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:S> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 