\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I> := <nat:3> ; <var:I> := <var:I> * <var:z> ; <var:I> := <var:I> * <var:z> ; <var:I> := <nat:3> + <var:I> * <var:z> ; <var:I> := <nat:4> + <var:I> * <var:z> ; <var:I> := <nat:3> + <var:I> * <var:z> ; <var:I> := <nat:3> + <var:I> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given all $ <var:B> $ --- it to hold that $ <var:z> = <var:B> $ prior to evaluating the series of commands , it follows that $ <var:I> = <nat:3> \cdot <var:B> ^ <nat:6> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:3> $ when set of instructions has executed . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:z> = <var:B> \} \\ <var:I> := <nat:3> ; \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \} \\ <var:I> := <var:I> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \times <var:B> + \} \\ <var:I> := <var:I> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \times <var:B> ^ <nat:2> + \} \\ <var:I> := <nat:3> + <var:I> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \times <var:B> ^ <nat:3> + <nat:3> \} \\ <var:I> := <nat:4> + <var:I> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> + <nat:4> \} \\ <var:I> := <nat:3> + <var:I> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:3> \} \\ <var:I> := <nat:3> + <var:I> * <var:z> \\ \{ <var:z> = <var:B> \land <var:I> = <nat:3> \times <var:B> ^ <nat:6> + <nat:3> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:3> \} \end{eqnarray} As a result , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:3> ; <var:I> := <var:I> * <var:z> ; <var:I> := <var:I> * <var:z> ; <var:I> := <nat:3> + <var:I> * <var:z> ; <var:I> := <nat:4> + <var:I> * <var:z> ; <var:I> := <nat:3> + <var:I> * <var:z> ; <var:I> := <nat:3> + <var:I> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:z> = <var:B> }} <def:poly> {{ <var:I> = <nat:3> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:4> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 