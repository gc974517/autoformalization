\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:m> ; <var:E2> := <var:E1> * <var:m> ; <var:E3> := <var:E2> * <var:m> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:v> := <var:E3> <var:v> := <var:v> + <var:E2> <var:v> := <var:v> + <var:E1> <var:v> := <var:v> + <var:E0> \end{verbatim} Allow it to hold that $ <var:m> = <var:p> $ before executing this program it holds that we have $ <var:v> = <nat:2> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> + <nat:1> $ after list of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:p> \} \\ <var:E1> := <var:m> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <var:p> \} \\ <var:E2> := <var:E1> * <var:m> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <var:p> \land <var:E2> = <var:p> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:m> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <var:p> \land <var:E2> = <var:p> ^ <nat:2> \land <var:E3> = <var:p> ^ <nat:3> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <var:p> \land <var:E2> = <var:p> ^ <nat:2> \land <var:E3> = <var:p> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ <var:E1> := <var:E1> * <nat:9> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <nat:9> * <var:p> \land <var:E2> = <var:p> ^ <nat:2> \land <var:E3> = <var:p> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ <var:E2> := <var:E2> * <nat:2> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <nat:9> * <var:p> \land <var:E2> = <nat:2> * <var:p> ^ <nat:2> \land <var:E3> = <var:p> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ <var:E3> := <var:E3> * <nat:2> ; \\ \{ <var:m> = <var:p> \land <var:E1> = <nat:9> * <var:p> \land <var:E2> = <nat:2> * <var:p> ^ <nat:2> \land <var:E3> = <nat:2> * <var:p> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ <var:v> := <var:E3> \\ \{ <var:m> = <var:p> \land <var:E1> = <nat:9> * <var:p> \land <var:E2> = <nat:2> * <var:p> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:v> = <nat:2> * <var:p> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:E2> \\ \{ <var:m> = <var:p> \land <var:E1> = <nat:9> * <var:p> \land <var:E0> = <nat:1> \land <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:E1> \\ \{ <var:m> = <var:p> \land <var:E0> = <nat:1> \land <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:9> * <var:p> \} \\ <var:v> := <var:v> + <var:E0> \\ \{ <var:m> = <var:p> \land <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:1> \} \end{eqnarray} Advancing evaluating this series of commands produces : \begin{eqnarray} \end{eqnarray} Utilizing Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:m> = <var:p> }} <var:E1> := <var:m> ; <var:E2> := <var:E1> * <var:m> ; <var:E3> := <var:E2> * <var:m> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:v> := <var:E3> <var:v> := <var:v> + <var:E2> <var:v> := <var:v> + <var:E1> <var:v> := <var:v> + <var:E0> {{ <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <var:p> /\ <var:E2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <var:p> /\ <var:E2> = <var:p> ^ <nat:2> /\ <var:E3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <var:p> /\ <var:E2> = <var:p> ^ <nat:2> /\ <var:E3> = <var:p> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <nat:9> * <var:p> /\ <var:E2> = <var:p> ^ <nat:2> /\ <var:E3> = <var:p> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <nat:9> * <var:p> /\ <var:E2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:E3> = <var:p> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <nat:9> * <var:p> /\ <var:E2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:p> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <nat:9> * <var:p> /\ <var:E2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:E0> = <nat:1> /\ <var:v> = <nat:2> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E1> = <nat:9> * <var:p> /\ <var:E0> = <nat:1> /\ <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E0> = <nat:1> /\ <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:v> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 