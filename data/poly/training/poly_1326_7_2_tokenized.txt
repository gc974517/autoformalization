\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:u> := <nat:1> ; <var:u> := <var:u> * <var:h> ; <var:u> := <nat:1> + <var:u> * <var:h> ; <var:u> := <var:u> * <var:h> ; <var:u> := <var:u> * <var:h> ; <var:u> := <nat:2> + <var:u> * <var:h> ; <var:u> := <nat:4> + <var:u> * <var:h> \end{verbatim} Assume --- given all natural coefficients $ <var:X> $ --- that we have $ <var:h> = <var:X> $ ahead of executing the set of commands it follows that $ <var:u> = <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> + <nat:4> $ when series of instructions has exited . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:h> = <var:X> \} \\ <var:u> := <nat:1> ; \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \} \\ <var:u> := <var:u> * <var:h> ; \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \times <var:X> + \} \\ <var:u> := <nat:1> + <var:u> * <var:h> ; \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \times <var:X> ^ <nat:2> + <nat:1> \} \\ <var:u> := <var:u> * <var:h> ; \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> + \} \\ <var:u> := <var:u> * <var:h> ; \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:2> + \} \\ <var:u> := <nat:2> + <var:u> * <var:h> ; \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \} \\ <var:u> := <nat:4> + <var:u> * <var:h> \\ \{ <var:h> = <var:X> \land <var:u> = <nat:1> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> + <nat:4> \} \end{eqnarray} As a consequence , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:h> = <var:X> }} <var:u> := <nat:1> ; <var:u> := <var:u> * <var:h> ; <var:u> := <nat:1> + <var:u> * <var:h> ; <var:u> := <var:u> * <var:h> ; <var:u> := <var:u> * <var:h> ; <var:u> := <nat:2> + <var:u> * <var:h> ; <var:u> := <nat:4> + <var:u> * <var:h> {{ <var:u> = <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:u> = <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 