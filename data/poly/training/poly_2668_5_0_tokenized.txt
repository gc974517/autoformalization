\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:1> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:I> ; <var:o> := <var:D1> ; <var:o> := <var:o> + <var:D0> \end{verbatim} Assume it to be that $ <var:I> = <var:F> $ before interpreting this set of instructions it must be that we see $ <var:o> = <nat:3> * <var:F> + <nat:1> $ after program terminates . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:I> = <var:F> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:I> = <var:F> \land <var:D0> = <nat:1> \} \\ <var:D1> := <nat:3> ; \\ \{ <var:I> = <var:F> \land <var:D0> = <nat:1> \land <var:D1> = <nat:3> \} \\ <var:D1> := <var:D1> * <var:I> ; \\ \{ <var:I> = <var:F> \land <var:D0> = <nat:1> \land <var:D1> = <nat:3> \cdot <var:F> \} \\ <var:o> := <var:D1> ; \\ \{ <var:I> = <var:F> \land <var:D0> = <nat:1> \land <var:o> = <nat:3> \cdot <var:F> \} \\ <var:o> := <var:o> + <var:D0> \\ \{ <var:I> = <var:F> \land <var:o> = <nat:3> \cdot <var:F> + <nat:1> \} \end{eqnarray} Hence , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:I> = <var:F> }} <var:D0> := <nat:1> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:I> ; <var:o> := <var:D1> ; <var:o> := <var:o> + <var:D0> {{ <var:o> = <nat:3> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:D0> = <nat:1> /\ <var:o> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:o> = <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 