\begin{document} \begin{theorem} Consider a code in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:5> ; <var:O> := <var:x0> \end{verbatim} Allow it to hold that $ <var:c> = <var:T> $ --- for some natural numbers $ <var:T> $ --- prior to executing the set of commands it follows that we have $ <var:O> = <nat:5> $ after list of instructions exits . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:c> = <var:T> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:c> = <var:T> \land <var:x0> = <nat:5> \} \\ <var:O> := <var:x0> \\ \{ <var:c> = <var:T> \land <var:O> = <nat:5> \} \end{eqnarray} Therefore , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:c> = <var:T> }} <var:x0> := <nat:5> ; <var:O> := <var:x0> {{ <var:O> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:O> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 