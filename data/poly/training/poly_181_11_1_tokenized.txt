\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:w> ; <var:l2> := <var:l1> * <var:w> ; <var:l3> := <var:l2> * <var:w> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:8> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:8> ; <var:b> := <var:l3> <var:b> := <var:b> + <var:l2> <var:b> := <var:b> + <var:l1> <var:b> := <var:b> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:w> = <var:j> $ for $ <var:j> \in \mathbb{Z}^+ $ before the evaluation of our set of instructions then $ <var:b> = <nat:8> \times <var:j> ^ <nat:3> + <nat:5> \times <var:j> ^ <nat:2> + <nat:8> \times <var:j> + <nat:6> $ when set of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of our code can be given through usual Hoare reasoning . Moving forward to the next step , we see \verb | { <var:w> = <var:j> } <var:l1> := <var:w> { <var:w> = <var:j> \land <var:l1> = <var:j> } | , \verb | { <var:w> = <var:j> \land <var:l1> = <var:j> } <var:l2> := <var:l1> * <var:w> { <var:w> = <var:j> \land <var:l1> = <var:j> \land <var:l2> = <var:j> ^ <nat:2> } | , \verb | { <var:w> = <var:j> \land <var:l1> = <var:j> \land <var:l2> = <var:j> ^ <nat:2> } <var:l3> := <var:l2> * <var:w> { <var:w> = <var:j> \land <var:l1> = <var:j> \land <var:l2> = <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> } | , \verb | { <var:w> = <var:j> \land <var:l1> = <var:j> \land <var:l2> = <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> } <var:l0> := <nat:6> { <var:w> = <var:j> \land <var:l1> = <var:j> \land <var:l2> = <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } | , \verb | { <var:w> = <var:j> \land <var:l1> = <var:j> \land <var:l2> = <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } <var:l1> := <var:l1> * <nat:8> { <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } | , \verb | { <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } <var:l2> := <var:l2> * <nat:5> { <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <nat:5> * <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } | , \verb | { <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <nat:5> * <var:j> ^ <nat:2> \land <var:l3> = <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } <var:l3> := <var:l3> * <nat:8> { <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <nat:5> * <var:j> ^ <nat:2> \land <var:l3> = <nat:8> * <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } | and \verb | { <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <nat:5> * <var:j> ^ <nat:2> \land <var:l3> = <nat:8> * <var:j> ^ <nat:3> \land <var:l0> = <nat:6> } <var:b> := <var:l3{ <var:w> = <var:j> \land <var:l1> = <nat:8> * <var:j> \land <var:l2> = <nat:5> * <var:j> ^ <nat:2> \land <var:l0> = <nat:6> \land <var:b> = <nat:8> * <var:j> ^ <nat:3> } | . This is given by the variable binding rule defined by standard Hoare logic . Advancing to the next step , we see \verb | { <var:w> = <var:j> } <var:l1> := <var:w> { <var:w> = <var:j> \land <var:l1> = <var:j> } | . Stepping forward , we have \verb | { <var:w> = <var:j> } <var:l1> := <var:w> { <var:w> = <var:j> \land <var:l1> = <var:j> } | . Moving forward , \verb | { <var:w> = <var:j> } <var:l1> := <var:w> { <var:w> = <var:j> \land <var:l1> = <var:j> } | . This is guaranteed using the inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:w> ; <var:l2> := <var:l1> * <var:w> ; <var:l3> := <var:l2> * <var:w> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:8> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:8> ; <var:b> := <var:l3> <var:b> := <var:b> + <var:l2> <var:b> := <var:b> + <var:l1> <var:b> := <var:b> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:w> = <var:j> }} <def:poly> {{ <var:b> = <nat:8> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <var:j> /\ <var:l2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <var:j> /\ <var:l2> = <var:j> ^ <nat:2> /\ <var:l3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <var:j> /\ <var:l2> = <var:j> ^ <nat:2> /\ <var:l3> = <var:j> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <nat:8> * <var:j> /\ <var:l2> = <var:j> ^ <nat:2> /\ <var:l3> = <var:j> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <nat:8> * <var:j> /\ <var:l2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:l3> = <var:j> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <nat:8> * <var:j> /\ <var:l2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:j> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <nat:8> * <var:j> /\ <var:l2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:l0> = <nat:6> /\ <var:b> = <nat:8> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l1> = <nat:8> * <var:j> /\ <var:l0> = <nat:6> /\ <var:b> = <nat:8> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:l0> = <nat:6> /\ <var:b> = <nat:8> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:b> = <nat:8> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 