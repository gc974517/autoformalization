\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:s> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:s> ; <var:C2> := <var:C2> * <var:s> ; <var:q> := <var:C2> ; <var:q> := <var:q> + <var:C1> ; <var:q> := <var:q> + <var:C0> \end{verbatim} Allowing it to be that $ <var:s> = <var:O> $ before running the segment of code , it follows that we have $ <var:q> = <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:5> $ after series of instructions terminates . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:s> = <var:O> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \} \\ <var:C1> := <nat:4> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \} \\ <var:C1> := <var:C1> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> * <var:O> \} \\ <var:C2> := <nat:4> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> * <var:O> \land <var:C2> = <nat:4> \} \\ <var:C2> := <var:C2> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> * <var:O> \land <var:C2> = <nat:4> * <var:O> \} \\ <var:C2> := <var:C2> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> * <var:O> \land <var:C2> = <nat:4> * <var:O> ^ <nat:2> \} \\ <var:q> := <var:C2> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> * <var:O> \land <var:q> = <nat:4> * <var:O> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:C1> ; \\ \{ <var:s> = <var:O> \land <var:C0> = <nat:5> \land <var:q> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> \} \\ <var:q> := <var:q> + <var:C0> \\ \{ <var:s> = <var:O> \land <var:q> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:5> \} \end{eqnarray} As a result , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:s> = <var:O> }} <var:C0> := <nat:5> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:s> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:s> ; <var:C2> := <var:C2> * <var:s> ; <var:q> := <var:C2> ; <var:q> := <var:q> + <var:C1> ; <var:q> := <var:q> + <var:C0> {{ <var:q> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:O> /\ <var:C2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:O> /\ <var:C2> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:O> /\ <var:C2> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:O> /\ <var:q> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:C0> = <nat:5> /\ <var:q> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:q> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 