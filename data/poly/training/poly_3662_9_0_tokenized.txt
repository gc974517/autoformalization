\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:7> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:U> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:U> ; <var:z2> := <var:z2> * <var:U> ; <var:D> := <var:z2> ; <var:D> := <var:D> + <var:z1> ; <var:D> := <var:D> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allow it to hold that $ <var:U> = <var:V> $ --- for every natural coefficients $ <var:V> $ --- before the evaluation of our series of instructions , it follows that $ <var:D> = <nat:6> \times <var:V> ^ <nat:2> + <nat:6> \times <var:V> + <nat:7> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:U> = <var:V> \} \\ <var:z0> := <nat:7> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \} \\ <var:z1> := <nat:6> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:z1> = <nat:6> \} \\ <var:z1> := <var:z1> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:z1> = <nat:6> * <var:V> \} \\ <var:z2> := <nat:6> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:z1> = <nat:6> * <var:V> \land <var:z2> = <nat:6> \} \\ <var:z2> := <var:z2> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:z1> = <nat:6> * <var:V> \land <var:z2> = <nat:6> * <var:V> \} \\ <var:z2> := <var:z2> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:z1> = <nat:6> * <var:V> \land <var:z2> = <nat:6> * <var:V> ^ <nat:2> \} \\ <var:D> := <var:z2> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:z1> = <nat:6> * <var:V> \land <var:D> = <nat:6> * <var:V> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:z1> ; \\ \{ <var:U> = <var:V> \land <var:z0> = <nat:7> \land <var:D> = <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> \} \\ <var:D> := <var:D> + <var:z0> \\ \{ <var:U> = <var:V> \land <var:D> = <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:7> \} \end{eqnarray} Considering the above , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:7> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:U> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:U> ; <var:z2> := <var:z2> * <var:U> ; <var:D> := <var:z2> ; <var:D> := <var:D> + <var:z1> ; <var:D> := <var:D> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:U> = <var:V> }} <def:poly> {{ <var:D> = <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:6> * <var:V> /\ <var:z2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:6> * <var:V> /\ <var:z2> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:6> * <var:V> /\ <var:z2> = <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:6> * <var:V> /\ <var:D> = <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:z0> = <nat:7> /\ <var:D> = <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:D> = <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 