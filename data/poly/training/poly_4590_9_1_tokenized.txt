\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:z1> := <var:Y> ; <var:z2> := <var:z1> * <var:Y> ; <var:z3> := <var:z2> * <var:Y> ; <var:z0> := <nat:1> ; <var:z2> := <var:z2> * <nat:5> ; <var:z3> := <var:z3> * <nat:7> ; <var:q> := <var:z3> <var:q> := <var:q> + <var:z2> <var:q> := <var:q> + <var:z0> \end{verbatim} Allowing that we have $ <var:Y> = <var:v> $ prior to the evaluation of our set of commands then we have $ <var:q> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the code segment is accomplished by typical Hoare logic . Observing the upcoming lines of codecontained in the list of instructions , we have \begin{eqnarray} \{ <var:Y> = <var:v> \} \, <var:z1> := <var:Y> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \} \, <var:z2> := <var:z1> * <var:Y> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <var:v> ^ <nat:2> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <var:v> ^ <nat:2> \} \, <var:z3> := <var:z2> * <var:Y> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <var:v> ^ <nat:2> \land <var:z3> = <var:v> ^ <nat:3> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <var:v> ^ <nat:2> \land <var:z3> = <var:v> ^ <nat:3> \} \, <var:z0> := <nat:1> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <var:v> ^ <nat:2> \land <var:z3> = <var:v> ^ <nat:3> \land <var:z0> = <nat:1> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <var:v> ^ <nat:2> \land <var:z3> = <var:v> ^ <nat:3> \land <var:z0> = <nat:1> \} \, <var:z2> := <var:z2> * <nat:5> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:z3> = <var:v> ^ <nat:3> \land <var:z0> = <nat:1> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:z3> = <var:v> ^ <nat:3> \land <var:z0> = <nat:1> \} \, <var:z3> := <var:z3> * <nat:7> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:z3> = <nat:7> \times <var:v> ^ <nat:3> \land <var:z0> = <nat:1> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:z3> = <nat:7> \times <var:v> ^ <nat:3> \land <var:z0> = <nat:1> \} \, <var:q> := <var:z3\, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:z0> = <nat:1> \land <var:q> = <nat:7> \times <var:v> ^ <nat:3> \} \\ \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:z0> = <nat:1> \land <var:q> = <nat:7> \times <var:v> ^ <nat:3> \} \, <var:q> := <var:q> + <var:z2\, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \land <var:z0> = <nat:1> \land <var:q> = <nat:7> \times <var:v> ^ <nat:3> + <nat:5> \times <var:v> ^ <nat:2> \} \end{eqnarray} This is given with the rule in typical Hoare reasoning . Immediately after , \begin{eqnarray} \{ <var:Y> = <var:v> \} \, <var:z1> := <var:Y> \, \{ <var:Y> = <var:v> \land <var:z1> = <var:v> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Y> = <var:v> }} <var:z1> := <var:Y> ; <var:z2> := <var:z1> * <var:Y> ; <var:z3> := <var:z2> * <var:Y> ; <var:z0> := <nat:1> ; <var:z2> := <var:z2> * <nat:5> ; <var:z3> := <var:z3> * <nat:7> ; <var:q> := <var:z3> <var:q> := <var:q> + <var:z2> <var:q> := <var:q> + <var:z0> {{ <var:q> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z2> = <var:v> ^ <nat:2> /\ <var:z3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z2> = <var:v> ^ <nat:2> /\ <var:z3> = <var:v> ^ <nat:3> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:z3> = <var:v> ^ <nat:3> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:z3> = <nat:7> * <var:v> ^ <nat:3> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:z0> = <nat:1> /\ <var:q> = <nat:7> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:z1> = <var:v> /\ <var:z0> = <nat:1> /\ <var:q> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:q> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 