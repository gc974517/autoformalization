\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:3> ; <var:H> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Given ( for $ <var:e> \in \mathbb{Z}^+ $ ) that $ <var:c> = <var:e> $ before running our set of instructions it holds that $ <var:H> = <nat:3> $ after code segment has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:e> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:c> = <var:e> \land <var:F0> = <nat:3> \} \\ <var:H> := <var:F0> \\ \{ <var:c> = <var:e> \land <var:H> = <nat:3> \} \end{eqnarray} Using Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:H> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:c> = <var:e> }} <def:poly> {{ <var:H> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:H> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 