\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:8> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:x> ; <var:A> := <var:n1> ; <var:A> := <var:A> + <var:n0> \end{verbatim} Allow --- for some positive numbers $ <var:Z> $ --- $ <var:x> = <var:Z> $ before the evaluation of the set of commands then we have $ <var:A> = <nat:7> \times <var:Z> + <nat:8> $ once series of commands has finished executing . \end{theorem} \begin{proof} The argument for our segment of code is evident with Hoare reasoning . Focusing on the proceeding statement found in our set of instructions , we have the assignment command \verb | <var:n0> := <nat:8> ; | . This transfers $ \{ <var:x> = <var:Z> \} $ as the condition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \} $ . Keeping momentum , the command \verb | <var:n1> := <nat:7> ; | . This advances the precondition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \} $ as the postcondition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \land <var:n1> = <nat:7> \} $ . This is known to be sound through the assignment scheme obtained from Hoare techniques . Moving on to the following command found in our program , we have the binding line binding $ <var:n1> * <var:x> $ toward $ <var:n1>$ . This transfers the precondition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \land <var:n1> = <nat:7> \} $ toward the condition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \land <var:n1> = <nat:7> \times <var:Z> \} $ . Honing in on the proceeding line seen in the list of commands , we see the variable binding command letting $ <var:n1> $ toward $ <var:A>$ . This transfers $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \land <var:n1> = <nat:7> \times <var:Z> \} $ toward the condition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \land <var:A> = <nat:7> \times <var:Z> \} $ . Advancing on , we have the variable assignmet statement assigning $ <var:A> + <var:n0$ to $ <var:A>$ . This statement moves the condition $ \{ <var:x> = <var:Z> \land <var:n0> = <nat:8> \land <var:A> = <nat:7> \times <var:Z> \} $ toward the condition $ \{ <var:x> = <var:Z> \land <var:A> = <nat:7> \times <var:Z> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:x> = <var:Z> }} <var:n0> := <nat:8> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:x> ; <var:A> := <var:n1> ; <var:A> := <var:A> + <var:n0> {{ <var:A> = <nat:7> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:n0> = <nat:8> /\ <var:A> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:A> = <nat:7> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 