\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:3> ; <var:q> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:f> = <var:U> $ before evaluating this set of commands , it must be that we have $ <var:q> = <nat:3> $ when list of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:U> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:f> = <var:U> \land <var:R0> = <nat:3> \} \\ <var:q> := <var:R0> \\ \{ <var:f> = <var:U> \land <var:q> = <nat:3> \} \end{eqnarray} Applying Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:3> ; <var:q> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:f> = <var:U> }} <def:poly> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 