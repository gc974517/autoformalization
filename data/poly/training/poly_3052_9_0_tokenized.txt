\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:7> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:b> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:b> ; <var:S2> := <var:S2> * <var:b> ; <var:i> := <var:S2> ; <var:i> := <var:i> + <var:S1> ; <var:i> := <var:i> + <var:S0> \end{verbatim} Allowing ( for natural coefficients $ <var:f> $ ) that $ <var:b> = <var:f> $ ahead of interpreting this list of commands then $ <var:i> = <nat:8> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this list of commands is accomplished through usual Hoare reasoning . Looking at the upcoming steps contained in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:f> \} & <var:S0> := <nat:7> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \} \\ \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \} & <var:S1> := <nat:2> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> \} \\ \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> \} & <var:S1> := <var:S1> * <var:b> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \} \\ \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \} & <var:S2> := <nat:8> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \land <var:S2> = <nat:8> \} \\ \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \land <var:S2> = <nat:8> \} & <var:S2> := <var:S2> * <var:b> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \land <var:S2> = <nat:8> * <var:f> \} \\ \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \land <var:S2> = <nat:8> * <var:f> \} & <var:S2> := <var:S2> * <var:b> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> * <var:f> \land <var:S2> = <nat:8> * <var:f> ^ <nat:2> \} \end{tabular} Taking a look at the subsequent pieces of code in the code segment , \[ \begin{tabular} {rcl} \{ <var:b> = <var:f> \} & <var:S0> := <nat:7> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \} \\ \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \} & <var:S1> := <nat:2> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \land <var:S1> = <nat:2> \} \end{tabular} Paying attention to the proceeding statement in our program , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:f> \} & <var:S0> := <nat:7> & \{ <var:b> = <var:f> \land <var:S0> = <nat:7> \} \end{tabular} This is known to be sound using the binding inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <var:S0> := <nat:7> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:b> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:b> ; <var:S2> := <var:S2> * <var:b> ; <var:i> := <var:S2> ; <var:i> := <var:i> + <var:S1> ; <var:i> := <var:i> + <var:S0> {{ <var:i> = <nat:8> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:2> * <var:f> /\ <var:S2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:2> * <var:f> /\ <var:S2> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:2> * <var:f> /\ <var:S2> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:2> * <var:f> /\ <var:i> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:S0> = <nat:7> /\ <var:i> = <nat:8> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i> = <nat:8> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 