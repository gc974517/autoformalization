\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:I> := <var:g0> \end{verbatim} Assuming it to be that $ <var:m> = <var:c> $ before the execution of our program , then $ <var:I> = <nat:3> $ when series of instructions has terminated . \end{theorem} \begin{proof} The course of logic for this list of commands can be shown through typical Hoare techniques . Next , we have the variable update code \verb | <var:g0> := <nat:3> ; | . This line moves the condition $ \{ <var:m> = <var:c> \} $ as $ \{ <var:m> = <var:c> \land <var:g0> = <nat:3> \} $ . Keeping momentum , the statement yielding $ <var:g0$ into $ <var:I>$ . This takes the precondition $ \{ <var:m> = <var:c> \land <var:g0> = <nat:3> \} $ into $ \{ <var:m> = <var:c> \land <var:I> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:m> = <var:c> }} <var:g0> := <nat:3> ; <var:I> := <var:g0> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 