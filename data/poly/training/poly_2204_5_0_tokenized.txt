\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:h> ; <var:a> := <var:w1> ; <var:a> := <var:a> + <var:w0> \end{verbatim} Allowing for any positive integer coefficients $ <var:p> $ it to be that $ <var:h> = <var:p> $ ahead of executing our series of commands it must be that $ <var:a> = <nat:6> \times <var:p> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is shown with usual Hoare techniques . Advancing to the next statement found in our series of instructions , \begin{verbatim} { <var:h> = <var:p> } <var:w0> := <nat:9> { <var:h> = <var:p> \land <var:w0> = <nat:9> } \end{verbatim} This is guaranteed with the binding law in standard Hoare logic . Observing the next lines contained in our code , we see \begin{verbatim} { <var:h> = <var:p> } <var:w0> := <nat:9> { <var:h> = <var:p> \land <var:w0> = <nat:9> } { <var:h> = <var:p> \land <var:w0> = <nat:9> } <var:w1> := <nat:6> { <var:h> = <var:p> \land <var:w0> = <nat:9> \land <var:w1> = <nat:6> } \end{verbatim} Taking a look at the following bits of codein the list of instructions , \begin{verbatim} { <var:h> = <var:p> } <var:w0> := <nat:9> { <var:h> = <var:p> \land <var:w0> = <nat:9> } { <var:h> = <var:p> \land <var:w0> = <nat:9> } <var:w1> := <nat:6> { <var:h> = <var:p> \land <var:w0> = <nat:9> \land <var:w1> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:h> = <var:p> }} <var:w0> := <nat:9> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:h> ; <var:a> := <var:w1> ; <var:a> := <var:a> + <var:w0> {{ <var:a> = <nat:6> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:w0> = <nat:9> /\ <var:a> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:a> = <nat:6> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 