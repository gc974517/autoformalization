\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:U> ; <var:z2> := <nat:7> ; <var:z2> := <var:z2> * <var:U> ; <var:z2> := <var:z2> * <var:U> ; <var:P> := <var:z2> ; <var:P> := <var:P> + <var:z1> ; <var:P> := <var:P> + <var:z0> \end{verbatim} Assume $ <var:U> = <var:r> $ prior to interpreting this set of instructions it follows that we have $ <var:P> = <nat:7> \times <var:r> ^ <nat:2> + <nat:7> \times <var:r> + <nat:8> $ when program executes . \end{theorem} \begin{proof} The flow of logic for the list of commands can be accomplished by standard Hoare reasoning . Now , we see \verb | { <var:U> = <var:r> } <var:z0> := <nat:8> { <var:U> = <var:r> \land <var:z0> = <nat:8> } | , \verb | { <var:U> = <var:r> \land <var:z0> = <nat:8> } <var:z1> := <nat:7> { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> } | , \verb | { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> } <var:z1> := <var:z1> * <var:U> { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> * <var:r> } | , \verb | { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> * <var:r> } <var:z2> := <nat:7> { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> * <var:r> \land <var:z2> = <nat:7> } | and \verb | { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> * <var:r> \land <var:z2> = <nat:7> } <var:z2> := <var:z2> * <var:U> { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> * <var:r> \land <var:z2> = <nat:7> * <var:r> } | . Going forward , we see \verb | { <var:U> = <var:r> } <var:z0> := <nat:8> { <var:U> = <var:r> \land <var:z0> = <nat:8> } | . This is known to be sound through the variable assignmet inference rule from standard Hoare reasoning . Advancing to the next step , \verb | { <var:U> = <var:r> } <var:z0> := <nat:8> { <var:U> = <var:r> \land <var:z0> = <nat:8> } | , \verb | { <var:U> = <var:r> \land <var:z0> = <nat:8> } <var:z1> := <nat:7> { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> } | and \verb | { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> } <var:z1> := <var:z1> * <var:U> { <var:U> = <var:r> \land <var:z0> = <nat:8> \land <var:z1> = <nat:7> * <var:r> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <var:z0> := <nat:8> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:U> ; <var:z2> := <nat:7> ; <var:z2> := <var:z2> * <var:U> ; <var:z2> := <var:z2> * <var:U> ; <var:P> := <var:z2> ; <var:P> := <var:P> + <var:z1> ; <var:P> := <var:P> + <var:z0> {{ <var:P> = <nat:7> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:7> * <var:r> /\ <var:z2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:7> * <var:r> /\ <var:z2> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:7> * <var:r> /\ <var:z2> = <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:7> * <var:r> /\ <var:P> = <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:z0> = <nat:8> /\ <var:P> = <nat:7> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:P> = <nat:7> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 