\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:R> ; <var:d> := <var:a1> ; <var:d> := <var:d> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Allowing it to hold that $ <var:R> = <var:p> $ --- with some natural coefficients $ <var:p> $ --- prior to running the segment of code , then we see $ <var:d> = <nat:7> \cdot <var:p> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the code is evident with standard Hoare reasoning . Shifting focus toward the proceeding lines of codein the list of instructions , we see \begin{verbatim} { <var:R> = <var:p> } <var:a0> := <nat:3> { <var:R> = <var:p> \land <var:a0> = <nat:3> } { <var:R> = <var:p> \land <var:a0> = <nat:3> } <var:a1> := <nat:7> { <var:R> = <var:p> \land <var:a0> = <nat:3> \land <var:a1> = <nat:7> } { <var:R> = <var:p> \land <var:a0> = <nat:3> \land <var:a1> = <nat:7> } <var:a1> := <var:a1> * <var:R> { <var:R> = <var:p> \land <var:a0> = <nat:3> \land <var:a1> = <nat:7> \cdot <var:p> } \end{verbatim} This is deduced using the variable assignmet rule obtained from usual Hoare techniques . Moving on to the following lines of codefound in the series of instructions , we have \begin{verbatim} { <var:R> = <var:p> } <var:a0> := <nat:3> { <var:R> = <var:p> \land <var:a0> = <nat:3> } { <var:R> = <var:p> \land <var:a0> = <nat:3> } <var:a1> := <nat:7> { <var:R> = <var:p> \land <var:a0> = <nat:3> \land <var:a1> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:R> ; <var:d> := <var:a1> ; <var:d> := <var:d> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:R> = <var:p> }} <def:poly> {{ <var:d> = <nat:7> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:3> /\ <var:d> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:d> = <nat:7> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 