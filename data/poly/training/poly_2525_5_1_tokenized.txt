\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:C> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:4> ; <var:G> := <var:H1> <var:G> := <var:G> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:C> = <var:q> $ ahead of the evaluation of our segment of code , it must be that we have $ <var:G> = <nat:4> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} We can see that the below decorated set of commands . \begin{eqnarray} \{ <var:C> = <var:q> \} \\ <var:H1> := <var:C> ; \\ \{ <var:C> = <var:q> \land <var:H1> = <var:q> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:C> = <var:q> \land <var:H1> = <var:q> \land <var:H0> = <nat:2> \} \\ <var:H1> := <var:H1> * <nat:4> ; \\ \{ <var:C> = <var:q> \land <var:H1> = <nat:4> \cdot <var:q> \land <var:H0> = <nat:2> \} \\ <var:G> := <var:H1> \\ \{ <var:C> = <var:q> \land <var:H0> = <nat:2> \land <var:G> = <nat:4> \cdot <var:q> \} \\ <var:G> := <var:G> + <var:H0> \\ \{ <var:C> = <var:q> \land <var:G> = <nat:4> \cdot <var:q> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:C> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:4> ; <var:G> := <var:H1> <var:G> := <var:G> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:C> = <var:q> }} <def:poly> {{ <var:G> = <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:H1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:H1> = <var:q> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:H1> = <nat:4> * <var:q> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:H0> = <nat:2> /\ <var:G> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:G> = <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 