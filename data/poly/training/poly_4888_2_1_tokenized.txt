\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:6> ; <var:z> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Assume it to be that $ <var:T> = <var:G> $ --- for all positive integer coefficients $ <var:G> $ --- before executing the program then we have $ <var:z> = <nat:6> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The method of proof for our list of commands is accomplished by the below decorated code . \begin{eqnarray} \{ <var:T> = <var:G> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:T> = <var:G> \land <var:g0> = <nat:6> \} \\ <var:z> := <var:g0> \\ \{ <var:T> = <var:G> \land <var:z> = <nat:6> \} \end{eqnarray} Continuing running the set of instructions results in : \begin{eqnarray} \end{eqnarray} Utilizing typical Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:z> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <def:poly> {{ <var:z> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:z> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 