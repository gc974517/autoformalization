\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:C> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:6> ; <var:A> := <var:a1> <var:A> := <var:A> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:C> = <var:F> $ prior to running this series of commands then we see $ <var:A> = <nat:6> \times <var:F> + <nat:7> $ after program finishes . \end{theorem} \begin{proof} Arguing the correctness of this code is clear with standard Hoare reasoning . Next , \begin{eqnarray} \{ <var:C> = <var:F> \} \, <var:a1> := <var:C> \, \{ <var:C> = <var:F> \land <var:a1> = <var:F> \} \\ \{ <var:C> = <var:F> \land <var:a1> = <var:F> \} \, <var:a0> := <nat:7> \, \{ <var:C> = <var:F> \land <var:a1> = <var:F> \land <var:a0> = <nat:7> \} \\ \{ <var:C> = <var:F> \land <var:a1> = <var:F> \land <var:a0> = <nat:7> \} \, <var:a1> := <var:a1> * <nat:6> \, \{ <var:C> = <var:F> \land <var:a1> = <nat:6> \cdot <var:F> \land <var:a0> = <nat:7> \} \\ \{ <var:C> = <var:F> \land <var:a1> = <nat:6> \cdot <var:F> \land <var:a0> = <nat:7> \} \, <var:A> := <var:a1\, \{ <var:C> = <var:F> \land <var:a0> = <nat:7> \land <var:A> = <nat:6> \cdot <var:F> \} \\ \{ <var:C> = <var:F> \land <var:a0> = <nat:7> \land <var:A> = <nat:6> \cdot <var:F> \} \, <var:A> := <var:A> + <var:a0\, \{ <var:C> = <var:F> \land <var:A> = <nat:6> \cdot <var:F> + <nat:7> \} \end{eqnarray} This is sound with the binding law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:C> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:6> ; <var:A> := <var:a1> <var:A> := <var:A> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:C> = <var:F> }} <def:poly> {{ <var:A> = <nat:6> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:a1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:a1> = <var:F> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:a1> = <nat:6> * <var:F> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:a0> = <nat:7> /\ <var:A> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:A> = <nat:6> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 