\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:8> ; <var:U2> := <nat:1> ; <var:U2> := <var:U2> * <var:t> ; <var:U2> := <var:U2> * <var:t> ; <var:U3> := <nat:5> ; <var:U3> := <var:U3> * <var:t> ; <var:U3> := <var:U3> * <var:t> ; <var:U3> := <var:U3> * <var:t> ; <var:G> := <var:U3> ; <var:G> := <var:G> + <var:U2> ; <var:G> := <var:G> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Assume that $ <var:t> = <var:B> $ ahead of executing our program , then we see $ <var:G> = <nat:5> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:8> $ when list of commands has exited . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:t> = <var:B> \} \\ <var:U0> := <nat:8> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \} \\ <var:U2> := <nat:1> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \} \\ <var:U2> := <var:U2> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> \} \\ <var:U2> := <var:U2> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> ^ <nat:2> \} \\ <var:U3> := <nat:5> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:U3> = <nat:5> \} \\ <var:U3> := <var:U3> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:U3> = <nat:5> \times <var:B> \} \\ <var:U3> := <var:U3> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:U3> = <nat:5> \times <var:B> ^ <nat:2> \} \\ <var:U3> := <var:U3> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:U3> = <nat:5> \times <var:B> ^ <nat:3> \} \\ <var:G> := <var:U3> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:U2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:G> = <nat:5> \times <var:B> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:U2> ; \\ \{ <var:t> = <var:B> \land <var:U0> = <nat:8> \land <var:G> = <nat:5> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:U0> \\ \{ <var:t> = <var:B> \land <var:G> = <nat:5> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:8> \} \end{eqnarray} As a result , the set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U0> := <nat:8> ; <var:U2> := <nat:1> ; <var:U2> := <var:U2> * <var:t> ; <var:U2> := <var:U2> * <var:t> ; <var:U3> := <nat:5> ; <var:U3> := <var:U3> * <var:t> ; <var:U3> := <var:U3> * <var:t> ; <var:U3> := <var:U3> * <var:t> ; <var:G> := <var:U3> ; <var:G> := <var:G> + <var:U2> ; <var:G> := <var:G> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:t> = <var:B> }} <def:poly> {{ <var:G> = <nat:5> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:U3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:U3> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:U3> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:U3> = <nat:5> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:G> = <nat:5> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:U0> = <nat:8> /\ <var:G> = <nat:5> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:G> = <nat:5> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 