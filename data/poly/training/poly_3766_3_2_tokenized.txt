\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:3> + <var:Q> * <var:b> ; <var:Q> := <nat:4> + <var:Q> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allowing that $ <var:b> = <var:U> $ before evaluating our segment of code , then we see $ <var:Q> = <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> $ when code has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:U> \} \\ <var:Q> := <nat:1> ; \\ \{ <var:b> = <var:U> \land <var:Q> = <nat:1> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:b> ; \\ \{ <var:b> = <var:U> \land <var:Q> = <nat:1> \cdot <var:U> + <nat:3> \} \end{eqnarray} Furthering executing the list of instructions produces : \begin{eqnarray} <var:Q> := <nat:4> + <var:Q> * <var:b> \\ \{ <var:b> = <var:U> \land <var:Q> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:1> ; <var:Q> := <nat:3> + <var:Q> * <var:b> ; <var:Q> := <nat:4> + <var:Q> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:b> = <var:U> }} <def:poly> {{ <var:Q> = <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q> = <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q> = <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 