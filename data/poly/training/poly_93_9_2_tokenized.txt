\begin{document} \begin{theorem} Define a set of commands as follows \begin{verbatim} <var:S> := <nat:4> ; <var:S> := <nat:2> + <var:S> * <var:J> ; <var:S> := <nat:4> + <var:S> * <var:J> ; <var:S> := <nat:1> + <var:S> * <var:J> ; <var:S> := <var:S> * <var:J> ; <var:S> := <var:S> * <var:J> ; <var:S> := <nat:4> + <var:S> * <var:J> ; <var:S> := <var:S> * <var:J> ; <var:S> := <nat:2> + <var:S> * <var:J> \end{verbatim} Assuming --- letting whole numbers $ <var:Y> $ --- it to be that $ <var:J> = <var:Y> $ prior to the execution of our segment of code it follows that we see $ <var:S> = <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:2> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} We can see that this decorated set of commands . \begin{eqnarray} \{ <var:J> = <var:Y> \} \\ <var:S> := <nat:4> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \} \\ <var:S> := <nat:2> + <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> + <nat:2> \} \\ <var:S> := <nat:4> + <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:4> \} \\ <var:S> := <nat:1> + <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:1> \} \\ <var:S> := <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + \} \\ <var:S> := <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:5> + <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + \} \\ <var:S> := <nat:4> + <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:6> + <nat:2> \times <var:Y> ^ <nat:5> + <nat:4> \times <var:Y> ^ <nat:4> + <nat:1> \times <var:Y> ^ <nat:3> + <nat:4> \} \end{eqnarray} Allowing running the series of instructions gives : \begin{eqnarray} <var:S> := <var:S> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:7> + <nat:2> \times <var:Y> ^ <nat:6> + <nat:4> \times <var:Y> ^ <nat:5> + <nat:1> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> + \} \\ <var:S> := <nat:2> + <var:S> * <var:J> \\ \{ <var:J> = <var:Y> \land <var:S> = <nat:4> \times <var:Y> ^ <nat:8> + <nat:2> \times <var:Y> ^ <nat:7> + <nat:4> \times <var:Y> ^ <nat:6> + <nat:1> \times <var:Y> ^ <nat:5> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:J> = <var:Y> }} <var:S> := <nat:4> ; <var:S> := <nat:2> + <var:S> * <var:J> ; <var:S> := <nat:4> + <var:S> * <var:J> ; <var:S> := <nat:1> + <var:S> * <var:J> ; <var:S> := <var:S> * <var:J> ; <var:S> := <var:S> * <var:J> ; <var:S> := <nat:4> + <var:S> * <var:J> ; <var:S> := <var:S> * <var:J> ; <var:S> := <nat:2> + <var:S> * <var:J> {{ <var:S> = <nat:4> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S> = <nat:4> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 