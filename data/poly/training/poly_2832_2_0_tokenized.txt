\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:4> ; <var:G> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:k> = <var:s> $ given some natural numbers $ <var:s> $ prior to the execution of our list of instructions , then we have $ <var:G> = <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare techniques produces : \begin{eqnarray} \{ <var:k> = <var:s> \} \\ <var:e0> := <nat:4> ; \\ \{ <var:k> = <var:s> \land <var:e0> = <nat:4> \} \\ <var:G> := <var:e0> \\ \{ <var:k> = <var:s> \land <var:G> = <nat:4> \} \end{eqnarray} Considering the above , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:4> ; <var:G> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:k> = <var:s> }} <def:poly> {{ <var:G> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:G> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 