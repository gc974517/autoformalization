\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:6> ; <var:U> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:g> = <var:c> $ , for every positive coefficients $ <var:c> $ , prior to the evaluation of this series of instructions it follows that we see $ <var:U> = <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is shown through Hoare logic . Moving forward to the next step , we see \verb | { <var:g> = <var:c> } <var:b0> := <nat:6> { <var:g> = <var:c> \land <var:b0> = <nat:6> } | and \verb | { <var:g> = <var:c> \land <var:b0> = <nat:6> } <var:U> := <var:b0{ <var:g> = <var:c> \land <var:U> = <nat:6> } | . This is rigorously given using the environment update law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:6> ; <var:U> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:g> = <var:c> }} <def:poly> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 