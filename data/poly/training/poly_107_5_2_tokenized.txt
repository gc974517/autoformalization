\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <nat:1> + <var:P> * <var:a> ; <var:P> := <nat:2> + <var:P> * <var:a> ; <var:P> := <nat:1> + <var:P> * <var:a> ; <var:P> := <nat:2> + <var:P> * <var:a> \end{verbatim} Assume it to be that $ <var:a> = <var:w> $ before the evaluation of our series of instructions , it holds that we have $ <var:P> = <nat:2> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:2> $ when set of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:w> \} \\ <var:P> := <nat:2> ; \\ \{ <var:a> = <var:w> \land <var:P> = <nat:2> \} \\ <var:P> := <nat:1> + <var:P> * <var:a> ; \\ \{ <var:a> = <var:w> \land <var:P> = <nat:2> * <var:w> + <nat:1> \} \\ <var:P> := <nat:2> + <var:P> * <var:a> ; \\ \{ <var:a> = <var:w> \land <var:P> = <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} \\ <var:P> := <nat:1> + <var:P> * <var:a> ; \\ \{ <var:a> = <var:w> \land <var:P> = <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> \} \\ <var:P> := <nat:2> + <var:P> * <var:a> \\ \{ <var:a> = <var:w> \land <var:P> = <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} \end{eqnarray} Applying Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:a> = <var:w> }} <var:P> := <nat:2> ; <var:P> := <nat:1> + <var:P> * <var:a> ; <var:P> := <nat:2> + <var:P> * <var:a> ; <var:P> := <nat:1> + <var:P> * <var:a> ; <var:P> := <nat:2> + <var:P> * <var:a> {{ <var:P> = <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:P> = <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:P> = <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:P> = <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:P> = <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 