\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:3> + <var:V> * <var:v> ; <var:V> := <nat:3> + <var:V> * <var:v> ; <var:V> := <var:V> * <var:v> ; <var:V> := <nat:2> + <var:V> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:v> = <var:N> $ prior to the evaluation of this series of instructions it follows that we see $ <var:V> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> $ when list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:N> \} \\ <var:V> := <nat:4> ; \\ \{ <var:v> = <var:N> \land <var:V> = <nat:4> \} \\ <var:V> := <nat:3> + <var:V> * <var:v> ; \\ \{ <var:v> = <var:N> \land <var:V> = <nat:4> \times <var:N> + <nat:3> \} \\ <var:V> := <nat:3> + <var:V> * <var:v> ; \\ \{ <var:v> = <var:N> \land <var:V> = <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:3> \} \end{eqnarray} Allowing running this series of commands returns : \begin{eqnarray} <var:V> := <var:V> * <var:v> ; \\ \{ <var:v> = <var:N> \land <var:V> = <nat:4> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + \} \\ <var:V> := <nat:2> + <var:V> * <var:v> \\ \{ <var:v> = <var:N> \land <var:V> = <nat:4> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <nat:3> + <var:V> * <var:v> ; <var:V> := <nat:3> + <var:V> * <var:v> ; <var:V> := <var:V> * <var:v> ; <var:V> := <nat:2> + <var:V> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:v> = <var:N> }} <def:poly> {{ <var:V> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:V> = <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:V> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:V> = <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:V> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 