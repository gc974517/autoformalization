\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:5> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:b> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:b> ; <var:N2> := <var:N2> * <var:b> ; <var:t> := <var:N2> ; <var:t> := <var:t> + <var:N1> ; <var:t> := <var:t> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing that we have $ <var:b> = <var:Q> $ before running this code it must be that we see $ <var:t> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:5> $ once code has exited . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:b> = <var:Q> \} \\ <var:N0> := <nat:5> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \} \end{eqnarray} Furthering the evaluation of our series of instructions returns : \begin{eqnarray} <var:N1> := <nat:3> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:N1> = <nat:3> \} \\ <var:N1> := <var:N1> * <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:N1> = <nat:3> \times <var:Q> \} \\ <var:N2> := <nat:5> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:N1> = <nat:3> \times <var:Q> \land <var:N2> = <nat:5> \} \\ <var:N2> := <var:N2> * <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:N1> = <nat:3> \times <var:Q> \land <var:N2> = <nat:5> \times <var:Q> \} \\ <var:N2> := <var:N2> * <var:b> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:N1> = <nat:3> \times <var:Q> \land <var:N2> = <nat:5> \times <var:Q> ^ <nat:2> \} \\ <var:t> := <var:N2> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:N1> = <nat:3> \times <var:Q> \land <var:t> = <nat:5> \times <var:Q> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:N1> ; \\ \{ <var:b> = <var:Q> \land <var:N0> = <nat:5> \land <var:t> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> \} \\ <var:t> := <var:t> + <var:N0> \\ \{ <var:b> = <var:Q> \land <var:t> = <nat:5> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:5> \} \end{eqnarray} Considering the preceding argument , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N0> := <nat:5> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:b> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:b> ; <var:N2> := <var:N2> * <var:b> ; <var:t> := <var:N2> ; <var:t> := <var:t> + <var:N1> ; <var:t> := <var:t> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:b> = <var:Q> }} <def:poly> {{ <var:t> = <nat:5> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:3> * <var:Q> /\ <var:N2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:3> * <var:Q> /\ <var:N2> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:3> * <var:Q> /\ <var:N2> = <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:3> * <var:Q> /\ <var:t> = <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N0> = <nat:5> /\ <var:t> = <nat:5> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:t> = <nat:5> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 