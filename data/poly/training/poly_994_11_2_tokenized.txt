\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:M> := <nat:3> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:1> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:4> + <var:M> * <var:r> \end{verbatim} Allowing it to hold that $ <var:r> = <var:w> $ ahead of executing this program , it must be that $ <var:M> = <nat:3> \times <var:w> ^ <nat:10> + <nat:2> \times <var:w> ^ <nat:9> + <nat:1> \times <var:w> ^ <nat:8> + <nat:2> \times <var:w> ^ <nat:7> + <nat:3> \times <var:w> ^ <nat:5> + <nat:3> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:4> $ once series of instructions executes . \end{theorem} \begin{proof} The course of logic for our set of commands can be demonstrated by typical Hoare logic . Looking at the following statements in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:r> = <var:w> \} & <var:M> := <nat:3> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> \} & <var:M> := <nat:2> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> + <nat:2> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> + <nat:2> \} & <var:M> := <nat:1> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> \} & <var:M> := <nat:2> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} & <var:M> := <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + \} & <var:M> := <nat:3> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> \} \end{tabular} Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:r> = <var:w> \} & <var:M> := <nat:3> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> \} & <var:M> := <nat:2> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> + <nat:2> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> + <nat:2> \} & <var:M> := <nat:1> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> \} & <var:M> := <nat:2> + <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} \\ \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} & <var:M> := <var:M> * <var:r> & \{ <var:r> = <var:w> \land <var:M> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + \} \end{tabular} This is ensured through the environment update inference rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:r> = <var:w> }} <var:M> := <nat:3> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:1> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:4> + <var:M> * <var:r> {{ <var:M> = <nat:3> * <var:w> ^ <nat:10> + <nat:2> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:M> = <nat:3> * <var:w> ^ <nat:10> + <nat:2> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 