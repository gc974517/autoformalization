\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:2> ; <var:t1> := <nat:7> ; <var:t1> := <var:t1> * <var:A> ; <var:m> := <var:t1> ; <var:m> := <var:m> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:A> = <var:Y> $ --- for any whole numbers $ <var:Y> $ --- before interpreting our code , it must be that we see $ <var:m> = <nat:7> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our list of instructions is clear by the following decorated set of instructions . \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:A> = <var:Y> \land <var:t0> = <nat:2> \} \\ <var:t1> := <nat:7> ; \\ \{ <var:A> = <var:Y> \land <var:t0> = <nat:2> \land <var:t1> = <nat:7> \} \\ <var:t1> := <var:t1> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:t0> = <nat:2> \land <var:t1> = <nat:7> \cdot <var:Y> \} \end{eqnarray} Continuing running the set of instructions returns : \begin{eqnarray} <var:m> := <var:t1> ; \\ \{ <var:A> = <var:Y> \land <var:t0> = <nat:2> \land <var:m> = <nat:7> \cdot <var:Y> \} \\ <var:m> := <var:m> + <var:t0> \\ \{ <var:A> = <var:Y> \land <var:m> = <nat:7> \cdot <var:Y> + <nat:2> \} \end{eqnarray} The application of standard Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:2> ; <var:t1> := <nat:7> ; <var:t1> := <var:t1> * <var:A> ; <var:m> := <var:t1> ; <var:m> := <var:m> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <def:poly> {{ <var:m> = <nat:7> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:t0> = <nat:2> /\ <var:m> = <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:m> = <nat:7> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 