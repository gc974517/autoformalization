\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:8> ; <var:e> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Given --- for natural coefficients $ <var:R> $ --- it to hold that $ <var:s> = <var:R> $ before evaluating this series of instructions then we have $ <var:e> = <nat:8> $ after program exits . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is evident by typical Hoare reasoning . Observing the subsequent steps contained in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:R> \} & <var:f0> := <nat:8> & \{ <var:s> = <var:R> \land <var:f0> = <nat:8> \} \\ \{ <var:s> = <var:R> \land <var:f0> = <nat:8> \} & <var:e> := <var:f0& \{ <var:s> = <var:R> \land <var:e> = <nat:8> \} \end{tabular} This is ensured using the environment update law obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:8> ; <var:e> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:s> = <var:R> }} <def:poly> {{ <var:e> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:e> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 