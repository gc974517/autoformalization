\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:h1> := <var:E> ; <var:h2> := <var:h1> * <var:E> ; <var:h3> := <var:h2> * <var:E> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:9> ; <var:h2> := <var:h2> * <nat:5> ; <var:h3> := <var:h3> * <nat:9> ; <var:A> := <var:h3> <var:A> := <var:A> + <var:h2> <var:A> := <var:A> + <var:h1> <var:A> := <var:A> + <var:h0> \end{verbatim} Allowing it to be that $ <var:E> = <var:O> $ ( for $ <var:O> $ ) ahead of the execution of this series of commands it holds that $ <var:A> = <nat:9> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:5> $ once code is done . \end{theorem} \begin{proof} The method of proof for this series of instructions can be seen with this decorated set of commands . \begin{eqnarray} \{ <var:E> = <var:O> \} \\ <var:h1> := <var:E> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <var:O> \} \\ <var:h2> := <var:h1> * <var:E> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <var:O> \land <var:h2> = <var:O> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:E> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <var:O> \land <var:h2> = <var:O> ^ <nat:2> \land <var:h3> = <var:O> ^ <nat:3> \} \\ <var:h0> := <nat:5> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <var:O> \land <var:h2> = <var:O> ^ <nat:2> \land <var:h3> = <var:O> ^ <nat:3> \land <var:h0> = <nat:5> \} \\ <var:h1> := <var:h1> * <nat:9> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <nat:9> \times <var:O> \land <var:h2> = <var:O> ^ <nat:2> \land <var:h3> = <var:O> ^ <nat:3> \land <var:h0> = <nat:5> \} \\ <var:h2> := <var:h2> * <nat:5> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <nat:9> \times <var:O> \land <var:h2> = <nat:5> \times <var:O> ^ <nat:2> \land <var:h3> = <var:O> ^ <nat:3> \land <var:h0> = <nat:5> \} \\ <var:h3> := <var:h3> * <nat:9> ; \\ \{ <var:E> = <var:O> \land <var:h1> = <nat:9> \times <var:O> \land <var:h2> = <nat:5> \times <var:O> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:O> ^ <nat:3> \land <var:h0> = <nat:5> \} \\ <var:A> := <var:h3> \\ \{ <var:E> = <var:O> \land <var:h1> = <nat:9> \times <var:O> \land <var:h2> = <nat:5> \times <var:O> ^ <nat:2> \land <var:h0> = <nat:5> \land <var:A> = <nat:9> \times <var:O> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:h2> \\ \{ <var:E> = <var:O> \land <var:h1> = <nat:9> \times <var:O> \land <var:h0> = <nat:5> \land <var:A> = <nat:9> \times <var:O> ^ <nat:3> + <nat:5> \times <var:O> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:h1> \\ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:A> = <nat:9> \times <var:O> ^ <nat:3> + <nat:5> \times <var:O> ^ <nat:2> + <nat:9> \times <var:O> \} \\ <var:A> := <var:A> + <var:h0> \\ \{ <var:E> = <var:O> \land <var:A> = <nat:9> \times <var:O> ^ <nat:3> + <nat:5> \times <var:O> ^ <nat:2> + <nat:9> \times <var:O> + <nat:5> \} \end{eqnarray} Applying typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:E> = <var:O> }} <var:h1> := <var:E> ; <var:h2> := <var:h1> * <var:E> ; <var:h3> := <var:h2> * <var:E> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:9> ; <var:h2> := <var:h2> * <nat:5> ; <var:h3> := <var:h3> * <nat:9> ; <var:A> := <var:h3> <var:A> := <var:A> + <var:h2> <var:A> := <var:A> + <var:h1> <var:A> := <var:A> + <var:h0> {{ <var:A> = <nat:9> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <var:O> /\ <var:h2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <var:O> /\ <var:h2> = <var:O> ^ <nat:2> /\ <var:h3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <var:O> /\ <var:h2> = <var:O> ^ <nat:2> /\ <var:h3> = <var:O> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <nat:9> * <var:O> /\ <var:h2> = <var:O> ^ <nat:2> /\ <var:h3> = <var:O> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <nat:9> * <var:O> /\ <var:h2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:h3> = <var:O> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <nat:9> * <var:O> /\ <var:h2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:O> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <nat:9> * <var:O> /\ <var:h2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:h0> = <nat:5> /\ <var:A> = <nat:9> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h1> = <nat:9> * <var:O> /\ <var:h0> = <nat:5> /\ <var:A> = <nat:9> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h0> = <nat:5> /\ <var:A> = <nat:9> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:A> = <nat:9> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 