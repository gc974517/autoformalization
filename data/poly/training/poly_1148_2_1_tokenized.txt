\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:7> ; <var:P> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given , taking $ <var:G> $ , $ <var:I> = <var:G> $ prior to executing our code segment then we have $ <var:P> = <nat:7> $ when segment of code has finished . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:I> = <var:G> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:I> = <var:G> \land <var:F0> = <nat:7> \} \\ <var:P> := <var:F0> \\ \{ <var:I> = <var:G> \land <var:P> = <nat:7> \} \end{eqnarray} Given the preceding argument , our series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:7> ; <var:P> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:I> = <var:G> }} <def:poly> {{ <var:P> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:P> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 