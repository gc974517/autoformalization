\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:1> + <var:z> * <var:l> ; <var:z> := <nat:3> + <var:z> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:l> = <var:C> $ ahead of evaluating this code segment it follows that $ <var:z> = <nat:2> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> + <nat:3> $ when code segment has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be shown with Hoare techniques . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:C> \} & <var:z> := <nat:2> & \{ <var:l> = <var:C> \land <var:z> = <nat:2> \} \end{tabular} Taking a look at the upcoming bits of codein our segment of code , \[ \begin{tabular} {rcl} \{ <var:l> = <var:C> \} & <var:z> := <nat:2> & \{ <var:l> = <var:C> \land <var:z> = <nat:2> \} \\ \{ <var:l> = <var:C> \land <var:z> = <nat:2> \} & <var:z> := <nat:1> + <var:z> * <var:l> & \{ <var:l> = <var:C> \land <var:z> = <nat:2> \times <var:C> + <nat:1> \} \end{tabular} This is shown through the environment update inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:2> ; <var:z> := <nat:1> + <var:z> * <var:l> ; <var:z> := <nat:3> + <var:z> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:l> = <var:C> }} <def:poly> {{ <var:z> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z> = <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 