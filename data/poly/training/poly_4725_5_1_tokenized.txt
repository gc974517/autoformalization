\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:C> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:4> ; <var:p> := <var:t1> <var:p> := <var:p> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Allow that $ <var:C> = <var:m> $ --- given all natural numbers $ <var:m> $ --- before the execution of this code , it follows that $ <var:p> = <nat:4> \cdot <var:m> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:m> \} \\ <var:t1> := <var:C> ; \\ \{ <var:C> = <var:m> \land <var:t1> = <var:m> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:C> = <var:m> \land <var:t1> = <var:m> \land <var:t0> = <nat:3> \} \\ <var:t1> := <var:t1> * <nat:4> ; \\ \{ <var:C> = <var:m> \land <var:t1> = <nat:4> \times <var:m> \land <var:t0> = <nat:3> \} \\ <var:p> := <var:t1> \\ \{ <var:C> = <var:m> \land <var:t0> = <nat:3> \land <var:p> = <nat:4> \times <var:m> \} \\ <var:p> := <var:p> + <var:t0> \\ \{ <var:C> = <var:m> \land <var:p> = <nat:4> \times <var:m> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:C> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:4> ; <var:p> := <var:t1> <var:p> := <var:p> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:C> = <var:m> }} <def:poly> {{ <var:p> = <nat:4> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:t1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:t1> = <var:m> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:t1> = <nat:4> * <var:m> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:t0> = <nat:3> /\ <var:p> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:p> = <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 