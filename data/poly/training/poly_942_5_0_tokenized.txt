\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:4> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:E> ; <var:a> := <var:Y1> ; <var:a> := <var:a> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assume $ <var:E> = <var:N> $ before running this list of instructions , it follows that we have $ <var:a> = <nat:1> * <var:N> + <nat:4> $ after list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:N> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:E> = <var:N> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <nat:1> ; \\ \{ <var:E> = <var:N> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <var:E> ; \\ \{ <var:E> = <var:N> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> \cdot <var:N> \} \\ <var:a> := <var:Y1> ; \\ \{ <var:E> = <var:N> \land <var:Y0> = <nat:4> \land <var:a> = <nat:1> \cdot <var:N> \} \\ <var:a> := <var:a> + <var:Y0> \\ \{ <var:E> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> + <nat:4> \} \end{eqnarray} Continuing running this list of instructions gives us : \begin{eqnarray} \end{eqnarray} Using usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:4> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:E> ; <var:a> := <var:Y1> ; <var:a> := <var:a> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:E> = <var:N> }} <def:poly> {{ <var:a> = <nat:1> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:N> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:N> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:N> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:N> /\ <var:Y0> = <nat:4> /\ <var:a> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:N> /\ <var:a> = <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 