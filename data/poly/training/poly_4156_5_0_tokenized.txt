\begin{document} \begin{theorem} Define the following list of commands such that \begin{verbatim} <var:R0> := <nat:7> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:b> ; <var:a> := <var:R1> ; <var:a> := <var:a> + <var:R0> \end{verbatim} Assume that $ <var:b> = <var:u> $ prior to evaluating our set of instructions , it holds that we have $ <var:a> = <nat:9> \cdot <var:u> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is shown using the following decorated series of commands . \begin{eqnarray} \{ <var:b> = <var:u> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:b> = <var:u> \land <var:R0> = <nat:7> \} \\ <var:R1> := <nat:9> ; \\ \{ <var:b> = <var:u> \land <var:R0> = <nat:7> \land <var:R1> = <nat:9> \} \\ <var:R1> := <var:R1> * <var:b> ; \\ \{ <var:b> = <var:u> \land <var:R0> = <nat:7> \land <var:R1> = <nat:9> \cdot <var:u> \} \\ <var:a> := <var:R1> ; \\ \{ <var:b> = <var:u> \land <var:R0> = <nat:7> \land <var:a> = <nat:9> \cdot <var:u> \} \\ <var:a> := <var:a> + <var:R0> \\ \{ <var:b> = <var:u> \land <var:a> = <nat:9> \cdot <var:u> + <nat:7> \} \end{eqnarray} The application of Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:b> = <var:u> }} <var:R0> := <nat:7> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:b> ; <var:a> := <var:R1> ; <var:a> := <var:a> + <var:R0> {{ <var:a> = <nat:9> * <var:u> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:R0> = <nat:7> /\ <var:a> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:a> = <nat:9> * <var:u> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 