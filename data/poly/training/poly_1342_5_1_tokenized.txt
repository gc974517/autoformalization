\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:e1> := <var:B> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:5> ; <var:w> := <var:e1> <var:w> := <var:w> + <var:e0> \end{verbatim} Allowing ( for all integers $ <var:b> $ ) $ <var:B> = <var:b> $ before the execution of the set of instructions , it holds that we see $ <var:w> = <nat:5> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:B> = <var:b> \} \\ <var:e1> := <var:B> ; \\ \{ <var:B> = <var:b> \land <var:e1> = <var:b> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:B> = <var:b> \land <var:e1> = <var:b> \land <var:e0> = <nat:1> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:B> = <var:b> \land <var:e1> = <nat:5> * <var:b> \land <var:e0> = <nat:1> \} \\ <var:w> := <var:e1> \\ \{ <var:B> = <var:b> \land <var:e0> = <nat:1> \land <var:w> = <nat:5> * <var:b> \} \\ <var:w> := <var:w> + <var:e0> \\ \{ <var:B> = <var:b> \land <var:w> = <nat:5> * <var:b> + <nat:1> \} \end{eqnarray} Thus , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:B> = <var:b> }} <var:e1> := <var:B> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:5> ; <var:w> := <var:e1> <var:w> := <var:w> + <var:e0> {{ <var:w> = <nat:5> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e1> = <var:b> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e1> = <nat:5> * <var:b> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:e0> = <nat:1> /\ <var:w> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:b> /\ <var:w> = <nat:5> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 