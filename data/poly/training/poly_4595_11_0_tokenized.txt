\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:4> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:D> ; <var:B2> := <var:B2> * <var:D> ; <var:B3> := <nat:4> ; <var:B3> := <var:B3> * <var:D> ; <var:B3> := <var:B3> * <var:D> ; <var:B3> := <var:B3> * <var:D> ; <var:f> := <var:B3> ; <var:f> := <var:f> + <var:B2> ; <var:f> := <var:f> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:D> = <var:a> $ , for any natural numbers $ <var:a> $ , before running our series of instructions it holds that $ <var:f> = <nat:4> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:a> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \} \\ <var:B2> := <nat:4> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \} \\ <var:B2> := <var:B2> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> \} \\ <var:B2> := <var:B2> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> ^ <nat:2> \} \\ <var:B3> := <nat:4> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> ^ <nat:2> \land <var:B3> = <nat:4> \} \\ <var:B3> := <var:B3> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:a> \} \\ <var:B3> := <var:B3> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:a> ^ <nat:2> \} \\ <var:B3> := <var:B3> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:a> ^ <nat:3> \} \\ <var:f> := <var:B3> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:B2> = <nat:4> \times <var:a> ^ <nat:2> \land <var:f> = <nat:4> \times <var:a> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:B2> ; \\ \{ <var:D> = <var:a> \land <var:B0> = <nat:4> \land <var:f> = <nat:4> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:B0> \\ \{ <var:D> = <var:a> \land <var:f> = <nat:4> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B0> := <nat:4> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:D> ; <var:B2> := <var:B2> * <var:D> ; <var:B3> := <nat:4> ; <var:B3> := <var:B3> * <var:D> ; <var:B3> := <var:B3> * <var:D> ; <var:B3> := <var:B3> * <var:D> ; <var:f> := <var:B3> ; <var:f> := <var:f> + <var:B2> ; <var:f> := <var:f> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:D> = <var:a> }} <def:poly> {{ <var:f> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:B3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:B2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:f> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:B0> = <nat:4> /\ <var:f> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:f> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 