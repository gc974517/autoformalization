\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e1> := <var:B> ; <var:e2> := <var:e1> * <var:B> ; <var:e3> := <var:e2> * <var:B> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:7> ; <var:O> := <var:e3> <var:O> := <var:O> + <var:e2> <var:O> := <var:O> + <var:e1> <var:O> := <var:O> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:B> = <var:c> $ ( given some positive integer coefficients $ <var:c> $ ) ahead of evaluating this series of instructions , it follows that we have $ <var:O> = <nat:7> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:B> = <var:c> \} \\ <var:e1> := <var:B> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <var:c> \} \\ <var:e2> := <var:e1> * <var:B> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <var:c> \land <var:e2> = <var:c> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:B> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <var:c> \land <var:e2> = <var:c> ^ <nat:2> \land <var:e3> = <var:c> ^ <nat:3> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <var:c> \land <var:e2> = <var:c> ^ <nat:2> \land <var:e3> = <var:c> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:e1> := <var:e1> * <nat:4> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <nat:4> \times <var:c> \land <var:e2> = <var:c> ^ <nat:2> \land <var:e3> = <var:c> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:e2> := <var:e2> * <nat:6> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <nat:4> \times <var:c> \land <var:e2> = <nat:6> \times <var:c> ^ <nat:2> \land <var:e3> = <var:c> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:e3> := <var:e3> * <nat:7> ; \\ \{ <var:B> = <var:c> \land <var:e1> = <nat:4> \times <var:c> \land <var:e2> = <nat:6> \times <var:c> ^ <nat:2> \land <var:e3> = <nat:7> \times <var:c> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:O> := <var:e3> \\ \{ <var:B> = <var:c> \land <var:e1> = <nat:4> \times <var:c> \land <var:e2> = <nat:6> \times <var:c> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:O> = <nat:7> \times <var:c> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:e2> \\ \{ <var:B> = <var:c> \land <var:e1> = <nat:4> \times <var:c> \land <var:e0> = <nat:7> \land <var:O> = <nat:7> \times <var:c> ^ <nat:3> + <nat:6> \times <var:c> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:e1> \\ \{ <var:B> = <var:c> \land <var:e0> = <nat:7> \land <var:O> = <nat:7> \times <var:c> ^ <nat:3> + <nat:6> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> \} \\ <var:O> := <var:O> + <var:e0> \\ \{ <var:B> = <var:c> \land <var:O> = <nat:7> \times <var:c> ^ <nat:3> + <nat:6> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:7> \} \end{eqnarray} Thusly , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:B> ; <var:e2> := <var:e1> * <var:B> ; <var:e3> := <var:e2> * <var:B> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:7> ; <var:O> := <var:e3> <var:O> := <var:O> + <var:e2> <var:O> := <var:O> + <var:e1> <var:O> := <var:O> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:B> = <var:c> }} <def:poly> {{ <var:O> = <nat:7> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <var:c> /\ <var:e2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <var:c> /\ <var:e2> = <var:c> ^ <nat:2> /\ <var:e3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <var:c> /\ <var:e2> = <var:c> ^ <nat:2> /\ <var:e3> = <var:c> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <nat:4> * <var:c> /\ <var:e2> = <var:c> ^ <nat:2> /\ <var:e3> = <var:c> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <nat:4> * <var:c> /\ <var:e2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:e3> = <var:c> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <nat:4> * <var:c> /\ <var:e2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:c> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <nat:4> * <var:c> /\ <var:e2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:e0> = <nat:7> /\ <var:O> = <nat:7> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e1> = <nat:4> * <var:c> /\ <var:e0> = <nat:7> /\ <var:O> = <nat:7> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:e0> = <nat:7> /\ <var:O> = <nat:7> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:O> = <nat:7> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 