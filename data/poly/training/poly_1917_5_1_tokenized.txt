\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:I1> := <var:g> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:1> ; <var:F> := <var:I1> <var:F> := <var:F> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:g> = <var:s> $ given all whole numbers $ <var:s> $ prior to evaluating our code , it must be that we see $ <var:F> = <nat:1> \cdot <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for this program can be done through typical Hoare techniques . Advancing , we see the environment update line letting $ <var:g> $ into $ <var:I1>$ . This advances the condition $ \{ <var:g> = <var:s> \} $ into the postcondition $ \{ <var:g> = <var:s> \land <var:I1> = <var:s> \} $ . Paying attention to the next command in our code , we see the assignment line binding $ <nat:9> $ into $ <var:I0>$ . This advances $ \{ <var:g> = <var:s> \land <var:I1> = <var:s> \} $ to $ \{ <var:g> = <var:s> \land <var:I1> = <var:s> \land <var:I0> = <nat:9> \} $ . This is shown with the assignment rule in Hoare techniques . Following , we see the environment update line \verb | <var:I1> := <var:I1> * <nat:1> ; | . This code transfers $ \{ <var:g> = <var:s> \land <var:I1> = <var:s> \land <var:I0> = <nat:9> \} $ to $ \{ <var:g> = <var:s> \land <var:I1> = <nat:1> \cdot <var:s> \land <var:I0> = <nat:9> \} $ . Moving on to the proceeding statement in our series of commands , we see the binding statement \verb | <var:F> := <var:I1> | . This code takes the precondition $ \{ <var:g> = <var:s> \land <var:I1> = <nat:1> \cdot <var:s> \land <var:I0> = <nat:9> \} $ as the postcondition $ \{ <var:g> = <var:s> \land <var:I0> = <nat:9> \land <var:F> = <nat:1> \cdot <var:s> \} $ . This is known to be sound using the assignment rule from typical Hoare techniques . Stepping forward , we see the binding statement \verb | <var:F> := <var:F> + <var:I0> | . This command takes $ \{ <var:g> = <var:s> \land <var:I0> = <nat:9> \land <var:F> = <nat:1> \cdot <var:s> \} $ into the condition $ \{ <var:g> = <var:s> \land <var:F> = <nat:1> \cdot <var:s> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:g> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:1> ; <var:F> := <var:I1> <var:F> := <var:F> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:g> = <var:s> }} <def:poly> {{ <var:F> = <nat:1> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:I1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:I1> = <var:s> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:I1> = <nat:1> * <var:s> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:I0> = <nat:9> /\ <var:F> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:F> = <nat:1> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 