\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:4> ; <var:L> := <var:v0> \end{verbatim} Allowing that $ <var:r> = <var:x> $ ( given some natural numbers $ <var:x> $ ) ahead of running the list of commands , then we see $ <var:L> = <nat:4> $ after set of instructions exits . \end{theorem} \begin{proof} Observe the following decorated set of instructions . \begin{eqnarray} \{ <var:r> = <var:x> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:r> = <var:x> \land <var:v0> = <nat:4> \} \\ <var:L> := <var:v0> \\ \{ <var:r> = <var:x> \land <var:L> = <nat:4> \} \end{eqnarray} Applying usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:r> = <var:x> }} <var:v0> := <nat:4> ; <var:L> := <var:v0> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 