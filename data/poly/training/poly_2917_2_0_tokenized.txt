\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:3> ; <var:k> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Given that $ <var:S> = <var:O> $ , letting positive coefficients $ <var:O> $ , before executing this code segment it holds that we have $ <var:k> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the program is clear using standard Hoare logic . Observing the proceeding step seen in the list of instructions , we have the binding code \verb | <var:V0> := <nat:3> ; | . This moves $ \{ <var:S> = <var:O> \} $ to the postcondition $ \{ <var:S> = <var:O> \land <var:V0> = <nat:3> \} $ . This is deduced through the assignment rule given in standard Hoare reasoning . Advancing to the next step , we have the variable update command giving $ <var:V0$ as $ <var:k>$ . This redefines the condition $ \{ <var:S> = <var:O> \land <var:V0> = <nat:3> \} $ into the postcondition $ \{ <var:S> = <var:O> \land <var:k> = <nat:3> \} $ . This is guaranteed using the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:k> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:S> = <var:O> }} <def:poly> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 