\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:U1> := <var:i> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:5> ; <var:q> := <var:U1> <var:q> := <var:q> + <var:U0> \end{verbatim} Assume it to hold that $ <var:i> = <var:S> $ ahead of running the series of commands then we see $ <var:q> = <nat:5> * <var:S> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be shown by standard Hoare techniques . Stepping forward , we see the assignment line \verb | <var:U1> := <var:i> ; | . This code moves $ \{ <var:i> = <var:S> \} $ to the postcondition $ \{ <var:i> = <var:S> \land <var:U1> = <var:S> \} $ . This is sound with the assignment law of Hoare reasoning . Moving forward , we have the statement yielding $ <nat:1> $ to $ <var:U0>$ . This redefines the condition $ \{ <var:i> = <var:S> \land <var:U1> = <var:S> \} $ as $ \{ <var:i> = <var:S> \land <var:U1> = <var:S> \land <var:U0> = <nat:1> \} $ . This is guaranteed through the assignment scheme from Hoare reasoning . Honing in on the upcoming piece of code contained in the series of instructions , we see the environment update code \verb | <var:U1> := <var:U1> * <nat:5> ; | . This forwards $ \{ <var:i> = <var:S> \land <var:U1> = <var:S> \land <var:U0> = <nat:1> \} $ into the postcondition $ \{ <var:i> = <var:S> \land <var:U1> = <nat:5> \times <var:S> \land <var:U0> = <nat:1> \} $ . This is given with the assignment inference rule defined in usual Hoare reasoning . Moving forward to the next piece of code in our set of instructions , the variable update line yielding $ <var:U1$ to $ <var:q>$ . This statement moves the precondition $ \{ <var:i> = <var:S> \land <var:U1> = <nat:5> \times <var:S> \land <var:U0> = <nat:1> \} $ to the condition $ \{ <var:i> = <var:S> \land <var:U0> = <nat:1> \land <var:q> = <nat:5> \times <var:S> \} $ . This is shown through the assignment inference rule defined by typical Hoare techniques . Focusing on the next piece of code seen in the code , the binding code \verb | <var:q> := <var:q> + <var:U0> | . This redefines $ \{ <var:i> = <var:S> \land <var:U0> = <nat:1> \land <var:q> = <nat:5> \times <var:S> \} $ as the condition $ \{ <var:i> = <var:S> \land <var:q> = <nat:5> \times <var:S> + <nat:1> \} $ . This is ensured through the assignment rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:i> = <var:S> }} <var:U1> := <var:i> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:5> ; <var:q> := <var:U1> <var:q> := <var:q> + <var:U0> {{ <var:q> = <nat:5> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:U1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:U1> = <var:S> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:U1> = <nat:5> * <var:S> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:U0> = <nat:1> /\ <var:q> = <nat:5> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:q> = <nat:5> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 