\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:1> ; <var:k> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:x> = <var:Q> $ prior to evaluating this series of commands it follows that we have $ <var:k> = <nat:1> $ when segment of code has executed . \end{theorem} \begin{proof} The way to prove correctness for the list of commands is shown by Hoare reasoning . Immediately after , we have the environment update line giving $ <nat:1> $ to $ <var:v0>$ . This moves the condition $ \{ <var:x> = <var:Q> \} $ to the postcondition $ \{ <var:x> = <var:Q> \land <var:v0> = <nat:1> \} $ . Immediately after , the environment update code assigning $ <var:v0$ as $ <var:k>$ . This moves the condition $ \{ <var:x> = <var:Q> \land <var:v0> = <nat:1> \} $ to the condition $ \{ <var:x> = <var:Q> \land <var:k> = <nat:1> \} $ . This is shown to be logically sound by the assignment law found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:k> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:x> = <var:Q> }} <def:poly> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 