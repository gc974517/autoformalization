\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:H> ; <var:L2> := <nat:3> ; <var:L2> := <var:L2> * <var:H> ; <var:L2> := <var:L2> * <var:H> ; <var:T> := <var:L2> ; <var:T> := <var:T> + <var:L1> ; <var:T> := <var:T> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for any integers $ <var:E> $ ) that we have $ <var:H> = <var:E> $ before the execution of this code it follows that we see $ <var:T> = <nat:3> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:4> $ after list of instructions finishes . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives : \begin{eqnarray} \{ <var:H> = <var:E> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \} \\ <var:L1> := <nat:8> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \} \\ <var:L1> := <var:L1> * <var:H> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> * <var:E> \} \\ <var:L2> := <nat:3> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> * <var:E> \land <var:L2> = <nat:3> \} \\ <var:L2> := <var:L2> * <var:H> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> * <var:E> \land <var:L2> = <nat:3> * <var:E> \} \\ <var:L2> := <var:L2> * <var:H> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> * <var:E> \land <var:L2> = <nat:3> * <var:E> ^ <nat:2> \} \\ <var:T> := <var:L2> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> * <var:E> \land <var:T> = <nat:3> * <var:E> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:L1> ; \\ \{ <var:H> = <var:E> \land <var:L0> = <nat:4> \land <var:T> = <nat:3> * <var:E> ^ <nat:2> + <nat:8> * <var:E> \} \\ <var:T> := <var:T> + <var:L0> \\ \{ <var:H> = <var:E> \land <var:T> = <nat:3> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:4> \} \end{eqnarray} Thusly , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:4> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:H> ; <var:L2> := <nat:3> ; <var:L2> := <var:L2> * <var:H> ; <var:L2> := <var:L2> * <var:H> ; <var:T> := <var:L2> ; <var:T> := <var:T> + <var:L1> ; <var:T> := <var:T> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:H> = <var:E> }} <def:poly> {{ <var:T> = <nat:3> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:E> /\ <var:L2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:E> /\ <var:L2> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:E> /\ <var:L2> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:E> /\ <var:T> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:L0> = <nat:4> /\ <var:T> = <nat:3> * <var:E> ^ <nat:2> + <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:T> = <nat:3> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 