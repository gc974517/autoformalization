\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:4> ; <var:Q> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Assuming for some positive integer coefficients $ <var:E> $ that $ <var:h> = <var:E> $ ahead of evaluating this segment of code , it must be that we have $ <var:Q> = <nat:4> $ after set of instructions is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:h> = <var:E> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:h> = <var:E> \land <var:s0> = <nat:4> \} \\ <var:Q> := <var:s0> \\ \{ <var:h> = <var:E> \land <var:Q> = <nat:4> \} \end{eqnarray} Considering the above , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:Q> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:h> = <var:E> }} <def:poly> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:E> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 