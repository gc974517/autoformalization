\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:6> ; <var:v> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Allowing that we have $ <var:X> = <var:x> $ ahead of executing the code segment then we have $ <var:v> = <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:X> = <var:x> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:X> = <var:x> \land <var:J0> = <nat:6> \} \\ <var:v> := <var:J0> \\ \{ <var:X> = <var:x> \land <var:v> = <nat:6> \} \end{eqnarray} Furthering the execution of our program results in : \begin{eqnarray} \end{eqnarray} Therefore , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:v> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:X> = <var:x> }} <def:poly> {{ <var:v> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:v> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 