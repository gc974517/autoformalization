\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:8> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:Y> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:Y> ; <var:n2> := <var:n2> * <var:Y> ; <var:K> := <var:n2> ; <var:K> := <var:K> + <var:n1> ; <var:K> := <var:K> + <var:n0> \end{verbatim} Allowing that we have $ <var:Y> = <var:I> $ ahead of executing the list of instructions , it follows that we have $ <var:K> = <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> $ after series of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of our program is demonstrated by standard Hoare logic . Taking a look at the proceeding pieces of code found in our list of instructions , \begin{eqnarray} \{ <var:Y> = <var:I> \} \, <var:n0> := <nat:8> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \} \, <var:n1> := <nat:5> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> \} \, <var:n1> := <var:n1> * <var:Y> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \} \, <var:n2> := <nat:8> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:n2> = <nat:8> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:n2> = <nat:8> \} \, <var:n2> := <var:n2> * <var:Y> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:n2> = <nat:8> * <var:I> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:n2> = <nat:8> * <var:I> \} \, <var:n2> := <var:n2> * <var:Y> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:n2> = <nat:8> * <var:I> ^ <nat:2> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:n2> = <nat:8> * <var:I> ^ <nat:2> \} \, <var:K> := <var:n2> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:K> = <nat:8> * <var:I> ^ <nat:2> \} \\ \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:n1> = <nat:5> * <var:I> \land <var:K> = <nat:8> * <var:I> ^ <nat:2> \} \, <var:K> := <var:K> + <var:n1> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \land <var:K> = <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> \} \end{eqnarray} Advancing to the next step , \begin{eqnarray} \{ <var:Y> = <var:I> \} \, <var:n0> := <nat:8> \, \{ <var:Y> = <var:I> \land <var:n0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Y> = <var:I> }} <var:n0> := <nat:8> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:Y> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:Y> ; <var:n2> := <var:n2> * <var:Y> ; <var:K> := <var:n2> ; <var:K> := <var:K> + <var:n1> ; <var:K> := <var:K> + <var:n0> {{ <var:K> = <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:I> /\ <var:n2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:I> /\ <var:n2> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:I> /\ <var:n2> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:5> * <var:I> /\ <var:K> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:n0> = <nat:8> /\ <var:K> = <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:K> = <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 