\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:1> ; <var:N> := <var:B0> \end{verbatim} Assuming --- assuming some positive integer coefficients $ <var:A> $ --- it to hold that $ <var:h> = <var:A> $ ahead of evaluating our series of instructions , then $ <var:N> = <nat:1> $ after code has terminated . \end{theorem} \begin{proof} The argument for this segment of code can be demonstrated through typical Hoare techniques . Advancing to the following step in our list of instructions , we have the environment update command giving $ <nat:1> $ into $ <var:B0>$ . This statement transfers the precondition $ \{ <var:h> = <var:A> \} $ into the condition $ \{ <var:h> = <var:A> \land <var:B0> = <nat:1> \} $ . Further , the variable binding statement assigning $ <var:B0$ to $ <var:N>$ . This redefines $ \{ <var:h> = <var:A> \land <var:B0> = <nat:1> \} $ toward the condition $ \{ <var:h> = <var:A> \land <var:N> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:h> = <var:A> }} <var:B0> := <nat:1> ; <var:N> := <var:B0> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 