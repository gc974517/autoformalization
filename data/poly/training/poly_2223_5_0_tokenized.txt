\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:P> ; <var:S> := <var:d1> ; <var:S> := <var:S> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:P> = <var:l> $ given any whole numbers $ <var:l> $ ahead of interpreting our code it follows that we have $ <var:S> = <nat:6> \times <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning yields : \begin{eqnarray} \{ <var:P> = <var:l> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:P> = <var:l> \land <var:d0> = <nat:1> \} \\ <var:d1> := <nat:6> ; \\ \{ <var:P> = <var:l> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \} \\ <var:d1> := <var:d1> * <var:P> ; \\ \{ <var:P> = <var:l> \land <var:d0> = <nat:1> \land <var:d1> = <nat:6> \times <var:l> \} \\ <var:S> := <var:d1> ; \\ \{ <var:P> = <var:l> \land <var:d0> = <nat:1> \land <var:S> = <nat:6> \times <var:l> \} \\ <var:S> := <var:S> + <var:d0> \\ \{ <var:P> = <var:l> \land <var:S> = <nat:6> \times <var:l> + <nat:1> \} \end{eqnarray} As a result , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:P> ; <var:S> := <var:d1> ; <var:S> := <var:S> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:P> = <var:l> }} <def:poly> {{ <var:S> = <nat:6> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:d0> = <nat:1> /\ <var:S> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:S> = <nat:6> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 