\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:1> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:n> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:n> ; <var:m2> := <var:m2> * <var:n> ; <var:U> := <var:m2> ; <var:U> := <var:U> + <var:m1> ; <var:U> := <var:U> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Assume that $ <var:n> = <var:u> $ prior to interpreting our segment of code , it must be that we have $ <var:U> = <nat:7> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:u> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \} \\ <var:m1> := <nat:5> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \} \\ <var:m1> := <var:m1> * <var:n> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \cdot <var:u> \} \\ <var:m2> := <nat:7> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \cdot <var:u> \land <var:m2> = <nat:7> \} \\ <var:m2> := <var:m2> * <var:n> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \cdot <var:u> \land <var:m2> = <nat:7> \cdot <var:u> \} \\ <var:m2> := <var:m2> * <var:n> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \cdot <var:u> \land <var:m2> = <nat:7> \cdot <var:u> ^ <nat:2> \} \\ <var:U> := <var:m2> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:m1> = <nat:5> \cdot <var:u> \land <var:U> = <nat:7> \cdot <var:u> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:m1> ; \\ \{ <var:n> = <var:u> \land <var:m0> = <nat:1> \land <var:U> = <nat:7> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> \} \\ <var:U> := <var:U> + <var:m0> \\ \{ <var:n> = <var:u> \land <var:U> = <nat:7> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:1> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:n> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:n> ; <var:m2> := <var:m2> * <var:n> ; <var:U> := <var:m2> ; <var:U> := <var:U> + <var:m1> ; <var:U> := <var:U> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:n> = <var:u> }} <def:poly> {{ <var:U> = <nat:7> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> * <var:u> /\ <var:m2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> * <var:u> /\ <var:m2> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> * <var:u> /\ <var:m2> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:5> * <var:u> /\ <var:U> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:m0> = <nat:1> /\ <var:U> = <nat:7> * <var:u> ^ <nat:2> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:U> = <nat:7> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 