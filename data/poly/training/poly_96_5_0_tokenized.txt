\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:6> ; <var:o1> := <var:o1> * <var:M> ; <var:e> := <var:o1> ; <var:e> := <var:e> + <var:o0> \end{verbatim} Assuming it to be that $ <var:M> = <var:y> $ ( for $ <var:y> \in \mathbb{N} $ ) before interpreting this set of instructions it holds that we see $ <var:e> = <nat:6> \cdot <var:y> + <nat:2> $ once code segment has finished . \end{theorem} \begin{proof} The course of logic for this code segment can be given by standard Hoare techniques . Taking another step toward the subsequent command found in the code segment , we have the statement assigning $ <nat:2> $ as $ <var:o0>$ . This command advances $ \{ <var:M> = <var:y> \} $ into $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \} $ . Shifting focus toward the next line of code in the code segment , we see the assignment statement yielding $ <nat:6> $ to $ <var:o1>$ . This transfers the condition $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \} $ into the condition $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:6> \} $ . Further , we have the variable binding command binding $ <var:o1> * <var:M> $ toward $ <var:o1>$ . This line redefines the condition $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:6> \} $ as the condition $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:6> * <var:y> \} $ . This is shown by the assignment law found in typical Hoare techniques . Focusing on the next command seen in the segment of code , we have the variable assignmet code \verb | <var:e> := <var:o1> ; | . This moves the precondition $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:6> * <var:y> \} $ as the postcondition $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \land <var:e> = <nat:6> * <var:y> \} $ . This is given by the assignment rule found in typical Hoare reasoning . Considering the subsequent step in our set of instructions , we have the variable update statement \verb | <var:e> := <var:e> + <var:o0> | . This statement takes $ \{ <var:M> = <var:y> \land <var:o0> = <nat:2> \land <var:e> = <nat:6> * <var:y> \} $ to the condition $ \{ <var:M> = <var:y> \land <var:e> = <nat:6> * <var:y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:M> = <var:y> }} <var:o0> := <nat:2> ; <var:o1> := <nat:6> ; <var:o1> := <var:o1> * <var:M> ; <var:e> := <var:o1> ; <var:e> := <var:e> + <var:o0> {{ <var:e> = <nat:6> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:o0> = <nat:2> /\ <var:e> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:e> = <nat:6> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 