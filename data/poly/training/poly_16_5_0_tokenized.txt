\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:5> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:M> ; <var:a> := <var:Q1> ; <var:a> := <var:a> + <var:Q0> \end{verbatim} Assume that $ <var:M> = <var:B> $ ahead of the execution of this set of commands , it holds that $ <var:a> = <nat:9> * <var:B> + <nat:5> $ when program executes . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be seen by Hoare techniques . Moving on to the upcoming command contained in our program , we have the line yielding $ <nat:5> $ to $ <var:Q0>$ . This transfers the precondition $ \{ <var:M> = <var:B> \} $ into $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \} $ . This is rigorously given by the assignment rule defined by usual Hoare logic . Advancing to the proceeding step found in our segment of code , we have the assignment statement yielding $ <nat:9> $ into $ <var:Q1>$ . This command forwards the precondition $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \} $ to $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:9> \} $ . This is known to be sound by the assignment scheme defined by typical Hoare reasoning . Advancing , we see the binding statement \verb | <var:Q1> := <var:Q1> * <var:M> ; | . This command redefines $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:9> \} $ toward the condition $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:9> \cdot <var:B> \} $ . Stepping through , we see the statement yielding $ <var:Q1> $ toward $ <var:a>$ . This statement transfers $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:9> \cdot <var:B> \} $ toward $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \land <var:a> = <nat:9> \cdot <var:B> \} $ . Observing the subsequent line of code in our list of instructions , the variable update command \verb | <var:a> := <var:a> + <var:Q0> | . This forwards the precondition $ \{ <var:M> = <var:B> \land <var:Q0> = <nat:5> \land <var:a> = <nat:9> \cdot <var:B> \} $ toward the postcondition $ \{ <var:M> = <var:B> \land <var:a> = <nat:9> \cdot <var:B> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:M> = <var:B> }} <var:Q0> := <nat:5> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:M> ; <var:a> := <var:Q1> ; <var:a> := <var:a> + <var:Q0> {{ <var:a> = <nat:9> * <var:B> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:Q0> = <nat:5> /\ <var:a> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:a> = <nat:9> * <var:B> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 