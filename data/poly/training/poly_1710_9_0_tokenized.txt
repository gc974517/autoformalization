\begin{document} \begin{theorem} Define a code as follows \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:c> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:c> ; <var:y2> := <var:y2> * <var:c> ; <var:D> := <var:y2> ; <var:D> := <var:D> + <var:y1> ; <var:D> := <var:D> + <var:y0> \end{verbatim} Assume $ <var:c> = <var:R> $ taking $ <var:R> \in \mathbb{Z}^+ $ before the execution of this series of commands it follows that we see $ <var:D> = <nat:5> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:5> $ once series of commands is done executing . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:c> = <var:R> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \} \\ <var:y1> := <nat:8> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \} \\ <var:y1> := <var:y1> * <var:c> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \cdot <var:R> \} \\ <var:y2> := <nat:5> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \cdot <var:R> \land <var:y2> = <nat:5> \} \\ <var:y2> := <var:y2> * <var:c> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \cdot <var:R> \land <var:y2> = <nat:5> \cdot <var:R> \} \\ <var:y2> := <var:y2> * <var:c> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \cdot <var:R> \land <var:y2> = <nat:5> \cdot <var:R> ^ <nat:2> \} \\ <var:D> := <var:y2> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \cdot <var:R> \land <var:D> = <nat:5> \cdot <var:R> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:y1> ; \\ \{ <var:c> = <var:R> \land <var:y0> = <nat:5> \land <var:D> = <nat:5> \cdot <var:R> ^ <nat:2> + <nat:8> \cdot <var:R> \} \\ <var:D> := <var:D> + <var:y0> \\ \{ <var:c> = <var:R> \land <var:D> = <nat:5> \cdot <var:R> ^ <nat:2> + <nat:8> \cdot <var:R> + <nat:5> \} \end{eqnarray} Thusly , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:c> = <var:R> }} <var:y0> := <nat:5> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:c> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:c> ; <var:y2> := <var:y2> * <var:c> ; <var:D> := <var:y2> ; <var:D> := <var:D> + <var:y1> ; <var:D> := <var:D> + <var:y0> {{ <var:D> = <nat:5> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> * <var:R> /\ <var:y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> * <var:R> /\ <var:y2> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> * <var:R> /\ <var:y2> = <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> * <var:R> /\ <var:D> = <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:y0> = <nat:5> /\ <var:D> = <nat:5> * <var:R> ^ <nat:2> + <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:D> = <nat:5> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 