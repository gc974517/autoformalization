\begin{document} \begin{theorem} Let the following code in \emph{Imp} as follows \begin{verbatim} <var:u> := <nat:1> ; <var:u> := <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> \end{verbatim} Allow given every natural coefficients $ <var:G> $ it to hold that $ <var:b> = <var:G> $ before running the set of commands then $ <var:u> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is accomplished using typical Hoare logic . Considering the proceeding bits of codecontained in our list of commands , \verb | { <var:b> = <var:G> } <var:u> := <nat:1> { <var:b> = <var:G> \land <var:u> = <nat:1> } | and \verb | { <var:b> = <var:G> \land <var:u> = <nat:1> } <var:u> := <var:u> * <var:b> { <var:b> = <var:G> \land <var:u> = <nat:1> \cdot <var:G> + } | . Going to the next step , \verb | { <var:b> = <var:G> } <var:u> := <nat:1> { <var:b> = <var:G> \land <var:u> = <nat:1> } | . This is known to be sound with the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:b> = <var:G> }} <var:u> := <nat:1> ; <var:u> := <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> {{ <var:u> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:u> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:u> = <nat:1> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:u> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 