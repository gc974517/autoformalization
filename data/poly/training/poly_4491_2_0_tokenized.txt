\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:H0> := <nat:4> ; <var:F> := <var:H0> \end{verbatim} Assume ( assuming some $ <var:I> \in \mathbb{N} $ ) it to be that $ <var:j> = <var:I> $ before the evaluation of the series of commands it must be that we see $ <var:F> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is clear through typical Hoare techniques . Shifting focus toward the next line found in our segment of code , we have the environment update statement \verb | <var:H0> := <nat:4> ; | . This command transfers the condition $ \{ <var:j> = <var:I> \} $ toward the condition $ \{ <var:j> = <var:I> \land <var:H0> = <nat:4> \} $ . This is deduced by the assignment scheme obtained from typical Hoare techniques . Taking a look at the following bit of code in the set of commands , we see the environment update command defining $ <var:H0$ toward $ <var:F>$ . This transfers $ \{ <var:j> = <var:I> \land <var:H0> = <nat:4> \} $ into the condition $ \{ <var:j> = <var:I> \land <var:F> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <var:H0> := <nat:4> ; <var:F> := <var:H0> {{ <var:F> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:F> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 