\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:U0> := <nat:1> ; <var:k> := <var:U0> \end{verbatim} Assuming that we have $ <var:r> = <var:g> $ given all positive coefficients $ <var:g> $ ahead of interpreting this code segment , it follows that we have $ <var:k> = <nat:1> $ when code has finished executing . \end{theorem} \begin{proof} Proving correctness for this code segment is done by standard Hoare reasoning . Going forward , the assignment statement \verb | <var:U0> := <nat:1> ; | . This line takes the precondition $ \{ <var:r> = <var:g> \} $ into the postcondition $ \{ <var:r> = <var:g> \land <var:U0> = <nat:1> \} $ . This is shown to be logically sound with the assignment scheme in Hoare techniques . Considering the proceeding step seen in the series of commands , the variable assignmet statement giving $ <var:U0$ as $ <var:k>$ . This command moves the condition $ \{ <var:r> = <var:g> \land <var:U0> = <nat:1> \} $ to $ \{ <var:r> = <var:g> \land <var:k> = <nat:1> \} $ . This is shown by the assignment law defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:r> = <var:g> }} <var:U0> := <nat:1> ; <var:k> := <var:U0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 