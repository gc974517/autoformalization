\begin{document} \begin{theorem} We define the following program such that \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:y> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:y> ; <var:R2> := <var:R2> * <var:y> ; <var:q> := <var:R2> ; <var:q> := <var:q> + <var:R1> ; <var:q> := <var:q> + <var:R0> \end{verbatim} Allowing $ <var:y> = <var:d> $ ahead of the evaluation of the code segment then $ <var:q> = <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:6> $ once code finishes . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be seen using standard Hoare logic . Moving forward to the next step , \begin{verbatim} { <var:y> = <var:d> } <var:R0> := <nat:6> { <var:y> = <var:d> \land <var:R0> = <nat:6> } { <var:y> = <var:d> \land <var:R0> = <nat:6> } <var:R1> := <nat:8> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> } { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> } <var:R1> := <var:R1> * <var:y> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> } { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> } <var:R2> := <nat:4> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:R2> = <nat:4> } { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:R2> = <nat:4> } <var:R2> := <var:R2> * <var:y> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:R2> = <nat:4> \cdot <var:d> } { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:R2> = <nat:4> \cdot <var:d> } <var:R2> := <var:R2> * <var:y> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:R2> = <nat:4> \cdot <var:d> ^ <nat:2> } { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:R2> = <nat:4> \cdot <var:d> ^ <nat:2> } <var:q> := <var:R2> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:q> = <nat:4> \cdot <var:d> ^ <nat:2> } { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> \cdot <var:d> \land <var:q> = <nat:4> \cdot <var:d> ^ <nat:2> } <var:q> := <var:q> + <var:R1> { <var:y> = <var:d> \land <var:R0> = <nat:6> \land <var:q> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:8> \cdot <var:d> } \end{verbatim} This is rigorously given using the variable binding law obtained from typical Hoare reasoning . Moving on to the next step , \begin{verbatim} { <var:y> = <var:d> } <var:R0> := <nat:6> { <var:y> = <var:d> \land <var:R0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:y> = <var:d> }} <var:R0> := <nat:6> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:y> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:y> ; <var:R2> := <var:R2> * <var:y> ; <var:q> := <var:R2> ; <var:q> := <var:q> + <var:R1> ; <var:q> := <var:q> + <var:R0> {{ <var:q> = <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:d> /\ <var:R2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:d> /\ <var:R2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:d> /\ <var:R2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:d> /\ <var:q> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:R0> = <nat:6> /\ <var:q> = <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:q> = <nat:4> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 