\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:a0> := <nat:5> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:m> ; <var:O> := <var:a1> ; <var:O> := <var:O> + <var:a0> \end{verbatim} Allowing $ <var:m> = <var:T> $ prior to evaluating the list of commands , it follows that we see $ <var:O> = <nat:5> * <var:T> + <nat:5> $ after series of commands executes . \end{theorem} \begin{proof} Notice this decorated series of commands . \begin{eqnarray} \{ <var:m> = <var:T> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:m> = <var:T> \land <var:a0> = <nat:5> \} \\ <var:a1> := <nat:5> ; \\ \{ <var:m> = <var:T> \land <var:a0> = <nat:5> \land <var:a1> = <nat:5> \} \\ <var:a1> := <var:a1> * <var:m> ; \\ \{ <var:m> = <var:T> \land <var:a0> = <nat:5> \land <var:a1> = <nat:5> \times <var:T> \} \\ <var:O> := <var:a1> ; \\ \{ <var:m> = <var:T> \land <var:a0> = <nat:5> \land <var:O> = <nat:5> \times <var:T> \} \\ <var:O> := <var:O> + <var:a0> \\ \{ <var:m> = <var:T> \land <var:O> = <nat:5> \times <var:T> + <nat:5> \} \end{eqnarray} The application of usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:m> = <var:T> }} <var:a0> := <nat:5> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:m> ; <var:O> := <var:a1> ; <var:O> := <var:O> + <var:a0> {{ <var:O> = <nat:5> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:a0> = <nat:5> /\ <var:O> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:O> = <nat:5> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 