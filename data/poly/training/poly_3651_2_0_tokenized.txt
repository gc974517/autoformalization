\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:5> ; <var:Q> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:U> = <var:c> $ before interpreting the set of commands , it must be that $ <var:Q> = <nat:5> $ after list of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions can be done with usual Hoare logic . Jumping to the subsequent piece of code in our list of instructions , the assignment statement letting $ <nat:5> $ as $ <var:o0>$ . This redefines the condition $ \{ <var:U> = <var:c> \} $ to the condition $ \{ <var:U> = <var:c> \land <var:o0> = <nat:5> \} $ . Moving on to the next step , we see the statement giving $ <var:o0$ to $ <var:Q>$ . This advances the condition $ \{ <var:U> = <var:c> \land <var:o0> = <nat:5> \} $ as the postcondition $ \{ <var:U> = <var:c> \land <var:Q> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:5> ; <var:Q> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <def:poly> {{ <var:Q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:Q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 