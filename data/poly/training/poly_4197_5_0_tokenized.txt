\begin{document} \begin{theorem} Let the following program : \begin{verbatim} <var:S0> := <nat:5> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:F> ; <var:d> := <var:S1> ; <var:d> := <var:d> + <var:S0> \end{verbatim} Given $ <var:F> = <var:T> $ given any positive coefficients $ <var:T> $ before evaluating this code then we see $ <var:d> = <nat:7> \times <var:T> + <nat:5> $ once code segment is done executing . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:F> = <var:T> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:F> = <var:T> \land <var:S0> = <nat:5> \} \\ <var:S1> := <nat:7> ; \\ \{ <var:F> = <var:T> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> \} \\ <var:S1> := <var:S1> * <var:F> ; \\ \{ <var:F> = <var:T> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> * <var:T> \} \end{eqnarray} Continuing the execution of this series of commands gives us : \begin{eqnarray} <var:d> := <var:S1> ; \\ \{ <var:F> = <var:T> \land <var:S0> = <nat:5> \land <var:d> = <nat:7> * <var:T> \} \\ <var:d> := <var:d> + <var:S0> \\ \{ <var:F> = <var:T> \land <var:d> = <nat:7> * <var:T> + <nat:5> \} \end{eqnarray} Allowing the evaluation of our list of commands yields : \begin{eqnarray} \end{eqnarray} Thusly , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:F> = <var:T> }} <var:S0> := <nat:5> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:F> ; <var:d> := <var:S1> ; <var:d> := <var:d> + <var:S0> {{ <var:d> = <nat:7> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:S0> = <nat:5> /\ <var:d> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:d> = <nat:7> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 