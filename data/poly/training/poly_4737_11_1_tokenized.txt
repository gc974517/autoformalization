\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:N> ; <var:M2> := <var:M1> * <var:N> ; <var:M3> := <var:M2> * <var:N> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:9> ; <var:M3> := <var:M3> * <nat:8> ; <var:H> := <var:M3> <var:H> := <var:H> + <var:M2> <var:H> := <var:H> + <var:M1> <var:H> := <var:H> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assume it to be that $ <var:N> = <var:w> $ prior to the evaluation of our set of instructions , then $ <var:H> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:6> $ . \end{theorem} \begin{proof} The argument for our series of instructions is demonstrated using typical Hoare techniques . Jumping to the proceeding pieces of code in the set of instructions , we see \begin{eqnarray} \{ <var:N> = <var:w> \} \, <var:M1> := <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \, <var:M2> := <var:M1> * <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} \end{eqnarray} Moving forward to the next step , \begin{eqnarray} \{ <var:N> = <var:w> \} \, <var:M1> := <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \, <var:M2> := <var:M1> * <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \} \end{eqnarray} This is ensured with the variable binding inference rule in typical Hoare reasoning . Keeping momentum , we have \begin{eqnarray} \{ <var:N> = <var:w> \} \, <var:M1> := <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \, <var:M2> := <var:M1> * <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \} \, <var:M0> := <nat:6> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:6> \} \\ \{ <var:N> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:6> \} \, <var:M1> := <var:M1> * <nat:6> \, \{ <var:N> = <var:w> \land <var:M1> = <nat:6> \times <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:6> \} \end{eqnarray} This is known to be sound by the scheme from usual Hoare reasoning . Advancing on , \begin{eqnarray} \{ <var:N> = <var:w> \} \, <var:M1> := <var:N> \, \{ <var:N> = <var:w> \land <var:M1> = <var:w> \} \end{eqnarray} This is ensured by the environment update inference rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:N> ; <var:M2> := <var:M1> * <var:N> ; <var:M3> := <var:M2> * <var:N> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:9> ; <var:M3> := <var:M3> * <nat:8> ; <var:H> := <var:M3> <var:H> := <var:H> + <var:M2> <var:H> := <var:H> + <var:M1> <var:H> := <var:H> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:N> = <var:w> }} <def:poly> {{ <var:H> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:w> ^ <nat:3> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:M0> = <nat:6> /\ <var:H> = <nat:8> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M0> = <nat:6> /\ <var:H> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:M0> = <nat:6> /\ <var:H> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:H> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 