\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:A0> := <nat:3> ; <var:X> := <var:A0> \end{verbatim} Assuming that $ <var:z> = <var:r> $ before executing our set of instructions it holds that we have $ <var:X> = <nat:3> $ when list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:r> \} \\ <var:A0> := <nat:3> ; \\ \{ <var:z> = <var:r> \land <var:A0> = <nat:3> \} \\ <var:X> := <var:A0> \\ \{ <var:z> = <var:r> \land <var:X> = <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:z> = <var:r> }} <var:A0> := <nat:3> ; <var:X> := <var:A0> {{ <var:X> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:X> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 