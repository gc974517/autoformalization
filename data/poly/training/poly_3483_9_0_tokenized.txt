\begin{document} \begin{theorem} Consider the following program as \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:s> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:s> ; <var:b2> := <var:b2> * <var:s> ; <var:f> := <var:b2> ; <var:f> := <var:f> + <var:b1> ; <var:f> := <var:f> + <var:b0> \end{verbatim} Assuming that we have $ <var:s> = <var:n> $ ( for some positive integers $ <var:n> $ ) prior to the evaluation of the series of instructions it must be that we have $ <var:f> = <nat:2> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:6> $ after list of commands has executed . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:s> = <var:n> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \} \\ <var:b1> := <nat:4> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \} \\ <var:b1> := <var:b1> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \times <var:n> \} \\ <var:b2> := <nat:2> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \times <var:n> \land <var:b2> = <nat:2> \} \\ <var:b2> := <var:b2> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \times <var:n> \land <var:b2> = <nat:2> \times <var:n> \} \\ <var:b2> := <var:b2> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \times <var:n> \land <var:b2> = <nat:2> \times <var:n> ^ <nat:2> \} \end{eqnarray} Allowing the evaluation of our list of instructions gives us : \begin{eqnarray} <var:f> := <var:b2> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \times <var:n> \land <var:f> = <nat:2> \times <var:n> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:b1> ; \\ \{ <var:s> = <var:n> \land <var:b0> = <nat:6> \land <var:f> = <nat:2> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> \} \\ <var:f> := <var:f> + <var:b0> \\ \{ <var:s> = <var:n> \land <var:f> = <nat:2> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:6> \} \end{eqnarray} Considering the preceding argument , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:s> = <var:n> }} <var:b0> := <nat:6> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:s> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:s> ; <var:b2> := <var:b2> * <var:s> ; <var:f> := <var:b2> ; <var:f> := <var:f> + <var:b1> ; <var:f> := <var:f> + <var:b0> {{ <var:f> = <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:n> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:n> /\ <var:b2> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:n> /\ <var:b2> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:n> /\ <var:f> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:b0> = <nat:6> /\ <var:f> = <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:f> = <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 