\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:2> + <var:w> * <var:y> ; <var:w> := <var:w> * <var:y> ; <var:w> := <nat:4> + <var:w> * <var:y> ; <var:w> := <var:w> * <var:y> ; <var:w> := <nat:4> + <var:w> * <var:y> ; <var:w> := <nat:4> + <var:w> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:y> = <var:s> $ ahead of executing the code , it must be that we see $ <var:w> = <nat:4> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:4> $ when list of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare logic results in : \begin{eqnarray} \{ <var:y> = <var:s> \} \\ <var:w> := <nat:4> ; \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \} \\ <var:w> := <nat:2> + <var:w> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \times <var:s> + <nat:2> \} \\ <var:w> := <var:w> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + \} \\ <var:w> := <nat:4> + <var:w> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \} \\ <var:w> := <var:w> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> + \} \\ <var:w> := <nat:4> + <var:w> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:4> \times <var:s> ^ <nat:2> + <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:y> \\ \{ <var:y> = <var:s> \land <var:w> = <nat:4> \times <var:s> ^ <nat:6> + <nat:2> \times <var:s> ^ <nat:5> + <nat:4> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> + <nat:4> \} \end{eqnarray} Continuing the evaluation of our series of commands returns : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , this code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:4> ; <var:w> := <nat:2> + <var:w> * <var:y> ; <var:w> := <var:w> * <var:y> ; <var:w> := <nat:4> + <var:w> * <var:y> ; <var:w> := <var:w> * <var:y> ; <var:w> := <nat:4> + <var:w> * <var:y> ; <var:w> := <nat:4> + <var:w> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:y> = <var:s> }} <def:poly> {{ <var:w> = <nat:4> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:w> = <nat:4> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 