\begin{document} \begin{theorem} Take a series of commands such that \begin{verbatim} <var:x1> := <var:v> ; <var:x2> := <var:x1> * <var:v> ; <var:x3> := <var:x2> * <var:v> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:8> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:6> ; <var:a> := <var:x3> <var:a> := <var:a> + <var:x2> <var:a> := <var:a> + <var:x1> <var:a> := <var:a> + <var:x0> \end{verbatim} Assume it to be that $ <var:v> = <var:j> $ ( given whole numbers $ <var:j> $ ) before evaluating this set of commands , then we have $ <var:a> = <nat:6> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:7> $ once code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:j> \} \\ <var:x1> := <var:v> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <var:j> \} \\ <var:x2> := <var:x1> * <var:v> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <var:j> \land <var:x2> = <var:j> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:v> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <var:j> \land <var:x2> = <var:j> ^ <nat:2> \land <var:x3> = <var:j> ^ <nat:3> \} \\ <var:x0> := <nat:7> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <var:j> \land <var:x2> = <var:j> ^ <nat:2> \land <var:x3> = <var:j> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:x1> := <var:x1> * <nat:8> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <nat:8> * <var:j> \land <var:x2> = <var:j> ^ <nat:2> \land <var:x3> = <var:j> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:x2> := <var:x2> * <nat:4> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <nat:8> * <var:j> \land <var:x2> = <nat:4> * <var:j> ^ <nat:2> \land <var:x3> = <var:j> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:x3> := <var:x3> * <nat:6> ; \\ \{ <var:v> = <var:j> \land <var:x1> = <nat:8> * <var:j> \land <var:x2> = <nat:4> * <var:j> ^ <nat:2> \land <var:x3> = <nat:6> * <var:j> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:a> := <var:x3> \\ \{ <var:v> = <var:j> \land <var:x1> = <nat:8> * <var:j> \land <var:x2> = <nat:4> * <var:j> ^ <nat:2> \land <var:x0> = <nat:7> \land <var:a> = <nat:6> * <var:j> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:x2> \\ \{ <var:v> = <var:j> \land <var:x1> = <nat:8> * <var:j> \land <var:x0> = <nat:7> \land <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:x1> \\ \{ <var:v> = <var:j> \land <var:x0> = <nat:7> \land <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} \\ <var:a> := <var:a> + <var:x0> \\ \{ <var:v> = <var:j> \land <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:7> \} \end{eqnarray} The application of Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:v> = <var:j> }} <var:x1> := <var:v> ; <var:x2> := <var:x1> * <var:v> ; <var:x3> := <var:x2> * <var:v> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:8> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:6> ; <var:a> := <var:x3> <var:a> := <var:a> + <var:x2> <var:a> := <var:a> + <var:x1> <var:a> := <var:a> + <var:x0> {{ <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <var:j> /\ <var:x2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <var:j> /\ <var:x2> = <var:j> ^ <nat:2> /\ <var:x3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <var:j> /\ <var:x2> = <var:j> ^ <nat:2> /\ <var:x3> = <var:j> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <nat:8> * <var:j> /\ <var:x2> = <var:j> ^ <nat:2> /\ <var:x3> = <var:j> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <nat:8> * <var:j> /\ <var:x2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:x3> = <var:j> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <nat:8> * <var:j> /\ <var:x2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:x3> = <nat:6> * <var:j> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <nat:8> * <var:j> /\ <var:x2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:x0> = <nat:7> /\ <var:a> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x1> = <nat:8> * <var:j> /\ <var:x0> = <nat:7> /\ <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:x0> = <nat:7> /\ <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:a> = <nat:6> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 