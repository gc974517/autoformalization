\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:i> ; <var:c> := <var:L1> ; <var:c> := <var:c> + <var:L0> \end{verbatim} Allowing , for some positive integer coefficients $ <var:A> $ , $ <var:i> = <var:A> $ before running our set of instructions it holds that we see $ <var:c> = <nat:5> \times <var:A> + <nat:5> $ . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:i> = <var:A> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:i> = <var:A> \land <var:L0> = <nat:5> \} \\ <var:L1> := <nat:5> ; \\ \{ <var:i> = <var:A> \land <var:L0> = <nat:5> \land <var:L1> = <nat:5> \} \\ <var:L1> := <var:L1> * <var:i> ; \\ \{ <var:i> = <var:A> \land <var:L0> = <nat:5> \land <var:L1> = <nat:5> \times <var:A> \} \\ <var:c> := <var:L1> ; \\ \{ <var:i> = <var:A> \land <var:L0> = <nat:5> \land <var:c> = <nat:5> \times <var:A> \} \\ <var:c> := <var:c> + <var:L0> \\ \{ <var:i> = <var:A> \land <var:c> = <nat:5> \times <var:A> + <nat:5> \} \end{eqnarray} As a consequence , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:i> = <var:A> }} <var:L0> := <nat:5> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:i> ; <var:c> := <var:L1> ; <var:c> := <var:c> + <var:L0> {{ <var:c> = <nat:5> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:L0> = <nat:5> /\ <var:c> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:c> = <nat:5> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 