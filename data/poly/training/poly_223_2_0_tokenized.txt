\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:6> ; <var:d> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( given all $ <var:V> $ ) it to be that $ <var:b> = <var:V> $ prior to interpreting the program then $ <var:d> = <nat:6> $ once set of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is done by Hoare techniques . Keeping momentum , the assignment command assigning $ <nat:6> $ as $ <var:c0>$ . This statement moves the precondition $ \{ <var:b> = <var:V> \} $ toward $ \{ <var:b> = <var:V> \land <var:c0> = <nat:6> \} $ . Observing the following piece of code seen in the series of instructions , we see the variable binding code \verb | <var:d> := <var:c0> | . This line transfers $ \{ <var:b> = <var:V> \land <var:c0> = <nat:6> \} $ toward the postcondition $ \{ <var:b> = <var:V> \land <var:d> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:6> ; <var:d> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:b> = <var:V> }} <def:poly> {{ <var:d> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:d> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 