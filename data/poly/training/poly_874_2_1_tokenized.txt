\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:7> ; <var:Q> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allow that $ <var:C> = <var:S> $ before evaluating this code segment then we have $ <var:Q> = <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare logic gives : \begin{eqnarray} \{ <var:C> = <var:S> \} \\ <var:q0> := <nat:7> ; \\ \{ <var:C> = <var:S> \land <var:q0> = <nat:7> \} \\ <var:Q> := <var:q0> \\ \{ <var:C> = <var:S> \land <var:Q> = <nat:7> \} \end{eqnarray} As a result , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:7> ; <var:Q> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:C> = <var:S> }} <def:poly> {{ <var:Q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:Q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 