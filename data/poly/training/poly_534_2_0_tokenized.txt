\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:6> ; <var:U> := <var:x0> \end{verbatim} Allow $ <var:h> = <var:q> $ ( given all natural coefficients $ <var:q> $ ) ahead of executing the code segment , it holds that $ <var:U> = <nat:6> $ once program is done . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be shown through standard Hoare logic . Shifting focus toward the upcoming bit of code seen in our set of instructions , we have the command \verb | <var:x0> := <nat:6> ; | . This advances the precondition $ \{ <var:h> = <var:q> \} $ as the condition $ \{ <var:h> = <var:q> \land <var:x0> = <nat:6> \} $ . This is shown by the assignment law obtained from Hoare techniques . Stepping forward , we have the binding statement \verb | <var:U> := <var:x0> | . This code advances the condition $ \{ <var:h> = <var:q> \land <var:x0> = <nat:6> \} $ to $ \{ <var:h> = <var:q> \land <var:U> = <nat:6> \} $ . This is ensured with the assignment inference rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:h> = <var:q> }} <var:x0> := <nat:6> ; <var:U> := <var:x0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 