\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:u0> := <nat:6> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:N> ; <var:B> := <var:u1> ; <var:B> := <var:B> + <var:u0> \end{verbatim} Assuming $ <var:N> = <var:K> $ --- for $ <var:K> $ --- before running this program it holds that we see $ <var:B> = <nat:5> \cdot <var:K> + <nat:6> $ after set of instructions is done executing . \end{theorem} \begin{proof} We can see that the below decorated program . \begin{eqnarray} \{ <var:N> = <var:K> \} \\ <var:u0> := <nat:6> ; \\ \{ <var:N> = <var:K> \land <var:u0> = <nat:6> \} \\ <var:u1> := <nat:5> ; \\ \{ <var:N> = <var:K> \land <var:u0> = <nat:6> \land <var:u1> = <nat:5> \} \\ <var:u1> := <var:u1> * <var:N> ; \\ \{ <var:N> = <var:K> \land <var:u0> = <nat:6> \land <var:u1> = <nat:5> \times <var:K> \} \\ <var:B> := <var:u1> ; \\ \{ <var:N> = <var:K> \land <var:u0> = <nat:6> \land <var:B> = <nat:5> \times <var:K> \} \\ <var:B> := <var:B> + <var:u0> \\ \{ <var:N> = <var:K> \land <var:B> = <nat:5> \times <var:K> + <nat:6> \} \end{eqnarray} The application of Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:N> = <var:K> }} <var:u0> := <nat:6> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:N> ; <var:B> := <var:u1> ; <var:B> := <var:B> + <var:u0> {{ <var:B> = <nat:5> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u0> = <nat:6> /\ <var:B> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:B> = <nat:5> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 