\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:R1> := <var:v> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:Q> := <var:R1> <var:Q> := <var:Q> + <var:R0> \end{verbatim} Assuming --- for all $ <var:u> $ --- that we have $ <var:v> = <var:u> $ prior to the execution of the program , it holds that we see $ <var:Q> = <nat:6> \cdot <var:u> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:u> \} \\ <var:R1> := <var:v> ; \\ \{ <var:v> = <var:u> \land <var:R1> = <var:u> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:v> = <var:u> \land <var:R1> = <var:u> \land <var:R0> = <nat:6> \} \\ <var:R1> := <var:R1> * <nat:6> ; \\ \{ <var:v> = <var:u> \land <var:R1> = <nat:6> * <var:u> \land <var:R0> = <nat:6> \} \\ <var:Q> := <var:R1> \\ \{ <var:v> = <var:u> \land <var:R0> = <nat:6> \land <var:Q> = <nat:6> * <var:u> \} \\ <var:Q> := <var:Q> + <var:R0> \\ \{ <var:v> = <var:u> \land <var:Q> = <nat:6> * <var:u> + <nat:6> \} \end{eqnarray} The application of Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:v> = <var:u> }} <var:R1> := <var:v> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:Q> := <var:R1> <var:Q> := <var:Q> + <var:R0> {{ <var:Q> = <nat:6> * <var:u> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:R1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:R1> = <var:u> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:R1> = <nat:6> * <var:u> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:R0> = <nat:6> /\ <var:Q> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:Q> = <nat:6> * <var:u> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 