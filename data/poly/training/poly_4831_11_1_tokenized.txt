\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} : \begin{verbatim} <var:x1> := <var:F> ; <var:x2> := <var:x1> * <var:F> ; <var:x3> := <var:x2> * <var:F> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:6> ; <var:x2> := <var:x2> * <nat:1> ; <var:x3> := <var:x3> * <nat:2> ; <var:r> := <var:x3> <var:r> := <var:r> + <var:x2> <var:r> := <var:r> + <var:x1> <var:r> := <var:r> + <var:x0> \end{verbatim} Allow that $ <var:F> = <var:i> $ prior to executing our code , it follows that $ <var:r> = <nat:2> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the series of commands is shown using typical Hoare techniques . Stepping through , the variable binding code assigning $ <var:F> $ toward $ <var:x1>$ . This line moves the precondition $ \{ <var:F> = <var:i> \} $ to $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \} $ . This is given using the assignment inference rule defined by typical Hoare logic . Following , we see the variable binding line \verb | <var:x2> := <var:x1> * <var:F> ; | . This advances the condition $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \} $ into the postcondition $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \} $ . Looking at the upcoming step contained in the segment of code , we have the variable binding command binding $ <var:x2> * <var:F> $ as $ <var:x3>$ . This forwards $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \} $ . This is guaranteed with the assignment inference rule defined in usual Hoare logic . Moving forward to the next step , we see the binding statement \verb | <var:x0> := <nat:4> ; | . This code redefines $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \} $ as $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ . This is shown through the assignment inference rule defined in standard Hoare logic . After , we see the variable update line yielding $ <var:x1> * <nat:6> $ as $ <var:x1>$ . This statement advances $ \{ <var:F> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ toward $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ . This is guaranteed by the assignment rule of typical Hoare reasoning . Advancing to the next step , the binding command defining $ <var:x2> * <nat:1> $ into $ <var:x2>$ . This moves the precondition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ toward the condition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <nat:1> * <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ . This is deduced through the assignment inference rule from standard Hoare reasoning . Advancing to the next statement seen in the segment of code , we have the environment update statement yielding $ <var:x3> * <nat:2> $ to $ <var:x3>$ . This takes the condition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <nat:1> * <var:i> ^ <nat:2> \land <var:x3> = <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ toward the condition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <nat:1> * <var:i> ^ <nat:2> \land <var:x3> = <nat:2> * <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ . Further , we see the assignment statement \verb | <var:r> := <var:x3> | . This statement redefines the precondition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <nat:1> * <var:i> ^ <nat:2> \land <var:x3> = <nat:2> * <var:i> ^ <nat:3> \land <var:x0> = <nat:4> \} $ to the postcondition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <nat:1> * <var:i> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> \} $ . Moving on , we see the variable assignmet line \verb | <var:r> := <var:r> + <var:x2> | . This statement moves the condition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x2> = <nat:1> * <var:i> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> \} $ into $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x0> = <nat:4> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> \} $ . This is deduced by the assignment law of typical Hoare reasoning . Moving onward , we see the environment update code \verb | <var:r> := <var:r> + <var:x1> | . This line redefines the precondition $ \{ <var:F> = <var:i> \land <var:x1> = <nat:6> * <var:i> \land <var:x0> = <nat:4> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> \} $ as the condition $ \{ <var:F> = <var:i> \land <var:x0> = <nat:4> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ . Focusing on the upcoming piece of code in the set of commands , we see the variable assignmet line defining $ <var:r> + <var:x0$ toward $ <var:r>$ . This takes $ \{ <var:F> = <var:i> \land <var:x0> = <nat:4> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ toward the postcondition $ \{ <var:F> = <var:i> \land <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:4> \} $ . This is given by the assignment inference rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:F> = <var:i> }} <var:x1> := <var:F> ; <var:x2> := <var:x1> * <var:F> ; <var:x3> := <var:x2> * <var:F> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:6> ; <var:x2> := <var:x2> * <nat:1> ; <var:x3> := <var:x3> * <nat:2> ; <var:r> := <var:x3> <var:r> := <var:r> + <var:x2> <var:r> := <var:r> + <var:x1> <var:r> := <var:r> + <var:x0> {{ <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <var:i> /\ <var:x2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <var:i> /\ <var:x2> = <var:i> ^ <nat:2> /\ <var:x3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <var:i> /\ <var:x2> = <var:i> ^ <nat:2> /\ <var:x3> = <var:i> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <nat:6> * <var:i> /\ <var:x2> = <var:i> ^ <nat:2> /\ <var:x3> = <var:i> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <nat:6> * <var:i> /\ <var:x2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:x3> = <var:i> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <nat:6> * <var:i> /\ <var:x2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:i> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <nat:6> * <var:i> /\ <var:x2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:x0> = <nat:4> /\ <var:r> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x1> = <nat:6> * <var:i> /\ <var:x0> = <nat:4> /\ <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:x0> = <nat:4> /\ <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:r> = <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 