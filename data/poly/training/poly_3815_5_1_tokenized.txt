\begin{document} \begin{theorem} Consider a program in \emph{Imp} as \begin{verbatim} <var:c1> := <var:g> ; <var:c0> := <nat:9> ; <var:c1> := <var:c1> * <nat:4> ; <var:x> := <var:c1> <var:x> := <var:x> + <var:c0> \end{verbatim} Assuming , given some positive integers $ <var:Y> $ , it to hold that $ <var:g> = <var:Y> $ before interpreting this list of commands , it holds that we have $ <var:x> = <nat:4> \times <var:Y> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is demonstrated with this decorated series of commands . \begin{eqnarray} \{ <var:g> = <var:Y> \} \\ <var:c1> := <var:g> ; \\ \{ <var:g> = <var:Y> \land <var:c1> = <var:Y> \} \\ <var:c0> := <nat:9> ; \\ \{ <var:g> = <var:Y> \land <var:c1> = <var:Y> \land <var:c0> = <nat:9> \} \\ <var:c1> := <var:c1> * <nat:4> ; \\ \{ <var:g> = <var:Y> \land <var:c1> = <nat:4> \times <var:Y> \land <var:c0> = <nat:9> \} \\ <var:x> := <var:c1> \\ \{ <var:g> = <var:Y> \land <var:c0> = <nat:9> \land <var:x> = <nat:4> \times <var:Y> \} \\ <var:x> := <var:x> + <var:c0> \\ \{ <var:g> = <var:Y> \land <var:x> = <nat:4> \times <var:Y> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:g> = <var:Y> }} <var:c1> := <var:g> ; <var:c0> := <nat:9> ; <var:c1> := <var:c1> * <nat:4> ; <var:x> := <var:c1> <var:x> := <var:x> + <var:c0> {{ <var:x> = <nat:4> * <var:Y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:c1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:c1> = <var:Y> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:c1> = <nat:4> * <var:Y> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:c0> = <nat:9> /\ <var:x> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Y> /\ <var:x> = <nat:4> * <var:Y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 