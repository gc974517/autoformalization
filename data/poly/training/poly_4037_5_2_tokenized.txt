\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <var:X> * <var:F> ; <var:X> := <nat:4> + <var:X> * <var:F> ; <var:X> := <nat:3> + <var:X> * <var:F> ; <var:X> := <nat:1> + <var:X> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Assume , given some natural numbers $ <var:V> $ , it to hold that $ <var:F> = <var:V> $ prior to the evaluation of our program it must be that we see $ <var:X> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> $ after list of instructions is done . \end{theorem} \begin{proof} The argument for the series of commands can be seen using standard Hoare logic . Advancing to the following step seen in our set of commands , the statement \verb | <var:X> := <nat:1> ; | . This line moves the condition $ \{ <var:F> = <var:V> \} $ into $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> \} $ . This is sound with the assignment inference rule given by standard Hoare reasoning . Observing the following bit of code contained in the segment of code , the variable binding statement \verb | <var:X> := <var:X> * <var:F> ; | . This statement redefines $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> \} $ as $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> + \} $ . This is rigorously given through the assignment inference rule of typical Hoare techniques . Moving forward to the upcoming statement found in the program , we have the variable assignmet command assigning $ <nat:4> + <var:X> * <var:F> $ to $ <var:X>$ . This statement redefines the precondition $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> + \} $ toward $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> ^ <nat:2> + <nat:4> \} $ . Immediately after , we see the variable assignmet command giving $ <nat:3> + <var:X> * <var:F> $ into $ <var:X>$ . This code advances the condition $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:3> \} $ . Paying attention to the proceeding line of code in our list of commands , we see the variable assignmet code \verb | <var:X> := <nat:1> + <var:X> * <var:F> | . This command transfers the precondition $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:3> \} $ as $ \{ <var:F> = <var:V> \land <var:X> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> \} $ . This is given by the assignment scheme given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:1> ; <var:X> := <var:X> * <var:F> ; <var:X> := <nat:4> + <var:X> * <var:F> ; <var:X> := <nat:3> + <var:X> * <var:F> ; <var:X> := <nat:1> + <var:X> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:F> = <var:V> }} <def:poly> {{ <var:X> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:V> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:V> /\ <var:X> = <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:V> /\ <var:X> = <nat:1> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:V> /\ <var:X> = <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:V> /\ <var:X> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 