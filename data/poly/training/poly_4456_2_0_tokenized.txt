\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:x0> := <nat:9> ; <var:s> := <var:x0> \end{verbatim} Allow $ <var:K> = <var:O> $ ahead of the execution of the list of instructions it must be that we see $ <var:s> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be shown using typical Hoare techniques . Moving forward to the next step , we have \verb | { <var:K> = <var:O> } <var:x0> := <nat:9> { <var:K> = <var:O> \land <var:x0> = <nat:9> } | . Immediately after , we have \verb | { <var:K> = <var:O> } <var:x0> := <nat:9> { <var:K> = <var:O> \land <var:x0> = <nat:9> } | . This is given through the variable assignmet law found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:K> = <var:O> }} <var:x0> := <nat:9> ; <var:s> := <var:x0> {{ <var:s> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:O> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:O> /\ <var:s> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 