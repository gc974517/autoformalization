\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:A0> := <nat:1> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:B> ; <var:k> := <var:A1> ; <var:k> := <var:k> + <var:A0> \end{verbatim} Allowing given some whole numbers $ <var:w> $ that we have $ <var:B> = <var:w> $ prior to the evaluation of the set of commands , it follows that we have $ <var:k> = <nat:6> \cdot <var:w> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be given using usual Hoare logic . Observing the following statement in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:w> \} & <var:A0> := <nat:1> & \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \} \end{tabular} Taking a look at the upcoming commands seen in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:B> = <var:w> \} & <var:A0> := <nat:1> & \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \} \\ \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \} & <var:A1> := <nat:6> & \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> \} \\ \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> \} & <var:A1> := <var:A1> * <var:B> & \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> \cdot <var:w> \} \\ \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> \cdot <var:w> \} & <var:k> := <var:A1> & \{ <var:B> = <var:w> \land <var:A0> = <nat:1> \land <var:k> = <nat:6> \cdot <var:w> \} \end{tabular} This is rigorously given with the assignment scheme given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:B> = <var:w> }} <var:A0> := <nat:1> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:B> ; <var:k> := <var:A1> ; <var:k> := <var:k> + <var:A0> {{ <var:k> = <nat:6> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:A0> = <nat:1> /\ <var:k> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:k> = <nat:6> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 