\begin{document} \begin{theorem} Take the following set of commands : \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:k> \end{verbatim} Given that we have $ <var:k> = <var:u> $ before the execution of this list of commands , it follows that we see $ <var:I> = <nat:4> \cdot <var:u> + <nat:2> $ after segment of code finishes . \end{theorem} \begin{proof} Proving correctness for the code segment can be shown using this decorated series of commands . \begin{eqnarray} \{ <var:k> = <var:u> \} \\ <var:I> := <nat:4> ; \\ \{ <var:k> = <var:u> \land <var:I> = <nat:4> \} \\ <var:I> := <nat:2> + <var:I> * <var:k> \\ \{ <var:k> = <var:u> \land <var:I> = <nat:4> \cdot <var:u> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:k> = <var:u> }} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:k> {{ <var:I> = <nat:4> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:I> = <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 