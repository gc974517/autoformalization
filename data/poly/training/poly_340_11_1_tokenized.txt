\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:O> ; <var:y2> := <var:y1> * <var:O> ; <var:y3> := <var:y2> * <var:O> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:2> ; <var:y3> := <var:y3> * <nat:9> ; <var:r> := <var:y3> <var:r> := <var:r> + <var:y2> <var:r> := <var:r> + <var:y1> <var:r> := <var:r> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:O> = <var:R> $ ahead of interpreting this series of instructions , it holds that we have $ <var:r> = <nat:9> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:8> $ after set of commands has executed . \end{theorem} \begin{proof} Observe the following decorated series of instructions . \begin{eqnarray} \{ <var:O> = <var:R> \} \\ <var:y1> := <var:O> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <var:R> \} \\ <var:y2> := <var:y1> * <var:O> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <var:R> \land <var:y2> = <var:R> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:O> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <var:R> \land <var:y2> = <var:R> ^ <nat:2> \land <var:y3> = <var:R> ^ <nat:3> \} \\ <var:y0> := <nat:8> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <var:R> \land <var:y2> = <var:R> ^ <nat:2> \land <var:y3> = <var:R> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:y1> := <var:y1> * <nat:3> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <nat:3> \cdot <var:R> \land <var:y2> = <var:R> ^ <nat:2> \land <var:y3> = <var:R> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:y2> := <var:y2> * <nat:2> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <nat:3> \cdot <var:R> \land <var:y2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:y3> = <var:R> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:y3> := <var:y3> * <nat:9> ; \\ \{ <var:O> = <var:R> \land <var:y1> = <nat:3> \cdot <var:R> \land <var:y2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:y3> = <nat:9> \cdot <var:R> ^ <nat:3> \land <var:y0> = <nat:8> \} \end{eqnarray} Furthering the execution of this set of instructions results in : \begin{eqnarray} <var:r> := <var:y3> \\ \{ <var:O> = <var:R> \land <var:y1> = <nat:3> \cdot <var:R> \land <var:y2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:y0> = <nat:8> \land <var:r> = <nat:9> \cdot <var:R> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:y2> \\ \{ <var:O> = <var:R> \land <var:y1> = <nat:3> \cdot <var:R> \land <var:y0> = <nat:8> \land <var:r> = <nat:9> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:y1> \\ \{ <var:O> = <var:R> \land <var:y0> = <nat:8> \land <var:r> = <nat:9> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> \} \\ <var:r> := <var:r> + <var:y0> \\ \{ <var:O> = <var:R> \land <var:r> = <nat:9> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:O> ; <var:y2> := <var:y1> * <var:O> ; <var:y3> := <var:y2> * <var:O> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:2> ; <var:y3> := <var:y3> * <nat:9> ; <var:r> := <var:y3> <var:r> := <var:r> + <var:y2> <var:r> := <var:r> + <var:y1> <var:r> := <var:r> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:O> = <var:R> }} <def:poly> {{ <var:r> = <nat:9> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <var:R> /\ <var:y2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <var:R> /\ <var:y2> = <var:R> ^ <nat:2> /\ <var:y3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <var:R> /\ <var:y2> = <var:R> ^ <nat:2> /\ <var:y3> = <var:R> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <nat:3> * <var:R> /\ <var:y2> = <var:R> ^ <nat:2> /\ <var:y3> = <var:R> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <nat:3> * <var:R> /\ <var:y2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:y3> = <var:R> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <nat:3> * <var:R> /\ <var:y2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:R> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <nat:3> * <var:R> /\ <var:y2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:y0> = <nat:8> /\ <var:r> = <nat:9> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y1> = <nat:3> * <var:R> /\ <var:y0> = <nat:8> /\ <var:r> = <nat:9> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y0> = <nat:8> /\ <var:r> = <nat:9> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:r> = <nat:9> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 