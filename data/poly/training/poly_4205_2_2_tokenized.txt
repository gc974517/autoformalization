\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:3> + <var:h> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:o> = <var:w> $ ( for some positive coefficients $ <var:w> $ ) ahead of running the list of commands , it must be that we have $ <var:h> = <nat:3> \times <var:w> + <nat:3> $ after series of commands has terminated . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:h> := <nat:3> ; \\ \{ <var:o> = <var:w> \land <var:h> = <nat:3> \} \\ <var:h> := <nat:3> + <var:h> * <var:o> \\ \{ <var:o> = <var:w> \land <var:h> = <nat:3> \cdot <var:w> + <nat:3> \} \end{eqnarray} Hence , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:3> + <var:h> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <def:poly> {{ <var:h> = <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:h> = <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 