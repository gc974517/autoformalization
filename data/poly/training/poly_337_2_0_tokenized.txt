\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:1> ; <var:o> := <var:I0> \end{verbatim} Assume ( for every $ <var:d> $ ) $ <var:y> = <var:d> $ prior to interpreting this list of commands , it holds that we see $ <var:o> = <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:y> = <var:d> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:y> = <var:d> \land <var:I0> = <nat:1> \} \\ <var:o> := <var:I0> \\ \{ <var:y> = <var:d> \land <var:o> = <nat:1> \} \end{eqnarray} Considering the preceding argument , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:y> = <var:d> }} <var:I0> := <nat:1> ; <var:o> := <var:I0> {{ <var:o> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:o> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 