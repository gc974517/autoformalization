\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:v> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Y> := <var:Q1> <var:Y> := <var:Y> + <var:Q0> \end{verbatim} Assume that we have $ <var:v> = <var:X> $ ahead of the evaluation of this code segment it holds that we see $ <var:Y> = <nat:4> * <var:X> + <nat:4> $ after set of instructions terminates . \end{theorem} \begin{proof} The flow of logic for this code is accomplished by the below decorated code . \begin{eqnarray} \{ <var:v> = <var:X> \} \\ <var:Q1> := <var:v> ; \\ \{ <var:v> = <var:X> \land <var:Q1> = <var:X> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:v> = <var:X> \land <var:Q1> = <var:X> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:v> = <var:X> \land <var:Q1> = <nat:4> * <var:X> \land <var:Q0> = <nat:4> \} \\ <var:Y> := <var:Q1> \\ \{ <var:v> = <var:X> \land <var:Q0> = <nat:4> \land <var:Y> = <nat:4> * <var:X> \} \\ <var:Y> := <var:Y> + <var:Q0> \\ \{ <var:v> = <var:X> \land <var:Y> = <nat:4> * <var:X> + <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:v> = <var:X> }} <var:Q1> := <var:v> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Y> := <var:Q1> <var:Y> := <var:Y> + <var:Q0> {{ <var:Y> = <nat:4> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:Q1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:Q1> = <var:X> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:Q1> = <nat:4> * <var:X> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:Q0> = <nat:4> /\ <var:Y> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:Y> = <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 