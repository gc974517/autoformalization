\begin{document} \begin{theorem} Let the following set of instructions such that \begin{verbatim} <var:w1> := <var:p> ; <var:w2> := <var:w1> * <var:p> ; <var:w3> := <var:w2> * <var:p> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:8> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:3> ; <var:P> := <var:w3> <var:P> := <var:P> + <var:w2> <var:P> := <var:P> + <var:w1> <var:P> := <var:P> + <var:w0> \end{verbatim} Given that we have $ <var:p> = <var:X> $ ahead of running the list of instructions it holds that we see $ <var:P> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:8> \times <var:X> + <nat:7> $ once program finishes . \end{theorem} \begin{proof} The flow of logic for our set of instructions is done using standard Hoare reasoning . Taking a look at the next bit of code found in the list of commands , the variable binding line yielding $ <var:p> $ to $ <var:w1>$ . This code redefines the condition $ \{ <var:p> = <var:X> \} $ toward the condition $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \} $ . Shifting focus toward the next statement found in the list of commands , we see the assignment statement letting $ <var:w1> * <var:p> $ as $ <var:w2>$ . This redefines the precondition $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \} $ as the condition $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \} $ . Observing the upcoming command seen in the list of instructions , the variable update statement letting $ <var:w2> * <var:p> $ as $ <var:w3>$ . This redefines the condition $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \} $ toward $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \} $ . This is given through the assignment law obtained from Hoare reasoning . Taking another step toward the upcoming piece of code found in the program , the statement \verb | <var:w0> := <nat:7> ; | . This redefines the precondition $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \} $ as $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . This is known to be sound with the assignment inference rule defined in typical Hoare techniques . Focusing on the proceeding line contained in our list of instructions , the environment update statement \verb | <var:w1> := <var:w1> * <nat:8> ; | . This transfers the precondition $ \{ <var:p> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ as the postcondition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . Moving on , we see the variable assignmet code \verb | <var:w2> := <var:w2> * <nat:3> ; | . This takes the condition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ as the condition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . This is known to be sound by the assignment inference rule defined by Hoare logic . Moving on to the next line of code contained in our list of instructions , we have the binding line \verb | <var:w3> := <var:w3> * <nat:3> ; | . This code redefines the precondition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ toward $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:w3> = <nat:3> \times <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ . This is guaranteed by the assignment inference rule defined by standard Hoare reasoning . Shifting focus toward the next line of code contained in our list of commands , the code assigning $ <var:w3$ toward $ <var:P>$ . This moves the precondition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:w3> = <nat:3> \times <var:X> ^ <nat:3> \land <var:w0> = <nat:7> \} $ to the postcondition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:w0> = <nat:7> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> \} $ . Further , the assignment statement letting $ <var:P> + <var:w2$ to $ <var:P>$ . This code transfers the precondition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:w0> = <nat:7> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> \} $ as the condition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w0> = <nat:7> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> \} $ . Honing in on the upcoming piece of code seen in our series of commands , we have the environment update code defining $ <var:P> + <var:w1$ to $ <var:P>$ . This line forwards the condition $ \{ <var:p> = <var:X> \land <var:w1> = <nat:8> \times <var:X> \land <var:w0> = <nat:7> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> \} $ to the condition $ \{ <var:p> = <var:X> \land <var:w0> = <nat:7> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:8> \times <var:X> \} $ . This is sound using the assignment scheme from standard Hoare reasoning . After , the variable assignmet code defining $ <var:P> + <var:w0$ to $ <var:P>$ . This statement takes the condition $ \{ <var:p> = <var:X> \land <var:w0> = <nat:7> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:8> \times <var:X> \} $ toward the postcondition $ \{ <var:p> = <var:X> \land <var:P> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:8> \times <var:X> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:p> = <var:X> }} <var:w1> := <var:p> ; <var:w2> := <var:w1> * <var:p> ; <var:w3> := <var:w2> * <var:p> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:8> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:3> ; <var:P> := <var:w3> <var:P> := <var:P> + <var:w2> <var:P> := <var:P> + <var:w1> <var:P> := <var:P> + <var:w0> {{ <var:P> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:8> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <nat:8> * <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <nat:8> * <var:X> /\ <var:w2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <nat:8> * <var:X> /\ <var:w2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:w3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <nat:8> * <var:X> /\ <var:w2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:w0> = <nat:7> /\ <var:P> = <nat:3> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w1> = <nat:8> * <var:X> /\ <var:w0> = <nat:7> /\ <var:P> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:w0> = <nat:7> /\ <var:P> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:P> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:8> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 