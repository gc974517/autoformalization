\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:h> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:4> ; <var:D> := <var:T1> <var:D> := <var:D> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Allow ( for any positive numbers $ <var:N> $ ) it to hold that $ <var:h> = <var:N> $ ahead of interpreting this program then $ <var:D> = <nat:4> * <var:N> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program is accomplished by standard Hoare techniques . Honing in on the next lines of codefound in the segment of code , we see \verb | { <var:h> = <var:N> } <var:T1> := <var:h> { <var:h> = <var:N> \land <var:T1> = <var:N> } | and \verb | { <var:h> = <var:N> \land <var:T1> = <var:N> } <var:T0> := <nat:8> { <var:h> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:8> } | . Moving on to the next steps contained in our set of instructions , we have \verb | { <var:h> = <var:N> } <var:T1> := <var:h> { <var:h> = <var:N> \land <var:T1> = <var:N> } | and \verb | { <var:h> = <var:N> \land <var:T1> = <var:N> } <var:T0> := <nat:8> { <var:h> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:8> } | . This is ensured with the binding law defined by typical Hoare techniques . Honing in on the following bit of code found in the set of instructions , we have \verb | { <var:h> = <var:N> } <var:T1> := <var:h> { <var:h> = <var:N> \land <var:T1> = <var:N> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:h> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:4> ; <var:D> := <var:T1> <var:D> := <var:D> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:h> = <var:N> }} <def:poly> {{ <var:D> = <nat:4> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T1> = <var:N> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T1> = <nat:4> * <var:N> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:T0> = <nat:8> /\ <var:D> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:D> = <nat:4> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 