\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:4> ; <var:S> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:V> = <var:x> $ prior to the evaluation of this set of instructions , it follows that we have $ <var:S> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:x> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:V> = <var:x> \land <var:A0> = <nat:4> \} \\ <var:S> := <var:A0> \\ \{ <var:V> = <var:x> \land <var:S> = <nat:4> \} \end{eqnarray} The application of usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:S> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:V> = <var:x> }} <def:poly> {{ <var:S> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:S> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 