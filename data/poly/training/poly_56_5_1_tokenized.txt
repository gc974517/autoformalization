\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:R> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:5> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> \end{verbatim} Allowing --- with some positive integer coefficients $ <var:M> $ --- it to be that $ <var:R> = <var:M> $ before evaluating the set of instructions then we have $ <var:n> = <nat:5> * <var:M> + <nat:6> $ once program finishes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:R> = <var:M> \} \\ <var:k1> := <var:R> ; \\ \{ <var:R> = <var:M> \land <var:k1> = <var:M> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:R> = <var:M> \land <var:k1> = <var:M> \land <var:k0> = <nat:6> \} \\ <var:k1> := <var:k1> * <nat:5> ; \\ \{ <var:R> = <var:M> \land <var:k1> = <nat:5> \times <var:M> \land <var:k0> = <nat:6> \} \\ <var:n> := <var:k1> \\ \{ <var:R> = <var:M> \land <var:k0> = <nat:6> \land <var:n> = <nat:5> \times <var:M> \} \\ <var:n> := <var:n> + <var:k0> \\ \{ <var:R> = <var:M> \land <var:n> = <nat:5> \times <var:M> + <nat:6> \} \end{eqnarray} Advancing the execution of the code yields : \begin{eqnarray} \end{eqnarray} Hence , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:R> = <var:M> }} <var:k1> := <var:R> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:5> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> {{ <var:n> = <nat:5> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:k1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:k1> = <var:M> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:k1> = <nat:5> * <var:M> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:k0> = <nat:6> /\ <var:n> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:n> = <nat:5> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 