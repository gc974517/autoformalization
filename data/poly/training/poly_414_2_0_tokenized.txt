\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:1> ; <var:n> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allowing ( for any $ <var:d> \in \mathbb{N} $ ) $ <var:H> = <var:d> $ ahead of the execution of our segment of code , then $ <var:n> = <nat:1> $ once set of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be given using standard Hoare logic . Moving onward , we see the binding code defining $ <nat:1> $ as $ <var:k0>$ . This redefines the condition $ \{ <var:H> = <var:d> \} $ as the condition $ \{ <var:H> = <var:d> \land <var:k0> = <nat:1> \} $ . Shifting focus toward the next statement in the list of instructions , we see the variable binding code giving $ <var:k0$ to $ <var:n>$ . This takes the condition $ \{ <var:H> = <var:d> \land <var:k0> = <nat:1> \} $ into the postcondition $ \{ <var:H> = <var:d> \land <var:n> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:n> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:H> = <var:d> }} <def:poly> {{ <var:n> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:n> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 