\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:7> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:r> ; <var:p> := <var:n1> ; <var:p> := <var:p> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:r> = <var:i> $ before running our list of instructions , it follows that $ <var:p> = <nat:2> \times <var:i> + <nat:7> $ after list of commands exits . \end{theorem} \begin{proof} The course of logic for the code segment can be demonstrated with typical Hoare logic . Advancing to the next step , we see the assignment command \verb | <var:n0> := <nat:7> ; | . This command moves the precondition $ \{ <var:r> = <var:i> \} $ as the postcondition $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \} $ . After , we see the environment update command \verb | <var:n1> := <nat:2> ; | . This code transfers $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \} $ toward $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \land <var:n1> = <nat:2> \} $ . This is ensured using the assignment law defined in typical Hoare reasoning . Moving forward to the next step , we see the variable assignmet statement giving $ <var:n1> * <var:r> $ into $ <var:n1>$ . This moves $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \land <var:n1> = <nat:2> \} $ to the condition $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \land <var:n1> = <nat:2> * <var:i> \} $ . This is shown through the assignment law in usual Hoare reasoning . Focusing on the subsequent step found in the segment of code , we have the environment update line \verb | <var:p> := <var:n1> ; | . This moves the condition $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \land <var:n1> = <nat:2> * <var:i> \} $ to the condition $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \land <var:p> = <nat:2> * <var:i> \} $ . This is given by the assignment scheme found in usual Hoare techniques . Advancing , we have the variable assignmet statement \verb | <var:p> := <var:p> + <var:n0> | . This takes the precondition $ \{ <var:r> = <var:i> \land <var:n0> = <nat:7> \land <var:p> = <nat:2> * <var:i> \} $ into the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:2> * <var:i> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n0> := <nat:7> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:r> ; <var:p> := <var:n1> ; <var:p> := <var:p> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:r> = <var:i> }} <def:poly> {{ <var:p> = <nat:2> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:n0> = <nat:7> /\ <var:p> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:2> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 