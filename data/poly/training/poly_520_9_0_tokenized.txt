\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:6> ; <var:e1> := <nat:9> ; <var:e1> := <var:e1> * <var:B> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:B> ; <var:e2> := <var:e2> * <var:B> ; <var:p> := <var:e2> ; <var:p> := <var:p> + <var:e1> ; <var:p> := <var:p> + <var:e0> \end{verbatim} Assume ( given any positive numbers $ <var:d> $ ) it to be that $ <var:B> = <var:d> $ prior to executing our segment of code it holds that we have $ <var:p> = <nat:4> \times <var:d> ^ <nat:2> + <nat:9> \times <var:d> + <nat:6> $ once list of commands terminates . \end{theorem} \begin{proof} Applying typical Hoare techniques yields : \begin{eqnarray} \{ <var:B> = <var:d> \} \\ <var:e0> := <nat:6> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \} \\ <var:e1> := <nat:9> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:9> \} \end{eqnarray} Furthering the execution of this code gives us : \begin{eqnarray} <var:e1> := <var:e1> * <var:B> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:9> * <var:d> \} \end{eqnarray} Continuing the evaluation of the code results in : \begin{eqnarray} <var:e2> := <nat:4> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:9> * <var:d> \land <var:e2> = <nat:4> \} \\ <var:e2> := <var:e2> * <var:B> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:9> * <var:d> \land <var:e2> = <nat:4> * <var:d> \} \\ <var:e2> := <var:e2> * <var:B> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:9> * <var:d> \land <var:e2> = <nat:4> * <var:d> ^ <nat:2> \} \\ <var:p> := <var:e2> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:9> * <var:d> \land <var:p> = <nat:4> * <var:d> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:e1> ; \\ \{ <var:B> = <var:d> \land <var:e0> = <nat:6> \land <var:p> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> \} \\ <var:p> := <var:p> + <var:e0> \\ \{ <var:B> = <var:d> \land <var:p> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:6> \} \end{eqnarray} As a consequence , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:B> = <var:d> }} <var:e0> := <nat:6> ; <var:e1> := <nat:9> ; <var:e1> := <var:e1> * <var:B> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:B> ; <var:e2> := <var:e2> * <var:B> ; <var:p> := <var:e2> ; <var:p> := <var:p> + <var:e1> ; <var:p> := <var:p> + <var:e0> {{ <var:p> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:9> * <var:d> /\ <var:e2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:9> * <var:d> /\ <var:e2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:9> * <var:d> /\ <var:e2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:9> * <var:d> /\ <var:p> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:e0> = <nat:6> /\ <var:p> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:p> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 