\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:1> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:T> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:T> ; <var:t2> := <var:t2> * <var:T> ; <var:U> := <var:t2> ; <var:U> := <var:U> + <var:t1> ; <var:U> := <var:U> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assume $ <var:T> = <var:n> $ prior to running the program it must be that we have $ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:1> $ after set of commands is done . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be shown using typical Hoare reasoning . Looking at the proceeding step found in our set of instructions , we see the line defining $ <nat:1> $ as $ <var:t0>$ . This takes the condition $ \{ <var:T> = <var:n> \} $ to $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \} $ . Observing the following line of code found in the series of commands , we see the variable binding statement \verb | <var:t1> := <nat:9> ; | . This transfers $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \} $ toward the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> \} $ . Immediately after , we see the variable binding command assigning $ <var:t1> * <var:T> $ to $ <var:t1>$ . This moves $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> \} $ toward $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \} $ . This is deduced through the assignment scheme defined in standard Hoare techniques . Honing in on the subsequent statement seen in the list of commands , we see the variable binding line \verb | <var:t2> := <nat:1> ; | . This command moves the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \} $ as $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:t2> = <nat:1> \} $ . Keeping momentum , the variable update line assigning $ <var:t2> * <var:T> $ toward $ <var:t2>$ . This advances the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:t2> = <nat:1> \} $ to the postcondition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:t2> = <nat:1> * <var:n> \} $ . Taking a look at the subsequent bit of code contained in the series of commands , we see the environment update command \verb | <var:t2> := <var:t2> * <var:T> ; | . This advances the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:t2> = <nat:1> * <var:n> \} $ to the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:t2> = <nat:1> * <var:n> ^ <nat:2> \} $ . This is deduced by the assignment rule of standard Hoare reasoning . Next , the assignment command yielding $ <var:t2> $ to $ <var:U>$ . This redefines the precondition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:t2> = <nat:1> * <var:n> ^ <nat:2> \} $ to $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:U> = <nat:1> * <var:n> ^ <nat:2> \} $ . Advancing to the next step , we have the assignment command \verb | <var:U> := <var:U> + <var:t1> ; | . This statement advances the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:t1> = <nat:9> * <var:n> \land <var:U> = <nat:1> * <var:n> ^ <nat:2> \} $ into the condition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> \} $ . Moving onward , we have the variable assignmet statement binding $ <var:U> + <var:t0$ toward $ <var:U>$ . This command redefines the precondition $ \{ <var:T> = <var:n> \land <var:t0> = <nat:1> \land <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> \} $ to the condition $ \{ <var:T> = <var:n> \land <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:1> \} $ . This is rigorously given through the assignment scheme given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:1> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:T> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:T> ; <var:t2> := <var:t2> * <var:T> ; <var:U> := <var:t2> ; <var:U> := <var:U> + <var:t1> ; <var:U> := <var:U> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:T> = <var:n> }} <def:poly> {{ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:9> * <var:n> /\ <var:t2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:9> * <var:n> /\ <var:t2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:9> * <var:n> /\ <var:t2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:9> * <var:n> /\ <var:U> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:t0> = <nat:1> /\ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:n> /\ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 