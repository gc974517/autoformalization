\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:8> ; <var:z> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:F> = <var:A> $ , letting natural numbers $ <var:A> $ , ahead of the execution of the program , then we have $ <var:z> = <nat:8> $ once code segment has exited . \end{theorem} \begin{proof} The proof of this series of instructions is clear by standard Hoare techniques . Shifting focus toward the subsequent bit of code contained in our code segment , the command \verb | <var:Y0> := <nat:8> ; | . This advances $ \{ <var:F> = <var:A> \} $ to $ \{ <var:F> = <var:A> \land <var:Y0> = <nat:8> \} $ . Observing the next line of code in the series of commands , we see the environment update statement \verb | <var:z> := <var:Y0> | . This code redefines $ \{ <var:F> = <var:A> \land <var:Y0> = <nat:8> \} $ to the postcondition $ \{ <var:F> = <var:A> \land <var:z> = <nat:8> \} $ . This is deduced through the assignment inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:8> ; <var:z> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <def:poly> {{ <var:z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 