\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:b> := <nat:2> ; <var:b> := <nat:1> + <var:b> * <var:V> ; <var:b> := <nat:1> + <var:b> * <var:V> ; <var:b> := <nat:2> + <var:b> * <var:V> ; <var:b> := <nat:2> + <var:b> * <var:V> ; <var:b> := <nat:4> + <var:b> * <var:V> ; <var:b> := <nat:1> + <var:b> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:V> = <var:U> $ before executing our set of commands then $ <var:b> = <nat:2> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> $ once set of instructions terminates . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:V> = <var:U> \} \\ <var:b> := <nat:2> ; \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \} \\ <var:b> := <nat:1> + <var:b> * <var:V> ; \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \cdot <var:U> + <nat:1> \} \\ <var:b> := <nat:1> + <var:b> * <var:V> ; \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:1> \} \\ <var:b> := <nat:2> + <var:b> * <var:V> ; \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:1> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:2> \} \\ <var:b> := <nat:2> + <var:b> * <var:V> ; \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \cdot <var:U> ^ <nat:4> + <nat:1> \cdot <var:U> ^ <nat:3> + <nat:1> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:V> ; \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \cdot <var:U> ^ <nat:5> + <nat:1> \cdot <var:U> ^ <nat:4> + <nat:1> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:4> \} \\ <var:b> := <nat:1> + <var:b> * <var:V> \\ \{ <var:V> = <var:U> \land <var:b> = <nat:2> \cdot <var:U> ^ <nat:6> + <nat:1> \cdot <var:U> ^ <nat:5> + <nat:1> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:1> \} \end{eqnarray} Given the preceding argument , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:2> ; <var:b> := <nat:1> + <var:b> * <var:V> ; <var:b> := <nat:1> + <var:b> * <var:V> ; <var:b> := <nat:2> + <var:b> * <var:V> ; <var:b> := <nat:2> + <var:b> * <var:V> ; <var:b> := <nat:4> + <var:b> * <var:V> ; <var:b> := <nat:1> + <var:b> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:V> = <var:U> }} <def:poly> {{ <var:b> = <nat:2> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:b> = <nat:2> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 