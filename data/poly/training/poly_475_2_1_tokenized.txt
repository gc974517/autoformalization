\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:9> ; <var:p> := <var:x0> \end{verbatim} Allowing that $ <var:R> = <var:m> $ ahead of running this series of commands it follows that $ <var:p> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:m> \} \\ <var:x0> := <nat:9> ; \\ \{ <var:R> = <var:m> \land <var:x0> = <nat:9> \} \end{eqnarray} Furthering interpreting the set of instructions returns : \begin{eqnarray} <var:p> := <var:x0> \\ \{ <var:R> = <var:m> \land <var:p> = <nat:9> \} \end{eqnarray} Using usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:x0> := <nat:9> ; <var:p> := <var:x0> {{ <var:p> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 