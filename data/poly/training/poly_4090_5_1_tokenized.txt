\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} : \begin{verbatim} <var:N1> := <var:Q> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:2> ; <var:k> := <var:N1> <var:k> := <var:k> + <var:N0> \end{verbatim} Assuming ( assuming some natural coefficients $ <var:T> $ ) $ <var:Q> = <var:T> $ prior to the evaluation of the list of commands , it holds that we see $ <var:k> = <nat:2> \cdot <var:T> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:Q> = <var:T> \} \\ <var:N1> := <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:N1> = <var:T> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:Q> = <var:T> \land <var:N1> = <var:T> \land <var:N0> = <nat:2> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:Q> = <var:T> \land <var:N1> = <nat:2> \cdot <var:T> \land <var:N0> = <nat:2> \} \\ <var:k> := <var:N1> \\ \{ <var:Q> = <var:T> \land <var:N0> = <nat:2> \land <var:k> = <nat:2> \cdot <var:T> \} \\ <var:k> := <var:k> + <var:N0> \\ \{ <var:Q> = <var:T> \land <var:k> = <nat:2> \cdot <var:T> + <nat:2> \} \end{eqnarray} Considering the above , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Q> = <var:T> }} <var:N1> := <var:Q> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:2> ; <var:k> := <var:N1> <var:k> := <var:k> + <var:N0> {{ <var:k> = <nat:2> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:N1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:N1> = <var:T> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:N1> = <nat:2> * <var:T> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:N0> = <nat:2> /\ <var:k> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:k> = <nat:2> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 