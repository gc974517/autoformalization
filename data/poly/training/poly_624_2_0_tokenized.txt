\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:1> ; <var:V> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Allow that $ <var:E> = <var:m> $ before interpreting this series of commands , it must be that $ <var:V> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is clear with typical Hoare logic . Moving on to the next step , we see the variable binding statement \verb | <var:B0> := <nat:1> ; | . This moves the precondition $ \{ <var:E> = <var:m> \} $ to the condition $ \{ <var:E> = <var:m> \land <var:B0> = <nat:1> \} $ . This is given using the assignment law in typical Hoare reasoning . Stepping through , we have the variable update code \verb | <var:V> := <var:B0> | . This transfers $ \{ <var:E> = <var:m> \land <var:B0> = <nat:1> \} $ as the postcondition $ \{ <var:E> = <var:m> \land <var:V> = <nat:1> \} $ . This is sound using the assignment law given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:1> ; <var:V> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:E> = <var:m> }} <def:poly> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 