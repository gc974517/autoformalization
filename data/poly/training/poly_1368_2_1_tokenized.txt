\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:6> ; <var:A> := <var:p0> \end{verbatim} Allowing that we have $ <var:G> = <var:y> $ ( for any natural coefficients $ <var:y> $ ) prior to running this list of commands , it holds that we have $ <var:A> = <nat:6> $ . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:G> = <var:y> \} \\ <var:p0> := <nat:6> ; \\ \{ <var:G> = <var:y> \land <var:p0> = <nat:6> \} \\ <var:A> := <var:p0> \\ \{ <var:G> = <var:y> \land <var:A> = <nat:6> \} \end{eqnarray} Therefore , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:G> = <var:y> }} <var:p0> := <nat:6> ; <var:A> := <var:p0> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 