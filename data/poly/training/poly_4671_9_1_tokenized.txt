\begin{document} \begin{theorem} Consider the following code segment such that \begin{verbatim} <var:p1> := <var:P> ; <var:p2> := <var:p1> * <var:P> ; <var:p3> := <var:p2> * <var:P> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:6> ; <var:p3> := <var:p3> * <nat:8> ; <var:Q> := <var:p3> <var:Q> := <var:Q> + <var:p1> <var:Q> := <var:Q> + <var:p0> \end{verbatim} Allowing it to hold that $ <var:P> = <var:l> $ before evaluating our code segment it holds that we see $ <var:Q> = <nat:8> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is given by standard Hoare reasoning . Keeping momentum , the variable binding code binding $ <var:P> $ to $ <var:p1>$ . This advances the condition $ \{ <var:P> = <var:l> \} $ into $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \} $ . This is rigorously given through the assignment inference rule defined in usual Hoare techniques . Keeping momentum , we see the variable binding line giving $ <var:p1> * <var:P> $ toward $ <var:p2>$ . This takes the condition $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \} $ to the postcondition $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \} $ . Taking a look at the next command contained in our segment of code , we have the variable assignmet code \verb | <var:p3> := <var:p2> * <var:P> ; | . This statement transfers $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \} $ . Stepping through , the code \verb | <var:p0> := <nat:4> ; | . This code moves the precondition $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \} $ toward $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:4> \} $ . This is shown by the assignment scheme from typical Hoare reasoning . Paying attention to the following step seen in the program , we see the binding code letting $ <var:p1> * <nat:6> $ as $ <var:p1>$ . This code advances $ \{ <var:P> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:4> \} $ into $ \{ <var:P> = <var:l> \land <var:p1> = <nat:6> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:4> \} $ . Shifting focus toward the upcoming command seen in our program , we see the variable binding line binding $ <var:p3> * <nat:8> $ into $ <var:p3>$ . This line redefines the precondition $ \{ <var:P> = <var:l> \land <var:p1> = <nat:6> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:4> \} $ as the postcondition $ \{ <var:P> = <var:l> \land <var:p1> = <nat:6> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:l> ^ <nat:3> \land <var:p0> = <nat:4> \} $ . This is sound by the assignment rule defined by standard Hoare logic . Stepping forward , we have the variable binding command assigning $ <var:p3$ as $ <var:Q>$ . This code moves the condition $ \{ <var:P> = <var:l> \land <var:p1> = <nat:6> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:l> ^ <nat:3> \land <var:p0> = <nat:4> \} $ to the postcondition $ \{ <var:P> = <var:l> \land <var:p1> = <nat:6> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p0> = <nat:4> \land <var:Q> = <nat:8> \cdot <var:l> ^ <nat:3> \} $ . This is deduced by the assignment law from typical Hoare logic . Advancing to the proceeding line in our code segment , we see the binding statement defining $ <var:Q> + <var:p1$ as $ <var:Q>$ . This moves the condition $ \{ <var:P> = <var:l> \land <var:p1> = <nat:6> \cdot <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p0> = <nat:4> \land <var:Q> = <nat:8> \cdot <var:l> ^ <nat:3> \} $ to the condition $ \{ <var:P> = <var:l> \land <var:p0> = <nat:4> \land <var:Q> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:6> \cdot <var:l> \} $ . Moving forward to the proceeding step found in our set of commands , the variable assignmet statement \verb | <var:Q> := <var:Q> + <var:p0> | . This statement takes $ \{ <var:P> = <var:l> \land <var:p0> = <nat:4> \land <var:Q> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:6> \cdot <var:l> \} $ toward the postcondition $ \{ <var:P> = <var:l> \land <var:Q> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:6> \cdot <var:l> + <nat:4> \} $ . This is given using the assignment scheme in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:P> = <var:l> }} <var:p1> := <var:P> ; <var:p2> := <var:p1> * <var:P> ; <var:p3> := <var:p2> * <var:P> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:6> ; <var:p3> := <var:p3> * <nat:8> ; <var:Q> := <var:p3> <var:Q> := <var:Q> + <var:p1> <var:Q> := <var:Q> + <var:p0> {{ <var:Q> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <nat:6> * <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <nat:6> * <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:l> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p1> = <nat:6> * <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p0> = <nat:4> /\ <var:Q> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:p0> = <nat:4> /\ <var:Q> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:Q> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 