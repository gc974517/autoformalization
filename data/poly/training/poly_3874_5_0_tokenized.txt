\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:J> ; <var:K> := <var:c1> ; <var:K> := <var:K> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assume given every $ <var:T> $ $ <var:J> = <var:T> $ prior to running this list of commands , it follows that we have $ <var:K> = <nat:7> * <var:T> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:T> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:J> = <var:T> \land <var:c0> = <nat:4> \} \\ <var:c1> := <nat:7> ; \\ \{ <var:J> = <var:T> \land <var:c0> = <nat:4> \land <var:c1> = <nat:7> \} \\ <var:c1> := <var:c1> * <var:J> ; \\ \{ <var:J> = <var:T> \land <var:c0> = <nat:4> \land <var:c1> = <nat:7> \cdot <var:T> \} \\ <var:K> := <var:c1> ; \\ \{ <var:J> = <var:T> \land <var:c0> = <nat:4> \land <var:K> = <nat:7> \cdot <var:T> \} \\ <var:K> := <var:K> + <var:c0> \\ \{ <var:J> = <var:T> \land <var:K> = <nat:7> \cdot <var:T> + <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:J> ; <var:K> := <var:c1> ; <var:K> := <var:K> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:J> = <var:T> }} <def:poly> {{ <var:K> = <nat:7> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:c0> = <nat:4> /\ <var:K> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:K> = <nat:7> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 