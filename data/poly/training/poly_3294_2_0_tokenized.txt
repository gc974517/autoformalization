\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:6> ; <var:F> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assuming it to hold that $ <var:e> = <var:W> $ prior to interpreting this series of instructions it holds that $ <var:F> = <nat:6> $ . \end{theorem} \begin{proof} The argument for our set of commands can be demonstrated using Hoare techniques . Focusing on the upcoming steps seen in our list of instructions , we have \verb | { <var:e> = <var:W> } <var:J0> := <nat:6> { <var:e> = <var:W> \land <var:J0> = <nat:6> } | and \verb | { <var:e> = <var:W> \land <var:J0> = <nat:6> } <var:F> := <var:J0{ <var:e> = <var:W> \land <var:F> = <nat:6> } | . This is shown to be logically sound with the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:F> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:F> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:F> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 