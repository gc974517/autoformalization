\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:S> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:I> := <var:Z1> <var:I> := <var:I> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Given taking natural numbers $ <var:k> $ it to hold that $ <var:S> = <var:k> $ ahead of executing this code segment it holds that $ <var:I> = <nat:8> \cdot <var:k> + <nat:7> $ . \end{theorem} \begin{proof} The argument for our list of commands is demonstrated through standard Hoare techniques . Looking at the next line of code contained in the list of commands , we see the variable assignmet command letting $ <var:S> $ to $ <var:Z1>$ . This command advances the condition $ \{ <var:S> = <var:k> \} $ into the postcondition $ \{ <var:S> = <var:k> \land <var:Z1> = <var:k> \} $ . Moving on to the following command contained in our set of instructions , we see the variable update line yielding $ <nat:7> $ into $ <var:Z0>$ . This code takes the condition $ \{ <var:S> = <var:k> \land <var:Z1> = <var:k> \} $ to the condition $ \{ <var:S> = <var:k> \land <var:Z1> = <var:k> \land <var:Z0> = <nat:7> \} $ . This is sound by the assignment law defined by standard Hoare techniques . Jumping to the next piece of code seen in the set of instructions , we have the variable update code yielding $ <var:Z1> * <nat:8> $ toward $ <var:Z1>$ . This takes $ \{ <var:S> = <var:k> \land <var:Z1> = <var:k> \land <var:Z0> = <nat:7> \} $ into the postcondition $ \{ <var:S> = <var:k> \land <var:Z1> = <nat:8> \cdot <var:k> \land <var:Z0> = <nat:7> \} $ . This is rigorously given by the assignment rule found in typical Hoare techniques . Following , we have the line \verb | <var:I> := <var:Z1> | . This statement redefines $ \{ <var:S> = <var:k> \land <var:Z1> = <nat:8> \cdot <var:k> \land <var:Z0> = <nat:7> \} $ toward the postcondition $ \{ <var:S> = <var:k> \land <var:Z0> = <nat:7> \land <var:I> = <nat:8> \cdot <var:k> \} $ . Keeping momentum , the variable binding code \verb | <var:I> := <var:I> + <var:Z0> | . This statement advances the precondition $ \{ <var:S> = <var:k> \land <var:Z0> = <nat:7> \land <var:I> = <nat:8> \cdot <var:k> \} $ to the condition $ \{ <var:S> = <var:k> \land <var:I> = <nat:8> \cdot <var:k> + <nat:7> \} $ . This is deduced through the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:S> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:I> := <var:Z1> <var:I> := <var:I> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:S> = <var:k> }} <def:poly> {{ <var:I> = <nat:8> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:Z1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:Z1> = <var:k> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:Z1> = <nat:8> * <var:k> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:Z0> = <nat:7> /\ <var:I> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:I> = <nat:8> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 