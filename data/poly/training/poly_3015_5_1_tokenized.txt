\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:P1> := <var:C> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:3> ; <var:z> := <var:P1> <var:z> := <var:z> + <var:P0> \end{verbatim} Allow $ <var:C> = <var:T> $ before the evaluation of our list of instructions it must be that $ <var:z> = <nat:3> * <var:T> + <nat:5> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:C> = <var:T> \} \\ <var:P1> := <var:C> ; \\ \{ <var:C> = <var:T> \land <var:P1> = <var:T> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:C> = <var:T> \land <var:P1> = <var:T> \land <var:P0> = <nat:5> \} \\ <var:P1> := <var:P1> * <nat:3> ; \\ \{ <var:C> = <var:T> \land <var:P1> = <nat:3> \times <var:T> \land <var:P0> = <nat:5> \} \\ <var:z> := <var:P1> \\ \{ <var:C> = <var:T> \land <var:P0> = <nat:5> \land <var:z> = <nat:3> \times <var:T> \} \\ <var:z> := <var:z> + <var:P0> \\ \{ <var:C> = <var:T> \land <var:z> = <nat:3> \times <var:T> + <nat:5> \} \end{eqnarray} Considering the above , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <var:P1> := <var:C> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:3> ; <var:z> := <var:P1> <var:z> := <var:z> + <var:P0> {{ <var:z> = <nat:3> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:P1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:P1> = <var:T> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:P1> = <nat:3> * <var:T> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:P0> = <nat:5> /\ <var:z> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:z> = <nat:3> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 