\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:7> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:m> ; <var:O2> := <nat:4> ; <var:O2> := <var:O2> * <var:m> ; <var:O2> := <var:O2> * <var:m> ; <var:t> := <var:O2> ; <var:t> := <var:t> + <var:O1> ; <var:t> := <var:t> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow given positive integers $ <var:B> $ it to hold that $ <var:m> = <var:B> $ before evaluating the list of instructions , then we have $ <var:t> = <nat:4> \times <var:B> ^ <nat:2> + <nat:6> \times <var:B> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is clear using standard Hoare logic . Moving onward , we see the variable binding code defining $ <nat:7> $ into $ <var:O0>$ . This command advances $ \{ <var:m> = <var:B> \} $ into the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \} $ . This is rigorously given through the assignment rule found in standard Hoare techniques . Now , we see the environment update code \verb | <var:O1> := <nat:6> ; | . This forwards $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \} $ as the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \} $ . Advancing on , the variable update line giving $ <var:O1> * <var:m> $ toward $ <var:O1>$ . This line advances the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \} $ to the postcondition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \} $ . Advancing , the binding code yielding $ <nat:4> $ toward $ <var:O2>$ . This redefines the precondition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \} $ as $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:O2> = <nat:4> \} $ . This is ensured by the assignment law from typical Hoare techniques . Advancing on , we have the assignment command \verb | <var:O2> := <var:O2> * <var:m> ; | . This command moves the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:O2> = <nat:4> \} $ toward $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:O2> = <nat:4> \times <var:B> \} $ . Observing the proceeding line of code seen in the set of instructions , we see the code giving $ <var:O2> * <var:m> $ to $ <var:O2>$ . This redefines $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:O2> = <nat:4> \times <var:B> \} $ into the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:O2> = <nat:4> \times <var:B> ^ <nat:2> \} $ . Considering the proceeding statement in the set of instructions , we see the code \verb | <var:t> := <var:O2> ; | . This transfers $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:O2> = <nat:4> \times <var:B> ^ <nat:2> \} $ as the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:t> = <nat:4> \times <var:B> ^ <nat:2> \} $ . Advancing to the next step seen in our set of instructions , we see the variable assignmet command \verb | <var:t> := <var:t> + <var:O1> ; | . This takes $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \times <var:B> \land <var:t> = <nat:4> \times <var:B> ^ <nat:2> \} $ as $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:t> = <nat:4> \times <var:B> ^ <nat:2> + <nat:6> \times <var:B> \} $ . This is shown to be logically sound using the assignment rule in Hoare techniques . Paying attention to the following step in the list of instructions , we see the assignment line \verb | <var:t> := <var:t> + <var:O0> | . This advances the condition $ \{ <var:m> = <var:B> \land <var:O0> = <nat:7> \land <var:t> = <nat:4> \times <var:B> ^ <nat:2> + <nat:6> \times <var:B> \} $ into the condition $ \{ <var:m> = <var:B> \land <var:t> = <nat:4> \times <var:B> ^ <nat:2> + <nat:6> \times <var:B> + <nat:7> \} $ . This is known to be sound through the assignment rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:7> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:m> ; <var:O2> := <nat:4> ; <var:O2> := <var:O2> * <var:m> ; <var:O2> := <var:O2> * <var:m> ; <var:t> := <var:O2> ; <var:t> := <var:t> + <var:O1> ; <var:t> := <var:t> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:m> = <var:B> }} <def:poly> {{ <var:t> = <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:B> /\ <var:O2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:B> /\ <var:O2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:B> /\ <var:O2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:B> /\ <var:t> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:O0> = <nat:7> /\ <var:t> = <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:t> = <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 