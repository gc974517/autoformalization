\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:1> ; <var:B> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:q> = <var:g> $ for all integers $ <var:g> $ ahead of executing the segment of code , it must be that $ <var:B> = <nat:1> $ once series of commands is done . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:q> = <var:g> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:q> = <var:g> \land <var:h0> = <nat:1> \} \\ <var:B> := <var:h0> \\ \{ <var:q> = <var:g> \land <var:B> = <nat:1> \} \end{eqnarray} Considering the preceding argument , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:B> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:q> = <var:g> }} <def:poly> {{ <var:B> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:B> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 