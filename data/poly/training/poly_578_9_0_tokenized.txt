\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:8> ; <var:J1> := <var:J1> * <var:Y> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:Y> ; <var:J2> := <var:J2> * <var:Y> ; <var:B> := <var:J2> ; <var:B> := <var:B> + <var:J1> ; <var:B> := <var:B> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:Y> = <var:G> $ ahead of running our series of instructions , then $ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:4> $ after code segment has terminated . \end{theorem} \begin{proof} The flow of logic for our set of instructions is given through typical Hoare logic . Going forward , \begin{eqnarray} \{ <var:Y> = <var:G> \} \, <var:J0> := <nat:4> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \} \, <var:J1> := <nat:8> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> \} \, <var:J1> := <var:J1> * <var:Y> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \} \, <var:J2> := <nat:4> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:J2> = <nat:4> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:J2> = <nat:4> \} \, <var:J2> := <var:J2> * <var:Y> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:J2> = <nat:4> * <var:G> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:J2> = <nat:4> * <var:G> \} \, <var:J2> := <var:J2> * <var:Y> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:J2> = <nat:4> * <var:G> ^ <nat:2> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:J2> = <nat:4> * <var:G> ^ <nat:2> \} \, <var:B> := <var:J2> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:B> = <nat:4> * <var:G> ^ <nat:2> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:8> * <var:G> \land <var:B> = <nat:4> * <var:G> ^ <nat:2> \} \, <var:B> := <var:B> + <var:J1> \, \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> \} \\ \{ <var:Y> = <var:G> \land <var:J0> = <nat:4> \land <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> \} \, <var:B> := <var:B> + <var:J0\, \{ <var:Y> = <var:G> \land <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:J1> := <nat:8> ; <var:J1> := <var:J1> * <var:Y> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:Y> ; <var:J2> := <var:J2> * <var:Y> ; <var:B> := <var:J2> ; <var:B> := <var:B> + <var:J1> ; <var:B> := <var:B> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <def:poly> {{ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:8> * <var:G> /\ <var:J2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:8> * <var:G> /\ <var:J2> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:8> * <var:G> /\ <var:J2> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:8> * <var:G> /\ <var:B> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:J0> = <nat:4> /\ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 