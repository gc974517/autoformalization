\begin{document} \begin{theorem} Let the following program such that \begin{verbatim} <var:a1> := <var:F> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:8> ; <var:s> := <var:a1> <var:s> := <var:s> + <var:a0> \end{verbatim} Assume , given natural coefficients $ <var:y> $ , it to be that $ <var:F> = <var:y> $ prior to evaluating this code segment , it holds that we see $ <var:s> = <nat:8> * <var:y> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is shown by usual Hoare techniques . Paying attention to the subsequent lines of codefound in the segment of code , \verb | { <var:F> = <var:y> } <var:a1> := <var:F> { <var:F> = <var:y> \land <var:a1> = <var:y> } | , \verb | { <var:F> = <var:y> \land <var:a1> = <var:y> } <var:a0> := <nat:7> { <var:F> = <var:y> \land <var:a1> = <var:y> \land <var:a0> = <nat:7> } | and \verb | { <var:F> = <var:y> \land <var:a1> = <var:y> \land <var:a0> = <nat:7> } <var:a1> := <var:a1> * <nat:8> { <var:F> = <var:y> \land <var:a1> = <nat:8> \cdot <var:y> \land <var:a0> = <nat:7> } | . This is shown using the environment update rule given by usual Hoare techniques . Moving onward , \verb | { <var:F> = <var:y> } <var:a1> := <var:F> { <var:F> = <var:y> \land <var:a1> = <var:y> } | and \verb | { <var:F> = <var:y> \land <var:a1> = <var:y> } <var:a0> := <nat:7> { <var:F> = <var:y> \land <var:a1> = <var:y> \land <var:a0> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:F> = <var:y> }} <var:a1> := <var:F> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:8> ; <var:s> := <var:a1> <var:s> := <var:s> + <var:a0> {{ <var:s> = <nat:8> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:a1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:a1> = <var:y> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:a1> = <nat:8> * <var:y> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:a0> = <nat:7> /\ <var:s> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:s> = <nat:8> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 