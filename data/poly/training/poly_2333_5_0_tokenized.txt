\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:7> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:E> ; <var:h> := <var:B1> ; <var:h> := <var:h> + <var:B0> \end{verbatim} Allowing that we have $ <var:E> = <var:P> $ before the execution of this series of commands , then we see $ <var:h> = <nat:6> * <var:P> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be demonstrated by usual Hoare logic . Now , we see the assignment code \verb | <var:B0> := <nat:7> ; | . This redefines the precondition $ \{ <var:E> = <var:P> \} $ toward the postcondition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \} $ . Stepping through , we have the variable update command \verb | <var:B1> := <nat:6> ; | . This takes the precondition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \} $ as the condition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \land <var:B1> = <nat:6> \} $ . Looking at the following line seen in the series of instructions , we see the variable assignmet command \verb | <var:B1> := <var:B1> * <var:E> ; | . This statement redefines the condition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \land <var:B1> = <nat:6> \} $ to the postcondition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \land <var:B1> = <nat:6> \cdot <var:P> \} $ . Looking at the upcoming line seen in the series of instructions , we have the assignment command assigning $ <var:B1> $ toward $ <var:h>$ . This code moves the condition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \land <var:B1> = <nat:6> \cdot <var:P> \} $ into the condition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \land <var:h> = <nat:6> \cdot <var:P> \} $ . Observing the upcoming bit of code found in the segment of code , we have the variable binding line \verb | <var:h> := <var:h> + <var:B0> | . This statement transfers the precondition $ \{ <var:E> = <var:P> \land <var:B0> = <nat:7> \land <var:h> = <nat:6> \cdot <var:P> \} $ as the condition $ \{ <var:E> = <var:P> \land <var:h> = <nat:6> \cdot <var:P> + <nat:7> \} $ . This is known to be sound with the assignment law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:E> = <var:P> }} <var:B0> := <nat:7> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:E> ; <var:h> := <var:B1> ; <var:h> := <var:h> + <var:B0> {{ <var:h> = <nat:6> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:B0> = <nat:7> /\ <var:h> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:h> = <nat:6> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 