\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:A1> := <var:D> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:1> ; <var:R> := <var:A1> <var:R> := <var:R> + <var:A0> \end{verbatim} Allow it to be that $ <var:D> = <var:h> $ ( for every $ <var:h> \in \mathbb{N} $ ) ahead of evaluating this code segment it holds that we have $ <var:R> = <nat:1> * <var:h> + <nat:2> $ once program terminates . \end{theorem} \begin{proof} Using Hoare techniques gives us : \begin{eqnarray} \{ <var:D> = <var:h> \} \\ <var:A1> := <var:D> ; \\ \{ <var:D> = <var:h> \land <var:A1> = <var:h> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:D> = <var:h> \land <var:A1> = <var:h> \land <var:A0> = <nat:2> \} \\ <var:A1> := <var:A1> * <nat:1> ; \\ \{ <var:D> = <var:h> \land <var:A1> = <nat:1> \times <var:h> \land <var:A0> = <nat:2> \} \\ <var:R> := <var:A1> \\ \{ <var:D> = <var:h> \land <var:A0> = <nat:2> \land <var:R> = <nat:1> \times <var:h> \} \\ <var:R> := <var:R> + <var:A0> \\ \{ <var:D> = <var:h> \land <var:R> = <nat:1> \times <var:h> + <nat:2> \} \end{eqnarray} As a result , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:D> = <var:h> }} <var:A1> := <var:D> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:1> ; <var:R> := <var:A1> <var:R> := <var:R> + <var:A0> {{ <var:R> = <nat:1> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:A1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:A1> = <var:h> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:A1> = <nat:1> * <var:h> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:A0> = <nat:2> /\ <var:R> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:R> = <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 