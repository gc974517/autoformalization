\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:3> ; <var:h> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume , for some positive coefficients $ <var:B> $ , it to be that $ <var:D> = <var:B> $ ahead of interpreting the series of instructions , it holds that we see $ <var:h> = <nat:3> $ after series of commands has finished executing . \end{theorem} \begin{proof} The course of logic for the list of commands is clear using standard Hoare techniques . Honing in on the proceeding step seen in our series of instructions , we have \verb | { <var:D> = <var:B> } <var:u0> := <nat:3> { <var:D> = <var:B> \land <var:u0> = <nat:3> } | . This is guaranteed using the environment update inference rule given in Hoare techniques . Taking another step toward the next piece of code found in our set of commands , \verb | { <var:D> = <var:B> } <var:u0> := <nat:3> { <var:D> = <var:B> \land <var:u0> = <nat:3> } | . This is sound with the binding rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:h> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:D> = <var:B> }} <def:poly> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 