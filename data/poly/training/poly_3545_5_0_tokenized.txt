\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:N> ; <var:I> := <var:x1> ; <var:I> := <var:I> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allowing , letting positive integer coefficients $ <var:u> $ , it to hold that $ <var:N> = <var:u> $ before the execution of our program , it follows that we see $ <var:I> = <nat:1> \times <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:N> = <var:u> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:N> = <var:u> \land <var:x0> = <nat:3> \} \\ <var:x1> := <nat:1> ; \\ \{ <var:N> = <var:u> \land <var:x0> = <nat:3> \land <var:x1> = <nat:1> \} \\ <var:x1> := <var:x1> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:x0> = <nat:3> \land <var:x1> = <nat:1> \times <var:u> \} \\ <var:I> := <var:x1> ; \\ \{ <var:N> = <var:u> \land <var:x0> = <nat:3> \land <var:I> = <nat:1> \times <var:u> \} \\ <var:I> := <var:I> + <var:x0> \\ \{ <var:N> = <var:u> \land <var:I> = <nat:1> \times <var:u> + <nat:3> \} \end{eqnarray} Advancing evaluating the list of instructions gives us : \begin{eqnarray} \end{eqnarray} Thusly , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:N> ; <var:I> := <var:x1> ; <var:I> := <var:I> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:N> = <var:u> }} <def:poly> {{ <var:I> = <nat:1> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:x0> = <nat:3> /\ <var:I> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:I> = <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 