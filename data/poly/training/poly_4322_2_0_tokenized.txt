\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:2> ; <var:r> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Allowing ( for some natural numbers $ <var:a> $ ) it to hold that $ <var:p> = <var:a> $ prior to executing the code segment it holds that $ <var:r> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:p> = <var:a> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:p> = <var:a> \land <var:U0> = <nat:2> \} \\ <var:r> := <var:U0> \\ \{ <var:p> = <var:a> \land <var:r> = <nat:2> \} \end{eqnarray} Therefore , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:2> ; <var:r> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:p> = <var:a> }} <def:poly> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 