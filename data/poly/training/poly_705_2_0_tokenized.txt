\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:5> ; <var:F> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Assume $ <var:v> = <var:p> $ , given all positive numbers $ <var:p> $ , prior to interpreting this program it must be that we have $ <var:F> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:p> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:v> = <var:p> \land <var:U0> = <nat:5> \} \\ <var:F> := <var:U0> \\ \{ <var:v> = <var:p> \land <var:F> = <nat:5> \} \end{eqnarray} Applying Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:F> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:v> = <var:p> }} <def:poly> {{ <var:F> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:F> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 