\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:1> ; <var:P> := <var:D0> \end{verbatim} Assume it to be that $ <var:v> = <var:w> $ --- given natural numbers $ <var:w> $ --- before executing the series of commands , it follows that we have $ <var:P> = <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:v> = <var:w> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:v> = <var:w> \land <var:D0> = <nat:1> \} \\ <var:P> := <var:D0> \\ \{ <var:v> = <var:w> \land <var:P> = <nat:1> \} \end{eqnarray} Considering the above , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:v> = <var:w> }} <var:D0> := <nat:1> ; <var:P> := <var:D0> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 