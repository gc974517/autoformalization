\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:S> ; <var:B2> := <var:B1> * <var:S> ; <var:B3> := <var:B2> * <var:S> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:2> ; <var:N> := <var:B3> <var:N> := <var:N> + <var:B2> <var:N> := <var:N> + <var:B1> <var:N> := <var:N> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing for every $ <var:j> \in \mathbb{Z}^+ $ that we have $ <var:S> = <var:j> $ prior to executing the set of commands then we have $ <var:N> = <nat:2> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:3> $ once segment of code terminates . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be done with Hoare techniques . Taking another step toward the subsequent commands found in the code , \[ \begin{tabular} {rcl} \{ <var:S> = <var:j> \} & <var:B1> := <var:S> & \{ <var:S> = <var:j> \land <var:B1> = <var:j> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <var:j> \} & <var:B2> := <var:B1> * <var:S> & \{ <var:S> = <var:j> \land <var:B1> = <var:j> \land <var:B2> = <var:j> ^ <nat:2> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <var:j> \land <var:B2> = <var:j> ^ <nat:2> \} & <var:B3> := <var:B2> * <var:S> & \{ <var:S> = <var:j> \land <var:B1> = <var:j> \land <var:B2> = <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <var:j> \land <var:B2> = <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \} & <var:B0> := <nat:3> & \{ <var:S> = <var:j> \land <var:B1> = <var:j> \land <var:B2> = <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <var:j> \land <var:B2> = <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:B1> := <var:B1> * <nat:4> & \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:B2> := <var:B2> * <nat:4> & \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <nat:4> * <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <nat:4> * <var:j> ^ <nat:2> \land <var:B3> = <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:B3> := <var:B3> * <nat:2> & \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <nat:4> * <var:j> ^ <nat:2> \land <var:B3> = <nat:2> * <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <nat:4> * <var:j> ^ <nat:2> \land <var:B3> = <nat:2> * <var:j> ^ <nat:3> \land <var:B0> = <nat:3> \} & <var:N> := <var:B3& \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <nat:4> * <var:j> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B2> = <nat:4> * <var:j> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> \} & <var:N> := <var:N> + <var:B2& \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B0> = <nat:3> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> \} \\ \{ <var:S> = <var:j> \land <var:B1> = <nat:4> * <var:j> \land <var:B0> = <nat:3> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> \} & <var:N> := <var:N> + <var:B1& \{ <var:S> = <var:j> \land <var:B0> = <nat:3> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> \} \\ \{ <var:S> = <var:j> \land <var:B0> = <nat:3> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> \} & <var:N> := <var:N> + <var:B0& \{ <var:S> = <var:j> \land <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} \end{tabular} This is shown by the variable assignmet rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:S> ; <var:B2> := <var:B1> * <var:S> ; <var:B3> := <var:B2> * <var:S> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:2> ; <var:N> := <var:B3> <var:N> := <var:N> + <var:B2> <var:N> := <var:N> + <var:B1> <var:N> := <var:N> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:S> = <var:j> }} <def:poly> {{ <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <var:j> /\ <var:B2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <var:j> /\ <var:B2> = <var:j> ^ <nat:2> /\ <var:B3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <var:j> /\ <var:B2> = <var:j> ^ <nat:2> /\ <var:B3> = <var:j> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <nat:4> * <var:j> /\ <var:B2> = <var:j> ^ <nat:2> /\ <var:B3> = <var:j> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <nat:4> * <var:j> /\ <var:B2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:B3> = <var:j> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <nat:4> * <var:j> /\ <var:B2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <nat:4> * <var:j> /\ <var:B2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:B0> = <nat:3> /\ <var:N> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B1> = <nat:4> * <var:j> /\ <var:B0> = <nat:3> /\ <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:B0> = <nat:3> /\ <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:N> = <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 