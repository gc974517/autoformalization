\begin{document} \begin{theorem} Take a code in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:8> ; <var:V> := <var:E0> \end{verbatim} Assuming it to be that $ <var:k> = <var:e> $ ( given all positive integer coefficients $ <var:e> $ ) ahead of interpreting this list of commands , then we have $ <var:V> = <nat:8> $ after segment of code is done . \end{theorem} \begin{proof} Arguing the correctness of this program can be shown through standard Hoare reasoning . Advancing to the next step , \begin{eqnarray} \{ <var:k> = <var:e> \} \, <var:E0> := <nat:8> \, \{ <var:k> = <var:e> \land <var:E0> = <nat:8> \} \end{eqnarray} Stepping forward , we have \begin{eqnarray} \{ <var:k> = <var:e> \} \, <var:E0> := <nat:8> \, \{ <var:k> = <var:e> \land <var:E0> = <nat:8> \} \end{eqnarray} This is ensured by the assignment rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:k> = <var:e> }} <var:E0> := <nat:8> ; <var:V> := <var:E0> {{ <var:V> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:V> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 