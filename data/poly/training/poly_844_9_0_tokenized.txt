\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:7> ; <var:C1> := <var:C1> * <var:n> ; <var:C2> := <nat:8> ; <var:C2> := <var:C2> * <var:n> ; <var:C2> := <var:C2> * <var:n> ; <var:j> := <var:C2> ; <var:j> := <var:j> + <var:C1> ; <var:j> := <var:j> + <var:C0> \end{verbatim} Allowing it to be that $ <var:n> = <var:a> $ prior to executing the set of commands , then we have $ <var:j> = <nat:8> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:2> $ when code has finished executing . \end{theorem} \begin{proof} The application of typical Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:a> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \} \\ <var:C1> := <nat:7> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:C1> = <nat:7> \} \\ <var:C1> := <var:C1> * <var:n> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:C1> = <nat:7> \times <var:a> \} \\ <var:C2> := <nat:8> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:C1> = <nat:7> \times <var:a> \land <var:C2> = <nat:8> \} \\ <var:C2> := <var:C2> * <var:n> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:C1> = <nat:7> \times <var:a> \land <var:C2> = <nat:8> \times <var:a> \} \\ <var:C2> := <var:C2> * <var:n> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:C1> = <nat:7> \times <var:a> \land <var:C2> = <nat:8> \times <var:a> ^ <nat:2> \} \\ <var:j> := <var:C2> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:C1> = <nat:7> \times <var:a> \land <var:j> = <nat:8> \times <var:a> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:C1> ; \\ \{ <var:n> = <var:a> \land <var:C0> = <nat:2> \land <var:j> = <nat:8> \times <var:a> ^ <nat:2> + <nat:7> \times <var:a> \} \end{eqnarray} Allowing executing this list of instructions yields : \begin{eqnarray} <var:j> := <var:j> + <var:C0> \\ \{ <var:n> = <var:a> \land <var:j> = <nat:8> \times <var:a> ^ <nat:2> + <nat:7> \times <var:a> + <nat:2> \} \end{eqnarray} Therefore , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:n> = <var:a> }} <var:C0> := <nat:2> ; <var:C1> := <nat:7> ; <var:C1> := <var:C1> * <var:n> ; <var:C2> := <nat:8> ; <var:C2> := <var:C2> * <var:n> ; <var:C2> := <var:C2> * <var:n> ; <var:j> := <var:C2> ; <var:j> := <var:j> + <var:C1> ; <var:j> := <var:j> + <var:C0> {{ <var:j> = <nat:8> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:7> * <var:a> /\ <var:C2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:7> * <var:a> /\ <var:C2> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:7> * <var:a> /\ <var:C2> = <nat:8> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:7> * <var:a> /\ <var:j> = <nat:8> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:C0> = <nat:2> /\ <var:j> = <nat:8> * <var:a> ^ <nat:2> + <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:j> = <nat:8> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 