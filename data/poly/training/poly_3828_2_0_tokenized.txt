\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:6> ; <var:J> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Allow it to hold that $ <var:j> = <var:E> $ before the evaluation of our set of commands it follows that $ <var:J> = <nat:6> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is shown with Hoare logic . Moving onward , we have \begin{eqnarray} \{ <var:j> = <var:E> \} \, <var:h0> := <nat:6> \, \{ <var:j> = <var:E> \land <var:h0> = <nat:6> \} \\ \{ <var:j> = <var:E> \land <var:h0> = <nat:6> \} \, <var:J> := <var:h0\, \{ <var:j> = <var:E> \land <var:J> = <nat:6> \} \end{eqnarray} This is shown to be logically sound by the rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:J> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:j> = <var:E> }} <def:poly> {{ <var:J> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:J> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 