\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:4> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:L> ; <var:z> := <var:j1> ; <var:z> := <var:z> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:L> = <var:D> $ --- assuming some $ <var:D> $ --- prior to executing our segment of code , it must be that $ <var:z> = <nat:6> \cdot <var:D> + <nat:4> $ once code has executed . \end{theorem} \begin{proof} The course of logic for this set of instructions can be demonstrated through Hoare logic . Moving onward , we see the variable binding command \verb | <var:j0> := <nat:4> ; | . This code moves $ \{ <var:L> = <var:D> \} $ into $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \} $ . Moving on to the next step , we see the variable update code \verb | <var:j1> := <nat:6> ; | . This transfers the precondition $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \} $ to the postcondition $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \land <var:j1> = <nat:6> \} $ . Observing the proceeding bit of code contained in our code segment , we have the assignment command \verb | <var:j1> := <var:j1> * <var:L> ; | . This command advances the precondition $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \land <var:j1> = <nat:6> \} $ to $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \land <var:j1> = <nat:6> * <var:D> \} $ . This is guaranteed with the assignment rule given by Hoare logic . Taking another step toward the proceeding statement in the code , we have the variable assignmet command \verb | <var:z> := <var:j1> ; | . This statement moves the precondition $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \land <var:j1> = <nat:6> * <var:D> \} $ as $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \land <var:z> = <nat:6> * <var:D> \} $ . This is guaranteed using the assignment rule found in usual Hoare techniques . Now , the statement assigning $ <var:z> + <var:j0$ as $ <var:z>$ . This command takes the precondition $ \{ <var:L> = <var:D> \land <var:j0> = <nat:4> \land <var:z> = <nat:6> * <var:D> \} $ to $ \{ <var:L> = <var:D> \land <var:z> = <nat:6> * <var:D> + <nat:4> \} $ . This is sound by the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:L> ; <var:z> := <var:j1> ; <var:z> := <var:z> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:L> = <var:D> }} <def:poly> {{ <var:z> = <nat:6> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:j0> = <nat:4> /\ <var:z> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:z> = <nat:6> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 