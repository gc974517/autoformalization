\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:4> ; <var:P> := <var:T0> \end{verbatim} Assuming that we have $ <var:C> = <var:p> $ before the evaluation of our list of commands it must be that we have $ <var:P> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:p> \} \\ <var:T0> := <nat:4> ; \\ \{ <var:C> = <var:p> \land <var:T0> = <nat:4> \} \\ <var:P> := <var:T0> \\ \{ <var:C> = <var:p> \land <var:P> = <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:C> = <var:p> }} <var:T0> := <nat:4> ; <var:P> := <var:T0> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 