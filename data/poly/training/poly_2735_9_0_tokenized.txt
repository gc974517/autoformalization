\begin{document} \begin{theorem} Consider the following segment of code : \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:Y> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:Y> ; <var:n2> := <var:n2> * <var:Y> ; <var:o> := <var:n2> ; <var:o> := <var:o> + <var:n1> ; <var:o> := <var:o> + <var:n0> \end{verbatim} Assuming it to be that $ <var:Y> = <var:Z> $ prior to running our series of commands then we see $ <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this program is demonstrated with usual Hoare techniques . Jumping to the proceeding statements seen in our series of instructions , we have \begin{verbatim} { <var:Y> = <var:Z> } <var:n0> := <nat:2> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> } <var:n1> := <nat:2> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> } <var:n1> := <var:n1> * <var:Y> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> } \end{verbatim} This is given using the environment update inference rule defined in standard Hoare reasoning . Honing in on the upcoming lines of codeseen in our list of instructions , we have \begin{verbatim} { <var:Y> = <var:Z> } <var:n0> := <nat:2> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> } <var:n1> := <nat:2> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> } <var:n1> := <var:n1> * <var:Y> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> } <var:n2> := <nat:1> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:1> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:1> } <var:n2> := <var:n2> * <var:Y> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:1> * <var:Z> } { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:1> * <var:Z> } <var:n2> := <var:n2> * <var:Y> { <var:Y> = <var:Z> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:1> * <var:Z> ^ <nat:2> } \end{verbatim} This is shown to be logically sound using the binding inference rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <var:n0> := <nat:2> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:Y> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:Y> ; <var:n2> := <var:n2> * <var:Y> ; <var:o> := <var:n2> ; <var:o> := <var:o> + <var:n1> ; <var:o> := <var:o> + <var:n0> {{ <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:n0> = <nat:2> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 