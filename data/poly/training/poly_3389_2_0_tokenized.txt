\begin{document} \begin{theorem} Consider the following segment of code as follows \begin{verbatim} <var:N0> := <nat:5> ; <var:D> := <var:N0> \end{verbatim} Given it to be that $ <var:U> = <var:A> $ prior to evaluating this set of instructions , it must be that we see $ <var:D> = <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the segment of code is demonstrated by usual Hoare techniques . Paying attention to the proceeding bit of code seen in our list of instructions , the variable assignmet code binding $ <nat:5> $ to $ <var:N0>$ . This moves the condition $ \{ <var:U> = <var:A> \} $ toward the postcondition $ \{ <var:U> = <var:A> \land <var:N0> = <nat:5> \} $ . Honing in on the subsequent statement in our set of commands , we see the variable update statement \verb | <var:D> := <var:N0> | . This statement transfers $ \{ <var:U> = <var:A> \land <var:N0> = <nat:5> \} $ into the condition $ \{ <var:U> = <var:A> \land <var:D> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:U> = <var:A> }} <var:N0> := <nat:5> ; <var:D> := <var:N0> {{ <var:D> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:D> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 