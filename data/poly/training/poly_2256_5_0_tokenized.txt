\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:2> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:p> ; <var:P> := <var:l1> ; <var:P> := <var:P> + <var:l0> \end{verbatim} Allow , for all positive integers $ <var:x> $ , that $ <var:p> = <var:x> $ prior to the execution of our list of commands , it follows that we see $ <var:P> = <nat:4> \times <var:x> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is evident using typical Hoare logic . Moving forward to the following line of code contained in the code , we see the variable update command \verb | <var:l0> := <nat:2> ; | . This transfers the precondition $ \{ <var:p> = <var:x> \} $ toward the postcondition $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \} $ . This is given using the assignment scheme given by typical Hoare logic . Moving forward to the upcoming line of code contained in our series of instructions , we have the binding code \verb | <var:l1> := <nat:4> ; | . This line forwards the condition $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \} $ toward the condition $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \land <var:l1> = <nat:4> \} $ . This is given through the assignment law found in usual Hoare logic . Taking a look at the upcoming command found in our program , we have the environment update code assigning $ <var:l1> * <var:p> $ toward $ <var:l1>$ . This redefines $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \land <var:l1> = <nat:4> \} $ as the postcondition $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \land <var:l1> = <nat:4> \times <var:x> \} $ . This is shown by the assignment law defined by Hoare reasoning . Following , we have the variable update code \verb | <var:P> := <var:l1> ; | . This command forwards $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \land <var:l1> = <nat:4> \times <var:x> \} $ to the postcondition $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \land <var:P> = <nat:4> \times <var:x> \} $ . Moving forward , we have the assignment statement \verb | <var:P> := <var:P> + <var:l0> | . This forwards the precondition $ \{ <var:p> = <var:x> \land <var:l0> = <nat:2> \land <var:P> = <nat:4> \times <var:x> \} $ toward $ \{ <var:p> = <var:x> \land <var:P> = <nat:4> \times <var:x> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <var:l0> := <nat:2> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:p> ; <var:P> := <var:l1> ; <var:P> := <var:P> + <var:l0> {{ <var:P> = <nat:4> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:l0> = <nat:2> /\ <var:P> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:P> = <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 