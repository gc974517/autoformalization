\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:e> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:3> ; <var:D> := <var:H1> <var:D> := <var:D> + <var:H0> \end{verbatim} Given it to be that $ <var:e> = <var:a> $ before evaluating the program it holds that $ <var:D> = <nat:3> \times <var:a> + <nat:4> $ after code has exited . \end{theorem} \begin{proof} Using typical Hoare techniques results in : \begin{eqnarray} \{ <var:e> = <var:a> \} \\ <var:H1> := <var:e> ; \\ \{ <var:e> = <var:a> \land <var:H1> = <var:a> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:e> = <var:a> \land <var:H1> = <var:a> \land <var:H0> = <nat:4> \} \\ <var:H1> := <var:H1> * <nat:3> ; \\ \{ <var:e> = <var:a> \land <var:H1> = <nat:3> \times <var:a> \land <var:H0> = <nat:4> \} \\ <var:D> := <var:H1> \\ \{ <var:e> = <var:a> \land <var:H0> = <nat:4> \land <var:D> = <nat:3> \times <var:a> \} \\ <var:D> := <var:D> + <var:H0> \\ \{ <var:e> = <var:a> \land <var:D> = <nat:3> \times <var:a> + <nat:4> \} \end{eqnarray} As a result , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:e> = <var:a> }} <var:H1> := <var:e> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:3> ; <var:D> := <var:H1> <var:D> := <var:D> + <var:H0> {{ <var:D> = <nat:3> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:H1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:H1> = <var:a> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:H1> = <nat:3> * <var:a> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:H0> = <nat:4> /\ <var:D> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D> = <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 