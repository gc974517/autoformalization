\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:e> := <nat:2> ; <var:e> := <nat:2> + <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <nat:2> + <var:e> * <var:B> ; <var:e> := <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> \end{verbatim} Assume it to be that $ <var:B> = <var:o> $ before executing the series of commands , it holds that we have $ <var:e> = <nat:2> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:4> \cdot <var:o> ^ <nat:4> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:4> $ once list of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is clear using usual Hoare techniques . Shifting focus toward the following statements in our series of instructions , we see \begin{eqnarray} \{ <var:B> = <var:o> \} \, <var:e> := <nat:2> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> \} \\ \{ <var:B> = <var:o> \land <var:e> = <nat:2> \} \, <var:e> := <nat:2> + <var:e> * <var:B> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> * <var:o> + <nat:2> \} \\ \{ <var:B> = <var:o> \land <var:e> = <nat:2> * <var:o> + <nat:2> \} \, <var:e> := <nat:4> + <var:e> * <var:B> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> \} \\ \{ <var:B> = <var:o> \land <var:e> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> \} \, <var:e> := <nat:4> + <var:e> * <var:B> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> \} \end{eqnarray} Next , we have \begin{eqnarray} \{ <var:B> = <var:o> \} \, <var:e> := <nat:2> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> \} \end{eqnarray} This is known to be sound through the binding inference rule given by Hoare techniques . Moving forward to the next steps seen in our code , \begin{eqnarray} \{ <var:B> = <var:o> \} \, <var:e> := <nat:2> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> \} \\ \{ <var:B> = <var:o> \land <var:e> = <nat:2> \} \, <var:e> := <nat:2> + <var:e> * <var:B> \, \{ <var:B> = <var:o> \land <var:e> = <nat:2> * <var:o> + <nat:2> \} \end{eqnarray} This is guaranteed with the binding scheme of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:B> = <var:o> }} <var:e> := <nat:2> ; <var:e> := <nat:2> + <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <nat:2> + <var:e> * <var:B> ; <var:e> := <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> {{ <var:e> = <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:e> = <nat:2> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 