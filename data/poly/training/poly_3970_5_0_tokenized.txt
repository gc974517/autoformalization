\begin{document} \begin{theorem} Take the following list of instructions as follows \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:E> ; <var:P> := <var:Q1> ; <var:P> := <var:P> + <var:Q0> \end{verbatim} Assume it to be that $ <var:E> = <var:j> $ ahead of the execution of the code , it follows that we see $ <var:P> = <nat:9> * <var:j> + <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:E> = <var:j> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:E> = <var:j> \land <var:Q0> = <nat:8> \} \\ <var:Q1> := <nat:9> ; \\ \{ <var:E> = <var:j> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <var:E> ; \\ \{ <var:E> = <var:j> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \times <var:j> \} \\ <var:P> := <var:Q1> ; \\ \{ <var:E> = <var:j> \land <var:Q0> = <nat:8> \land <var:P> = <nat:9> \times <var:j> \} \\ <var:P> := <var:P> + <var:Q0> \\ \{ <var:E> = <var:j> \land <var:P> = <nat:9> \times <var:j> + <nat:8> \} \end{eqnarray} Given the above , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:E> = <var:j> }} <var:Q0> := <nat:8> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:E> ; <var:P> := <var:Q1> ; <var:P> := <var:P> + <var:Q0> {{ <var:P> = <nat:9> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:P> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:P> = <nat:9> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 