\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} : \begin{verbatim} <var:u1> := <var:U> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:7> ; <var:P> := <var:u1> <var:P> := <var:P> + <var:u0> \end{verbatim} Allowing it to hold that $ <var:U> = <var:v> $ before the evaluation of this series of instructions , it must be that we have $ <var:P> = <nat:7> \cdot <var:v> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this program is clear with Hoare techniques . Further , we see the variable update line defining $ <var:U> $ to $ <var:u1>$ . This moves $ \{ <var:U> = <var:v> \} $ to $ \{ <var:U> = <var:v> \land <var:u1> = <var:v> \} $ . Focusing on the upcoming statement in the set of instructions , the variable binding code \verb | <var:u0> := <nat:9> ; | . This code forwards $ \{ <var:U> = <var:v> \land <var:u1> = <var:v> \} $ to $ \{ <var:U> = <var:v> \land <var:u1> = <var:v> \land <var:u0> = <nat:9> \} $ . Observing the next step seen in the program , the variable update command \verb | <var:u1> := <var:u1> * <nat:7> ; | . This takes the condition $ \{ <var:U> = <var:v> \land <var:u1> = <var:v> \land <var:u0> = <nat:9> \} $ as the condition $ \{ <var:U> = <var:v> \land <var:u1> = <nat:7> \times <var:v> \land <var:u0> = <nat:9> \} $ . This is shown using the assignment inference rule defined by standard Hoare logic . Following , the environment update command \verb | <var:P> := <var:u1> | . This forwards the condition $ \{ <var:U> = <var:v> \land <var:u1> = <nat:7> \times <var:v> \land <var:u0> = <nat:9> \} $ to the postcondition $ \{ <var:U> = <var:v> \land <var:u0> = <nat:9> \land <var:P> = <nat:7> \times <var:v> \} $ . This is given by the assignment law defined in standard Hoare techniques . Looking at the proceeding step seen in our segment of code , the variable binding code \verb | <var:P> := <var:P> + <var:u0> | . This command advances the condition $ \{ <var:U> = <var:v> \land <var:u0> = <nat:9> \land <var:P> = <nat:7> \times <var:v> \} $ toward the condition $ \{ <var:U> = <var:v> \land <var:P> = <nat:7> \times <var:v> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <var:u1> := <var:U> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:7> ; <var:P> := <var:u1> <var:P> := <var:P> + <var:u0> {{ <var:P> = <nat:7> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:u1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:u1> = <var:v> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:u1> = <nat:7> * <var:v> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:u0> = <nat:9> /\ <var:P> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:P> = <nat:7> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 