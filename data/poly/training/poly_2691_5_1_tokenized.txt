\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:v> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:h> := <var:Q1> <var:h> := <var:h> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Given it to hold that $ <var:v> = <var:P> $ prior to running this program it holds that we have $ <var:h> = <nat:6> * <var:P> + <nat:6> $ once series of instructions exits . \end{theorem} \begin{proof} The course of logic for our code can be shown with typical Hoare reasoning . Observing the following command found in the segment of code , \verb | { <var:v> = <var:P> } <var:Q1> := <var:v> { <var:v> = <var:P> \land <var:Q1> = <var:P> } | . This is rigorously given by the environment update inference rule in usual Hoare techniques . After , \verb | { <var:v> = <var:P> } <var:Q1> := <var:v> { <var:v> = <var:P> \land <var:Q1> = <var:P> } | . This is shown through the variable assignmet law defined in standard Hoare logic . Advancing on , \verb | { <var:v> = <var:P> } <var:Q1> := <var:v> { <var:v> = <var:P> \land <var:Q1> = <var:P> } | , \verb | { <var:v> = <var:P> \land <var:Q1> = <var:P> } <var:Q0> := <nat:6> { <var:v> = <var:P> \land <var:Q1> = <var:P> \land <var:Q0> = <nat:6> } | and \verb | { <var:v> = <var:P> \land <var:Q1> = <var:P> \land <var:Q0> = <nat:6> } <var:Q1> := <var:Q1> * <nat:6> { <var:v> = <var:P> \land <var:Q1> = <nat:6> * <var:P> \land <var:Q0> = <nat:6> } | . This is ensured by the variable update inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:v> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:h> := <var:Q1> <var:h> := <var:h> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:v> = <var:P> }} <def:poly> {{ <var:h> = <nat:6> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:Q1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:Q1> = <var:P> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:Q1> = <nat:6> * <var:P> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:Q0> = <nat:6> /\ <var:h> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:h> = <nat:6> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 