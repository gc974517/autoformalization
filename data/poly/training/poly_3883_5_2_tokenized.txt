\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <var:L> * <var:C> ; <var:L> := <nat:2> + <var:L> * <var:C> ; <var:L> := <nat:4> + <var:L> * <var:C> ; <var:L> := <nat:2> + <var:L> * <var:C> \end{verbatim} Allowing ( for any positive numbers $ <var:I> $ ) $ <var:C> = <var:I> $ prior to running our series of instructions it holds that $ <var:L> = <nat:1> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:2> $ after series of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be demonstrated with Hoare logic . Moving forward to the proceeding pieces of code found in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:C> = <var:I> \} & <var:L> := <nat:1> & \{ <var:C> = <var:I> \land <var:L> = <nat:1> \} \\ \{ <var:C> = <var:I> \land <var:L> = <nat:1> \} & <var:L> := <var:L> * <var:C> & \{ <var:C> = <var:I> \land <var:L> = <nat:1> * <var:I> + \} \end{tabular} This is rigorously given through the binding scheme defined by standard Hoare logic . Looking at the subsequent commands found in our program , \[ \begin{tabular} {rcl} \{ <var:C> = <var:I> \} & <var:L> := <nat:1> & \{ <var:C> = <var:I> \land <var:L> = <nat:1> \} \\ \{ <var:C> = <var:I> \land <var:L> = <nat:1> \} & <var:L> := <var:L> * <var:C> & \{ <var:C> = <var:I> \land <var:L> = <nat:1> * <var:I> + \} \end{tabular} This is rigorously given by the assignment inference rule given in usual Hoare reasoning . Advancing on , \[ \begin{tabular} {rcl} \{ <var:C> = <var:I> \} & <var:L> := <nat:1> & \{ <var:C> = <var:I> \land <var:L> = <nat:1> \} \end{tabular} This is shown through the assignment rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:C> = <var:I> }} <var:L> := <nat:1> ; <var:L> := <var:L> * <var:C> ; <var:L> := <nat:2> + <var:L> * <var:C> ; <var:L> := <nat:4> + <var:L> * <var:C> ; <var:L> := <nat:2> + <var:L> * <var:C> {{ <var:L> = <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:L> = <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:L> = <nat:1> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:L> = <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:L> = <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 