\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:W> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:W> ; <var:k2> := <var:k2> * <var:W> ; <var:b> := <var:k2> ; <var:b> := <var:b> + <var:k1> ; <var:b> := <var:b> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:W> = <var:Y> $ before the execution of our series of commands it must be that we have $ <var:b> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:6> \cdot <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the code is given by Hoare reasoning . Stepping through , we have the command \verb | <var:k0> := <nat:2> ; | . This moves $ \{ <var:W> = <var:Y> \} $ toward $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \} $ . This is given with the assignment inference rule in usual Hoare reasoning . Going forward , we see the variable binding code \verb | <var:k1> := <nat:6> ; | . This takes $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \} $ toward $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> \} $ . This is shown with the assignment law given by Hoare logic . Jumping to the proceeding bit of code contained in the series of commands , the binding command \verb | <var:k1> := <var:k1> * <var:W> ; | . This statement forwards the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> \} $ to the postcondition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \} $ . Going forward , the binding command \verb | <var:k2> := <nat:3> ; | . This statement takes the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \} $ into $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:k2> = <nat:3> \} $ . This is given with the assignment law of Hoare reasoning . Moving onward , the binding code \verb | <var:k2> := <var:k2> * <var:W> ; | . This code transfers the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:k2> = <nat:3> \} $ into the postcondition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:k2> = <nat:3> * <var:Y> \} $ . Advancing , the assignment line \verb | <var:k2> := <var:k2> * <var:W> ; | . This code transfers the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:k2> = <nat:3> * <var:Y> \} $ to the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:k2> = <nat:3> * <var:Y> ^ <nat:2> \} $ . This is given by the assignment scheme in usual Hoare reasoning . Next , the variable assignmet statement defining $ <var:k2> $ toward $ <var:b>$ . This redefines the precondition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:k2> = <nat:3> * <var:Y> ^ <nat:2> \} $ into the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:b> = <nat:3> * <var:Y> ^ <nat:2> \} $ . This is sound using the assignment scheme in usual Hoare techniques . Moving forward to the next piece of code in the set of instructions , the variable binding line \verb | <var:b> := <var:b> + <var:k1> ; | . This command moves the precondition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:Y> \land <var:b> = <nat:3> * <var:Y> ^ <nat:2> \} $ as the condition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:b> = <nat:3> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> \} $ . This is given using the assignment rule given in usual Hoare reasoning . Jumping to the proceeding command seen in the series of commands , the assignment line \verb | <var:b> := <var:b> + <var:k0> | . This advances the precondition $ \{ <var:W> = <var:Y> \land <var:k0> = <nat:2> \land <var:b> = <nat:3> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> \} $ toward the condition $ \{ <var:W> = <var:Y> \land <var:b> = <nat:3> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:W> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:W> ; <var:k2> := <var:k2> * <var:W> ; <var:b> := <var:k2> ; <var:b> := <var:b> + <var:k1> ; <var:b> := <var:b> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:W> = <var:Y> }} <def:poly> {{ <var:b> = <nat:3> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:Y> /\ <var:k2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:Y> /\ <var:k2> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:Y> /\ <var:k2> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:Y> /\ <var:b> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:k0> = <nat:2> /\ <var:b> = <nat:3> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:b> = <nat:3> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 