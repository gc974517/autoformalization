\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:7> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:B> ; <var:u> := <var:r1> ; <var:u> := <var:u> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given given every positive numbers $ <var:K> $ it to be that $ <var:B> = <var:K> $ ahead of interpreting the segment of code , it must be that we see $ <var:u> = <nat:9> \times <var:K> + <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:B> = <var:K> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:B> = <var:K> \land <var:r0> = <nat:7> \} \end{eqnarray} Advancing executing our segment of code results in : \begin{eqnarray} <var:r1> := <nat:9> ; \\ \{ <var:B> = <var:K> \land <var:r0> = <nat:7> \land <var:r1> = <nat:9> \} \\ <var:r1> := <var:r1> * <var:B> ; \\ \{ <var:B> = <var:K> \land <var:r0> = <nat:7> \land <var:r1> = <nat:9> \times <var:K> \} \\ <var:u> := <var:r1> ; \\ \{ <var:B> = <var:K> \land <var:r0> = <nat:7> \land <var:u> = <nat:9> \times <var:K> \} \\ <var:u> := <var:u> + <var:r0> \\ \{ <var:B> = <var:K> \land <var:u> = <nat:9> \times <var:K> + <nat:7> \} \end{eqnarray} As a consequence , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:7> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:B> ; <var:u> := <var:r1> ; <var:u> := <var:u> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:B> = <var:K> }} <def:poly> {{ <var:u> = <nat:9> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:r0> = <nat:7> /\ <var:u> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:u> = <nat:9> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 