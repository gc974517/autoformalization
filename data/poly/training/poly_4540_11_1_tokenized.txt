\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:h1> := <var:i> ; <var:h2> := <var:h1> * <var:i> ; <var:h3> := <var:h2> * <var:i> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:1> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:2> ; <var:F> := <var:h3> <var:F> := <var:F> + <var:h2> <var:F> := <var:F> + <var:h1> <var:F> := <var:F> + <var:h0> \end{verbatim} Given $ <var:i> = <var:s> $ --- given any whole numbers $ <var:s> $ --- before executing the segment of code , it must be that we have $ <var:F> = <nat:2> \cdot <var:s> ^ <nat:3> + <nat:8> \cdot <var:s> ^ <nat:2> + <nat:1> \cdot <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for the code segment can be seen through this decorated segment of code . \begin{eqnarray} \{ <var:i> = <var:s> \} \\ <var:h1> := <var:i> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <var:s> \} \\ <var:h2> := <var:h1> * <var:i> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <var:s> \land <var:h2> = <var:s> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:i> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <var:s> \land <var:h2> = <var:s> ^ <nat:2> \land <var:h3> = <var:s> ^ <nat:3> \} \\ <var:h0> := <nat:9> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <var:s> \land <var:h2> = <var:s> ^ <nat:2> \land <var:h3> = <var:s> ^ <nat:3> \land <var:h0> = <nat:9> \} \\ <var:h1> := <var:h1> * <nat:1> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <nat:1> * <var:s> \land <var:h2> = <var:s> ^ <nat:2> \land <var:h3> = <var:s> ^ <nat:3> \land <var:h0> = <nat:9> \} \\ <var:h2> := <var:h2> * <nat:8> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <nat:1> * <var:s> \land <var:h2> = <nat:8> * <var:s> ^ <nat:2> \land <var:h3> = <var:s> ^ <nat:3> \land <var:h0> = <nat:9> \} \\ <var:h3> := <var:h3> * <nat:2> ; \\ \{ <var:i> = <var:s> \land <var:h1> = <nat:1> * <var:s> \land <var:h2> = <nat:8> * <var:s> ^ <nat:2> \land <var:h3> = <nat:2> * <var:s> ^ <nat:3> \land <var:h0> = <nat:9> \} \\ <var:F> := <var:h3> \\ \{ <var:i> = <var:s> \land <var:h1> = <nat:1> * <var:s> \land <var:h2> = <nat:8> * <var:s> ^ <nat:2> \land <var:h0> = <nat:9> \land <var:F> = <nat:2> * <var:s> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:h2> \\ \{ <var:i> = <var:s> \land <var:h1> = <nat:1> * <var:s> \land <var:h0> = <nat:9> \land <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:h1> \\ \{ <var:i> = <var:s> \land <var:h0> = <nat:9> \land <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:1> * <var:s> \} \\ <var:F> := <var:F> + <var:h0> \\ \{ <var:i> = <var:s> \land <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:9> \} \end{eqnarray} The application of usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:i> = <var:s> }} <var:h1> := <var:i> ; <var:h2> := <var:h1> * <var:i> ; <var:h3> := <var:h2> * <var:i> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:1> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:2> ; <var:F> := <var:h3> <var:F> := <var:F> + <var:h2> <var:F> := <var:F> + <var:h1> <var:F> := <var:F> + <var:h0> {{ <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <var:s> /\ <var:h2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <var:s> /\ <var:h2> = <var:s> ^ <nat:2> /\ <var:h3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <var:s> /\ <var:h2> = <var:s> ^ <nat:2> /\ <var:h3> = <var:s> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <nat:1> * <var:s> /\ <var:h2> = <var:s> ^ <nat:2> /\ <var:h3> = <var:s> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <nat:1> * <var:s> /\ <var:h2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:h3> = <var:s> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <nat:1> * <var:s> /\ <var:h2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:s> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <nat:1> * <var:s> /\ <var:h2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:h0> = <nat:9> /\ <var:F> = <nat:2> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h1> = <nat:1> * <var:s> /\ <var:h0> = <nat:9> /\ <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:h0> = <nat:9> /\ <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:F> = <nat:2> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 