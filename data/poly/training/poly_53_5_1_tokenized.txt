\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:h> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:1> ; <var:s> := <var:b1> <var:s> := <var:s> + <var:b0> \end{verbatim} Assuming that $ <var:h> = <var:t> $ before evaluating this series of commands it must be that we have $ <var:s> = <nat:1> \times <var:t> + <nat:7> $ once series of commands has exited . \end{theorem} \begin{proof} The proof of this set of instructions is evident by this decorated code . \begin{eqnarray} \{ <var:h> = <var:t> \} \\ <var:b1> := <var:h> ; \\ \{ <var:h> = <var:t> \land <var:b1> = <var:t> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:h> = <var:t> \land <var:b1> = <var:t> \land <var:b0> = <nat:7> \} \\ <var:b1> := <var:b1> * <nat:1> ; \\ \{ <var:h> = <var:t> \land <var:b1> = <nat:1> \cdot <var:t> \land <var:b0> = <nat:7> \} \\ <var:s> := <var:b1> \\ \{ <var:h> = <var:t> \land <var:b0> = <nat:7> \land <var:s> = <nat:1> \cdot <var:t> \} \\ <var:s> := <var:s> + <var:b0> \\ \{ <var:h> = <var:t> \land <var:s> = <nat:1> \cdot <var:t> + <nat:7> \} \end{eqnarray} The application of standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:h> = <var:t> }} <var:b1> := <var:h> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:1> ; <var:s> := <var:b1> <var:s> := <var:s> + <var:b0> {{ <var:s> = <nat:1> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:b1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:b1> = <var:t> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:b1> = <nat:1> * <var:t> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:b0> = <nat:7> /\ <var:s> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:s> = <nat:1> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 