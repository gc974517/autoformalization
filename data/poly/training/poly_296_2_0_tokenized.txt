\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:2> ; <var:u> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allowing it to hold that $ <var:j> = <var:e> $ prior to the evaluation of the series of commands , it must be that we see $ <var:u> = <nat:2> $ . \end{theorem} \begin{proof} Observe that this decorated program . \begin{eqnarray} \{ <var:j> = <var:e> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:j> = <var:e> \land <var:R0> = <nat:2> \} \\ <var:u> := <var:R0> \\ \{ <var:j> = <var:e> \land <var:u> = <nat:2> \} \end{eqnarray} The application of typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:2> ; <var:u> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:j> = <var:e> }} <def:poly> {{ <var:u> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:u> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 