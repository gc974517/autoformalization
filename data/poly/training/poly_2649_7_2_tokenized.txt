\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:4> + <var:R> * <var:v> ; <var:R> := <nat:4> + <var:R> * <var:v> ; <var:R> := <nat:4> + <var:R> * <var:v> ; <var:R> := <nat:1> + <var:R> * <var:v> ; <var:R> := <nat:3> + <var:R> * <var:v> ; <var:R> := <nat:3> + <var:R> * <var:v> \end{verbatim} Allowing $ <var:v> = <var:m> $ ahead of the execution of our series of commands it holds that we see $ <var:R> = <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this program is given using typical Hoare logic . Moving forward to the subsequent bit of code found in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:m> \} & <var:R> := <nat:4> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> \} \end{tabular} Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:m> \} & <var:R> := <nat:4> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> \} \\ \{ <var:v> = <var:m> \land <var:R> = <nat:4> \} & <var:R> := <nat:4> + <var:R> * <var:v> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> + <nat:4> \} \\ \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> + <nat:4> \} & <var:R> := <nat:4> + <var:R> * <var:v> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} \\ \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} & <var:R> := <nat:4> + <var:R> * <var:v> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} \\ \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} & <var:R> := <nat:1> + <var:R> * <var:v> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} \\ \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} & <var:R> := <nat:3> + <var:R> * <var:v> & \{ <var:v> = <var:m> \land <var:R> = <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} \end{tabular} This is shown using the variable binding scheme defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:v> = <var:m> }} <var:R> := <nat:4> ; <var:R> := <nat:4> + <var:R> * <var:v> ; <var:R> := <nat:4> + <var:R> * <var:v> ; <var:R> := <nat:4> + <var:R> * <var:v> ; <var:R> := <nat:1> + <var:R> * <var:v> ; <var:R> := <nat:3> + <var:R> * <var:v> ; <var:R> := <nat:3> + <var:R> * <var:v> {{ <var:R> = <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:R> = <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 