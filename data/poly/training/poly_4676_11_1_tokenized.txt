\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:D1> := <var:d> ; <var:D2> := <var:D1> * <var:d> ; <var:D3> := <var:D2> * <var:d> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:7> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:5> ; <var:R> := <var:D3> <var:R> := <var:R> + <var:D2> <var:R> := <var:R> + <var:D1> <var:R> := <var:R> + <var:D0> \end{verbatim} Allow it to hold that $ <var:d> = <var:v> $ before the evaluation of our program , it follows that we have $ <var:R> = <nat:5> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:4> $ when segment of code executes . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives us : \begin{eqnarray} \{ <var:d> = <var:v> \} \\ <var:D1> := <var:d> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <var:v> \} \\ <var:D2> := <var:D1> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:D1> := <var:D1> * <nat:7> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <nat:7> \times <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:D2> := <var:D2> * <nat:1> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <nat:7> \times <var:v> \land <var:D2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:D3> := <var:D3> * <nat:5> ; \\ \{ <var:d> = <var:v> \land <var:D1> = <nat:7> \times <var:v> \land <var:D2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:v> ^ <nat:3> \land <var:D0> = <nat:4> \} \\ <var:R> := <var:D3> \\ \{ <var:d> = <var:v> \land <var:D1> = <nat:7> \times <var:v> \land <var:D2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:D0> = <nat:4> \land <var:R> = <nat:5> \times <var:v> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:D2> \\ \{ <var:d> = <var:v> \land <var:D1> = <nat:7> \times <var:v> \land <var:D0> = <nat:4> \land <var:R> = <nat:5> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:D1> \\ \{ <var:d> = <var:v> \land <var:D0> = <nat:4> \land <var:R> = <nat:5> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> \} \\ <var:R> := <var:R> + <var:D0> \\ \{ <var:d> = <var:v> \land <var:R> = <nat:5> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:d> = <var:v> }} <var:D1> := <var:d> ; <var:D2> := <var:D1> * <var:d> ; <var:D3> := <var:D2> * <var:d> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:7> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:5> ; <var:R> := <var:D3> <var:R> := <var:R> + <var:D2> <var:R> := <var:R> + <var:D1> <var:R> := <var:R> + <var:D0> {{ <var:R> = <nat:5> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <nat:7> * <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <nat:7> * <var:v> /\ <var:D2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <nat:7> * <var:v> /\ <var:D2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:v> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <nat:7> * <var:v> /\ <var:D2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:D0> = <nat:4> /\ <var:R> = <nat:5> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D1> = <nat:7> * <var:v> /\ <var:D0> = <nat:4> /\ <var:R> = <nat:5> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:D0> = <nat:4> /\ <var:R> = <nat:5> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:R> = <nat:5> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 