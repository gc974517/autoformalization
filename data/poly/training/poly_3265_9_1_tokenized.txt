\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r3> := <var:r2> * <var:z> ; <var:r0> := <nat:3> ; <var:r2> := <var:r2> * <nat:5> ; <var:r3> := <var:r3> * <nat:3> ; <var:q> := <var:r3> <var:q> := <var:q> + <var:r2> <var:q> := <var:q> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:z> = <var:O> $ ahead of the execution of this code segment it holds that $ <var:q> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:O> \} \\ <var:r1> := <var:z> ; \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \} \\ <var:r2> := <var:r1> * <var:z> ; \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <var:O> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:z> ; \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r2> := <var:r2> * <nat:5> ; \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r3> := <var:r3> * <nat:3> ; \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:r3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:q> := <var:r3> \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:r0> = <nat:3> \land <var:q> = <nat:3> \cdot <var:O> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:r2> \\ \{ <var:z> = <var:O> \land <var:r1> = <var:O> \land <var:r0> = <nat:3> \land <var:q> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:r0> \\ \{ <var:z> = <var:O> \land <var:q> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:3> \} \end{eqnarray} Given the above , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r3> := <var:r2> * <var:z> ; <var:r0> := <nat:3> ; <var:r2> := <var:r2> * <nat:5> ; <var:r3> := <var:r3> * <nat:3> ; <var:q> := <var:r3> <var:q> := <var:q> + <var:r2> <var:q> := <var:q> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:z> = <var:O> }} <def:poly> {{ <var:q> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:O> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:r0> = <nat:3> /\ <var:q> = <nat:3> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:r1> = <var:O> /\ <var:r0> = <nat:3> /\ <var:q> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:q> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 