\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:Q0> := <nat:7> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:Z> ; <var:Q2> := <nat:8> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:X> := <var:Q2> ; <var:X> := <var:X> + <var:Q1> ; <var:X> := <var:X> + <var:Q0> \end{verbatim} Given that $ <var:Z> = <var:x> $ ahead of evaluating the list of commands , it must be that $ <var:X> = <nat:8> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:7> $ once program terminates . \end{theorem} \begin{proof} The argument for the series of commands can be done through usual Hoare techniques . Taking another step toward the upcoming statements contained in the series of commands , we have \begin{verbatim} { <var:Z> = <var:x> } <var:Q0> := <nat:7> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> } { <var:Z> = <var:x> \land <var:Q0> = <nat:7> } <var:Q1> := <nat:1> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> } \end{verbatim} Observing the subsequent lines of codecontained in our set of instructions , we see \begin{verbatim} { <var:Z> = <var:x> } <var:Q0> := <nat:7> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> } { <var:Z> = <var:x> \land <var:Q0> = <nat:7> } <var:Q1> := <nat:1> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> } { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> } <var:Q1> := <var:Q1> * <var:Z> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> \cdot <var:x> } \end{verbatim} Taking a look at the next bits of codeseen in the program , \begin{verbatim} { <var:Z> = <var:x> } <var:Q0> := <nat:7> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> } { <var:Z> = <var:x> \land <var:Q0> = <nat:7> } <var:Q1> := <nat:1> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> } { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> } <var:Q1> := <var:Q1> * <var:Z> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> \cdot <var:x> } { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> \cdot <var:x> } <var:Q2> := <nat:8> { <var:Z> = <var:x> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:1> \cdot <var:x> \land <var:Q2> = <nat:8> } \end{verbatim} This is rigorously given using the variable assignmet inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Z> = <var:x> }} <var:Q0> := <nat:7> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:Z> ; <var:Q2> := <nat:8> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:X> := <var:Q2> ; <var:X> := <var:X> + <var:Q1> ; <var:X> := <var:X> + <var:Q0> {{ <var:X> = <nat:8> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:1> * <var:x> /\ <var:Q2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:1> * <var:x> /\ <var:Q2> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:1> * <var:x> /\ <var:Q2> = <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:1> * <var:x> /\ <var:X> = <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:X> = <nat:8> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:X> = <nat:8> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 