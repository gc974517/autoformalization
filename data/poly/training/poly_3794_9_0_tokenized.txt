\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:a> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:a> ; <var:I2> := <var:I2> * <var:a> ; <var:f> := <var:I2> ; <var:f> := <var:f> + <var:I1> ; <var:f> := <var:f> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given --- given every whole numbers $ <var:v> $ --- that we have $ <var:a> = <var:v> $ ahead of executing our segment of code it must be that we see $ <var:f> = <nat:8> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:2> $ when code segment is done . \end{theorem} \begin{proof} The proof of our set of commands is shown using the below decorated series of instructions . \begin{eqnarray} \{ <var:a> = <var:v> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \} \\ <var:I1> := <nat:4> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \} \\ <var:I1> := <var:I1> * <var:a> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \cdot <var:v> \} \\ <var:I2> := <nat:8> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \cdot <var:v> \land <var:I2> = <nat:8> \} \\ <var:I2> := <var:I2> * <var:a> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \cdot <var:v> \land <var:I2> = <nat:8> \cdot <var:v> \} \\ <var:I2> := <var:I2> * <var:a> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \cdot <var:v> \land <var:I2> = <nat:8> \cdot <var:v> ^ <nat:2> \} \\ <var:f> := <var:I2> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \cdot <var:v> \land <var:f> = <nat:8> \cdot <var:v> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:I1> ; \\ \{ <var:a> = <var:v> \land <var:I0> = <nat:2> \land <var:f> = <nat:8> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> \} \\ <var:f> := <var:f> + <var:I0> \\ \{ <var:a> = <var:v> \land <var:f> = <nat:8> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:a> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:a> ; <var:I2> := <var:I2> * <var:a> ; <var:f> := <var:I2> ; <var:f> := <var:f> + <var:I1> ; <var:f> := <var:f> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:a> = <var:v> }} <def:poly> {{ <var:f> = <nat:8> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> * <var:v> /\ <var:I2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> * <var:v> /\ <var:I2> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> * <var:v> /\ <var:I2> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> * <var:v> /\ <var:f> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I0> = <nat:2> /\ <var:f> = <nat:8> * <var:v> ^ <nat:2> + <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:f> = <nat:8> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 