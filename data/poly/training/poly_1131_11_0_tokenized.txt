\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:2> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:a> ; <var:n2> := <var:n2> * <var:a> ; <var:n3> := <nat:8> ; <var:n3> := <var:n3> * <var:a> ; <var:n3> := <var:n3> * <var:a> ; <var:n3> := <var:n3> * <var:a> ; <var:A> := <var:n3> ; <var:A> := <var:A> + <var:n2> ; <var:A> := <var:A> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:a> = <var:b> $ before the execution of the code , it follows that $ <var:A> = <nat:8> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands is given through Hoare reasoning . Honing in on the next piece of code found in the code segment , we have the code giving $ <nat:2> $ toward $ <var:n0>$ . This command takes the precondition $ \{ <var:a> = <var:b> \} $ to the postcondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \} $ . This is shown to be logically sound by the assignment rule obtained from Hoare reasoning . Jumping to the upcoming statement found in our list of commands , the variable assignmet statement defining $ <nat:2> $ into $ <var:n2>$ . This statement advances $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \} $ to the condition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> \} $ . This is ensured by the assignment inference rule defined in Hoare techniques . Observing the next line contained in our code segment , the binding code defining $ <var:n2> * <var:a> $ into $ <var:n2>$ . This moves the precondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> \} $ as $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> \} $ . This is deduced through the assignment rule in standard Hoare reasoning . Observing the subsequent statement seen in the code segment , we have the environment update line assigning $ <var:n2> * <var:a> $ to $ <var:n2>$ . This redefines the precondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> \} $ into the postcondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \} $ . This is given by the assignment law found in typical Hoare logic . Honing in on the subsequent line of code contained in the set of instructions , we have the assignment line yielding $ <nat:8> $ into $ <var:n3>$ . This command redefines $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \} $ to $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> \} $ . This is rigorously given by the assignment law defined by Hoare reasoning . Now , we have the variable assignmet statement \verb | <var:n3> := <var:n3> * <var:a> ; | . This advances $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> \} $ toward the postcondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> * <var:b> \} $ . This is known to be sound through the assignment rule given by typical Hoare logic . Moving forward to the next bit of code seen in the segment of code , we have the code defining $ <var:n3> * <var:a> $ into $ <var:n3>$ . This command transfers the condition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> * <var:b> \} $ to the postcondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> * <var:b> ^ <nat:2> \} $ . Taking another step toward the next line of code contained in the set of instructions , the environment update command \verb | <var:n3> := <var:n3> * <var:a> ; | . This takes the precondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> * <var:b> ^ <nat:2> \} $ into the condition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> * <var:b> ^ <nat:3> \} $ . Following , the line \verb | <var:A> := <var:n3> ; | . This transfers the precondition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:n3> = <nat:8> * <var:b> ^ <nat:3> \} $ into $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:A> = <nat:8> * <var:b> ^ <nat:3> \} $ . Keeping momentum , we have the environment update line assigning $ <var:A> + <var:n2> $ into $ <var:A>$ . This statement advances the condition $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:n2> = <nat:2> * <var:b> ^ <nat:2> \land <var:A> = <nat:8> * <var:b> ^ <nat:3> \} $ to $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:A> = <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> \} $ . Keeping momentum , we have the environment update code giving $ <var:A> + <var:n0$ toward $ <var:A>$ . This advances $ \{ <var:a> = <var:b> \land <var:n0> = <nat:2> \land <var:A> = <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> \} $ as $ \{ <var:a> = <var:b> \land <var:A> = <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n0> := <nat:2> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:a> ; <var:n2> := <var:n2> * <var:a> ; <var:n3> := <nat:8> ; <var:n3> := <var:n3> * <var:a> ; <var:n3> := <var:n3> * <var:a> ; <var:n3> := <var:n3> * <var:a> ; <var:A> := <var:n3> ; <var:A> := <var:A> + <var:n2> ; <var:A> := <var:A> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:a> = <var:b> }} <def:poly> {{ <var:A> = <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:n3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:n2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:A> = <nat:8> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:n0> = <nat:2> /\ <var:A> = <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:A> = <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 