\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:y> ; <var:b2> := <nat:5> ; <var:b2> := <var:b2> * <var:y> ; <var:b2> := <var:b2> * <var:y> ; <var:M> := <var:b2> ; <var:M> := <var:M> + <var:b1> ; <var:M> := <var:M> + <var:b0> \end{verbatim} Assuming given any positive integer coefficients $ <var:A> $ that $ <var:y> = <var:A> $ ahead of the execution of our program it must be that $ <var:M> = <nat:5> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:A> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \} \\ <var:b1> := <nat:2> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \} \\ <var:b1> := <var:b1> * <var:y> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \cdot <var:A> \} \\ <var:b2> := <nat:5> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \cdot <var:A> \land <var:b2> = <nat:5> \} \\ <var:b2> := <var:b2> * <var:y> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \cdot <var:A> \land <var:b2> = <nat:5> \cdot <var:A> \} \\ <var:b2> := <var:b2> * <var:y> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \cdot <var:A> \land <var:b2> = <nat:5> \cdot <var:A> ^ <nat:2> \} \\ <var:M> := <var:b2> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \cdot <var:A> \land <var:M> = <nat:5> \cdot <var:A> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:b1> ; \\ \{ <var:y> = <var:A> \land <var:b0> = <nat:6> \land <var:M> = <nat:5> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> \} \\ <var:M> := <var:M> + <var:b0> \\ \{ <var:y> = <var:A> \land <var:M> = <nat:5> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:6> \} \end{eqnarray} As a result , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:y> = <var:A> }} <var:b0> := <nat:6> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:y> ; <var:b2> := <nat:5> ; <var:b2> := <var:b2> * <var:y> ; <var:b2> := <var:b2> * <var:y> ; <var:M> := <var:b2> ; <var:M> := <var:M> + <var:b1> ; <var:M> := <var:M> + <var:b0> {{ <var:M> = <nat:5> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:A> /\ <var:b2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:A> /\ <var:b2> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:A> /\ <var:b2> = <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:A> /\ <var:M> = <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:b0> = <nat:6> /\ <var:M> = <nat:5> * <var:A> ^ <nat:2> + <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:M> = <nat:5> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 