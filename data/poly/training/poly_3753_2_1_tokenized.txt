\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:3> ; <var:A> := <var:L0> \end{verbatim} Assume that $ <var:e> = <var:Q> $ prior to the execution of this series of instructions , it follows that $ <var:A> = <nat:3> $ after series of instructions has exited . \end{theorem} \begin{proof} The method of proof for this list of instructions can be given through standard Hoare techniques . Focusing on the following command seen in our set of instructions , the variable update statement \verb | <var:L0> := <nat:3> ; | . This command advances $ \{ <var:e> = <var:Q> \} $ to the postcondition $ \{ <var:e> = <var:Q> \land <var:L0> = <nat:3> \} $ . Stepping through , we see the variable binding statement yielding $ <var:L0$ toward $ <var:A>$ . This advances the precondition $ \{ <var:e> = <var:Q> \land <var:L0> = <nat:3> \} $ as $ \{ <var:e> = <var:Q> \land <var:A> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:e> = <var:Q> }} <var:L0> := <nat:3> ; <var:A> := <var:L0> {{ <var:A> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:A> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 