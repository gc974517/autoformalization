\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as \begin{verbatim} <var:p1> := <var:y> ; <var:p2> := <var:p1> * <var:y> ; <var:p3> := <var:p2> * <var:y> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:5> ; <var:i> := <var:p3> <var:i> := <var:i> + <var:p2> <var:i> := <var:i> + <var:p1> <var:i> := <var:i> + <var:p0> \end{verbatim} Assuming that we have $ <var:y> = <var:c> $ before executing the code segment , it follows that we have $ <var:i> = <nat:5> \cdot <var:c> ^ <nat:3> + <nat:7> \cdot <var:c> ^ <nat:2> + <nat:9> \cdot <var:c> + <nat:5> $ once set of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is shown by typical Hoare techniques . Taking another step toward the subsequent steps contained in our set of instructions , we see \begin{verbatim} { <var:y> = <var:c> } <var:p1> := <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> } { <var:y> = <var:c> \land <var:p1> = <var:c> } <var:p2> := <var:p1> * <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> } { <var:y> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> } <var:p3> := <var:p2> * <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> } { <var:y> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> } <var:p0> := <nat:5> { <var:y> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } { <var:y> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } <var:p1> := <var:p1> * <nat:9> { <var:y> = <var:c> \land <var:p1> = <nat:9> \cdot <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } { <var:y> = <var:c> \land <var:p1> = <nat:9> \cdot <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } <var:p2> := <var:p2> * <nat:7> { <var:y> = <var:c> \land <var:p1> = <nat:9> \cdot <var:c> \land <var:p2> = <nat:7> \cdot <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } { <var:y> = <var:c> \land <var:p1> = <nat:9> \cdot <var:c> \land <var:p2> = <nat:7> \cdot <var:c> ^ <nat:2> \land <var:p3> = <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } <var:p3> := <var:p3> * <nat:5> { <var:y> = <var:c> \land <var:p1> = <nat:9> \cdot <var:c> \land <var:p2> = <nat:7> \cdot <var:c> ^ <nat:2> \land <var:p3> = <nat:5> \cdot <var:c> ^ <nat:3> \land <var:p0> = <nat:5> } \end{verbatim} Moving on to the next step , we have \begin{verbatim} { <var:y> = <var:c> } <var:p1> := <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> } \end{verbatim} This is sound by the environment update inference rule obtained from standard Hoare reasoning . Stepping through , we see \begin{verbatim} { <var:y> = <var:c> } <var:p1> := <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> } \end{verbatim} Paying attention to the following step in the set of commands , we see \begin{verbatim} { <var:y> = <var:c> } <var:p1> := <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> } \end{verbatim} Honing in on the next piece of code in our set of commands , we have \begin{verbatim} { <var:y> = <var:c> } <var:p1> := <var:y> { <var:y> = <var:c> \land <var:p1> = <var:c> } \end{verbatim} This is known to be sound through the law of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:y> = <var:c> }} <var:p1> := <var:y> ; <var:p2> := <var:p1> * <var:y> ; <var:p3> := <var:p2> * <var:y> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:5> ; <var:i> := <var:p3> <var:i> := <var:i> + <var:p2> <var:i> := <var:i> + <var:p1> <var:i> := <var:i> + <var:p0> {{ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <var:c> /\ <var:p2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <var:c> /\ <var:p2> = <var:c> ^ <nat:2> /\ <var:p3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <var:c> /\ <var:p2> = <var:c> ^ <nat:2> /\ <var:p3> = <var:c> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <nat:9> * <var:c> /\ <var:p2> = <var:c> ^ <nat:2> /\ <var:p3> = <var:c> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <nat:9> * <var:c> /\ <var:p2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:p3> = <var:c> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <nat:9> * <var:c> /\ <var:p2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:c> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <nat:9> * <var:c> /\ <var:p2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:p0> = <nat:5> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p1> = <nat:9> * <var:c> /\ <var:p0> = <nat:5> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:p0> = <nat:5> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 