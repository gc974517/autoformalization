\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:a> ; <var:J2> := <nat:9> ; <var:J2> := <var:J2> * <var:a> ; <var:J2> := <var:J2> * <var:a> ; <var:N> := <var:J2> ; <var:N> := <var:N> + <var:J1> ; <var:N> := <var:N> + <var:J0> \end{verbatim} Assuming it to hold that $ <var:a> = <var:O> $ ahead of running our set of commands , it follows that we see $ <var:N> = <nat:9> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:O> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:1> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \} \\ <var:J1> := <var:J1> * <var:a> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \cdot <var:O> \} \\ <var:J2> := <nat:9> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \cdot <var:O> \land <var:J2> = <nat:9> \} \\ <var:J2> := <var:J2> * <var:a> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \cdot <var:O> \land <var:J2> = <nat:9> \cdot <var:O> \} \\ <var:J2> := <var:J2> * <var:a> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \cdot <var:O> \land <var:J2> = <nat:9> \cdot <var:O> ^ <nat:2> \} \\ <var:N> := <var:J2> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \cdot <var:O> \land <var:N> = <nat:9> \cdot <var:O> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:J1> ; \\ \{ <var:a> = <var:O> \land <var:J0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> \} \\ <var:N> := <var:N> + <var:J0> \\ \{ <var:a> = <var:O> \land <var:N> = <nat:9> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:6> \} \end{eqnarray} Using typical Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <var:J0> := <nat:6> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:a> ; <var:J2> := <nat:9> ; <var:J2> := <var:J2> * <var:a> ; <var:J2> := <var:J2> * <var:a> ; <var:N> := <var:J2> ; <var:N> := <var:N> + <var:J1> ; <var:N> := <var:N> + <var:J0> {{ <var:N> = <nat:9> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:O> /\ <var:J2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:O> /\ <var:J2> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:O> /\ <var:J2> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:O> /\ <var:N> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:J0> = <nat:6> /\ <var:N> = <nat:9> * <var:O> ^ <nat:2> + <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:N> = <nat:9> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 