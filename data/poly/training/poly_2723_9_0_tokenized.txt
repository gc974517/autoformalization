\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:9> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:c> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:c> ; <var:k2> := <var:k2> * <var:c> ; <var:C> := <var:k2> ; <var:C> := <var:C> + <var:k1> ; <var:C> := <var:C> + <var:k0> \end{verbatim} Assuming it to hold that $ <var:c> = <var:r> $ before the execution of this set of commands , it holds that we see $ <var:C> = <nat:5> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:c> = <var:r> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \} \\ <var:k1> := <nat:2> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:k1> = <nat:2> \} \\ <var:k1> := <var:k1> * <var:c> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:k1> = <nat:2> * <var:r> \} \\ <var:k2> := <nat:5> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:k1> = <nat:2> * <var:r> \land <var:k2> = <nat:5> \} \\ <var:k2> := <var:k2> * <var:c> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:k1> = <nat:2> * <var:r> \land <var:k2> = <nat:5> * <var:r> \} \\ <var:k2> := <var:k2> * <var:c> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:k1> = <nat:2> * <var:r> \land <var:k2> = <nat:5> * <var:r> ^ <nat:2> \} \\ <var:C> := <var:k2> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:k1> = <nat:2> * <var:r> \land <var:C> = <nat:5> * <var:r> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:k1> ; \\ \{ <var:c> = <var:r> \land <var:k0> = <nat:9> \land <var:C> = <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> \} \\ <var:C> := <var:C> + <var:k0> \\ \{ <var:c> = <var:r> \land <var:C> = <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:9> \} \end{eqnarray} Therefore , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:c> = <var:r> }} <var:k0> := <nat:9> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:c> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:c> ; <var:k2> := <var:k2> * <var:c> ; <var:C> := <var:k2> ; <var:C> := <var:C> + <var:k1> ; <var:C> := <var:C> + <var:k0> {{ <var:C> = <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:2> * <var:r> /\ <var:k2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:2> * <var:r> /\ <var:k2> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:2> * <var:r> /\ <var:k2> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:2> * <var:r> /\ <var:C> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:k0> = <nat:9> /\ <var:C> = <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:C> = <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 