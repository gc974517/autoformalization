\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:9> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:i> ; <var:x> := <var:Q1> ; <var:x> := <var:x> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Allowing --- given every positive coefficients $ <var:r> $ --- it to be that $ <var:i> = <var:r> $ prior to the execution of this list of commands , it follows that we have $ <var:x> = <nat:4> \times <var:r> + <nat:9> $ when series of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:r> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:i> = <var:r> \land <var:Q0> = <nat:9> \} \\ <var:Q1> := <nat:4> ; \\ \{ <var:i> = <var:r> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> \times <var:r> \} \\ <var:x> := <var:Q1> ; \\ \{ <var:i> = <var:r> \land <var:Q0> = <nat:9> \land <var:x> = <nat:4> \times <var:r> \} \end{eqnarray} Furthering evaluating our set of instructions produces : \begin{eqnarray} <var:x> := <var:x> + <var:Q0> \\ \{ <var:i> = <var:r> \land <var:x> = <nat:4> \times <var:r> + <nat:9> \} \end{eqnarray} Utilizing standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:9> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:i> ; <var:x> := <var:Q1> ; <var:x> := <var:x> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:i> = <var:r> }} <def:poly> {{ <var:x> = <nat:4> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:Q0> = <nat:9> /\ <var:x> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:x> = <nat:4> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 