\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:n1> := <var:F> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:9> ; <var:e> := <var:n1> <var:e> := <var:e> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- letting positive integers $ <var:d> $ --- it to be that $ <var:F> = <var:d> $ ahead of the evaluation of this series of instructions , then $ <var:e> = <nat:9> \times <var:d> + <nat:7> $ when code has terminated . \end{theorem} \begin{proof} The argument for our list of commands can be done with usual Hoare logic . Moving on to the next step , we have \verb | { <var:F> = <var:d> } <var:n1> := <var:F> { <var:F> = <var:d> \land <var:n1> = <var:d> } | , \verb | { <var:F> = <var:d> \land <var:n1> = <var:d> } <var:n0> := <nat:7> { <var:F> = <var:d> \land <var:n1> = <var:d> \land <var:n0> = <nat:7> } | , \verb | { <var:F> = <var:d> \land <var:n1> = <var:d> \land <var:n0> = <nat:7> } <var:n1> := <var:n1> * <nat:9> { <var:F> = <var:d> \land <var:n1> = <nat:9> \cdot <var:d> \land <var:n0> = <nat:7> } | , \verb | { <var:F> = <var:d> \land <var:n1> = <nat:9> \cdot <var:d> \land <var:n0> = <nat:7> } <var:e> := <var:n1{ <var:F> = <var:d> \land <var:n0> = <nat:7> \land <var:e> = <nat:9> \cdot <var:d> } | and \verb | { <var:F> = <var:d> \land <var:n0> = <nat:7> \land <var:e> = <nat:9> \cdot <var:d> } <var:e> := <var:e> + <var:n0{ <var:F> = <var:d> \land <var:e> = <nat:9> \cdot <var:d> + <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:F> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:9> ; <var:e> := <var:n1> <var:e> := <var:e> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:F> = <var:d> }} <def:poly> {{ <var:e> = <nat:9> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:n1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:n1> = <var:d> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:n1> = <nat:9> * <var:d> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:n0> = <nat:7> /\ <var:e> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:e> = <nat:9> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 