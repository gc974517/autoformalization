\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:2> ; <var:G> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given some positive integer coefficients $ <var:I> $ , that we have $ <var:F> = <var:I> $ ahead of evaluating our set of instructions , it follows that we have $ <var:G> = <nat:2> $ when segment of code has finished executing . \end{theorem} \begin{proof} The proof of this list of instructions can be seen by usual Hoare reasoning . Honing in on the next bit of code contained in the set of commands , the variable assignmet line \verb | <var:C0> := <nat:2> ; | . This redefines the precondition $ \{ <var:F> = <var:I> \} $ into the postcondition $ \{ <var:F> = <var:I> \land <var:C0> = <nat:2> \} $ . Focusing on the proceeding statement in our set of commands , the code \verb | <var:G> := <var:C0> | . This code moves the condition $ \{ <var:F> = <var:I> \land <var:C0> = <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:I> \land <var:G> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:G> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:F> = <var:I> }} <def:poly> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 