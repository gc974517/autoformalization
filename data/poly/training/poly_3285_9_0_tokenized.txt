\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:O> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:O> ; <var:a2> := <var:a2> * <var:O> ; <var:E> := <var:a2> ; <var:E> := <var:E> + <var:a1> ; <var:E> := <var:E> + <var:a0> \end{verbatim} Given --- taking $ <var:C> $ --- it to be that $ <var:O> = <var:C> $ before evaluating the set of commands it follows that we have $ <var:E> = <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:O> = <var:C> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \} \\ <var:a1> := <nat:4> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} \\ <var:a1> := <var:a1> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \} \\ <var:a2> := <nat:1> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:a2> = <nat:1> \} \\ <var:a2> := <var:a2> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:a2> = <nat:1> \cdot <var:C> \} \\ <var:a2> := <var:a2> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:a2> = <nat:1> \cdot <var:C> ^ <nat:2> \} \\ <var:E> := <var:a2> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:E> = <nat:1> \cdot <var:C> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:a1> ; \\ \{ <var:O> = <var:C> \land <var:a0> = <nat:4> \land <var:E> = <nat:1> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> \} \\ <var:E> := <var:E> + <var:a0> \\ \{ <var:O> = <var:C> \land <var:E> = <nat:1> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:O> = <var:C> }} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:O> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:O> ; <var:a2> := <var:a2> * <var:O> ; <var:E> := <var:a2> ; <var:E> := <var:E> + <var:a1> ; <var:E> := <var:E> + <var:a0> {{ <var:E> = <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:a2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:a2> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:a2> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:E> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:a0> = <nat:4> /\ <var:E> = <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:E> = <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 