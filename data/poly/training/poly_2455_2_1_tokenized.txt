\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:4> ; <var:h> := <var:d0> \end{verbatim} Assume --- for every $ <var:D> $ --- it to be that $ <var:L> = <var:D> $ before the execution of the series of instructions it holds that $ <var:h> = <nat:4> $ after list of commands exits . \end{theorem} \begin{proof} The course of logic for this set of commands can be demonstrated by Hoare reasoning . Moving on to the next step , we see \begin{eqnarray} \{ <var:L> = <var:D> \} \, <var:d0> := <nat:4> \, \{ <var:L> = <var:D> \land <var:d0> = <nat:4> \} \\ \{ <var:L> = <var:D> \land <var:d0> = <nat:4> \} \, <var:h> := <var:d0\, \{ <var:L> = <var:D> \land <var:h> = <nat:4> \} \end{eqnarray} This is ensured through the variable binding inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:L> = <var:D> }} <var:d0> := <nat:4> ; <var:h> := <var:d0> {{ <var:h> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:h> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 