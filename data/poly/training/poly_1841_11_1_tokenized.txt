\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o1> := <var:n> ; <var:o2> := <var:o1> * <var:n> ; <var:o3> := <var:o2> * <var:n> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:2> ; <var:x> := <var:o3> <var:x> := <var:x> + <var:o2> <var:x> := <var:x> + <var:o1> <var:x> := <var:x> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allowing $ <var:n> = <var:l> $ ahead of the execution of our code it holds that we see $ <var:x> = <nat:2> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:6> \cdot <var:l> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions can be accomplished through typical Hoare reasoning . Keeping momentum , we have \verb | { <var:n> = <var:l> } <var:o1> := <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> } | . This is ensured with the assignment rule obtained from usual Hoare techniques . Advancing to the subsequent statements in the program , we see \verb | { <var:n> = <var:l> } <var:o1> := <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> } | , \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> } <var:o2> := <var:o1> * <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> } | , \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> } <var:o3> := <var:o2> * <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> \land <var:o3> = <var:l> ^ <nat:3> } | and \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> \land <var:o3> = <var:l> ^ <nat:3> } <var:o0> := <nat:5> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> \land <var:o3> = <var:l> ^ <nat:3> \land <var:o0> = <nat:5> } | . Honing in on the upcoming bits of codeseen in our code , we have \verb | { <var:n> = <var:l> } <var:o1> := <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> } | , \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> } <var:o2> := <var:o1> * <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> } | , \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> } <var:o3> := <var:o2> * <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> \land <var:o3> = <var:l> ^ <nat:3> } | and \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> \land <var:o3> = <var:l> ^ <nat:3> } <var:o0> := <nat:5> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> \land <var:o3> = <var:l> ^ <nat:3> \land <var:o0> = <nat:5> } | . Observing the next commands in our series of instructions , we have \verb | { <var:n> = <var:l> } <var:o1> := <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> } | and \verb | { <var:n> = <var:l> \land <var:o1> = <var:l> } <var:o2> := <var:o1> * <var:n> { <var:n> = <var:l> \land <var:o1> = <var:l> \land <var:o2> = <var:l> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:n> ; <var:o2> := <var:o1> * <var:n> ; <var:o3> := <var:o2> * <var:n> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:2> ; <var:x> := <var:o3> <var:x> := <var:x> + <var:o2> <var:x> := <var:x> + <var:o1> <var:x> := <var:x> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <def:poly> {{ <var:x> = <nat:2> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <var:l> /\ <var:o2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <var:l> /\ <var:o2> = <var:l> ^ <nat:2> /\ <var:o3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <var:l> /\ <var:o2> = <var:l> ^ <nat:2> /\ <var:o3> = <var:l> ^ <nat:3> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <nat:6> * <var:l> /\ <var:o2> = <var:l> ^ <nat:2> /\ <var:o3> = <var:l> ^ <nat:3> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <nat:6> * <var:l> /\ <var:o2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:o3> = <var:l> ^ <nat:3> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <nat:6> * <var:l> /\ <var:o2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:l> ^ <nat:3> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <nat:6> * <var:l> /\ <var:o2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:o0> = <nat:5> /\ <var:x> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o1> = <nat:6> * <var:l> /\ <var:o0> = <nat:5> /\ <var:x> = <nat:2> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:o0> = <nat:5> /\ <var:x> = <nat:2> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:x> = <nat:2> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 