\begin{document} \begin{theorem} Consider the following program as \begin{verbatim} <var:e1> := <var:X> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:1> ; <var:M> := <var:e1> <var:M> := <var:M> + <var:e0> \end{verbatim} Given given every $ <var:g> $ that $ <var:X> = <var:g> $ prior to evaluating our set of commands , then we have $ <var:M> = <nat:1> \times <var:g> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be accomplished with the following decorated set of commands . \begin{eqnarray} \{ <var:X> = <var:g> \} \\ <var:e1> := <var:X> ; \\ \{ <var:X> = <var:g> \land <var:e1> = <var:g> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:X> = <var:g> \land <var:e1> = <var:g> \land <var:e0> = <nat:5> \} \\ <var:e1> := <var:e1> * <nat:1> ; \\ \{ <var:X> = <var:g> \land <var:e1> = <nat:1> * <var:g> \land <var:e0> = <nat:5> \} \\ <var:M> := <var:e1> \\ \{ <var:X> = <var:g> \land <var:e0> = <nat:5> \land <var:M> = <nat:1> * <var:g> \} \\ <var:M> := <var:M> + <var:e0> \\ \{ <var:X> = <var:g> \land <var:M> = <nat:1> * <var:g> + <nat:5> \} \end{eqnarray} The application of typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:X> = <var:g> }} <var:e1> := <var:X> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:1> ; <var:M> := <var:e1> <var:M> := <var:M> + <var:e0> {{ <var:M> = <nat:1> * <var:g> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:e1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:e1> = <var:g> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:e1> = <nat:1> * <var:g> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:e0> = <nat:5> /\ <var:M> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:M> = <nat:1> * <var:g> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 