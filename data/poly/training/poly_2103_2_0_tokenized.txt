\begin{document} \begin{theorem} We define a series of commands such that \begin{verbatim} <var:Y0> := <nat:9> ; <var:j> := <var:Y0> \end{verbatim} Allow that we have $ <var:I> = <var:B> $ prior to interpreting this set of commands then we see $ <var:j> = <nat:9> $ once list of commands finishes . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:I> = <var:B> \} \\ <var:Y0> := <nat:9> ; \\ \{ <var:I> = <var:B> \land <var:Y0> = <nat:9> \} \\ <var:j> := <var:Y0> \\ \{ <var:I> = <var:B> \land <var:j> = <nat:9> \} \end{eqnarray} Therefore , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:I> = <var:B> }} <var:Y0> := <nat:9> ; <var:j> := <var:Y0> {{ <var:j> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:j> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 