\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:1> + <var:v> * <var:x> ; <var:v> := <nat:3> + <var:v> * <var:x> ; <var:v> := <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:x> = <var:V> $ --- given all whole numbers $ <var:V> $ --- prior to the evaluation of the set of instructions then we have $ <var:v> = <nat:1> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> $ after code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:V> \} \\ <var:v> := <nat:1> ; \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> \} \\ <var:v> := <nat:4> + <var:v> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> * <var:V> + <nat:4> \} \\ <var:v> := <nat:4> + <var:v> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> \} \\ <var:v> := <nat:1> + <var:v> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> \} \\ <var:v> := <nat:3> + <var:v> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> \} \\ <var:v> := <var:v> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + \} \\ <var:v> := <nat:2> + <var:v> * <var:x> \\ \{ <var:x> = <var:V> \land <var:v> = <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:1> + <var:v> * <var:x> ; <var:v> := <nat:3> + <var:v> * <var:x> ; <var:v> := <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:x> = <var:V> }} <def:poly> {{ <var:v> = <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:v> = <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 