\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <nat:1> + <var:c> * <var:U> ; <var:c> := <var:c> * <var:U> ; <var:c> := <nat:2> + <var:c> * <var:U> ; <var:c> := <var:c> * <var:U> ; <var:c> := <nat:4> + <var:c> * <var:U> ; <var:c> := <nat:2> + <var:c> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:U> = <var:u> $ before evaluating our series of instructions , it holds that $ <var:c> = <nat:3> \cdot <var:u> ^ <nat:6> + <nat:1> \cdot <var:u> ^ <nat:5> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> + <nat:2> $ once list of instructions has executed . \end{theorem} \begin{proof} The course of logic for our list of commands is demonstrated with typical Hoare reasoning . After , \begin{verbatim} { <var:U> = <var:u> } <var:c> := <nat:3> { <var:U> = <var:u> \land <var:c> = <nat:3> } { <var:U> = <var:u> \land <var:c> = <nat:3> } <var:c> := <nat:1> + <var:c> * <var:U> { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> + <nat:1> } { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> + <nat:1> } <var:c> := <var:c> * <var:U> { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + } { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + } <var:c> := <nat:2> + <var:c> * <var:U> { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:2> } { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:2> } <var:c> := <var:c> * <var:U> { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> + } { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> + } <var:c> := <nat:4> + <var:c> * <var:U> { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> } { <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> } <var:c> := <nat:2> + <var:c> * <var:U{ <var:U> = <var:u> \land <var:c> = <nat:3> \cdot <var:u> ^ <nat:6> + <nat:1> \cdot <var:u> ^ <nat:5> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:3> ; <var:c> := <nat:1> + <var:c> * <var:U> ; <var:c> := <var:c> * <var:U> ; <var:c> := <nat:2> + <var:c> * <var:U> ; <var:c> := <var:c> * <var:U> ; <var:c> := <nat:4> + <var:c> * <var:U> ; <var:c> := <nat:2> + <var:c> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:U> = <var:u> }} <def:poly> {{ <var:c> = <nat:3> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:c> = <nat:3> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 