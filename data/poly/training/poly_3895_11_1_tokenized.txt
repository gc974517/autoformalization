\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:P1> := <var:d> ; <var:P2> := <var:P1> * <var:d> ; <var:P3> := <var:P2> * <var:d> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:5> ; <var:v> := <var:P3> <var:v> := <var:v> + <var:P2> <var:v> := <var:v> + <var:P1> <var:v> := <var:v> + <var:P0> \end{verbatim} Allowing given every whole numbers $ <var:p> $ that we have $ <var:d> = <var:p> $ ahead of running our list of instructions , it follows that $ <var:v> = <nat:5> \cdot <var:p> ^ <nat:3> + <nat:5> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:d> = <var:p> \} \\ <var:P1> := <var:d> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <var:p> \} \\ <var:P2> := <var:P1> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <var:p> \land <var:P2> = <var:p> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <var:p> \land <var:P2> = <var:p> ^ <nat:2> \land <var:P3> = <var:p> ^ <nat:3> \} \\ <var:P0> := <nat:6> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <var:p> \land <var:P2> = <var:p> ^ <nat:2> \land <var:P3> = <var:p> ^ <nat:3> \land <var:P0> = <nat:6> \} \\ <var:P1> := <var:P1> * <nat:9> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <nat:9> * <var:p> \land <var:P2> = <var:p> ^ <nat:2> \land <var:P3> = <var:p> ^ <nat:3> \land <var:P0> = <nat:6> \} \\ <var:P2> := <var:P2> * <nat:5> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <nat:9> * <var:p> \land <var:P2> = <nat:5> * <var:p> ^ <nat:2> \land <var:P3> = <var:p> ^ <nat:3> \land <var:P0> = <nat:6> \} \\ <var:P3> := <var:P3> * <nat:5> ; \\ \{ <var:d> = <var:p> \land <var:P1> = <nat:9> * <var:p> \land <var:P2> = <nat:5> * <var:p> ^ <nat:2> \land <var:P3> = <nat:5> * <var:p> ^ <nat:3> \land <var:P0> = <nat:6> \} \\ <var:v> := <var:P3> \\ \{ <var:d> = <var:p> \land <var:P1> = <nat:9> * <var:p> \land <var:P2> = <nat:5> * <var:p> ^ <nat:2> \land <var:P0> = <nat:6> \land <var:v> = <nat:5> * <var:p> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:P2> \\ \{ <var:d> = <var:p> \land <var:P1> = <nat:9> * <var:p> \land <var:P0> = <nat:6> \land <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:P1> \\ \{ <var:d> = <var:p> \land <var:P0> = <nat:6> \land <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> \} \\ <var:v> := <var:v> + <var:P0> \\ \{ <var:d> = <var:p> \land <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:6> \} \end{eqnarray} Hence , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:d> = <var:p> }} <var:P1> := <var:d> ; <var:P2> := <var:P1> * <var:d> ; <var:P3> := <var:P2> * <var:d> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:5> ; <var:v> := <var:P3> <var:v> := <var:v> + <var:P2> <var:v> := <var:v> + <var:P1> <var:v> := <var:v> + <var:P0> {{ <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <var:p> /\ <var:P2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <var:p> /\ <var:P2> = <var:p> ^ <nat:2> /\ <var:P3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <var:p> /\ <var:P2> = <var:p> ^ <nat:2> /\ <var:P3> = <var:p> ^ <nat:3> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <nat:9> * <var:p> /\ <var:P2> = <var:p> ^ <nat:2> /\ <var:P3> = <var:p> ^ <nat:3> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <nat:9> * <var:p> /\ <var:P2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:P3> = <var:p> ^ <nat:3> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <nat:9> * <var:p> /\ <var:P2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <nat:9> * <var:p> /\ <var:P2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:P0> = <nat:6> /\ <var:v> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P1> = <nat:9> * <var:p> /\ <var:P0> = <nat:6> /\ <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:P0> = <nat:6> /\ <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:v> = <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 