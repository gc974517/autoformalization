\begin{document} \begin{theorem} Define a code in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:p> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:p> ; <var:q2> := <var:q2> * <var:p> ; <var:E> := <var:q2> ; <var:E> := <var:E> + <var:q1> ; <var:E> := <var:E> + <var:q0> \end{verbatim} Allowing that $ <var:p> = <var:f> $ ahead of evaluating the program it must be that $ <var:E> = <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this series of commands is done through usual Hoare logic . Moving on to the next step , \begin{eqnarray} \{ <var:p> = <var:f> \} \, <var:q0> := <nat:3> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \} \end{eqnarray} Advancing to the next step , we see \begin{eqnarray} \{ <var:p> = <var:f> \} \, <var:q0> := <nat:3> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \} \\ \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \} \, <var:q1> := <nat:4> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \} \\ \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \} \, <var:q1> := <var:q1> * <var:p> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \} \\ \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \} \, <var:q2> := <nat:4> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \land <var:q2> = <nat:4> \} \\ \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \land <var:q2> = <nat:4> \} \, <var:q2> := <var:q2> * <var:p> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \land <var:q2> = <nat:4> \cdot <var:f> \} \\ \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \land <var:q2> = <nat:4> \cdot <var:f> \} \, <var:q2> := <var:q2> * <var:p> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \land <var:q1> = <nat:4> \cdot <var:f> \land <var:q2> = <nat:4> \cdot <var:f> ^ <nat:2> \} \end{eqnarray} Advancing , we have \begin{eqnarray} \{ <var:p> = <var:f> \} \, <var:q0> := <nat:3> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \} \end{eqnarray} Stepping forward , \begin{eqnarray} \{ <var:p> = <var:f> \} \, <var:q0> := <nat:3> \, \{ <var:p> = <var:f> \land <var:q0> = <nat:3> \} \end{eqnarray} This is deduced by the binding inference rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <var:q0> := <nat:3> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:p> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:p> ; <var:q2> := <var:q2> * <var:p> ; <var:E> := <var:q2> ; <var:E> := <var:E> + <var:q1> ; <var:E> := <var:E> + <var:q0> {{ <var:E> = <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:4> * <var:f> /\ <var:q2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:4> * <var:f> /\ <var:q2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:4> * <var:f> /\ <var:q2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:4> * <var:f> /\ <var:E> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:q0> = <nat:3> /\ <var:E> = <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:E> = <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 