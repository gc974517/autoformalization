\begin{document} \begin{theorem} Let the following set of instructions as \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:r> ; <var:k> := <var:D1> ; <var:k> := <var:k> + <var:D0> \end{verbatim} Assuming it to be that $ <var:r> = <var:z> $ prior to executing this code segment then we have $ <var:k> = <nat:6> \cdot <var:z> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for our program is demonstrated through usual Hoare reasoning . Further , the variable binding line yielding $ <nat:6> $ into $ <var:D0>$ . This command advances $ \{ <var:r> = <var:z> \} $ into the postcondition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \} $ . This is given with the assignment rule defined by Hoare logic . Advancing on , we see the assignment statement giving $ <nat:6> $ as $ <var:D1>$ . This redefines $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \} $ as the condition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \} $ . This is given using the assignment inference rule given by standard Hoare logic . Immediately following , we see the assignment code \verb | <var:D1> := <var:D1> * <var:r> ; | . This line moves the precondition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \} $ as the postcondition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:z> \} $ . This is sound through the assignment scheme defined in Hoare techniques . After , we have the variable binding statement \verb | <var:k> := <var:D1> ; | . This line advances the precondition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:z> \} $ to the postcondition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \land <var:k> = <nat:6> \times <var:z> \} $ . Shifting focus toward the next step found in our series of commands , we see the binding command \verb | <var:k> := <var:k> + <var:D0> | . This code forwards the condition $ \{ <var:r> = <var:z> \land <var:D0> = <nat:6> \land <var:k> = <nat:6> \times <var:z> \} $ to the postcondition $ \{ <var:r> = <var:z> \land <var:k> = <nat:6> \times <var:z> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:r> = <var:z> }} <var:D0> := <nat:6> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:r> ; <var:k> := <var:D1> ; <var:k> := <var:k> + <var:D0> {{ <var:k> = <nat:6> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:D0> = <nat:6> /\ <var:k> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:z> /\ <var:k> = <nat:6> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 