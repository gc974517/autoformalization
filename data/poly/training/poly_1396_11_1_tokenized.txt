\begin{document} \begin{theorem} Consider the following code segment such that \begin{verbatim} <var:V1> := <var:C> ; <var:V2> := <var:V1> * <var:C> ; <var:V3> := <var:V2> * <var:C> ; <var:V0> := <nat:6> ; <var:V1> := <var:V1> * <nat:1> ; <var:V2> := <var:V2> * <nat:4> ; <var:V3> := <var:V3> * <nat:6> ; <var:j> := <var:V3> <var:j> := <var:j> + <var:V2> <var:j> := <var:j> + <var:V1> <var:j> := <var:j> + <var:V0> \end{verbatim} Allowing it to be that $ <var:C> = <var:Z> $ prior to executing our series of commands then we see $ <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> $ after set of instructions has finished . \end{theorem} \begin{proof} The method of proof for this list of instructions can be accomplished with the below decorated list of commands . \begin{eqnarray} \{ <var:C> = <var:Z> \} \\ <var:V1> := <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <var:Z> \} \end{eqnarray} Continuing running this list of commands produces : \begin{eqnarray} <var:V2> := <var:V1> * <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <var:Z> \land <var:V2> = <var:Z> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <var:Z> \land <var:V2> = <var:Z> ^ <nat:2> \land <var:V3> = <var:Z> ^ <nat:3> \} \\ <var:V0> := <nat:6> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <var:Z> \land <var:V2> = <var:Z> ^ <nat:2> \land <var:V3> = <var:Z> ^ <nat:3> \land <var:V0> = <nat:6> \} \\ <var:V1> := <var:V1> * <nat:1> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <nat:1> * <var:Z> \land <var:V2> = <var:Z> ^ <nat:2> \land <var:V3> = <var:Z> ^ <nat:3> \land <var:V0> = <nat:6> \} \\ <var:V2> := <var:V2> * <nat:4> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <nat:1> * <var:Z> \land <var:V2> = <nat:4> * <var:Z> ^ <nat:2> \land <var:V3> = <var:Z> ^ <nat:3> \land <var:V0> = <nat:6> \} \\ <var:V3> := <var:V3> * <nat:6> ; \\ \{ <var:C> = <var:Z> \land <var:V1> = <nat:1> * <var:Z> \land <var:V2> = <nat:4> * <var:Z> ^ <nat:2> \land <var:V3> = <nat:6> * <var:Z> ^ <nat:3> \land <var:V0> = <nat:6> \} \\ <var:j> := <var:V3> \\ \{ <var:C> = <var:Z> \land <var:V1> = <nat:1> * <var:Z> \land <var:V2> = <nat:4> * <var:Z> ^ <nat:2> \land <var:V0> = <nat:6> \land <var:j> = <nat:6> * <var:Z> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:V2> \\ \{ <var:C> = <var:Z> \land <var:V1> = <nat:1> * <var:Z> \land <var:V0> = <nat:6> \land <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:V1> \\ \{ <var:C> = <var:Z> \land <var:V0> = <nat:6> \land <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> \} \\ <var:j> := <var:j> + <var:V0> \\ \{ <var:C> = <var:Z> \land <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:C> = <var:Z> }} <var:V1> := <var:C> ; <var:V2> := <var:V1> * <var:C> ; <var:V3> := <var:V2> * <var:C> ; <var:V0> := <nat:6> ; <var:V1> := <var:V1> * <nat:1> ; <var:V2> := <var:V2> * <nat:4> ; <var:V3> := <var:V3> * <nat:6> ; <var:j> := <var:V3> <var:j> := <var:j> + <var:V2> <var:j> := <var:j> + <var:V1> <var:j> := <var:j> + <var:V0> {{ <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <var:Z> /\ <var:V2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <var:Z> /\ <var:V2> = <var:Z> ^ <nat:2> /\ <var:V3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <var:Z> /\ <var:V2> = <var:Z> ^ <nat:2> /\ <var:V3> = <var:Z> ^ <nat:3> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <nat:1> * <var:Z> /\ <var:V2> = <var:Z> ^ <nat:2> /\ <var:V3> = <var:Z> ^ <nat:3> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <nat:1> * <var:Z> /\ <var:V2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:V3> = <var:Z> ^ <nat:3> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <nat:1> * <var:Z> /\ <var:V2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <nat:1> * <var:Z> /\ <var:V2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:V0> = <nat:6> /\ <var:j> = <nat:6> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V1> = <nat:1> * <var:Z> /\ <var:V0> = <nat:6> /\ <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:V0> = <nat:6> /\ <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:j> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 