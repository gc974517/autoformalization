\begin{document} \begin{theorem} Define a segment of code as \begin{verbatim} <var:b0> := <nat:6> ; <var:Y> := <var:b0> \end{verbatim} Allowing it to be that $ <var:y> = <var:W> $ prior to evaluating our series of commands it follows that we have $ <var:Y> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is accomplished with standard Hoare reasoning . After , the variable update code yielding $ <nat:6> $ toward $ <var:b0>$ . This command forwards the precondition $ \{ <var:y> = <var:W> \} $ toward $ \{ <var:y> = <var:W> \land <var:b0> = <nat:6> \} $ . This is rigorously given using the assignment law of usual Hoare logic . Taking another step toward the subsequent step found in the series of commands , we have the code \verb | <var:Y> := <var:b0> | . This forwards the condition $ \{ <var:y> = <var:W> \land <var:b0> = <nat:6> \} $ as $ \{ <var:y> = <var:W> \land <var:Y> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:y> = <var:W> }} <var:b0> := <nat:6> ; <var:Y> := <var:b0> {{ <var:Y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:Y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 