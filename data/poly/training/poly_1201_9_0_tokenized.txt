\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:Y> ; <var:r2> := <nat:5> ; <var:r2> := <var:r2> * <var:Y> ; <var:r2> := <var:r2> * <var:Y> ; <var:Q> := <var:r2> ; <var:Q> := <var:Q> + <var:r1> ; <var:Q> := <var:Q> + <var:r0> \end{verbatim} Allow it to hold that $ <var:Y> = <var:E> $ before interpreting this list of commands it must be that we see $ <var:Q> = <nat:5> \times <var:E> ^ <nat:2> + <nat:5> \times <var:E> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:E> \} \\ <var:r0> := <nat:8> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \} \\ <var:r1> := <nat:5> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \} \\ <var:r1> := <var:r1> * <var:Y> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> * <var:E> \} \\ <var:r2> := <nat:5> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> * <var:E> \land <var:r2> = <nat:5> \} \\ <var:r2> := <var:r2> * <var:Y> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> * <var:E> \land <var:r2> = <nat:5> * <var:E> \} \\ <var:r2> := <var:r2> * <var:Y> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> * <var:E> \land <var:r2> = <nat:5> * <var:E> ^ <nat:2> \} \\ <var:Q> := <var:r2> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> * <var:E> \land <var:Q> = <nat:5> * <var:E> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:r1> ; \\ \{ <var:Y> = <var:E> \land <var:r0> = <nat:8> \land <var:Q> = <nat:5> * <var:E> ^ <nat:2> + <nat:5> * <var:E> \} \\ <var:Q> := <var:Q> + <var:r0> \\ \{ <var:Y> = <var:E> \land <var:Q> = <nat:5> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:8> \} \end{eqnarray} Continuing running this series of commands results in : \begin{eqnarray} \end{eqnarray} The application of usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <var:r0> := <nat:8> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:Y> ; <var:r2> := <nat:5> ; <var:r2> := <var:r2> * <var:Y> ; <var:r2> := <var:r2> * <var:Y> ; <var:Q> := <var:r2> ; <var:Q> := <var:Q> + <var:r1> ; <var:Q> := <var:Q> + <var:r0> {{ <var:Q> = <nat:5> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:E> /\ <var:r2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:E> /\ <var:r2> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:E> /\ <var:r2> = <nat:5> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:E> /\ <var:Q> = <nat:5> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:r0> = <nat:8> /\ <var:Q> = <nat:5> * <var:E> ^ <nat:2> + <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:Q> = <nat:5> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 