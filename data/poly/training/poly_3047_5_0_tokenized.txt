\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:7> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:Q> ; <var:s> := <var:l1> ; <var:s> := <var:s> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Given that $ <var:Q> = <var:k> $ ( with some positive integer coefficients $ <var:k> $ ) prior to interpreting the code it must be that we have $ <var:s> = <nat:8> * <var:k> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:k> \} \\ <var:l0> := <nat:7> ; \\ \{ <var:Q> = <var:k> \land <var:l0> = <nat:7> \} \\ <var:l1> := <nat:8> ; \\ \{ <var:Q> = <var:k> \land <var:l0> = <nat:7> \land <var:l1> = <nat:8> \} \\ <var:l1> := <var:l1> * <var:Q> ; \\ \{ <var:Q> = <var:k> \land <var:l0> = <nat:7> \land <var:l1> = <nat:8> * <var:k> \} \\ <var:s> := <var:l1> ; \\ \{ <var:Q> = <var:k> \land <var:l0> = <nat:7> \land <var:s> = <nat:8> * <var:k> \} \\ <var:s> := <var:s> + <var:l0> \\ \{ <var:Q> = <var:k> \land <var:s> = <nat:8> * <var:k> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:7> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:Q> ; <var:s> := <var:l1> ; <var:s> := <var:s> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Q> = <var:k> }} <def:poly> {{ <var:s> = <nat:8> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:l0> = <nat:7> /\ <var:s> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:s> = <nat:8> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 