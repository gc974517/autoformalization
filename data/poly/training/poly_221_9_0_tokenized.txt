\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:9> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:W> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:W> ; <var:n2> := <var:n2> * <var:W> ; <var:S> := <var:n2> ; <var:S> := <var:S> + <var:n1> ; <var:S> := <var:S> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Given that we have $ <var:W> = <var:N> $ before running this program it follows that we have $ <var:S> = <nat:4> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:9> $ once set of instructions has executed . \end{theorem} \begin{proof} Proving correctness for this list of instructions is clear through usual Hoare reasoning . Advancing , \begin{eqnarray} \{ <var:W> = <var:N> \} \, <var:n0> := <nat:9> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \\ \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \, <var:n1> := <nat:1> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \} \end{eqnarray} This is known to be sound using the variable assignmet inference rule from typical Hoare techniques . Now , we see \begin{eqnarray} \{ <var:W> = <var:N> \} \, <var:n0> := <nat:9> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \\ \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \, <var:n1> := <nat:1> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \} \\ \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \} \, <var:n1> := <var:n1> * <var:W> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \times <var:N> \} \\ \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \times <var:N> \} \, <var:n2> := <nat:4> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \times <var:N> \land <var:n2> = <nat:4> \} \end{eqnarray} This is rigorously given using the assignment law obtained from usual Hoare reasoning . Moving forward , \begin{eqnarray} \{ <var:W> = <var:N> \} \, <var:n0> := <nat:9> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \\ \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \, <var:n1> := <nat:1> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \land <var:n1> = <nat:1> \} \end{eqnarray} Moving on to the following line of code contained in the set of commands , we have \begin{eqnarray} \{ <var:W> = <var:N> \} \, <var:n0> := <nat:9> \, \{ <var:W> = <var:N> \land <var:n0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:9> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:W> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:W> ; <var:n2> := <var:n2> * <var:W> ; <var:S> := <var:n2> ; <var:S> := <var:S> + <var:n1> ; <var:S> := <var:S> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:W> = <var:N> }} <def:poly> {{ <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:1> * <var:N> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:1> * <var:N> /\ <var:n2> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:1> * <var:N> /\ <var:n2> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:1> * <var:N> /\ <var:S> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:n0> = <nat:9> /\ <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 