\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:A1> := <var:u> ; <var:A2> := <var:A1> * <var:u> ; <var:A3> := <var:A2> * <var:u> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:2> ; <var:A3> := <var:A3> * <nat:1> ; <var:z> := <var:A3> <var:z> := <var:z> + <var:A2> <var:z> := <var:z> + <var:A1> <var:z> := <var:z> + <var:A0> \end{verbatim} Allow it to hold that $ <var:u> = <var:T> $ prior to the execution of this list of instructions , it must be that we see $ <var:z> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the series of instructions can be shown through typical Hoare reasoning . Going forward , we have \begin{verbatim} { <var:u> = <var:T> } <var:A1> := <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> } { <var:u> = <var:T> \land <var:A1> = <var:T> } <var:A2> := <var:A1> * <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> } { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> } <var:A3> := <var:A2> * <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> } { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> } <var:A0> := <nat:2> { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> \land <var:A0> = <nat:2> } { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> \land <var:A0> = <nat:2> } <var:A1> := <var:A1> * <nat:3> { <var:u> = <var:T> \land <var:A1> = <nat:3> \cdot <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> \land <var:A0> = <nat:2> } \end{verbatim} This is sound through the environment update rule in Hoare reasoning . Following , we see \begin{verbatim} { <var:u> = <var:T> } <var:A1> := <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> } { <var:u> = <var:T> \land <var:A1> = <var:T> } <var:A2> := <var:A1> * <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> } { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> } <var:A3> := <var:A2> * <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> } { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> } <var:A0> := <nat:2> { <var:u> = <var:T> \land <var:A1> = <var:T> \land <var:A2> = <var:T> ^ <nat:2> \land <var:A3> = <var:T> ^ <nat:3> \land <var:A0> = <nat:2> } \end{verbatim} Moving forward to the following statement contained in the segment of code , we see \begin{verbatim} { <var:u> = <var:T> } <var:A1> := <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> } \end{verbatim} This is deduced by the environment update scheme defined by typical Hoare techniques . Going to the next step , we see \begin{verbatim} { <var:u> = <var:T> } <var:A1> := <var:u> { <var:u> = <var:T> \land <var:A1> = <var:T> } \end{verbatim} This is shown through the variable update inference rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:u> = <var:T> }} <var:A1> := <var:u> ; <var:A2> := <var:A1> * <var:u> ; <var:A3> := <var:A2> * <var:u> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:2> ; <var:A3> := <var:A3> * <nat:1> ; <var:z> := <var:A3> <var:z> := <var:z> + <var:A2> <var:z> := <var:z> + <var:A1> <var:z> := <var:z> + <var:A0> {{ <var:z> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <var:T> /\ <var:A2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <var:T> /\ <var:A2> = <var:T> ^ <nat:2> /\ <var:A3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <var:T> /\ <var:A2> = <var:T> ^ <nat:2> /\ <var:A3> = <var:T> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <var:T> ^ <nat:2> /\ <var:A3> = <var:T> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:A3> = <var:T> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:A3> = <nat:1> * <var:T> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:A0> = <nat:2> /\ <var:z> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A0> = <nat:2> /\ <var:z> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A0> = <nat:2> /\ <var:z> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:z> = <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 