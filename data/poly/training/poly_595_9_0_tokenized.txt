\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:4> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:V> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:V> ; <var:T2> := <var:T2> * <var:V> ; <var:n> := <var:T2> ; <var:n> := <var:n> + <var:T1> ; <var:n> := <var:n> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Allow that we have $ <var:V> = <var:e> $ ahead of interpreting this list of commands , then $ <var:n> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is demonstrated with typical Hoare techniques . After , we see \begin{verbatim} { <var:V> = <var:e> } <var:T0> := <nat:4> { <var:V> = <var:e> \land <var:T0> = <nat:4> } { <var:V> = <var:e> \land <var:T0> = <nat:4> } <var:T1> := <nat:1> { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> } \end{verbatim} This is guaranteed through the assignment inference rule found in Hoare logic . Going to the next step , we have \begin{verbatim} { <var:V> = <var:e> } <var:T0> := <nat:4> { <var:V> = <var:e> \land <var:T0> = <nat:4> } { <var:V> = <var:e> \land <var:T0> = <nat:4> } <var:T1> := <nat:1> { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> } { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> } <var:T1> := <var:T1> * <var:V> { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> \times <var:e> } { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> \times <var:e> } <var:T2> := <nat:2> { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> \times <var:e> \land <var:T2> = <nat:2> } \end{verbatim} This is known to be sound through the environment update law given in typical Hoare techniques . Jumping to the next pieces of code contained in our code segment , we have \begin{verbatim} { <var:V> = <var:e> } <var:T0> := <nat:4> { <var:V> = <var:e> \land <var:T0> = <nat:4> } { <var:V> = <var:e> \land <var:T0> = <nat:4> } <var:T1> := <nat:1> { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> } { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> } <var:T1> := <var:T1> * <var:V> { <var:V> = <var:e> \land <var:T0> = <nat:4> \land <var:T1> = <nat:1> \times <var:e> } \end{verbatim} This is given using the inference rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:4> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:V> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:V> ; <var:T2> := <var:T2> * <var:V> ; <var:n> := <var:T2> ; <var:n> := <var:n> + <var:T1> ; <var:n> := <var:n> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:V> = <var:e> }} <def:poly> {{ <var:n> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:1> * <var:e> /\ <var:n> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:T0> = <nat:4> /\ <var:n> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:n> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 