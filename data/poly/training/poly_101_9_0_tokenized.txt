\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:8> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:f> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:f> ; <var:h2> := <var:h2> * <var:f> ; <var:K> := <var:h2> ; <var:K> := <var:K> + <var:h1> ; <var:K> := <var:K> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:f> = <var:N> $ ahead of the evaluation of our set of instructions it follows that we have $ <var:K> = <nat:7> \times <var:N> ^ <nat:2> + <nat:9> \times <var:N> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is clear by standard Hoare reasoning . Now , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:N> \} & <var:h0> := <nat:8> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \} \\ \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \} & <var:h1> := <nat:9> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \} \end{tabular} This is guaranteed by the variable update law given by typical Hoare techniques . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:N> \} & <var:h0> := <nat:8> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \} \end{tabular} This is known to be sound with the variable assignmet inference rule defined by usual Hoare techniques . Paying attention to the subsequent statements found in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:N> \} & <var:h0> := <nat:8> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \} \\ \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \} & <var:h1> := <nat:9> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \} \\ \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \} & <var:h1> := <var:h1> * <var:f> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \} \\ \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \} & <var:h2> := <nat:7> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \land <var:h2> = <nat:7> \} \\ \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \land <var:h2> = <nat:7> \} & <var:h2> := <var:h2> * <var:f> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \land <var:h2> = <nat:7> \cdot <var:N> \} \\ \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \land <var:h2> = <nat:7> \cdot <var:N> \} & <var:h2> := <var:h2> * <var:f> & \{ <var:f> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:9> \cdot <var:N> \land <var:h2> = <nat:7> \cdot <var:N> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:8> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:f> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:f> ; <var:h2> := <var:h2> * <var:f> ; <var:K> := <var:h2> ; <var:K> := <var:K> + <var:h1> ; <var:K> := <var:K> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:f> = <var:N> }} <def:poly> {{ <var:K> = <nat:7> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:9> * <var:N> /\ <var:h2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:9> * <var:N> /\ <var:h2> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:9> * <var:N> /\ <var:h2> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:9> * <var:N> /\ <var:K> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:h0> = <nat:8> /\ <var:K> = <nat:7> * <var:N> ^ <nat:2> + <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:K> = <nat:7> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 