\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:r> ; <var:A2> := <var:A1> * <var:r> ; <var:A3> := <var:A2> * <var:r> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:7> ; <var:A2> := <var:A2> * <nat:5> ; <var:A3> := <var:A3> * <nat:7> ; <var:T> := <var:A3> <var:T> := <var:T> + <var:A2> <var:T> := <var:T> + <var:A1> <var:T> := <var:T> + <var:A0> \end{verbatim} Given $ <var:r> = <var:k> $ before interpreting the series of commands it holds that we see $ <var:T> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:5> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:8> $ . \end{theorem} \begin{proof} We can see that this decorated series of commands . \begin{eqnarray} \{ <var:r> = <var:k> \} \\ <var:A1> := <var:r> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <var:k> \} \\ <var:A2> := <var:A1> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <var:k> \land <var:A2> = <var:k> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <var:k> \land <var:A2> = <var:k> ^ <nat:2> \land <var:A3> = <var:k> ^ <nat:3> \} \\ <var:A0> := <nat:8> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <var:k> \land <var:A2> = <var:k> ^ <nat:2> \land <var:A3> = <var:k> ^ <nat:3> \land <var:A0> = <nat:8> \} \\ <var:A1> := <var:A1> * <nat:7> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <nat:7> * <var:k> \land <var:A2> = <var:k> ^ <nat:2> \land <var:A3> = <var:k> ^ <nat:3> \land <var:A0> = <nat:8> \} \\ <var:A2> := <var:A2> * <nat:5> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <nat:7> * <var:k> \land <var:A2> = <nat:5> * <var:k> ^ <nat:2> \land <var:A3> = <var:k> ^ <nat:3> \land <var:A0> = <nat:8> \} \\ <var:A3> := <var:A3> * <nat:7> ; \\ \{ <var:r> = <var:k> \land <var:A1> = <nat:7> * <var:k> \land <var:A2> = <nat:5> * <var:k> ^ <nat:2> \land <var:A3> = <nat:7> * <var:k> ^ <nat:3> \land <var:A0> = <nat:8> \} \\ <var:T> := <var:A3> \\ \{ <var:r> = <var:k> \land <var:A1> = <nat:7> * <var:k> \land <var:A2> = <nat:5> * <var:k> ^ <nat:2> \land <var:A0> = <nat:8> \land <var:T> = <nat:7> * <var:k> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:A2> \\ \{ <var:r> = <var:k> \land <var:A1> = <nat:7> * <var:k> \land <var:A0> = <nat:8> \land <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:A1> \\ \{ <var:r> = <var:k> \land <var:A0> = <nat:8> \land <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:7> * <var:k> \} \\ <var:T> := <var:T> + <var:A0> \\ \{ <var:r> = <var:k> \land <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:8> \} \end{eqnarray} Using Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <var:A1> := <var:r> ; <var:A2> := <var:A1> * <var:r> ; <var:A3> := <var:A2> * <var:r> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:7> ; <var:A2> := <var:A2> * <nat:5> ; <var:A3> := <var:A3> * <nat:7> ; <var:T> := <var:A3> <var:T> := <var:T> + <var:A2> <var:T> := <var:T> + <var:A1> <var:T> := <var:T> + <var:A0> {{ <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <var:k> /\ <var:A2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <var:k> /\ <var:A2> = <var:k> ^ <nat:2> /\ <var:A3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <var:k> /\ <var:A2> = <var:k> ^ <nat:2> /\ <var:A3> = <var:k> ^ <nat:3> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <nat:7> * <var:k> /\ <var:A2> = <var:k> ^ <nat:2> /\ <var:A3> = <var:k> ^ <nat:3> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <nat:7> * <var:k> /\ <var:A2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:A3> = <var:k> ^ <nat:3> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <nat:7> * <var:k> /\ <var:A2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:A3> = <nat:7> * <var:k> ^ <nat:3> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <nat:7> * <var:k> /\ <var:A2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:A0> = <nat:8> /\ <var:T> = <nat:7> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A1> = <nat:7> * <var:k> /\ <var:A0> = <nat:8> /\ <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A0> = <nat:8> /\ <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:T> = <nat:7> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 