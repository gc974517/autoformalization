\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:n> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:3> ; <var:w> := <var:P1> <var:w> := <var:w> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Allowing that $ <var:n> = <var:I> $ ( given some whole numbers $ <var:I> $ ) before running the series of instructions , it holds that we see $ <var:w> = <nat:3> \times <var:I> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be shown with standard Hoare techniques . Stepping through , the variable assignmet statement yielding $ <var:n> $ toward $ <var:P1>$ . This redefines $ \{ <var:n> = <var:I> \} $ into $ \{ <var:n> = <var:I> \land <var:P1> = <var:I> \} $ . This is shown with the assignment scheme found in usual Hoare techniques . Taking a look at the subsequent step found in our set of instructions , the environment update statement \verb | <var:P0> := <nat:1> ; | . This redefines $ \{ <var:n> = <var:I> \land <var:P1> = <var:I> \} $ as the condition $ \{ <var:n> = <var:I> \land <var:P1> = <var:I> \land <var:P0> = <nat:1> \} $ . This is guaranteed by the assignment law given by Hoare techniques . Focusing on the proceeding step seen in the list of instructions , we have the variable assignmet statement binding $ <var:P1> * <nat:3> $ to $ <var:P1>$ . This advances $ \{ <var:n> = <var:I> \land <var:P1> = <var:I> \land <var:P0> = <nat:1> \} $ into $ \{ <var:n> = <var:I> \land <var:P1> = <nat:3> * <var:I> \land <var:P0> = <nat:1> \} $ . Moving forward to the next step , we see the variable binding command binding $ <var:P1$ toward $ <var:w>$ . This command takes $ \{ <var:n> = <var:I> \land <var:P1> = <nat:3> * <var:I> \land <var:P0> = <nat:1> \} $ to the postcondition $ \{ <var:n> = <var:I> \land <var:P0> = <nat:1> \land <var:w> = <nat:3> * <var:I> \} $ . This is rigorously given with the assignment inference rule obtained from usual Hoare techniques . Moving on to the upcoming piece of code contained in our set of commands , we have the variable update statement assigning $ <var:w> + <var:P0$ to $ <var:w>$ . This forwards the condition $ \{ <var:n> = <var:I> \land <var:P0> = <nat:1> \land <var:w> = <nat:3> * <var:I> \} $ to the postcondition $ \{ <var:n> = <var:I> \land <var:w> = <nat:3> * <var:I> + <nat:1> \} $ . This is guaranteed using the assignment rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:n> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:3> ; <var:w> := <var:P1> <var:w> := <var:w> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <def:poly> {{ <var:w> = <nat:3> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:P1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:P1> = <var:I> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:P1> = <nat:3> * <var:I> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:P0> = <nat:1> /\ <var:w> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:w> = <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 