\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:Q> ; <var:P2> := <nat:2> ; <var:P2> := <var:P2> * <var:Q> ; <var:P2> := <var:P2> * <var:Q> ; <var:T> := <var:P2> ; <var:T> := <var:T> + <var:P1> ; <var:T> := <var:T> + <var:P0> \end{verbatim} Allowing $ <var:Q> = <var:v> $ before running this list of commands then $ <var:T> = <nat:2> \times <var:v> ^ <nat:2> + <nat:8> \times <var:v> + <nat:8> $ when segment of code executes . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:Q> = <var:v> \} \\ <var:P0> := <nat:8> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \} \\ <var:P1> := <nat:8> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:P1> = <nat:8> \} \\ <var:P1> := <var:P1> * <var:Q> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:P1> = <nat:8> \times <var:v> \} \\ <var:P2> := <nat:2> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:P1> = <nat:8> \times <var:v> \land <var:P2> = <nat:2> \} \\ <var:P2> := <var:P2> * <var:Q> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:P1> = <nat:8> \times <var:v> \land <var:P2> = <nat:2> \times <var:v> \} \\ <var:P2> := <var:P2> * <var:Q> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:P1> = <nat:8> \times <var:v> \land <var:P2> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:T> := <var:P2> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:P1> = <nat:8> \times <var:v> \land <var:T> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:P1> ; \\ \{ <var:Q> = <var:v> \land <var:P0> = <nat:8> \land <var:T> = <nat:2> \times <var:v> ^ <nat:2> + <nat:8> \times <var:v> \} \\ <var:T> := <var:T> + <var:P0> \\ \{ <var:Q> = <var:v> \land <var:T> = <nat:2> \times <var:v> ^ <nat:2> + <nat:8> \times <var:v> + <nat:8> \} \end{eqnarray} Given the preceding argument , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Q> = <var:v> }} <var:P0> := <nat:8> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:Q> ; <var:P2> := <nat:2> ; <var:P2> := <var:P2> * <var:Q> ; <var:P2> := <var:P2> * <var:Q> ; <var:T> := <var:P2> ; <var:T> := <var:T> + <var:P1> ; <var:T> := <var:T> + <var:P0> {{ <var:T> = <nat:2> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:8> * <var:v> /\ <var:P2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:8> * <var:v> /\ <var:P2> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:8> * <var:v> /\ <var:P2> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:8> * <var:v> /\ <var:T> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:P0> = <nat:8> /\ <var:T> = <nat:2> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:T> = <nat:2> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 