\begin{document} \begin{theorem} Consider a series of commands such that \begin{verbatim} <var:i0> := <nat:4> ; <var:K> := <var:i0> \end{verbatim} Allowing it to hold that $ <var:T> = <var:A> $ before the execution of our set of instructions , then we see $ <var:K> = <nat:4> $ . \end{theorem} \begin{proof} The argument for our code can be accomplished through usual Hoare techniques . Now , \verb | { <var:T> = <var:A> } <var:i0> := <nat:4> { <var:T> = <var:A> \land <var:i0> = <nat:4> } | . Jumping to the proceeding line seen in our list of instructions , we see \verb | { <var:T> = <var:A> } <var:i0> := <nat:4> { <var:T> = <var:A> \land <var:i0> = <nat:4> } | . This is shown to be logically sound with the scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:T> = <var:A> }} <var:i0> := <nat:4> ; <var:K> := <var:i0> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 