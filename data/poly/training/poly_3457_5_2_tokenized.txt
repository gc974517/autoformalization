\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <nat:2> + <var:i> * <var:C> ; <var:i> := <var:i> * <var:C> ; <var:i> := <var:i> * <var:C> ; <var:i> := <nat:2> + <var:i> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Allow that we have $ <var:C> = <var:d> $ before the evaluation of this program , it holds that we have $ <var:i> = <nat:1> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:2> $ once code terminates . \end{theorem} \begin{proof} The proof of this segment of code is evident using Hoare logic . Moving on to the following commands found in our program , \begin{eqnarray} \{ <var:C> = <var:d> \} \, <var:i> := <nat:1> \, \{ <var:C> = <var:d> \land <var:i> = <nat:1> \} \\ \{ <var:C> = <var:d> \land <var:i> = <nat:1> \} \, <var:i> := <nat:2> + <var:i> * <var:C> \, \{ <var:C> = <var:d> \land <var:i> = <nat:1> \times <var:d> + <nat:2> \} \end{eqnarray} Stepping forward , we have \begin{eqnarray} \{ <var:C> = <var:d> \} \, <var:i> := <nat:1> \, \{ <var:C> = <var:d> \land <var:i> = <nat:1> \} \end{eqnarray} This is shown to be logically sound by the binding law from Hoare techniques . Stepping forward , we see \begin{eqnarray} \{ <var:C> = <var:d> \} \, <var:i> := <nat:1> \, \{ <var:C> = <var:d> \land <var:i> = <nat:1> \} \end{eqnarray} Observing the proceeding statement found in the list of commands , we have \begin{eqnarray} \{ <var:C> = <var:d> \} \, <var:i> := <nat:1> \, \{ <var:C> = <var:d> \land <var:i> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:1> ; <var:i> := <nat:2> + <var:i> * <var:C> ; <var:i> := <var:i> * <var:C> ; <var:i> := <var:i> * <var:C> ; <var:i> := <nat:2> + <var:i> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:C> = <var:d> }} <def:poly> {{ <var:i> = <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:i> = <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:i> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:i> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:i> = <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 