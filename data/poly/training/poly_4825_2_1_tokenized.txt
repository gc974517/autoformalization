\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:4> ; <var:f> := <var:q0> \end{verbatim} Assuming $ <var:z> = <var:O> $ , for positive numbers $ <var:O> $ , ahead of interpreting our code segment , then we have $ <var:f> = <nat:4> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for our list of instructions can be accomplished using typical Hoare reasoning . Considering the subsequent bit of code found in our program , we see the variable assignmet line assigning $ <nat:4> $ to $ <var:q0>$ . This takes the precondition $ \{ <var:z> = <var:O> \} $ into $ \{ <var:z> = <var:O> \land <var:q0> = <nat:4> \} $ . This is shown by the assignment rule obtained from standard Hoare techniques . Advancing to the next piece of code seen in the code , we have the binding code \verb | <var:f> := <var:q0> | . This command transfers the precondition $ \{ <var:z> = <var:O> \land <var:q0> = <nat:4> \} $ as $ \{ <var:z> = <var:O> \land <var:f> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:z> = <var:O> }} <var:q0> := <nat:4> ; <var:f> := <var:q0> {{ <var:f> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:f> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 