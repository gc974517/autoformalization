\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:2> ; <var:q> := <var:d0> \end{verbatim} Assume $ <var:J> = <var:s> $ ahead of interpreting our set of commands it follows that $ <var:q> = <nat:2> $ when code is done executing . \end{theorem} \begin{proof} See that the following decorated series of commands . \begin{eqnarray} \{ <var:J> = <var:s> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:J> = <var:s> \land <var:d0> = <nat:2> \} \\ <var:q> := <var:d0> \\ \{ <var:J> = <var:s> \land <var:q> = <nat:2> \} \end{eqnarray} Using standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <var:d0> := <nat:2> ; <var:q> := <var:d0> {{ <var:q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 