\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:R> ; <var:p2> := <var:p1> * <var:R> ; <var:p3> := <var:p2> * <var:R> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:1> ; <var:p3> := <var:p3> * <nat:5> ; <var:u> := <var:p3> <var:u> := <var:u> + <var:p2> <var:u> := <var:u> + <var:p1> <var:u> := <var:u> + <var:p0> \end{verbatim} Assume that $ <var:R> = <var:l> $ ( for any positive numbers $ <var:l> $ ) prior to evaluating the code segment , it follows that we have $ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning produces : \begin{eqnarray} \{ <var:R> = <var:l> \} \\ <var:p1> := <var:R> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <var:l> \} \\ <var:p2> := <var:p1> * <var:R> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:R> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:p1> := <var:p1> * <nat:2> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <nat:2> * <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:p2> := <var:p2> * <nat:1> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <nat:2> * <var:l> \land <var:p2> = <nat:1> * <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:p3> := <var:p3> * <nat:5> ; \\ \{ <var:R> = <var:l> \land <var:p1> = <nat:2> * <var:l> \land <var:p2> = <nat:1> * <var:l> ^ <nat:2> \land <var:p3> = <nat:5> * <var:l> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:u> := <var:p3> \\ \{ <var:R> = <var:l> \land <var:p1> = <nat:2> * <var:l> \land <var:p2> = <nat:1> * <var:l> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:u> = <nat:5> * <var:l> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:p2> \\ \{ <var:R> = <var:l> \land <var:p1> = <nat:2> * <var:l> \land <var:p0> = <nat:3> \land <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:p1> \\ \{ <var:R> = <var:l> \land <var:p0> = <nat:3> \land <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> \} \\ <var:u> := <var:u> + <var:p0> \\ \{ <var:R> = <var:l> \land <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> \} \end{eqnarray} Hence , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:R> = <var:l> }} <var:p1> := <var:R> ; <var:p2> := <var:p1> * <var:R> ; <var:p3> := <var:p2> * <var:R> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:1> ; <var:p3> := <var:p3> * <nat:5> ; <var:u> := <var:p3> <var:u> := <var:u> + <var:p2> <var:u> := <var:u> + <var:p1> <var:u> := <var:u> + <var:p0> {{ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:l> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:p0> = <nat:3> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p1> = <nat:2> * <var:l> /\ <var:p0> = <nat:3> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:p0> = <nat:3> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:u> = <nat:5> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 