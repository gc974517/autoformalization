\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:5> ; <var:J> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given , with some integers $ <var:B> $ , that $ <var:K> = <var:B> $ prior to evaluating the series of instructions , it follows that we have $ <var:J> = <nat:5> $ once code segment has terminated . \end{theorem} \begin{proof} Applying standard Hoare logic gives : \begin{eqnarray} \{ <var:K> = <var:B> \} \\ <var:h0> := <nat:5> ; \\ \{ <var:K> = <var:B> \land <var:h0> = <nat:5> \} \\ <var:J> := <var:h0> \\ \{ <var:K> = <var:B> \land <var:J> = <nat:5> \} \end{eqnarray} Given the preceding argument , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:J> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:K> = <var:B> }} <def:poly> {{ <var:J> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:J> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 