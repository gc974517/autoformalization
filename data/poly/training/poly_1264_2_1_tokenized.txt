\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:o0> := <nat:7> ; <var:P> := <var:o0> \end{verbatim} Assume that we have $ <var:G> = <var:X> $ ahead of executing the segment of code , it holds that we have $ <var:P> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:X> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:G> = <var:X> \land <var:o0> = <nat:7> \} \\ <var:P> := <var:o0> \\ \{ <var:G> = <var:X> \land <var:P> = <nat:7> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:G> = <var:X> }} <var:o0> := <nat:7> ; <var:P> := <var:o0> {{ <var:P> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:P> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 