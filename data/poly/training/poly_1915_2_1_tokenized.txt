\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:2> ; <var:h> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:q> = <var:T> $ ( for all integers $ <var:T> $ ) ahead of interpreting the code it must be that we see $ <var:h> = <nat:2> $ once set of commands has exited . \end{theorem} \begin{proof} The argument for our list of commands is shown using Hoare reasoning . Honing in on the proceeding piece of code seen in the code , we see the environment update line \verb | <var:H0> := <nat:2> ; | . This redefines $ \{ <var:q> = <var:T> \} $ to the postcondition $ \{ <var:q> = <var:T> \land <var:H0> = <nat:2> \} $ . Looking at the next command seen in the segment of code , we have the variable binding code \verb | <var:h> := <var:H0> | . This transfers the precondition $ \{ <var:q> = <var:T> \land <var:H0> = <nat:2> \} $ toward the postcondition $ \{ <var:q> = <var:T> \land <var:h> = <nat:2> \} $ . This is ensured by the assignment rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:h> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:q> = <var:T> }} <def:poly> {{ <var:h> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:h> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 