\begin{document} \begin{theorem} Consider the following segment of code as follows \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:A> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:A> ; <var:D2> := <var:D2> * <var:A> ; <var:V> := <var:D2> ; <var:V> := <var:V> + <var:D1> ; <var:V> := <var:V> + <var:D0> \end{verbatim} Allowing it to be that $ <var:A> = <var:c> $ for all natural numbers $ <var:c> $ prior to evaluating the list of commands it must be that we have $ <var:V> = <nat:1> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:6> $ when set of instructions has exited . \end{theorem} \begin{proof} The argument for the program is given with this decorated program . \begin{eqnarray} \{ <var:A> = <var:c> \} \\ <var:D0> := <nat:6> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \} \\ <var:D1> := <nat:6> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \} \\ <var:D1> := <var:D1> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:c> \} \\ <var:D2> := <nat:1> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:c> \land <var:D2> = <nat:1> \} \\ <var:D2> := <var:D2> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:c> \land <var:D2> = <nat:1> \times <var:c> \} \\ <var:D2> := <var:D2> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:c> \land <var:D2> = <nat:1> \times <var:c> ^ <nat:2> \} \\ <var:V> := <var:D2> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \times <var:c> \land <var:V> = <nat:1> \times <var:c> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:D1> ; \\ \{ <var:A> = <var:c> \land <var:D0> = <nat:6> \land <var:V> = <nat:1> \times <var:c> ^ <nat:2> + <nat:6> \times <var:c> \} \\ <var:V> := <var:V> + <var:D0> \\ \{ <var:A> = <var:c> \land <var:V> = <nat:1> \times <var:c> ^ <nat:2> + <nat:6> \times <var:c> + <nat:6> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:A> = <var:c> }} <var:D0> := <nat:6> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:A> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:A> ; <var:D2> := <var:D2> * <var:A> ; <var:V> := <var:D2> ; <var:V> := <var:V> + <var:D1> ; <var:V> := <var:V> + <var:D0> {{ <var:V> = <nat:1> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:c> /\ <var:D2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:c> /\ <var:D2> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:c> /\ <var:D2> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:c> /\ <var:V> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:D0> = <nat:6> /\ <var:V> = <nat:1> * <var:c> ^ <nat:2> + <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:V> = <nat:1> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 