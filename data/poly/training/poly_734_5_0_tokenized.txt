\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:6> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:y> ; <var:Z> := <var:v1> ; <var:Z> := <var:Z> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:y> = <var:I> $ prior to the execution of this set of instructions , it must be that $ <var:Z> = <nat:3> \times <var:I> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:y> = <var:I> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:y> = <var:I> \land <var:v0> = <nat:6> \} \\ <var:v1> := <nat:3> ; \\ \{ <var:y> = <var:I> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \} \\ <var:v1> := <var:v1> * <var:y> ; \\ \{ <var:y> = <var:I> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> * <var:I> \} \\ <var:Z> := <var:v1> ; \\ \{ <var:y> = <var:I> \land <var:v0> = <nat:6> \land <var:Z> = <nat:3> * <var:I> \} \\ <var:Z> := <var:Z> + <var:v0> \\ \{ <var:y> = <var:I> \land <var:Z> = <nat:3> * <var:I> + <nat:6> \} \end{eqnarray} Thus , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:6> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:y> ; <var:Z> := <var:v1> ; <var:Z> := <var:Z> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:y> = <var:I> }} <def:poly> {{ <var:Z> = <nat:3> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:v0> = <nat:6> /\ <var:Z> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:Z> = <nat:3> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 