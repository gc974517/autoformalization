\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:4> ; <var:u> := <var:k3> <var:u> := <var:u> + <var:k2> <var:u> := <var:u> + <var:k1> <var:u> := <var:u> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Allow it to be that $ <var:n> = <var:K> $ --- given some natural coefficients $ <var:K> $ --- prior to evaluating our program then we see $ <var:u> = <nat:4> \cdot <var:K> ^ <nat:3> + <nat:9> \cdot <var:K> ^ <nat:2> + <nat:5> \cdot <var:K> + <nat:5> $ when program has executed . \end{theorem} \begin{proof} Using typical Hoare reasoning gives : \begin{eqnarray} \{ <var:n> = <var:K> \} \\ <var:k1> := <var:n> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <var:K> \} \\ <var:k2> := <var:k1> * <var:n> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <var:K> \land <var:k2> = <var:K> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:n> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <var:K> \land <var:k2> = <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \} \\ <var:k0> := <nat:5> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <var:K> \land <var:k2> = <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:k1> := <var:k1> * <nat:5> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <nat:5> \times <var:K> \land <var:k2> = <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:k2> := <var:k2> * <nat:9> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <nat:5> \times <var:K> \land <var:k2> = <nat:9> \times <var:K> ^ <nat:2> \land <var:k3> = <var:K> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:k3> := <var:k3> * <nat:4> ; \\ \{ <var:n> = <var:K> \land <var:k1> = <nat:5> \times <var:K> \land <var:k2> = <nat:9> \times <var:K> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:K> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:u> := <var:k3> \\ \{ <var:n> = <var:K> \land <var:k1> = <nat:5> \times <var:K> \land <var:k2> = <nat:9> \times <var:K> ^ <nat:2> \land <var:k0> = <nat:5> \land <var:u> = <nat:4> \times <var:K> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:k2> \\ \{ <var:n> = <var:K> \land <var:k1> = <nat:5> \times <var:K> \land <var:k0> = <nat:5> \land <var:u> = <nat:4> \times <var:K> ^ <nat:3> + <nat:9> \times <var:K> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:k1> \\ \{ <var:n> = <var:K> \land <var:k0> = <nat:5> \land <var:u> = <nat:4> \times <var:K> ^ <nat:3> + <nat:9> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> \} \\ <var:u> := <var:u> + <var:k0> \\ \{ <var:n> = <var:K> \land <var:u> = <nat:4> \times <var:K> ^ <nat:3> + <nat:9> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> + <nat:5> \} \end{eqnarray} Therefore , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:4> ; <var:u> := <var:k3> <var:u> := <var:u> + <var:k2> <var:u> := <var:u> + <var:k1> <var:u> := <var:u> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:n> = <var:K> }} <def:poly> {{ <var:u> = <nat:4> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <var:K> /\ <var:k2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <var:K> /\ <var:k2> = <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <var:K> /\ <var:k2> = <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <nat:5> * <var:K> /\ <var:k2> = <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <nat:5> * <var:K> /\ <var:k2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:k3> = <var:K> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <nat:5> * <var:K> /\ <var:k2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <nat:5> * <var:K> /\ <var:k2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:k0> = <nat:5> /\ <var:u> = <nat:4> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k1> = <nat:5> * <var:K> /\ <var:k0> = <nat:5> /\ <var:u> = <nat:4> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:k0> = <nat:5> /\ <var:u> = <nat:4> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:u> = <nat:4> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 