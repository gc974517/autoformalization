\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:6> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:X> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:X> ; <var:q2> := <var:q2> * <var:X> ; <var:y> := <var:q2> ; <var:y> := <var:y> + <var:q1> ; <var:y> := <var:y> + <var:q0> \end{verbatim} Given --- letting natural numbers $ <var:O> $ --- that we have $ <var:X> = <var:O> $ ahead of the evaluation of this code , it must be that we have $ <var:y> = <nat:8> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is evident with typical Hoare logic . Moving on to the next commands seen in the segment of code , \[ \begin{tabular} {rcl} \{ <var:X> = <var:O> \} & <var:q0> := <nat:6> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \} \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \} & <var:q1> := <nat:1> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \} \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \} & <var:q1> := <var:q1> * <var:X> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \times <var:O> \} \end{tabular} This is guaranteed with the binding law given by Hoare techniques . Taking a look at the next lines in the list of commands , \[ \begin{tabular} {rcl} \{ <var:X> = <var:O> \} & <var:q0> := <nat:6> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \} \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \} & <var:q1> := <nat:1> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \} \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \} & <var:q1> := <var:q1> * <var:X> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \times <var:O> \} \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \times <var:O> \} & <var:q2> := <nat:8> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \times <var:O> \land <var:q2> = <nat:8> \} \end{tabular} Taking a look at the proceeding lines of codein the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:O> \} & <var:q0> := <nat:6> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \} \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \} & <var:q1> := <nat:1> & \{ <var:X> = <var:O> \land <var:q0> = <nat:6> \land <var:q1> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <var:q0> := <nat:6> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:X> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:X> ; <var:q2> := <var:q2> * <var:X> ; <var:y> := <var:q2> ; <var:y> := <var:y> + <var:q1> ; <var:y> := <var:y> + <var:q0> {{ <var:y> = <nat:8> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:1> * <var:O> /\ <var:q2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:1> * <var:O> /\ <var:q2> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:1> * <var:O> /\ <var:q2> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:1> * <var:O> /\ <var:y> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:6> /\ <var:y> = <nat:8> * <var:O> ^ <nat:2> + <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:y> = <nat:8> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 