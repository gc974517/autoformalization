\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:3> ; <var:R> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:V> = <var:O> $ prior to interpreting the code segment it holds that $ <var:R> = <nat:3> $ when set of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be given through typical Hoare logic . Considering the upcoming line seen in the series of instructions , we have the environment update code \verb | <var:P0> := <nat:3> ; | . This transfers $ \{ <var:V> = <var:O> \} $ toward the postcondition $ \{ <var:V> = <var:O> \land <var:P0> = <nat:3> \} $ . Observing the upcoming step contained in the code , we have the variable assignmet command assigning $ <var:P0$ as $ <var:R>$ . This moves $ \{ <var:V> = <var:O> \land <var:P0> = <nat:3> \} $ toward $ \{ <var:V> = <var:O> \land <var:R> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:3> ; <var:R> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:V> = <var:O> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 