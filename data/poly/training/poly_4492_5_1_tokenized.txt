\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:l1> := <var:I> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:4> ; <var:R> := <var:l1> <var:R> := <var:R> + <var:l0> \end{verbatim} Assuming it to be that $ <var:I> = <var:L> $ before evaluating our set of instructions it holds that $ <var:R> = <nat:4> \times <var:L> + <nat:1> $ once set of commands executes . \end{theorem} \begin{proof} Observe that the below decorated program . \begin{eqnarray} \{ <var:I> = <var:L> \} \\ <var:l1> := <var:I> ; \\ \{ <var:I> = <var:L> \land <var:l1> = <var:L> \} \\ <var:l0> := <nat:1> ; \\ \{ <var:I> = <var:L> \land <var:l1> = <var:L> \land <var:l0> = <nat:1> \} \\ <var:l1> := <var:l1> * <nat:4> ; \\ \{ <var:I> = <var:L> \land <var:l1> = <nat:4> \times <var:L> \land <var:l0> = <nat:1> \} \\ <var:R> := <var:l1> \\ \{ <var:I> = <var:L> \land <var:l0> = <nat:1> \land <var:R> = <nat:4> \times <var:L> \} \\ <var:R> := <var:R> + <var:l0> \\ \{ <var:I> = <var:L> \land <var:R> = <nat:4> \times <var:L> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:I> = <var:L> }} <var:l1> := <var:I> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:4> ; <var:R> := <var:l1> <var:R> := <var:R> + <var:l0> {{ <var:R> = <nat:4> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:l1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:l1> = <var:L> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:l1> = <nat:4> * <var:L> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:l0> = <nat:1> /\ <var:R> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:R> = <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 