\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:M0> := <nat:3> ; <var:v> := <var:M0> \end{verbatim} Allow it to be that $ <var:a> = <var:q> $ , given every $ <var:q> $ , ahead of the evaluation of our segment of code , it holds that we have $ <var:v> = <nat:3> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for this list of commands can be shown through standard Hoare reasoning . Now , we see the variable binding command binding $ <nat:3> $ as $ <var:M0>$ . This transfers $ \{ <var:a> = <var:q> \} $ toward $ \{ <var:a> = <var:q> \land <var:M0> = <nat:3> \} $ . Advancing to the subsequent line of code contained in our series of commands , we see the environment update code binding $ <var:M0$ to $ <var:v>$ . This statement redefines the condition $ \{ <var:a> = <var:q> \land <var:M0> = <nat:3> \} $ toward $ \{ <var:a> = <var:q> \land <var:v> = <nat:3> \} $ . This is given with the assignment scheme from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:a> = <var:q> }} <var:M0> := <nat:3> ; <var:v> := <var:M0> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 