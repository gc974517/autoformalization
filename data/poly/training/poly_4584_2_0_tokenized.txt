\begin{document} \begin{theorem} Take the following program such that \begin{verbatim} <var:i0> := <nat:2> ; <var:J> := <var:i0> \end{verbatim} Allow that we have $ <var:I> = <var:K> $ prior to running this set of instructions , it must be that we have $ <var:J> = <nat:2> $ . \end{theorem} \begin{proof} Notice the below decorated series of commands . \begin{eqnarray} \{ <var:I> = <var:K> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:I> = <var:K> \land <var:i0> = <nat:2> \} \\ <var:J> := <var:i0> \\ \{ <var:I> = <var:K> \land <var:J> = <nat:2> \} \end{eqnarray} Using typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:I> = <var:K> }} <var:i0> := <nat:2> ; <var:J> := <var:i0> {{ <var:J> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:J> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 