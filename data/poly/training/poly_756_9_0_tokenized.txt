\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:9> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:T> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:T> ; <var:z2> := <var:z2> * <var:T> ; <var:s> := <var:z2> ; <var:s> := <var:s> + <var:z1> ; <var:s> := <var:s> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:T> = <var:M> $ ahead of executing the list of commands , it holds that we see $ <var:s> = <nat:6> \cdot <var:M> ^ <nat:2> + <nat:9> \cdot <var:M> + <nat:9> $ after segment of code has exited . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be seen using Hoare techniques . Further , we see \begin{eqnarray} \{ <var:T> = <var:M> \} \, <var:z0> := <nat:9> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \} \end{eqnarray} This is guaranteed by the binding scheme given in Hoare logic . Immediately after , \begin{eqnarray} \{ <var:T> = <var:M> \} \, <var:z0> := <nat:9> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \} \\ \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \} \, <var:z1> := <nat:9> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \} \\ \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \} \, <var:z1> := <var:z1> * <var:T> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \cdot <var:M> \} \\ \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \cdot <var:M> \} \, <var:z2> := <nat:6> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \cdot <var:M> \land <var:z2> = <nat:6> \} \end{eqnarray} This is rigorously given by the assignment inference rule given in standard Hoare techniques . Stepping through , we see \begin{eqnarray} \{ <var:T> = <var:M> \} \, <var:z0> := <nat:9> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \} \\ \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \} \, <var:z1> := <nat:9> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \} \\ \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \} \, <var:z1> := <var:z1> * <var:T> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \land <var:z1> = <nat:9> \cdot <var:M> \} \end{eqnarray} Immediately after , we have \begin{eqnarray} \{ <var:T> = <var:M> \} \, <var:z0> := <nat:9> \, \{ <var:T> = <var:M> \land <var:z0> = <nat:9> \} \end{eqnarray} This is deduced with the binding rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:T> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:T> ; <var:z2> := <var:z2> * <var:T> ; <var:s> := <var:z2> ; <var:s> := <var:s> + <var:z1> ; <var:s> := <var:s> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:T> = <var:M> }} <def:poly> {{ <var:s> = <nat:6> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:9> * <var:M> /\ <var:z2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:9> * <var:M> /\ <var:z2> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:9> * <var:M> /\ <var:z2> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:9> * <var:M> /\ <var:s> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:z0> = <nat:9> /\ <var:s> = <nat:6> * <var:M> ^ <nat:2> + <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:s> = <nat:6> * <var:M> ^ <nat:2> + <nat:9> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 