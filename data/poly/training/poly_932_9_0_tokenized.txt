\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:Q0> := <nat:9> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:b> ; <var:Q2> := <nat:6> ; <var:Q2> := <var:Q2> * <var:b> ; <var:Q2> := <var:Q2> * <var:b> ; <var:B> := <var:Q2> ; <var:B> := <var:B> + <var:Q1> ; <var:B> := <var:B> + <var:Q0> \end{verbatim} Allowing that we have $ <var:b> = <var:V> $ for some $ <var:V> \in \mathbb{N} $ ahead of executing this code segment it follows that we see $ <var:B> = <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:9> $ . \end{theorem} \begin{proof} The argument for our code can be demonstrated with standard Hoare reasoning . Looking at the upcoming line of code seen in our set of commands , we see \verb | { <var:b> = <var:V> } <var:Q0> := <nat:9> { <var:b> = <var:V> \land <var:Q0> = <nat:9> } | . Observing the proceeding steps in our code segment , \verb | { <var:b> = <var:V> } <var:Q0> := <nat:9> { <var:b> = <var:V> \land <var:Q0> = <nat:9> } | , \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> } <var:Q1> := <nat:4> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> } | , \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> } <var:Q1> := <var:Q1> * <var:b> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> } | , \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> } <var:Q2> := <nat:6> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:Q2> = <nat:6> } | , \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:Q2> = <nat:6> } <var:Q2> := <var:Q2> * <var:b> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:Q2> = <nat:6> * <var:V> } | , \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:Q2> = <nat:6> * <var:V> } <var:Q2> := <var:Q2> * <var:b> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:Q2> = <nat:6> * <var:V> ^ <nat:2> } | , \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:Q2> = <nat:6> * <var:V> ^ <nat:2> } <var:B> := <var:Q2> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:B> = <nat:6> * <var:V> ^ <nat:2> } | and \verb | { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:Q1> = <nat:4> * <var:V> \land <var:B> = <nat:6> * <var:V> ^ <nat:2> } <var:B> := <var:B> + <var:Q1> { <var:b> = <var:V> \land <var:Q0> = <nat:9> \land <var:B> = <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> } | . This is given through the variable update scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:b> = <var:V> }} <var:Q0> := <nat:9> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:b> ; <var:Q2> := <nat:6> ; <var:Q2> := <var:Q2> * <var:b> ; <var:Q2> := <var:Q2> * <var:b> ; <var:B> := <var:Q2> ; <var:B> := <var:B> + <var:Q1> ; <var:B> := <var:B> + <var:Q0> {{ <var:B> = <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:Q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:Q2> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:Q2> = <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:B> = <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:Q0> = <nat:9> /\ <var:B> = <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:B> = <nat:6> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 