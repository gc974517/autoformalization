\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:q> ; <var:C> := <var:y1> ; <var:C> := <var:C> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Given it to hold that $ <var:q> = <var:P> $ prior to the evaluation of our code , it holds that we see $ <var:C> = <nat:3> \times <var:P> + <nat:4> $ when program has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:P> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:q> = <var:P> \land <var:y0> = <nat:4> \} \\ <var:y1> := <nat:3> ; \\ \{ <var:q> = <var:P> \land <var:y0> = <nat:4> \land <var:y1> = <nat:3> \} \\ <var:y1> := <var:y1> * <var:q> ; \\ \{ <var:q> = <var:P> \land <var:y0> = <nat:4> \land <var:y1> = <nat:3> * <var:P> \} \\ <var:C> := <var:y1> ; \\ \{ <var:q> = <var:P> \land <var:y0> = <nat:4> \land <var:C> = <nat:3> * <var:P> \} \\ <var:C> := <var:C> + <var:y0> \\ \{ <var:q> = <var:P> \land <var:C> = <nat:3> * <var:P> + <nat:4> \} \end{eqnarray} Using Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:q> ; <var:C> := <var:y1> ; <var:C> := <var:C> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:q> = <var:P> }} <def:poly> {{ <var:C> = <nat:3> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:y0> = <nat:4> /\ <var:C> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:C> = <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 