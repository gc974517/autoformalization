\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:8> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:k> ; <var:K> := <var:J1> ; <var:K> := <var:K> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow for all natural coefficients $ <var:E> $ it to hold that $ <var:k> = <var:E> $ before the evaluation of this code it holds that $ <var:K> = <nat:1> * <var:E> + <nat:8> $ when segment of code finishes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is given through usual Hoare reasoning . Advancing to the next step , we have the variable assignmet code binding $ <nat:8> $ to $ <var:J0>$ . This forwards the condition $ \{ <var:k> = <var:E> \} $ into the postcondition $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \} $ . This is deduced through the assignment inference rule obtained from Hoare logic . Moving on to the next line seen in the list of instructions , the command \verb | <var:J1> := <nat:1> ; | . This statement forwards the precondition $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \} $ into $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> \} $ . Looking at the following command seen in the series of commands , we have the statement \verb | <var:J1> := <var:J1> * <var:k> ; | . This moves the condition $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> \} $ to $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> * <var:E> \} $ . This is guaranteed by the assignment law obtained from standard Hoare techniques . Looking at the next command contained in our code segment , the binding command \verb | <var:K> := <var:J1> ; | . This line transfers $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> * <var:E> \} $ to the postcondition $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \land <var:K> = <nat:1> * <var:E> \} $ . This is rigorously given with the assignment law of usual Hoare techniques . Further , we have the binding statement yielding $ <var:K> + <var:J0$ as $ <var:K>$ . This statement redefines $ \{ <var:k> = <var:E> \land <var:J0> = <nat:8> \land <var:K> = <nat:1> * <var:E> \} $ into the postcondition $ \{ <var:k> = <var:E> \land <var:K> = <nat:1> * <var:E> + <nat:8> \} $ . This is ensured through the assignment scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:8> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:k> ; <var:K> := <var:J1> ; <var:K> := <var:K> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:k> = <var:E> }} <def:poly> {{ <var:K> = <nat:1> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:J0> = <nat:8> /\ <var:K> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:K> = <nat:1> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 