\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:1> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:c> ; <var:L> := <var:T1> ; <var:L> := <var:L> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assuming , with some $ <var:m> \in \mathbb{N} $ , $ <var:c> = <var:m> $ before running the series of commands , it must be that we have $ <var:L> = <nat:4> * <var:m> + <nat:1> $ after program has finished . \end{theorem} \begin{proof} The method of proof for the list of instructions is shown using standard Hoare logic . Focusing on the proceeding line of code found in the program , we have the variable binding statement assigning $ <nat:1> $ to $ <var:T0>$ . This forwards the condition $ \{ <var:c> = <var:m> \} $ to the condition $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \} $ . Advancing to the subsequent step found in the segment of code , the assignment command defining $ <nat:4> $ to $ <var:T1>$ . This command takes $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \} $ as the condition $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \land <var:T1> = <nat:4> \} $ . This is deduced by the assignment law of usual Hoare techniques . Taking a look at the next step seen in our code , we have the variable assignmet code assigning $ <var:T1> * <var:c> $ to $ <var:T1>$ . This code transfers the precondition $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \land <var:T1> = <nat:4> \} $ into the condition $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \land <var:T1> = <nat:4> \cdot <var:m> \} $ . Advancing , the variable update line defining $ <var:T1> $ to $ <var:L>$ . This code takes the precondition $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \land <var:T1> = <nat:4> \cdot <var:m> \} $ into $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \land <var:L> = <nat:4> \cdot <var:m> \} $ . This is shown to be logically sound with the assignment rule defined by standard Hoare reasoning . Taking a look at the subsequent bit of code seen in our program , the assignment line \verb | <var:L> := <var:L> + <var:T0> | . This line takes $ \{ <var:c> = <var:m> \land <var:T0> = <nat:1> \land <var:L> = <nat:4> \cdot <var:m> \} $ as $ \{ <var:c> = <var:m> \land <var:L> = <nat:4> \cdot <var:m> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:1> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:c> ; <var:L> := <var:T1> ; <var:L> := <var:L> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:c> = <var:m> }} <def:poly> {{ <var:L> = <nat:4> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:T0> = <nat:1> /\ <var:L> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:L> = <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 