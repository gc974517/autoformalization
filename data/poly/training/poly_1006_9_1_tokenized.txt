\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:I> ; <var:D2> := <var:D1> * <var:I> ; <var:D3> := <var:D2> * <var:I> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:8> ; <var:D3> := <var:D3> * <nat:1> ; <var:N> := <var:D3> <var:N> := <var:N> + <var:D1> <var:N> := <var:N> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Allow it to hold that $ <var:I> = <var:X> $ --- for every $ <var:X> \in \mathbb{Z}^+ $ --- prior to evaluating this set of instructions it holds that $ <var:N> = <nat:1> \times <var:X> ^ <nat:3> + <nat:8> \times <var:X> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be seen through Hoare logic . Going to the next step , we have the assignment code defining $ <var:I> $ to $ <var:D1>$ . This forwards $ \{ <var:I> = <var:X> \} $ to $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \} $ . This is deduced using the assignment scheme defined by typical Hoare logic . Moving forward , we have the variable update code \verb | <var:D2> := <var:D1> * <var:I> ; | . This takes $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \} $ toward $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \} $ . Immediately after , we see the variable binding command defining $ <var:D2> * <var:I> $ to $ <var:D3>$ . This forwards $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \} $ to the condition $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \} $ . This is shown by the assignment scheme obtained from usual Hoare techniques . Advancing to the upcoming statement found in the code segment , we see the line \verb | <var:D0> := <nat:7> ; | . This code redefines the condition $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \} $ to $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D0> = <nat:7> \} $ . This is shown to be logically sound with the assignment scheme in typical Hoare reasoning . Observing the following statement found in the code segment , we see the variable binding code binding $ <var:D1> * <nat:8> $ to $ <var:D1>$ . This code moves $ \{ <var:I> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D0> = <nat:7> \} $ toward the postcondition $ \{ <var:I> = <var:X> \land <var:D1> = <nat:8> \cdot <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D0> = <nat:7> \} $ . Jumping to the following command found in the list of commands , the binding line assigning $ <var:D3> * <nat:1> $ toward $ <var:D3>$ . This line takes the precondition $ \{ <var:I> = <var:X> \land <var:D1> = <nat:8> \cdot <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D0> = <nat:7> \} $ into the condition $ \{ <var:I> = <var:X> \land <var:D1> = <nat:8> \cdot <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <nat:1> \cdot <var:X> ^ <nat:3> \land <var:D0> = <nat:7> \} $ . This is rigorously given by the assignment inference rule given by usual Hoare reasoning . Stepping through , we see the binding statement letting $ <var:D3$ to $ <var:N>$ . This line forwards the precondition $ \{ <var:I> = <var:X> \land <var:D1> = <nat:8> \cdot <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <nat:1> \cdot <var:X> ^ <nat:3> \land <var:D0> = <nat:7> \} $ as the condition $ \{ <var:I> = <var:X> \land <var:D1> = <nat:8> \cdot <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D0> = <nat:7> \land <var:N> = <nat:1> \cdot <var:X> ^ <nat:3> \} $ . This is deduced by the assignment inference rule given by Hoare reasoning . Jumping to the upcoming line of code in our segment of code , we have the environment update command \verb | <var:N> := <var:N> + <var:D1> | . This redefines the condition $ \{ <var:I> = <var:X> \land <var:D1> = <nat:8> \cdot <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D0> = <nat:7> \land <var:N> = <nat:1> \cdot <var:X> ^ <nat:3> \} $ as the postcondition $ \{ <var:I> = <var:X> \land <var:D0> = <nat:7> \land <var:N> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:8> \cdot <var:X> \} $ . Considering the subsequent command found in the list of commands , the assignment command giving $ <var:N> + <var:D0$ to $ <var:N>$ . This command forwards the condition $ \{ <var:I> = <var:X> \land <var:D0> = <nat:7> \land <var:N> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:8> \cdot <var:X> \} $ toward the condition $ \{ <var:I> = <var:X> \land <var:N> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:8> \cdot <var:X> + <nat:7> \} $ . This is ensured with the assignment law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:I> ; <var:D2> := <var:D1> * <var:I> ; <var:D3> := <var:D2> * <var:I> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:8> ; <var:D3> := <var:D3> * <nat:1> ; <var:N> := <var:D3> <var:N> := <var:N> + <var:D1> <var:N> := <var:N> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:I> = <var:X> }} <def:poly> {{ <var:N> = <nat:1> * <var:X> ^ <nat:3> + <nat:8> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <nat:8> * <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <nat:8> * <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:X> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D1> = <nat:8> * <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D0> = <nat:7> /\ <var:N> = <nat:1> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:D0> = <nat:7> /\ <var:N> = <nat:1> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N> = <nat:1> * <var:X> ^ <nat:3> + <nat:8> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 