\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:D> ; <var:Y> := <var:o1> ; <var:Y> := <var:Y> + <var:o0> \end{verbatim} Given it to hold that $ <var:D> = <var:v> $ prior to interpreting this code then we see $ <var:Y> = <nat:8> * <var:v> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for our segment of code is accomplished through usual Hoare logic . Advancing to the upcoming commands in our series of commands , we have \begin{eqnarray} \{ <var:D> = <var:v> \} \, <var:o0> := <nat:8> \, \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \} \\ \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \} \, <var:o1> := <nat:8> \, \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \land <var:o1> = <nat:8> \} \\ \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \land <var:o1> = <nat:8> \} \, <var:o1> := <var:o1> * <var:D> \, \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \land <var:o1> = <nat:8> \cdot <var:v> \} \\ \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \land <var:o1> = <nat:8> \cdot <var:v> \} \, <var:Y> := <var:o1> \, \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \land <var:Y> = <nat:8> \cdot <var:v> \} \end{eqnarray} Looking at the following step in the code , \begin{eqnarray} \{ <var:D> = <var:v> \} \, <var:o0> := <nat:8> \, \{ <var:D> = <var:v> \land <var:o0> = <nat:8> \} \end{eqnarray} This is guaranteed through the variable assignmet scheme from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:D> = <var:v> }} <var:o0> := <nat:8> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:D> ; <var:Y> := <var:o1> ; <var:Y> := <var:Y> + <var:o0> {{ <var:Y> = <nat:8> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o0> = <nat:8> /\ <var:Y> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:Y> = <nat:8> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 