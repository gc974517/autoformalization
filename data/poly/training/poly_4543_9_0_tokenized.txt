\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:6> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:n> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:n> ; <var:U2> := <var:U2> * <var:n> ; <var:k> := <var:U2> ; <var:k> := <var:k> + <var:U1> ; <var:k> := <var:k> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assume $ <var:n> = <var:q> $ for every $ <var:q> $ ahead of the evaluation of the code , then we have $ <var:k> = <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our set of instructions can be done with Hoare techniques . Further , we have \begin{verbatim} { <var:n> = <var:q> } <var:U0> := <nat:6> { <var:n> = <var:q> \land <var:U0> = <nat:6> } { <var:n> = <var:q> \land <var:U0> = <nat:6> } <var:U1> := <nat:5> { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> } \end{verbatim} Observing the next commands contained in our set of instructions , we see \begin{verbatim} { <var:n> = <var:q> } <var:U0> := <nat:6> { <var:n> = <var:q> \land <var:U0> = <nat:6> } { <var:n> = <var:q> \land <var:U0> = <nat:6> } <var:U1> := <nat:5> { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> } { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> } <var:U1> := <var:U1> * <var:n> { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> \cdot <var:q> } \end{verbatim} This is shown to be logically sound by the variable binding law given in standard Hoare techniques . Further , we see \begin{verbatim} { <var:n> = <var:q> } <var:U0> := <nat:6> { <var:n> = <var:q> \land <var:U0> = <nat:6> } { <var:n> = <var:q> \land <var:U0> = <nat:6> } <var:U1> := <nat:5> { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> } { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> } <var:U1> := <var:U1> * <var:n> { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> \cdot <var:q> } { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> \cdot <var:q> } <var:U2> := <nat:8> { <var:n> = <var:q> \land <var:U0> = <nat:6> \land <var:U1> = <nat:5> \cdot <var:q> \land <var:U2> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:6> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:n> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:n> ; <var:U2> := <var:U2> * <var:n> ; <var:k> := <var:U2> ; <var:k> := <var:k> + <var:U1> ; <var:k> := <var:k> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:n> = <var:q> }} <def:poly> {{ <var:k> = <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:U1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:U1> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:U1> = <nat:5> * <var:q> /\ <var:U2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:U1> = <nat:5> * <var:q> /\ <var:U2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:U1> = <nat:5> * <var:q> /\ <var:U2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:U1> = <nat:5> * <var:q> /\ <var:k> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:U0> = <nat:6> /\ <var:k> = <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k> = <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 