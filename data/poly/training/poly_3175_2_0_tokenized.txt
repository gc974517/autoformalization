\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:2> ; <var:z> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:x> = <var:i> $ before executing our set of instructions then we have $ <var:z> = <nat:2> $ after segment of code is done executing . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:x> = <var:i> \} \\ <var:K0> := <nat:2> ; \\ \{ <var:x> = <var:i> \land <var:K0> = <nat:2> \} \\ <var:z> := <var:K0> \\ \{ <var:x> = <var:i> \land <var:z> = <nat:2> \} \end{eqnarray} Considering the above , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:2> ; <var:z> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:x> = <var:i> }} <def:poly> {{ <var:z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 