\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:6> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:z> ; <var:h> := <var:w1> ; <var:h> := <var:h> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:z> = <var:F> $ ( for some whole numbers $ <var:F> $ ) ahead of the evaluation of the series of instructions it follows that we have $ <var:h> = <nat:2> * <var:F> + <nat:6> $ once code is done executing . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:F> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:z> = <var:F> \land <var:w0> = <nat:6> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:z> = <var:F> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> \} \\ <var:w1> := <var:w1> * <var:z> ; \\ \{ <var:z> = <var:F> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> \times <var:F> \} \\ <var:h> := <var:w1> ; \\ \{ <var:z> = <var:F> \land <var:w0> = <nat:6> \land <var:h> = <nat:2> \times <var:F> \} \\ <var:h> := <var:h> + <var:w0> \\ \{ <var:z> = <var:F> \land <var:h> = <nat:2> \times <var:F> + <nat:6> \} \end{eqnarray} Given the preceding argument , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:6> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:z> ; <var:h> := <var:w1> ; <var:h> := <var:h> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:z> = <var:F> }} <def:poly> {{ <var:h> = <nat:2> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:w0> = <nat:6> /\ <var:h> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:h> = <nat:2> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 