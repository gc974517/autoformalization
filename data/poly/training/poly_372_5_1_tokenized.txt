\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:b1> := <var:w> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:3> ; <var:d> := <var:b1> <var:d> := <var:d> + <var:b0> \end{verbatim} Assume --- for positive coefficients $ <var:M> $ --- $ <var:w> = <var:M> $ ahead of executing the list of instructions , it must be that we see $ <var:d> = <nat:3> \times <var:M> + <nat:2> $ when list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:M> \} \\ <var:b1> := <var:w> ; \\ \{ <var:w> = <var:M> \land <var:b1> = <var:M> \} \\ <var:b0> := <nat:2> ; \\ \{ <var:w> = <var:M> \land <var:b1> = <var:M> \land <var:b0> = <nat:2> \} \\ <var:b1> := <var:b1> * <nat:3> ; \\ \{ <var:w> = <var:M> \land <var:b1> = <nat:3> \cdot <var:M> \land <var:b0> = <nat:2> \} \\ <var:d> := <var:b1> \\ \{ <var:w> = <var:M> \land <var:b0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:M> \} \\ <var:d> := <var:d> + <var:b0> \\ \{ <var:w> = <var:M> \land <var:d> = <nat:3> \cdot <var:M> + <nat:2> \} \end{eqnarray} Using Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:w> = <var:M> }} <var:b1> := <var:w> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:3> ; <var:d> := <var:b1> <var:d> := <var:d> + <var:b0> {{ <var:d> = <nat:3> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:b1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:b1> = <var:M> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:b1> = <nat:3> * <var:M> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:b0> = <nat:2> /\ <var:d> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:d> = <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 