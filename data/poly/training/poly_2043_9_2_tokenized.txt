\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:1> + <var:S> * <var:Z> ; <var:S> := <nat:2> + <var:S> * <var:Z> ; <var:S> := <nat:3> + <var:S> * <var:Z> ; <var:S> := <var:S> * <var:Z> ; <var:S> := <nat:4> + <var:S> * <var:Z> ; <var:S> := <nat:4> + <var:S> * <var:Z> ; <var:S> := <nat:1> + <var:S> * <var:Z> ; <var:S> := <nat:1> + <var:S> * <var:Z> \end{verbatim} Assuming $ <var:Z> = <var:e> $ letting natural numbers $ <var:e> $ prior to the execution of this segment of code it holds that $ <var:S> = <nat:3> \cdot <var:e> ^ <nat:8> + <nat:1> \cdot <var:e> ^ <nat:7> + <nat:2> \cdot <var:e> ^ <nat:6> + <nat:3> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our segment of code can be accomplished through typical Hoare techniques . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:e> \} & <var:S> := <nat:3> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> \} \\ \{ <var:Z> = <var:e> \land <var:S> = <nat:3> \} & <var:S> := <nat:1> + <var:S> * <var:Z> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> + <nat:1> \} \\ \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> + <nat:1> \} & <var:S> := <nat:2> + <var:S> * <var:Z> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> \} \end{tabular} Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:e> \} & <var:S> := <nat:3> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> \} \\ \{ <var:Z> = <var:e> \land <var:S> = <nat:3> \} & <var:S> := <nat:1> + <var:S> * <var:Z> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> + <nat:1> \} \\ \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> + <nat:1> \} & <var:S> := <nat:2> + <var:S> * <var:Z> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> \} \\ \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> \} & <var:S> := <nat:3> + <var:S> * <var:Z> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> \} \\ \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> \} & <var:S> := <var:S> * <var:Z> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + \} \end{tabular} Immediately following , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:e> \} & <var:S> := <nat:3> & \{ <var:Z> = <var:e> \land <var:S> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Z> = <var:e> }} <var:S> := <nat:3> ; <var:S> := <nat:1> + <var:S> * <var:Z> ; <var:S> := <nat:2> + <var:S> * <var:Z> ; <var:S> := <nat:3> + <var:S> * <var:Z> ; <var:S> := <var:S> * <var:Z> ; <var:S> := <nat:4> + <var:S> * <var:Z> ; <var:S> := <nat:4> + <var:S> * <var:Z> ; <var:S> := <nat:1> + <var:S> * <var:Z> ; <var:S> := <nat:1> + <var:S> * <var:Z> {{ <var:S> = <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:S> = <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 