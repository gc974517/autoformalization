\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:8> ; <var:l> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allowing --- for $ <var:Y> \in \mathbb{N} $ --- it to be that $ <var:Q> = <var:Y> $ before evaluating this code segment , then we have $ <var:l> = <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the segment of code can be given by Hoare logic . Going to the next step , we see the variable assignmet code letting $ <nat:8> $ as $ <var:E0>$ . This line moves $ \{ <var:Q> = <var:Y> \} $ into $ \{ <var:Q> = <var:Y> \land <var:E0> = <nat:8> \} $ . This is guaranteed using the assignment scheme given by standard Hoare techniques . Taking another step toward the upcoming command seen in our series of instructions , we have the statement \verb | <var:l> := <var:E0> | . This advances $ \{ <var:Q> = <var:Y> \land <var:E0> = <nat:8> \} $ to the postcondition $ \{ <var:Q> = <var:Y> \land <var:l> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:8> ; <var:l> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Q> = <var:Y> }} <def:poly> {{ <var:l> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:l> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 