\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:M> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:3> ; <var:n> := <var:l1> <var:n> := <var:n> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:M> = <var:Z> $ ahead of the execution of our list of instructions , it holds that we have $ <var:n> = <nat:3> \cdot <var:Z> + <nat:5> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:M> = <var:Z> \} \\ <var:l1> := <var:M> ; \\ \{ <var:M> = <var:Z> \land <var:l1> = <var:Z> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:M> = <var:Z> \land <var:l1> = <var:Z> \land <var:l0> = <nat:5> \} \\ <var:l1> := <var:l1> * <nat:3> ; \\ \{ <var:M> = <var:Z> \land <var:l1> = <nat:3> * <var:Z> \land <var:l0> = <nat:5> \} \\ <var:n> := <var:l1> \\ \{ <var:M> = <var:Z> \land <var:l0> = <nat:5> \land <var:n> = <nat:3> * <var:Z> \} \\ <var:n> := <var:n> + <var:l0> \\ \{ <var:M> = <var:Z> \land <var:n> = <nat:3> * <var:Z> + <nat:5> \} \end{eqnarray} Given the above , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:M> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:3> ; <var:n> := <var:l1> <var:n> := <var:n> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:M> = <var:Z> }} <def:poly> {{ <var:n> = <nat:3> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:l1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:l1> = <var:Z> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:l1> = <nat:3> * <var:Z> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:l0> = <nat:5> /\ <var:n> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:n> = <nat:3> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 