\begin{document} \begin{theorem} Define a code as follows \begin{verbatim} <var:r0> := <nat:5> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:I> ; <var:h> := <var:r1> ; <var:h> := <var:h> + <var:r0> \end{verbatim} Assume that $ <var:I> = <var:D> $ ( taking positive numbers $ <var:D> $ ) ahead of the execution of this set of instructions , it holds that we have $ <var:h> = <nat:6> \cdot <var:D> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be done using usual Hoare reasoning . Moving forward to the upcoming line of code contained in the list of instructions , the assignment line \verb | <var:r0> := <nat:5> ; | . This command advances the condition $ \{ <var:I> = <var:D> \} $ toward $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \} $ . This is rigorously given by the assignment rule given in typical Hoare techniques . Taking a look at the following bit of code seen in our segment of code , we see the environment update statement \verb | <var:r1> := <nat:6> ; | . This code takes $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \} $ toward the condition $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \land <var:r1> = <nat:6> \} $ . Stepping forward , the binding statement assigning $ <var:r1> * <var:I> $ toward $ <var:r1>$ . This line forwards $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \land <var:r1> = <nat:6> \} $ toward the postcondition $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \land <var:r1> = <nat:6> \times <var:D> \} $ . This is deduced with the assignment scheme given by usual Hoare reasoning . Advancing , we see the variable update statement \verb | <var:h> := <var:r1> ; | . This command advances the condition $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \land <var:r1> = <nat:6> \times <var:D> \} $ into the postcondition $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \land <var:h> = <nat:6> \times <var:D> \} $ . Jumping to the next line of code found in our code , we have the variable binding code letting $ <var:h> + <var:r0$ as $ <var:h>$ . This code redefines the precondition $ \{ <var:I> = <var:D> \land <var:r0> = <nat:5> \land <var:h> = <nat:6> \times <var:D> \} $ toward the condition $ \{ <var:I> = <var:D> \land <var:h> = <nat:6> \times <var:D> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <var:r0> := <nat:5> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:I> ; <var:h> := <var:r1> ; <var:h> := <var:h> + <var:r0> {{ <var:h> = <nat:6> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:r0> = <nat:5> /\ <var:h> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:h> = <nat:6> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 