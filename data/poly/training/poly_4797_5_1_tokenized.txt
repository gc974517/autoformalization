\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v1> := <var:k> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:E> := <var:v1> <var:E> := <var:E> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Allow , letting $ <var:J> \in \mathbb{Z}^+ $ , that we have $ <var:k> = <var:J> $ prior to interpreting the list of instructions , it must be that we see $ <var:E> = <nat:2> * <var:J> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:J> \} \\ <var:v1> := <var:k> ; \\ \{ <var:k> = <var:J> \land <var:v1> = <var:J> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:k> = <var:J> \land <var:v1> = <var:J> \land <var:v0> = <nat:9> \} \\ <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:k> = <var:J> \land <var:v1> = <nat:2> \cdot <var:J> \land <var:v0> = <nat:9> \} \\ <var:E> := <var:v1> \\ \{ <var:k> = <var:J> \land <var:v0> = <nat:9> \land <var:E> = <nat:2> \cdot <var:J> \} \\ <var:E> := <var:E> + <var:v0> \\ \{ <var:k> = <var:J> \land <var:E> = <nat:2> \cdot <var:J> + <nat:9> \} \end{eqnarray} The application of typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:k> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:E> := <var:v1> <var:E> := <var:E> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:k> = <var:J> }} <def:poly> {{ <var:E> = <nat:2> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:v1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:v1> = <var:J> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:v1> = <nat:2> * <var:J> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:v0> = <nat:9> /\ <var:E> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:E> = <nat:2> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 