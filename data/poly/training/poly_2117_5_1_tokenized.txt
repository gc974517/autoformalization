\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:g> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:1> ; <var:N> := <var:B1> <var:N> := <var:N> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for some integers $ <var:P> $ --- $ <var:g> = <var:P> $ prior to interpreting this list of commands , it follows that we see $ <var:N> = <nat:1> \times <var:P> + <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare logic produces : \begin{eqnarray} \{ <var:g> = <var:P> \} \\ <var:B1> := <var:g> ; \\ \{ <var:g> = <var:P> \land <var:B1> = <var:P> \} \\ <var:B0> := <nat:6> ; \\ \{ <var:g> = <var:P> \land <var:B1> = <var:P> \land <var:B0> = <nat:6> \} \\ <var:B1> := <var:B1> * <nat:1> ; \\ \{ <var:g> = <var:P> \land <var:B1> = <nat:1> \cdot <var:P> \land <var:B0> = <nat:6> \} \\ <var:N> := <var:B1> \\ \{ <var:g> = <var:P> \land <var:B0> = <nat:6> \land <var:N> = <nat:1> \cdot <var:P> \} \\ <var:N> := <var:N> + <var:B0> \\ \{ <var:g> = <var:P> \land <var:N> = <nat:1> \cdot <var:P> + <nat:6> \} \end{eqnarray} Given the above , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:g> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:1> ; <var:N> := <var:B1> <var:N> := <var:N> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:g> = <var:P> }} <def:poly> {{ <var:N> = <nat:1> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:B1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:B1> = <var:P> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:B1> = <nat:1> * <var:P> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:B0> = <nat:6> /\ <var:N> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:N> = <nat:1> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 