\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:1> ; <var:U> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:O> = <var:s> $ ( for any natural numbers $ <var:s> $ ) ahead of executing the list of instructions , then we see $ <var:U> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be seen through the following decorated code . \begin{eqnarray} \{ <var:O> = <var:s> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:O> = <var:s> \land <var:Z0> = <nat:1> \} \\ <var:U> := <var:Z0> \\ \{ <var:O> = <var:s> \land <var:U> = <nat:1> \} \end{eqnarray} The application of Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:1> ; <var:U> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:O> = <var:s> }} <def:poly> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 