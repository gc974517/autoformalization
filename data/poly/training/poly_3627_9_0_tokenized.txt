\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:7> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:B> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:B> ; <var:D2> := <var:D2> * <var:B> ; <var:c> := <var:D2> ; <var:c> := <var:c> + <var:D1> ; <var:c> := <var:c> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Allowing , given any positive numbers $ <var:M> $ , it to be that $ <var:B> = <var:M> $ ahead of evaluating the series of instructions , it follows that we see $ <var:c> = <nat:1> \times <var:M> ^ <nat:2> + <nat:7> \times <var:M> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is done using Hoare logic . Now , \[ \begin{tabular} {rcl} \{ <var:B> = <var:M> \} & <var:D0> := <nat:7> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \} \\ \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \} & <var:D1> := <nat:7> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> \} \\ \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> \} & <var:D1> := <var:D1> * <var:B> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> * <var:M> \} \\ \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> * <var:M> \} & <var:D2> := <nat:1> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> * <var:M> \land <var:D2> = <nat:1> \} \end{tabular} This is deduced through the assignment law in Hoare techniques . Moving on to the following pieces of code seen in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:M> \} & <var:D0> := <nat:7> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \} \\ \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \} & <var:D1> := <nat:7> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> \} \\ \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> \} & <var:D1> := <var:D1> * <var:B> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> * <var:M> \} \end{tabular} This is deduced using the law found in standard Hoare logic . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:B> = <var:M> \} & <var:D0> := <nat:7> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \} \\ \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \} & <var:D1> := <nat:7> & \{ <var:B> = <var:M> \land <var:D0> = <nat:7> \land <var:D1> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:7> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:B> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:B> ; <var:D2> := <var:D2> * <var:B> ; <var:c> := <var:D2> ; <var:c> := <var:c> + <var:D1> ; <var:c> := <var:c> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:B> = <var:M> }} <def:poly> {{ <var:c> = <nat:1> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:7> * <var:M> /\ <var:D2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:7> * <var:M> /\ <var:D2> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:7> * <var:M> /\ <var:D2> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:7> * <var:M> /\ <var:c> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:D0> = <nat:7> /\ <var:c> = <nat:1> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:c> = <nat:1> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 