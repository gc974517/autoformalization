\begin{document} \begin{theorem} Let the following code in \emph{Imp} as \begin{verbatim} <var:C1> := <var:L> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:8> ; <var:h> := <var:C1> <var:h> := <var:h> + <var:C0> \end{verbatim} Assuming $ <var:L> = <var:f> $ ahead of interpreting this code segment it holds that we have $ <var:h> = <nat:8> \times <var:f> + <nat:7> $ after code is done executing . \end{theorem} \begin{proof} The flow of logic for this set of instructions is clear with usual Hoare logic . Going forward , \verb | { <var:L> = <var:f> } <var:C1> := <var:L> { <var:L> = <var:f> \land <var:C1> = <var:f> } | , \verb | { <var:L> = <var:f> \land <var:C1> = <var:f> } <var:C0> := <nat:7> { <var:L> = <var:f> \land <var:C1> = <var:f> \land <var:C0> = <nat:7> } | , \verb | { <var:L> = <var:f> \land <var:C1> = <var:f> \land <var:C0> = <nat:7> } <var:C1> := <var:C1> * <nat:8> { <var:L> = <var:f> \land <var:C1> = <nat:8> \cdot <var:f> \land <var:C0> = <nat:7> } | and \verb | { <var:L> = <var:f> \land <var:C1> = <nat:8> \cdot <var:f> \land <var:C0> = <nat:7> } <var:h> := <var:C1{ <var:L> = <var:f> \land <var:C0> = <nat:7> \land <var:h> = <nat:8> \cdot <var:f> } | . Shifting focus toward the upcoming line in the series of commands , we see \verb | { <var:L> = <var:f> } <var:C1> := <var:L> { <var:L> = <var:f> \land <var:C1> = <var:f> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:L> = <var:f> }} <var:C1> := <var:L> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:8> ; <var:h> := <var:C1> <var:h> := <var:h> + <var:C0> {{ <var:h> = <nat:8> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:C1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:C1> = <var:f> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:C1> = <nat:8> * <var:f> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:C0> = <nat:7> /\ <var:h> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:h> = <nat:8> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 