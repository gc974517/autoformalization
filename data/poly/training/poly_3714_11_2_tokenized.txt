\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:1> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> \end{verbatim} Given that $ <var:j> = <var:W> $ --- given some integers $ <var:W> $ --- ahead of the evaluation of this program then we have $ <var:l> = <nat:1> \cdot <var:W> ^ <nat:10> + <nat:1> \cdot <var:W> ^ <nat:9> + <nat:2> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:2> \cdot <var:W> ^ <nat:6> + <nat:1> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:3> $ after set of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:W> \} \\ <var:l> := <nat:1> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \} \\ <var:l> := <nat:1> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> + <nat:1> \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> \} \\ <var:l> := <nat:3> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:2> \} \\ <var:l> := <nat:1> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:5> + <nat:1> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:1> \} \\ <var:l> := <nat:3> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:6> + <nat:1> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:3> \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:7> + <nat:1> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:2> \} \\ <var:l> := <nat:1> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:8> + <nat:1> \cdot <var:W> ^ <nat:7> + <nat:2> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:1> \} \\ <var:l> := <nat:3> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:9> + <nat:1> \cdot <var:W> ^ <nat:8> + <nat:2> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:1> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:3> \} \\ <var:l> := <nat:3> + <var:l> * <var:j> \\ \{ <var:j> = <var:W> \land <var:l> = <nat:1> \cdot <var:W> ^ <nat:10> + <nat:1> \cdot <var:W> ^ <nat:9> + <nat:2> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:2> \cdot <var:W> ^ <nat:6> + <nat:1> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:3> \} \end{eqnarray} The application of standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:j> = <var:W> }} <var:l> := <nat:1> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> {{ <var:l> = <nat:1> * <var:W> ^ <nat:10> + <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:9> + <nat:1> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:l> = <nat:1> * <var:W> ^ <nat:10> + <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 