\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <nat:4> + <var:p> * <var:N> ; <var:p> := <var:p> * <var:N> ; <var:p> := <var:p> * <var:N> ; <var:p> := <nat:3> + <var:p> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Assuming it to be that $ <var:N> = <var:e> $ ahead of evaluating the code segment then $ <var:p> = <nat:1> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:3> $ once code segment executes . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:N> = <var:e> \} \\ <var:p> := <nat:1> ; \\ \{ <var:N> = <var:e> \land <var:p> = <nat:1> \} \\ <var:p> := <nat:4> + <var:p> * <var:N> ; \\ \{ <var:N> = <var:e> \land <var:p> = <nat:1> \times <var:e> + <nat:4> \} \\ <var:p> := <var:p> * <var:N> ; \\ \{ <var:N> = <var:e> \land <var:p> = <nat:1> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + \} \\ <var:p> := <var:p> * <var:N> ; \\ \{ <var:N> = <var:e> \land <var:p> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + \} \\ <var:p> := <nat:3> + <var:p> * <var:N> \\ \{ <var:N> = <var:e> \land <var:p> = <nat:1> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:3> \} \end{eqnarray} As a result , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:1> ; <var:p> := <nat:4> + <var:p> * <var:N> ; <var:p> := <var:p> * <var:N> ; <var:p> := <var:p> * <var:N> ; <var:p> := <nat:3> + <var:p> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:N> = <var:e> }} <def:poly> {{ <var:p> = <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:p> = <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:p> = <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:p> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:p> = <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 