\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:U> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:b> = <var:i> $ assuming some integers $ <var:i> $ before interpreting this series of commands it follows that $ <var:U> = <nat:1> $ when code is done executing . \end{theorem} \begin{proof} The course of logic for the list of instructions can be shown through usual Hoare logic . Moving onward , the binding command assigning $ <nat:1> $ as $ <var:x0>$ . This moves the precondition $ \{ <var:b> = <var:i> \} $ to the condition $ \{ <var:b> = <var:i> \land <var:x0> = <nat:1> \} $ . Further , the command \verb | <var:U> := <var:x0> | . This code advances the precondition $ \{ <var:b> = <var:i> \land <var:x0> = <nat:1> \} $ to $ \{ <var:b> = <var:i> \land <var:U> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:U> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:b> = <var:i> }} <def:poly> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 