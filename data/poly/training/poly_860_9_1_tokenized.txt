\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:I1> := <var:l> ; <var:I2> := <var:I1> * <var:l> ; <var:I3> := <var:I2> * <var:l> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:2> ; <var:I3> := <var:I3> * <nat:4> ; <var:p> := <var:I3> <var:p> := <var:p> + <var:I1> <var:p> := <var:p> + <var:I0> \end{verbatim} Allowing for all $ <var:W> \in \mathbb{Z}^+ $ that $ <var:l> = <var:W> $ prior to evaluating this series of instructions , it follows that we see $ <var:p> = <nat:4> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the code is clear using typical Hoare logic . Moving forward to the subsequent lines of codein our set of instructions , we have \verb | { <var:l> = <var:W> } <var:I1> := <var:l> { <var:l> = <var:W> \land <var:I1> = <var:W> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <var:W> } <var:I2> := <var:I1> * <var:l> { <var:l> = <var:W> \land <var:I1> = <var:W> \land <var:I2> = <var:W> ^ <nat:2> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <var:W> \land <var:I2> = <var:W> ^ <nat:2> } <var:I3> := <var:I2> * <var:l> { <var:l> = <var:W> \land <var:I1> = <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <var:W> ^ <nat:3> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <var:W> ^ <nat:3> } <var:I0> := <nat:1> { <var:l> = <var:W> \land <var:I1> = <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <var:W> ^ <nat:3> \land <var:I0> = <nat:1> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <var:W> ^ <nat:3> \land <var:I0> = <nat:1> } <var:I1> := <var:I1> * <nat:2> { <var:l> = <var:W> \land <var:I1> = <nat:2> \times <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <var:W> ^ <nat:3> \land <var:I0> = <nat:1> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <nat:2> \times <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <var:W> ^ <nat:3> \land <var:I0> = <nat:1> } <var:I3> := <var:I3> * <nat:4> { <var:l> = <var:W> \land <var:I1> = <nat:2> \times <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <nat:4> \times <var:W> ^ <nat:3> \land <var:I0> = <nat:1> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <nat:2> \times <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I3> = <nat:4> \times <var:W> ^ <nat:3> \land <var:I0> = <nat:1> } <var:p> := <var:I3{ <var:l> = <var:W> \land <var:I1> = <nat:2> \times <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:p> = <nat:4> \times <var:W> ^ <nat:3> } | , \verb | { <var:l> = <var:W> \land <var:I1> = <nat:2> \times <var:W> \land <var:I2> = <var:W> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:p> = <nat:4> \times <var:W> ^ <nat:3> } <var:p> := <var:p> + <var:I1{ <var:l> = <var:W> \land <var:I0> = <nat:1> \land <var:p> = <nat:4> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> } | and \verb | { <var:l> = <var:W> \land <var:I0> = <nat:1> \land <var:p> = <nat:4> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> } <var:p> := <var:p> + <var:I0{ <var:l> = <var:W> \land <var:p> = <nat:4> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:l> = <var:W> }} <var:I1> := <var:l> ; <var:I2> := <var:I1> * <var:l> ; <var:I3> := <var:I2> * <var:l> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:2> ; <var:I3> := <var:I3> * <nat:4> ; <var:p> := <var:I3> <var:p> := <var:p> + <var:I1> <var:p> := <var:p> + <var:I0> {{ <var:p> = <nat:4> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <var:W> /\ <var:I2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <var:W> /\ <var:I2> = <var:W> ^ <nat:2> /\ <var:I3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <var:W> /\ <var:I2> = <var:W> ^ <nat:2> /\ <var:I3> = <var:W> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <nat:2> * <var:W> /\ <var:I2> = <var:W> ^ <nat:2> /\ <var:I3> = <var:W> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <nat:2> * <var:W> /\ <var:I2> = <var:W> ^ <nat:2> /\ <var:I3> = <nat:4> * <var:W> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I1> = <nat:2> * <var:W> /\ <var:I2> = <var:W> ^ <nat:2> /\ <var:I0> = <nat:1> /\ <var:p> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:I0> = <nat:1> /\ <var:p> = <nat:4> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:p> = <nat:4> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 