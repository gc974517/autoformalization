\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:c1> := <var:K> ; <var:c2> := <var:c1> * <var:K> ; <var:c3> := <var:c2> * <var:K> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:7> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:7> ; <var:b> := <var:c3> <var:b> := <var:b> + <var:c2> <var:b> := <var:b> + <var:c1> <var:b> := <var:b> + <var:c0> \end{verbatim} Assume $ <var:K> = <var:t> $ ahead of running this set of commands it follows that $ <var:b> = <nat:7> \cdot <var:t> ^ <nat:3> + <nat:9> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:8> $ . \end{theorem} \begin{proof} The argument for this series of instructions can be demonstrated with usual Hoare reasoning . Keeping momentum , \verb | { <var:K> = <var:t> } <var:c1> := <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> } | . This is rigorously given by the binding scheme defined by typical Hoare techniques . Next , \verb | { <var:K> = <var:t> } <var:c1> := <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> } | , \verb | { <var:K> = <var:t> \land <var:c1> = <var:t> } <var:c2> := <var:c1> * <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> } | , \verb | { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> } <var:c3> := <var:c2> * <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> \land <var:c3> = <var:t> ^ <nat:3> } | and \verb | { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> \land <var:c3> = <var:t> ^ <nat:3> } <var:c0> := <nat:8> { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> \land <var:c3> = <var:t> ^ <nat:3> \land <var:c0> = <nat:8> } | . Immediately after , \verb | { <var:K> = <var:t> } <var:c1> := <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> } | , \verb | { <var:K> = <var:t> \land <var:c1> = <var:t> } <var:c2> := <var:c1> * <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> } | and \verb | { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> } <var:c3> := <var:c2> * <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> \land <var:c3> = <var:t> ^ <nat:3> } | . This is given by the variable assignmet law defined in typical Hoare reasoning . Looking at the next command found in our series of commands , we see \verb | { <var:K> = <var:t> } <var:c1> := <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> } | . This is guaranteed using the environment update inference rule of usual Hoare techniques . Moving forward to the next step , \verb | { <var:K> = <var:t> } <var:c1> := <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> } | and \verb | { <var:K> = <var:t> \land <var:c1> = <var:t> } <var:c2> := <var:c1> * <var:K> { <var:K> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:K> = <var:t> }} <var:c1> := <var:K> ; <var:c2> := <var:c1> * <var:K> ; <var:c3> := <var:c2> * <var:K> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:7> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:7> ; <var:b> := <var:c3> <var:b> := <var:b> + <var:c2> <var:b> := <var:b> + <var:c1> <var:b> := <var:b> + <var:c0> {{ <var:b> = <nat:7> * <var:t> ^ <nat:3> + <nat:9> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <var:t> /\ <var:c2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <var:t> /\ <var:c2> = <var:t> ^ <nat:2> /\ <var:c3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <var:t> /\ <var:c2> = <var:t> ^ <nat:2> /\ <var:c3> = <var:t> ^ <nat:3> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <nat:7> * <var:t> /\ <var:c2> = <var:t> ^ <nat:2> /\ <var:c3> = <var:t> ^ <nat:3> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <nat:7> * <var:t> /\ <var:c2> = <nat:9> * <var:t> ^ <nat:2> /\ <var:c3> = <var:t> ^ <nat:3> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <nat:7> * <var:t> /\ <var:c2> = <nat:9> * <var:t> ^ <nat:2> /\ <var:c3> = <nat:7> * <var:t> ^ <nat:3> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <nat:7> * <var:t> /\ <var:c2> = <nat:9> * <var:t> ^ <nat:2> /\ <var:c0> = <nat:8> /\ <var:b> = <nat:7> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c1> = <nat:7> * <var:t> /\ <var:c0> = <nat:8> /\ <var:b> = <nat:7> * <var:t> ^ <nat:3> + <nat:9> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:c0> = <nat:8> /\ <var:b> = <nat:7> * <var:t> ^ <nat:3> + <nat:9> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:b> = <nat:7> * <var:t> ^ <nat:3> + <nat:9> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 