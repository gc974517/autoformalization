\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:5> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:f> ; <var:A> := <var:V1> ; <var:A> := <var:A> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assuming it to be that $ <var:f> = <var:m> $ , taking positive coefficients $ <var:m> $ , prior to evaluating the series of commands , then $ <var:A> = <nat:2> * <var:m> + <nat:5> $ once list of commands has finished . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:m> \} \\ <var:V0> := <nat:5> ; \\ \{ <var:f> = <var:m> \land <var:V0> = <nat:5> \} \\ <var:V1> := <nat:2> ; \\ \{ <var:f> = <var:m> \land <var:V0> = <nat:5> \land <var:V1> = <nat:2> \} \\ <var:V1> := <var:V1> * <var:f> ; \\ \{ <var:f> = <var:m> \land <var:V0> = <nat:5> \land <var:V1> = <nat:2> \times <var:m> \} \\ <var:A> := <var:V1> ; \\ \{ <var:f> = <var:m> \land <var:V0> = <nat:5> \land <var:A> = <nat:2> \times <var:m> \} \\ <var:A> := <var:A> + <var:V0> \\ \{ <var:f> = <var:m> \land <var:A> = <nat:2> \times <var:m> + <nat:5> \} \end{eqnarray} Hence , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:5> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:f> ; <var:A> := <var:V1> ; <var:A> := <var:A> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:f> = <var:m> }} <def:poly> {{ <var:A> = <nat:2> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:m> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:m> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:m> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:m> /\ <var:V0> = <nat:5> /\ <var:A> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:m> /\ <var:A> = <nat:2> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 