\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:9> ; <var:k> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:T> = <var:E> $ ahead of evaluating this code it must be that we have $ <var:k> = <nat:9> $ when set of commands has executed . \end{theorem} \begin{proof} The course of logic for our set of instructions can be done by usual Hoare reasoning . Moving forward , the variable assignmet statement giving $ <nat:9> $ toward $ <var:J0>$ . This command advances the condition $ \{ <var:T> = <var:E> \} $ as the condition $ \{ <var:T> = <var:E> \land <var:J0> = <nat:9> \} $ . This is given by the assignment law from Hoare reasoning . Observing the upcoming line of code in our list of instructions , the assignment command \verb | <var:k> := <var:J0> | . This advances the precondition $ \{ <var:T> = <var:E> \land <var:J0> = <nat:9> \} $ into the condition $ \{ <var:T> = <var:E> \land <var:k> = <nat:9> \} $ . This is rigorously given through the assignment rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:9> ; <var:k> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:T> = <var:E> }} <def:poly> {{ <var:k> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:k> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 