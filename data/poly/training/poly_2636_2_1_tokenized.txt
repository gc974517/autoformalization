\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:3> ; <var:q> := <var:h0> \end{verbatim} Assuming it to be that $ <var:t> = <var:c> $ before the execution of this code it holds that $ <var:q> = <nat:3> $ once program has finished executing . \end{theorem} \begin{proof} The proof of our code can be shown with typical Hoare reasoning . Stepping forward , we see \begin{eqnarray} \{ <var:t> = <var:c> \} \, <var:h0> := <nat:3> \, \{ <var:t> = <var:c> \land <var:h0> = <nat:3> \} \end{eqnarray} This is given through the variable update scheme given in usual Hoare reasoning . Shifting focus toward the next bit of code found in our code segment , \begin{eqnarray} \{ <var:t> = <var:c> \} \, <var:h0> := <nat:3> \, \{ <var:t> = <var:c> \land <var:h0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:t> = <var:c> }} <var:h0> := <nat:3> ; <var:q> := <var:h0> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 