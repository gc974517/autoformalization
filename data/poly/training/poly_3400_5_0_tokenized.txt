\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:9> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:j> ; <var:k> := <var:z1> ; <var:k> := <var:k> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Given that we have $ <var:j> = <var:I> $ , assuming some whole numbers $ <var:I> $ , prior to executing our list of commands it follows that we see $ <var:k> = <nat:4> * <var:I> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be shown using the following decorated code segment . \begin{eqnarray} \{ <var:j> = <var:I> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:j> = <var:I> \land <var:z0> = <nat:9> \} \\ <var:z1> := <nat:4> ; \\ \{ <var:j> = <var:I> \land <var:z0> = <nat:9> \land <var:z1> = <nat:4> \} \\ <var:z1> := <var:z1> * <var:j> ; \\ \{ <var:j> = <var:I> \land <var:z0> = <nat:9> \land <var:z1> = <nat:4> \times <var:I> \} \\ <var:k> := <var:z1> ; \\ \{ <var:j> = <var:I> \land <var:z0> = <nat:9> \land <var:k> = <nat:4> \times <var:I> \} \\ <var:k> := <var:k> + <var:z0> \\ \{ <var:j> = <var:I> \land <var:k> = <nat:4> \times <var:I> + <nat:9> \} \end{eqnarray} The application of Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:j> ; <var:k> := <var:z1> ; <var:k> := <var:k> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <def:poly> {{ <var:k> = <nat:4> * <var:I> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:z0> = <nat:9> /\ <var:k> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:k> = <nat:4> * <var:I> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 