\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:K1> := <var:W> ; <var:K2> := <var:K1> * <var:W> ; <var:K3> := <var:K2> * <var:W> ; <var:K0> := <nat:2> ; <var:K2> := <var:K2> * <nat:4> ; <var:K3> := <var:K3> * <nat:2> ; <var:u> := <var:K3> <var:u> := <var:u> + <var:K2> <var:u> := <var:u> + <var:K0> \end{verbatim} Assuming that $ <var:W> = <var:y> $ prior to the evaluation of the program , it must be that we have $ <var:u> = <nat:2> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning produces : \begin{eqnarray} \{ <var:W> = <var:y> \} \\ <var:K1> := <var:W> ; \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \} \\ <var:K2> := <var:K1> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \} \\ <var:K0> := <nat:2> ; \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \\ <var:K2> := <var:K2> * <nat:4> ; \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \\ <var:K3> := <var:K3> * <nat:2> ; \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:K3> = <nat:2> \times <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \\ <var:u> := <var:K3> \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:K0> = <nat:2> \land <var:u> = <nat:2> \times <var:y> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:K2> \\ \{ <var:W> = <var:y> \land <var:K1> = <var:y> \land <var:K0> = <nat:2> \land <var:u> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:K0> \\ \{ <var:W> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:2> \} \end{eqnarray} Hence , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:W> = <var:y> }} <var:K1> := <var:W> ; <var:K2> := <var:K1> * <var:W> ; <var:K3> := <var:K2> * <var:W> ; <var:K0> := <nat:2> ; <var:K2> := <var:K2> * <nat:4> ; <var:K3> := <var:K3> * <nat:2> ; <var:u> := <var:K3> <var:u> := <var:u> + <var:K2> <var:u> := <var:u> + <var:K0> {{ <var:u> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:K0> = <nat:2> /\ <var:u> = <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:K1> = <var:y> /\ <var:K0> = <nat:2> /\ <var:u> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 