\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:5> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:d> ; <var:Z> := <var:z1> ; <var:Z> := <var:Z> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow , given some positive coefficients $ <var:o> $ , it to hold that $ <var:d> = <var:o> $ ahead of the execution of our list of instructions it must be that $ <var:Z> = <nat:3> \times <var:o> + <nat:5> $ once series of instructions has exited . \end{theorem} \begin{proof} The course of logic for this set of commands can be demonstrated through typical Hoare reasoning . Observing the next commands in our program , \begin{eqnarray} \{ <var:d> = <var:o> \} \, <var:z0> := <nat:5> \, \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \} \\ \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \} \, <var:z1> := <nat:3> \, \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \land <var:z1> = <nat:3> \} \\ \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \land <var:z1> = <nat:3> \} \, <var:z1> := <var:z1> * <var:d> \, \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \land <var:z1> = <nat:3> \cdot <var:o> \} \\ \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \land <var:z1> = <nat:3> \cdot <var:o> \} \, <var:Z> := <var:z1> \, \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \land <var:Z> = <nat:3> \cdot <var:o> \} \\ \{ <var:d> = <var:o> \land <var:z0> = <nat:5> \land <var:Z> = <nat:3> \cdot <var:o> \} \, <var:Z> := <var:Z> + <var:z0\, \{ <var:d> = <var:o> \land <var:Z> = <nat:3> \cdot <var:o> + <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:5> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:d> ; <var:Z> := <var:z1> ; <var:Z> := <var:Z> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:d> = <var:o> }} <def:poly> {{ <var:Z> = <nat:3> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:o> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:o> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:o> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:o> /\ <var:z0> = <nat:5> /\ <var:Z> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:o> /\ <var:Z> = <nat:3> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 