\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:T> ; <var:H0> := <nat:8> ; <var:H1> := <var:H1> * <nat:5> ; <var:z> := <var:H1> <var:z> := <var:z> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assuming that we have $ <var:T> = <var:Z> $ , for some natural coefficients $ <var:Z> $ , prior to interpreting our list of commands , it must be that $ <var:z> = <nat:5> * <var:Z> + <nat:8> $ once series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:Z> \} \\ <var:H1> := <var:T> ; \\ \{ <var:T> = <var:Z> \land <var:H1> = <var:Z> \} \\ <var:H0> := <nat:8> ; \\ \{ <var:T> = <var:Z> \land <var:H1> = <var:Z> \land <var:H0> = <nat:8> \} \\ <var:H1> := <var:H1> * <nat:5> ; \\ \{ <var:T> = <var:Z> \land <var:H1> = <nat:5> \times <var:Z> \land <var:H0> = <nat:8> \} \\ <var:z> := <var:H1> \\ \{ <var:T> = <var:Z> \land <var:H0> = <nat:8> \land <var:z> = <nat:5> \times <var:Z> \} \\ <var:z> := <var:z> + <var:H0> \\ \{ <var:T> = <var:Z> \land <var:z> = <nat:5> \times <var:Z> + <nat:8> \} \end{eqnarray} Applying typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:T> ; <var:H0> := <nat:8> ; <var:H1> := <var:H1> * <nat:5> ; <var:z> := <var:H1> <var:z> := <var:z> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <def:poly> {{ <var:z> = <nat:5> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:H1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:H1> = <nat:5> * <var:Z> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:H0> = <nat:8> /\ <var:z> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:z> = <nat:5> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 