\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:4> ; <var:u> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Given ( given all $ <var:k> \in \mathbb{N} $ ) it to be that $ <var:a> = <var:k> $ before the execution of our list of commands it must be that $ <var:u> = <nat:4> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our code is evident with usual Hoare reasoning . Moving forward to the next step , we have the variable assignmet command \verb | <var:P0> := <nat:4> ; | . This forwards the condition $ \{ <var:a> = <var:k> \} $ as $ \{ <var:a> = <var:k> \land <var:P0> = <nat:4> \} $ . This is deduced through the assignment law of standard Hoare logic . Advancing to the subsequent bit of code in our program , we have the binding statement yielding $ <var:P0$ toward $ <var:u>$ . This transfers the condition $ \{ <var:a> = <var:k> \land <var:P0> = <nat:4> \} $ as the postcondition $ \{ <var:a> = <var:k> \land <var:u> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:4> ; <var:u> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:a> = <var:k> }} <def:poly> {{ <var:u> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:u> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 