\begin{document} \begin{theorem} Take a segment of code such that \begin{verbatim} <var:i1> := <var:o> ; <var:i0> := <nat:4> ; <var:i1> := <var:i1> * <nat:2> ; <var:H> := <var:i1> <var:H> := <var:H> + <var:i0> \end{verbatim} Assuming it to hold that $ <var:o> = <var:B> $ ahead of the evaluation of our segment of code then we have $ <var:H> = <nat:2> \cdot <var:B> + <nat:4> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare logic results in : \begin{eqnarray} \{ <var:o> = <var:B> \} \\ <var:i1> := <var:o> ; \\ \{ <var:o> = <var:B> \land <var:i1> = <var:B> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:o> = <var:B> \land <var:i1> = <var:B> \land <var:i0> = <nat:4> \} \\ <var:i1> := <var:i1> * <nat:2> ; \\ \{ <var:o> = <var:B> \land <var:i1> = <nat:2> * <var:B> \land <var:i0> = <nat:4> \} \\ <var:H> := <var:i1> \\ \{ <var:o> = <var:B> \land <var:i0> = <nat:4> \land <var:H> = <nat:2> * <var:B> \} \\ <var:H> := <var:H> + <var:i0> \\ \{ <var:o> = <var:B> \land <var:H> = <nat:2> * <var:B> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:o> = <var:B> }} <var:i1> := <var:o> ; <var:i0> := <nat:4> ; <var:i1> := <var:i1> * <nat:2> ; <var:H> := <var:i1> <var:H> := <var:H> + <var:i0> {{ <var:H> = <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:i1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:i1> = <var:B> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:i1> = <nat:2> * <var:B> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:i0> = <nat:4> /\ <var:H> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:H> = <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 