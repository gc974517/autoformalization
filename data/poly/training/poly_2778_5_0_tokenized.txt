\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:A> ; <var:n> := <var:J1> ; <var:n> := <var:n> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allowing $ <var:A> = <var:H> $ prior to the evaluation of the program , it must be that we see $ <var:n> = <nat:7> * <var:H> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is done using standard Hoare logic . Following , we see \begin{verbatim} { <var:A> = <var:H> } <var:J0> := <nat:4> { <var:A> = <var:H> \land <var:J0> = <nat:4> } { <var:A> = <var:H> \land <var:J0> = <nat:4> } <var:J1> := <nat:7> { <var:A> = <var:H> \land <var:J0> = <nat:4> \land <var:J1> = <nat:7> } { <var:A> = <var:H> \land <var:J0> = <nat:4> \land <var:J1> = <nat:7> } <var:J1> := <var:J1> * <var:A> { <var:A> = <var:H> \land <var:J0> = <nat:4> \land <var:J1> = <nat:7> * <var:H> } { <var:A> = <var:H> \land <var:J0> = <nat:4> \land <var:J1> = <nat:7> * <var:H> } <var:n> := <var:J1> { <var:A> = <var:H> \land <var:J0> = <nat:4> \land <var:n> = <nat:7> * <var:H> } { <var:A> = <var:H> \land <var:J0> = <nat:4> \land <var:n> = <nat:7> * <var:H> } <var:n> := <var:n> + <var:J0{ <var:A> = <var:H> \land <var:n> = <nat:7> * <var:H> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:A> ; <var:n> := <var:J1> ; <var:n> := <var:n> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <def:poly> {{ <var:n> = <nat:7> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:J0> = <nat:4> /\ <var:n> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:n> = <nat:7> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 