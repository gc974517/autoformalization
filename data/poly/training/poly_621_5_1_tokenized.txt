\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:m> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:4> ; <var:C> := <var:M1> <var:C> := <var:C> + <var:M0> \end{verbatim} Given that $ <var:m> = <var:G> $ before interpreting the code segment then we see $ <var:C> = <nat:4> \cdot <var:G> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code is accomplished using this decorated list of commands . \begin{eqnarray} \{ <var:m> = <var:G> \} \\ <var:M1> := <var:m> ; \\ \{ <var:m> = <var:G> \land <var:M1> = <var:G> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:m> = <var:G> \land <var:M1> = <var:G> \land <var:M0> = <nat:4> \} \\ <var:M1> := <var:M1> * <nat:4> ; \\ \{ <var:m> = <var:G> \land <var:M1> = <nat:4> \cdot <var:G> \land <var:M0> = <nat:4> \} \\ <var:C> := <var:M1> \\ \{ <var:m> = <var:G> \land <var:M0> = <nat:4> \land <var:C> = <nat:4> \cdot <var:G> \} \\ <var:C> := <var:C> + <var:M0> \\ \{ <var:m> = <var:G> \land <var:C> = <nat:4> \cdot <var:G> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:m> = <var:G> }} <var:M1> := <var:m> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:4> ; <var:C> := <var:M1> <var:C> := <var:C> + <var:M0> {{ <var:C> = <nat:4> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:M1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:M1> = <var:G> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:M1> = <nat:4> * <var:G> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:M0> = <nat:4> /\ <var:C> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:C> = <nat:4> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 