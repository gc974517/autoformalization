\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:5> ; <var:F> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:K> = <var:c> $ prior to evaluating this series of instructions then we have $ <var:F> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:c> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:K> = <var:c> \land <var:o0> = <nat:5> \} \\ <var:F> := <var:o0> \\ \{ <var:K> = <var:c> \land <var:F> = <nat:5> \} \end{eqnarray} Using Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:5> ; <var:F> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <def:poly> {{ <var:F> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:F> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 