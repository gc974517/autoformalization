\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:6> ; <var:b> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:P> = <var:U> $ , for some natural coefficients $ <var:U> $ , ahead of running this set of commands it holds that $ <var:b> = <nat:6> $ . \end{theorem} \begin{proof} The method of proof for our list of commands is shown by standard Hoare logic . Paying attention to the proceeding commands contained in our list of instructions , we see \begin{verbatim} { <var:P> = <var:U> } <var:u0> := <nat:6> { <var:P> = <var:U> \land <var:u0> = <nat:6> } { <var:P> = <var:U> \land <var:u0> = <nat:6> } <var:b> := <var:u0{ <var:P> = <var:U> \land <var:b> = <nat:6> } \end{verbatim} This is known to be sound by the binding inference rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:b> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:P> = <var:U> }} <def:poly> {{ <var:b> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:b> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 