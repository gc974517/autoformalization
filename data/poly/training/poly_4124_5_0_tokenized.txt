\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:X0> := <nat:9> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:l> ; <var:e> := <var:X1> ; <var:e> := <var:e> + <var:X0> \end{verbatim} Given $ <var:l> = <var:t> $ prior to interpreting the series of instructions , then we have $ <var:e> = <nat:8> \times <var:t> + <nat:9> $ . \end{theorem} \begin{proof} The argument for this code segment can be demonstrated using typical Hoare reasoning . After , we have \verb | { <var:l> = <var:t> } <var:X0> := <nat:9> { <var:l> = <var:t> \land <var:X0> = <nat:9> } | , \verb | { <var:l> = <var:t> \land <var:X0> = <nat:9> } <var:X1> := <nat:8> { <var:l> = <var:t> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> } | , \verb | { <var:l> = <var:t> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> } <var:X1> := <var:X1> * <var:l> { <var:l> = <var:t> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> * <var:t> } | and \verb | { <var:l> = <var:t> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> * <var:t> } <var:e> := <var:X1> { <var:l> = <var:t> \land <var:X0> = <nat:9> \land <var:e> = <nat:8> * <var:t> } | . This is shown by the assignment law obtained from usual Hoare techniques . Moving forward , we have \verb | { <var:l> = <var:t> } <var:X0> := <nat:9> { <var:l> = <var:t> \land <var:X0> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:l> = <var:t> }} <var:X0> := <nat:9> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:l> ; <var:e> := <var:X1> ; <var:e> := <var:e> + <var:X0> {{ <var:e> = <nat:8> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:X0> = <nat:9> /\ <var:e> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:e> = <nat:8> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 