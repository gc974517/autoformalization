\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:2> ; <var:A> := <var:T0> \end{verbatim} Allow it to be that $ <var:V> = <var:b> $ --- letting integers $ <var:b> $ --- before interpreting our list of commands , it must be that we have $ <var:A> = <nat:2> $ once set of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:b> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:V> = <var:b> \land <var:T0> = <nat:2> \} \\ <var:A> := <var:T0> \\ \{ <var:V> = <var:b> \land <var:A> = <nat:2> \} \end{eqnarray} Using Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:V> = <var:b> }} <var:T0> := <nat:2> ; <var:A> := <var:T0> {{ <var:A> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:A> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 