\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:Y0> := <nat:1> ; <var:i> := <var:Y0> \end{verbatim} Allow that we have $ <var:b> = <var:S> $ ahead of the execution of this series of commands it holds that we have $ <var:i> = <nat:1> $ after set of instructions has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be demonstrated using standard Hoare techniques . Moving on to the proceeding piece of code in the series of commands , we have the variable update statement yielding $ <nat:1> $ into $ <var:Y0>$ . This advances the precondition $ \{ <var:b> = <var:S> \} $ into the condition $ \{ <var:b> = <var:S> \land <var:Y0> = <nat:1> \} $ . This is deduced through the assignment inference rule given by standard Hoare logic . Keeping momentum , we see the variable binding code assigning $ <var:Y0$ toward $ <var:i>$ . This statement advances the condition $ \{ <var:b> = <var:S> \land <var:Y0> = <nat:1> \} $ toward the condition $ \{ <var:b> = <var:S> \land <var:i> = <nat:1> \} $ . This is known to be sound through the assignment law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <var:Y0> := <nat:1> ; <var:i> := <var:Y0> {{ <var:i> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:i> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 