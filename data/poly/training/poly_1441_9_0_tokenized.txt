\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:4> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:x> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:x> ; <var:g2> := <var:g2> * <var:x> ; <var:e> := <var:g2> ; <var:e> := <var:e> + <var:g1> ; <var:e> := <var:e> + <var:g0> \end{verbatim} Allowing that $ <var:x> = <var:O> $ ( given some positive coefficients $ <var:O> $ ) prior to executing our set of instructions it holds that we see $ <var:e> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the code can be done by usual Hoare logic . Observing the subsequent lines found in our set of commands , \[ \begin{tabular} {rcl} \{ <var:x> = <var:O> \} & <var:g0> := <nat:4> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \} & <var:g1> := <nat:2> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \} & <var:g1> := <var:g1> * <var:x> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \} & <var:g2> := <nat:3> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:g2> = <nat:3> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:g2> = <nat:3> \} & <var:g2> := <var:g2> * <var:x> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:g2> = <nat:3> \times <var:O> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:g2> = <nat:3> \times <var:O> \} & <var:g2> := <var:g2> * <var:x> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:g2> = <nat:3> \times <var:O> ^ <nat:2> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:g2> = <nat:3> \times <var:O> ^ <nat:2> \} & <var:e> := <var:g2> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:e> = <nat:3> \times <var:O> ^ <nat:2> \} \\ \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:g1> = <nat:2> \times <var:O> \land <var:e> = <nat:3> \times <var:O> ^ <nat:2> \} & <var:e> := <var:e> + <var:g1> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \land <var:e> = <nat:3> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> \} \end{tabular} Moving on , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:O> \} & <var:g0> := <nat:4> & \{ <var:x> = <var:O> \land <var:g0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:x> = <var:O> }} <var:g0> := <nat:4> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:x> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:x> ; <var:g2> := <var:g2> * <var:x> ; <var:e> := <var:g2> ; <var:e> := <var:e> + <var:g1> ; <var:e> := <var:e> + <var:g0> {{ <var:e> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:2> * <var:O> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:2> * <var:O> /\ <var:g2> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:2> * <var:O> /\ <var:g2> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:2> * <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:g0> = <nat:4> /\ <var:e> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 