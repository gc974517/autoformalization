\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:q> ; <var:O2> := <var:O1> * <var:q> ; <var:O3> := <var:O2> * <var:q> ; <var:O0> := <nat:4> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:7> ; <var:A> := <var:O3> <var:A> := <var:A> + <var:O2> <var:A> := <var:A> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:q> = <var:Y> $ ahead of executing our set of commands , then we have $ <var:A> = <nat:7> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:Y> \} \\ <var:O1> := <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \} \\ <var:O2> := <var:O1> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O2> := <var:O2> * <nat:9> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O3> := <var:O3> * <nat:7> ; \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:O3> = <nat:7> \cdot <var:Y> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:A> := <var:O3> \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:O0> = <nat:4> \land <var:A> = <nat:7> \cdot <var:Y> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:O2> \\ \{ <var:q> = <var:Y> \land <var:O1> = <var:Y> \land <var:O0> = <nat:4> \land <var:A> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:9> \cdot <var:Y> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:O0> \\ \{ <var:q> = <var:Y> \land <var:A> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:9> \cdot <var:Y> ^ <nat:2> + <nat:4> \} \end{eqnarray} Applying typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:q> ; <var:O2> := <var:O1> * <var:q> ; <var:O3> := <var:O2> * <var:q> ; <var:O0> := <nat:4> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:7> ; <var:A> := <var:O3> <var:A> := <var:A> + <var:O2> <var:A> := <var:A> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <def:poly> {{ <var:A> = <nat:7> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:Y> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O0> = <nat:4> /\ <var:A> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O0> = <nat:4> /\ <var:A> = <nat:7> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:A> = <nat:7> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 