\begin{document} \begin{theorem} Take the following code segment as follows \begin{verbatim} <var:o1> := <var:F> ; <var:o2> := <var:o1> * <var:F> ; <var:o3> := <var:o2> * <var:F> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:4> ; <var:T> := <var:o3> <var:T> := <var:T> + <var:o2> <var:T> := <var:T> + <var:o1> <var:T> := <var:T> + <var:o0> \end{verbatim} Assuming that $ <var:F> = <var:N> $ ( letting natural numbers $ <var:N> $ ) before evaluating our segment of code it follows that we see $ <var:T> = <nat:4> \times <var:N> ^ <nat:3> + <nat:8> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> + <nat:8> $ once set of commands is done . \end{theorem} \begin{proof} Note that this decorated list of commands . \begin{eqnarray} \{ <var:F> = <var:N> \} \\ <var:o1> := <var:F> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <var:N> \} \\ <var:o2> := <var:o1> * <var:F> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <var:N> \land <var:o2> = <var:N> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:F> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <var:N> \land <var:o2> = <var:N> ^ <nat:2> \land <var:o3> = <var:N> ^ <nat:3> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <var:N> \land <var:o2> = <var:N> ^ <nat:2> \land <var:o3> = <var:N> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ <var:o1> := <var:o1> * <nat:6> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <nat:6> \cdot <var:N> \land <var:o2> = <var:N> ^ <nat:2> \land <var:o3> = <var:N> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ <var:o2> := <var:o2> * <nat:8> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <nat:6> \cdot <var:N> \land <var:o2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:o3> = <var:N> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ <var:o3> := <var:o3> * <nat:4> ; \\ \{ <var:F> = <var:N> \land <var:o1> = <nat:6> \cdot <var:N> \land <var:o2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:N> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ <var:T> := <var:o3> \\ \{ <var:F> = <var:N> \land <var:o1> = <nat:6> \cdot <var:N> \land <var:o2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:o0> = <nat:8> \land <var:T> = <nat:4> \cdot <var:N> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:o2> \\ \{ <var:F> = <var:N> \land <var:o1> = <nat:6> \cdot <var:N> \land <var:o0> = <nat:8> \land <var:T> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:o1> \\ \{ <var:F> = <var:N> \land <var:o0> = <nat:8> \land <var:T> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> \} \\ <var:T> := <var:T> + <var:o0> \\ \{ <var:F> = <var:N> \land <var:T> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> + <nat:8> \} \end{eqnarray} Applying standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:F> = <var:N> }} <var:o1> := <var:F> ; <var:o2> := <var:o1> * <var:F> ; <var:o3> := <var:o2> * <var:F> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:4> ; <var:T> := <var:o3> <var:T> := <var:T> + <var:o2> <var:T> := <var:T> + <var:o1> <var:T> := <var:T> + <var:o0> {{ <var:T> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <var:N> /\ <var:o2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <var:N> /\ <var:o2> = <var:N> ^ <nat:2> /\ <var:o3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <var:N> /\ <var:o2> = <var:N> ^ <nat:2> /\ <var:o3> = <var:N> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <nat:6> * <var:N> /\ <var:o2> = <var:N> ^ <nat:2> /\ <var:o3> = <var:N> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <nat:6> * <var:N> /\ <var:o2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:o3> = <var:N> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <nat:6> * <var:N> /\ <var:o2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:N> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <nat:6> * <var:N> /\ <var:o2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:o0> = <nat:8> /\ <var:T> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o1> = <nat:6> * <var:N> /\ <var:o0> = <nat:8> /\ <var:T> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:o0> = <nat:8> /\ <var:T> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:T> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 