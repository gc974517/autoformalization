\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:C> ; <var:d2> := <var:d1> * <var:C> ; <var:d3> := <var:d2> * <var:C> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:6> ; <var:d2> := <var:d2> * <nat:7> ; <var:d3> := <var:d3> * <nat:4> ; <var:R> := <var:d3> <var:R> := <var:R> + <var:d2> <var:R> := <var:R> + <var:d1> <var:R> := <var:R> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Allow that we have $ <var:C> = <var:A> $ --- with some natural numbers $ <var:A> $ --- ahead of interpreting our list of instructions , then we see $ <var:R> = <nat:4> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this list of commands can be shown with typical Hoare logic . Moving forward to the next bit of code contained in our list of instructions , we see the variable binding command \verb | <var:d1> := <var:C> ; | . This forwards the condition $ \{ <var:C> = <var:A> \} $ into the condition $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \} $ . This is ensured using the assignment inference rule defined by usual Hoare logic . Moving on to the next step , we see the line letting $ <var:d1> * <var:C> $ as $ <var:d2>$ . This advances the condition $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \} $ to the condition $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \land <var:d2> = <var:A> ^ <nat:2> \} $ . Moving forward to the proceeding command in our code segment , we have the assignment command assigning $ <var:d2> * <var:C> $ into $ <var:d3>$ . This line takes the condition $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \land <var:d2> = <var:A> ^ <nat:2> \} $ into the condition $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \land <var:d2> = <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \} $ . Focusing on the upcoming line of code in our series of commands , we see the variable update command \verb | <var:d0> := <nat:3> ; | . This transfers the precondition $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \land <var:d2> = <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \} $ into $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \land <var:d2> = <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ . This is rigorously given using the assignment law defined by usual Hoare techniques . Advancing to the next step , we see the variable binding command \verb | <var:d1> := <var:d1> * <nat:6> ; | . This redefines $ \{ <var:C> = <var:A> \land <var:d1> = <var:A> \land <var:d2> = <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ toward $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ . Moving on , we see the variable update command yielding $ <var:d2> * <nat:7> $ as $ <var:d2>$ . This command advances the precondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ into $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ . This is given with the assignment rule given by standard Hoare techniques . Paying attention to the following statement in our program , we have the variable binding command \verb | <var:d3> := <var:d3> * <nat:4> ; | . This forwards $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:d3> = <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:d3> = <nat:4> \times <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ . Further , we see the environment update code \verb | <var:R> := <var:d3> | . This command transfers the precondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:d3> = <nat:4> \times <var:A> ^ <nat:3> \land <var:d0> = <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:d0> = <nat:3> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> \} $ . Going to the next step , we see the command binding $ <var:R> + <var:d2$ into $ <var:R>$ . This moves the precondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:d0> = <nat:3> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d0> = <nat:3> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme given by usual Hoare techniques . Taking another step toward the subsequent line found in the list of instructions , we see the environment update code assigning $ <var:R> + <var:d1$ to $ <var:R>$ . This advances the precondition $ \{ <var:C> = <var:A> \land <var:d1> = <nat:6> \times <var:A> \land <var:d0> = <nat:3> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> \} $ to $ \{ <var:C> = <var:A> \land <var:d0> = <nat:3> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> \} $ . This is rigorously given using the assignment inference rule in standard Hoare reasoning . Honing in on the subsequent command seen in the program , we see the variable assignmet command \verb | <var:R> := <var:R> + <var:d0> | . This advances the condition $ \{ <var:C> = <var:A> \land <var:d0> = <nat:3> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> \} $ into $ \{ <var:C> = <var:A> \land <var:R> = <nat:4> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> + <nat:3> \} $ . This is shown through the assignment scheme in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:C> ; <var:d2> := <var:d1> * <var:C> ; <var:d3> := <var:d2> * <var:C> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:6> ; <var:d2> := <var:d2> * <nat:7> ; <var:d3> := <var:d3> * <nat:4> ; <var:R> := <var:d3> <var:R> := <var:R> + <var:d2> <var:R> := <var:R> + <var:d1> <var:R> := <var:R> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:C> = <var:A> }} <def:poly> {{ <var:R> = <nat:4> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <var:A> /\ <var:d2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <var:A> /\ <var:d2> = <var:A> ^ <nat:2> /\ <var:d3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <var:A> /\ <var:d2> = <var:A> ^ <nat:2> /\ <var:d3> = <var:A> ^ <nat:3> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <nat:6> * <var:A> /\ <var:d2> = <var:A> ^ <nat:2> /\ <var:d3> = <var:A> ^ <nat:3> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <nat:6> * <var:A> /\ <var:d2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:d3> = <var:A> ^ <nat:3> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <nat:6> * <var:A> /\ <var:d2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:d3> = <nat:4> * <var:A> ^ <nat:3> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <nat:6> * <var:A> /\ <var:d2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:d0> = <nat:3> /\ <var:R> = <nat:4> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d1> = <nat:6> * <var:A> /\ <var:d0> = <nat:3> /\ <var:R> = <nat:4> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:d0> = <nat:3> /\ <var:R> = <nat:4> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:R> = <nat:4> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 