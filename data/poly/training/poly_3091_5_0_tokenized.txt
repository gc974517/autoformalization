\begin{document} \begin{theorem} Take a segment of code as \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:T> ; <var:U> := <var:d1> ; <var:U> := <var:U> + <var:d0> \end{verbatim} Allow ( given any $ <var:P> \in \mathbb{Z}^+ $ ) that $ <var:T> = <var:P> $ before interpreting the code it follows that we see $ <var:U> = <nat:3> * <var:P> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this code segment is demonstrated with usual Hoare techniques . Moving forward to the next step , we see \begin{eqnarray} \{ <var:T> = <var:P> \} \, <var:d0> := <nat:1> \, \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \} \\ \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \} \, <var:d1> := <nat:3> \, \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \land <var:d1> = <nat:3> \} \\ \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \land <var:d1> = <nat:3> \} \, <var:d1> := <var:d1> * <var:T> \, \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \land <var:d1> = <nat:3> \times <var:P> \} \\ \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \land <var:d1> = <nat:3> \times <var:P> \} \, <var:U> := <var:d1> \, \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \land <var:U> = <nat:3> \times <var:P> \} \\ \{ <var:T> = <var:P> \land <var:d0> = <nat:1> \land <var:U> = <nat:3> \times <var:P> \} \, <var:U> := <var:U> + <var:d0\, \{ <var:T> = <var:P> \land <var:U> = <nat:3> \times <var:P> + <nat:1> \} \end{eqnarray} This is guaranteed using the binding inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <var:d0> := <nat:1> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:T> ; <var:U> := <var:d1> ; <var:U> := <var:U> + <var:d0> {{ <var:U> = <nat:3> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:d0> = <nat:1> /\ <var:U> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:U> = <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 