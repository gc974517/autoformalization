\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:9> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:u> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:u> ; <var:M2> := <var:M2> * <var:u> ; <var:m> := <var:M2> ; <var:m> := <var:m> + <var:M1> ; <var:m> := <var:m> + <var:M0> \end{verbatim} Given $ <var:u> = <var:B> $ prior to executing this series of instructions then we see $ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:u> = <var:B> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \} \\ <var:M1> := <nat:8> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:M1> = <nat:8> \} \\ <var:M1> := <var:M1> * <var:u> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:M1> = <nat:8> * <var:B> \} \\ <var:M2> := <nat:3> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:M1> = <nat:8> * <var:B> \land <var:M2> = <nat:3> \} \\ <var:M2> := <var:M2> * <var:u> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:M1> = <nat:8> * <var:B> \land <var:M2> = <nat:3> * <var:B> \} \\ <var:M2> := <var:M2> * <var:u> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:M1> = <nat:8> * <var:B> \land <var:M2> = <nat:3> * <var:B> ^ <nat:2> \} \\ <var:m> := <var:M2> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:M1> = <nat:8> * <var:B> \land <var:m> = <nat:3> * <var:B> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:M1> ; \\ \{ <var:u> = <var:B> \land <var:M0> = <nat:9> \land <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} \\ <var:m> := <var:m> + <var:M0> \\ \{ <var:u> = <var:B> \land <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> \} \end{eqnarray} As a result , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:u> = <var:B> }} <var:M0> := <nat:9> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:u> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:u> ; <var:M2> := <var:M2> * <var:u> ; <var:m> := <var:M2> ; <var:m> := <var:m> + <var:M1> ; <var:m> := <var:m> + <var:M0> {{ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:8> * <var:B> /\ <var:M2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:8> * <var:B> /\ <var:M2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:8> * <var:B> /\ <var:M2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:8> * <var:B> /\ <var:m> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:M0> = <nat:9> /\ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 