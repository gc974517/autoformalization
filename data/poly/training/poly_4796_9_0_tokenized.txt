\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:8> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:H> ; <var:E2> := <nat:8> ; <var:E2> := <var:E2> * <var:H> ; <var:E2> := <var:E2> * <var:H> ; <var:Q> := <var:E2> ; <var:Q> := <var:Q> + <var:E1> ; <var:Q> := <var:Q> + <var:E0> \end{verbatim} Allowing $ <var:H> = <var:F> $ ( assuming some $ <var:F> $ ) before running this list of instructions it follows that $ <var:Q> = <nat:8> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:H> = <var:F> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \} \\ <var:E1> := <nat:2> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:E1> = <nat:2> \} \\ <var:E1> := <var:E1> * <var:H> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:E1> = <nat:2> \times <var:F> \} \\ <var:E2> := <nat:8> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:E1> = <nat:2> \times <var:F> \land <var:E2> = <nat:8> \} \\ <var:E2> := <var:E2> * <var:H> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:E1> = <nat:2> \times <var:F> \land <var:E2> = <nat:8> \times <var:F> \} \\ <var:E2> := <var:E2> * <var:H> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:E1> = <nat:2> \times <var:F> \land <var:E2> = <nat:8> \times <var:F> ^ <nat:2> \} \\ <var:Q> := <var:E2> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:E1> = <nat:2> \times <var:F> \land <var:Q> = <nat:8> \times <var:F> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:E1> ; \\ \{ <var:H> = <var:F> \land <var:E0> = <nat:8> \land <var:Q> = <nat:8> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> \} \\ <var:Q> := <var:Q> + <var:E0> \\ \{ <var:H> = <var:F> \land <var:Q> = <nat:8> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:8> \} \end{eqnarray} As a consequence , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:H> = <var:F> }} <var:E0> := <nat:8> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:H> ; <var:E2> := <nat:8> ; <var:E2> := <var:E2> * <var:H> ; <var:E2> := <var:E2> * <var:H> ; <var:Q> := <var:E2> ; <var:Q> := <var:Q> + <var:E1> ; <var:Q> := <var:Q> + <var:E0> {{ <var:Q> = <nat:8> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:2> * <var:F> /\ <var:E2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:2> * <var:F> /\ <var:E2> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:2> * <var:F> /\ <var:E2> = <nat:8> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:2> * <var:F> /\ <var:Q> = <nat:8> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:E0> = <nat:8> /\ <var:Q> = <nat:8> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:Q> = <nat:8> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 