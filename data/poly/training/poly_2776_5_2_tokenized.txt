\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:v> := <nat:2> ; <var:v> := <nat:4> + <var:v> * <var:d> ; <var:v> := <nat:4> + <var:v> * <var:d> ; <var:v> := <nat:4> + <var:v> * <var:d> ; <var:v> := <nat:4> + <var:v> * <var:d> \end{verbatim} Assuming given natural numbers $ <var:b> $ $ <var:d> = <var:b> $ prior to executing the series of instructions it follows that $ <var:v> = <nat:2> \times <var:b> ^ <nat:4> + <nat:4> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:b> \} \\ <var:v> := <nat:2> ; \\ \{ <var:d> = <var:b> \land <var:v> = <nat:2> \} \\ <var:v> := <nat:4> + <var:v> * <var:d> ; \\ \{ <var:d> = <var:b> \land <var:v> = <nat:2> * <var:b> + <nat:4> \} \\ <var:v> := <nat:4> + <var:v> * <var:d> ; \\ \{ <var:d> = <var:b> \land <var:v> = <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> \} \\ <var:v> := <nat:4> + <var:v> * <var:d> ; \\ \{ <var:d> = <var:b> \land <var:v> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> \} \\ <var:v> := <nat:4> + <var:v> * <var:d> \\ \{ <var:d> = <var:b> \land <var:v> = <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> \} \end{eqnarray} The application of Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:d> = <var:b> }} <var:v> := <nat:2> ; <var:v> := <nat:4> + <var:v> * <var:d> ; <var:v> := <nat:4> + <var:v> * <var:d> ; <var:v> := <nat:4> + <var:v> * <var:d> ; <var:v> := <nat:4> + <var:v> * <var:d> {{ <var:v> = <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:b> /\ <var:v> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:b> /\ <var:v> = <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:b> /\ <var:v> = <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:b> /\ <var:v> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:b> /\ <var:v> = <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 