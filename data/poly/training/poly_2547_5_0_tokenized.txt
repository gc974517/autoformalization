\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:3> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:Z> ; <var:D> := <var:O1> ; <var:D> := <var:D> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:Z> = <var:J> $ --- given some positive integer coefficients $ <var:J> $ --- prior to executing the list of commands it must be that $ <var:D> = <nat:3> * <var:J> + <nat:3> $ when code segment has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:J> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:Z> = <var:J> \land <var:O0> = <nat:3> \} \\ <var:O1> := <nat:3> ; \\ \{ <var:Z> = <var:J> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \} \\ <var:O1> := <var:O1> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> * <var:J> \} \\ <var:D> := <var:O1> ; \\ \{ <var:Z> = <var:J> \land <var:O0> = <nat:3> \land <var:D> = <nat:3> * <var:J> \} \\ <var:D> := <var:D> + <var:O0> \\ \{ <var:Z> = <var:J> \land <var:D> = <nat:3> * <var:J> + <nat:3> \} \end{eqnarray} Using usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:Z> ; <var:D> := <var:O1> ; <var:D> := <var:D> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <def:poly> {{ <var:D> = <nat:3> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:O0> = <nat:3> /\ <var:D> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:D> = <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 