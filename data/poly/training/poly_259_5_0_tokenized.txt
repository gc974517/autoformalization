\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:I> ; <var:x> := <var:X1> ; <var:x> := <var:x> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:I> = <var:u> $ given $ <var:u> \in \mathbb{N} $ prior to running the program it follows that $ <var:x> = <nat:2> * <var:u> + <nat:2> $ after list of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare logic yields : \begin{eqnarray} \{ <var:I> = <var:u> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:I> = <var:u> \land <var:X0> = <nat:2> \} \\ <var:X1> := <nat:2> ; \\ \{ <var:I> = <var:u> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \} \\ <var:X1> := <var:X1> * <var:I> ; \\ \{ <var:I> = <var:u> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> * <var:u> \} \\ <var:x> := <var:X1> ; \\ \{ <var:I> = <var:u> \land <var:X0> = <nat:2> \land <var:x> = <nat:2> * <var:u> \} \\ <var:x> := <var:x> + <var:X0> \\ \{ <var:I> = <var:u> \land <var:x> = <nat:2> * <var:u> + <nat:2> \} \end{eqnarray} Given the above , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:2> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:I> ; <var:x> := <var:X1> ; <var:x> := <var:x> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:I> = <var:u> }} <def:poly> {{ <var:x> = <nat:2> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:X0> = <nat:2> /\ <var:x> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:x> = <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 