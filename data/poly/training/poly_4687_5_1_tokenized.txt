\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:w1> := <var:u> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:4> ; <var:E> := <var:w1> <var:E> := <var:E> + <var:w0> \end{verbatim} Assuming it to hold that $ <var:u> = <var:H> $ , with some $ <var:H> \in \mathbb{N} $ , ahead of the evaluation of this code segment it follows that $ <var:E> = <nat:4> \cdot <var:H> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be given through Hoare reasoning . Moving on , we see the binding line \verb | <var:w1> := <var:u> ; | . This redefines $ \{ <var:u> = <var:H> \} $ as $ \{ <var:u> = <var:H> \land <var:w1> = <var:H> \} $ . Focusing on the subsequent bit of code seen in the segment of code , the assignment statement yielding $ <nat:8> $ into $ <var:w0>$ . This redefines the condition $ \{ <var:u> = <var:H> \land <var:w1> = <var:H> \} $ as the postcondition $ \{ <var:u> = <var:H> \land <var:w1> = <var:H> \land <var:w0> = <nat:8> \} $ . Immediately after , we have the variable assignmet code binding $ <var:w1> * <nat:4> $ into $ <var:w1>$ . This line moves the precondition $ \{ <var:u> = <var:H> \land <var:w1> = <var:H> \land <var:w0> = <nat:8> \} $ toward the condition $ \{ <var:u> = <var:H> \land <var:w1> = <nat:4> \cdot <var:H> \land <var:w0> = <nat:8> \} $ . This is ensured with the assignment law given by typical Hoare logic . Going to the next step , we see the variable assignmet line \verb | <var:E> := <var:w1> | . This transfers $ \{ <var:u> = <var:H> \land <var:w1> = <nat:4> \cdot <var:H> \land <var:w0> = <nat:8> \} $ to the condition $ \{ <var:u> = <var:H> \land <var:w0> = <nat:8> \land <var:E> = <nat:4> \cdot <var:H> \} $ . This is deduced with the assignment scheme from usual Hoare reasoning . Paying attention to the proceeding line seen in the segment of code , we see the assignment code \verb | <var:E> := <var:E> + <var:w0> | . This line takes the precondition $ \{ <var:u> = <var:H> \land <var:w0> = <nat:8> \land <var:E> = <nat:4> \cdot <var:H> \} $ into $ \{ <var:u> = <var:H> \land <var:E> = <nat:4> \cdot <var:H> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:u> = <var:H> }} <var:w1> := <var:u> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:4> ; <var:E> := <var:w1> <var:E> := <var:E> + <var:w0> {{ <var:E> = <nat:4> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w1> = <var:H> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w1> = <nat:4> * <var:H> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w0> = <nat:8> /\ <var:E> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:E> = <nat:4> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 