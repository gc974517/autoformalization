\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:7> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:k> ; <var:c2> := <nat:5> ; <var:c2> := <var:c2> * <var:k> ; <var:c2> := <var:c2> * <var:k> ; <var:a> := <var:c2> ; <var:a> := <var:a> + <var:c1> ; <var:a> := <var:a> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allowing , for every natural coefficients $ <var:P> $ , it to hold that $ <var:k> = <var:P> $ prior to the execution of this program it follows that we see $ <var:a> = <nat:5> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare logic gives us : \begin{eqnarray} \{ <var:k> = <var:P> \} \\ <var:c0> := <nat:7> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \} \\ <var:c1> := <nat:4> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:k> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:c1> = <nat:4> * <var:P> \} \\ <var:c2> := <nat:5> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:c1> = <nat:4> * <var:P> \land <var:c2> = <nat:5> \} \\ <var:c2> := <var:c2> * <var:k> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:c1> = <nat:4> * <var:P> \land <var:c2> = <nat:5> * <var:P> \} \\ <var:c2> := <var:c2> * <var:k> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:c1> = <nat:4> * <var:P> \land <var:c2> = <nat:5> * <var:P> ^ <nat:2> \} \\ <var:a> := <var:c2> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:c1> = <nat:4> * <var:P> \land <var:a> = <nat:5> * <var:P> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:c1> ; \\ \{ <var:k> = <var:P> \land <var:c0> = <nat:7> \land <var:a> = <nat:5> * <var:P> ^ <nat:2> + <nat:4> * <var:P> \} \\ <var:a> := <var:a> + <var:c0> \\ \{ <var:k> = <var:P> \land <var:a> = <nat:5> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:7> \} \end{eqnarray} Given the above , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:7> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:k> ; <var:c2> := <nat:5> ; <var:c2> := <var:c2> * <var:k> ; <var:c2> := <var:c2> * <var:k> ; <var:a> := <var:c2> ; <var:a> := <var:a> + <var:c1> ; <var:a> := <var:a> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:k> = <var:P> }} <def:poly> {{ <var:a> = <nat:5> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:4> * <var:P> /\ <var:c2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:4> * <var:P> /\ <var:c2> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:4> * <var:P> /\ <var:c2> = <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:4> * <var:P> /\ <var:a> = <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:c0> = <nat:7> /\ <var:a> = <nat:5> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:a> = <nat:5> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 