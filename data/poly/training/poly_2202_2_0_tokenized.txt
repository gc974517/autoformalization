\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:6> ; <var:j> := <var:c0> \end{verbatim} Allow that we have $ <var:E> = <var:v> $ before evaluating our program it must be that we have $ <var:j> = <nat:6> $ when program terminates . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:E> = <var:v> \} \\ <var:c0> := <nat:6> ; \\ \{ <var:E> = <var:v> \land <var:c0> = <nat:6> \} \\ <var:j> := <var:c0> \\ \{ <var:E> = <var:v> \land <var:j> = <nat:6> \} \end{eqnarray} Continuing running this program gives us : \begin{eqnarray} \end{eqnarray} Given the above , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:E> = <var:v> }} <var:c0> := <nat:6> ; <var:j> := <var:c0> {{ <var:j> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:j> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 