\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:4> ; <var:n> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allow $ <var:s> = <var:e> $ for positive coefficients $ <var:e> $ prior to evaluating the series of commands it follows that we have $ <var:n> = <nat:4> $ when series of commands has finished . \end{theorem} \begin{proof} Note that this decorated set of instructions . \begin{eqnarray} \{ <var:s> = <var:e> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:s> = <var:e> \land <var:k0> = <nat:4> \} \\ <var:n> := <var:k0> \\ \{ <var:s> = <var:e> \land <var:n> = <nat:4> \} \end{eqnarray} Applying standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:n> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:s> = <var:e> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 