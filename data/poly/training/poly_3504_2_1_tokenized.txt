\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:3> ; <var:B> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:m> = <var:T> $ prior to evaluating the segment of code it must be that $ <var:B> = <nat:3> $ when list of commands executes . \end{theorem} \begin{proof} Observe that this decorated series of instructions . \begin{eqnarray} \{ <var:m> = <var:T> \} \\ <var:l0> := <nat:3> ; \\ \{ <var:m> = <var:T> \land <var:l0> = <nat:3> \} \\ <var:B> := <var:l0> \\ \{ <var:m> = <var:T> \land <var:B> = <nat:3> \} \end{eqnarray} Applying standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:3> ; <var:B> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:m> = <var:T> }} <def:poly> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 