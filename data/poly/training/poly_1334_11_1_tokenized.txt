\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:f> ; <var:p2> := <var:p1> * <var:f> ; <var:p3> := <var:p2> * <var:f> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:8> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:2> ; <var:g> := <var:p3> <var:g> := <var:g> + <var:p2> <var:g> := <var:g> + <var:p1> <var:g> := <var:g> + <var:p0> \end{verbatim} Assuming $ <var:f> = <var:z> $ prior to interpreting this list of commands it holds that we have $ <var:g> = <nat:2> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:8> \times <var:z> + <nat:2> $ when segment of code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:z> \} \\ <var:p1> := <var:f> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <var:z> \} \\ <var:p2> := <var:p1> * <var:f> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <var:z> \land <var:p2> = <var:z> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:f> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <var:z> \land <var:p2> = <var:z> ^ <nat:2> \land <var:p3> = <var:z> ^ <nat:3> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <var:z> \land <var:p2> = <var:z> ^ <nat:2> \land <var:p3> = <var:z> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:p1> := <var:p1> * <nat:8> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <nat:8> * <var:z> \land <var:p2> = <var:z> ^ <nat:2> \land <var:p3> = <var:z> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:p2> := <var:p2> * <nat:3> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <nat:8> * <var:z> \land <var:p2> = <nat:3> * <var:z> ^ <nat:2> \land <var:p3> = <var:z> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:p3> := <var:p3> * <nat:2> ; \\ \{ <var:f> = <var:z> \land <var:p1> = <nat:8> * <var:z> \land <var:p2> = <nat:3> * <var:z> ^ <nat:2> \land <var:p3> = <nat:2> * <var:z> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:g> := <var:p3> \\ \{ <var:f> = <var:z> \land <var:p1> = <nat:8> * <var:z> \land <var:p2> = <nat:3> * <var:z> ^ <nat:2> \land <var:p0> = <nat:2> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:p2> \\ \{ <var:f> = <var:z> \land <var:p1> = <nat:8> * <var:z> \land <var:p0> = <nat:2> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:p1> \\ \{ <var:f> = <var:z> \land <var:p0> = <nat:2> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> \} \\ <var:g> := <var:g> + <var:p0> \\ \{ <var:f> = <var:z> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> \} \end{eqnarray} The application of Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <var:p1> := <var:f> ; <var:p2> := <var:p1> * <var:f> ; <var:p3> := <var:p2> * <var:f> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:8> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:2> ; <var:g> := <var:p3> <var:g> := <var:g> + <var:p2> <var:g> := <var:g> + <var:p1> <var:g> := <var:g> + <var:p0> {{ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <var:z> /\ <var:p2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <var:z> /\ <var:p2> = <var:z> ^ <nat:2> /\ <var:p3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <var:z> /\ <var:p2> = <var:z> ^ <nat:2> /\ <var:p3> = <var:z> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <nat:8> * <var:z> /\ <var:p2> = <var:z> ^ <nat:2> /\ <var:p3> = <var:z> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <nat:8> * <var:z> /\ <var:p2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:p3> = <var:z> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <nat:8> * <var:z> /\ <var:p2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <nat:8> * <var:z> /\ <var:p2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:p0> = <nat:2> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p1> = <nat:8> * <var:z> /\ <var:p0> = <nat:2> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p0> = <nat:2> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 