\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:3> ; <var:V> := <var:S0> \end{verbatim} Allow --- given integers $ <var:a> $ --- that $ <var:z> = <var:a> $ prior to the execution of our list of commands , it holds that we have $ <var:V> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be accomplished using usual Hoare logic . Following , we have the variable update line giving $ <nat:3> $ to $ <var:S0>$ . This advances $ \{ <var:z> = <var:a> \} $ into the condition $ \{ <var:z> = <var:a> \land <var:S0> = <nat:3> \} $ . This is known to be sound with the assignment law given in standard Hoare reasoning . Jumping to the subsequent command found in the set of commands , the binding command \verb | <var:V> := <var:S0> | . This line moves the precondition $ \{ <var:z> = <var:a> \land <var:S0> = <nat:3> \} $ to the condition $ \{ <var:z> = <var:a> \land <var:V> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:z> = <var:a> }} <var:S0> := <nat:3> ; <var:V> := <var:S0> {{ <var:V> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:a> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:a> /\ <var:V> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 