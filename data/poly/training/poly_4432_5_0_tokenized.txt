\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:h> ; <var:n> := <var:G1> ; <var:n> := <var:n> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Given that we have $ <var:h> = <var:H> $ before evaluating the code it follows that we see $ <var:n> = <nat:6> \times <var:H> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this set of commands can be accomplished using this decorated set of commands . \begin{eqnarray} \{ <var:h> = <var:H> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:h> = <var:H> \land <var:G0> = <nat:3> \} \\ <var:G1> := <nat:6> ; \\ \{ <var:h> = <var:H> \land <var:G0> = <nat:3> \land <var:G1> = <nat:6> \} \\ <var:G1> := <var:G1> * <var:h> ; \\ \{ <var:h> = <var:H> \land <var:G0> = <nat:3> \land <var:G1> = <nat:6> * <var:H> \} \\ <var:n> := <var:G1> ; \\ \{ <var:h> = <var:H> \land <var:G0> = <nat:3> \land <var:n> = <nat:6> * <var:H> \} \\ <var:n> := <var:n> + <var:G0> \\ \{ <var:h> = <var:H> \land <var:n> = <nat:6> * <var:H> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:h> ; <var:n> := <var:G1> ; <var:n> := <var:n> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:h> = <var:H> }} <def:poly> {{ <var:n> = <nat:6> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:G0> = <nat:3> /\ <var:n> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n> = <nat:6> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 