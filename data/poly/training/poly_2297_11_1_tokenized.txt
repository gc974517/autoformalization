\begin{document} \begin{theorem} Consider a set of instructions such that \begin{verbatim} <var:Q1> := <var:p> ; <var:Q2> := <var:Q1> * <var:p> ; <var:Q3> := <var:Q2> * <var:p> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Q2> := <var:Q2> * <nat:3> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:S> := <var:Q3> <var:S> := <var:S> + <var:Q2> <var:S> := <var:S> + <var:Q1> <var:S> := <var:S> + <var:Q0> \end{verbatim} Allow given any natural numbers $ <var:A> $ it to hold that $ <var:p> = <var:A> $ before evaluating the code it holds that we have $ <var:S> = <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:9> $ when list of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be seen using Hoare reasoning . Moving on , the binding statement assigning $ <var:p> $ into $ <var:Q1>$ . This code takes the condition $ \{ <var:p> = <var:A> \} $ into the postcondition $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \} $ . Keeping momentum , the binding line \verb | <var:Q2> := <var:Q1> * <var:p> ; | . This command moves the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \} $ to the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \} $ . Observing the next piece of code found in our series of commands , we see the variable binding code \verb | <var:Q3> := <var:Q2> * <var:p> ; | . This advances the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \} $ as $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \} $ . Moving on to the following statement found in the set of commands , the statement giving $ <nat:9> $ into $ <var:Q0>$ . This statement redefines the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \} $ to $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ . Paying attention to the proceeding step contained in our program , we see the environment update statement assigning $ <var:Q1> * <nat:8> $ to $ <var:Q1>$ . This moves $ \{ <var:p> = <var:A> \land <var:Q1> = <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ to the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ . Advancing on , we see the environment update line \verb | <var:Q2> := <var:Q2> * <nat:3> ; | . This moves the precondition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ as the postcondition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ . Now , the environment update statement giving $ <var:Q3> * <nat:7> $ into $ <var:Q3>$ . This moves the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:Q3> = <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ toward the postcondition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ . This is ensured using the assignment scheme defined in typical Hoare logic . Immediately after , we see the variable update line letting $ <var:Q3$ to $ <var:S>$ . This forwards the precondition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:A> ^ <nat:3> \land <var:Q0> = <nat:9> \} $ to $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:Q0> = <nat:9> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> \} $ . Going to the next step , we see the variable assignmet line yielding $ <var:S> + <var:Q2$ toward $ <var:S>$ . This advances the precondition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:Q0> = <nat:9> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> \} $ into the postcondition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q0> = <nat:9> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> \} $ . This is shown using the assignment rule defined by Hoare techniques . Looking at the next line in the series of commands , we have the environment update statement \verb | <var:S> := <var:S> + <var:Q1> | . This code redefines the condition $ \{ <var:p> = <var:A> \land <var:Q1> = <nat:8> \times <var:A> \land <var:Q0> = <nat:9> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> \} $ toward the condition $ \{ <var:p> = <var:A> \land <var:Q0> = <nat:9> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> \} $ . This is known to be sound by the assignment scheme in Hoare reasoning . Next , we see the command defining $ <var:S> + <var:Q0$ to $ <var:S>$ . This command redefines $ \{ <var:p> = <var:A> \land <var:Q0> = <nat:9> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> \} $ into $ \{ <var:p> = <var:A> \land <var:S> = <nat:7> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:p> = <var:A> }} <var:Q1> := <var:p> ; <var:Q2> := <var:Q1> * <var:p> ; <var:Q3> := <var:Q2> * <var:p> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Q2> := <var:Q2> * <nat:3> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:S> := <var:Q3> <var:S> := <var:S> + <var:Q2> <var:S> := <var:S> + <var:Q1> <var:S> := <var:S> + <var:Q0> {{ <var:S> = <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <var:A> /\ <var:Q2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <var:A> /\ <var:Q2> = <var:A> ^ <nat:2> /\ <var:Q3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <var:A> /\ <var:Q2> = <var:A> ^ <nat:2> /\ <var:Q3> = <var:A> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <nat:8> * <var:A> /\ <var:Q2> = <var:A> ^ <nat:2> /\ <var:Q3> = <var:A> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <nat:8> * <var:A> /\ <var:Q2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:Q3> = <var:A> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <nat:8> * <var:A> /\ <var:Q2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <nat:8> * <var:A> /\ <var:Q2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:Q0> = <nat:9> /\ <var:S> = <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q1> = <nat:8> * <var:A> /\ <var:Q0> = <nat:9> /\ <var:S> = <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:Q0> = <nat:9> /\ <var:S> = <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:S> = <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 