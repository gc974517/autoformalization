\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:3> ; <var:B> := <var:E0> \end{verbatim} Allow it to hold that $ <var:R> = <var:C> $ prior to executing our segment of code it follows that $ <var:B> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands is evident with Hoare logic . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:C> \} & <var:E0> := <nat:3> & \{ <var:R> = <var:C> \land <var:E0> = <nat:3> \} \\ \{ <var:R> = <var:C> \land <var:E0> = <nat:3> \} & <var:B> := <var:E0& \{ <var:R> = <var:C> \land <var:B> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:R> = <var:C> }} <var:E0> := <nat:3> ; <var:B> := <var:E0> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 