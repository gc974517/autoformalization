\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:9> ; <var:a> := <var:z0> \end{verbatim} Assume it to hold that $ <var:w> = <var:p> $ prior to the evaluation of this list of instructions it follows that we see $ <var:a> = <nat:9> $ when set of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be accomplished using standard Hoare techniques . Stepping forward , the variable assignmet statement \verb | <var:z0> := <nat:9> ; | . This line forwards the precondition $ \{ <var:w> = <var:p> \} $ into the condition $ \{ <var:w> = <var:p> \land <var:z0> = <nat:9> \} $ . Now , we see the environment update code \verb | <var:a> := <var:z0> | . This code advances the precondition $ \{ <var:w> = <var:p> \land <var:z0> = <nat:9> \} $ into the condition $ \{ <var:w> = <var:p> \land <var:a> = <nat:9> \} $ . This is given through the assignment law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:w> = <var:p> }} <var:z0> := <nat:9> ; <var:a> := <var:z0> {{ <var:a> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:a> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 