\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:e> ; <var:I2> := <nat:3> ; <var:I2> := <var:I2> * <var:e> ; <var:I2> := <var:I2> * <var:e> ; <var:s> := <var:I2> ; <var:s> := <var:s> + <var:I1> ; <var:s> := <var:s> + <var:I0> \end{verbatim} Allow $ <var:e> = <var:t> $ ahead of evaluating this code , it holds that we have $ <var:s> = <nat:3> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare logic produces : \begin{eqnarray} \{ <var:e> = <var:t> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \} \\ <var:I1> := <nat:8> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:I1> = <nat:8> \} \\ <var:I1> := <var:I1> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:I1> = <nat:8> \cdot <var:t> \} \\ <var:I2> := <nat:3> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:I1> = <nat:8> \cdot <var:t> \land <var:I2> = <nat:3> \} \\ <var:I2> := <var:I2> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:I1> = <nat:8> \cdot <var:t> \land <var:I2> = <nat:3> \cdot <var:t> \} \\ <var:I2> := <var:I2> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:I1> = <nat:8> \cdot <var:t> \land <var:I2> = <nat:3> \cdot <var:t> ^ <nat:2> \} \\ <var:s> := <var:I2> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:I1> = <nat:8> \cdot <var:t> \land <var:s> = <nat:3> \cdot <var:t> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:I1> ; \\ \{ <var:e> = <var:t> \land <var:I0> = <nat:3> \land <var:s> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> \} \\ <var:s> := <var:s> + <var:I0> \\ \{ <var:e> = <var:t> \land <var:s> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> + <nat:3> \} \end{eqnarray} Considering the above , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:e> = <var:t> }} <var:I0> := <nat:3> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:e> ; <var:I2> := <nat:3> ; <var:I2> := <var:I2> * <var:e> ; <var:I2> := <var:I2> * <var:e> ; <var:s> := <var:I2> ; <var:s> := <var:s> + <var:I1> ; <var:s> := <var:s> + <var:I0> {{ <var:s> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:8> * <var:t> /\ <var:I2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:8> * <var:t> /\ <var:I2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:8> * <var:t> /\ <var:I2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:8> * <var:t> /\ <var:s> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:I0> = <nat:3> /\ <var:s> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:s> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 