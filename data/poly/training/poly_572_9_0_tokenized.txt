\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:V> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:V> ; <var:y2> := <var:y2> * <var:V> ; <var:k> := <var:y2> ; <var:k> := <var:k> + <var:y1> ; <var:k> := <var:k> + <var:y0> \end{verbatim} Allow letting positive coefficients $ <var:h> $ it to hold that $ <var:V> = <var:h> $ prior to evaluating the series of commands , it holds that we see $ <var:k> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:1> $ when segment of code is done . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is accomplished through Hoare techniques . Shifting focus toward the proceeding bits of codefound in our segment of code , \verb | { <var:V> = <var:h> } <var:y0> := <nat:1> { <var:V> = <var:h> \land <var:y0> = <nat:1> } | , \verb | { <var:V> = <var:h> \land <var:y0> = <nat:1> } <var:y1> := <nat:9> { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> } | , \verb | { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> } <var:y1> := <var:y1> * <var:V> { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:h> } | , \verb | { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:h> } <var:y2> := <nat:5> { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:h> \land <var:y2> = <nat:5> } | and \verb | { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:h> \land <var:y2> = <nat:5> } <var:y2> := <var:y2> * <var:V> { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:h> \land <var:y2> = <nat:5> * <var:h> } | . This is shown by the environment update inference rule defined in standard Hoare reasoning . Going to the next step , we have \verb | { <var:V> = <var:h> } <var:y0> := <nat:1> { <var:V> = <var:h> \land <var:y0> = <nat:1> } | . This is shown by the environment update rule of standard Hoare techniques . Moving on to the upcoming commands seen in our code , \verb | { <var:V> = <var:h> } <var:y0> := <nat:1> { <var:V> = <var:h> \land <var:y0> = <nat:1> } | , \verb | { <var:V> = <var:h> \land <var:y0> = <nat:1> } <var:y1> := <nat:9> { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> } | and \verb | { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> } <var:y1> := <var:y1> * <var:V> { <var:V> = <var:h> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:h> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <var:y0> := <nat:1> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:V> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:V> ; <var:y2> := <var:y2> * <var:V> ; <var:k> := <var:y2> ; <var:k> := <var:k> + <var:y1> ; <var:k> := <var:k> + <var:y0> {{ <var:k> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:h> /\ <var:y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:h> /\ <var:y2> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:h> /\ <var:y2> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:h> /\ <var:k> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:1> /\ <var:k> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:k> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 