\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:1> + <var:Z> * <var:l> ; <var:Z> := <nat:3> + <var:Z> * <var:l> \end{verbatim} Given $ <var:l> = <var:T> $ prior to the evaluation of the set of instructions , it must be that we have $ <var:Z> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions can be done through typical Hoare logic . Moving forward to the following bits of codecontained in the set of instructions , we see \verb | { <var:l> = <var:T> } <var:Z> := <nat:3> { <var:l> = <var:T> \land <var:Z> = <nat:3> } | , \verb | { <var:l> = <var:T> \land <var:Z> = <nat:3> } <var:Z> := <nat:1> + <var:Z> * <var:l> { <var:l> = <var:T> \land <var:Z> = <nat:3> * <var:T> + <nat:1> } | and \verb | { <var:l> = <var:T> \land <var:Z> = <nat:3> * <var:T> + <nat:1> } <var:Z> := <nat:3> + <var:Z> * <var:l{ <var:l> = <var:T> \land <var:Z> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:l> = <var:T> }} <var:Z> := <nat:3> ; <var:Z> := <nat:1> + <var:Z> * <var:l> ; <var:Z> := <nat:3> + <var:Z> * <var:l> {{ <var:Z> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:Z> = <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:Z> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 