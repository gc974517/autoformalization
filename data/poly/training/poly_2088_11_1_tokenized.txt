\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:H> ; <var:s2> := <var:s1> * <var:H> ; <var:s3> := <var:s2> * <var:H> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:8> ; <var:T> := <var:s3> <var:T> := <var:T> + <var:s2> <var:T> := <var:T> + <var:s1> <var:T> := <var:T> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Allow $ <var:H> = <var:R> $ ( given whole numbers $ <var:R> $ ) prior to the evaluation of the set of commands it holds that we see $ <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:7> $ when segment of code has exited . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be shown using typical Hoare reasoning . Advancing , \begin{eqnarray} \{ <var:H> = <var:R> \} \, <var:s1> := <var:H> \, \{ <var:H> = <var:R> \land <var:s1> = <var:R> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <var:R> \} \, <var:s2> := <var:s1> * <var:H> \, \{ <var:H> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \} \, <var:s3> := <var:s2> * <var:H> \, \{ <var:H> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \} \, <var:s0> := <nat:7> \, \{ <var:H> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \, <var:s1> := <var:s1> * <nat:4> \, \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \, <var:s2> := <var:s2> * <nat:6> \, \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \, <var:s3> := <var:s3> * <nat:8> \, \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:s3> = <nat:8> \times <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:s3> = <nat:8> \times <var:R> ^ <nat:3> \land <var:s0> = <nat:7> \} \, <var:T> := <var:s3\, \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:s0> = <nat:7> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:s0> = <nat:7> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> \} \, <var:T> := <var:T> + <var:s2\, \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s0> = <nat:7> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> ^ <nat:2> \} \\ \{ <var:H> = <var:R> \land <var:s1> = <nat:4> \times <var:R> \land <var:s0> = <nat:7> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> ^ <nat:2> \} \, <var:T> := <var:T> + <var:s1\, \{ <var:H> = <var:R> \land <var:s0> = <nat:7> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} \\ \{ <var:H> = <var:R> \land <var:s0> = <nat:7> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} \, <var:T> := <var:T> + <var:s0\, \{ <var:H> = <var:R> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:7> \} \end{eqnarray} This is ensured by the variable update law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:H> ; <var:s2> := <var:s1> * <var:H> ; <var:s3> := <var:s2> * <var:H> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:8> ; <var:T> := <var:s3> <var:T> := <var:T> + <var:s2> <var:T> := <var:T> + <var:s1> <var:T> := <var:T> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:H> = <var:R> }} <def:poly> {{ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <nat:4> * <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <nat:4> * <var:R> /\ <var:s2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <nat:4> * <var:R> /\ <var:s2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:s3> = <nat:8> * <var:R> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <nat:4> * <var:R> /\ <var:s2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:s0> = <nat:7> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s1> = <nat:4> * <var:R> /\ <var:s0> = <nat:7> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:s0> = <nat:7> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 