\begin{document} \begin{theorem} Take a series of commands as \begin{verbatim} <var:C1> := <var:j> ; <var:C2> := <var:C1> * <var:j> ; <var:C3> := <var:C2> * <var:j> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:9> ; <var:C2> := <var:C2> * <nat:1> ; <var:C3> := <var:C3> * <nat:6> ; <var:J> := <var:C3> <var:J> := <var:J> + <var:C2> <var:J> := <var:J> + <var:C1> <var:J> := <var:J> + <var:C0> \end{verbatim} Assume , taking positive coefficients $ <var:l> $ , it to hold that $ <var:j> = <var:l> $ prior to the evaluation of this set of instructions it holds that we have $ <var:J> = <nat:6> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> + <nat:5> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning produces : \begin{eqnarray} \{ <var:j> = <var:l> \} \\ <var:C1> := <var:j> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <var:l> \} \\ <var:C2> := <var:C1> * <var:j> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <var:l> \land <var:C2> = <var:l> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:j> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <var:l> \land <var:C2> = <var:l> ^ <nat:2> \land <var:C3> = <var:l> ^ <nat:3> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <var:l> \land <var:C2> = <var:l> ^ <nat:2> \land <var:C3> = <var:l> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:C1> := <var:C1> * <nat:9> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <nat:9> \times <var:l> \land <var:C2> = <var:l> ^ <nat:2> \land <var:C3> = <var:l> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:C2> := <var:C2> * <nat:1> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <nat:9> \times <var:l> \land <var:C2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:C3> = <var:l> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:C3> := <var:C3> * <nat:6> ; \\ \{ <var:j> = <var:l> \land <var:C1> = <nat:9> \times <var:l> \land <var:C2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:C3> = <nat:6> \times <var:l> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:J> := <var:C3> \\ \{ <var:j> = <var:l> \land <var:C1> = <nat:9> \times <var:l> \land <var:C2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:C0> = <nat:5> \land <var:J> = <nat:6> \times <var:l> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:C2> \\ \{ <var:j> = <var:l> \land <var:C1> = <nat:9> \times <var:l> \land <var:C0> = <nat:5> \land <var:J> = <nat:6> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:C1> \\ \{ <var:j> = <var:l> \land <var:C0> = <nat:5> \land <var:J> = <nat:6> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> \} \\ <var:J> := <var:J> + <var:C0> \\ \{ <var:j> = <var:l> \land <var:J> = <nat:6> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> + <nat:5> \} \end{eqnarray} Therefore , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:j> = <var:l> }} <var:C1> := <var:j> ; <var:C2> := <var:C1> * <var:j> ; <var:C3> := <var:C2> * <var:j> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:9> ; <var:C2> := <var:C2> * <nat:1> ; <var:C3> := <var:C3> * <nat:6> ; <var:J> := <var:C3> <var:J> := <var:J> + <var:C2> <var:J> := <var:J> + <var:C1> <var:J> := <var:J> + <var:C0> {{ <var:J> = <nat:6> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <var:l> /\ <var:C2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <var:l> /\ <var:C2> = <var:l> ^ <nat:2> /\ <var:C3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <var:l> /\ <var:C2> = <var:l> ^ <nat:2> /\ <var:C3> = <var:l> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <nat:9> * <var:l> /\ <var:C2> = <var:l> ^ <nat:2> /\ <var:C3> = <var:l> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <nat:9> * <var:l> /\ <var:C2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:C3> = <var:l> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <nat:9> * <var:l> /\ <var:C2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:C3> = <nat:6> * <var:l> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <nat:9> * <var:l> /\ <var:C2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:C0> = <nat:5> /\ <var:J> = <nat:6> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C1> = <nat:9> * <var:l> /\ <var:C0> = <nat:5> /\ <var:J> = <nat:6> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:C0> = <nat:5> /\ <var:J> = <nat:6> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:J> = <nat:6> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 