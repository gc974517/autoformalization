\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:3> + <var:f> * <var:w> ; <var:f> := <nat:4> + <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <var:f> * <var:w> ; <var:f> := <nat:3> + <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <nat:3> + <var:f> * <var:w> \end{verbatim} Allow $ <var:w> = <var:U> $ ( for any natural coefficients $ <var:U> $ ) before executing the program then we have $ <var:f> = <nat:2> \times <var:U> ^ <nat:10> + <nat:3> \times <var:U> ^ <nat:9> + <nat:4> \times <var:U> ^ <nat:8> + <nat:2> \times <var:U> ^ <nat:7> + <nat:2> \times <var:U> ^ <nat:6> + <nat:2> \times <var:U> ^ <nat:4> + <nat:3> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} The proof of our code is done by usual Hoare logic . Moving on to the proceeding lines contained in the set of commands , we have \verb | { <var:w> = <var:U> } <var:f> := <nat:2> { <var:w> = <var:U> \land <var:f> = <nat:2> } | , \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> } <var:f> := <nat:3> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> + <nat:3> } | , \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> + <nat:3> } <var:f> := <nat:4> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:4> } | , \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:4> } <var:f> := <nat:2> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:2> } | , \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:2> } <var:f> := <nat:2> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:2> } | , \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:2> } <var:f> := <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + } | and \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + } <var:f> := <nat:2> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> } | . This is deduced through the variable binding rule given in typical Hoare techniques . Further , we see \verb | { <var:w> = <var:U> } <var:f> := <nat:2> { <var:w> = <var:U> \land <var:f> = <nat:2> } | and \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> } <var:f> := <nat:3> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> + <nat:3> } | . This is known to be sound through the environment update inference rule found in standard Hoare logic . Moving forward , \verb | { <var:w> = <var:U> } <var:f> := <nat:2> { <var:w> = <var:U> \land <var:f> = <nat:2> } | and \verb | { <var:w> = <var:U> \land <var:f> = <nat:2> } <var:f> := <nat:3> + <var:f> * <var:w> { <var:w> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <var:f> := <nat:2> ; <var:f> := <nat:3> + <var:f> * <var:w> ; <var:f> := <nat:4> + <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <var:f> * <var:w> ; <var:f> := <nat:3> + <var:f> * <var:w> ; <var:f> := <nat:2> + <var:f> * <var:w> ; <var:f> := <nat:3> + <var:f> * <var:w> {{ <var:f> = <nat:2> * <var:U> ^ <nat:10> + <nat:3> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:10> + <nat:3> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 