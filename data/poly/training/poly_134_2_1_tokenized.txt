\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:1> ; <var:P> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Allow it to be that $ <var:E> = <var:v> $ , for some natural numbers $ <var:v> $ , before the execution of our code it must be that we see $ <var:P> = <nat:1> $ when set of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our code is shown through usual Hoare techniques . Moving forward to the next steps found in our code , we see \verb | { <var:E> = <var:v> } <var:a0> := <nat:1> { <var:E> = <var:v> \land <var:a0> = <nat:1> } | and \verb | { <var:E> = <var:v> \land <var:a0> = <nat:1> } <var:P> := <var:a0{ <var:E> = <var:v> \land <var:P> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:1> ; <var:P> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:E> = <var:v> }} <def:poly> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 