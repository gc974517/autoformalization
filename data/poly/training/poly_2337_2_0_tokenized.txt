\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:4> ; <var:r> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:C> = <var:V> $ before evaluating the list of commands then we see $ <var:r> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our list of commands is done through typical Hoare logic . Focusing on the following piece of code seen in the series of commands , we have \begin{eqnarray} \{ <var:C> = <var:V> \} \, <var:z0> := <nat:4> \, \{ <var:C> = <var:V> \land <var:z0> = <nat:4> \} \end{eqnarray} Advancing to the following bit of code contained in our segment of code , we see \begin{eqnarray} \{ <var:C> = <var:V> \} \, <var:z0> := <nat:4> \, \{ <var:C> = <var:V> \land <var:z0> = <nat:4> \} \end{eqnarray} This is shown to be logically sound through the binding rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:r> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <def:poly> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 