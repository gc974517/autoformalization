\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:J> ; <var:E> := <var:d1> ; <var:E> := <var:E> + <var:d0> \end{verbatim} Allow that $ <var:J> = <var:u> $ prior to executing this segment of code it holds that we see $ <var:E> = <nat:1> * <var:u> + <nat:1> $ once code has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare techniques yields : \begin{eqnarray} \{ <var:J> = <var:u> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:J> = <var:u> \land <var:d0> = <nat:1> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:J> = <var:u> \land <var:d0> = <nat:1> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:J> ; \\ \{ <var:J> = <var:u> \land <var:d0> = <nat:1> \land <var:d1> = <nat:1> \times <var:u> \} \end{eqnarray} Furthering evaluating our set of instructions results in : \begin{eqnarray} <var:E> := <var:d1> ; \\ \{ <var:J> = <var:u> \land <var:d0> = <nat:1> \land <var:E> = <nat:1> \times <var:u> \} \end{eqnarray} Advancing the evaluation of this list of commands yields : \begin{eqnarray} <var:E> := <var:E> + <var:d0> \\ \{ <var:J> = <var:u> \land <var:E> = <nat:1> \times <var:u> + <nat:1> \} \end{eqnarray} Thusly , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:J> = <var:u> }} <var:d0> := <nat:1> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:J> ; <var:E> := <var:d1> ; <var:E> := <var:E> + <var:d0> {{ <var:E> = <nat:1> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:d0> = <nat:1> /\ <var:E> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:u> /\ <var:E> = <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 