\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:9> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:e> ; <var:p2> := <nat:9> ; <var:p2> := <var:p2> * <var:e> ; <var:p2> := <var:p2> * <var:e> ; <var:F> := <var:p2> ; <var:F> := <var:F> + <var:p1> ; <var:F> := <var:F> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Allow , given every positive coefficients $ <var:g> $ , it to be that $ <var:e> = <var:g> $ before running our set of instructions it follows that $ <var:F> = <nat:9> \times <var:g> ^ <nat:2> + <nat:5> \times <var:g> + <nat:9> $ after segment of code is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions can be accomplished through usual Hoare logic . Jumping to the next line of code seen in the set of commands , \verb | { <var:e> = <var:g> } <var:p0> := <nat:9> { <var:e> = <var:g> \land <var:p0> = <nat:9> } | . Stepping forward , we have \verb | { <var:e> = <var:g> } <var:p0> := <nat:9> { <var:e> = <var:g> \land <var:p0> = <nat:9> } | , \verb | { <var:e> = <var:g> \land <var:p0> = <nat:9> } <var:p1> := <nat:5> { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> } | and \verb | { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> } <var:p1> := <var:p1> * <var:e> { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> * <var:g> } | . This is sound using the variable update inference rule from usual Hoare logic . Paying attention to the upcoming bits of codeseen in our code , we see \verb | { <var:e> = <var:g> } <var:p0> := <nat:9> { <var:e> = <var:g> \land <var:p0> = <nat:9> } | , \verb | { <var:e> = <var:g> \land <var:p0> = <nat:9> } <var:p1> := <nat:5> { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> } | , \verb | { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> } <var:p1> := <var:p1> * <var:e> { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> * <var:g> } | , \verb | { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> * <var:g> } <var:p2> := <nat:9> { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> * <var:g> \land <var:p2> = <nat:9> } | and \verb | { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> * <var:g> \land <var:p2> = <nat:9> } <var:p2> := <var:p2> * <var:e> { <var:e> = <var:g> \land <var:p0> = <nat:9> \land <var:p1> = <nat:5> * <var:g> \land <var:p2> = <nat:9> * <var:g> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:9> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:e> ; <var:p2> := <nat:9> ; <var:p2> := <var:p2> * <var:e> ; <var:p2> := <var:p2> * <var:e> ; <var:F> := <var:p2> ; <var:F> := <var:F> + <var:p1> ; <var:F> := <var:F> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:e> = <var:g> }} <def:poly> {{ <var:F> = <nat:9> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:5> * <var:g> /\ <var:p2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:5> * <var:g> /\ <var:p2> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:5> * <var:g> /\ <var:p2> = <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:5> * <var:g> /\ <var:F> = <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:p0> = <nat:9> /\ <var:F> = <nat:9> * <var:g> ^ <nat:2> + <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:F> = <nat:9> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 