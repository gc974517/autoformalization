\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:o> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:3> ; <var:Q> := <var:i1> <var:Q> := <var:Q> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow , given some positive integers $ <var:M> $ , that we have $ <var:o> = <var:M> $ before interpreting our series of commands , it holds that we have $ <var:Q> = <nat:3> * <var:M> + <nat:8> $ when list of commands is done executing . \end{theorem} \begin{proof} The argument for our series of commands is shown using usual Hoare reasoning . Advancing to the next step , we have the variable update code assigning $ <var:o> $ into $ <var:i1>$ . This statement takes $ \{ <var:o> = <var:M> \} $ into the postcondition $ \{ <var:o> = <var:M> \land <var:i1> = <var:M> \} $ . This is ensured with the assignment law given in typical Hoare logic . Paying attention to the next line found in the list of instructions , we see the command letting $ <nat:8> $ to $ <var:i0>$ . This forwards the precondition $ \{ <var:o> = <var:M> \land <var:i1> = <var:M> \} $ toward $ \{ <var:o> = <var:M> \land <var:i1> = <var:M> \land <var:i0> = <nat:8> \} $ . This is known to be sound by the assignment rule defined by usual Hoare reasoning . Moving on to the next piece of code seen in the segment of code , we see the environment update statement assigning $ <var:i1> * <nat:3> $ toward $ <var:i1>$ . This redefines the condition $ \{ <var:o> = <var:M> \land <var:i1> = <var:M> \land <var:i0> = <nat:8> \} $ into the condition $ \{ <var:o> = <var:M> \land <var:i1> = <nat:3> * <var:M> \land <var:i0> = <nat:8> \} $ . Advancing to the next step , we see the environment update statement defining $ <var:i1$ into $ <var:Q>$ . This command redefines $ \{ <var:o> = <var:M> \land <var:i1> = <nat:3> * <var:M> \land <var:i0> = <nat:8> \} $ into the postcondition $ \{ <var:o> = <var:M> \land <var:i0> = <nat:8> \land <var:Q> = <nat:3> * <var:M> \} $ . Honing in on the subsequent statement contained in the segment of code , we see the line \verb | <var:Q> := <var:Q> + <var:i0> | . This redefines the condition $ \{ <var:o> = <var:M> \land <var:i0> = <nat:8> \land <var:Q> = <nat:3> * <var:M> \} $ as $ \{ <var:o> = <var:M> \land <var:Q> = <nat:3> * <var:M> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:o> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:3> ; <var:Q> := <var:i1> <var:Q> := <var:Q> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:o> = <var:M> }} <def:poly> {{ <var:Q> = <nat:3> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:i1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:i1> = <var:M> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:i1> = <nat:3> * <var:M> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:i0> = <nat:8> /\ <var:Q> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:Q> = <nat:3> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 