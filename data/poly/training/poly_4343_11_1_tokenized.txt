\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:S> ; <var:t2> := <var:t1> * <var:S> ; <var:t3> := <var:t2> * <var:S> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:1> ; <var:Q> := <var:t3> <var:Q> := <var:Q> + <var:t2> <var:Q> := <var:Q> + <var:t1> <var:Q> := <var:Q> + <var:t0> \end{verbatim} Allow it to hold that $ <var:S> = <var:v> $ --- for all positive numbers $ <var:v> $ --- before evaluating this program it holds that $ <var:Q> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> $ when code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:v> \} \\ <var:t1> := <var:S> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <var:v> \} \\ <var:t2> := <var:t1> * <var:S> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <var:v> \land <var:t2> = <var:v> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:S> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <var:v> \land <var:t2> = <var:v> ^ <nat:2> \land <var:t3> = <var:v> ^ <nat:3> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <var:v> \land <var:t2> = <var:v> ^ <nat:2> \land <var:t3> = <var:v> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:t1> := <var:t1> * <nat:3> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <nat:3> \cdot <var:v> \land <var:t2> = <var:v> ^ <nat:2> \land <var:t3> = <var:v> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:t2> := <var:t2> * <nat:4> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <nat:3> \cdot <var:v> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t3> = <var:v> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:t3> := <var:t3> * <nat:1> ; \\ \{ <var:S> = <var:v> \land <var:t1> = <nat:3> \cdot <var:v> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:v> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:Q> := <var:t3> \\ \{ <var:S> = <var:v> \land <var:t1> = <nat:3> \cdot <var:v> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t0> = <nat:2> \land <var:Q> = <nat:1> \cdot <var:v> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:t2> \\ \{ <var:S> = <var:v> \land <var:t1> = <nat:3> \cdot <var:v> \land <var:t0> = <nat:2> \land <var:Q> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:t1> \\ \{ <var:S> = <var:v> \land <var:t0> = <nat:2> \land <var:Q> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> \} \\ <var:Q> := <var:Q> + <var:t0> \\ \{ <var:S> = <var:v> \land <var:Q> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:S> = <var:v> }} <var:t1> := <var:S> ; <var:t2> := <var:t1> * <var:S> ; <var:t3> := <var:t2> * <var:S> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:1> ; <var:Q> := <var:t3> <var:Q> := <var:Q> + <var:t2> <var:Q> := <var:Q> + <var:t1> <var:Q> := <var:Q> + <var:t0> {{ <var:Q> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <var:v> /\ <var:t2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <var:v> /\ <var:t2> = <var:v> ^ <nat:2> /\ <var:t3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <var:v> /\ <var:t2> = <var:v> ^ <nat:2> /\ <var:t3> = <var:v> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <nat:3> * <var:v> /\ <var:t2> = <var:v> ^ <nat:2> /\ <var:t3> = <var:v> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <nat:3> * <var:v> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t3> = <var:v> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <nat:3> * <var:v> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <nat:3> * <var:v> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t0> = <nat:2> /\ <var:Q> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t1> = <nat:3> * <var:v> /\ <var:t0> = <nat:2> /\ <var:Q> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:t0> = <nat:2> /\ <var:Q> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:Q> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 