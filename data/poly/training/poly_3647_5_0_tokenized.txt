\begin{document} \begin{theorem} Consider a series of commands as follows \begin{verbatim} <var:j0> := <nat:6> ; <var:j1> := <nat:3> ; <var:j1> := <var:j1> * <var:G> ; <var:z> := <var:j1> ; <var:z> := <var:z> + <var:j0> \end{verbatim} Assume --- for some $ <var:d> $ --- that we have $ <var:G> = <var:d> $ before evaluating our list of instructions it follows that we have $ <var:z> = <nat:3> \cdot <var:d> + <nat:6> $ when segment of code executes . \end{theorem} \begin{proof} Let this decorated series of instructions . \begin{eqnarray} \{ <var:G> = <var:d> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:G> = <var:d> \land <var:j0> = <nat:6> \} \\ <var:j1> := <nat:3> ; \\ \{ <var:G> = <var:d> \land <var:j0> = <nat:6> \land <var:j1> = <nat:3> \} \\ <var:j1> := <var:j1> * <var:G> ; \\ \{ <var:G> = <var:d> \land <var:j0> = <nat:6> \land <var:j1> = <nat:3> \times <var:d> \} \\ <var:z> := <var:j1> ; \\ \{ <var:G> = <var:d> \land <var:j0> = <nat:6> \land <var:z> = <nat:3> \times <var:d> \} \\ <var:z> := <var:z> + <var:j0> \\ \{ <var:G> = <var:d> \land <var:z> = <nat:3> \times <var:d> + <nat:6> \} \end{eqnarray} Using standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:G> = <var:d> }} <var:j0> := <nat:6> ; <var:j1> := <nat:3> ; <var:j1> := <var:j1> * <var:G> ; <var:z> := <var:j1> ; <var:z> := <var:z> + <var:j0> {{ <var:z> = <nat:3> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:j0> = <nat:6> /\ <var:z> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:z> = <nat:3> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 