\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:t> ; <var:z2> := <nat:9> ; <var:z2> := <var:z2> * <var:t> ; <var:z2> := <var:z2> * <var:t> ; <var:C> := <var:z2> ; <var:C> := <var:C> + <var:z1> ; <var:C> := <var:C> + <var:z0> \end{verbatim} Allowing it to hold that $ <var:t> = <var:d> $ --- with some $ <var:d> $ --- before interpreting the set of commands it holds that $ <var:C> = <nat:9> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:8> $ after list of commands terminates . \end{theorem} \begin{proof} We can see that the below decorated series of instructions . \begin{eqnarray} \{ <var:t> = <var:d> \} \\ <var:z0> := <nat:8> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \} \\ <var:z1> := <nat:6> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:z1> = <nat:6> \} \\ <var:z1> := <var:z1> * <var:t> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:z1> = <nat:6> * <var:d> \} \\ <var:z2> := <nat:9> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:z1> = <nat:6> * <var:d> \land <var:z2> = <nat:9> \} \\ <var:z2> := <var:z2> * <var:t> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:z1> = <nat:6> * <var:d> \land <var:z2> = <nat:9> * <var:d> \} \\ <var:z2> := <var:z2> * <var:t> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:z1> = <nat:6> * <var:d> \land <var:z2> = <nat:9> * <var:d> ^ <nat:2> \} \\ <var:C> := <var:z2> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:z1> = <nat:6> * <var:d> \land <var:C> = <nat:9> * <var:d> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:z1> ; \\ \{ <var:t> = <var:d> \land <var:z0> = <nat:8> \land <var:C> = <nat:9> * <var:d> ^ <nat:2> + <nat:6> * <var:d> \} \\ <var:C> := <var:C> + <var:z0> \\ \{ <var:t> = <var:d> \land <var:C> = <nat:9> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:8> \} \end{eqnarray} Applying Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:t> = <var:d> }} <var:z0> := <nat:8> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:t> ; <var:z2> := <nat:9> ; <var:z2> := <var:z2> * <var:t> ; <var:z2> := <var:z2> * <var:t> ; <var:C> := <var:z2> ; <var:C> := <var:C> + <var:z1> ; <var:C> := <var:C> + <var:z0> {{ <var:C> = <nat:9> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:6> * <var:d> /\ <var:z2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:6> * <var:d> /\ <var:z2> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:6> * <var:d> /\ <var:z2> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:6> * <var:d> /\ <var:C> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:z0> = <nat:8> /\ <var:C> = <nat:9> * <var:d> ^ <nat:2> + <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:C> = <nat:9> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 