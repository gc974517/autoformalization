\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:2> ; <var:S> := <nat:3> + <var:S> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:J> = <var:z> $ ahead of running our series of commands it holds that we have $ <var:S> = <nat:2> * <var:z> + <nat:3> $ after code finishes . \end{theorem} \begin{proof} The argument for this set of commands is accomplished through usual Hoare techniques . Advancing to the following piece of code contained in the segment of code , we have the variable binding code letting $ <nat:2> $ to $ <var:S>$ . This transfers the precondition $ \{ <var:J> = <var:z> \} $ toward the postcondition $ \{ <var:J> = <var:z> \land <var:S> = <nat:2> \} $ . This is known to be sound with the assignment rule found in Hoare logic . Honing in on the following command in the segment of code , we see the environment update code \verb | <var:S> := <nat:3> + <var:S> * <var:J> | . This line forwards the condition $ \{ <var:J> = <var:z> \land <var:S> = <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:z> \land <var:S> = <nat:2> \times <var:z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:2> ; <var:S> := <nat:3> + <var:S> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:J> = <var:z> }} <def:poly> {{ <var:S> = <nat:2> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:S> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:S> = <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 