\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:1> ; <var:e> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allowing that $ <var:V> = <var:D> $ with some positive coefficients $ <var:D> $ ahead of running our code segment it holds that $ <var:e> = <nat:1> $ once code terminates . \end{theorem} \begin{proof} The flow of logic for our list of instructions is shown by usual Hoare reasoning . Keeping momentum , we see the variable assignmet statement defining $ <nat:1> $ into $ <var:P0>$ . This forwards the precondition $ \{ <var:V> = <var:D> \} $ toward the condition $ \{ <var:V> = <var:D> \land <var:P0> = <nat:1> \} $ . This is known to be sound using the assignment inference rule from Hoare reasoning . Moving on , we see the command \verb | <var:e> := <var:P0> | . This command moves the precondition $ \{ <var:V> = <var:D> \land <var:P0> = <nat:1> \} $ toward $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> \} $ . This is given using the assignment rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:1> ; <var:e> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:V> = <var:D> }} <def:poly> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 