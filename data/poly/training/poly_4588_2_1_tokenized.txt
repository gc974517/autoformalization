\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:6> ; <var:C> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:a> = <var:q> $ --- for all positive coefficients $ <var:q> $ --- before evaluating our list of commands it must be that $ <var:C> = <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is demonstrated by typical Hoare reasoning . Looking at the subsequent statement in our program , we have the variable update statement \verb | <var:P0> := <nat:6> ; | . This moves the precondition $ \{ <var:a> = <var:q> \} $ to the condition $ \{ <var:a> = <var:q> \land <var:P0> = <nat:6> \} $ . Advancing to the following command contained in the series of commands , the variable update command \verb | <var:C> := <var:P0> | . This command advances the precondition $ \{ <var:a> = <var:q> \land <var:P0> = <nat:6> \} $ to the condition $ \{ <var:a> = <var:q> \land <var:C> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:C> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:a> = <var:q> }} <def:poly> {{ <var:C> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:C> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 