\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:j1> := <var:l> ; <var:j2> := <var:j1> * <var:l> ; <var:j3> := <var:j2> * <var:l> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:6> ; <var:k> := <var:j3> <var:k> := <var:k> + <var:j2> <var:k> := <var:k> + <var:j1> <var:k> := <var:k> + <var:j0> \end{verbatim} Assuming that $ <var:l> = <var:X> $ prior to the execution of this code segment , then we have $ <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:1> $ after set of commands has executed . \end{theorem} \begin{proof} The argument for this set of instructions can be accomplished by Hoare techniques . Stepping forward , we have the binding statement \verb | <var:j1> := <var:l> ; | . This takes the precondition $ \{ <var:l> = <var:X> \} $ into the condition $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \} $ . Moving forward to the proceeding line contained in the program , we have the binding line giving $ <var:j1> * <var:l> $ into $ <var:j2>$ . This line transfers $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \} $ as $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \} $ . This is ensured using the assignment inference rule obtained from typical Hoare reasoning . Going forward , we have the assignment command assigning $ <var:j2> * <var:l> $ as $ <var:j3>$ . This redefines the condition $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \} $ toward $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \} $ . This is deduced through the assignment inference rule in standard Hoare techniques . Stepping through , we see the variable binding command \verb | <var:j0> := <nat:1> ; | . This statement redefines the precondition $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \} $ as the postcondition $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ . Further , the line assigning $ <var:j1> * <nat:5> $ as $ <var:j1>$ . This line transfers the condition $ \{ <var:l> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ as the postcondition $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ . Looking at the proceeding piece of code seen in the set of instructions , the variable assignmet statement \verb | <var:j2> := <var:j2> * <nat:9> ; | . This code forwards the condition $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ into $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <nat:9> * <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ . Considering the subsequent piece of code in our program , we see the binding code \verb | <var:j3> := <var:j3> * <nat:6> ; | . This command moves $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <nat:9> * <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ to the postcondition $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <nat:9> * <var:X> ^ <nat:2> \land <var:j3> = <nat:6> * <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ . Moving on to the proceeding step seen in the list of instructions , we see the variable update command \verb | <var:k> := <var:j3> | . This redefines the precondition $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <nat:9> * <var:X> ^ <nat:2> \land <var:j3> = <nat:6> * <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \} $ to the postcondition $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <nat:9> * <var:X> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> \} $ . Following , the variable binding statement giving $ <var:k> + <var:j2$ into $ <var:k>$ . This advances $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j2> = <nat:9> * <var:X> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> \} $ as $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j0> = <nat:1> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> \} $ . Moving forward to the upcoming line in our set of instructions , we see the variable update code yielding $ <var:k> + <var:j1$ toward $ <var:k>$ . This line forwards $ \{ <var:l> = <var:X> \land <var:j1> = <nat:5> * <var:X> \land <var:j0> = <nat:1> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> \} $ into the condition $ \{ <var:l> = <var:X> \land <var:j0> = <nat:1> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> \} $ . This is known to be sound using the assignment rule given by typical Hoare logic . Moving forward to the following statement seen in our set of instructions , we have the environment update line \verb | <var:k> := <var:k> + <var:j0> | . This statement forwards the condition $ \{ <var:l> = <var:X> \land <var:j0> = <nat:1> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> \} $ into the condition $ \{ <var:l> = <var:X> \land <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:l> = <var:X> }} <var:j1> := <var:l> ; <var:j2> := <var:j1> * <var:l> ; <var:j3> := <var:j2> * <var:l> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:6> ; <var:k> := <var:j3> <var:k> := <var:k> + <var:j2> <var:k> := <var:k> + <var:j1> <var:k> := <var:k> + <var:j0> {{ <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <nat:5> * <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <nat:5> * <var:X> /\ <var:j2> = <nat:9> * <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <nat:5> * <var:X> /\ <var:j2> = <nat:9> * <var:X> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:X> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <nat:5> * <var:X> /\ <var:j2> = <nat:9> * <var:X> ^ <nat:2> /\ <var:j0> = <nat:1> /\ <var:k> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j1> = <nat:5> * <var:X> /\ <var:j0> = <nat:1> /\ <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:j0> = <nat:1> /\ <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:k> = <nat:6> * <var:X> ^ <nat:3> + <nat:9> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 