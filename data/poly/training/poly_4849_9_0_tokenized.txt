\begin{document} \begin{theorem} Take the following program such that \begin{verbatim} <var:R0> := <nat:9> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:l> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:l> ; <var:R2> := <var:R2> * <var:l> ; <var:e> := <var:R2> ; <var:e> := <var:e> + <var:R1> ; <var:e> := <var:e> + <var:R0> \end{verbatim} Allowing it to be that $ <var:l> = <var:Q> $ ahead of the execution of our series of instructions , it follows that $ <var:e> = <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:9> $ once list of instructions exits . \end{theorem} \begin{proof} The argument for our program can be accomplished through this decorated series of instructions . \begin{eqnarray} \{ <var:l> = <var:Q> \} \\ <var:R0> := <nat:9> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \} \\ <var:R1> := <nat:5> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:5> \} \\ <var:R1> := <var:R1> * <var:l> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:5> \cdot <var:Q> \} \\ <var:R2> := <nat:4> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:5> \cdot <var:Q> \land <var:R2> = <nat:4> \} \\ <var:R2> := <var:R2> * <var:l> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:5> \cdot <var:Q> \land <var:R2> = <nat:4> \cdot <var:Q> \} \\ <var:R2> := <var:R2> * <var:l> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:5> \cdot <var:Q> \land <var:R2> = <nat:4> \cdot <var:Q> ^ <nat:2> \} \\ <var:e> := <var:R2> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:5> \cdot <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:R1> ; \\ \{ <var:l> = <var:Q> \land <var:R0> = <nat:9> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> \} \\ <var:e> := <var:e> + <var:R0> \\ \{ <var:l> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:5> \cdot <var:Q> + <nat:9> \} \end{eqnarray} Using usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:l> = <var:Q> }} <var:R0> := <nat:9> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:l> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:l> ; <var:R2> := <var:R2> * <var:l> ; <var:e> := <var:R2> ; <var:e> := <var:e> + <var:R1> ; <var:e> := <var:e> + <var:R0> {{ <var:e> = <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:5> * <var:Q> /\ <var:R2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:5> * <var:Q> /\ <var:R2> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:5> * <var:Q> /\ <var:R2> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:5> * <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:R0> = <nat:9> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 