\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:f> := <nat:4> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:2> + <var:f> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:y> = <var:s> $ prior to running this list of instructions , it must be that we see $ <var:f> = <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> $ once segment of code is done . \end{theorem} \begin{proof} The course of logic for this segment of code is given through typical Hoare logic . Considering the upcoming line found in our program , we see the line \verb | <var:f> := <nat:4> ; | . This forwards $ \{ <var:y> = <var:s> \} $ toward the condition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> \} $ . This is given through the assignment scheme from usual Hoare logic . Advancing to the next step , we see the assignment line defining $ <nat:4> + <var:f> * <var:y> $ as $ <var:f>$ . This transfers the precondition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> \} $ into the condition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> + <nat:4> \} $ . This is rigorously given by the assignment law defined in usual Hoare logic . Moving forward to the subsequent line contained in our series of commands , we have the environment update statement \verb | <var:f> := <nat:4> + <var:f> * <var:y> ; | . This redefines the precondition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> + <nat:4> \} $ into the condition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ . Looking at the next statement found in our segment of code , we see the statement defining $ <nat:4> + <var:f> * <var:y> $ as $ <var:f>$ . This redefines $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ into the condition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ . This is guaranteed by the assignment law defined by typical Hoare logic . Moving onward , we see the command \verb | <var:f> := <nat:2> + <var:f> * <var:y> | . This transfers the precondition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ into the postcondition $ \{ <var:y> = <var:s> \land <var:f> = <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:4> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:2> + <var:f> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:y> = <var:s> }} <def:poly> {{ <var:f> = <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:f> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:f> = <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:f> = <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:f> = <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:f> = <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 