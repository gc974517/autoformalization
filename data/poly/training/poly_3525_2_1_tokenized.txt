\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:6> ; <var:F> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:O> = <var:k> $ before executing this list of commands then we have $ <var:F> = <nat:6> $ once code has executed . \end{theorem} \begin{proof} The course of logic for our list of commands can be given with usual Hoare logic . Immediately after , \[ \begin{tabular} {rcl} \{ <var:O> = <var:k> \} & <var:n0> := <nat:6> & \{ <var:O> = <var:k> \land <var:n0> = <nat:6> \} \end{tabular} This is guaranteed by the variable update inference rule given by standard Hoare techniques . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:k> \} & <var:n0> := <nat:6> & \{ <var:O> = <var:k> \land <var:n0> = <nat:6> \} \end{tabular} This is known to be sound with the variable assignmet scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:6> ; <var:F> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:O> = <var:k> }} <def:poly> {{ <var:F> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:k> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:k> /\ <var:F> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 