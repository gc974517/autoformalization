\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:d0> := <nat:6> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:I> ; <var:d2> := <nat:9> ; <var:d2> := <var:d2> * <var:I> ; <var:d2> := <var:d2> * <var:I> ; <var:e> := <var:d2> ; <var:e> := <var:e> + <var:d1> ; <var:e> := <var:e> + <var:d0> \end{verbatim} Assume that $ <var:I> = <var:S> $ prior to the execution of the series of instructions it must be that we see $ <var:e> = <nat:9> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:6> $ after program finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our code is evident by Hoare logic . Moving onward , we see \begin{verbatim} { <var:I> = <var:S> } <var:d0> := <nat:6> { <var:I> = <var:S> \land <var:d0> = <nat:6> } { <var:I> = <var:S> \land <var:d0> = <nat:6> } <var:d1> := <nat:1> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> } { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> } <var:d1> := <var:d1> * <var:I> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> } { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> } <var:d2> := <nat:9> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> \land <var:d2> = <nat:9> } { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> \land <var:d2> = <nat:9> } <var:d2> := <var:d2> * <var:I> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> \land <var:d2> = <nat:9> \times <var:S> } \end{verbatim} Moving on to the upcoming steps contained in the segment of code , we have \begin{verbatim} { <var:I> = <var:S> } <var:d0> := <nat:6> { <var:I> = <var:S> \land <var:d0> = <nat:6> } { <var:I> = <var:S> \land <var:d0> = <nat:6> } <var:d1> := <nat:1> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> } { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> } <var:d1> := <var:d1> * <var:I> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> } { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> } <var:d2> := <nat:9> { <var:I> = <var:S> \land <var:d0> = <nat:6> \land <var:d1> = <nat:1> \times <var:S> \land <var:d2> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:I> = <var:S> }} <var:d0> := <nat:6> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:I> ; <var:d2> := <nat:9> ; <var:d2> := <var:d2> * <var:I> ; <var:d2> := <var:d2> * <var:I> ; <var:e> := <var:d2> ; <var:e> := <var:e> + <var:d1> ; <var:e> := <var:e> + <var:d0> {{ <var:e> = <nat:9> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> * <var:S> /\ <var:d2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> * <var:S> /\ <var:d2> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> * <var:S> /\ <var:d2> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:1> * <var:S> /\ <var:e> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:d0> = <nat:6> /\ <var:e> = <nat:9> * <var:S> ^ <nat:2> + <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:e> = <nat:9> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 