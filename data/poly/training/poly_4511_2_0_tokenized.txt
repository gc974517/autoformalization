\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:4> ; <var:m> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Allowing $ <var:S> = <var:k> $ before running the list of commands it holds that we see $ <var:m> = <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our code is demonstrated with typical Hoare reasoning . Jumping to the following command found in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:S> = <var:k> \} & <var:b0> := <nat:4> & \{ <var:S> = <var:k> \land <var:b0> = <nat:4> \} \end{tabular} This is shown to be logically sound through the variable assignmet scheme given in usual Hoare techniques . Jumping to the next line found in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:S> = <var:k> \} & <var:b0> := <nat:4> & \{ <var:S> = <var:k> \land <var:b0> = <nat:4> \} \end{tabular} This is shown to be logically sound with the assignment inference rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:m> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:S> = <var:k> }} <def:poly> {{ <var:m> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:m> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 