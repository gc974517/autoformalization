\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:d> ; <var:h2> := <var:h1> * <var:d> ; <var:h3> := <var:h2> * <var:d> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:2> ; <var:h3> := <var:h3> * <nat:4> ; <var:c> := <var:h3> <var:c> := <var:c> + <var:h1> <var:c> := <var:c> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Assume $ <var:d> = <var:e> $ before the evaluation of the code , it holds that $ <var:c> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> + <nat:2> $ when series of commands has finished executing . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:d> = <var:e> \} \\ <var:h1> := <var:d> ; \\ \{ <var:d> = <var:e> \land <var:h1> = <var:e> \} \\ <var:h2> := <var:h1> * <var:d> ; \\ \{ <var:d> = <var:e> \land <var:h1> = <var:e> \land <var:h2> = <var:e> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:d> ; \\ \{ <var:d> = <var:e> \land <var:h1> = <var:e> \land <var:h2> = <var:e> ^ <nat:2> \land <var:h3> = <var:e> ^ <nat:3> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:d> = <var:e> \land <var:h1> = <var:e> \land <var:h2> = <var:e> ^ <nat:2> \land <var:h3> = <var:e> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:h1> := <var:h1> * <nat:2> ; \\ \{ <var:d> = <var:e> \land <var:h1> = <nat:2> \times <var:e> \land <var:h2> = <var:e> ^ <nat:2> \land <var:h3> = <var:e> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:h3> := <var:h3> * <nat:4> ; \\ \{ <var:d> = <var:e> \land <var:h1> = <nat:2> \times <var:e> \land <var:h2> = <var:e> ^ <nat:2> \land <var:h3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:c> := <var:h3> \\ \{ <var:d> = <var:e> \land <var:h1> = <nat:2> \times <var:e> \land <var:h2> = <var:e> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:c> = <nat:4> \times <var:e> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:h1> \\ \{ <var:d> = <var:e> \land <var:h0> = <nat:2> \land <var:c> = <nat:4> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> \} \\ <var:c> := <var:c> + <var:h0> \\ \{ <var:d> = <var:e> \land <var:c> = <nat:4> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> + <nat:2> \} \end{eqnarray} Given the preceding argument , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:d> ; <var:h2> := <var:h1> * <var:d> ; <var:h3> := <var:h2> * <var:d> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:2> ; <var:h3> := <var:h3> * <nat:4> ; <var:c> := <var:h3> <var:c> := <var:c> + <var:h1> <var:c> := <var:c> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:d> = <var:e> }} <def:poly> {{ <var:c> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <var:e> /\ <var:h2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <var:e> /\ <var:h2> = <var:e> ^ <nat:2> /\ <var:h3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <var:e> /\ <var:h2> = <var:e> ^ <nat:2> /\ <var:h3> = <var:e> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <nat:2> * <var:e> /\ <var:h2> = <var:e> ^ <nat:2> /\ <var:h3> = <var:e> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <nat:2> * <var:e> /\ <var:h2> = <var:e> ^ <nat:2> /\ <var:h3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h1> = <nat:2> * <var:e> /\ <var:h2> = <var:e> ^ <nat:2> /\ <var:h0> = <nat:2> /\ <var:c> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:h0> = <nat:2> /\ <var:c> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:c> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 