\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:8> ; <var:h1> := <var:h1> * <var:t> ; <var:o> := <var:h1> ; <var:o> := <var:o> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:t> = <var:N> $ before the evaluation of the code , it follows that we have $ <var:o> = <nat:8> \cdot <var:N> + <nat:1> $ after segment of code has terminated . \end{theorem} \begin{proof} The method of proof for this segment of code can be done using usual Hoare techniques . Moving forward to the next step , we see the variable update code defining $ <nat:1> $ as $ <var:h0>$ . This code takes the precondition $ \{ <var:t> = <var:N> \} $ as $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \} $ . This is guaranteed with the assignment rule given by standard Hoare techniques . Moving on to the following line of code in our list of instructions , we see the variable binding statement binding $ <nat:8> $ into $ <var:h1>$ . This moves the condition $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \} $ as $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \land <var:h1> = <nat:8> \} $ . Moving forward to the proceeding piece of code found in our list of instructions , the assignment line defining $ <var:h1> * <var:t> $ toward $ <var:h1>$ . This statement redefines $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \land <var:h1> = <nat:8> \} $ to $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \land <var:h1> = <nat:8> \times <var:N> \} $ . This is shown using the assignment scheme of standard Hoare reasoning . Taking another step toward the proceeding bit of code contained in our list of instructions , the assignment code defining $ <var:h1> $ into $ <var:o>$ . This forwards the precondition $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \land <var:h1> = <nat:8> \times <var:N> \} $ into $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \land <var:o> = <nat:8> \times <var:N> \} $ . Shifting focus toward the upcoming statement found in the series of commands , we see the code letting $ <var:o> + <var:h0$ as $ <var:o>$ . This transfers $ \{ <var:t> = <var:N> \land <var:h0> = <nat:1> \land <var:o> = <nat:8> \times <var:N> \} $ to the postcondition $ \{ <var:t> = <var:N> \land <var:o> = <nat:8> \times <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:h1> := <nat:8> ; <var:h1> := <var:h1> * <var:t> ; <var:o> := <var:h1> ; <var:o> := <var:o> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:t> = <var:N> }} <def:poly> {{ <var:o> = <nat:8> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:h0> = <nat:1> /\ <var:o> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:o> = <nat:8> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 