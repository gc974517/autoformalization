\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:2> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:T> ; <var:V2> := <nat:5> ; <var:V2> := <var:V2> * <var:T> ; <var:V2> := <var:V2> * <var:T> ; <var:N> := <var:V2> ; <var:N> := <var:N> + <var:V1> ; <var:N> := <var:N> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- letting positive integer coefficients $ <var:h> $ --- it to be that $ <var:T> = <var:h> $ prior to running our set of commands , it follows that we see $ <var:N> = <nat:5> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:h> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \} \\ <var:V1> := <nat:4> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:V1> = <nat:4> \} \\ <var:V1> := <var:V1> * <var:T> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:V1> = <nat:4> * <var:h> \} \\ <var:V2> := <nat:5> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:V1> = <nat:4> * <var:h> \land <var:V2> = <nat:5> \} \\ <var:V2> := <var:V2> * <var:T> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:V1> = <nat:4> * <var:h> \land <var:V2> = <nat:5> * <var:h> \} \\ <var:V2> := <var:V2> * <var:T> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:V1> = <nat:4> * <var:h> \land <var:V2> = <nat:5> * <var:h> ^ <nat:2> \} \\ <var:N> := <var:V2> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:V1> = <nat:4> * <var:h> \land <var:N> = <nat:5> * <var:h> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:V1> ; \\ \{ <var:T> = <var:h> \land <var:V0> = <nat:2> \land <var:N> = <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> \} \\ <var:N> := <var:N> + <var:V0> \\ \{ <var:T> = <var:h> \land <var:N> = <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:2> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:T> ; <var:V2> := <nat:5> ; <var:V2> := <var:V2> * <var:T> ; <var:V2> := <var:V2> * <var:T> ; <var:N> := <var:V2> ; <var:N> := <var:N> + <var:V1> ; <var:N> := <var:N> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:T> = <var:h> }} <def:poly> {{ <var:N> = <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:4> * <var:h> /\ <var:V2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:4> * <var:h> /\ <var:V2> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:4> * <var:h> /\ <var:V2> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:4> * <var:h> /\ <var:N> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:V0> = <nat:2> /\ <var:N> = <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:N> = <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 