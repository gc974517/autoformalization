\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:m1> := <var:U> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:7> ; <var:W> := <var:m1> <var:W> := <var:W> + <var:m0> \end{verbatim} Allowing given positive integer coefficients $ <var:E> $ it to be that $ <var:U> = <var:E> $ ahead of the evaluation of our code , it follows that we see $ <var:W> = <nat:7> \times <var:E> + <nat:5> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:U> = <var:E> \} \\ <var:m1> := <var:U> ; \\ \{ <var:U> = <var:E> \land <var:m1> = <var:E> \} \\ <var:m0> := <nat:5> ; \\ \{ <var:U> = <var:E> \land <var:m1> = <var:E> \land <var:m0> = <nat:5> \} \\ <var:m1> := <var:m1> * <nat:7> ; \\ \{ <var:U> = <var:E> \land <var:m1> = <nat:7> * <var:E> \land <var:m0> = <nat:5> \} \\ <var:W> := <var:m1> \\ \{ <var:U> = <var:E> \land <var:m0> = <nat:5> \land <var:W> = <nat:7> * <var:E> \} \\ <var:W> := <var:W> + <var:m0> \\ \{ <var:U> = <var:E> \land <var:W> = <nat:7> * <var:E> + <nat:5> \} \end{eqnarray} As a consequence , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:U> = <var:E> }} <var:m1> := <var:U> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:7> ; <var:W> := <var:m1> <var:W> := <var:W> + <var:m0> {{ <var:W> = <nat:7> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:m1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:m1> = <var:E> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:m1> = <nat:7> * <var:E> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:m0> = <nat:5> /\ <var:W> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:W> = <nat:7> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 