\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:S> ; <var:Q2> := <var:Q1> * <var:S> ; <var:Q3> := <var:Q2> * <var:S> ; <var:Q0> := <nat:1> ; <var:Q2> := <var:Q2> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:p> := <var:Q3> <var:p> := <var:p> + <var:Q2> <var:p> := <var:p> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Allow that we have $ <var:S> = <var:J> $ ahead of executing the set of instructions , then we have $ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:1> $ when code has terminated . \end{theorem} \begin{proof} The method of proof for the code can be done by standard Hoare techniques . Taking a look at the subsequent command contained in our segment of code , we see the variable update code defining $ <var:S> $ toward $ <var:Q1>$ . This command takes the condition $ \{ <var:S> = <var:J> \} $ toward the condition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \} $ . Going forward , we see the line defining $ <var:Q1> * <var:S> $ toward $ <var:Q2>$ . This code forwards the condition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \} $ toward $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} $ . This is rigorously given by the assignment rule of typical Hoare techniques . Honing in on the subsequent bit of code in the code , we have the environment update command \verb | <var:Q3> := <var:Q2> * <var:S> ; | . This command redefines $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} $ as $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \} $ . This is known to be sound through the assignment rule of typical Hoare reasoning . Advancing to the proceeding command contained in the list of instructions , the line \verb | <var:Q0> := <nat:1> ; | . This statement redefines the condition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \} $ as the condition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . Moving forward to the subsequent line of code in our set of commands , the variable assignmet command giving $ <var:Q2> * <nat:9> $ into $ <var:Q2>$ . This command transfers the precondition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ to $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:9> * <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . This is known to be sound with the assignment scheme defined by standard Hoare reasoning . Observing the proceeding line found in the segment of code , the binding statement \verb | <var:Q3> := <var:Q3> * <nat:7> ; | . This statement forwards $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:9> * <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ to the condition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:9> * <var:J> ^ <nat:2> \land <var:Q3> = <nat:7> * <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . Shifting focus toward the following step in our segment of code , we see the environment update line \verb | <var:p> := <var:Q3> | . This advances the precondition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:9> * <var:J> ^ <nat:2> \land <var:Q3> = <nat:7> * <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ toward the postcondition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:9> * <var:J> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:p> = <nat:7> * <var:J> ^ <nat:3> \} $ . Immediately following , the binding command yielding $ <var:p> + <var:Q2$ as $ <var:p>$ . This command redefines the condition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:9> * <var:J> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:p> = <nat:7> * <var:J> ^ <nat:3> \} $ toward $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q0> = <nat:1> \land <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> \} $ . Going forward , the variable assignmet line assigning $ <var:p> + <var:Q0$ to $ <var:p>$ . This code transfers the precondition $ \{ <var:S> = <var:J> \land <var:Q1> = <var:J> \land <var:Q0> = <nat:1> \land <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> \} $ toward $ \{ <var:S> = <var:J> \land <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:1> \} $ . This is known to be sound using the assignment inference rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:S> ; <var:Q2> := <var:Q1> * <var:S> ; <var:Q3> := <var:Q2> * <var:S> ; <var:Q0> := <nat:1> ; <var:Q2> := <var:Q2> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:p> := <var:Q3> <var:p> := <var:p> + <var:Q2> <var:p> := <var:p> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:S> = <var:J> }} <def:poly> {{ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:Q0> = <nat:1> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q0> = <nat:1> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:p> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 