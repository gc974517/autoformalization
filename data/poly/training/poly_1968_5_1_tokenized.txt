\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:I> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:5> ; <var:w> := <var:y1> <var:w> := <var:w> + <var:y0> \end{verbatim} Assuming $ <var:I> = <var:z> $ ahead of executing our series of commands it must be that we see $ <var:w> = <nat:5> \times <var:z> + <nat:5> $ when set of instructions has finished . \end{theorem} \begin{proof} The proof of our series of instructions can be given by standard Hoare reasoning . Keeping momentum , \verb | { <var:I> = <var:z> } <var:y1> := <var:I> { <var:I> = <var:z> \land <var:y1> = <var:z> } | , \verb | { <var:I> = <var:z> \land <var:y1> = <var:z> } <var:y0> := <nat:5> { <var:I> = <var:z> \land <var:y1> = <var:z> \land <var:y0> = <nat:5> } | , \verb | { <var:I> = <var:z> \land <var:y1> = <var:z> \land <var:y0> = <nat:5> } <var:y1> := <var:y1> * <nat:5> { <var:I> = <var:z> \land <var:y1> = <nat:5> * <var:z> \land <var:y0> = <nat:5> } | and \verb | { <var:I> = <var:z> \land <var:y1> = <nat:5> * <var:z> \land <var:y0> = <nat:5> } <var:w> := <var:y1{ <var:I> = <var:z> \land <var:y0> = <nat:5> \land <var:w> = <nat:5> * <var:z> } | . Moving forward to the proceeding statement found in our code , we see \verb | { <var:I> = <var:z> } <var:y1> := <var:I> { <var:I> = <var:z> \land <var:y1> = <var:z> } | . This is known to be sound using the variable update rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:I> = <var:z> }} <var:y1> := <var:I> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:5> ; <var:w> := <var:y1> <var:w> := <var:w> + <var:y0> {{ <var:w> = <nat:5> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:y1> = <var:z> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:y1> = <nat:5> * <var:z> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:y0> = <nat:5> /\ <var:w> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:w> = <nat:5> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 