\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:G> ; <var:u> := <var:k1> ; <var:u> := <var:u> + <var:k0> \end{verbatim} Allow that we have $ <var:G> = <var:y> $ for all positive integers $ <var:y> $ ahead of the evaluation of this set of instructions , it must be that we see $ <var:u> = <nat:4> \times <var:y> + <nat:7> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The argument for the program is accomplished with typical Hoare techniques . Honing in on the upcoming statements seen in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:y> \} & <var:k0> := <nat:7> & \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \} \\ \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \} & <var:k1> := <nat:4> & \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> \} \\ \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> \} & <var:k1> := <var:k1> * <var:G> & \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> \times <var:y> \} \end{tabular} This is guaranteed by the binding scheme given in typical Hoare logic . Paying attention to the next bit of code found in the code , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:y> \} & <var:k0> := <nat:7> & \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \} \end{tabular} Advancing to the upcoming line in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:G> = <var:y> \} & <var:k0> := <nat:7> & \{ <var:G> = <var:y> \land <var:k0> = <nat:7> \} \end{tabular} This is given through the variable assignmet inference rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:G> = <var:y> }} <var:k0> := <nat:7> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:G> ; <var:u> := <var:k1> ; <var:u> := <var:u> + <var:k0> {{ <var:u> = <nat:4> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:k0> = <nat:7> /\ <var:u> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:u> = <nat:4> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 