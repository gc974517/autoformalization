\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:Q> ; <var:C> := <nat:2> + <var:C> * <var:Q> ; <var:C> := <nat:4> + <var:C> * <var:Q> ; <var:C> := <nat:1> + <var:C> * <var:Q> ; <var:C> := <var:C> * <var:Q> ; <var:C> := <nat:4> + <var:C> * <var:Q> ; <var:C> := <nat:3> + <var:C> * <var:Q> ; <var:C> := <var:C> * <var:Q> ; <var:C> := <var:C> * <var:Q> ; <var:C> := <nat:2> + <var:C> * <var:Q> \end{verbatim} Allowing that $ <var:Q> = <var:i> $ before executing our series of commands it must be that $ <var:C> = <nat:2> \cdot <var:i> ^ <nat:10> + <nat:3> \cdot <var:i> ^ <nat:9> + <nat:2> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:1> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> $ when program terminates . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be given using standard Hoare techniques . Moving forward to the next step , we have \verb | { <var:Q> = <var:i> } <var:C> := <nat:2> { <var:Q> = <var:i> \land <var:C> = <nat:2> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> } <var:C> := <nat:3> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> + <nat:3> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> + <nat:3> } <var:C> := <nat:2> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:2> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:2> } <var:C> := <nat:4> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:3> + <nat:3> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:4> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:3> + <nat:3> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:4> } <var:C> := <nat:1> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:4> + <nat:3> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:1> } | and \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:4> + <nat:3> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:1> } <var:C> := <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:5> + <nat:3> \times <var:i> ^ <nat:4> + <nat:2> \times <var:i> ^ <nat:3> + <nat:4> \times <var:i> ^ <nat:2> + <nat:1> \times <var:i> + } | . This is shown using the variable binding rule obtained from typical Hoare techniques . Moving on to the next step , \verb | { <var:Q> = <var:i> } <var:C> := <nat:2> { <var:Q> = <var:i> \land <var:C> = <nat:2> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> } <var:C> := <nat:3> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> + <nat:3> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> + <nat:3> } <var:C> := <nat:2> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:2> } | , \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:2> } <var:C> := <nat:4> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:3> + <nat:3> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:4> } | and \verb | { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:3> + <nat:3> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:4> } <var:C> := <nat:1> + <var:C> * <var:Q> { <var:Q> = <var:i> \land <var:C> = <nat:2> \times <var:i> ^ <nat:4> + <nat:3> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Q> = <var:i> }} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:Q> ; <var:C> := <nat:2> + <var:C> * <var:Q> ; <var:C> := <nat:4> + <var:C> * <var:Q> ; <var:C> := <nat:1> + <var:C> * <var:Q> ; <var:C> := <var:C> * <var:Q> ; <var:C> := <nat:4> + <var:C> * <var:Q> ; <var:C> := <nat:3> + <var:C> * <var:Q> ; <var:C> := <var:C> * <var:Q> ; <var:C> := <var:C> * <var:Q> ; <var:C> := <nat:2> + <var:C> * <var:Q> {{ <var:C> = <nat:2> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 