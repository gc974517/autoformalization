\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:a0> := <nat:4> ; <var:P> := <var:a0> \end{verbatim} Given --- letting $ <var:l> $ --- $ <var:g> = <var:l> $ before running our code segment it must be that we have $ <var:P> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions is done through Hoare logic . Considering the proceeding commands seen in our program , we see \begin{verbatim} { <var:g> = <var:l> } <var:a0> := <nat:4> { <var:g> = <var:l> \land <var:a0> = <nat:4> } { <var:g> = <var:l> \land <var:a0> = <nat:4> } <var:P> := <var:a0{ <var:g> = <var:l> \land <var:P> = <nat:4> } \end{verbatim} This is given by the variable assignmet rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:g> = <var:l> }} <var:a0> := <nat:4> ; <var:P> := <var:a0> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 