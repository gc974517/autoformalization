\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:5> ; <var:N> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:y> = <var:d> $ prior to interpreting the set of instructions it holds that we see $ <var:N> = <nat:5> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:d> \} \\ <var:Y0> := <nat:5> ; \\ \{ <var:y> = <var:d> \land <var:Y0> = <nat:5> \} \end{eqnarray} Continuing executing this series of commands produces : \begin{eqnarray} <var:N> := <var:Y0> \\ \{ <var:y> = <var:d> \land <var:N> = <nat:5> \} \end{eqnarray} Hence , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:5> ; <var:N> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:y> = <var:d> }} <def:poly> {{ <var:N> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:N> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 