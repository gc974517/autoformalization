\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:9> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:n> ; <var:Q> := <var:q1> ; <var:Q> := <var:Q> + <var:q0> \end{verbatim} Allowing that we have $ <var:n> = <var:p> $ --- given positive numbers $ <var:p> $ --- before executing our list of instructions it follows that we see $ <var:Q> = <nat:5> \cdot <var:p> + <nat:9> $ . \end{theorem} \begin{proof} Observe that the below decorated code segment . \begin{eqnarray} \{ <var:n> = <var:p> \} \\ <var:q0> := <nat:9> ; \\ \{ <var:n> = <var:p> \land <var:q0> = <nat:9> \} \\ <var:q1> := <nat:5> ; \\ \{ <var:n> = <var:p> \land <var:q0> = <nat:9> \land <var:q1> = <nat:5> \} \\ <var:q1> := <var:q1> * <var:n> ; \\ \{ <var:n> = <var:p> \land <var:q0> = <nat:9> \land <var:q1> = <nat:5> * <var:p> \} \\ <var:Q> := <var:q1> ; \\ \{ <var:n> = <var:p> \land <var:q0> = <nat:9> \land <var:Q> = <nat:5> * <var:p> \} \\ <var:Q> := <var:Q> + <var:q0> \\ \{ <var:n> = <var:p> \land <var:Q> = <nat:5> * <var:p> + <nat:9> \} \end{eqnarray} Applying usual Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:n> = <var:p> }} <var:q0> := <nat:9> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:n> ; <var:Q> := <var:q1> ; <var:Q> := <var:Q> + <var:q0> {{ <var:Q> = <nat:5> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:q0> = <nat:9> /\ <var:Q> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:Q> = <nat:5> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 