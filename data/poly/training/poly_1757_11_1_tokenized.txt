\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:i> ; <var:f2> := <var:f1> * <var:i> ; <var:f3> := <var:f2> * <var:i> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:6> ; <var:f3> := <var:f3> * <nat:9> ; <var:N> := <var:f3> <var:N> := <var:N> + <var:f2> <var:N> := <var:N> + <var:f1> <var:N> := <var:N> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:i> = <var:c> $ , given all positive integer coefficients $ <var:c> $ , before the evaluation of our list of instructions it follows that $ <var:N> = <nat:9> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:6> $ when code exits . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be accomplished with typical Hoare reasoning . Honing in on the following bit of code contained in our list of commands , the assignment command giving $ <var:i> $ toward $ <var:f1>$ . This line transfers the precondition $ \{ <var:i> = <var:c> \} $ as $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \} $ . Next , we have the variable binding code \verb | <var:f2> := <var:f1> * <var:i> ; | . This statement forwards the condition $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \} $ as the condition $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \} $ . Going forward , we have the assignment command letting $ <var:f2> * <var:i> $ as $ <var:f3>$ . This line advances the precondition $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \} $ to the condition $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \} $ . This is guaranteed using the assignment inference rule found in usual Hoare logic . Stepping through , we have the assignment command giving $ <nat:6> $ toward $ <var:f0>$ . This line forwards the condition $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \} $ as the condition $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ . Looking at the following statement found in the set of commands , we have the variable binding line assigning $ <var:f1> * <nat:8> $ to $ <var:f1>$ . This code advances $ \{ <var:i> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ into $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ . Looking at the following command found in our program , the line \verb | <var:f2> := <var:f2> * <nat:6> ; | . This takes the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ toward $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <nat:6> \cdot <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ . This is ensured by the assignment inference rule obtained from Hoare techniques . Observing the following line found in our series of instructions , we see the variable binding command yielding $ <var:f3> * <nat:9> $ into $ <var:f3>$ . This redefines the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <nat:6> \cdot <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ toward the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <nat:6> \cdot <var:c> ^ <nat:2> \land <var:f3> = <nat:9> \cdot <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ . Taking another step toward the following step contained in our set of instructions , we see the variable assignmet statement binding $ <var:f3$ as $ <var:N>$ . This redefines the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <nat:6> \cdot <var:c> ^ <nat:2> \land <var:f3> = <nat:9> \cdot <var:c> ^ <nat:3> \land <var:f0> = <nat:6> \} $ to $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <nat:6> \cdot <var:c> ^ <nat:2> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> \} $ . This is deduced by the assignment rule defined in Hoare reasoning . Moving on to the proceeding bit of code seen in our segment of code , we see the environment update line letting $ <var:N> + <var:f2$ as $ <var:N>$ . This command takes the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f2> = <nat:6> \cdot <var:c> ^ <nat:2> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> \} $ toward the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> + <nat:6> \cdot <var:c> ^ <nat:2> \} $ . This is guaranteed by the assignment scheme defined in usual Hoare logic . Moving forward , we have the command letting $ <var:N> + <var:f1$ into $ <var:N>$ . This line advances the condition $ \{ <var:i> = <var:c> \land <var:f1> = <nat:8> \cdot <var:c> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> + <nat:6> \cdot <var:c> ^ <nat:2> \} $ toward the postcondition $ \{ <var:i> = <var:c> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> + <nat:6> \cdot <var:c> ^ <nat:2> + <nat:8> \cdot <var:c> \} $ . This is ensured with the assignment inference rule given in usual Hoare logic . Moving on , the variable assignmet line giving $ <var:N> + <var:f0$ as $ <var:N>$ . This advances the precondition $ \{ <var:i> = <var:c> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> + <nat:6> \cdot <var:c> ^ <nat:2> + <nat:8> \cdot <var:c> \} $ to the postcondition $ \{ <var:i> = <var:c> \land <var:N> = <nat:9> \cdot <var:c> ^ <nat:3> + <nat:6> \cdot <var:c> ^ <nat:2> + <nat:8> \cdot <var:c> + <nat:6> \} $ . This is known to be sound by the assignment inference rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:i> ; <var:f2> := <var:f1> * <var:i> ; <var:f3> := <var:f2> * <var:i> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:6> ; <var:f3> := <var:f3> * <nat:9> ; <var:N> := <var:f3> <var:N> := <var:N> + <var:f2> <var:N> := <var:N> + <var:f1> <var:N> := <var:N> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:i> = <var:c> }} <def:poly> {{ <var:N> = <nat:9> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:c> ^ <nat:3> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:N> = <nat:9> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 