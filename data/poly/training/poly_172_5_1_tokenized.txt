\begin{document} \begin{theorem} Define the following series of commands : \begin{verbatim} <var:b1> := <var:Y> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:5> ; <var:z> := <var:b1> <var:z> := <var:z> + <var:b0> \end{verbatim} Assume it to hold that $ <var:Y> = <var:L> $ --- for any $ <var:L> $ --- before interpreting this segment of code it must be that we have $ <var:z> = <nat:5> * <var:L> + <nat:9> $ . \end{theorem} \begin{proof} Notice the following decorated series of commands . \begin{eqnarray} \{ <var:Y> = <var:L> \} \\ <var:b1> := <var:Y> ; \\ \{ <var:Y> = <var:L> \land <var:b1> = <var:L> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:Y> = <var:L> \land <var:b1> = <var:L> \land <var:b0> = <nat:9> \} \\ <var:b1> := <var:b1> * <nat:5> ; \\ \{ <var:Y> = <var:L> \land <var:b1> = <nat:5> \times <var:L> \land <var:b0> = <nat:9> \} \\ <var:z> := <var:b1> \\ \{ <var:Y> = <var:L> \land <var:b0> = <nat:9> \land <var:z> = <nat:5> \times <var:L> \} \\ <var:z> := <var:z> + <var:b0> \\ \{ <var:Y> = <var:L> \land <var:z> = <nat:5> \times <var:L> + <nat:9> \} \end{eqnarray} The application of standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Y> = <var:L> }} <var:b1> := <var:Y> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:5> ; <var:z> := <var:b1> <var:z> := <var:z> + <var:b0> {{ <var:z> = <nat:5> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:b1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:b1> = <var:L> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:b1> = <nat:5> * <var:L> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:b0> = <nat:9> /\ <var:z> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:z> = <nat:5> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 