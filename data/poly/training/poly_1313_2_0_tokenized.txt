\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:r0> := <nat:2> ; <var:e> := <var:r0> \end{verbatim} Allow $ <var:w> = <var:z> $ ahead of running this program , it follows that we see $ <var:e> = <nat:2> $ when code segment has finished . \end{theorem} \begin{proof} The method of proof for this series of instructions is given through the below decorated set of instructions . \begin{eqnarray} \{ <var:w> = <var:z> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:w> = <var:z> \land <var:r0> = <nat:2> \} \\ <var:e> := <var:r0> \\ \{ <var:w> = <var:z> \land <var:e> = <nat:2> \} \end{eqnarray} Utilizing Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <var:r0> := <nat:2> ; <var:e> := <var:r0> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 