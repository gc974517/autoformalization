\begin{document} \begin{theorem} Define a program in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:8> ; <var:a> := <var:x0> \end{verbatim} Allow it to hold that $ <var:p> = <var:k> $ --- letting $ <var:k> $ --- prior to interpreting this list of instructions it must be that $ <var:a> = <nat:8> $ after code segment has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is demonstrated by standard Hoare reasoning . Going to the next step , \begin{eqnarray} \{ <var:p> = <var:k> \} \, <var:x0> := <nat:8> \, \{ <var:p> = <var:k> \land <var:x0> = <nat:8> \} \end{eqnarray} This is rigorously given through the rule defined by standard Hoare logic . Taking another step toward the upcoming command in the series of commands , we have \begin{eqnarray} \{ <var:p> = <var:k> \} \, <var:x0> := <nat:8> \, \{ <var:p> = <var:k> \land <var:x0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:p> = <var:k> }} <var:x0> := <nat:8> ; <var:a> := <var:x0> {{ <var:a> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:a> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 