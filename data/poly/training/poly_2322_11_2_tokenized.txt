\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as \begin{verbatim} <var:G> := <nat:3> ; <var:G> := <nat:2> + <var:G> * <var:J> ; <var:G> := <nat:3> + <var:G> * <var:J> ; <var:G> := <nat:1> + <var:G> * <var:J> ; <var:G> := <nat:3> + <var:G> * <var:J> ; <var:G> := <nat:2> + <var:G> * <var:J> ; <var:G> := <nat:4> + <var:G> * <var:J> ; <var:G> := <var:G> * <var:J> ; <var:G> := <nat:2> + <var:G> * <var:J> ; <var:G> := <var:G> * <var:J> ; <var:G> := <nat:3> + <var:G> * <var:J> \end{verbatim} Given with some positive coefficients $ <var:I> $ it to hold that $ <var:J> = <var:I> $ before interpreting the set of instructions , it holds that we see $ <var:G> = <nat:3> \times <var:I> ^ <nat:10> + <nat:2> \times <var:I> ^ <nat:9> + <nat:3> \times <var:I> ^ <nat:8> + <nat:1> \times <var:I> ^ <nat:7> + <nat:3> \times <var:I> ^ <nat:6> + <nat:2> \times <var:I> ^ <nat:5> + <nat:4> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our code segment can be demonstrated by standard Hoare logic . Immediately after , we have \begin{verbatim} { <var:J> = <var:I> } <var:G> := <nat:3> { <var:J> = <var:I> \land <var:G> = <nat:3> } { <var:J> = <var:I> \land <var:G> = <nat:3> } <var:G> := <nat:2> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> + <nat:2> } { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> + <nat:2> } <var:G> := <nat:3> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> } { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> } <var:G> := <nat:1> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:1> } { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:1> } <var:G> := <nat:3> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:3> } { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:3> } <var:G> := <nat:2> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:2> } { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:2> } <var:G> := <nat:4> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:4> } \end{verbatim} Going forward , we have \begin{verbatim} { <var:J> = <var:I> } <var:G> := <nat:3> { <var:J> = <var:I> \land <var:G> = <nat:3> } { <var:J> = <var:I> \land <var:G> = <nat:3> } <var:G> := <nat:2> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> + <nat:2> } { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> + <nat:2> } <var:G> := <nat:3> + <var:G> * <var:J> { <var:J> = <var:I> \land <var:G> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> } \end{verbatim} Shifting focus toward the following command found in our series of instructions , we see \begin{verbatim} { <var:J> = <var:I> } <var:G> := <nat:3> { <var:J> = <var:I> \land <var:G> = <nat:3> } \end{verbatim} This is deduced with the binding law defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:J> = <var:I> }} <var:G> := <nat:3> ; <var:G> := <nat:2> + <var:G> * <var:J> ; <var:G> := <nat:3> + <var:G> * <var:J> ; <var:G> := <nat:1> + <var:G> * <var:J> ; <var:G> := <nat:3> + <var:G> * <var:J> ; <var:G> := <nat:2> + <var:G> * <var:J> ; <var:G> := <nat:4> + <var:G> * <var:J> ; <var:G> := <var:G> * <var:J> ; <var:G> := <nat:2> + <var:G> * <var:J> ; <var:G> := <var:G> * <var:J> ; <var:G> := <nat:3> + <var:G> * <var:J> {{ <var:G> = <nat:3> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:G> = <nat:3> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 