\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:8> ; <var:E> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:h> = <var:W> $ ( taking $ <var:W> \in \mathbb{N} $ ) prior to the evaluation of this set of commands , it holds that we have $ <var:E> = <nat:8> $ when program finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions is shown through Hoare reasoning . Moving onward , we see the variable assignmet code yielding $ <nat:8> $ toward $ <var:F0>$ . This code transfers the condition $ \{ <var:h> = <var:W> \} $ to $ \{ <var:h> = <var:W> \land <var:F0> = <nat:8> \} $ . This is ensured with the assignment scheme in typical Hoare reasoning . Jumping to the proceeding bit of code seen in our code , the variable assignmet statement \verb | <var:E> := <var:F0> | . This takes the condition $ \{ <var:h> = <var:W> \land <var:F0> = <nat:8> \} $ into $ \{ <var:h> = <var:W> \land <var:E> = <nat:8> \} $ . This is given through the assignment rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:8> ; <var:E> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:h> = <var:W> }} <def:poly> {{ <var:E> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:E> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 