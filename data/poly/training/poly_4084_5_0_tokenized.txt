\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:x> ; <var:d> := <var:i1> ; <var:d> := <var:d> + <var:i0> \end{verbatim} Given it to hold that $ <var:x> = <var:U> $ given all $ <var:U> \in \mathbb{Z}^+ $ prior to interpreting the series of instructions , it must be that we have $ <var:d> = <nat:4> \times <var:U> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the list of commands can be demonstrated through typical Hoare logic . Going forward , \[ \begin{tabular} {rcl} \{ <var:x> = <var:U> \} & <var:i0> := <nat:7> & \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \} \\ \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \} & <var:i1> := <nat:4> & \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \} \\ \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \} & <var:i1> := <var:i1> * <var:x> & \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \cdot <var:U> \} \end{tabular} Honing in on the following step seen in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:x> = <var:U> \} & <var:i0> := <nat:7> & \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \} \end{tabular} Going to the next step , \[ \begin{tabular} {rcl} \{ <var:x> = <var:U> \} & <var:i0> := <nat:7> & \{ <var:x> = <var:U> \land <var:i0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:x> = <var:U> }} <var:i0> := <nat:7> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:x> ; <var:d> := <var:i1> ; <var:d> := <var:d> + <var:i0> {{ <var:d> = <nat:4> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:i0> = <nat:7> /\ <var:d> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:d> = <nat:4> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 