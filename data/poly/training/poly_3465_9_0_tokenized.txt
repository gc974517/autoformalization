\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:A> ; <var:Q2> := <nat:6> ; <var:Q2> := <var:Q2> * <var:A> ; <var:Q2> := <var:Q2> * <var:A> ; <var:V> := <var:Q2> ; <var:V> := <var:V> + <var:Q1> ; <var:V> := <var:V> + <var:Q0> \end{verbatim} Given ( letting $ <var:S> $ ) that $ <var:A> = <var:S> $ prior to interpreting this program , then we have $ <var:V> = <nat:6> \cdot <var:S> ^ <nat:2> + <nat:9> \cdot <var:S> + <nat:8> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:A> = <var:S> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \} \\ <var:Q1> := <nat:9> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \times <var:S> \} \\ <var:Q2> := <nat:6> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \times <var:S> \land <var:Q2> = <nat:6> \} \\ <var:Q2> := <var:Q2> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \times <var:S> \land <var:Q2> = <nat:6> \times <var:S> \} \\ <var:Q2> := <var:Q2> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \times <var:S> \land <var:Q2> = <nat:6> \times <var:S> ^ <nat:2> \} \\ <var:V> := <var:Q2> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:9> \times <var:S> \land <var:V> = <nat:6> \times <var:S> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:Q1> ; \\ \{ <var:A> = <var:S> \land <var:Q0> = <nat:8> \land <var:V> = <nat:6> \times <var:S> ^ <nat:2> + <nat:9> \times <var:S> \} \\ <var:V> := <var:V> + <var:Q0> \\ \{ <var:A> = <var:S> \land <var:V> = <nat:6> \times <var:S> ^ <nat:2> + <nat:9> \times <var:S> + <nat:8> \} \end{eqnarray} Considering the above , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <var:Q0> := <nat:8> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:A> ; <var:Q2> := <nat:6> ; <var:Q2> := <var:Q2> * <var:A> ; <var:Q2> := <var:Q2> * <var:A> ; <var:V> := <var:Q2> ; <var:V> := <var:V> + <var:Q1> ; <var:V> := <var:V> + <var:Q0> {{ <var:V> = <nat:6> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> * <var:S> /\ <var:Q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> * <var:S> /\ <var:Q2> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> * <var:S> /\ <var:Q2> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:9> * <var:S> /\ <var:V> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:Q0> = <nat:8> /\ <var:V> = <nat:6> * <var:S> ^ <nat:2> + <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:V> = <nat:6> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 