\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:9> ; <var:E> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:D> = <var:M> $ , letting $ <var:M> \in \mathbb{Z}^+ $ , before the execution of the list of commands it follows that we have $ <var:E> = <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for our code is given with Hoare techniques . Stepping through , \[ \begin{tabular} {rcl} \{ <var:D> = <var:M> \} & <var:C0> := <nat:9> & \{ <var:D> = <var:M> \land <var:C0> = <nat:9> \} \end{tabular} After , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:M> \} & <var:C0> := <nat:9> & \{ <var:D> = <var:M> \land <var:C0> = <nat:9> \} \end{tabular} This is deduced with the variable update rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:9> ; <var:E> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <def:poly> {{ <var:E> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:E> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 