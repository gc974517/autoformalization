\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:f> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:A> = <var:e> $ ahead of interpreting the series of commands it holds that $ <var:f> = <nat:4> $ after list of instructions has executed . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:A> = <var:e> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:A> = <var:e> \land <var:V0> = <nat:4> \} \\ <var:f> := <var:V0> \\ \{ <var:A> = <var:e> \land <var:f> = <nat:4> \} \end{eqnarray} Considering the above , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:f> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:A> = <var:e> }} <def:poly> {{ <var:f> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:e> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:e> /\ <var:f> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 