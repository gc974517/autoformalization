\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:2> + <var:w> * <var:j> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Allowing that $ <var:j> = <var:Y> $ before executing the list of commands then $ <var:w> = <nat:3> \times <var:Y> + <nat:2> $ when series of commands is done . \end{theorem} \begin{proof} Observe that the following decorated series of instructions . \begin{eqnarray} \{ <var:j> = <var:Y> \} \\ <var:w> := <nat:3> ; \\ \{ <var:j> = <var:Y> \land <var:w> = <nat:3> \} \\ <var:w> := <nat:2> + <var:w> * <var:j> \\ \{ <var:j> = <var:Y> \land <var:w> = <nat:3> * <var:Y> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:3> ; <var:w> := <nat:2> + <var:w> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:j> = <var:Y> }} <def:poly> {{ <var:w> = <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:w> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 