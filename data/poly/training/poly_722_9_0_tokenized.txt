\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:1> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:Y> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:Y> ; <var:a2> := <var:a2> * <var:Y> ; <var:F> := <var:a2> ; <var:F> := <var:F> + <var:a1> ; <var:F> := <var:F> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given , for any positive coefficients $ <var:Z> $ , it to hold that $ <var:Y> = <var:Z> $ ahead of running this series of commands , it must be that we see $ <var:F> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:8> \times <var:Z> + <nat:1> $ when set of instructions is done executing . \end{theorem} \begin{proof} The course of logic for this set of commands can be shown through Hoare reasoning . Considering the following bits of codecontained in our set of commands , \begin{verbatim} { <var:Y> = <var:Z> } <var:a0> := <nat:1> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> } <var:a1> := <nat:8> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> } <var:a1> := <var:a1> * <var:Y> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> } <var:a2> := <nat:3> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:a2> = <nat:3> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:a2> = <nat:3> } <var:a2> := <var:a2> * <var:Y> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:a2> = <nat:3> \cdot <var:Z> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:a2> = <nat:3> \cdot <var:Z> } <var:a2> := <var:a2> * <var:Y> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:a2> = <nat:3> \cdot <var:Z> ^ <nat:2> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:a2> = <nat:3> \cdot <var:Z> ^ <nat:2> } <var:F> := <var:a2> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:F> = <nat:3> \cdot <var:Z> ^ <nat:2> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \cdot <var:Z> \land <var:F> = <nat:3> \cdot <var:Z> ^ <nat:2> } <var:F> := <var:F> + <var:a1> { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:F> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> } { <var:Y> = <var:Z> \land <var:a0> = <nat:1> \land <var:F> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> } <var:F> := <var:F> + <var:a0{ <var:Y> = <var:Z> \land <var:F> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:1> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:Y> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:Y> ; <var:a2> := <var:a2> * <var:Y> ; <var:F> := <var:a2> ; <var:F> := <var:F> + <var:a1> ; <var:F> := <var:F> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <def:poly> {{ <var:F> = <nat:3> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:Z> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:Z> /\ <var:a2> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:Z> /\ <var:a2> = <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:Z> /\ <var:F> = <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:a0> = <nat:1> /\ <var:F> = <nat:3> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:F> = <nat:3> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 