\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:7> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:r> ; <var:F2> := <nat:4> ; <var:F2> := <var:F2> * <var:r> ; <var:F2> := <var:F2> * <var:r> ; <var:I> := <var:F2> ; <var:I> := <var:I> + <var:F1> ; <var:I> := <var:I> + <var:F0> \end{verbatim} Allow that $ <var:r> = <var:Y> $ taking natural numbers $ <var:Y> $ prior to running our series of commands , it must be that we see $ <var:I> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions can be shown using this decorated program . \begin{eqnarray} \{ <var:r> = <var:Y> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \} \\ <var:F1> := <nat:1> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:1> \} \\ <var:F1> := <var:F1> * <var:r> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:1> \cdot <var:Y> \} \\ <var:F2> := <nat:4> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:1> \cdot <var:Y> \land <var:F2> = <nat:4> \} \\ <var:F2> := <var:F2> * <var:r> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:1> \cdot <var:Y> \land <var:F2> = <nat:4> \cdot <var:Y> \} \\ <var:F2> := <var:F2> * <var:r> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:1> \cdot <var:Y> \land <var:F2> = <nat:4> \cdot <var:Y> ^ <nat:2> \} \\ <var:I> := <var:F2> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:F1> = <nat:1> \cdot <var:Y> \land <var:I> = <nat:4> \cdot <var:Y> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:F1> ; \\ \{ <var:r> = <var:Y> \land <var:F0> = <nat:7> \land <var:I> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> \} \\ <var:I> := <var:I> + <var:F0> \\ \{ <var:r> = <var:Y> \land <var:I> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:r> = <var:Y> }} <var:F0> := <nat:7> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:r> ; <var:F2> := <nat:4> ; <var:F2> := <var:F2> * <var:r> ; <var:F2> := <var:F2> * <var:r> ; <var:I> := <var:F2> ; <var:I> := <var:I> + <var:F1> ; <var:I> := <var:I> + <var:F0> {{ <var:I> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:1> * <var:Y> /\ <var:F2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:1> * <var:Y> /\ <var:F2> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:1> * <var:Y> /\ <var:F2> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:1> * <var:Y> /\ <var:I> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:F0> = <nat:7> /\ <var:I> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:I> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 