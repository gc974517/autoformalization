\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:m> ; <var:S2> := <var:S1> * <var:m> ; <var:S3> := <var:S2> * <var:m> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:7> ; <var:S2> := <var:S2> * <nat:1> ; <var:S3> := <var:S3> * <nat:1> ; <var:l> := <var:S3> <var:l> := <var:l> + <var:S2> <var:l> := <var:l> + <var:S1> <var:l> := <var:l> + <var:S0> \end{verbatim} Assume ( for all $ <var:q> \in \mathbb{N} $ ) that $ <var:m> = <var:q> $ before evaluating this series of instructions , it holds that $ <var:l> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> ^ <nat:2> + <nat:7> \cdot <var:q> + <nat:9> $ after series of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is given with typical Hoare techniques . Advancing to the proceeding commands contained in the list of instructions , we see \begin{verbatim} { <var:m> = <var:q> } <var:S1> := <var:m> { <var:m> = <var:q> \land <var:S1> = <var:q> } { <var:m> = <var:q> \land <var:S1> = <var:q> } <var:S2> := <var:S1> * <var:m> { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> } { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> } <var:S3> := <var:S2> * <var:m> { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> } { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> } <var:S0> := <nat:9> { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } <var:S1> := <var:S1> * <nat:7> { <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } <var:S2> := <var:S2> * <nat:1> { <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <nat:1> * <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <nat:1> * <var:q> ^ <nat:2> \land <var:S3> = <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } <var:S3> := <var:S3> * <nat:1> { <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <nat:1> * <var:q> ^ <nat:2> \land <var:S3> = <nat:1> * <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <nat:1> * <var:q> ^ <nat:2> \land <var:S3> = <nat:1> * <var:q> ^ <nat:3> \land <var:S0> = <nat:9> } <var:l> := <var:S3{ <var:m> = <var:q> \land <var:S1> = <nat:7> * <var:q> \land <var:S2> = <nat:1> * <var:q> ^ <nat:2> \land <var:S0> = <nat:9> \land <var:l> = <nat:1> * <var:q> ^ <nat:3> } \end{verbatim} Next , we see \begin{verbatim} { <var:m> = <var:q> } <var:S1> := <var:m> { <var:m> = <var:q> \land <var:S1> = <var:q> } { <var:m> = <var:q> \land <var:S1> = <var:q> } <var:S2> := <var:S1> * <var:m> { <var:m> = <var:q> \land <var:S1> = <var:q> \land <var:S2> = <var:q> ^ <nat:2> } \end{verbatim} This is shown to be logically sound with the binding inference rule given by Hoare reasoning . Next , \begin{verbatim} { <var:m> = <var:q> } <var:S1> := <var:m> { <var:m> = <var:q> \land <var:S1> = <var:q> } \end{verbatim} This is shown to be logically sound using the assignment scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:m> = <var:q> }} <var:S1> := <var:m> ; <var:S2> := <var:S1> * <var:m> ; <var:S3> := <var:S2> * <var:m> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:7> ; <var:S2> := <var:S2> * <nat:1> ; <var:S3> := <var:S3> * <nat:1> ; <var:l> := <var:S3> <var:l> := <var:l> + <var:S2> <var:l> := <var:l> + <var:S1> <var:l> := <var:l> + <var:S0> {{ <var:l> = <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <var:q> /\ <var:S2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <var:q> /\ <var:S2> = <var:q> ^ <nat:2> /\ <var:S3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <var:q> /\ <var:S2> = <var:q> ^ <nat:2> /\ <var:S3> = <var:q> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <nat:7> * <var:q> /\ <var:S2> = <var:q> ^ <nat:2> /\ <var:S3> = <var:q> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <nat:7> * <var:q> /\ <var:S2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:S3> = <var:q> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <nat:7> * <var:q> /\ <var:S2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:q> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <nat:7> * <var:q> /\ <var:S2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:S0> = <nat:9> /\ <var:l> = <nat:1> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S1> = <nat:7> * <var:q> /\ <var:S0> = <nat:9> /\ <var:l> = <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:S0> = <nat:9> /\ <var:l> = <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:l> = <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 