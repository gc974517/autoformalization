\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:T1> := <var:u> ; <var:T2> := <var:T1> * <var:u> ; <var:T3> := <var:T2> * <var:u> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:6> ; <var:T3> := <var:T3> * <nat:7> ; <var:M> := <var:T3> <var:M> := <var:M> + <var:T2> <var:M> := <var:M> + <var:T1> <var:M> := <var:M> + <var:T0> \end{verbatim} Given it to hold that $ <var:u> = <var:Y> $ ahead of the execution of our list of commands it must be that $ <var:M> = <nat:7> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this series of commands is shown with usual Hoare logic . Paying attention to the proceeding statement in the set of commands , the variable assignmet line letting $ <var:u> $ into $ <var:T1>$ . This command moves $ \{ <var:u> = <var:Y> \} $ toward $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \} $ . Focusing on the upcoming line contained in our series of commands , we see the environment update code \verb | <var:T2> := <var:T1> * <var:u> ; | . This transfers $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \} $ into the postcondition $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \} $ . This is ensured using the assignment law from standard Hoare reasoning . Moving on to the upcoming step seen in the set of commands , the variable update command binding $ <var:T2> * <var:u> $ into $ <var:T3>$ . This transfers the precondition $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \} $ to the condition $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \} $ . Immediately following , the assignment code defining $ <nat:1> $ to $ <var:T0>$ . This command takes the condition $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \} $ toward $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ . Advancing , we see the binding statement giving $ <var:T1> * <nat:4> $ as $ <var:T1>$ . This redefines the precondition $ \{ <var:u> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ toward the postcondition $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ . Jumping to the upcoming line of code found in our series of instructions , we have the environment update line assigning $ <var:T2> * <nat:6> $ as $ <var:T2>$ . This advances $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ to $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <nat:6> \cdot <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ . This is shown using the assignment law defined by standard Hoare logic . Advancing on , we see the variable binding code \verb | <var:T3> := <var:T3> * <nat:7> ; | . This code moves $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <nat:6> \cdot <var:Y> ^ <nat:2> \land <var:T3> = <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ toward the condition $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <nat:6> \cdot <var:Y> ^ <nat:2> \land <var:T3> = <nat:7> \cdot <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ . This is shown using the assignment scheme obtained from standard Hoare logic . Moving on to the next piece of code contained in the list of commands , the assignment statement letting $ <var:T3$ into $ <var:M>$ . This forwards the precondition $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <nat:6> \cdot <var:Y> ^ <nat:2> \land <var:T3> = <nat:7> \cdot <var:Y> ^ <nat:3> \land <var:T0> = <nat:1> \} $ as $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <nat:6> \cdot <var:Y> ^ <nat:2> \land <var:T0> = <nat:1> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> \} $ . This is rigorously given through the assignment rule from Hoare reasoning . Honing in on the proceeding piece of code found in our list of commands , the assignment line binding $ <var:M> + <var:T2$ toward $ <var:M>$ . This code advances $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T2> = <nat:6> \cdot <var:Y> ^ <nat:2> \land <var:T0> = <nat:1> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> \} $ into the postcondition $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T0> = <nat:1> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> ^ <nat:2> \} $ . This is given using the assignment inference rule of typical Hoare techniques . Advancing on , the assignment line \verb | <var:M> := <var:M> + <var:T1> | . This takes $ \{ <var:u> = <var:Y> \land <var:T1> = <nat:4> \cdot <var:Y> \land <var:T0> = <nat:1> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> ^ <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:Y> \land <var:T0> = <nat:1> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> \} $ . Advancing to the proceeding statement in the set of commands , the variable binding code \verb | <var:M> := <var:M> + <var:T0> | . This statement transfers the condition $ \{ <var:u> = <var:Y> \land <var:T0> = <nat:1> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> \} $ as the condition $ \{ <var:u> = <var:Y> \land <var:M> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:1> \} $ . This is shown with the assignment inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:u> = <var:Y> }} <var:T1> := <var:u> ; <var:T2> := <var:T1> * <var:u> ; <var:T3> := <var:T2> * <var:u> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:6> ; <var:T3> := <var:T3> * <nat:7> ; <var:M> := <var:T3> <var:M> := <var:M> + <var:T2> <var:M> := <var:M> + <var:T1> <var:M> := <var:M> + <var:T0> {{ <var:M> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> /\ <var:T3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> /\ <var:T3> = <var:Y> ^ <nat:3> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <nat:4> * <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> /\ <var:T3> = <var:Y> ^ <nat:3> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <nat:4> * <var:Y> /\ <var:T2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:T3> = <var:Y> ^ <nat:3> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <nat:4> * <var:Y> /\ <var:T2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:T3> = <nat:7> * <var:Y> ^ <nat:3> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <nat:4> * <var:Y> /\ <var:T2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:T0> = <nat:1> /\ <var:M> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T1> = <nat:4> * <var:Y> /\ <var:T0> = <nat:1> /\ <var:M> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:T0> = <nat:1> /\ <var:M> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:M> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 