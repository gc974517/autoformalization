\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:5> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:E> ; <var:M> := <var:h1> ; <var:M> := <var:M> + <var:h0> \end{verbatim} Allowing that $ <var:E> = <var:O> $ prior to the execution of the code , it must be that we see $ <var:M> = <nat:2> \times <var:O> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands is evident through typical Hoare logic . Paying attention to the upcoming line contained in the set of commands , we see the variable update code assigning $ <nat:5> $ into $ <var:h0>$ . This forwards the condition $ \{ <var:E> = <var:O> \} $ toward $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \} $ . This is known to be sound by the assignment law obtained from usual Hoare logic . Moving forward to the next step , the binding statement letting $ <nat:2> $ toward $ <var:h1>$ . This command transfers the precondition $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \} $ as the condition $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:h1> = <nat:2> \} $ . This is guaranteed using the assignment rule obtained from Hoare reasoning . Stepping forward , the binding code binding $ <var:h1> * <var:E> $ as $ <var:h1>$ . This moves the condition $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:h1> = <nat:2> \} $ toward the condition $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:h1> = <nat:2> \cdot <var:O> \} $ . This is shown to be logically sound using the assignment inference rule obtained from usual Hoare logic . Immediately after , the environment update command \verb | <var:M> := <var:h1> ; | . This line forwards $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:h1> = <nat:2> \cdot <var:O> \} $ as the postcondition $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:M> = <nat:2> \cdot <var:O> \} $ . Advancing , we have the assignment line defining $ <var:M> + <var:h0$ into $ <var:M>$ . This command moves the precondition $ \{ <var:E> = <var:O> \land <var:h0> = <nat:5> \land <var:M> = <nat:2> \cdot <var:O> \} $ toward the condition $ \{ <var:E> = <var:O> \land <var:M> = <nat:2> \cdot <var:O> + <nat:5> \} $ . This is guaranteed by the assignment inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:E> = <var:O> }} <var:h0> := <nat:5> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:E> ; <var:M> := <var:h1> ; <var:M> := <var:M> + <var:h0> {{ <var:M> = <nat:2> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:h0> = <nat:5> /\ <var:M> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:M> = <nat:2> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 