\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:3> ; <var:t> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:X> = <var:N> $ ahead of running our set of commands , then $ <var:t> = <nat:3> $ once list of commands finishes . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:X> = <var:N> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:X> = <var:N> \land <var:D0> = <nat:3> \} \\ <var:t> := <var:D0> \\ \{ <var:X> = <var:N> \land <var:t> = <nat:3> \} \end{eqnarray} As a result , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:t> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:X> = <var:N> }} <def:poly> {{ <var:t> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:t> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 