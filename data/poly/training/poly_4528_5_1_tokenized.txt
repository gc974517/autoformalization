\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:T> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:5> ; <var:q> := <var:W1> <var:q> := <var:q> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Given $ <var:T> = <var:l> $ before interpreting our code then we see $ <var:q> = <nat:5> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be given with Hoare reasoning . Next , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:l> \} & <var:W1> := <var:T> & \{ <var:T> = <var:l> \land <var:W1> = <var:l> \} \\ \{ <var:T> = <var:l> \land <var:W1> = <var:l> \} & <var:W0> := <nat:4> & \{ <var:T> = <var:l> \land <var:W1> = <var:l> \land <var:W0> = <nat:4> \} \\ \{ <var:T> = <var:l> \land <var:W1> = <var:l> \land <var:W0> = <nat:4> \} & <var:W1> := <var:W1> * <nat:5> & \{ <var:T> = <var:l> \land <var:W1> = <nat:5> \cdot <var:l> \land <var:W0> = <nat:4> \} \end{tabular} Observing the following pieces of code in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:T> = <var:l> \} & <var:W1> := <var:T> & \{ <var:T> = <var:l> \land <var:W1> = <var:l> \} \\ \{ <var:T> = <var:l> \land <var:W1> = <var:l> \} & <var:W0> := <nat:4> & \{ <var:T> = <var:l> \land <var:W1> = <var:l> \land <var:W0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:T> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:5> ; <var:q> := <var:W1> <var:q> := <var:q> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:T> = <var:l> }} <def:poly> {{ <var:q> = <nat:5> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:W1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:W1> = <var:l> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:W1> = <nat:5> * <var:l> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:W0> = <nat:4> /\ <var:q> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:q> = <nat:5> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 