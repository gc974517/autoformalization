\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:k1> := <var:r> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:3> ; <var:X> := <var:k1> <var:X> := <var:X> + <var:k0> \end{verbatim} Assuming it to hold that $ <var:r> = <var:w> $ ahead of interpreting this set of commands , then we have $ <var:X> = <nat:3> \cdot <var:w> + <nat:2> $ once segment of code finishes . \end{theorem} \begin{proof} The way to prove correctness for our code segment is given using Hoare techniques . Next , we see \verb | { <var:r> = <var:w> } <var:k1> := <var:r> { <var:r> = <var:w> \land <var:k1> = <var:w> } | and \verb | { <var:r> = <var:w> \land <var:k1> = <var:w> } <var:k0> := <nat:2> { <var:r> = <var:w> \land <var:k1> = <var:w> \land <var:k0> = <nat:2> } | . Now , we have \verb | { <var:r> = <var:w> } <var:k1> := <var:r> { <var:r> = <var:w> \land <var:k1> = <var:w> } | , \verb | { <var:r> = <var:w> \land <var:k1> = <var:w> } <var:k0> := <nat:2> { <var:r> = <var:w> \land <var:k1> = <var:w> \land <var:k0> = <nat:2> } | and \verb | { <var:r> = <var:w> \land <var:k1> = <var:w> \land <var:k0> = <nat:2> } <var:k1> := <var:k1> * <nat:3> { <var:r> = <var:w> \land <var:k1> = <nat:3> \cdot <var:w> \land <var:k0> = <nat:2> } | . This is known to be sound by the assignment rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:r> = <var:w> }} <var:k1> := <var:r> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:3> ; <var:X> := <var:k1> <var:X> := <var:X> + <var:k0> {{ <var:X> = <nat:3> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:k1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:k1> = <var:w> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:k1> = <nat:3> * <var:w> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:k0> = <nat:2> /\ <var:X> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:X> = <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 