\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N> := <nat:1> ; <var:N> := <nat:4> + <var:N> * <var:D> ; <var:N> := <nat:3> + <var:N> * <var:D> ; <var:N> := <nat:4> + <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <nat:1> + <var:N> * <var:D> ; <var:N> := <nat:4> + <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <nat:2> + <var:N> * <var:D> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Allowing it to hold that $ <var:D> = <var:b> $ before evaluating the series of instructions , it follows that we have $ <var:N> = <nat:1> \cdot <var:b> ^ <nat:10> + <nat:4> \cdot <var:b> ^ <nat:9> + <nat:3> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:D> = <var:b> \} \\ <var:N> := <nat:1> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \} \\ <var:N> := <nat:4> + <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> + <nat:4> \} \\ <var:N> := <nat:3> + <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:3> \} \\ <var:N> := <nat:4> + <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:4> \} \\ <var:N> := <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + \} \\ <var:N> := <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:3> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + \} \\ <var:N> := <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + \} \\ <var:N> := <nat:1> + <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:3> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:1> \} \\ <var:N> := <nat:4> + <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:3> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> + <nat:4> \} \\ <var:N> := <var:N> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:9> + <nat:4> \cdot <var:b> ^ <nat:8> + <nat:3> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + \} \\ <var:N> := <nat:2> + <var:N> * <var:D> \\ \{ <var:D> = <var:b> \land <var:N> = <nat:1> \cdot <var:b> ^ <nat:10> + <nat:4> \cdot <var:b> ^ <nat:9> + <nat:3> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:2> \} \end{eqnarray} As a result , the series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:1> ; <var:N> := <nat:4> + <var:N> * <var:D> ; <var:N> := <nat:3> + <var:N> * <var:D> ; <var:N> := <nat:4> + <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <nat:1> + <var:N> * <var:D> ; <var:N> := <nat:4> + <var:N> * <var:D> ; <var:N> := <var:N> * <var:D> ; <var:N> := <nat:2> + <var:N> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <def:poly> {{ <var:N> = <nat:1> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:3> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:N> = <nat:1> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:3> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 