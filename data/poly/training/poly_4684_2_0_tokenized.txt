\begin{document} \begin{theorem} Take the following list of instructions as \begin{verbatim} <var:e0> := <nat:3> ; <var:O> := <var:e0> \end{verbatim} Allow ( given any whole numbers $ <var:v> $ ) that we have $ <var:s> = <var:v> $ before interpreting the code it holds that we have $ <var:O> = <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:s> = <var:v> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:s> = <var:v> \land <var:e0> = <nat:3> \} \\ <var:O> := <var:e0> \\ \{ <var:s> = <var:v> \land <var:O> = <nat:3> \} \end{eqnarray} As a result , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:s> = <var:v> }} <var:e0> := <nat:3> ; <var:O> := <var:e0> {{ <var:O> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:O> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 