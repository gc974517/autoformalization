\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:p> ; <var:d2> := <var:d1> * <var:p> ; <var:d3> := <var:d2> * <var:p> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:5> ; <var:d3> := <var:d3> * <nat:2> ; <var:j> := <var:d3> <var:j> := <var:j> + <var:d2> <var:j> := <var:j> + <var:d1> <var:j> := <var:j> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- with some $ <var:F> \in \mathbb{N} $ --- that we have $ <var:p> = <var:F> $ ahead of the evaluation of this series of instructions it holds that $ <var:j> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:5> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:7> $ once series of instructions executes . \end{theorem} \begin{proof} The course of logic for this list of commands is clear by Hoare reasoning . Moving on to the subsequent bits of codein the set of instructions , we see \begin{verbatim} { <var:p> = <var:F> } <var:d1> := <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> } { <var:p> = <var:F> \land <var:d1> = <var:F> } <var:d2> := <var:d1> * <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> } \end{verbatim} Going to the next step , we see \begin{verbatim} { <var:p> = <var:F> } <var:d1> := <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> } \end{verbatim} This is known to be sound by the law given by usual Hoare logic . Following , \begin{verbatim} { <var:p> = <var:F> } <var:d1> := <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> } \end{verbatim} This is shown through the variable assignmet rule in usual Hoare logic . Moving on to the upcoming statements in our code segment , \begin{verbatim} { <var:p> = <var:F> } <var:d1> := <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> } { <var:p> = <var:F> \land <var:d1> = <var:F> } <var:d2> := <var:d1> * <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> } { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> } <var:d3> := <var:d2> * <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d3> = <var:F> ^ <nat:3> } { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d3> = <var:F> ^ <nat:3> } <var:d0> := <nat:7> { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d3> = <var:F> ^ <nat:3> \land <var:d0> = <nat:7> } \end{verbatim} Focusing on the upcoming bits of codefound in the set of instructions , \begin{verbatim} { <var:p> = <var:F> } <var:d1> := <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> } { <var:p> = <var:F> \land <var:d1> = <var:F> } <var:d2> := <var:d1> * <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> } { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> } <var:d3> := <var:d2> * <var:p> { <var:p> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d3> = <var:F> ^ <nat:3> } \end{verbatim} This is deduced by the variable binding law from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:p> ; <var:d2> := <var:d1> * <var:p> ; <var:d3> := <var:d2> * <var:p> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:5> ; <var:d3> := <var:d3> * <nat:2> ; <var:j> := <var:d3> <var:j> := <var:j> + <var:d2> <var:j> := <var:j> + <var:d1> <var:j> := <var:j> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:p> = <var:F> }} <def:poly> {{ <var:j> = <nat:2> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <var:F> /\ <var:d2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <var:F> /\ <var:d2> = <var:F> ^ <nat:2> /\ <var:d3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <var:F> /\ <var:d2> = <var:F> ^ <nat:2> /\ <var:d3> = <var:F> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <nat:4> * <var:F> /\ <var:d2> = <var:F> ^ <nat:2> /\ <var:d3> = <var:F> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <nat:4> * <var:F> /\ <var:d2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:d3> = <var:F> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <nat:4> * <var:F> /\ <var:d2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <nat:4> * <var:F> /\ <var:d2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:d0> = <nat:7> /\ <var:j> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d1> = <nat:4> * <var:F> /\ <var:d0> = <nat:7> /\ <var:j> = <nat:2> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:d0> = <nat:7> /\ <var:j> = <nat:2> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:j> = <nat:2> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 