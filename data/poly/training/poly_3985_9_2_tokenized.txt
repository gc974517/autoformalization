\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:A> ; <var:H> := <nat:3> + <var:H> * <var:A> ; <var:H> := <nat:4> + <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> ; <var:H> := <var:H> * <var:A> ; <var:H> := <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> ; <var:H> := <nat:4> + <var:H> * <var:A> \end{verbatim} Assuming , assuming some $ <var:M> \in \mathbb{Z}^+ $ , it to be that $ <var:A> = <var:M> $ prior to evaluating the program it must be that we see $ <var:H> = <nat:1> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + <nat:4> $ when code segment exits . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:A> = <var:M> \} \\ <var:H> := <nat:1> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \} \\ <var:H> := <nat:1> + <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> + <nat:1> \} \\ <var:H> := <nat:3> + <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:3> \} \\ <var:H> := <nat:4> + <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> \} \\ <var:H> := <nat:2> + <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:2> \} \\ <var:H> := <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + \} \\ <var:H> := <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:6> + <nat:1> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + \} \\ <var:H> := <nat:2> + <var:H> * <var:A> ; \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:7> + <nat:1> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:3> + <nat:2> \} \\ <var:H> := <nat:4> + <var:H> * <var:A> \\ \{ <var:A> = <var:M> \land <var:H> = <nat:1> \times <var:M> ^ <nat:8> + <nat:1> \times <var:M> ^ <nat:7> + <nat:3> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> + <nat:4> \} \end{eqnarray} Given the above , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:A> ; <var:H> := <nat:3> + <var:H> * <var:A> ; <var:H> := <nat:4> + <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> ; <var:H> := <var:H> * <var:A> ; <var:H> := <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> ; <var:H> := <nat:4> + <var:H> * <var:A> {{ <var:H> = <nat:1> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:H> = <nat:1> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 