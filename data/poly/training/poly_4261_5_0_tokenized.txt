\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:6> ; <var:U1> := <var:U1> * <var:i> ; <var:x> := <var:U1> ; <var:x> := <var:x> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:i> = <var:e> $ taking whole numbers $ <var:e> $ prior to the evaluation of our set of commands , it must be that we have $ <var:x> = <nat:6> \cdot <var:e> + <nat:9> $ after code segment exits . \end{theorem} \begin{proof} The method of proof for our set of commands is done with usual Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:i> = <var:e> \} \, <var:U0> := <nat:9> \, \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \} \\ \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \} \, <var:U1> := <nat:6> \, \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \land <var:U1> = <nat:6> \} \\ \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \land <var:U1> = <nat:6> \} \, <var:U1> := <var:U1> * <var:i> \, \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \land <var:U1> = <nat:6> \times <var:e> \} \\ \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \land <var:U1> = <nat:6> \times <var:e> \} \, <var:x> := <var:U1> \, \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \land <var:x> = <nat:6> \times <var:e> \} \\ \{ <var:i> = <var:e> \land <var:U0> = <nat:9> \land <var:x> = <nat:6> \times <var:e> \} \, <var:x> := <var:x> + <var:U0\, \{ <var:i> = <var:e> \land <var:x> = <nat:6> \times <var:e> + <nat:9> \} \end{eqnarray} This is known to be sound using the environment update inference rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:6> ; <var:U1> := <var:U1> * <var:i> ; <var:x> := <var:U1> ; <var:x> := <var:x> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:i> = <var:e> }} <def:poly> {{ <var:x> = <nat:6> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:U0> = <nat:9> /\ <var:x> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:x> = <nat:6> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 