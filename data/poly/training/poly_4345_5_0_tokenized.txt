\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:1> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:L> ; <var:g> := <var:c1> ; <var:g> := <var:g> + <var:c0> \end{verbatim} Given $ <var:L> = <var:J> $ prior to running this set of instructions , it must be that $ <var:g> = <nat:7> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be given by Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:L> = <var:J> \} \, <var:c0> := <nat:1> \, \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \} \\ \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \} \, <var:c1> := <nat:7> \, \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \land <var:c1> = <nat:7> \} \\ \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \land <var:c1> = <nat:7> \} \, <var:c1> := <var:c1> * <var:L> \, \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \land <var:c1> = <nat:7> \cdot <var:J> \} \\ \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \land <var:c1> = <nat:7> \cdot <var:J> \} \, <var:g> := <var:c1> \, \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \land <var:g> = <nat:7> \cdot <var:J> \} \\ \{ <var:L> = <var:J> \land <var:c0> = <nat:1> \land <var:g> = <nat:7> \cdot <var:J> \} \, <var:g> := <var:g> + <var:c0\, \{ <var:L> = <var:J> \land <var:g> = <nat:7> \cdot <var:J> + <nat:1> \} \end{eqnarray} This is given using the binding inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:L> = <var:J> }} <var:c0> := <nat:1> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:L> ; <var:g> := <var:c1> ; <var:g> := <var:g> + <var:c0> {{ <var:g> = <nat:7> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:c0> = <nat:1> /\ <var:g> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:g> = <nat:7> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 