\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:9> ; <var:h> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for some integers $ <var:x> $ ) that we have $ <var:G> = <var:x> $ prior to executing this segment of code then we have $ <var:h> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is given through usual Hoare reasoning . Moving forward to the following line seen in our code , we have the environment update line giving $ <nat:9> $ as $ <var:m0>$ . This advances the condition $ \{ <var:G> = <var:x> \} $ into the postcondition $ \{ <var:G> = <var:x> \land <var:m0> = <nat:9> \} $ . Moving onward , we have the variable assignmet statement \verb | <var:h> := <var:m0> | . This statement advances the precondition $ \{ <var:G> = <var:x> \land <var:m0> = <nat:9> \} $ to $ \{ <var:G> = <var:x> \land <var:h> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:9> ; <var:h> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:G> = <var:x> }} <def:poly> {{ <var:h> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:h> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 