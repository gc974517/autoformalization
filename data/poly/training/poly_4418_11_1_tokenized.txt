\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:B> ; <var:P2> := <var:P1> * <var:B> ; <var:P3> := <var:P2> * <var:B> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:1> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:3> ; <var:d> := <var:P3> <var:d> := <var:d> + <var:P2> <var:d> := <var:d> + <var:P1> <var:d> := <var:d> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:B> = <var:H> $ for any $ <var:H> \in \mathbb{N} $ before evaluating the code , it must be that we have $ <var:d> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:8> $ when set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be accomplished by usual Hoare logic . Stepping forward , \begin{eqnarray} \{ <var:B> = <var:H> \} \, <var:P1> := <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \\ \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \, <var:P2> := <var:P1> * <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \\ \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \, <var:P3> := <var:P2> * <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \\ \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \, <var:P0> := <nat:8> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P0> = <nat:8> \} \end{eqnarray} This is guaranteed with the environment update scheme defined in typical Hoare logic . Advancing , we have \begin{eqnarray} \{ <var:B> = <var:H> \} \, <var:P1> := <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \\ \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \, <var:P2> := <var:P1> * <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \\ \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \, <var:P3> := <var:P2> * <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \\ \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \, <var:P0> := <nat:8> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P0> = <nat:8> \} \end{eqnarray} This is rigorously given using the environment update inference rule from standard Hoare logic . Taking another step toward the proceeding bit of code in our list of commands , \begin{eqnarray} \{ <var:B> = <var:H> \} \, <var:P1> := <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \end{eqnarray} This is given by the variable assignmet rule obtained from usual Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:B> = <var:H> \} \, <var:P1> := <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \end{eqnarray} This is guaranteed using the binding law given in typical Hoare reasoning . Advancing on , we see \begin{eqnarray} \{ <var:B> = <var:H> \} \, <var:P1> := <var:B> \, \{ <var:B> = <var:H> \land <var:P1> = <var:H> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:B> ; <var:P2> := <var:P1> * <var:B> ; <var:P3> := <var:P2> * <var:B> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:1> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:3> ; <var:d> := <var:P3> <var:d> := <var:d> + <var:P2> <var:d> := <var:d> + <var:P1> <var:d> := <var:d> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:B> = <var:H> }} <def:poly> {{ <var:d> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <nat:1> * <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <nat:1> * <var:H> /\ <var:P2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <nat:1> * <var:H> /\ <var:P2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:3> * <var:H> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <nat:1> * <var:H> /\ <var:P2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:P0> = <nat:8> /\ <var:d> = <nat:3> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P1> = <nat:1> * <var:H> /\ <var:P0> = <nat:8> /\ <var:d> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:P0> = <nat:8> /\ <var:d> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:d> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 