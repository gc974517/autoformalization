\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:4> ; <var:i> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:n> = <var:g> $ ( for every whole numbers $ <var:g> $ ) ahead of interpreting our series of commands it follows that $ <var:i> = <nat:4> $ after segment of code has exited . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:n> = <var:g> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:n> = <var:g> \land <var:J0> = <nat:4> \} \\ <var:i> := <var:J0> \\ \{ <var:n> = <var:g> \land <var:i> = <nat:4> \} \end{eqnarray} As a consequence , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:i> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:n> = <var:g> }} <def:poly> {{ <var:i> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:i> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 