\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:R> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:R> ; <var:J2> := <var:J2> * <var:R> ; <var:L> := <var:J2> ; <var:L> := <var:L> + <var:J1> ; <var:L> := <var:L> + <var:J0> \end{verbatim} Assume it to be that $ <var:R> = <var:d> $ ( given some integers $ <var:d> $ ) prior to evaluating the segment of code it follows that $ <var:L> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> $ after code segment is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:d> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:J1> = <nat:3> \times <var:d> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:J1> = <nat:3> \times <var:d> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:J1> = <nat:3> \times <var:d> \land <var:J2> = <nat:2> \times <var:d> \} \\ <var:J2> := <var:J2> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:J1> = <nat:3> \times <var:d> \land <var:J2> = <nat:2> \times <var:d> ^ <nat:2> \} \\ <var:L> := <var:J2> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:J1> = <nat:3> \times <var:d> \land <var:L> = <nat:2> \times <var:d> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:J1> ; \\ \{ <var:R> = <var:d> \land <var:J0> = <nat:1> \land <var:L> = <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> \} \\ <var:L> := <var:L> + <var:J0> \\ \{ <var:R> = <var:d> \land <var:L> = <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:J0> := <nat:1> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:R> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:R> ; <var:J2> := <var:J2> * <var:R> ; <var:L> := <var:J2> ; <var:L> := <var:L> + <var:J1> ; <var:L> := <var:L> + <var:J0> {{ <var:L> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:3> * <var:d> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:3> * <var:d> /\ <var:J2> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:3> * <var:d> /\ <var:J2> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:3> * <var:d> /\ <var:L> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:J0> = <nat:1> /\ <var:L> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:L> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 