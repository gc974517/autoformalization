\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:X1> := <var:u> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:4> ; <var:P> := <var:X1> <var:P> := <var:P> + <var:X0> \end{verbatim} Assume that we have $ <var:u> = <var:a> $ ahead of the evaluation of this program it follows that we see $ <var:P> = <nat:4> * <var:a> + <nat:6> $ . \end{theorem} \begin{proof} The argument for this code can be demonstrated with standard Hoare logic . Looking at the proceeding statement in our code segment , the variable update command \verb | <var:X1> := <var:u> ; | . This advances the precondition $ \{ <var:u> = <var:a> \} $ into $ \{ <var:u> = <var:a> \land <var:X1> = <var:a> \} $ . This is deduced by the assignment inference rule of Hoare logic . Further , the environment update code binding $ <nat:6> $ toward $ <var:X0>$ . This transfers the precondition $ \{ <var:u> = <var:a> \land <var:X1> = <var:a> \} $ into $ \{ <var:u> = <var:a> \land <var:X1> = <var:a> \land <var:X0> = <nat:6> \} $ . After , we have the assignment code \verb | <var:X1> := <var:X1> * <nat:4> ; | . This command moves $ \{ <var:u> = <var:a> \land <var:X1> = <var:a> \land <var:X0> = <nat:6> \} $ to the postcondition $ \{ <var:u> = <var:a> \land <var:X1> = <nat:4> * <var:a> \land <var:X0> = <nat:6> \} $ . This is given by the assignment scheme in standard Hoare reasoning . Next , we have the binding line \verb | <var:P> := <var:X1> | . This line moves $ \{ <var:u> = <var:a> \land <var:X1> = <nat:4> * <var:a> \land <var:X0> = <nat:6> \} $ to the postcondition $ \{ <var:u> = <var:a> \land <var:X0> = <nat:6> \land <var:P> = <nat:4> * <var:a> \} $ . Moving forward , we have the variable binding statement \verb | <var:P> := <var:P> + <var:X0> | . This command takes the precondition $ \{ <var:u> = <var:a> \land <var:X0> = <nat:6> \land <var:P> = <nat:4> * <var:a> \} $ as the condition $ \{ <var:u> = <var:a> \land <var:P> = <nat:4> * <var:a> + <nat:6> \} $ . This is rigorously given using the assignment inference rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <var:X1> := <var:u> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:4> ; <var:P> := <var:X1> <var:P> := <var:P> + <var:X0> {{ <var:P> = <nat:4> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:X1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:X1> = <var:a> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:X1> = <nat:4> * <var:a> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:X0> = <nat:6> /\ <var:P> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:P> = <nat:4> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 