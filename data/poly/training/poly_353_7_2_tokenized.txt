\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:D> ; <var:Y> := <nat:4> + <var:Y> * <var:D> ; <var:Y> := <nat:3> + <var:Y> * <var:D> ; <var:Y> := <nat:1> + <var:Y> * <var:D> ; <var:Y> := <nat:2> + <var:Y> * <var:D> ; <var:Y> := <nat:2> + <var:Y> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:D> = <var:i> $ for every $ <var:i> $ ahead of the execution of our code it follows that $ <var:Y> = <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the list of commands is given using typical Hoare logic . Moving onward , we have \begin{eqnarray} \{ <var:D> = <var:i> \} \, <var:Y> := <nat:4> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \} \\ \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \} \, <var:Y> := <var:Y> * <var:D> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> + \} \\ \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> + \} \, <var:Y> := <nat:4> + <var:Y> * <var:D> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:2> + <nat:4> \} \\ \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:2> + <nat:4> \} \, <var:Y> := <nat:3> + <var:Y> * <var:D> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> + <nat:3> \} \\ \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> + <nat:3> \} \, <var:Y> := <nat:1> + <var:Y> * <var:D> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:1> \} \\ \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:1> \} \, <var:Y> := <nat:2> + <var:Y> * <var:D> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + <nat:2> \} \end{eqnarray} Going forward , we see \begin{eqnarray} \{ <var:D> = <var:i> \} \, <var:Y> := <nat:4> \, \{ <var:D> = <var:i> \land <var:Y> = <nat:4> \} \end{eqnarray} This is known to be sound through the variable binding rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:D> ; <var:Y> := <nat:4> + <var:Y> * <var:D> ; <var:Y> := <nat:3> + <var:Y> * <var:D> ; <var:Y> := <nat:1> + <var:Y> * <var:D> ; <var:Y> := <nat:2> + <var:Y> * <var:D> ; <var:Y> := <nat:2> + <var:Y> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:D> = <var:i> }} <def:poly> {{ <var:Y> = <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:i> /\ <var:Y> = <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 