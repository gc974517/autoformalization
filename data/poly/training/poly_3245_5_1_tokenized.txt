\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:I1> := <var:h> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:3> ; <var:p> := <var:I1> <var:p> := <var:p> + <var:I0> \end{verbatim} Given it to hold that $ <var:h> = <var:w> $ before the evaluation of our series of instructions it must be that we have $ <var:p> = <nat:3> * <var:w> + <nat:6> $ after code is done . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be seen using usual Hoare logic . Paying attention to the upcoming steps contained in the code segment , we have \begin{verbatim} { <var:h> = <var:w> } <var:I1> := <var:h> { <var:h> = <var:w> \land <var:I1> = <var:w> } { <var:h> = <var:w> \land <var:I1> = <var:w> } <var:I0> := <nat:6> { <var:h> = <var:w> \land <var:I1> = <var:w> \land <var:I0> = <nat:6> } \end{verbatim} This is ensured by the environment update inference rule of standard Hoare logic . Considering the upcoming lines seen in our series of commands , we see \begin{verbatim} { <var:h> = <var:w> } <var:I1> := <var:h> { <var:h> = <var:w> \land <var:I1> = <var:w> } { <var:h> = <var:w> \land <var:I1> = <var:w> } <var:I0> := <nat:6> { <var:h> = <var:w> \land <var:I1> = <var:w> \land <var:I0> = <nat:6> } \end{verbatim} Further , we have \begin{verbatim} { <var:h> = <var:w> } <var:I1> := <var:h> { <var:h> = <var:w> \land <var:I1> = <var:w> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:h> = <var:w> }} <var:I1> := <var:h> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:3> ; <var:p> := <var:I1> <var:p> := <var:p> + <var:I0> {{ <var:p> = <nat:3> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:I1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:I1> = <var:w> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:I1> = <nat:3> * <var:w> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:I0> = <nat:6> /\ <var:p> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:p> = <nat:3> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 