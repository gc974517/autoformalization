\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m1> := <var:i> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:4> ; <var:I> := <var:m1> <var:I> := <var:I> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:i> = <var:U> $ prior to interpreting this list of commands it follows that we have $ <var:I> = <nat:4> \times <var:U> + <nat:3> $ . \end{theorem} \begin{proof} We can see that this decorated series of commands . \begin{eqnarray} \{ <var:i> = <var:U> \} \\ <var:m1> := <var:i> ; \\ \{ <var:i> = <var:U> \land <var:m1> = <var:U> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:i> = <var:U> \land <var:m1> = <var:U> \land <var:m0> = <nat:3> \} \\ <var:m1> := <var:m1> * <nat:4> ; \\ \{ <var:i> = <var:U> \land <var:m1> = <nat:4> \cdot <var:U> \land <var:m0> = <nat:3> \} \\ <var:I> := <var:m1> \\ \{ <var:i> = <var:U> \land <var:m0> = <nat:3> \land <var:I> = <nat:4> \cdot <var:U> \} \\ <var:I> := <var:I> + <var:m0> \\ \{ <var:i> = <var:U> \land <var:I> = <nat:4> \cdot <var:U> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:i> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:4> ; <var:I> := <var:m1> <var:I> := <var:I> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:i> = <var:U> }} <def:poly> {{ <var:I> = <nat:4> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:m1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:m1> = <var:U> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:m1> = <nat:4> * <var:U> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:m0> = <nat:3> /\ <var:I> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:I> = <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 