\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:3> ; <var:W> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:g> = <var:i> $ ahead of executing the list of commands it follows that we have $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our program is demonstrated using the below decorated set of instructions . \begin{eqnarray} \{ <var:g> = <var:i> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:g> = <var:i> \land <var:X0> = <nat:3> \} \\ <var:W> := <var:X0> \\ \{ <var:g> = <var:i> \land <var:W> = <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:W> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:g> = <var:i> }} <def:poly> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 