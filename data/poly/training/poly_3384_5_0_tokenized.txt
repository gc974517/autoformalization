\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:X> ; <var:N> := <var:I1> ; <var:N> := <var:N> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assume $ <var:X> = <var:O> $ before executing the set of instructions , it must be that we see $ <var:N> = <nat:6> \times <var:O> + <nat:2> $ once series of instructions executes . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:X> = <var:O> \land <var:I0> = <nat:2> \} \\ <var:I1> := <nat:6> ; \\ \{ <var:X> = <var:O> \land <var:I0> = <nat:2> \land <var:I1> = <nat:6> \} \\ <var:I1> := <var:I1> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:I0> = <nat:2> \land <var:I1> = <nat:6> \cdot <var:O> \} \\ <var:N> := <var:I1> ; \\ \{ <var:X> = <var:O> \land <var:I0> = <nat:2> \land <var:N> = <nat:6> \cdot <var:O> \} \\ <var:N> := <var:N> + <var:I0> \\ \{ <var:X> = <var:O> \land <var:N> = <nat:6> \cdot <var:O> + <nat:2> \} \end{eqnarray} Thus , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:X> ; <var:N> := <var:I1> ; <var:N> := <var:N> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <def:poly> {{ <var:N> = <nat:6> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:I0> = <nat:2> /\ <var:N> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:N> = <nat:6> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 