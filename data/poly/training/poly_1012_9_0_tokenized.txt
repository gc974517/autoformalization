\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:V> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:V> ; <var:b2> := <var:b2> * <var:V> ; <var:R> := <var:b2> ; <var:R> := <var:R> + <var:b1> ; <var:R> := <var:R> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:V> = <var:X> $ ahead of executing this segment of code it holds that we have $ <var:R> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:6> $ after program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:X> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \} \\ <var:b1> := <nat:4> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \} \\ <var:b1> := <var:b1> * <var:V> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \cdot <var:X> \} \\ <var:b2> := <nat:1> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \cdot <var:X> \land <var:b2> = <nat:1> \} \\ <var:b2> := <var:b2> * <var:V> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \cdot <var:X> \land <var:b2> = <nat:1> \cdot <var:X> \} \\ <var:b2> := <var:b2> * <var:V> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \cdot <var:X> \land <var:b2> = <nat:1> \cdot <var:X> ^ <nat:2> \} \\ <var:R> := <var:b2> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:b1> = <nat:4> \cdot <var:X> \land <var:R> = <nat:1> \cdot <var:X> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:b1> ; \\ \{ <var:V> = <var:X> \land <var:b0> = <nat:6> \land <var:R> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> \} \\ <var:R> := <var:R> + <var:b0> \\ \{ <var:V> = <var:X> \land <var:R> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:6> \} \end{eqnarray} Applying standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:6> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:V> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:V> ; <var:b2> := <var:b2> * <var:V> ; <var:R> := <var:b2> ; <var:R> := <var:R> + <var:b1> ; <var:R> := <var:R> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <def:poly> {{ <var:R> = <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:X> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:X> /\ <var:b2> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:X> /\ <var:b2> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:4> * <var:X> /\ <var:R> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:b0> = <nat:6> /\ <var:R> = <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:R> = <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 