\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:4> ; <var:C> := <var:Z0> \end{verbatim} Assume that we have $ <var:P> = <var:W> $ before running the set of instructions , it holds that we have $ <var:C> = <nat:4> $ after list of instructions has exited . \end{theorem} \begin{proof} The flow of logic for the program can be accomplished with Hoare techniques . Advancing to the upcoming statement seen in our segment of code , we see the variable assignmet code \verb | <var:Z0> := <nat:4> ; | . This command moves the condition $ \{ <var:P> = <var:W> \} $ into the postcondition $ \{ <var:P> = <var:W> \land <var:Z0> = <nat:4> \} $ . Taking another step toward the subsequent command contained in our set of commands , the variable assignmet command \verb | <var:C> := <var:Z0> | . This line advances $ \{ <var:P> = <var:W> \land <var:Z0> = <nat:4> \} $ to the condition $ \{ <var:P> = <var:W> \land <var:C> = <nat:4> \} $ . This is given through the assignment law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:P> = <var:W> }} <var:Z0> := <nat:4> ; <var:C> := <var:Z0> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 