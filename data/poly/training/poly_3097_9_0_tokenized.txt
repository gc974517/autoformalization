\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:7> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:Z> ; <var:X2> := <nat:8> ; <var:X2> := <var:X2> * <var:Z> ; <var:X2> := <var:X2> * <var:Z> ; <var:o> := <var:X2> ; <var:o> := <var:o> + <var:X1> ; <var:o> := <var:o> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:Z> = <var:b> $ ( for any $ <var:b> \in \mathbb{Z}^+ $ ) prior to the evaluation of this program , it follows that $ <var:o> = <nat:8> \times <var:b> ^ <nat:2> + <nat:6> \times <var:b> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:Z> = <var:b> \} \\ <var:X0> := <nat:7> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \} \\ <var:X1> := <nat:6> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:X1> = <nat:6> \} \\ <var:X1> := <var:X1> * <var:Z> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:X1> = <nat:6> \times <var:b> \} \\ <var:X2> := <nat:8> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:X1> = <nat:6> \times <var:b> \land <var:X2> = <nat:8> \} \\ <var:X2> := <var:X2> * <var:Z> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:X1> = <nat:6> \times <var:b> \land <var:X2> = <nat:8> \times <var:b> \} \\ <var:X2> := <var:X2> * <var:Z> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:X1> = <nat:6> \times <var:b> \land <var:X2> = <nat:8> \times <var:b> ^ <nat:2> \} \\ <var:o> := <var:X2> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:X1> = <nat:6> \times <var:b> \land <var:o> = <nat:8> \times <var:b> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:X1> ; \\ \{ <var:Z> = <var:b> \land <var:X0> = <nat:7> \land <var:o> = <nat:8> \times <var:b> ^ <nat:2> + <nat:6> \times <var:b> \} \\ <var:o> := <var:o> + <var:X0> \\ \{ <var:Z> = <var:b> \land <var:o> = <nat:8> \times <var:b> ^ <nat:2> + <nat:6> \times <var:b> + <nat:7> \} \end{eqnarray} Considering the above , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X0> := <nat:7> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:Z> ; <var:X2> := <nat:8> ; <var:X2> := <var:X2> * <var:Z> ; <var:X2> := <var:X2> * <var:Z> ; <var:o> := <var:X2> ; <var:o> := <var:o> + <var:X1> ; <var:o> := <var:o> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Z> = <var:b> }} <def:poly> {{ <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:6> * <var:b> /\ <var:X2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:6> * <var:b> /\ <var:X2> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:6> * <var:b> /\ <var:X2> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:6> * <var:b> /\ <var:o> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:X0> = <nat:7> /\ <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 