\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:8> ; <var:N> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:p> = <var:X> $ ahead of running the program , then we see $ <var:N> = <nat:8> $ after code exits . \end{theorem} \begin{proof} The method of proof for our program is shown with usual Hoare reasoning . Going to the next step , the environment update line \verb | <var:G0> := <nat:8> ; | . This line transfers $ \{ <var:p> = <var:X> \} $ as $ \{ <var:p> = <var:X> \land <var:G0> = <nat:8> \} $ . Focusing on the subsequent bit of code contained in our list of commands , the variable update command yielding $ <var:G0$ as $ <var:N>$ . This statement transfers the precondition $ \{ <var:p> = <var:X> \land <var:G0> = <nat:8> \} $ toward the condition $ \{ <var:p> = <var:X> \land <var:N> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:N> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:p> = <var:X> }} <def:poly> {{ <var:N> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:N> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 