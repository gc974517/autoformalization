\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:5> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:d> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:d> ; <var:U2> := <var:U2> * <var:d> ; <var:A> := <var:U2> ; <var:A> := <var:A> + <var:U1> ; <var:A> := <var:A> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:d> = <var:y> $ prior to interpreting our list of instructions , it must be that $ <var:A> = <nat:8> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:5> $ once program executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:y> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \} \\ <var:U1> := <nat:8> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:U1> = <nat:8> \} \\ <var:U1> := <var:U1> * <var:d> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:U1> = <nat:8> \times <var:y> \} \\ <var:U2> := <nat:8> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:U1> = <nat:8> \times <var:y> \land <var:U2> = <nat:8> \} \\ <var:U2> := <var:U2> * <var:d> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:U1> = <nat:8> \times <var:y> \land <var:U2> = <nat:8> \times <var:y> \} \\ <var:U2> := <var:U2> * <var:d> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:U1> = <nat:8> \times <var:y> \land <var:U2> = <nat:8> \times <var:y> ^ <nat:2> \} \\ <var:A> := <var:U2> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:U1> = <nat:8> \times <var:y> \land <var:A> = <nat:8> \times <var:y> ^ <nat:2> \} \end{eqnarray} Advancing executing our code segment produces : \begin{eqnarray} <var:A> := <var:A> + <var:U1> ; \\ \{ <var:d> = <var:y> \land <var:U0> = <nat:5> \land <var:A> = <nat:8> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> \} \\ <var:A> := <var:A> + <var:U0> \\ \{ <var:d> = <var:y> \land <var:A> = <nat:8> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:5> \} \end{eqnarray} The application of Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:d> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:d> ; <var:U2> := <var:U2> * <var:d> ; <var:A> := <var:U2> ; <var:A> := <var:A> + <var:U1> ; <var:A> := <var:A> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:d> = <var:y> }} <def:poly> {{ <var:A> = <nat:8> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:8> * <var:y> /\ <var:U2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:8> * <var:y> /\ <var:U2> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:8> * <var:y> /\ <var:U2> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:U1> = <nat:8> * <var:y> /\ <var:A> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:U0> = <nat:5> /\ <var:A> = <nat:8> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:A> = <nat:8> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 