\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:3> + <var:p> * <var:i> ; <var:p> := <nat:1> + <var:p> * <var:i> ; <var:p> := <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:i> = <var:u> $ , given any $ <var:u> $ , before the evaluation of this code segment , then we see $ <var:p> = <nat:1> \times <var:u> ^ <nat:6> + <nat:2> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:i> = <var:u> \} \\ <var:p> := <nat:1> ; \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \} \\ <var:p> := <nat:2> + <var:p> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \times <var:u> + <nat:2> \} \\ <var:p> := <nat:2> + <var:p> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:2> \} \\ <var:p> := <nat:3> + <var:p> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:3> \} \\ <var:p> := <nat:1> + <var:p> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:1> \} \\ <var:p> := <var:p> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + \} \\ <var:p> := <nat:2> + <var:p> * <var:i> \\ \{ <var:i> = <var:u> \land <var:p> = <nat:1> \times <var:u> ^ <nat:6> + <nat:2> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \} \end{eqnarray} As a consequence , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:1> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:3> + <var:p> * <var:i> ; <var:p> := <nat:1> + <var:p> * <var:i> ; <var:p> := <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:i> = <var:u> }} <def:poly> {{ <var:p> = <nat:1> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:p> = <nat:1> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 