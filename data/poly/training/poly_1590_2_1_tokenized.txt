\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:5> ; <var:B> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:X> = <var:q> $ before evaluating the list of commands it follows that we see $ <var:B> = <nat:5> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:X> = <var:q> \} \\ <var:E0> := <nat:5> ; \\ \{ <var:X> = <var:q> \land <var:E0> = <nat:5> \} \\ <var:B> := <var:E0> \\ \{ <var:X> = <var:q> \land <var:B> = <nat:5> \} \end{eqnarray} Thus , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:5> ; <var:B> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:X> = <var:q> }} <def:poly> {{ <var:B> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:q> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:q> /\ <var:B> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 