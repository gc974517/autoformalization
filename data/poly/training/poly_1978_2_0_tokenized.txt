\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:4> ; <var:z> := <var:U0> \end{verbatim} Allowing it to hold that $ <var:B> = <var:m> $ prior to the execution of the list of instructions , it holds that $ <var:z> = <nat:4> $ once segment of code has finished . \end{theorem} \begin{proof} The proof of our set of instructions can be shown by Hoare logic . Taking a look at the following bit of code contained in the code , \begin{verbatim} { <var:B> = <var:m> } <var:U0> := <nat:4> { <var:B> = <var:m> \land <var:U0> = <nat:4> } \end{verbatim} Stepping through , \begin{verbatim} { <var:B> = <var:m> } <var:U0> := <nat:4> { <var:B> = <var:m> \land <var:U0> = <nat:4> } \end{verbatim} This is known to be sound using the variable binding rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <var:U0> := <nat:4> ; <var:z> := <var:U0> {{ <var:z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 