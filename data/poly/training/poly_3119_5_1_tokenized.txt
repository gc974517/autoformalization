\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:j> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:8> ; <var:M> := <var:e1> <var:M> := <var:M> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:j> = <var:B> $ ahead of interpreting this series of commands , then we have $ <var:M> = <nat:8> \cdot <var:B> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the set of instructions can be done through typical Hoare reasoning . Advancing , we have the environment update line \verb | <var:e1> := <var:j> ; | . This command forwards the precondition $ \{ <var:j> = <var:B> \} $ to $ \{ <var:j> = <var:B> \land <var:e1> = <var:B> \} $ . Honing in on the subsequent line of code contained in the set of commands , we see the binding command assigning $ <nat:7> $ to $ <var:e0>$ . This line advances $ \{ <var:j> = <var:B> \land <var:e1> = <var:B> \} $ as $ \{ <var:j> = <var:B> \land <var:e1> = <var:B> \land <var:e0> = <nat:7> \} $ . Honing in on the following line of code found in our series of instructions , we have the assignment line \verb | <var:e1> := <var:e1> * <nat:8> ; | . This advances the condition $ \{ <var:j> = <var:B> \land <var:e1> = <var:B> \land <var:e0> = <nat:7> \} $ as the postcondition $ \{ <var:j> = <var:B> \land <var:e1> = <nat:8> * <var:B> \land <var:e0> = <nat:7> \} $ . This is sound with the assignment inference rule defined in usual Hoare reasoning . Looking at the following line contained in our series of commands , we see the code giving $ <var:e1$ as $ <var:M>$ . This forwards the precondition $ \{ <var:j> = <var:B> \land <var:e1> = <nat:8> * <var:B> \land <var:e0> = <nat:7> \} $ into the postcondition $ \{ <var:j> = <var:B> \land <var:e0> = <nat:7> \land <var:M> = <nat:8> * <var:B> \} $ . Taking another step toward the next statement found in the program , we have the variable update statement \verb | <var:M> := <var:M> + <var:e0> | . This code moves the condition $ \{ <var:j> = <var:B> \land <var:e0> = <nat:7> \land <var:M> = <nat:8> * <var:B> \} $ to $ \{ <var:j> = <var:B> \land <var:M> = <nat:8> * <var:B> + <nat:7> \} $ . This is shown by the assignment inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:j> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:8> ; <var:M> := <var:e1> <var:M> := <var:M> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:j> = <var:B> }} <def:poly> {{ <var:M> = <nat:8> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:e1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:e1> = <var:B> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:e1> = <nat:8> * <var:B> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:e0> = <nat:7> /\ <var:M> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:M> = <nat:8> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 