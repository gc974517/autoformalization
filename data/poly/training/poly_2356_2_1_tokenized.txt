\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:7> ; <var:d> := <var:R0> \end{verbatim} Assuming $ <var:z> = <var:m> $ ahead of running the series of instructions it must be that $ <var:d> = <nat:7> $ after code segment has finished executing . \end{theorem} \begin{proof} The application of Hoare logic produces : \begin{eqnarray} \{ <var:z> = <var:m> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:z> = <var:m> \land <var:R0> = <nat:7> \} \\ <var:d> := <var:R0> \\ \{ <var:z> = <var:m> \land <var:d> = <nat:7> \} \end{eqnarray} Therefore , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:z> = <var:m> }} <var:R0> := <nat:7> ; <var:d> := <var:R0> {{ <var:d> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:d> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 