\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <nat:1> + <var:E> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:s> = <var:Y> $ ahead of executing the series of instructions , it must be that we have $ <var:E> = <nat:3> * <var:Y> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code is shown through the following decorated series of instructions . \begin{eqnarray} \{ <var:s> = <var:Y> \} \\ <var:E> := <nat:3> ; \\ \{ <var:s> = <var:Y> \land <var:E> = <nat:3> \} \\ <var:E> := <nat:1> + <var:E> * <var:s> \\ \{ <var:s> = <var:Y> \land <var:E> = <nat:3> \times <var:Y> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:3> ; <var:E> := <nat:1> + <var:E> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:s> = <var:Y> }} <def:poly> {{ <var:E> = <nat:3> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:E> = <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 