\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:9> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:j> ; <var:A> := <var:q1> ; <var:A> := <var:A> + <var:q0> \end{verbatim} Allow for every positive coefficients $ <var:G> $ that $ <var:j> = <var:G> $ before running our segment of code it holds that $ <var:A> = <nat:2> \times <var:G> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:G> \} \\ <var:q0> := <nat:9> ; \\ \{ <var:j> = <var:G> \land <var:q0> = <nat:9> \} \\ <var:q1> := <nat:2> ; \\ \{ <var:j> = <var:G> \land <var:q0> = <nat:9> \land <var:q1> = <nat:2> \} \\ <var:q1> := <var:q1> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:q0> = <nat:9> \land <var:q1> = <nat:2> \times <var:G> \} \\ <var:A> := <var:q1> ; \\ \{ <var:j> = <var:G> \land <var:q0> = <nat:9> \land <var:A> = <nat:2> \times <var:G> \} \\ <var:A> := <var:A> + <var:q0> \\ \{ <var:j> = <var:G> \land <var:A> = <nat:2> \times <var:G> + <nat:9> \} \end{eqnarray} Using standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:j> = <var:G> }} <var:q0> := <nat:9> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:j> ; <var:A> := <var:q1> ; <var:A> := <var:A> + <var:q0> {{ <var:A> = <nat:2> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:q0> = <nat:9> /\ <var:A> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:A> = <nat:2> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 