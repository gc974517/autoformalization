\begin{document} \begin{theorem} We define a code in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:4> ; <var:U> := <var:u0> \end{verbatim} Allow that $ <var:m> = <var:o> $ ahead of running our set of instructions then we have $ <var:U> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code is demonstrated using usual Hoare techniques . Paying attention to the following lines of codeseen in the program , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:o> \} & <var:u0> := <nat:4> & \{ <var:m> = <var:o> \land <var:u0> = <nat:4> \} \\ \{ <var:m> = <var:o> \land <var:u0> = <nat:4> \} & <var:U> := <var:u0& \{ <var:m> = <var:o> \land <var:U> = <nat:4> \} \end{tabular} This is rigorously given through the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:m> = <var:o> }} <var:u0> := <nat:4> ; <var:U> := <var:u0> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 