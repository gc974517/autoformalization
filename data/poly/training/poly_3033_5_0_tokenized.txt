\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:2> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:b> ; <var:N> := <var:H1> ; <var:N> := <var:N> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:b> = <var:T> $ ahead of evaluating the code segment then we see $ <var:N> = <nat:5> \times <var:T> + <nat:2> $ after list of instructions has finished . \end{theorem} \begin{proof} The proof of this set of commands can be demonstrated by typical Hoare logic . Paying attention to the upcoming line in the list of commands , the binding statement \verb | <var:H0> := <nat:2> ; | . This transfers the condition $ \{ <var:b> = <var:T> \} $ toward the postcondition $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \} $ . This is sound using the assignment rule obtained from typical Hoare reasoning . Going to the next step , we have the variable update code binding $ <nat:5> $ to $ <var:H1>$ . This forwards the precondition $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \} $ toward the postcondition $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:5> \} $ . Focusing on the subsequent piece of code seen in our code segment , we see the variable binding statement \verb | <var:H1> := <var:H1> * <var:b> ; | . This transfers the precondition $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:5> \} $ to $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:5> \cdot <var:T> \} $ . This is shown to be logically sound through the assignment scheme defined by usual Hoare techniques . Looking at the upcoming line of code found in the set of instructions , the variable update command \verb | <var:N> := <var:H1> ; | . This moves the precondition $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:5> \cdot <var:T> \} $ as the postcondition $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \land <var:N> = <nat:5> \cdot <var:T> \} $ . Following , the variable update code giving $ <var:N> + <var:H0$ toward $ <var:N>$ . This takes $ \{ <var:b> = <var:T> \land <var:H0> = <nat:2> \land <var:N> = <nat:5> \cdot <var:T> \} $ as the postcondition $ \{ <var:b> = <var:T> \land <var:N> = <nat:5> \cdot <var:T> + <nat:2> \} $ . This is guaranteed through the assignment rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:b> ; <var:N> := <var:H1> ; <var:N> := <var:N> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:b> = <var:T> }} <def:poly> {{ <var:N> = <nat:5> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:H0> = <nat:2> /\ <var:N> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:N> = <nat:5> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 