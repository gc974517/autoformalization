\begin{document} \begin{theorem} Define the following code segment as follows \begin{verbatim} <var:R1> := <var:F> ; <var:R2> := <var:R1> * <var:F> ; <var:R3> := <var:R2> * <var:F> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:1> ; <var:R3> := <var:R3> * <nat:4> ; <var:m> := <var:R3> <var:m> := <var:m> + <var:R1> <var:m> := <var:m> + <var:R0> \end{verbatim} Assuming it to hold that $ <var:F> = <var:H> $ prior to executing our set of commands , then we see $ <var:m> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:F> = <var:H> \} \\ <var:R1> := <var:F> ; \\ \{ <var:F> = <var:H> \land <var:R1> = <var:H> \} \\ <var:R2> := <var:R1> * <var:F> ; \\ \{ <var:F> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:F> ; \\ \{ <var:F> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:F> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:3> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:F> = <var:H> \land <var:R1> = <nat:1> * <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:3> \} \\ <var:R3> := <var:R3> * <nat:4> ; \\ \{ <var:F> = <var:H> \land <var:R1> = <nat:1> * <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <nat:4> * <var:H> ^ <nat:3> \land <var:R0> = <nat:3> \} \\ <var:m> := <var:R3> \\ \{ <var:F> = <var:H> \land <var:R1> = <nat:1> * <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R0> = <nat:3> \land <var:m> = <nat:4> * <var:H> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:R1> \\ \{ <var:F> = <var:H> \land <var:R0> = <nat:3> \land <var:m> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> \} \\ <var:m> := <var:m> + <var:R0> \\ \{ <var:F> = <var:H> \land <var:m> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:3> \} \end{eqnarray} As a consequence , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:F> = <var:H> }} <var:R1> := <var:F> ; <var:R2> := <var:R1> * <var:F> ; <var:R3> := <var:R2> * <var:F> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:1> ; <var:R3> := <var:R3> * <nat:4> ; <var:m> := <var:R3> <var:m> := <var:m> + <var:R1> <var:m> := <var:m> + <var:R0> {{ <var:m> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <var:H> /\ <var:R2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <nat:1> * <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <nat:1> * <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:H> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R1> = <nat:1> * <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R0> = <nat:3> /\ <var:m> = <nat:4> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:R0> = <nat:3> /\ <var:m> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:m> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 