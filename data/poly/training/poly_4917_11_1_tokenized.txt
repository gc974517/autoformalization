\begin{document} \begin{theorem} Consider a set of instructions as follows \begin{verbatim} <var:b1> := <var:p> ; <var:b2> := <var:b1> * <var:p> ; <var:b3> := <var:b2> * <var:p> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:3> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:3> ; <var:A> := <var:b3> <var:A> := <var:A> + <var:b2> <var:A> := <var:A> + <var:b1> <var:A> := <var:A> + <var:b0> \end{verbatim} Assuming that we have $ <var:p> = <var:W> $ before executing this list of commands , it holds that we see $ <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:1> $ after series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is done through Hoare reasoning . Keeping momentum , we see \begin{eqnarray} \{ <var:p> = <var:W> \} \, <var:b1> := <var:p> \, \{ <var:p> = <var:W> \land <var:b1> = <var:W> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <var:W> \} \, <var:b2> := <var:b1> * <var:p> \, \{ <var:p> = <var:W> \land <var:b1> = <var:W> \land <var:b2> = <var:W> ^ <nat:2> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <var:W> \land <var:b2> = <var:W> ^ <nat:2> \} \, <var:b3> := <var:b2> * <var:p> \, \{ <var:p> = <var:W> \land <var:b1> = <var:W> \land <var:b2> = <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <var:W> \land <var:b2> = <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \} \, <var:b0> := <nat:1> \, \{ <var:p> = <var:W> \land <var:b1> = <var:W> \land <var:b2> = <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <var:W> \land <var:b2> = <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \, <var:b1> := <var:b1> * <nat:3> \, \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \, <var:b2> := <var:b2> * <nat:1> \, \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:b3> = <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \, <var:b3> := <var:b3> * <nat:3> \, \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:W> ^ <nat:3> \land <var:b0> = <nat:1> \} \, <var:A> := <var:b3\, \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:b0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:b0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> \} \, <var:A> := <var:A> + <var:b2\, \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> \} \\ \{ <var:p> = <var:W> \land <var:b1> = <nat:3> \cdot <var:W> \land <var:b0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> \} \, <var:A> := <var:A> + <var:b1\, \{ <var:p> = <var:W> \land <var:b0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> \} \\ \{ <var:p> = <var:W> \land <var:b0> = <nat:1> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> \} \, <var:A> := <var:A> + <var:b0\, \{ <var:p> = <var:W> \land <var:A> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:1> \} \end{eqnarray} This is known to be sound with the scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:p> = <var:W> }} <var:b1> := <var:p> ; <var:b2> := <var:b1> * <var:p> ; <var:b3> := <var:b2> * <var:p> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:3> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:3> ; <var:A> := <var:b3> <var:A> := <var:A> + <var:b2> <var:A> := <var:A> + <var:b1> <var:A> := <var:A> + <var:b0> {{ <var:A> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <var:W> /\ <var:b2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <var:W> /\ <var:b2> = <var:W> ^ <nat:2> /\ <var:b3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <var:W> /\ <var:b2> = <var:W> ^ <nat:2> /\ <var:b3> = <var:W> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <nat:3> * <var:W> /\ <var:b2> = <var:W> ^ <nat:2> /\ <var:b3> = <var:W> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <nat:3> * <var:W> /\ <var:b2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:b3> = <var:W> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <nat:3> * <var:W> /\ <var:b2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:W> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <nat:3> * <var:W> /\ <var:b2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:b0> = <nat:1> /\ <var:A> = <nat:3> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b1> = <nat:3> * <var:W> /\ <var:b0> = <nat:1> /\ <var:A> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b0> = <nat:1> /\ <var:A> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:A> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 