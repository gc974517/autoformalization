\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:1> ; <var:X1> := <var:X1> * <var:t> ; <var:X2> := <nat:7> ; <var:X2> := <var:X2> * <var:t> ; <var:X2> := <var:X2> * <var:t> ; <var:J> := <var:X2> ; <var:J> := <var:J> + <var:X1> ; <var:J> := <var:J> + <var:X0> \end{verbatim} Allow it to hold that $ <var:t> = <var:N> $ --- for integers $ <var:N> $ --- prior to interpreting our segment of code it holds that $ <var:J> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our list of commands is shown with typical Hoare logic . Advancing on , the environment update statement giving $ <nat:2> $ to $ <var:X0>$ . This moves the condition $ \{ <var:t> = <var:N> \} $ toward the postcondition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \} $ . Paying attention to the subsequent bit of code found in our list of instructions , we see the variable binding statement \verb | <var:X1> := <nat:1> ; | . This statement forwards $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \} $ to $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \} $ . Next , we have the environment update command binding $ <var:X1> * <var:t> $ as $ <var:X1>$ . This redefines $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \} $ into the postcondition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \} $ . Considering the subsequent command in the list of instructions , we see the variable binding code giving $ <nat:7> $ as $ <var:X2>$ . This statement forwards the condition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \} $ as the condition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:X2> = <nat:7> \} $ . This is given through the assignment scheme given by typical Hoare techniques . Advancing to the next step , we have the environment update command yielding $ <var:X2> * <var:t> $ as $ <var:X2>$ . This statement advances the condition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:X2> = <nat:7> \} $ toward the postcondition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:X2> = <nat:7> \times <var:N> \} $ . This is given by the assignment law given by standard Hoare techniques . Honing in on the following line seen in the series of commands , we see the environment update statement \verb | <var:X2> := <var:X2> * <var:t> ; | . This transfers $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:X2> = <nat:7> \times <var:N> \} $ into $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:X2> = <nat:7> \times <var:N> ^ <nat:2> \} $ . Considering the subsequent statement in our list of instructions , the line giving $ <var:X2> $ as $ <var:J>$ . This line advances the precondition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:X2> = <nat:7> \times <var:N> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:J> = <nat:7> \times <var:N> ^ <nat:2> \} $ . This is sound using the assignment law defined by typical Hoare techniques . Moving forward to the next bit of code contained in the list of commands , we have the variable assignmet line giving $ <var:J> + <var:X1> $ toward $ <var:J>$ . This moves $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:N> \land <var:J> = <nat:7> \times <var:N> ^ <nat:2> \} $ to $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:J> = <nat:7> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> \} $ . This is shown with the assignment law defined in Hoare reasoning . Shifting focus toward the upcoming piece of code seen in our code , the statement giving $ <var:J> + <var:X0$ toward $ <var:J>$ . This code transfers $ \{ <var:t> = <var:N> \land <var:X0> = <nat:2> \land <var:J> = <nat:7> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> \} $ toward $ \{ <var:t> = <var:N> \land <var:J> = <nat:7> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:t> = <var:N> }} <var:X0> := <nat:2> ; <var:X1> := <nat:1> ; <var:X1> := <var:X1> * <var:t> ; <var:X2> := <nat:7> ; <var:X2> := <var:X2> * <var:t> ; <var:X2> := <var:X2> * <var:t> ; <var:J> := <var:X2> ; <var:J> := <var:J> + <var:X1> ; <var:J> := <var:J> + <var:X0> {{ <var:J> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:N> /\ <var:X2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:N> /\ <var:X2> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:N> /\ <var:X2> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:N> /\ <var:J> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:X0> = <nat:2> /\ <var:J> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:J> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 