\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:b1> := <var:k> ; <var:b2> := <var:b1> * <var:k> ; <var:b3> := <var:b2> * <var:k> ; <var:b0> := <nat:3> ; <var:b2> := <var:b2> * <nat:6> ; <var:b3> := <var:b3> * <nat:3> ; <var:d> := <var:b3> <var:d> := <var:d> + <var:b2> <var:d> := <var:d> + <var:b0> \end{verbatim} Allowing --- with some whole numbers $ <var:O> $ --- it to hold that $ <var:k> = <var:O> $ before the execution of this program it follows that we have $ <var:d> = <nat:3> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> $ once list of instructions has finished . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:k> = <var:O> \} \\ <var:b1> := <var:k> ; \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \} \\ <var:b2> := <var:b1> * <var:k> ; \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b2> = <var:O> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:k> ; \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b2> = <var:O> ^ <nat:2> \land <var:b3> = <var:O> ^ <nat:3> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b2> = <var:O> ^ <nat:2> \land <var:b3> = <var:O> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b2> := <var:b2> * <nat:6> ; \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b2> = <nat:6> * <var:O> ^ <nat:2> \land <var:b3> = <var:O> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b3> := <var:b3> * <nat:3> ; \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b2> = <nat:6> * <var:O> ^ <nat:2> \land <var:b3> = <nat:3> * <var:O> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:d> := <var:b3> \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b2> = <nat:6> * <var:O> ^ <nat:2> \land <var:b0> = <nat:3> \land <var:d> = <nat:3> * <var:O> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:b2> \\ \{ <var:k> = <var:O> \land <var:b1> = <var:O> \land <var:b0> = <nat:3> \land <var:d> = <nat:3> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:b0> \\ \{ <var:k> = <var:O> \land <var:d> = <nat:3> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> \} \end{eqnarray} As a consequence , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:k> = <var:O> }} <var:b1> := <var:k> ; <var:b2> := <var:b1> * <var:k> ; <var:b3> := <var:b2> * <var:k> ; <var:b0> := <nat:3> ; <var:b2> := <var:b2> * <nat:6> ; <var:b3> := <var:b3> * <nat:3> ; <var:d> := <var:b3> <var:d> := <var:d> + <var:b2> <var:d> := <var:d> + <var:b0> {{ <var:d> = <nat:3> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b2> = <var:O> ^ <nat:2> /\ <var:b3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b2> = <var:O> ^ <nat:2> /\ <var:b3> = <var:O> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:b3> = <var:O> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:O> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:b0> = <nat:3> /\ <var:d> = <nat:3> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:b1> = <var:O> /\ <var:b0> = <nat:3> /\ <var:d> = <nat:3> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:d> = <nat:3> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 