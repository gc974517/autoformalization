\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:4> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:G> ; <var:P> := <var:q1> ; <var:P> := <var:P> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Allow that $ <var:G> = <var:H> $ ahead of the evaluation of the series of instructions it follows that $ <var:P> = <nat:4> \cdot <var:H> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands is demonstrated with usual Hoare techniques . Looking at the subsequent piece of code contained in the list of instructions , we see the binding command letting $ <nat:4> $ into $ <var:q0>$ . This line transfers the condition $ \{ <var:G> = <var:H> \} $ as $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \} $ . This is shown by the assignment scheme given by standard Hoare logic . Advancing to the next step , the binding line \verb | <var:q1> := <nat:4> ; | . This statement advances the condition $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \} $ to $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \} $ . This is given using the assignment rule in standard Hoare reasoning . Immediately after , the variable binding statement \verb | <var:q1> := <var:q1> * <var:G> ; | . This command takes the precondition $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \} $ as the condition $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> * <var:H> \} $ . This is shown to be logically sound by the assignment rule found in Hoare techniques . After , we see the binding statement letting $ <var:q1> $ as $ <var:P>$ . This redefines the precondition $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> * <var:H> \} $ into the condition $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \land <var:P> = <nat:4> * <var:H> \} $ . This is known to be sound by the assignment scheme in standard Hoare reasoning . Moving forward to the proceeding piece of code contained in our set of instructions , we see the variable binding line \verb | <var:P> := <var:P> + <var:q0> | . This line forwards the condition $ \{ <var:G> = <var:H> \land <var:q0> = <nat:4> \land <var:P> = <nat:4> * <var:H> \} $ toward the condition $ \{ <var:G> = <var:H> \land <var:P> = <nat:4> * <var:H> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:G> ; <var:P> := <var:q1> ; <var:P> := <var:P> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:G> = <var:H> }} <def:poly> {{ <var:P> = <nat:4> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:q0> = <nat:4> /\ <var:P> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:P> = <nat:4> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 