\begin{document} \begin{theorem} We define the following code : \begin{verbatim} <var:K0> := <nat:6> ; <var:I> := <var:K0> \end{verbatim} Allowing $ <var:G> = <var:v> $ before interpreting this set of instructions it follows that we have $ <var:I> = <nat:6> $ after series of instructions is done . \end{theorem} \begin{proof} The proof of the set of commands can be shown using Hoare reasoning . Advancing to the next step , we see the variable update statement \verb | <var:K0> := <nat:6> ; | . This line forwards $ \{ <var:G> = <var:v> \} $ into $ \{ <var:G> = <var:v> \land <var:K0> = <nat:6> \} $ . Paying attention to the proceeding line of code contained in our code , the variable binding command \verb | <var:I> := <var:K0> | . This command forwards $ \{ <var:G> = <var:v> \land <var:K0> = <nat:6> \} $ into $ \{ <var:G> = <var:v> \land <var:I> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:G> = <var:v> }} <var:K0> := <nat:6> ; <var:I> := <var:K0> {{ <var:I> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:I> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 