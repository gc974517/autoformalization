\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:K> ; <var:M2> := <var:M1> * <var:K> ; <var:M3> := <var:M2> * <var:K> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:M3> := <var:M3> * <nat:3> ; <var:l> := <var:M3> <var:l> := <var:l> + <var:M1> <var:l> := <var:l> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Allowing --- for any $ <var:u> $ --- that $ <var:K> = <var:u> $ before evaluating our program , it must be that $ <var:l> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:2> $ after set of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for this code segment is evident through usual Hoare techniques . Taking a look at the proceeding statements seen in the segment of code , we have \begin{verbatim} { <var:K> = <var:u> } <var:M1> := <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> } { <var:K> = <var:u> \land <var:M1> = <var:u> } <var:M2> := <var:M1> * <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> } { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> } <var:M3> := <var:M2> * <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> } { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> } <var:M0> := <nat:2> { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> \land <var:M0> = <nat:2> } \end{verbatim} Going to the next step , we have \begin{verbatim} { <var:K> = <var:u> } <var:M1> := <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> } \end{verbatim} Further , we see \begin{verbatim} { <var:K> = <var:u> } <var:M1> := <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> } { <var:K> = <var:u> \land <var:M1> = <var:u> } <var:M2> := <var:M1> * <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> } { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> } <var:M3> := <var:M2> * <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> } \end{verbatim} Stepping forward , we have \begin{verbatim} { <var:K> = <var:u> } <var:M1> := <var:K> { <var:K> = <var:u> \land <var:M1> = <var:u> } \end{verbatim} This is known to be sound using the environment update law of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:K> ; <var:M2> := <var:M1> * <var:K> ; <var:M3> := <var:M2> * <var:K> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:M3> := <var:M3> * <nat:3> ; <var:l> := <var:M3> <var:l> := <var:l> + <var:M1> <var:l> := <var:l> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:K> = <var:u> }} <def:poly> {{ <var:l> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M3> = <var:u> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <nat:1> * <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M3> = <var:u> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <nat:1> * <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:u> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M1> = <nat:1> * <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M0> = <nat:2> /\ <var:l> = <nat:3> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:M0> = <nat:2> /\ <var:l> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:l> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 