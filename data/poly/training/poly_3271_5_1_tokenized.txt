\begin{document} \begin{theorem} We define the following list of commands as follows \begin{verbatim} <var:f1> := <var:A> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:3> ; <var:L> := <var:f1> <var:L> := <var:L> + <var:f0> \end{verbatim} Assuming it to hold that $ <var:A> = <var:j> $ ahead of interpreting our list of commands , it follows that we see $ <var:L> = <nat:3> * <var:j> + <nat:8> $ after series of commands has executed . \end{theorem} \begin{proof} The flow of logic for the program is evident by Hoare logic . Observing the upcoming step seen in our series of commands , we have the variable assignmet command assigning $ <var:A> $ into $ <var:f1>$ . This statement transfers $ \{ <var:A> = <var:j> \} $ toward $ \{ <var:A> = <var:j> \land <var:f1> = <var:j> \} $ . This is known to be sound by the assignment rule found in usual Hoare logic . Stepping forward , the variable update command \verb | <var:f0> := <nat:8> ; | . This statement advances the precondition $ \{ <var:A> = <var:j> \land <var:f1> = <var:j> \} $ as the postcondition $ \{ <var:A> = <var:j> \land <var:f1> = <var:j> \land <var:f0> = <nat:8> \} $ . This is ensured through the assignment scheme from standard Hoare techniques . Focusing on the proceeding statement found in the list of commands , we have the variable update command letting $ <var:f1> * <nat:3> $ as $ <var:f1>$ . This line moves the precondition $ \{ <var:A> = <var:j> \land <var:f1> = <var:j> \land <var:f0> = <nat:8> \} $ to the postcondition $ \{ <var:A> = <var:j> \land <var:f1> = <nat:3> \times <var:j> \land <var:f0> = <nat:8> \} $ . Taking a look at the subsequent step seen in our set of instructions , we see the variable update code \verb | <var:L> := <var:f1> | . This transfers the precondition $ \{ <var:A> = <var:j> \land <var:f1> = <nat:3> \times <var:j> \land <var:f0> = <nat:8> \} $ into the condition $ \{ <var:A> = <var:j> \land <var:f0> = <nat:8> \land <var:L> = <nat:3> \times <var:j> \} $ . Advancing to the next command seen in our set of commands , we see the assignment statement letting $ <var:L> + <var:f0$ to $ <var:L>$ . This takes the condition $ \{ <var:A> = <var:j> \land <var:f0> = <nat:8> \land <var:L> = <nat:3> \times <var:j> \} $ toward $ \{ <var:A> = <var:j> \land <var:L> = <nat:3> \times <var:j> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <var:f1> := <var:A> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:3> ; <var:L> := <var:f1> <var:L> := <var:L> + <var:f0> {{ <var:L> = <nat:3> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:f1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:f1> = <var:j> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:f1> = <nat:3> * <var:j> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:f0> = <nat:8> /\ <var:L> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:L> = <nat:3> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 