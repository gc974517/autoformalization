\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:6> ; <var:c> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Given it to hold that $ <var:x> = <var:u> $ given positive integers $ <var:u> $ before the evaluation of the code , it follows that we have $ <var:c> = <nat:6> $ after series of instructions has exited . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:x> = <var:u> \} \\ <var:C0> := <nat:6> ; \\ \{ <var:x> = <var:u> \land <var:C0> = <nat:6> \} \\ <var:c> := <var:C0> \\ \{ <var:x> = <var:u> \land <var:c> = <nat:6> \} \end{eqnarray} As a consequence , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:6> ; <var:c> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:x> = <var:u> }} <def:poly> {{ <var:c> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:c> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 