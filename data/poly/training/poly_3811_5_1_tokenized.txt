\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:P> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:8> ; <var:J> := <var:i1> <var:J> := <var:J> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:P> = <var:S> $ prior to evaluating this series of instructions it holds that we have $ <var:J> = <nat:8> * <var:S> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:P> = <var:S> \} \\ <var:i1> := <var:P> ; \\ \{ <var:P> = <var:S> \land <var:i1> = <var:S> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:P> = <var:S> \land <var:i1> = <var:S> \land <var:i0> = <nat:3> \} \\ <var:i1> := <var:i1> * <nat:8> ; \\ \{ <var:P> = <var:S> \land <var:i1> = <nat:8> \times <var:S> \land <var:i0> = <nat:3> \} \\ <var:J> := <var:i1> \\ \{ <var:P> = <var:S> \land <var:i0> = <nat:3> \land <var:J> = <nat:8> \times <var:S> \} \\ <var:J> := <var:J> + <var:i0> \\ \{ <var:P> = <var:S> \land <var:J> = <nat:8> \times <var:S> + <nat:3> \} \end{eqnarray} Therefore , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:P> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:8> ; <var:J> := <var:i1> <var:J> := <var:J> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:P> = <var:S> }} <def:poly> {{ <var:J> = <nat:8> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:i1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:i1> = <var:S> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:i1> = <nat:8> * <var:S> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:i0> = <nat:3> /\ <var:J> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:J> = <nat:8> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 