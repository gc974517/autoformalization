\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:J> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:3> ; <var:W> := <var:q1> <var:W> := <var:W> + <var:q0> \end{verbatim} Given $ <var:J> = <var:k> $ ahead of the evaluation of our list of instructions it holds that we have $ <var:W> = <nat:3> \cdot <var:k> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment can be seen through typical Hoare reasoning . Next , we have the variable assignmet command \verb | <var:q1> := <var:J> ; | . This command redefines the condition $ \{ <var:J> = <var:k> \} $ to the postcondition $ \{ <var:J> = <var:k> \land <var:q1> = <var:k> \} $ . This is guaranteed using the assignment scheme from Hoare logic . Moving forward to the following line of code found in our list of commands , we see the variable binding line \verb | <var:q0> := <nat:5> ; | . This advances the precondition $ \{ <var:J> = <var:k> \land <var:q1> = <var:k> \} $ into the postcondition $ \{ <var:J> = <var:k> \land <var:q1> = <var:k> \land <var:q0> = <nat:5> \} $ . Keeping momentum , the variable assignmet line \verb | <var:q1> := <var:q1> * <nat:3> ; | . This transfers $ \{ <var:J> = <var:k> \land <var:q1> = <var:k> \land <var:q0> = <nat:5> \} $ as $ \{ <var:J> = <var:k> \land <var:q1> = <nat:3> \cdot <var:k> \land <var:q0> = <nat:5> \} $ . Shifting focus toward the proceeding bit of code in the code , the variable binding command \verb | <var:W> := <var:q1> | . This command advances the condition $ \{ <var:J> = <var:k> \land <var:q1> = <nat:3> \cdot <var:k> \land <var:q0> = <nat:5> \} $ as $ \{ <var:J> = <var:k> \land <var:q0> = <nat:5> \land <var:W> = <nat:3> \cdot <var:k> \} $ . Focusing on the next command found in our list of instructions , we see the variable assignmet code \verb | <var:W> := <var:W> + <var:q0> | . This forwards the precondition $ \{ <var:J> = <var:k> \land <var:q0> = <nat:5> \land <var:W> = <nat:3> \cdot <var:k> \} $ to $ \{ <var:J> = <var:k> \land <var:W> = <nat:3> \cdot <var:k> + <nat:5> \} $ . This is given using the assignment rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:J> = <var:k> }} <var:q1> := <var:J> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:3> ; <var:W> := <var:q1> <var:W> := <var:W> + <var:q0> {{ <var:W> = <nat:3> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:q1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:q1> = <var:k> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:q1> = <nat:3> * <var:k> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:q0> = <nat:5> /\ <var:W> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:W> = <nat:3> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 