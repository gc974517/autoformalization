\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:t0> := <nat:2> ; <var:S> := <var:t0> \end{verbatim} Assume , taking positive integers $ <var:c> $ , $ <var:z> = <var:c> $ before the evaluation of this code , then we see $ <var:S> = <nat:2> $ once set of commands has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:z> = <var:c> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:z> = <var:c> \land <var:t0> = <nat:2> \} \\ <var:S> := <var:t0> \\ \{ <var:z> = <var:c> \land <var:S> = <nat:2> \} \end{eqnarray} Considering the preceding argument , this series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:z> = <var:c> }} <var:t0> := <nat:2> ; <var:S> := <var:t0> {{ <var:S> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:S> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 