\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:7> ; <var:S> := <var:T0> \end{verbatim} Assume , given $ <var:t> \in \mathbb{N} $ , $ <var:J> = <var:t> $ ahead of interpreting the set of instructions then $ <var:S> = <nat:7> $ after list of commands has executed . \end{theorem} \begin{proof} The argument for the code is evident using standard Hoare techniques . Moving forward to the next step , we have the assignment line assigning $ <nat:7> $ as $ <var:T0>$ . This code redefines $ \{ <var:J> = <var:t> \} $ to the postcondition $ \{ <var:J> = <var:t> \land <var:T0> = <nat:7> \} $ . After , we see the variable assignmet command \verb | <var:S> := <var:T0> | . This moves the precondition $ \{ <var:J> = <var:t> \land <var:T0> = <nat:7> \} $ into the condition $ \{ <var:J> = <var:t> \land <var:S> = <nat:7> \} $ . This is guaranteed by the assignment law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:J> = <var:t> }} <var:T0> := <nat:7> ; <var:S> := <var:T0> {{ <var:S> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:S> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 