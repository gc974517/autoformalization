\begin{document} \begin{theorem} Define a series of commands as follows \begin{verbatim} <var:U1> := <var:L> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:9> ; <var:n> := <var:U1> <var:n> := <var:n> + <var:U0> \end{verbatim} Allow it to be that $ <var:L> = <var:M> $ ahead of the execution of the set of commands , it holds that we see $ <var:n> = <nat:9> * <var:M> + <nat:9> $ when program has exited . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:L> = <var:M> \} \\ <var:U1> := <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U1> = <var:M> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:L> = <var:M> \land <var:U1> = <var:M> \land <var:U0> = <nat:9> \} \\ <var:U1> := <var:U1> * <nat:9> ; \\ \{ <var:L> = <var:M> \land <var:U1> = <nat:9> * <var:M> \land <var:U0> = <nat:9> \} \\ <var:n> := <var:U1> \\ \{ <var:L> = <var:M> \land <var:U0> = <nat:9> \land <var:n> = <nat:9> * <var:M> \} \\ <var:n> := <var:n> + <var:U0> \\ \{ <var:L> = <var:M> \land <var:n> = <nat:9> * <var:M> + <nat:9> \} \end{eqnarray} Thusly , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <var:U1> := <var:L> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:9> ; <var:n> := <var:U1> <var:n> := <var:n> + <var:U0> {{ <var:n> = <nat:9> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U1> = <var:M> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U1> = <nat:9> * <var:M> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U0> = <nat:9> /\ <var:n> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:n> = <nat:9> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 