\begin{document} \begin{theorem} Consider the following program as follows \begin{verbatim} <var:V0> := <nat:2> ; <var:X> := <var:V0> \end{verbatim} Allow it to hold that $ <var:F> = <var:u> $ , letting $ <var:u> \in \mathbb{N} $ , before interpreting the series of instructions it holds that $ <var:X> = <nat:2> $ . \end{theorem} \begin{proof} The argument for this set of commands can be demonstrated using standard Hoare logic . Honing in on the upcoming piece of code found in our set of commands , we have the statement giving $ <nat:2> $ to $ <var:V0>$ . This command advances the condition $ \{ <var:F> = <var:u> \} $ toward $ \{ <var:F> = <var:u> \land <var:V0> = <nat:2> \} $ . Observing the subsequent statement in our segment of code , we have the command \verb | <var:X> := <var:V0> | . This statement redefines the condition $ \{ <var:F> = <var:u> \land <var:V0> = <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:u> \land <var:X> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:F> = <var:u> }} <var:V0> := <nat:2> ; <var:X> := <var:V0> {{ <var:X> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:X> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 