\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:8> ; <var:l2> := <nat:7> ; <var:l2> := <var:l2> * <var:S> ; <var:l2> := <var:l2> * <var:S> ; <var:l3> := <nat:6> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:U> := <var:l3> ; <var:U> := <var:U> + <var:l2> ; <var:U> := <var:U> + <var:l0> \end{verbatim} Given it to hold that $ <var:S> = <var:G> $ before running the code it must be that we have $ <var:U> = <nat:6> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:S> = <var:G> \} \\ <var:l0> := <nat:8> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \} \\ <var:l2> := <nat:7> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> \} \end{eqnarray} Furthering running the code returns : \begin{eqnarray} <var:l2> := <var:l2> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> \} \end{eqnarray} Continuing running this code segment produces : \begin{eqnarray} <var:l2> := <var:l2> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> ^ <nat:2> \} \\ <var:l3> := <nat:6> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> ^ <nat:2> \land <var:l3> = <nat:6> \} \end{eqnarray} Advancing evaluating the segment of code gives : \begin{eqnarray} <var:l3> := <var:l3> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> ^ <nat:2> \land <var:l3> = <nat:6> * <var:G> \} \\ <var:l3> := <var:l3> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> ^ <nat:2> \land <var:l3> = <nat:6> * <var:G> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:S> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> ^ <nat:2> \land <var:l3> = <nat:6> * <var:G> ^ <nat:3> \} \\ <var:U> := <var:l3> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:l2> = <nat:7> * <var:G> ^ <nat:2> \land <var:U> = <nat:6> * <var:G> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:l2> ; \\ \{ <var:S> = <var:G> \land <var:l0> = <nat:8> \land <var:U> = <nat:6> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:l0> \\ \{ <var:S> = <var:G> \land <var:U> = <nat:6> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> \} \end{eqnarray} Thus , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:S> = <var:G> }} <var:l0> := <nat:8> ; <var:l2> := <nat:7> ; <var:l2> := <var:l2> * <var:S> ; <var:l2> := <var:l2> * <var:S> ; <var:l3> := <nat:6> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:U> := <var:l3> ; <var:U> := <var:U> + <var:l2> ; <var:U> := <var:U> + <var:l0> {{ <var:U> = <nat:6> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:l3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:l2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:U> = <nat:6> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:l0> = <nat:8> /\ <var:U> = <nat:6> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:G> /\ <var:U> = <nat:6> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 