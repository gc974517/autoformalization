\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:2> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:n> ; <var:G2> := <nat:6> ; <var:G2> := <var:G2> * <var:n> ; <var:G2> := <var:G2> * <var:n> ; <var:E> := <var:G2> ; <var:E> := <var:E> + <var:G1> ; <var:E> := <var:E> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:n> = <var:D> $ ahead of executing this code segment it follows that we have $ <var:E> = <nat:6> \times <var:D> ^ <nat:2> + <nat:6> \times <var:D> + <nat:2> $ after program finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:D> \} \\ <var:G0> := <nat:2> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \} \\ <var:G1> := <nat:6> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:G1> = <nat:6> \} \\ <var:G1> := <var:G1> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:G1> = <nat:6> * <var:D> \} \\ <var:G2> := <nat:6> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:G1> = <nat:6> * <var:D> \land <var:G2> = <nat:6> \} \\ <var:G2> := <var:G2> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:G1> = <nat:6> * <var:D> \land <var:G2> = <nat:6> * <var:D> \} \\ <var:G2> := <var:G2> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:G1> = <nat:6> * <var:D> \land <var:G2> = <nat:6> * <var:D> ^ <nat:2> \} \\ <var:E> := <var:G2> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:G1> = <nat:6> * <var:D> \land <var:E> = <nat:6> * <var:D> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:G1> ; \\ \{ <var:n> = <var:D> \land <var:G0> = <nat:2> \land <var:E> = <nat:6> * <var:D> ^ <nat:2> + <nat:6> * <var:D> \} \\ <var:E> := <var:E> + <var:G0> \\ \{ <var:n> = <var:D> \land <var:E> = <nat:6> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:2> \} \end{eqnarray} Utilizing Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:2> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:n> ; <var:G2> := <nat:6> ; <var:G2> := <var:G2> * <var:n> ; <var:G2> := <var:G2> * <var:n> ; <var:E> := <var:G2> ; <var:E> := <var:E> + <var:G1> ; <var:E> := <var:E> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <def:poly> {{ <var:E> = <nat:6> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:6> * <var:D> /\ <var:G2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:6> * <var:D> /\ <var:G2> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:6> * <var:D> /\ <var:G2> = <nat:6> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:6> * <var:D> /\ <var:E> = <nat:6> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:G0> = <nat:2> /\ <var:E> = <nat:6> * <var:D> ^ <nat:2> + <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:E> = <nat:6> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 