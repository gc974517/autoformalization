\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:3> ; <var:U1> := <nat:2> ; <var:U1> := <var:U1> * <var:l> ; <var:U2> := <nat:9> ; <var:U2> := <var:U2> * <var:l> ; <var:U2> := <var:U2> * <var:l> ; <var:I> := <var:U2> ; <var:I> := <var:I> + <var:U1> ; <var:I> := <var:I> + <var:U0> \end{verbatim} Assuming that we have $ <var:l> = <var:x> $ prior to interpreting our code , it must be that we see $ <var:I> = <nat:9> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:l> = <var:x> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \} \\ <var:U1> := <nat:2> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:U1> = <nat:2> \} \\ <var:U1> := <var:U1> * <var:l> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:U1> = <nat:2> * <var:x> \} \\ <var:U2> := <nat:9> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:U1> = <nat:2> * <var:x> \land <var:U2> = <nat:9> \} \\ <var:U2> := <var:U2> * <var:l> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:U1> = <nat:2> * <var:x> \land <var:U2> = <nat:9> * <var:x> \} \\ <var:U2> := <var:U2> * <var:l> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:U1> = <nat:2> * <var:x> \land <var:U2> = <nat:9> * <var:x> ^ <nat:2> \} \\ <var:I> := <var:U2> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:U1> = <nat:2> * <var:x> \land <var:I> = <nat:9> * <var:x> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:U1> ; \\ \{ <var:l> = <var:x> \land <var:U0> = <nat:3> \land <var:I> = <nat:9> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} \\ <var:I> := <var:I> + <var:U0> \\ \{ <var:l> = <var:x> \land <var:I> = <nat:9> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> \} \end{eqnarray} As a consequence , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:l> = <var:x> }} <var:U0> := <nat:3> ; <var:U1> := <nat:2> ; <var:U1> := <var:U1> * <var:l> ; <var:U2> := <nat:9> ; <var:U2> := <var:U2> * <var:l> ; <var:U2> := <var:U2> * <var:l> ; <var:I> := <var:U2> ; <var:I> := <var:I> + <var:U1> ; <var:I> := <var:I> + <var:U0> {{ <var:I> = <nat:9> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:2> * <var:x> /\ <var:U2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:2> * <var:x> /\ <var:U2> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:2> * <var:x> /\ <var:U2> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:2> * <var:x> /\ <var:I> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:U0> = <nat:3> /\ <var:I> = <nat:9> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:I> = <nat:9> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 