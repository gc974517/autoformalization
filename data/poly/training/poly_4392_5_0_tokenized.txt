\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:l> ; <var:W> := <var:T1> ; <var:W> := <var:W> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Allow given all integers $ <var:o> $ it to be that $ <var:l> = <var:o> $ prior to the evaluation of the code segment , it must be that $ <var:W> = <nat:6> * <var:o> + <nat:5> $ . \end{theorem} \begin{proof} The proof of the code segment is accomplished by typical Hoare reasoning . Moving on to the next piece of code found in our list of commands , we have the line yielding $ <nat:5> $ as $ <var:T0>$ . This advances $ \{ <var:l> = <var:o> \} $ toward the condition $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \} $ . Following , we have the environment update statement binding $ <nat:6> $ toward $ <var:T1>$ . This command takes $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \} $ as the condition $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> \} $ . Paying attention to the next piece of code contained in the series of commands , the variable update line \verb | <var:T1> := <var:T1> * <var:l> ; | . This line redefines the condition $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> \} $ as the condition $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> \cdot <var:o> \} $ . Observing the next bit of code in the list of commands , the variable update command \verb | <var:W> := <var:T1> ; | . This forwards the condition $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> \cdot <var:o> \} $ to the condition $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \land <var:W> = <nat:6> \cdot <var:o> \} $ . This is guaranteed by the assignment rule given in Hoare logic . Advancing on , the environment update line binding $ <var:W> + <var:T0$ into $ <var:W>$ . This line moves $ \{ <var:l> = <var:o> \land <var:T0> = <nat:5> \land <var:W> = <nat:6> \cdot <var:o> \} $ to the postcondition $ \{ <var:l> = <var:o> \land <var:W> = <nat:6> \cdot <var:o> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:5> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:l> ; <var:W> := <var:T1> ; <var:W> := <var:W> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:l> = <var:o> }} <def:poly> {{ <var:W> = <nat:6> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:T0> = <nat:5> /\ <var:W> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:W> = <nat:6> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 