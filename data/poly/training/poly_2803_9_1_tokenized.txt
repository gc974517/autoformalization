\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:G1> := <var:r> ; <var:G2> := <var:G1> * <var:r> ; <var:G3> := <var:G2> * <var:r> ; <var:G0> := <nat:1> ; <var:G2> := <var:G2> * <nat:4> ; <var:G3> := <var:G3> * <nat:2> ; <var:I> := <var:G3> <var:I> := <var:I> + <var:G2> <var:I> := <var:I> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:r> = <var:H> $ ahead of the evaluation of this set of commands then we see $ <var:I> = <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this program is demonstrated through the below decorated list of instructions . \begin{eqnarray} \{ <var:r> = <var:H> \} \\ <var:G1> := <var:r> ; \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \} \\ <var:G2> := <var:G1> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \} \end{eqnarray} Advancing running the code segment produces : \begin{eqnarray} <var:G3> := <var:G2> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:G2> := <var:G2> * <nat:4> ; \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:G3> := <var:G3> * <nat:2> ; \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:G3> = <nat:2> \cdot <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:I> := <var:G3> \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:G0> = <nat:1> \land <var:I> = <nat:2> \cdot <var:H> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:G2> \\ \{ <var:r> = <var:H> \land <var:G1> = <var:H> \land <var:G0> = <nat:1> \land <var:I> = <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:G0> \\ \{ <var:r> = <var:H> \land <var:I> = <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:r> ; <var:G2> := <var:G1> * <var:r> ; <var:G3> := <var:G2> * <var:r> ; <var:G0> := <nat:1> ; <var:G2> := <var:G2> * <nat:4> ; <var:G3> := <var:G3> * <nat:2> ; <var:I> := <var:G3> <var:I> := <var:I> + <var:G2> <var:I> := <var:I> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:r> = <var:H> }} <def:poly> {{ <var:I> = <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:G0> = <nat:1> /\ <var:I> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:G1> = <var:H> /\ <var:G0> = <nat:1> /\ <var:I> = <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:I> = <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 