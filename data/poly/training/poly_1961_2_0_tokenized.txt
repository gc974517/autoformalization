\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:5> ; <var:Q> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume ( with some positive integers $ <var:M> $ ) that we have $ <var:e> = <var:M> $ prior to evaluating the list of instructions it holds that $ <var:Q> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:M> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:e> = <var:M> \land <var:L0> = <nat:5> \} \\ <var:Q> := <var:L0> \\ \{ <var:e> = <var:M> \land <var:Q> = <nat:5> \} \end{eqnarray} Using typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:Q> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:e> = <var:M> }} <def:poly> {{ <var:Q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:M> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:M> /\ <var:Q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 