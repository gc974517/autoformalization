\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:B1> := <var:n> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:4> ; <var:I> := <var:B1> <var:I> := <var:I> + <var:B0> \end{verbatim} Allowing it to hold that $ <var:n> = <var:m> $ ahead of running this set of instructions , it holds that we see $ <var:I> = <nat:4> * <var:m> + <nat:2> $ after code segment has finished executing . \end{theorem} \begin{proof} Proving correctness for the set of commands can be demonstrated with usual Hoare techniques . After , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:m> \} & <var:B1> := <var:n> & \{ <var:n> = <var:m> \land <var:B1> = <var:m> \} \\ \{ <var:n> = <var:m> \land <var:B1> = <var:m> \} & <var:B0> := <nat:2> & \{ <var:n> = <var:m> \land <var:B1> = <var:m> \land <var:B0> = <nat:2> \} \\ \{ <var:n> = <var:m> \land <var:B1> = <var:m> \land <var:B0> = <nat:2> \} & <var:B1> := <var:B1> * <nat:4> & \{ <var:n> = <var:m> \land <var:B1> = <nat:4> \cdot <var:m> \land <var:B0> = <nat:2> \} \\ \{ <var:n> = <var:m> \land <var:B1> = <nat:4> \cdot <var:m> \land <var:B0> = <nat:2> \} & <var:I> := <var:B1& \{ <var:n> = <var:m> \land <var:B0> = <nat:2> \land <var:I> = <nat:4> \cdot <var:m> \} \\ \{ <var:n> = <var:m> \land <var:B0> = <nat:2> \land <var:I> = <nat:4> \cdot <var:m> \} & <var:I> := <var:I> + <var:B0& \{ <var:n> = <var:m> \land <var:I> = <nat:4> \cdot <var:m> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:n> = <var:m> }} <var:B1> := <var:n> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:4> ; <var:I> := <var:B1> <var:I> := <var:I> + <var:B0> {{ <var:I> = <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:B1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:B1> = <var:m> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:B1> = <nat:4> * <var:m> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:B0> = <nat:2> /\ <var:I> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:I> = <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 