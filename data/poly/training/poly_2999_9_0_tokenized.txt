\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:A> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:A> ; <var:J2> := <var:J2> * <var:A> ; <var:v> := <var:J2> ; <var:v> := <var:v> + <var:J1> ; <var:v> := <var:v> + <var:J0> \end{verbatim} Allow $ <var:A> = <var:S> $ before executing this list of instructions , it must be that we see $ <var:v> = <nat:5> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our code can be seen with usual Hoare techniques . Shifting focus toward the next pieces of code contained in our list of commands , \begin{verbatim} { <var:A> = <var:S> } <var:J0> := <nat:1> { <var:A> = <var:S> \land <var:J0> = <nat:1> } { <var:A> = <var:S> \land <var:J0> = <nat:1> } <var:J1> := <nat:7> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> } <var:J1> := <var:J1> * <var:A> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> } <var:J2> := <nat:5> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:J2> = <nat:5> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:J2> = <nat:5> } <var:J2> := <var:J2> * <var:A> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:J2> = <nat:5> * <var:S> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:J2> = <nat:5> * <var:S> } <var:J2> := <var:J2> * <var:A> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:J2> = <nat:5> * <var:S> ^ <nat:2> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:J2> = <nat:5> * <var:S> ^ <nat:2> } <var:v> := <var:J2> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:v> = <nat:5> * <var:S> ^ <nat:2> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:J1> = <nat:7> * <var:S> \land <var:v> = <nat:5> * <var:S> ^ <nat:2> } <var:v> := <var:v> + <var:J1> { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:v> = <nat:5> * <var:S> ^ <nat:2> + <nat:7> * <var:S> } { <var:A> = <var:S> \land <var:J0> = <nat:1> \land <var:v> = <nat:5> * <var:S> ^ <nat:2> + <nat:7> * <var:S> } <var:v> := <var:v> + <var:J0{ <var:A> = <var:S> \land <var:v> = <nat:5> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <var:J0> := <nat:1> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:A> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:A> ; <var:J2> := <var:J2> * <var:A> ; <var:v> := <var:J2> ; <var:v> := <var:v> + <var:J1> ; <var:v> := <var:v> + <var:J0> {{ <var:v> = <nat:5> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:7> * <var:S> /\ <var:J2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:7> * <var:S> /\ <var:J2> = <nat:5> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:7> * <var:S> /\ <var:J2> = <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:7> * <var:S> /\ <var:v> = <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:J0> = <nat:1> /\ <var:v> = <nat:5> * <var:S> ^ <nat:2> + <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:v> = <nat:5> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 