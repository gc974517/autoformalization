\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:h1> := <var:s> ; <var:h0> := <nat:7> ; <var:h1> := <var:h1> * <nat:3> ; <var:l> := <var:h1> <var:l> := <var:l> + <var:h0> \end{verbatim} Given that we have $ <var:s> = <var:o> $ , taking integers $ <var:o> $ , prior to executing our list of instructions , it holds that $ <var:l> = <nat:3> \cdot <var:o> + <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:s> = <var:o> \} \\ <var:h1> := <var:s> ; \\ \{ <var:s> = <var:o> \land <var:h1> = <var:o> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:s> = <var:o> \land <var:h1> = <var:o> \land <var:h0> = <nat:7> \} \\ <var:h1> := <var:h1> * <nat:3> ; \\ \{ <var:s> = <var:o> \land <var:h1> = <nat:3> * <var:o> \land <var:h0> = <nat:7> \} \\ <var:l> := <var:h1> \\ \{ <var:s> = <var:o> \land <var:h0> = <nat:7> \land <var:l> = <nat:3> * <var:o> \} \\ <var:l> := <var:l> + <var:h0> \\ \{ <var:s> = <var:o> \land <var:l> = <nat:3> * <var:o> + <nat:7> \} \end{eqnarray} As a result , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:s> = <var:o> }} <var:h1> := <var:s> ; <var:h0> := <nat:7> ; <var:h1> := <var:h1> * <nat:3> ; <var:l> := <var:h1> <var:l> := <var:l> + <var:h0> {{ <var:l> = <nat:3> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:h1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:h1> = <var:o> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:h1> = <nat:3> * <var:o> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:h0> = <nat:7> /\ <var:l> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:l> = <nat:3> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 