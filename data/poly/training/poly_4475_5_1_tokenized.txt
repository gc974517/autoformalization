\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:r> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:2> ; <var:L> := <var:o1> <var:L> := <var:L> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:r> = <var:y> $ before executing this list of commands , it holds that we see $ <var:L> = <nat:2> \cdot <var:y> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for our code segment can be seen with typical Hoare reasoning . Keeping momentum , we have \verb | { <var:r> = <var:y> } <var:o1> := <var:r> { <var:r> = <var:y> \land <var:o1> = <var:y> } | , \verb | { <var:r> = <var:y> \land <var:o1> = <var:y> } <var:o0> := <nat:5> { <var:r> = <var:y> \land <var:o1> = <var:y> \land <var:o0> = <nat:5> } | , \verb | { <var:r> = <var:y> \land <var:o1> = <var:y> \land <var:o0> = <nat:5> } <var:o1> := <var:o1> * <nat:2> { <var:r> = <var:y> \land <var:o1> = <nat:2> * <var:y> \land <var:o0> = <nat:5> } | , \verb | { <var:r> = <var:y> \land <var:o1> = <nat:2> * <var:y> \land <var:o0> = <nat:5> } <var:L> := <var:o1{ <var:r> = <var:y> \land <var:o0> = <nat:5> \land <var:L> = <nat:2> * <var:y> } | and \verb | { <var:r> = <var:y> \land <var:o0> = <nat:5> \land <var:L> = <nat:2> * <var:y> } <var:L> := <var:L> + <var:o0{ <var:r> = <var:y> \land <var:L> = <nat:2> * <var:y> + <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:r> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:2> ; <var:L> := <var:o1> <var:L> := <var:L> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:r> = <var:y> }} <def:poly> {{ <var:L> = <nat:2> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:o1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:o1> = <var:y> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:o1> = <nat:2> * <var:y> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:o0> = <nat:5> /\ <var:L> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:L> = <nat:2> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 