\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:I0> := <nat:8> ; <var:r> := <var:I0> \end{verbatim} Allowing it to hold that $ <var:g> = <var:t> $ before the execution of the set of commands , it must be that we see $ <var:r> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be done by typical Hoare logic . Further , the variable binding command giving $ <nat:8> $ as $ <var:I0>$ . This statement advances the condition $ \{ <var:g> = <var:t> \} $ toward the postcondition $ \{ <var:g> = <var:t> \land <var:I0> = <nat:8> \} $ . Going forward , we have the assignment code giving $ <var:I0$ to $ <var:r>$ . This command redefines $ \{ <var:g> = <var:t> \land <var:I0> = <nat:8> \} $ toward $ \{ <var:g> = <var:t> \land <var:r> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:g> = <var:t> }} <var:I0> := <nat:8> ; <var:r> := <var:I0> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 