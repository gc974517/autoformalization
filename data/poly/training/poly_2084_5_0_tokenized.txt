\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:1> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:U> ; <var:h> := <var:b1> ; <var:h> := <var:h> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assume for all positive integers $ <var:M> $ it to be that $ <var:U> = <var:M> $ before interpreting the series of instructions it holds that $ <var:h> = <nat:5> * <var:M> + <nat:1> $ when set of instructions exits . \end{theorem} \begin{proof} Let this decorated code segment . \begin{eqnarray} \{ <var:U> = <var:M> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:U> = <var:M> \land <var:b0> = <nat:1> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:U> = <var:M> \land <var:b0> = <nat:1> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:b0> = <nat:1> \land <var:b1> = <nat:5> * <var:M> \} \\ <var:h> := <var:b1> ; \\ \{ <var:U> = <var:M> \land <var:b0> = <nat:1> \land <var:h> = <nat:5> * <var:M> \} \\ <var:h> := <var:h> + <var:b0> \\ \{ <var:U> = <var:M> \land <var:h> = <nat:5> * <var:M> + <nat:1> \} \end{eqnarray} Using standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:U> ; <var:h> := <var:b1> ; <var:h> := <var:h> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:U> = <var:M> }} <def:poly> {{ <var:h> = <nat:5> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:b0> = <nat:1> /\ <var:h> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:h> = <nat:5> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 