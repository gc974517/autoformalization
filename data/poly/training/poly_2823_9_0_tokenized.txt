\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:6> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:Z> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:Z> ; <var:M2> := <var:M2> * <var:Z> ; <var:g> := <var:M2> ; <var:g> := <var:g> + <var:M1> ; <var:g> := <var:g> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:Z> = <var:V> $ prior to the evaluation of our code then we have $ <var:g> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be accomplished with typical Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:Z> = <var:V> } <var:M0> := <nat:6> { <var:Z> = <var:V> \land <var:M0> = <nat:6> } { <var:Z> = <var:V> \land <var:M0> = <nat:6> } <var:M1> := <nat:2> { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:Z> = <var:V> } <var:M0> := <nat:6> { <var:Z> = <var:V> \land <var:M0> = <nat:6> } { <var:Z> = <var:V> \land <var:M0> = <nat:6> } <var:M1> := <nat:2> { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> } { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> } <var:M1> := <var:M1> * <var:Z> { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> \times <var:V> } { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> \times <var:V> } <var:M2> := <nat:3> { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> \times <var:V> \land <var:M2> = <nat:3> } { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> \times <var:V> \land <var:M2> = <nat:3> } <var:M2> := <var:M2> * <var:Z> { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> \times <var:V> \land <var:M2> = <nat:3> \times <var:V> } \end{verbatim} Next , we see \begin{verbatim} { <var:Z> = <var:V> } <var:M0> := <nat:6> { <var:Z> = <var:V> \land <var:M0> = <nat:6> } { <var:Z> = <var:V> \land <var:M0> = <nat:6> } <var:M1> := <nat:2> { <var:Z> = <var:V> \land <var:M0> = <nat:6> \land <var:M1> = <nat:2> } \end{verbatim} This is guaranteed by the environment update scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:Z> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:Z> ; <var:M2> := <var:M2> * <var:Z> ; <var:g> := <var:M2> ; <var:g> := <var:g> + <var:M1> ; <var:g> := <var:g> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Z> = <var:V> }} <def:poly> {{ <var:g> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:2> * <var:V> /\ <var:M2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:2> * <var:V> /\ <var:M2> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:2> * <var:V> /\ <var:M2> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:2> * <var:V> /\ <var:g> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:M0> = <nat:6> /\ <var:g> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:g> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 