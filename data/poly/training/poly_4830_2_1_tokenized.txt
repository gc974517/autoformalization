\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:8> ; <var:D> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:f> = <var:M> $ ahead of evaluating this series of commands then we have $ <var:D> = <nat:8> $ when set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:M> \} \\ <var:T0> := <nat:8> ; \\ \{ <var:f> = <var:M> \land <var:T0> = <nat:8> \} \\ <var:D> := <var:T0> \\ \{ <var:f> = <var:M> \land <var:D> = <nat:8> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:8> ; <var:D> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <def:poly> {{ <var:D> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:D> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 