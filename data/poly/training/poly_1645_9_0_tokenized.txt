\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:v> ; <var:z2> := <nat:5> ; <var:z2> := <var:z2> * <var:v> ; <var:z2> := <var:z2> * <var:v> ; <var:d> := <var:z2> ; <var:d> := <var:d> + <var:z1> ; <var:d> := <var:d> + <var:z0> \end{verbatim} Given , for some positive integers $ <var:g> $ , that $ <var:v> = <var:g> $ before running this list of commands , it holds that we see $ <var:d> = <nat:5> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:8> $ . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:g> \} \\ <var:z0> := <nat:8> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \} \\ <var:z1> := <nat:1> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:z1> = <nat:1> \} \\ <var:z1> := <var:z1> * <var:v> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:z1> = <nat:1> * <var:g> \} \\ <var:z2> := <nat:5> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:z1> = <nat:1> * <var:g> \land <var:z2> = <nat:5> \} \\ <var:z2> := <var:z2> * <var:v> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:z1> = <nat:1> * <var:g> \land <var:z2> = <nat:5> * <var:g> \} \\ <var:z2> := <var:z2> * <var:v> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:z1> = <nat:1> * <var:g> \land <var:z2> = <nat:5> * <var:g> ^ <nat:2> \} \\ <var:d> := <var:z2> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:z1> = <nat:1> * <var:g> \land <var:d> = <nat:5> * <var:g> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:z1> ; \\ \{ <var:v> = <var:g> \land <var:z0> = <nat:8> \land <var:d> = <nat:5> * <var:g> ^ <nat:2> + <nat:1> * <var:g> \} \\ <var:d> := <var:d> + <var:z0> \\ \{ <var:v> = <var:g> \land <var:d> = <nat:5> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:8> \} \end{eqnarray} Given the preceding argument , our code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:v> = <var:g> }} <var:z0> := <nat:8> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:v> ; <var:z2> := <nat:5> ; <var:z2> := <var:z2> * <var:v> ; <var:z2> := <var:z2> * <var:v> ; <var:d> := <var:z2> ; <var:d> := <var:d> + <var:z1> ; <var:d> := <var:d> + <var:z0> {{ <var:d> = <nat:5> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:1> * <var:g> /\ <var:z2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:1> * <var:g> /\ <var:z2> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:1> * <var:g> /\ <var:z2> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:1> * <var:g> /\ <var:d> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:8> /\ <var:d> = <nat:5> * <var:g> ^ <nat:2> + <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:d> = <nat:5> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 