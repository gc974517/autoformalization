\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:5> ; <var:X1> := <nat:5> ; <var:X1> := <var:X1> * <var:b> ; <var:Z> := <var:X1> ; <var:Z> := <var:Z> + <var:X0> \end{verbatim} Assume that we have $ <var:b> = <var:R> $ before running this list of commands it follows that $ <var:Z> = <nat:5> \cdot <var:R> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is evident using typical Hoare reasoning . Advancing , we have \verb | { <var:b> = <var:R> } <var:X0> := <nat:5> { <var:b> = <var:R> \land <var:X0> = <nat:5> } | , \verb | { <var:b> = <var:R> \land <var:X0> = <nat:5> } <var:X1> := <nat:5> { <var:b> = <var:R> \land <var:X0> = <nat:5> \land <var:X1> = <nat:5> } | , \verb | { <var:b> = <var:R> \land <var:X0> = <nat:5> \land <var:X1> = <nat:5> } <var:X1> := <var:X1> * <var:b> { <var:b> = <var:R> \land <var:X0> = <nat:5> \land <var:X1> = <nat:5> * <var:R> } | and \verb | { <var:b> = <var:R> \land <var:X0> = <nat:5> \land <var:X1> = <nat:5> * <var:R> } <var:Z> := <var:X1> { <var:b> = <var:R> \land <var:X0> = <nat:5> \land <var:Z> = <nat:5> * <var:R> } | . This is ensured with the binding rule in standard Hoare reasoning . Advancing to the following statement contained in the list of instructions , \verb | { <var:b> = <var:R> } <var:X0> := <nat:5> { <var:b> = <var:R> \land <var:X0> = <nat:5> } | . This is ensured with the inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:b> = <var:R> }} <var:X0> := <nat:5> ; <var:X1> := <nat:5> ; <var:X1> := <var:X1> * <var:b> ; <var:Z> := <var:X1> ; <var:Z> := <var:Z> + <var:X0> {{ <var:Z> = <nat:5> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:X0> = <nat:5> /\ <var:Z> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:R> /\ <var:Z> = <nat:5> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 