\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:3> ; <var:J> := <var:x0> \end{verbatim} Allowing that we have $ <var:a> = <var:T> $ --- for some positive integer coefficients $ <var:T> $ --- before the execution of this segment of code it must be that we have $ <var:J> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is evident through the following decorated list of instructions . \begin{eqnarray} \{ <var:a> = <var:T> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:a> = <var:T> \land <var:x0> = <nat:3> \} \\ <var:J> := <var:x0> \\ \{ <var:a> = <var:T> \land <var:J> = <nat:3> \} \end{eqnarray} Utilizing standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:a> = <var:T> }} <var:x0> := <nat:3> ; <var:J> := <var:x0> {{ <var:J> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:T> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:T> /\ <var:J> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 