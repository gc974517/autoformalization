\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:h> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:h> = <var:y> $ ahead of the execution of the code it must be that we have $ <var:z> = <nat:1> * <var:y> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code can be shown with standard Hoare reasoning . Advancing to the next step , the binding code assigning $ <nat:8> $ to $ <var:O0>$ . This redefines the condition $ \{ <var:h> = <var:y> \} $ to the postcondition $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \} $ . This is sound with the assignment law of standard Hoare reasoning . Focusing on the following line found in the series of instructions , we see the variable assignmet command giving $ <nat:1> $ to $ <var:O1>$ . This redefines $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \} $ into $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \land <var:O1> = <nat:1> \} $ . This is guaranteed with the assignment scheme from typical Hoare logic . Advancing to the upcoming step in the segment of code , the variable assignmet code \verb | <var:O1> := <var:O1> * <var:h> ; | . This forwards $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \land <var:O1> = <nat:1> \} $ toward the postcondition $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \land <var:O1> = <nat:1> \cdot <var:y> \} $ . This is shown using the assignment rule found in Hoare techniques . Next , the environment update code \verb | <var:z> := <var:O1> ; | . This moves the condition $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \land <var:O1> = <nat:1> \cdot <var:y> \} $ as $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \land <var:z> = <nat:1> \cdot <var:y> \} $ . This is rigorously given using the assignment rule defined by Hoare logic . Moving on to the next step , the environment update line letting $ <var:z> + <var:O0$ toward $ <var:z>$ . This line moves $ \{ <var:h> = <var:y> \land <var:O0> = <nat:8> \land <var:z> = <nat:1> \cdot <var:y> \} $ to the postcondition $ \{ <var:h> = <var:y> \land <var:z> = <nat:1> \cdot <var:y> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:8> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:h> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:h> = <var:y> }} <def:poly> {{ <var:z> = <nat:1> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:O0> = <nat:8> /\ <var:z> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:z> = <nat:1> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 