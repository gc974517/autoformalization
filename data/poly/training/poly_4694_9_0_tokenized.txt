\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:C> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:C> ; <var:v2> := <var:v2> * <var:C> ; <var:Q> := <var:v2> ; <var:Q> := <var:Q> + <var:v1> ; <var:Q> := <var:Q> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:C> = <var:N> $ ahead of the execution of our series of instructions , it holds that we have $ <var:Q> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:N> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \} \\ <var:v1> := <nat:1> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:v1> = <nat:1> \} \\ <var:v1> := <var:v1> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:v1> = <nat:1> \cdot <var:N> \} \\ <var:v2> := <nat:6> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:v1> = <nat:1> \cdot <var:N> \land <var:v2> = <nat:6> \} \\ <var:v2> := <var:v2> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:v1> = <nat:1> \cdot <var:N> \land <var:v2> = <nat:6> \cdot <var:N> \} \\ <var:v2> := <var:v2> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:v1> = <nat:1> \cdot <var:N> \land <var:v2> = <nat:6> \cdot <var:N> ^ <nat:2> \} \\ <var:Q> := <var:v2> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:v1> = <nat:1> \cdot <var:N> \land <var:Q> = <nat:6> \cdot <var:N> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:v1> ; \\ \{ <var:C> = <var:N> \land <var:v0> = <nat:4> \land <var:Q> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> \} \\ <var:Q> := <var:Q> + <var:v0> \\ \{ <var:C> = <var:N> \land <var:Q> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:C> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:C> ; <var:v2> := <var:v2> * <var:C> ; <var:Q> := <var:v2> ; <var:Q> := <var:Q> + <var:v1> ; <var:Q> := <var:Q> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:C> = <var:N> }} <def:poly> {{ <var:Q> = <nat:6> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:1> * <var:N> /\ <var:v2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:1> * <var:N> /\ <var:v2> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:1> * <var:N> /\ <var:v2> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:1> * <var:N> /\ <var:Q> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v0> = <nat:4> /\ <var:Q> = <nat:6> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Q> = <nat:6> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 