\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:R> ; <var:z2> := <var:z1> * <var:R> ; <var:z3> := <var:z2> * <var:R> ; <var:z0> := <nat:5> ; <var:z2> := <var:z2> * <nat:4> ; <var:z3> := <var:z3> * <nat:6> ; <var:S> := <var:z3> <var:S> := <var:S> + <var:z2> <var:S> := <var:S> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:R> = <var:k> $ ahead of interpreting our code segment it must be that we see $ <var:S> = <nat:6> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:5> $ when list of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be done using usual Hoare techniques . Following , the environment update line assigning $ <var:R> $ to $ <var:z1>$ . This line takes $ \{ <var:R> = <var:k> \} $ into the condition $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \} $ . Immediately after , the environment update command \verb | <var:z2> := <var:z1> * <var:R> ; | . This advances $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \} $ as the condition $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \} $ . Honing in on the subsequent line contained in our series of commands , the variable assignmet command yielding $ <var:z2> * <var:R> $ as $ <var:z3>$ . This command takes $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \} $ into $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \} $ . Shifting focus toward the next bit of code found in our code segment , the binding command \verb | <var:z0> := <nat:5> ; | . This moves $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \} $ to $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:5> \} $ . Looking at the next line of code seen in our code segment , we have the variable update line \verb | <var:z2> := <var:z2> * <nat:4> ; | . This statement transfers $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:5> \} $ toward $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <nat:4> * <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:5> \} $ . This is ensured with the assignment rule given by usual Hoare logic . Paying attention to the subsequent line of code in our series of commands , we have the environment update line yielding $ <var:z3> * <nat:6> $ toward $ <var:z3>$ . This redefines $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <nat:4> * <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:5> \} $ to $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <nat:4> * <var:k> ^ <nat:2> \land <var:z3> = <nat:6> * <var:k> ^ <nat:3> \land <var:z0> = <nat:5> \} $ . After , the binding statement \verb | <var:S> := <var:z3> | . This transfers the condition $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <nat:4> * <var:k> ^ <nat:2> \land <var:z3> = <nat:6> * <var:k> ^ <nat:3> \land <var:z0> = <nat:5> \} $ as $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <nat:4> * <var:k> ^ <nat:2> \land <var:z0> = <nat:5> \land <var:S> = <nat:6> * <var:k> ^ <nat:3> \} $ . Stepping through , we see the environment update command binding $ <var:S> + <var:z2$ into $ <var:S>$ . This forwards the condition $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <nat:4> * <var:k> ^ <nat:2> \land <var:z0> = <nat:5> \land <var:S> = <nat:6> * <var:k> ^ <nat:3> \} $ to $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z0> = <nat:5> \land <var:S> = <nat:6> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> \} $ . Next , we see the command binding $ <var:S> + <var:z0$ to $ <var:S>$ . This line forwards the condition $ \{ <var:R> = <var:k> \land <var:z1> = <var:k> \land <var:z0> = <nat:5> \land <var:S> = <nat:6> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> \} $ toward the condition $ \{ <var:R> = <var:k> \land <var:S> = <nat:6> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z1> := <var:R> ; <var:z2> := <var:z1> * <var:R> ; <var:z3> := <var:z2> * <var:R> ; <var:z0> := <nat:5> ; <var:z2> := <var:z2> * <nat:4> ; <var:z3> := <var:z3> * <nat:6> ; <var:S> := <var:z3> <var:S> := <var:S> + <var:z2> <var:S> := <var:S> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <def:poly> {{ <var:S> = <nat:6> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:z3> = <nat:6> * <var:k> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:z0> = <nat:5> /\ <var:S> = <nat:6> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:z1> = <var:k> /\ <var:z0> = <nat:5> /\ <var:S> = <nat:6> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:S> = <nat:6> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 