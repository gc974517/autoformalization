\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:i> ; <var:s> := <var:a1> ; <var:s> := <var:s> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Assume that $ <var:i> = <var:Y> $ before the execution of this list of instructions , it must be that we have $ <var:s> = <nat:5> \times <var:Y> + <nat:8> $ once set of commands is done . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:i> = <var:Y> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:i> = <var:Y> \land <var:a0> = <nat:8> \} \\ <var:a1> := <nat:5> ; \\ \{ <var:i> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \} \\ <var:a1> := <var:a1> * <var:i> ; \\ \{ <var:i> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \cdot <var:Y> \} \\ <var:s> := <var:a1> ; \\ \{ <var:i> = <var:Y> \land <var:a0> = <nat:8> \land <var:s> = <nat:5> \cdot <var:Y> \} \\ <var:s> := <var:s> + <var:a0> \\ \{ <var:i> = <var:Y> \land <var:s> = <nat:5> \cdot <var:Y> + <nat:8> \} \end{eqnarray} As a result , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:8> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:i> ; <var:s> := <var:a1> ; <var:s> := <var:s> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:i> = <var:Y> }} <def:poly> {{ <var:s> = <nat:5> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:s> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:s> = <nat:5> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 