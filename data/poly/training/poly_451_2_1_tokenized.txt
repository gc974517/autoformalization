\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:N> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:h> = <var:P> $ prior to executing the series of instructions then we see $ <var:N> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions can be given by typical Hoare techniques . Now , the variable update line \verb | <var:n0> := <nat:1> ; | . This command moves the condition $ \{ <var:h> = <var:P> \} $ toward $ \{ <var:h> = <var:P> \land <var:n0> = <nat:1> \} $ . This is rigorously given by the assignment rule in Hoare reasoning . Stepping forward , we have the variable assignmet line \verb | <var:N> := <var:n0> | . This takes $ \{ <var:h> = <var:P> \land <var:n0> = <nat:1> \} $ to $ \{ <var:h> = <var:P> \land <var:N> = <nat:1> \} $ . This is guaranteed by the assignment law defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:N> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:h> = <var:P> }} <def:poly> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:P> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 