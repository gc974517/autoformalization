\begin{document} \begin{theorem} Take the following series of commands as follows \begin{verbatim} <var:v0> := <nat:3> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:P> ; <var:O> := <var:v1> ; <var:O> := <var:O> + <var:v0> \end{verbatim} Given $ <var:P> = <var:j> $ before interpreting this code it holds that $ <var:O> = <nat:4> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} Observe the below decorated series of instructions . \begin{eqnarray} \{ <var:P> = <var:j> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:P> = <var:j> \land <var:v0> = <nat:3> \} \\ <var:v1> := <nat:4> ; \\ \{ <var:P> = <var:j> \land <var:v0> = <nat:3> \land <var:v1> = <nat:4> \} \\ <var:v1> := <var:v1> * <var:P> ; \\ \{ <var:P> = <var:j> \land <var:v0> = <nat:3> \land <var:v1> = <nat:4> * <var:j> \} \\ <var:O> := <var:v1> ; \\ \{ <var:P> = <var:j> \land <var:v0> = <nat:3> \land <var:O> = <nat:4> * <var:j> \} \\ <var:O> := <var:O> + <var:v0> \\ \{ <var:P> = <var:j> \land <var:O> = <nat:4> * <var:j> + <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:P> = <var:j> }} <var:v0> := <nat:3> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:P> ; <var:O> := <var:v1> ; <var:O> := <var:O> + <var:v0> {{ <var:O> = <nat:4> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:v0> = <nat:3> /\ <var:O> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:O> = <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 