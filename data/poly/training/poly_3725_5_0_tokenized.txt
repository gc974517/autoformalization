\begin{document} \begin{theorem} Consider the following series of commands : \begin{verbatim} <var:N0> := <nat:3> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:H> ; <var:F> := <var:N1> ; <var:F> := <var:F> + <var:N0> \end{verbatim} Allowing it to be that $ <var:H> = <var:I> $ ahead of evaluating the series of commands , then we see $ <var:F> = <nat:2> \cdot <var:I> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is clear by usual Hoare logic . Further , we see the assignment statement \verb | <var:N0> := <nat:3> ; | . This redefines $ \{ <var:H> = <var:I> \} $ toward the postcondition $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \} $ . Moving forward to the upcoming line in our series of instructions , the code \verb | <var:N1> := <nat:2> ; | . This statement redefines $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \} $ . Focusing on the following command in our code , the variable update command assigning $ <var:N1> * <var:H> $ toward $ <var:N1>$ . This code redefines $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \} $ into the condition $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \cdot <var:I> \} $ . This is sound through the assignment inference rule defined by Hoare logic . Considering the next statement contained in our list of instructions , we have the variable binding line \verb | <var:F> := <var:N1> ; | . This code takes the precondition $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \cdot <var:I> \} $ toward the condition $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \land <var:F> = <nat:2> \cdot <var:I> \} $ . Advancing , we have the assignment statement assigning $ <var:F> + <var:N0$ toward $ <var:F>$ . This code moves $ \{ <var:H> = <var:I> \land <var:N0> = <nat:3> \land <var:F> = <nat:2> \cdot <var:I> \} $ to the condition $ \{ <var:H> = <var:I> \land <var:F> = <nat:2> \cdot <var:I> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:H> = <var:I> }} <var:N0> := <nat:3> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:H> ; <var:F> := <var:N1> ; <var:F> := <var:F> + <var:N0> {{ <var:F> = <nat:2> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:N0> = <nat:3> /\ <var:F> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:F> = <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 