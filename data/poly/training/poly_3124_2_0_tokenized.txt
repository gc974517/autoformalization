\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:8> ; <var:p> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given for some whole numbers $ <var:h> $ $ <var:w> = <var:h> $ prior to running this program , it must be that $ <var:p> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:h> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:w> = <var:h> \land <var:s0> = <nat:8> \} \\ <var:p> := <var:s0> \\ \{ <var:w> = <var:h> \land <var:p> = <nat:8> \} \end{eqnarray} Applying usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:8> ; <var:p> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:w> = <var:h> }} <def:poly> {{ <var:p> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:p> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 