\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z2> := <nat:9> ; <var:Z2> := <var:Z2> * <var:Y> ; <var:Z2> := <var:Z2> * <var:Y> ; <var:Z3> := <nat:9> ; <var:Z3> := <var:Z3> * <var:Y> ; <var:Z3> := <var:Z3> * <var:Y> ; <var:Z3> := <var:Z3> * <var:Y> ; <var:R> := <var:Z3> ; <var:R> := <var:R> + <var:Z2> ; <var:R> := <var:R> + <var:Z0> \end{verbatim} Allow it to hold that $ <var:Y> = <var:B> $ before the execution of our set of instructions , then we have $ <var:R> = <nat:9> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> $ after series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:B> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \} \\ <var:Z2> := <nat:9> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \} \\ <var:Z2> := <var:Z2> * <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> \} \\ <var:Z2> := <var:Z2> * <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> ^ <nat:2> \} \\ <var:Z3> := <nat:9> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:Z3> = <nat:9> \} \\ <var:Z3> := <var:Z3> * <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:Z3> = <nat:9> \cdot <var:B> \} \\ <var:Z3> := <var:Z3> * <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:Z3> = <nat:9> \cdot <var:B> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:Z3> = <nat:9> \cdot <var:B> ^ <nat:3> \} \\ <var:R> := <var:Z3> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:Z2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:R> = <nat:9> \cdot <var:B> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:Z2> ; \\ \{ <var:Y> = <var:B> \land <var:Z0> = <nat:1> \land <var:R> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:Z0> \\ \{ <var:Y> = <var:B> \land <var:R> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Y> = <var:B> }} <var:Z0> := <nat:1> ; <var:Z2> := <nat:9> ; <var:Z2> := <var:Z2> * <var:Y> ; <var:Z2> := <var:Z2> * <var:Y> ; <var:Z3> := <nat:9> ; <var:Z3> := <var:Z3> * <var:Y> ; <var:Z3> := <var:Z3> * <var:Y> ; <var:Z3> := <var:Z3> * <var:Y> ; <var:R> := <var:Z3> ; <var:R> := <var:R> + <var:Z2> ; <var:R> := <var:R> + <var:Z0> {{ <var:R> = <nat:9> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:Z3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:Z3> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:Z3> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:Z3> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:Z2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:R> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:Z0> = <nat:1> /\ <var:R> = <nat:9> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:R> = <nat:9> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 