\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:4> ; <var:W> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for every $ <var:q> \in \mathbb{N} $ --- that $ <var:K> = <var:q> $ prior to executing our series of instructions it must be that we see $ <var:W> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:q> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:K> = <var:q> \land <var:U0> = <nat:4> \} \\ <var:W> := <var:U0> \\ \{ <var:K> = <var:q> \land <var:W> = <nat:4> \} \end{eqnarray} Using Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:W> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <def:poly> {{ <var:W> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:W> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 