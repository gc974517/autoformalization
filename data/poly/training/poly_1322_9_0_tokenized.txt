\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:u> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:u> ; <var:w2> := <var:w2> * <var:u> ; <var:s> := <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> \end{verbatim} Assume $ <var:u> = <var:J> $ before executing the program , it must be that we see $ <var:s> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is evident with Hoare techniques . After , \[ \begin{tabular} {rcl} \{ <var:u> = <var:J> \} & <var:w0> := <nat:1> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \} & <var:w1> := <nat:3> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \} & <var:w1> := <var:w1> * <var:u> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \} & <var:w2> := <nat:8> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:w2> = <nat:8> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:w2> = <nat:8> \} & <var:w2> := <var:w2> * <var:u> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:w2> = <nat:8> \cdot <var:J> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:w2> = <nat:8> \cdot <var:J> \} & <var:w2> := <var:w2> * <var:u> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:w2> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:w2> = <nat:8> \cdot <var:J> ^ <nat:2> \} & <var:s> := <var:w2> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:s> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:w1> = <nat:3> \cdot <var:J> \land <var:s> = <nat:8> \cdot <var:J> ^ <nat:2> \} & <var:s> := <var:s> + <var:w1> & \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:s> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> \} \\ \{ <var:u> = <var:J> \land <var:w0> = <nat:1> \land <var:s> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> \} & <var:s> := <var:s> + <var:w0& \{ <var:u> = <var:J> \land <var:s> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:1> \} \end{tabular} This is guaranteed using the environment update inference rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:u> = <var:J> }} <var:w0> := <nat:1> ; <var:w1> := <nat:3> ; <var:w1> := <var:w1> * <var:u> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:u> ; <var:w2> := <var:w2> * <var:u> ; <var:s> := <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> {{ <var:s> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:J> /\ <var:w2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:J> /\ <var:w2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:J> /\ <var:w2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:3> * <var:J> /\ <var:s> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:w0> = <nat:1> /\ <var:s> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:s> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 