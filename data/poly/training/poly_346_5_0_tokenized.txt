\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:5> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:F> ; <var:y> := <var:b1> ; <var:y> := <var:y> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:F> = <var:a> $ ahead of running our set of instructions , then $ <var:y> = <nat:6> * <var:a> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is clear using usual Hoare logic . Focusing on the upcoming lines of codefound in our code segment , we see \begin{verbatim} { <var:F> = <var:a> } <var:b0> := <nat:5> { <var:F> = <var:a> \land <var:b0> = <nat:5> } { <var:F> = <var:a> \land <var:b0> = <nat:5> } <var:b1> := <nat:6> { <var:F> = <var:a> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> } \end{verbatim} This is ensured with the environment update law obtained from standard Hoare techniques . Next , \begin{verbatim} { <var:F> = <var:a> } <var:b0> := <nat:5> { <var:F> = <var:a> \land <var:b0> = <nat:5> } { <var:F> = <var:a> \land <var:b0> = <nat:5> } <var:b1> := <nat:6> { <var:F> = <var:a> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> } { <var:F> = <var:a> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> } <var:b1> := <var:b1> * <var:F> { <var:F> = <var:a> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> \cdot <var:a> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:5> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:F> ; <var:y> := <var:b1> ; <var:y> := <var:y> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:F> = <var:a> }} <def:poly> {{ <var:y> = <nat:6> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:b0> = <nat:5> /\ <var:y> = <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:y> = <nat:6> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 