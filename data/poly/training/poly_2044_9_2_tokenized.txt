\begin{document} \begin{theorem} Let the following set of commands as \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:4> + <var:W> * <var:n> ; <var:W> := <nat:4> + <var:W> * <var:n> ; <var:W> := <nat:3> + <var:W> * <var:n> ; <var:W> := <var:W> * <var:n> ; <var:W> := <nat:1> + <var:W> * <var:n> ; <var:W> := <nat:1> + <var:W> * <var:n> ; <var:W> := <var:W> * <var:n> ; <var:W> := <nat:1> + <var:W> * <var:n> \end{verbatim} Given it to hold that $ <var:n> = <var:m> $ letting natural numbers $ <var:m> $ before the evaluation of this program then $ <var:W> = <nat:3> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> $ when series of instructions terminates . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:n> = <var:m> \} \\ <var:W> := <nat:3> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \} \\ <var:W> := <nat:4> + <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:4> \} \\ <var:W> := <nat:3> + <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:3> \} \\ <var:W> := <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + \} \\ <var:W> := <nat:1> + <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:1> \} \\ <var:W> := <nat:1> + <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> + <nat:1> \} \\ <var:W> := <var:W> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + \} \\ <var:W> := <nat:1> + <var:W> * <var:n> \\ \{ <var:n> = <var:m> \land <var:W> = <nat:3> \cdot <var:m> ^ <nat:8> + <nat:4> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \} \end{eqnarray} Given the preceding argument , the series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:n> = <var:m> }} <var:W> := <nat:3> ; <var:W> := <nat:4> + <var:W> * <var:n> ; <var:W> := <nat:4> + <var:W> * <var:n> ; <var:W> := <nat:3> + <var:W> * <var:n> ; <var:W> := <var:W> * <var:n> ; <var:W> := <nat:1> + <var:W> * <var:n> ; <var:W> := <nat:1> + <var:W> * <var:n> ; <var:W> := <var:W> * <var:n> ; <var:W> := <nat:1> + <var:W> * <var:n> {{ <var:W> = <nat:3> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:W> = <nat:3> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 