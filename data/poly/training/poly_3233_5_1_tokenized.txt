\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:m> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:9> ; <var:d> := <var:C1> <var:d> := <var:d> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Given that we have $ <var:m> = <var:A> $ ( with some positive coefficients $ <var:A> $ ) ahead of the evaluation of this set of instructions , it holds that we have $ <var:d> = <nat:9> \times <var:A> + <nat:9> $ once list of instructions executes . \end{theorem} \begin{proof} The flow of logic for our list of instructions can be shown with usual Hoare logic . Advancing on , we have the assignment statement \verb | <var:C1> := <var:m> ; | . This statement moves $ \{ <var:m> = <var:A> \} $ to the condition $ \{ <var:m> = <var:A> \land <var:C1> = <var:A> \} $ . Stepping forward , the binding code \verb | <var:C0> := <nat:9> ; | . This line redefines the precondition $ \{ <var:m> = <var:A> \land <var:C1> = <var:A> \} $ to the condition $ \{ <var:m> = <var:A> \land <var:C1> = <var:A> \land <var:C0> = <nat:9> \} $ . Going forward , we have the variable binding statement defining $ <var:C1> * <nat:9> $ to $ <var:C1>$ . This takes $ \{ <var:m> = <var:A> \land <var:C1> = <var:A> \land <var:C0> = <nat:9> \} $ toward the condition $ \{ <var:m> = <var:A> \land <var:C1> = <nat:9> * <var:A> \land <var:C0> = <nat:9> \} $ . After , we have the variable update statement \verb | <var:d> := <var:C1> | . This line moves $ \{ <var:m> = <var:A> \land <var:C1> = <nat:9> * <var:A> \land <var:C0> = <nat:9> \} $ into the postcondition $ \{ <var:m> = <var:A> \land <var:C0> = <nat:9> \land <var:d> = <nat:9> * <var:A> \} $ . Moving on to the next line in the series of instructions , we have the assignment line defining $ <var:d> + <var:C0$ as $ <var:d>$ . This command redefines the precondition $ \{ <var:m> = <var:A> \land <var:C0> = <nat:9> \land <var:d> = <nat:9> * <var:A> \} $ into the postcondition $ \{ <var:m> = <var:A> \land <var:d> = <nat:9> * <var:A> + <nat:9> \} $ . This is deduced by the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:m> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:9> ; <var:d> := <var:C1> <var:d> := <var:d> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:m> = <var:A> }} <def:poly> {{ <var:d> = <nat:9> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:C1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:C1> = <var:A> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:C1> = <nat:9> * <var:A> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:C0> = <nat:9> /\ <var:d> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:d> = <nat:9> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 