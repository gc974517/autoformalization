\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:u> ; <var:K> := <var:y1> ; <var:K> := <var:K> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Assume ( given some $ <var:E> \in \mathbb{Z}^+ $ ) $ <var:u> = <var:E> $ prior to running our series of commands , it must be that we have $ <var:K> = <nat:1> \times <var:E> + <nat:5> $ after series of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions can be shown using usual Hoare logic . Considering the following commands found in our series of instructions , we have \begin{verbatim} { <var:u> = <var:E> } <var:y0> := <nat:5> { <var:u> = <var:E> \land <var:y0> = <nat:5> } { <var:u> = <var:E> \land <var:y0> = <nat:5> } <var:y1> := <nat:1> { <var:u> = <var:E> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> } { <var:u> = <var:E> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> } <var:y1> := <var:y1> * <var:u> { <var:u> = <var:E> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> * <var:E> } \end{verbatim} Immediately following , we have \begin{verbatim} { <var:u> = <var:E> } <var:y0> := <nat:5> { <var:u> = <var:E> \land <var:y0> = <nat:5> } \end{verbatim} Looking at the proceeding step found in our code , \begin{verbatim} { <var:u> = <var:E> } <var:y0> := <nat:5> { <var:u> = <var:E> \land <var:y0> = <nat:5> } \end{verbatim} This is known to be sound with the variable update rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:u> ; <var:K> := <var:y1> ; <var:K> := <var:K> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:u> = <var:E> }} <def:poly> {{ <var:K> = <nat:1> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:y0> = <nat:5> /\ <var:K> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:K> = <nat:1> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 