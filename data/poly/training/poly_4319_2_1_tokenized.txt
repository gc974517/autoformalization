\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:J0> := <nat:4> ; <var:v> := <var:J0> \end{verbatim} Assuming it to hold that $ <var:u> = <var:X> $ ahead of executing the code , it holds that we see $ <var:v> = <nat:4> $ once code segment terminates . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:u> = <var:X> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:u> = <var:X> \land <var:J0> = <nat:4> \} \\ <var:v> := <var:J0> \\ \{ <var:u> = <var:X> \land <var:v> = <nat:4> \} \end{eqnarray} Thusly , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:u> = <var:X> }} <var:J0> := <nat:4> ; <var:v> := <var:J0> {{ <var:v> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:v> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 