\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:1> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:j> ; <var:p> := <var:i1> ; <var:p> := <var:p> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:j> = <var:h> $ ahead of executing the series of instructions , it follows that $ <var:p> = <nat:3> * <var:h> + <nat:1> $ once code segment is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:h> \} \\ <var:i0> := <nat:1> ; \\ \{ <var:j> = <var:h> \land <var:i0> = <nat:1> \} \\ <var:i1> := <nat:3> ; \\ \{ <var:j> = <var:h> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \} \\ <var:i1> := <var:i1> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \cdot <var:h> \} \\ <var:p> := <var:i1> ; \\ \{ <var:j> = <var:h> \land <var:i0> = <nat:1> \land <var:p> = <nat:3> \cdot <var:h> \} \\ <var:p> := <var:p> + <var:i0> \\ \{ <var:j> = <var:h> \land <var:p> = <nat:3> \cdot <var:h> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:1> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:j> ; <var:p> := <var:i1> ; <var:p> := <var:p> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:j> = <var:h> }} <def:poly> {{ <var:p> = <nat:3> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:i0> = <nat:1> /\ <var:p> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:p> = <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 