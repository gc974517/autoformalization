\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <var:h> * <var:n> ; <var:h> := <var:h> * <var:n> ; <var:h> := <nat:2> + <var:h> * <var:n> ; <var:h> := <nat:2> + <var:h> * <var:n> ; <var:h> := <nat:3> + <var:h> * <var:n> ; <var:h> := <nat:4> + <var:h> * <var:n> ; <var:h> := <nat:1> + <var:h> * <var:n> ; <var:h> := <nat:1> + <var:h> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Allow for all $ <var:Z> \in \mathbb{N} $ that we have $ <var:n> = <var:Z> $ before evaluating the segment of code , it holds that we see $ <var:h> = <nat:3> \times <var:Z> ^ <nat:8> + <nat:2> \times <var:Z> ^ <nat:5> + <nat:2> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program is done using Hoare reasoning . Next , \begin{verbatim} { <var:n> = <var:Z> } <var:h> := <nat:3> { <var:n> = <var:Z> \land <var:h> = <nat:3> } { <var:n> = <var:Z> \land <var:h> = <nat:3> } <var:h> := <var:h> * <var:n> { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> + } \end{verbatim} This is ensured through the variable update rule defined by typical Hoare logic . Immediately following , \begin{verbatim} { <var:n> = <var:Z> } <var:h> := <nat:3> { <var:n> = <var:Z> \land <var:h> = <nat:3> } { <var:n> = <var:Z> \land <var:h> = <nat:3> } <var:h> := <var:h> * <var:n> { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> + } \end{verbatim} Taking a look at the upcoming bits of codefound in our code , we see \begin{verbatim} { <var:n> = <var:Z> } <var:h> := <nat:3> { <var:n> = <var:Z> \land <var:h> = <nat:3> } { <var:n> = <var:Z> \land <var:h> = <nat:3> } <var:h> := <var:h> * <var:n> { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> + } { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> + } <var:h> := <var:h> * <var:n> { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> ^ <nat:2> + } { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> ^ <nat:2> + } <var:h> := <nat:2> + <var:h> * <var:n> { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:2> } { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:2> } <var:h> := <nat:2> + <var:h> * <var:n> { <var:n> = <var:Z> \land <var:h> = <nat:3> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <var:h> * <var:n> ; <var:h> := <var:h> * <var:n> ; <var:h> := <nat:2> + <var:h> * <var:n> ; <var:h> := <nat:2> + <var:h> * <var:n> ; <var:h> := <nat:3> + <var:h> * <var:n> ; <var:h> := <nat:4> + <var:h> * <var:n> ; <var:h> := <nat:1> + <var:h> * <var:n> ; <var:h> := <nat:1> + <var:h> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <def:poly> {{ <var:h> = <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:h> = <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 