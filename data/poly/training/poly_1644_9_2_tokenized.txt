\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A> := <nat:2> ; <var:A> := <nat:2> + <var:A> * <var:a> ; <var:A> := <nat:3> + <var:A> * <var:a> ; <var:A> := <var:A> * <var:a> ; <var:A> := <nat:3> + <var:A> * <var:a> ; <var:A> := <nat:1> + <var:A> * <var:a> ; <var:A> := <var:A> * <var:a> ; <var:A> := <nat:1> + <var:A> * <var:a> ; <var:A> := <nat:4> + <var:A> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allow $ <var:a> = <var:P> $ , for all positive integers $ <var:P> $ , prior to running our series of instructions , it follows that we see $ <var:A> = <nat:2> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:4> $ once set of commands is done executing . \end{theorem} \begin{proof} The flow of logic for our code is given through this decorated series of instructions . \begin{eqnarray} \{ <var:a> = <var:P> \} \\ <var:A> := <nat:2> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \} \\ <var:A> := <nat:2> + <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> + <nat:2> \} \\ <var:A> := <nat:3> + <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:3> \} \\ <var:A> := <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> + \} \\ <var:A> := <nat:3> + <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:3> \} \\ <var:A> := <nat:1> + <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:5> + <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> + <nat:1> \} \\ <var:A> := <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:6> + <nat:2> \cdot <var:P> ^ <nat:5> + <nat:3> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + \} \\ <var:A> := <nat:1> + <var:A> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:7> + <nat:2> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:5> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \} \\ <var:A> := <nat:4> + <var:A> * <var:a> \\ \{ <var:a> = <var:P> \land <var:A> = <nat:2> \cdot <var:P> ^ <nat:8> + <nat:2> \cdot <var:P> ^ <nat:7> + <nat:3> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> + <nat:4> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:2> ; <var:A> := <nat:2> + <var:A> * <var:a> ; <var:A> := <nat:3> + <var:A> * <var:a> ; <var:A> := <var:A> * <var:a> ; <var:A> := <nat:3> + <var:A> * <var:a> ; <var:A> := <nat:1> + <var:A> * <var:a> ; <var:A> := <var:A> * <var:a> ; <var:A> := <nat:1> + <var:A> * <var:a> ; <var:A> := <nat:4> + <var:A> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:a> = <var:P> }} <def:poly> {{ <var:A> = <nat:2> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:A> = <nat:2> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 