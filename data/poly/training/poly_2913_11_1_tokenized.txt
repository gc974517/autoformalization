\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:O> ; <var:k2> := <var:k1> * <var:O> ; <var:k3> := <var:k2> * <var:O> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:8> ; <var:v> := <var:k3> <var:v> := <var:v> + <var:k2> <var:v> := <var:v> + <var:k1> <var:v> := <var:v> + <var:k0> \end{verbatim} Assuming $ <var:O> = <var:X> $ prior to interpreting the list of commands , it must be that we see $ <var:v> = <nat:8> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:8> $ once code segment has finished . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:O> = <var:X> \} \\ <var:k1> := <var:O> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <var:X> \} \\ <var:k2> := <var:k1> * <var:O> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <var:X> \land <var:k2> = <var:X> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:O> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <var:X> \land <var:k2> = <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \} \\ <var:k0> := <nat:8> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <var:X> \land <var:k2> = <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \land <var:k0> = <nat:8> \} \\ <var:k1> := <var:k1> * <nat:3> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <nat:3> \times <var:X> \land <var:k2> = <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \land <var:k0> = <nat:8> \} \\ <var:k2> := <var:k2> * <nat:7> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <nat:3> \times <var:X> \land <var:k2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \land <var:k0> = <nat:8> \} \\ <var:k3> := <var:k3> * <nat:8> ; \\ \{ <var:O> = <var:X> \land <var:k1> = <nat:3> \times <var:X> \land <var:k2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:X> ^ <nat:3> \land <var:k0> = <nat:8> \} \end{eqnarray} Continuing interpreting this code returns : \begin{eqnarray} <var:v> := <var:k3> \\ \{ <var:O> = <var:X> \land <var:k1> = <nat:3> \times <var:X> \land <var:k2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:k0> = <nat:8> \land <var:v> = <nat:8> \times <var:X> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:k2> \\ \{ <var:O> = <var:X> \land <var:k1> = <nat:3> \times <var:X> \land <var:k0> = <nat:8> \land <var:v> = <nat:8> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:k1> \\ \{ <var:O> = <var:X> \land <var:k0> = <nat:8> \land <var:v> = <nat:8> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> \} \\ <var:v> := <var:v> + <var:k0> \\ \{ <var:O> = <var:X> \land <var:v> = <nat:8> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:8> \} \end{eqnarray} Thus , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:O> = <var:X> }} <var:k1> := <var:O> ; <var:k2> := <var:k1> * <var:O> ; <var:k3> := <var:k2> * <var:O> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:8> ; <var:v> := <var:k3> <var:v> := <var:v> + <var:k2> <var:v> := <var:v> + <var:k1> <var:v> := <var:v> + <var:k0> {{ <var:v> = <nat:8> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <var:X> /\ <var:k2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <var:X> /\ <var:k2> = <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <var:X> /\ <var:k2> = <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <nat:3> * <var:X> /\ <var:k2> = <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <nat:3> * <var:X> /\ <var:k2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <nat:3> * <var:X> /\ <var:k2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:X> ^ <nat:3> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <nat:3> * <var:X> /\ <var:k2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:k0> = <nat:8> /\ <var:v> = <nat:8> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k1> = <nat:3> * <var:X> /\ <var:k0> = <nat:8> /\ <var:v> = <nat:8> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k0> = <nat:8> /\ <var:v> = <nat:8> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:v> = <nat:8> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 