\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:7> ; <var:O> := <var:U0> \end{verbatim} Assuming $ <var:E> = <var:A> $ , given any $ <var:A> \in \mathbb{Z}^+ $ , before running this set of commands it holds that $ <var:O> = <nat:7> $ once series of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:A> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:E> = <var:A> \land <var:U0> = <nat:7> \} \\ <var:O> := <var:U0> \\ \{ <var:E> = <var:A> \land <var:O> = <nat:7> \} \end{eqnarray} Using typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:E> = <var:A> }} <var:U0> := <nat:7> ; <var:O> := <var:U0> {{ <var:O> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:O> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 