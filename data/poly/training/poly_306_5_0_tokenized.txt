\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:1> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:x> ; <var:Q> := <var:b1> ; <var:Q> := <var:Q> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assuming that we have $ <var:x> = <var:n> $ , for $ <var:n> $ , before the evaluation of our list of instructions it must be that we see $ <var:Q> = <nat:3> \cdot <var:n> + <nat:1> $ once list of commands has finished . \end{theorem} \begin{proof} Utilizing standard Hoare logic produces : \begin{eqnarray} \{ <var:x> = <var:n> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:x> = <var:n> \land <var:b0> = <nat:1> \} \\ <var:b1> := <nat:3> ; \\ \{ <var:x> = <var:n> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \} \\ <var:b1> := <var:b1> * <var:x> ; \\ \{ <var:x> = <var:n> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> * <var:n> \} \\ <var:Q> := <var:b1> ; \\ \{ <var:x> = <var:n> \land <var:b0> = <nat:1> \land <var:Q> = <nat:3> * <var:n> \} \\ <var:Q> := <var:Q> + <var:b0> \\ \{ <var:x> = <var:n> \land <var:Q> = <nat:3> * <var:n> + <nat:1> \} \end{eqnarray} As a consequence , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:x> ; <var:Q> := <var:b1> ; <var:Q> := <var:Q> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:x> = <var:n> }} <def:poly> {{ <var:Q> = <nat:3> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:b0> = <nat:1> /\ <var:Q> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:Q> = <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 