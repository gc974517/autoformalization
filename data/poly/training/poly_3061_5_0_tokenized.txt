\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:u> ; <var:J> := <var:D1> ; <var:J> := <var:J> + <var:D0> \end{verbatim} Allowing that we have $ <var:u> = <var:E> $ --- given any natural coefficients $ <var:E> $ --- before the evaluation of the list of instructions it must be that $ <var:J> = <nat:1> \times <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions is accomplished through Hoare reasoning . Shifting focus toward the upcoming statements in the code segment , we see \begin{eqnarray} \{ <var:u> = <var:E> \} \, <var:D0> := <nat:3> \, \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \} \\ \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \} \, <var:D1> := <nat:1> \, \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \land <var:D1> = <nat:1> \} \\ \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \land <var:D1> = <nat:1> \} \, <var:D1> := <var:D1> * <var:u> \, \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \land <var:D1> = <nat:1> \times <var:E> \} \\ \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \land <var:D1> = <nat:1> \times <var:E> \} \, <var:J> := <var:D1> \, \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \land <var:J> = <nat:1> \times <var:E> \} \\ \{ <var:u> = <var:E> \land <var:D0> = <nat:3> \land <var:J> = <nat:1> \times <var:E> \} \, <var:J> := <var:J> + <var:D0\, \{ <var:u> = <var:E> \land <var:J> = <nat:1> \times <var:E> + <nat:3> \} \end{eqnarray} This is shown with the assignment rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:u> = <var:E> }} <var:D0> := <nat:3> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:u> ; <var:J> := <var:D1> ; <var:J> := <var:J> + <var:D0> {{ <var:J> = <nat:1> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:D0> = <nat:3> /\ <var:J> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:J> = <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 