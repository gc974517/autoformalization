\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:J0> := <nat:8> ; <var:O> := <var:J0> \end{verbatim} Assuming that $ <var:C> = <var:m> $ ahead of evaluating this list of commands it holds that we see $ <var:O> = <nat:8> $ when set of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this program is evident by standard Hoare logic . Moving forward to the next step , we have the variable binding code letting $ <nat:8> $ into $ <var:J0>$ . This forwards the condition $ \{ <var:C> = <var:m> \} $ to $ \{ <var:C> = <var:m> \land <var:J0> = <nat:8> \} $ . Paying attention to the following command in our program , we have the binding command \verb | <var:O> := <var:J0> | . This command takes the condition $ \{ <var:C> = <var:m> \land <var:J0> = <nat:8> \} $ toward the postcondition $ \{ <var:C> = <var:m> \land <var:O> = <nat:8> \} $ . This is deduced with the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:C> = <var:m> }} <var:J0> := <nat:8> ; <var:O> := <var:J0> {{ <var:O> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:O> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 