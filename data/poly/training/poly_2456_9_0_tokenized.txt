\begin{document} \begin{theorem} We define the following set of commands as \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:9> ; <var:c1> := <var:c1> * <var:u> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:u> ; <var:c2> := <var:c2> * <var:u> ; <var:L> := <var:c2> ; <var:L> := <var:L> + <var:c1> ; <var:L> := <var:L> + <var:c0> \end{verbatim} Allow given any $ <var:s> \in \mathbb{Z}^+ $ that we have $ <var:u> = <var:s> $ before running this set of commands , it holds that we have $ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be shown by Hoare logic . Paying attention to the upcoming line contained in the set of commands , we see the variable update command \verb | <var:c0> := <nat:2> ; | . This statement takes the condition $ \{ <var:u> = <var:s> \} $ into the postcondition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \} $ . This is deduced by the assignment inference rule obtained from usual Hoare techniques . Going to the next step , the environment update code \verb | <var:c1> := <nat:9> ; | . This line redefines $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \} $ as the condition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \} $ . This is sound through the assignment law given in Hoare techniques . Further , the variable binding code \verb | <var:c1> := <var:c1> * <var:u> ; | . This transfers the condition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \} $ as $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \} $ . This is deduced using the assignment scheme from standard Hoare logic . Stepping forward , we have the variable binding command assigning $ <nat:1> $ toward $ <var:c2>$ . This advances the precondition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \} $ as the postcondition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:c2> = <nat:1> \} $ . Advancing to the proceeding command seen in the code , the binding statement \verb | <var:c2> := <var:c2> * <var:u> ; | . This takes the precondition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:c2> = <nat:1> \} $ as the condition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:c2> = <nat:1> \times <var:s> \} $ . This is rigorously given using the assignment law found in typical Hoare reasoning . Moving on to the following command found in our series of instructions , we see the variable binding command \verb | <var:c2> := <var:c2> * <var:u> ; | . This command moves the precondition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:c2> = <nat:1> \times <var:s> \} $ into $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:c2> = <nat:1> \times <var:s> ^ <nat:2> \} $ . Jumping to the subsequent line of code found in the series of instructions , we have the variable update command binding $ <var:c2> $ as $ <var:L>$ . This moves the condition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:c2> = <nat:1> \times <var:s> ^ <nat:2> \} $ as the condition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> \} $ . Following , the environment update command defining $ <var:L> + <var:c1> $ toward $ <var:L>$ . This command moves the precondition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:c1> = <nat:9> \times <var:s> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> \} $ into the condition $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> \} $ . This is sound by the assignment inference rule given by usual Hoare logic . Shifting focus toward the subsequent line in our set of commands , the variable update code assigning $ <var:L> + <var:c0$ toward $ <var:L>$ . This command takes $ \{ <var:u> = <var:s> \land <var:c0> = <nat:2> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> \} $ toward the condition $ \{ <var:u> = <var:s> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:u> = <var:s> }} <var:c0> := <nat:2> ; <var:c1> := <nat:9> ; <var:c1> := <var:c1> * <var:u> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:u> ; <var:c2> := <var:c2> * <var:u> ; <var:L> := <var:c2> ; <var:L> := <var:L> + <var:c1> ; <var:L> := <var:L> + <var:c0> {{ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:9> * <var:s> /\ <var:c2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:9> * <var:s> /\ <var:c2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:9> * <var:s> /\ <var:c2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:9> * <var:s> /\ <var:L> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:c0> = <nat:2> /\ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 