\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:1> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:1> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:1> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:3> + <var:U> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:d> = <var:v> $ ahead of running this set of instructions it follows that we have $ <var:U> = <nat:1> \times <var:v> ^ <nat:8> + <nat:1> \times <var:v> ^ <nat:7> + <nat:2> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:3> $ when set of commands exits . \end{theorem} \begin{proof} Notice the below decorated code segment . \begin{eqnarray} \{ <var:d> = <var:v> \} \\ <var:U> := <nat:1> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \} \\ <var:U> := <nat:1> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> + <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} \\ <var:U> := <nat:2> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:2> \} \end{eqnarray} Advancing the evaluation of this set of instructions yields : \begin{eqnarray} <var:U> := <nat:1> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} \\ <var:U> := <nat:1> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:6> + <nat:1> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:d> ; \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:7> + <nat:1> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:d> \\ \{ <var:d> = <var:v> \land <var:U> = <nat:1> \times <var:v> ^ <nat:8> + <nat:1> \times <var:v> ^ <nat:7> + <nat:2> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:1> ; <var:U> := <nat:1> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:1> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:1> + <var:U> * <var:d> ; <var:U> := <nat:2> + <var:U> * <var:d> ; <var:U> := <nat:3> + <var:U> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:d> = <var:v> }} <def:poly> {{ <var:U> = <nat:1> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:U> = <nat:1> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 