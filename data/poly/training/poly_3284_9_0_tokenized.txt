\begin{document} \begin{theorem} Consider a code segment such that \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:6> ; <var:m1> := <var:m1> * <var:q> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:q> ; <var:m2> := <var:m2> * <var:q> ; <var:g> := <var:m2> ; <var:g> := <var:g> + <var:m1> ; <var:g> := <var:g> + <var:m0> \end{verbatim} Given $ <var:q> = <var:K> $ , for all integers $ <var:K> $ , before evaluating the set of instructions , it holds that we see $ <var:g> = <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:4> $ after set of commands has finished . \end{theorem} \begin{proof} Let the below decorated list of commands . \begin{eqnarray} \{ <var:q> = <var:K> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \} \\ <var:m1> := <nat:6> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:m1> = <nat:6> \} \\ <var:m1> := <var:m1> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:m1> = <nat:6> * <var:K> \} \\ <var:m2> := <nat:4> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:m1> = <nat:6> * <var:K> \land <var:m2> = <nat:4> \} \\ <var:m2> := <var:m2> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:m1> = <nat:6> * <var:K> \land <var:m2> = <nat:4> * <var:K> \} \\ <var:m2> := <var:m2> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:m1> = <nat:6> * <var:K> \land <var:m2> = <nat:4> * <var:K> ^ <nat:2> \} \\ <var:g> := <var:m2> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:m1> = <nat:6> * <var:K> \land <var:g> = <nat:4> * <var:K> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:m1> ; \\ \{ <var:q> = <var:K> \land <var:m0> = <nat:4> \land <var:g> = <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> \} \\ <var:g> := <var:g> + <var:m0> \\ \{ <var:q> = <var:K> \land <var:g> = <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:4> \} \end{eqnarray} The application of standard Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:q> = <var:K> }} <var:m0> := <nat:4> ; <var:m1> := <nat:6> ; <var:m1> := <var:m1> * <var:q> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:q> ; <var:m2> := <var:m2> * <var:q> ; <var:g> := <var:m2> ; <var:g> := <var:g> + <var:m1> ; <var:g> := <var:g> + <var:m0> {{ <var:g> = <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:6> * <var:K> /\ <var:m2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:6> * <var:K> /\ <var:m2> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:6> * <var:K> /\ <var:m2> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:6> * <var:K> /\ <var:g> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:m0> = <nat:4> /\ <var:g> = <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:g> = <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 