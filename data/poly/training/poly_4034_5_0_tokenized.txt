\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:9> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:v> ; <var:L> := <var:i1> ; <var:L> := <var:L> + <var:i0> \end{verbatim} Allow --- assuming some natural numbers $ <var:w> $ --- that we have $ <var:v> = <var:w> $ prior to executing our list of instructions then we see $ <var:L> = <nat:8> * <var:w> + <nat:9> $ after list of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is shown through usual Hoare reasoning . Moving on to the next step , we see the line giving $ <nat:9> $ toward $ <var:i0>$ . This statement takes $ \{ <var:v> = <var:w> \} $ into the postcondition $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \} $ . Taking a look at the following line in the code , we see the statement \verb | <var:i1> := <nat:8> ; | . This statement takes $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \} $ toward the condition $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:8> \} $ . Following , we have the statement \verb | <var:i1> := <var:i1> * <var:v> ; | . This statement advances $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:8> \} $ into $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:8> * <var:w> \} $ . Paying attention to the upcoming command in the series of instructions , we see the statement letting $ <var:i1> $ toward $ <var:L>$ . This statement transfers the condition $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:8> * <var:w> \} $ to $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \land <var:L> = <nat:8> * <var:w> \} $ . This is ensured by the assignment scheme defined by standard Hoare techniques . Taking another step toward the upcoming line in our code , we have the variable update statement letting $ <var:L> + <var:i0$ to $ <var:L>$ . This command transfers $ \{ <var:v> = <var:w> \land <var:i0> = <nat:9> \land <var:L> = <nat:8> * <var:w> \} $ as the postcondition $ \{ <var:v> = <var:w> \land <var:L> = <nat:8> * <var:w> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:v> = <var:w> }} <var:i0> := <nat:9> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:v> ; <var:L> := <var:i1> ; <var:L> := <var:L> + <var:i0> {{ <var:L> = <nat:8> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:i0> = <nat:9> /\ <var:L> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:L> = <nat:8> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 