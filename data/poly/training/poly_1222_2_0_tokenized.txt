\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:o0> := <nat:1> ; <var:p> := <var:o0> \end{verbatim} Allow given $ <var:O> $ it to be that $ <var:I> = <var:O> $ before executing our code segment it must be that we have $ <var:p> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is clear by standard Hoare logic . Taking a look at the next commands found in the list of commands , we have \begin{eqnarray} \{ <var:I> = <var:O> \} \, <var:o0> := <nat:1> \, \{ <var:I> = <var:O> \land <var:o0> = <nat:1> \} \\ \{ <var:I> = <var:O> \land <var:o0> = <nat:1> \} \, <var:p> := <var:o0\, \{ <var:I> = <var:O> \land <var:p> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:I> = <var:O> }} <var:o0> := <nat:1> ; <var:p> := <var:o0> {{ <var:p> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:O> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:O> /\ <var:p> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 