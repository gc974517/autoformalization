\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:9> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:n> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:n> ; <var:b2> := <var:b2> * <var:n> ; <var:z> := <var:b2> ; <var:z> := <var:z> + <var:b1> ; <var:z> := <var:z> + <var:b0> \end{verbatim} Given it to be that $ <var:n> = <var:j> $ before running the code segment then we have $ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:9> $ when segment of code has exited . \end{theorem} \begin{proof} The course of logic for our program can be done with this decorated series of commands . \begin{eqnarray} \{ <var:n> = <var:j> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \} \\ <var:b1> := <nat:3> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:b1> = <nat:3> \} \\ <var:b1> := <var:b1> * <var:n> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:b1> = <nat:3> \cdot <var:j> \} \\ <var:b2> := <nat:2> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:b1> = <nat:3> \cdot <var:j> \land <var:b2> = <nat:2> \} \\ <var:b2> := <var:b2> * <var:n> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:b1> = <nat:3> \cdot <var:j> \land <var:b2> = <nat:2> \cdot <var:j> \} \\ <var:b2> := <var:b2> * <var:n> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:b1> = <nat:3> \cdot <var:j> \land <var:b2> = <nat:2> \cdot <var:j> ^ <nat:2> \} \\ <var:z> := <var:b2> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:b1> = <nat:3> \cdot <var:j> \land <var:z> = <nat:2> \cdot <var:j> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:b1> ; \\ \{ <var:n> = <var:j> \land <var:b0> = <nat:9> \land <var:z> = <nat:2> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> \} \\ <var:z> := <var:z> + <var:b0> \\ \{ <var:n> = <var:j> \land <var:z> = <nat:2> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:9> \} \end{eqnarray} Applying standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <var:b0> := <nat:9> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:n> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:n> ; <var:b2> := <var:b2> * <var:n> ; <var:z> := <var:b2> ; <var:z> := <var:z> + <var:b1> ; <var:z> := <var:z> + <var:b0> {{ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:3> * <var:j> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:3> * <var:j> /\ <var:b2> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:3> * <var:j> /\ <var:b2> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:3> * <var:j> /\ <var:z> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:b0> = <nat:9> /\ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:z> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 