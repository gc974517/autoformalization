\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:7> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:T> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:T> ; <var:W2> := <var:W2> * <var:T> ; <var:K> := <var:W2> ; <var:K> := <var:K> + <var:W1> ; <var:K> := <var:K> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Allow $ <var:T> = <var:B> $ ahead of interpreting this set of instructions then we see $ <var:K> = <nat:6> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> $ when series of commands has terminated . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:T> = <var:B> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \} \\ <var:W1> := <nat:8> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:W1> = <nat:8> \} \\ <var:W1> := <var:W1> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:W1> = <nat:8> * <var:B> \} \\ <var:W2> := <nat:6> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:W1> = <nat:8> * <var:B> \land <var:W2> = <nat:6> \} \\ <var:W2> := <var:W2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:W1> = <nat:8> * <var:B> \land <var:W2> = <nat:6> * <var:B> \} \\ <var:W2> := <var:W2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:W1> = <nat:8> * <var:B> \land <var:W2> = <nat:6> * <var:B> ^ <nat:2> \} \\ <var:K> := <var:W2> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:W1> = <nat:8> * <var:B> \land <var:K> = <nat:6> * <var:B> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:W1> ; \\ \{ <var:T> = <var:B> \land <var:W0> = <nat:7> \land <var:K> = <nat:6> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} \\ <var:K> := <var:K> + <var:W0> \\ \{ <var:T> = <var:B> \land <var:K> = <nat:6> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> \} \end{eqnarray} Thus , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:7> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:T> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:T> ; <var:W2> := <var:W2> * <var:T> ; <var:K> := <var:W2> ; <var:K> := <var:K> + <var:W1> ; <var:K> := <var:K> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <def:poly> {{ <var:K> = <nat:6> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:8> * <var:B> /\ <var:W2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:8> * <var:B> /\ <var:W2> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:8> * <var:B> /\ <var:W2> = <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:8> * <var:B> /\ <var:K> = <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:W0> = <nat:7> /\ <var:K> = <nat:6> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:K> = <nat:6> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 