\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:N1> := <var:o> ; <var:N2> := <var:N1> * <var:o> ; <var:N3> := <var:N2> * <var:o> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:4> ; <var:N3> := <var:N3> * <nat:4> ; <var:E> := <var:N3> <var:E> := <var:E> + <var:N1> <var:E> := <var:E> + <var:N0> \end{verbatim} Given ( for natural numbers $ <var:b> $ ) it to be that $ <var:o> = <var:b> $ before the execution of this program it must be that we see $ <var:E> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for our segment of code can be shown by Hoare reasoning . Considering the next command contained in our segment of code , we see the assignment command \verb | <var:N1> := <var:o> ; | . This code moves the precondition $ \{ <var:o> = <var:b> \} $ toward the condition $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \} $ . Shifting focus toward the next step contained in the list of instructions , we have the statement binding $ <var:N1> * <var:o> $ as $ <var:N2>$ . This transfers the condition $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \} $ into the condition $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \land <var:N2> = <var:b> ^ <nat:2> \} $ . Following , we see the assignment command \verb | <var:N3> := <var:N2> * <var:o> ; | . This forwards $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \land <var:N2> = <var:b> ^ <nat:2> \} $ toward the condition $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <var:b> ^ <nat:3> \} $ . Advancing , we see the binding line defining $ <nat:8> $ toward $ <var:N0>$ . This forwards $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <var:b> ^ <nat:3> \} $ as the condition $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <var:b> ^ <nat:3> \land <var:N0> = <nat:8> \} $ . This is deduced with the assignment scheme defined in Hoare logic . Going to the next step , the line \verb | <var:N1> := <var:N1> * <nat:4> ; | . This moves the condition $ \{ <var:o> = <var:b> \land <var:N1> = <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <var:b> ^ <nat:3> \land <var:N0> = <nat:8> \} $ toward the condition $ \{ <var:o> = <var:b> \land <var:N1> = <nat:4> \times <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <var:b> ^ <nat:3> \land <var:N0> = <nat:8> \} $ . This is guaranteed with the assignment scheme defined in standard Hoare logic . Moving forward to the upcoming command seen in the program , the environment update statement giving $ <var:N3> * <nat:4> $ toward $ <var:N3>$ . This line redefines the condition $ \{ <var:o> = <var:b> \land <var:N1> = <nat:4> \times <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <var:b> ^ <nat:3> \land <var:N0> = <nat:8> \} $ into $ \{ <var:o> = <var:b> \land <var:N1> = <nat:4> \times <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <nat:4> \times <var:b> ^ <nat:3> \land <var:N0> = <nat:8> \} $ . Honing in on the upcoming line in the code , the binding code \verb | <var:E> := <var:N3> | . This advances the precondition $ \{ <var:o> = <var:b> \land <var:N1> = <nat:4> \times <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N3> = <nat:4> \times <var:b> ^ <nat:3> \land <var:N0> = <nat:8> \} $ into $ \{ <var:o> = <var:b> \land <var:N1> = <nat:4> \times <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N0> = <nat:8> \land <var:E> = <nat:4> \times <var:b> ^ <nat:3> \} $ . This is rigorously given through the assignment inference rule found in standard Hoare reasoning . Shifting focus toward the subsequent line contained in our series of instructions , we see the variable binding command binding $ <var:E> + <var:N1$ toward $ <var:E>$ . This code redefines the precondition $ \{ <var:o> = <var:b> \land <var:N1> = <nat:4> \times <var:b> \land <var:N2> = <var:b> ^ <nat:2> \land <var:N0> = <nat:8> \land <var:E> = <nat:4> \times <var:b> ^ <nat:3> \} $ into the condition $ \{ <var:o> = <var:b> \land <var:N0> = <nat:8> \land <var:E> = <nat:4> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> \} $ . Moving forward to the proceeding line found in our list of instructions , the statement letting $ <var:E> + <var:N0$ into $ <var:E>$ . This forwards $ \{ <var:o> = <var:b> \land <var:N0> = <nat:8> \land <var:E> = <nat:4> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> \} $ into $ \{ <var:o> = <var:b> \land <var:E> = <nat:4> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> + <nat:8> \} $ . This is rigorously given using the assignment scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:o> = <var:b> }} <var:N1> := <var:o> ; <var:N2> := <var:N1> * <var:o> ; <var:N3> := <var:N2> * <var:o> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:4> ; <var:N3> := <var:N3> * <nat:4> ; <var:E> := <var:N3> <var:E> := <var:E> + <var:N1> <var:E> := <var:E> + <var:N0> {{ <var:E> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <var:b> /\ <var:N2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <var:b> /\ <var:N2> = <var:b> ^ <nat:2> /\ <var:N3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <var:b> /\ <var:N2> = <var:b> ^ <nat:2> /\ <var:N3> = <var:b> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <nat:4> * <var:b> /\ <var:N2> = <var:b> ^ <nat:2> /\ <var:N3> = <var:b> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <nat:4> * <var:b> /\ <var:N2> = <var:b> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N1> = <nat:4> * <var:b> /\ <var:N2> = <var:b> ^ <nat:2> /\ <var:N0> = <nat:8> /\ <var:E> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:N0> = <nat:8> /\ <var:E> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:E> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 