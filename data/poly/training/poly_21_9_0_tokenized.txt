\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:6> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:E> ; <var:Q2> := <nat:7> ; <var:Q2> := <var:Q2> * <var:E> ; <var:Q2> := <var:Q2> * <var:E> ; <var:R> := <var:Q2> ; <var:R> := <var:R> + <var:Q1> ; <var:R> := <var:R> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assume that we have $ <var:E> = <var:F> $ before interpreting our list of commands it follows that $ <var:R> = <nat:7> \times <var:F> ^ <nat:2> + <nat:8> \times <var:F> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions is given through Hoare logic . Jumping to the upcoming piece of code contained in our code segment , we have the assignment line \verb | <var:Q0> := <nat:6> ; | . This command redefines the precondition $ \{ <var:E> = <var:F> \} $ to the postcondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \} $ . This is sound with the assignment inference rule found in usual Hoare logic . Next , we see the statement \verb | <var:Q1> := <nat:8> ; | . This takes $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \} $ as the postcondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> \} $ . Looking at the next command in our program , we see the environment update command \verb | <var:Q1> := <var:Q1> * <var:E> ; | . This line moves the precondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> \} $ to $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \} $ . Taking a look at the following line of code in our list of commands , we have the code letting $ <nat:7> $ toward $ <var:Q2>$ . This statement redefines $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \} $ to the postcondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:Q2> = <nat:7> \} $ . Honing in on the following line contained in the list of commands , we see the environment update statement defining $ <var:Q2> * <var:E> $ into $ <var:Q2>$ . This command moves $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:Q2> = <nat:7> \} $ as the postcondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:Q2> = <nat:7> * <var:F> \} $ . This is shown to be logically sound by the assignment law obtained from standard Hoare logic . Further , we see the variable binding statement \verb | <var:Q2> := <var:Q2> * <var:E> ; | . This statement takes the condition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:Q2> = <nat:7> * <var:F> \} $ toward $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:Q2> = <nat:7> * <var:F> ^ <nat:2> \} $ . This is guaranteed with the assignment inference rule of typical Hoare logic . Moving forward to the upcoming step in our set of commands , the command \verb | <var:R> := <var:Q2> ; | . This command transfers the precondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:Q2> = <nat:7> * <var:F> ^ <nat:2> \} $ into $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:R> = <nat:7> * <var:F> ^ <nat:2> \} $ . Stepping forward , we see the environment update code \verb | <var:R> := <var:R> + <var:Q1> ; | . This forwards the condition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:8> * <var:F> \land <var:R> = <nat:7> * <var:F> ^ <nat:2> \} $ toward the postcondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:R> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> \} $ . Immediately following , we see the line binding $ <var:R> + <var:Q0$ as $ <var:R>$ . This transfers the precondition $ \{ <var:E> = <var:F> \land <var:Q0> = <nat:6> \land <var:R> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> \} $ to the postcondition $ \{ <var:E> = <var:F> \land <var:R> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q0> := <nat:6> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:E> ; <var:Q2> := <nat:7> ; <var:Q2> := <var:Q2> * <var:E> ; <var:Q2> := <var:Q2> * <var:E> ; <var:R> := <var:Q2> ; <var:R> := <var:R> + <var:Q1> ; <var:R> := <var:R> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:E> = <var:F> }} <def:poly> {{ <var:R> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:8> * <var:F> /\ <var:Q2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:8> * <var:F> /\ <var:Q2> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:8> * <var:F> /\ <var:Q2> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:8> * <var:F> /\ <var:R> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:Q0> = <nat:6> /\ <var:R> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:F> /\ <var:R> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 