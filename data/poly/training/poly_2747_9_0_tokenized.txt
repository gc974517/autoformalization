\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:7> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:j> ; <var:T2> := <nat:3> ; <var:T2> := <var:T2> * <var:j> ; <var:T2> := <var:T2> * <var:j> ; <var:r> := <var:T2> ; <var:r> := <var:r> + <var:T1> ; <var:r> := <var:r> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:j> = <var:x> $ ahead of running our set of commands , it follows that we have $ <var:r> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:7> $ . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:j> = <var:x> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \} \\ <var:T1> := <nat:9> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:T1> = <nat:9> \} \\ <var:T1> := <var:T1> * <var:j> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:T1> = <nat:9> * <var:x> \} \\ <var:T2> := <nat:3> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:T1> = <nat:9> * <var:x> \land <var:T2> = <nat:3> \} \\ <var:T2> := <var:T2> * <var:j> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:T1> = <nat:9> * <var:x> \land <var:T2> = <nat:3> * <var:x> \} \\ <var:T2> := <var:T2> * <var:j> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:T1> = <nat:9> * <var:x> \land <var:T2> = <nat:3> * <var:x> ^ <nat:2> \} \\ <var:r> := <var:T2> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:T1> = <nat:9> * <var:x> \land <var:r> = <nat:3> * <var:x> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:T1> ; \\ \{ <var:j> = <var:x> \land <var:T0> = <nat:7> \land <var:r> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> \} \\ <var:r> := <var:r> + <var:T0> \\ \{ <var:j> = <var:x> \land <var:r> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:7> \} \end{eqnarray} Given the preceding argument , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:7> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:j> ; <var:T2> := <nat:3> ; <var:T2> := <var:T2> * <var:j> ; <var:T2> := <var:T2> * <var:j> ; <var:r> := <var:T2> ; <var:r> := <var:r> + <var:T1> ; <var:r> := <var:r> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:j> = <var:x> }} <def:poly> {{ <var:r> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:9> * <var:x> /\ <var:T2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:9> * <var:x> /\ <var:T2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:9> * <var:x> /\ <var:T2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:9> * <var:x> /\ <var:r> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:7> /\ <var:r> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:r> = <nat:3> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 