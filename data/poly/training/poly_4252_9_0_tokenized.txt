\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:5> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:E> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:E> ; <var:i2> := <var:i2> * <var:E> ; <var:U> := <var:i2> ; <var:U> := <var:U> + <var:i1> ; <var:U> := <var:U> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Assume that we have $ <var:E> = <var:c> $ --- for all whole numbers $ <var:c> $ --- prior to running our segment of code it must be that we have $ <var:U> = <nat:3> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:c> \} \\ <var:i0> := <nat:5> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \} \\ <var:i1> := <nat:3> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \} \\ <var:i1> := <var:i1> * <var:E> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:c> \} \\ <var:i2> := <nat:3> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:c> \land <var:i2> = <nat:3> \} \\ <var:i2> := <var:i2> * <var:E> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:c> \land <var:i2> = <nat:3> \cdot <var:c> \} \\ <var:i2> := <var:i2> * <var:E> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:c> \land <var:i2> = <nat:3> \cdot <var:c> ^ <nat:2> \} \\ <var:U> := <var:i2> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:c> \land <var:U> = <nat:3> \cdot <var:c> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:i1> ; \\ \{ <var:E> = <var:c> \land <var:i0> = <nat:5> \land <var:U> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> \} \\ <var:U> := <var:U> + <var:i0> \\ \{ <var:E> = <var:c> \land <var:U> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:5> \} \end{eqnarray} Applying Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:5> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:E> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:E> ; <var:i2> := <var:i2> * <var:E> ; <var:U> := <var:i2> ; <var:U> := <var:U> + <var:i1> ; <var:U> := <var:U> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:E> = <var:c> }} <def:poly> {{ <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:c> /\ <var:i2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:c> /\ <var:i2> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:c> /\ <var:i2> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:c> /\ <var:U> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:i0> = <nat:5> /\ <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 