\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:7> ; <var:U> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:f> = <var:E> $ prior to the evaluation of this series of instructions it must be that we see $ <var:U> = <nat:7> $ . \end{theorem} \begin{proof} The proof of the series of instructions is evident using usual Hoare reasoning . Looking at the proceeding line of code contained in our code segment , the line giving $ <nat:7> $ toward $ <var:I0>$ . This line redefines $ \{ <var:f> = <var:E> \} $ as the postcondition $ \{ <var:f> = <var:E> \land <var:I0> = <nat:7> \} $ . This is ensured using the assignment rule given in standard Hoare reasoning . Moving onward , we see the binding statement \verb | <var:U> := <var:I0> | . This takes the precondition $ \{ <var:f> = <var:E> \land <var:I0> = <nat:7> \} $ to the postcondition $ \{ <var:f> = <var:E> \land <var:U> = <nat:7> \} $ . This is known to be sound by the assignment rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:7> ; <var:U> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:f> = <var:E> }} <def:poly> {{ <var:U> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:U> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 