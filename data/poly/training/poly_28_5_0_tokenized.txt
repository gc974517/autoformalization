\begin{document} \begin{theorem} Take a segment of code as follows \begin{verbatim} <var:R0> := <nat:4> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:n> ; <var:k> := <var:R1> ; <var:k> := <var:k> + <var:R0> \end{verbatim} Assuming $ <var:n> = <var:i> $ for every positive numbers $ <var:i> $ prior to executing our segment of code it must be that we have $ <var:k> = <nat:9> \times <var:i> + <nat:4> $ after series of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for the program is given by standard Hoare logic . Shifting focus toward the following commands in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:i> \} & <var:R0> := <nat:4> & \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \} \\ \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \} & <var:R1> := <nat:9> & \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \} \\ \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \} & <var:R1> := <var:R1> * <var:n> & \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \cdot <var:i> \} \end{tabular} Moving forward to the proceeding lines in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:i> \} & <var:R0> := <nat:4> & \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \} \\ \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \} & <var:R1> := <nat:9> & \{ <var:n> = <var:i> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:n> = <var:i> }} <var:R0> := <nat:4> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:n> ; <var:k> := <var:R1> ; <var:k> := <var:k> + <var:R0> {{ <var:k> = <nat:9> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:R0> = <nat:4> /\ <var:k> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:k> = <nat:9> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 