\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:K1> := <var:U> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:9> ; <var:i> := <var:K1> <var:i> := <var:i> + <var:K0> \end{verbatim} Given that $ <var:U> = <var:h> $ before interpreting our series of instructions it must be that we have $ <var:i> = <nat:9> * <var:h> + <nat:7> $ when code segment has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:h> \} \\ <var:K1> := <var:U> ; \\ \{ <var:U> = <var:h> \land <var:K1> = <var:h> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:U> = <var:h> \land <var:K1> = <var:h> \land <var:K0> = <nat:7> \} \\ <var:K1> := <var:K1> * <nat:9> ; \\ \{ <var:U> = <var:h> \land <var:K1> = <nat:9> * <var:h> \land <var:K0> = <nat:7> \} \\ <var:i> := <var:K1> \\ \{ <var:U> = <var:h> \land <var:K0> = <nat:7> \land <var:i> = <nat:9> * <var:h> \} \\ <var:i> := <var:i> + <var:K0> \\ \{ <var:U> = <var:h> \land <var:i> = <nat:9> * <var:h> + <nat:7> \} \end{eqnarray} Applying standard Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:U> = <var:h> }} <var:K1> := <var:U> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:9> ; <var:i> := <var:K1> <var:i> := <var:i> + <var:K0> {{ <var:i> = <nat:9> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:K1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:K1> = <var:h> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:K0> = <nat:7> /\ <var:i> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:i> = <nat:9> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 