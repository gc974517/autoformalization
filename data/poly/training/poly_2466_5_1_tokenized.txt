\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:z> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:4> ; <var:O> := <var:p1> <var:O> := <var:O> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:z> = <var:o> $ ahead of running the set of instructions , it follows that we have $ <var:O> = <nat:4> \times <var:o> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this list of instructions is demonstrated using the following decorated series of instructions . \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:p1> := <var:z> ; \\ \{ <var:z> = <var:o> \land <var:p1> = <var:o> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:z> = <var:o> \land <var:p1> = <var:o> \land <var:p0> = <nat:3> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:z> = <var:o> \land <var:p1> = <nat:4> * <var:o> \land <var:p0> = <nat:3> \} \\ <var:O> := <var:p1> \\ \{ <var:z> = <var:o> \land <var:p0> = <nat:3> \land <var:O> = <nat:4> * <var:o> \} \\ <var:O> := <var:O> + <var:p0> \\ \{ <var:z> = <var:o> \land <var:O> = <nat:4> * <var:o> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p1> := <var:z> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:4> ; <var:O> := <var:p1> <var:O> := <var:O> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <def:poly> {{ <var:O> = <nat:4> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:p1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:p1> = <var:o> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:p1> = <nat:4> * <var:o> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:p0> = <nat:3> /\ <var:O> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:O> = <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 