\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:6> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:Y> ; <var:E> := <var:u1> ; <var:E> := <var:E> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Assume that $ <var:Y> = <var:D> $ ahead of the evaluation of our list of instructions it holds that $ <var:E> = <nat:8> \cdot <var:D> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for this segment of code can be demonstrated with standard Hoare techniques . Paying attention to the proceeding step in our segment of code , we see the variable update command \verb | <var:u0> := <nat:6> ; | . This advances the precondition $ \{ <var:Y> = <var:D> \} $ as the postcondition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \} $ . This is ensured using the assignment law from standard Hoare logic . Further , we see the environment update command \verb | <var:u1> := <nat:8> ; | . This transfers the precondition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \} $ as the condition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> \} $ . This is shown to be logically sound through the assignment inference rule defined by Hoare techniques . Moving on , we have the variable update statement binding $ <var:u1> * <var:Y> $ as $ <var:u1>$ . This takes $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> \} $ toward the condition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> \cdot <var:D> \} $ . Immediately after , we see the variable assignmet line \verb | <var:E> := <var:u1> ; | . This advances the condition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> \cdot <var:D> \} $ as the condition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \land <var:E> = <nat:8> \cdot <var:D> \} $ . This is deduced using the assignment scheme found in Hoare techniques . Next , we see the assignment command \verb | <var:E> := <var:E> + <var:u0> | . This line advances the precondition $ \{ <var:Y> = <var:D> \land <var:u0> = <nat:6> \land <var:E> = <nat:8> \cdot <var:D> \} $ as the postcondition $ \{ <var:Y> = <var:D> \land <var:E> = <nat:8> \cdot <var:D> + <nat:6> \} $ . This is given using the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:Y> ; <var:E> := <var:u1> ; <var:E> := <var:E> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:Y> = <var:D> }} <def:poly> {{ <var:E> = <nat:8> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:D> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:D> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:D> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:D> /\ <var:u0> = <nat:6> /\ <var:E> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:D> /\ <var:E> = <nat:8> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 