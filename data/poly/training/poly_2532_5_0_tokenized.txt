\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:6> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:B> ; <var:A> := <var:I1> ; <var:A> := <var:A> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:B> = <var:O> $ before interpreting this series of commands , then $ <var:A> = <nat:8> * <var:O> + <nat:6> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives : \begin{eqnarray} \{ <var:B> = <var:O> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:B> = <var:O> \land <var:I0> = <nat:6> \} \\ <var:I1> := <nat:8> ; \\ \{ <var:B> = <var:O> \land <var:I0> = <nat:6> \land <var:I1> = <nat:8> \} \\ <var:I1> := <var:I1> * <var:B> ; \\ \{ <var:B> = <var:O> \land <var:I0> = <nat:6> \land <var:I1> = <nat:8> * <var:O> \} \\ <var:A> := <var:I1> ; \\ \{ <var:B> = <var:O> \land <var:I0> = <nat:6> \land <var:A> = <nat:8> * <var:O> \} \\ <var:A> := <var:A> + <var:I0> \\ \{ <var:B> = <var:O> \land <var:A> = <nat:8> * <var:O> + <nat:6> \} \end{eqnarray} As a consequence , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:6> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:B> ; <var:A> := <var:I1> ; <var:A> := <var:A> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:B> = <var:O> }} <def:poly> {{ <var:A> = <nat:8> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:O> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:O> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:O> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:O> /\ <var:I0> = <nat:6> /\ <var:A> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:O> /\ <var:A> = <nat:8> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 