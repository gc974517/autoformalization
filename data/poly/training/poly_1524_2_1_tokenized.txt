\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:9> ; <var:l> := <var:Y0> \end{verbatim} Allowing $ <var:K> = <var:U> $ --- given some $ <var:U> \in \mathbb{N} $ --- ahead of the execution of our set of commands then we have $ <var:l> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this program can be seen by usual Hoare reasoning . Now , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:U> \} & <var:Y0> := <nat:9> & \{ <var:K> = <var:U> \land <var:Y0> = <nat:9> \} \end{tabular} This is given through the scheme in typical Hoare logic . Going forward , \[ \begin{tabular} {rcl} \{ <var:K> = <var:U> \} & <var:Y0> := <nat:9> & \{ <var:K> = <var:U> \land <var:Y0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:K> = <var:U> }} <var:Y0> := <nat:9> ; <var:l> := <var:Y0> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 