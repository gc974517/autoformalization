\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:H> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:H> ; <var:n2> := <var:n2> * <var:H> ; <var:e> := <var:n2> ; <var:e> := <var:e> + <var:n1> ; <var:e> := <var:e> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Assuming ( for some natural coefficients $ <var:X> $ ) that $ <var:H> = <var:X> $ ahead of interpreting our code segment , it follows that we have $ <var:e> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is demonstrated using standard Hoare logic . Shifting focus toward the following steps in our segment of code , \begin{verbatim} { <var:H> = <var:X> } <var:n0> := <nat:1> { <var:H> = <var:X> \land <var:n0> = <nat:1> } { <var:H> = <var:X> \land <var:n0> = <nat:1> } <var:n1> := <nat:1> { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> } { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> } <var:n1> := <var:n1> * <var:H> { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> } { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> } <var:n2> := <nat:3> { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <nat:3> } { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <nat:3> } <var:n2> := <var:n2> * <var:H> { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <nat:3> * <var:X> } { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <nat:3> * <var:X> } <var:n2> := <var:n2> * <var:H> { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <nat:3> * <var:X> ^ <nat:2> } { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <nat:3> * <var:X> ^ <nat:2> } <var:e> := <var:n2> { <var:H> = <var:X> \land <var:n0> = <nat:1> \land <var:n1> = <nat:1> * <var:X> \land <var:e> = <nat:3> * <var:X> ^ <nat:2> } \end{verbatim} This is rigorously given using the binding scheme given by Hoare reasoning . Taking another step toward the following line contained in our code segment , \begin{verbatim} { <var:H> = <var:X> } <var:n0> := <nat:1> { <var:H> = <var:X> \land <var:n0> = <nat:1> } \end{verbatim} Moving forward to the following bit of code contained in our list of instructions , we have \begin{verbatim} { <var:H> = <var:X> } <var:n0> := <nat:1> { <var:H> = <var:X> \land <var:n0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:H> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:H> ; <var:n2> := <var:n2> * <var:H> ; <var:e> := <var:n2> ; <var:e> := <var:e> + <var:n1> ; <var:e> := <var:e> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:H> = <var:X> }} <def:poly> {{ <var:e> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:1> * <var:X> /\ <var:e> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:n0> = <nat:1> /\ <var:e> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:e> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 