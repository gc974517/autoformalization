\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:2> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:w> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:w> ; <var:m2> := <var:m2> * <var:w> ; <var:c> := <var:m2> ; <var:c> := <var:c> + <var:m1> ; <var:c> := <var:c> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:w> = <var:z> $ given some whole numbers $ <var:z> $ ahead of executing our list of instructions it must be that $ <var:c> = <nat:7> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:2> $ when segment of code finishes . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be given with usual Hoare techniques . Honing in on the proceeding piece of code in the code , we have the variable update line \verb | <var:m0> := <nat:2> ; | . This line takes $ \{ <var:w> = <var:z> \} $ into $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \} $ . Shifting focus toward the proceeding statement in the segment of code , the assignment statement yielding $ <nat:8> $ to $ <var:m1>$ . This redefines the precondition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \} $ toward $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \} $ . This is guaranteed by the assignment inference rule given in standard Hoare reasoning . Advancing , we have the binding code assigning $ <var:m1> * <var:w> $ to $ <var:m1>$ . This moves $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \} $ toward the postcondition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \} $ . Shifting focus toward the next bit of code contained in the list of commands , we have the variable assignmet statement \verb | <var:m2> := <nat:7> ; | . This moves $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \} $ to the condition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:m2> = <nat:7> \} $ . This is shown to be logically sound by the assignment inference rule of standard Hoare logic . Moving forward , we see the variable update code \verb | <var:m2> := <var:m2> * <var:w> ; | . This command advances the precondition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:m2> = <nat:7> \} $ to the condition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:m2> = <nat:7> \times <var:z> \} $ . Now , we see the binding line assigning $ <var:m2> * <var:w> $ toward $ <var:m2>$ . This statement transfers the condition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:m2> = <nat:7> \times <var:z> \} $ to $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:m2> = <nat:7> \times <var:z> ^ <nat:2> \} $ . Moving forward , we see the line assigning $ <var:m2> $ toward $ <var:c>$ . This statement advances $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:m2> = <nat:7> \times <var:z> ^ <nat:2> \} $ toward the condition $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:c> = <nat:7> \times <var:z> ^ <nat:2> \} $ . This is guaranteed using the assignment law found in usual Hoare logic . Moving on , the variable binding line \verb | <var:c> := <var:c> + <var:m1> ; | . This advances $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:m1> = <nat:8> \times <var:z> \land <var:c> = <nat:7> \times <var:z> ^ <nat:2> \} $ as $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:c> = <nat:7> \times <var:z> ^ <nat:2> + <nat:8> \times <var:z> \} $ . Advancing to the upcoming statement in the set of commands , the variable assignmet command \verb | <var:c> := <var:c> + <var:m0> | . This advances $ \{ <var:w> = <var:z> \land <var:m0> = <nat:2> \land <var:c> = <nat:7> \times <var:z> ^ <nat:2> + <nat:8> \times <var:z> \} $ toward the postcondition $ \{ <var:w> = <var:z> \land <var:c> = <nat:7> \times <var:z> ^ <nat:2> + <nat:8> \times <var:z> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:w> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:w> ; <var:m2> := <var:m2> * <var:w> ; <var:c> := <var:m2> ; <var:c> := <var:c> + <var:m1> ; <var:c> := <var:c> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <def:poly> {{ <var:c> = <nat:7> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:8> * <var:z> /\ <var:m2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:8> * <var:z> /\ <var:m2> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:8> * <var:z> /\ <var:m2> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:8> * <var:z> /\ <var:c> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:m0> = <nat:2> /\ <var:c> = <nat:7> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:c> = <nat:7> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 