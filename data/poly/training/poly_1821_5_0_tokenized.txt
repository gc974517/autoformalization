\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:9> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:P> ; <var:s> := <var:C1> ; <var:s> := <var:s> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Allowing it to hold that $ <var:P> = <var:H> $ before the evaluation of this series of commands it must be that we see $ <var:s> = <nat:2> \times <var:H> + <nat:9> $ once list of commands is done . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:P> = <var:H> \} \\ <var:C0> := <nat:9> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:9> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \cdot <var:H> \} \\ <var:s> := <var:C1> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:9> \land <var:s> = <nat:2> \cdot <var:H> \} \\ <var:s> := <var:s> + <var:C0> \\ \{ <var:P> = <var:H> \land <var:s> = <nat:2> \cdot <var:H> + <nat:9> \} \end{eqnarray} As a consequence , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:9> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:P> ; <var:s> := <var:C1> ; <var:s> := <var:s> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:P> = <var:H> }} <def:poly> {{ <var:s> = <nat:2> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:9> /\ <var:s> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:s> = <nat:2> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 