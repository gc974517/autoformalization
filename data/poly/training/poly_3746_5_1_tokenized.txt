\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:a> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:9> ; <var:y> := <var:k1> <var:y> := <var:y> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:a> = <var:O> $ , given some positive coefficients $ <var:O> $ , prior to evaluating this segment of code then we have $ <var:y> = <nat:9> \cdot <var:O> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is done by typical Hoare logic . Moving on to the next step , we see \begin{verbatim} { <var:a> = <var:O> } <var:k1> := <var:a> { <var:a> = <var:O> \land <var:k1> = <var:O> } { <var:a> = <var:O> \land <var:k1> = <var:O> } <var:k0> := <nat:9> { <var:a> = <var:O> \land <var:k1> = <var:O> \land <var:k0> = <nat:9> } \end{verbatim} Paying attention to the subsequent bits of codecontained in our series of instructions , we see \begin{verbatim} { <var:a> = <var:O> } <var:k1> := <var:a> { <var:a> = <var:O> \land <var:k1> = <var:O> } { <var:a> = <var:O> \land <var:k1> = <var:O> } <var:k0> := <nat:9> { <var:a> = <var:O> \land <var:k1> = <var:O> \land <var:k0> = <nat:9> } \end{verbatim} This is given with the rule from standard Hoare techniques . Moving forward , \begin{verbatim} { <var:a> = <var:O> } <var:k1> := <var:a> { <var:a> = <var:O> \land <var:k1> = <var:O> } \end{verbatim} This is known to be sound by the variable update inference rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:a> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:9> ; <var:y> := <var:k1> <var:y> := <var:y> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <def:poly> {{ <var:y> = <nat:9> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:k1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:k1> = <var:O> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:k1> = <nat:9> * <var:O> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:k0> = <nat:9> /\ <var:y> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:y> = <nat:9> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 