\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:b1> := <var:N> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:4> ; <var:k> := <var:b1> <var:k> := <var:k> + <var:b0> \end{verbatim} Allowing , given every $ <var:X> \in \mathbb{Z}^+ $ , it to be that $ <var:N> = <var:X> $ before executing our list of instructions , it must be that $ <var:k> = <nat:4> * <var:X> + <nat:9> $ once set of commands has finished . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:N> = <var:X> \} \\ <var:b1> := <var:N> ; \\ \{ <var:N> = <var:X> \land <var:b1> = <var:X> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:N> = <var:X> \land <var:b1> = <var:X> \land <var:b0> = <nat:9> \} \\ <var:b1> := <var:b1> * <nat:4> ; \\ \{ <var:N> = <var:X> \land <var:b1> = <nat:4> \cdot <var:X> \land <var:b0> = <nat:9> \} \\ <var:k> := <var:b1> \\ \{ <var:N> = <var:X> \land <var:b0> = <nat:9> \land <var:k> = <nat:4> \cdot <var:X> \} \\ <var:k> := <var:k> + <var:b0> \\ \{ <var:N> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> + <nat:9> \} \end{eqnarray} Hence , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:N> = <var:X> }} <var:b1> := <var:N> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:4> ; <var:k> := <var:b1> <var:k> := <var:k> + <var:b0> {{ <var:k> = <nat:4> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:b1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:b1> = <var:X> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:b1> = <nat:4> * <var:X> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:b0> = <nat:9> /\ <var:k> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:k> = <nat:4> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 