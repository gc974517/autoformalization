\begin{document} \begin{theorem} Consider a code in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:H> ; <var:L0> := <nat:5> ; <var:L1> := <var:L1> * <nat:6> ; <var:j> := <var:L1> <var:j> := <var:j> + <var:L0> \end{verbatim} Assume ( for every positive numbers $ <var:D> $ ) it to hold that $ <var:H> = <var:D> $ before interpreting the list of commands , then $ <var:j> = <nat:6> \times <var:D> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be done using Hoare reasoning . Taking another step toward the subsequent lines of codecontained in our set of instructions , \begin{verbatim} { <var:H> = <var:D> } <var:L1> := <var:H> { <var:H> = <var:D> \land <var:L1> = <var:D> } { <var:H> = <var:D> \land <var:L1> = <var:D> } <var:L0> := <nat:5> { <var:H> = <var:D> \land <var:L1> = <var:D> \land <var:L0> = <nat:5> } \end{verbatim} This is shown to be logically sound using the variable assignmet inference rule in typical Hoare techniques . Jumping to the upcoming line of code seen in our segment of code , \begin{verbatim} { <var:H> = <var:D> } <var:L1> := <var:H> { <var:H> = <var:D> \land <var:L1> = <var:D> } \end{verbatim} Considering the following command contained in the series of commands , \begin{verbatim} { <var:H> = <var:D> } <var:L1> := <var:H> { <var:H> = <var:D> \land <var:L1> = <var:D> } \end{verbatim} Focusing on the following piece of code found in the set of instructions , \begin{verbatim} { <var:H> = <var:D> } <var:L1> := <var:H> { <var:H> = <var:D> \land <var:L1> = <var:D> } \end{verbatim} This is sound by the variable update scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:H> = <var:D> }} <var:L1> := <var:H> ; <var:L0> := <nat:5> ; <var:L1> := <var:L1> * <nat:6> ; <var:j> := <var:L1> <var:j> := <var:j> + <var:L0> {{ <var:j> = <nat:6> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:L1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:L1> = <var:D> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:L1> = <nat:6> * <var:D> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:L0> = <nat:5> /\ <var:j> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:j> = <nat:6> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 