\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:3> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:g> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:g> ; <var:h2> := <var:h2> * <var:g> ; <var:y> := <var:h2> ; <var:y> := <var:y> + <var:h1> ; <var:y> := <var:y> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given ( for some whole numbers $ <var:z> $ ) it to be that $ <var:g> = <var:z> $ prior to running the segment of code , it must be that we see $ <var:y> = <nat:7> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this program can be given using typical Hoare techniques . Jumping to the proceeding bit of code found in our program , we have the variable assignmet statement yielding $ <nat:3> $ as $ <var:h0>$ . This forwards $ \{ <var:g> = <var:z> \} $ as $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \} $ . Honing in on the proceeding step in the set of commands , we have the binding command \verb | <var:h1> := <nat:9> ; | . This line moves $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \} $ as the postcondition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \} $ . This is sound through the assignment inference rule from Hoare techniques . Honing in on the upcoming line found in the code , we have the variable update line \verb | <var:h1> := <var:h1> * <var:g> ; | . This line takes the condition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \} $ to $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \} $ . This is shown with the assignment law found in usual Hoare techniques . Moving onward , we see the variable update statement yielding $ <nat:7> $ as $ <var:h2>$ . This statement takes the condition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \} $ into the condition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:h2> = <nat:7> \} $ . Now , we see the variable binding command \verb | <var:h2> := <var:h2> * <var:g> ; | . This line transfers the precondition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:h2> = <nat:7> \} $ as the condition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:h2> = <nat:7> \cdot <var:z> \} $ . Going to the next step , we see the binding statement \verb | <var:h2> := <var:h2> * <var:g> ; | . This code redefines the precondition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:h2> = <nat:7> \cdot <var:z> \} $ toward $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:h2> = <nat:7> \cdot <var:z> ^ <nat:2> \} $ . Jumping to the next piece of code seen in our series of commands , we see the binding code letting $ <var:h2> $ to $ <var:y>$ . This redefines the condition $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:h2> = <nat:7> \cdot <var:z> ^ <nat:2> \} $ toward $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:y> = <nat:7> \cdot <var:z> ^ <nat:2> \} $ . Immediately after , the command giving $ <var:y> + <var:h1> $ as $ <var:y>$ . This line transfers $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:h1> = <nat:9> \cdot <var:z> \land <var:y> = <nat:7> \cdot <var:z> ^ <nat:2> \} $ as $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:y> = <nat:7> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} $ . This is shown to be logically sound through the assignment rule found in Hoare reasoning . Advancing to the upcoming line of code contained in our code , the code \verb | <var:y> := <var:y> + <var:h0> | . This command moves $ \{ <var:g> = <var:z> \land <var:h0> = <nat:3> \land <var:y> = <nat:7> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} $ toward the postcondition $ \{ <var:g> = <var:z> \land <var:y> = <nat:7> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:g> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:g> ; <var:h2> := <var:h2> * <var:g> ; <var:y> := <var:h2> ; <var:y> := <var:y> + <var:h1> ; <var:y> := <var:y> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:g> = <var:z> }} <def:poly> {{ <var:y> = <nat:7> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:9> * <var:z> /\ <var:h2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:9> * <var:z> /\ <var:h2> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:9> * <var:z> /\ <var:h2> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:9> * <var:z> /\ <var:y> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:h0> = <nat:3> /\ <var:y> = <nat:7> * <var:z> ^ <nat:2> + <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:y> = <nat:7> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 