\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:9> ; <var:W> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Given --- for any natural numbers $ <var:a> $ --- it to hold that $ <var:Y> = <var:a> $ ahead of interpreting this code segment then we have $ <var:W> = <nat:9> $ when set of instructions terminates . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:Y> = <var:a> \} \\ <var:C0> := <nat:9> ; \\ \{ <var:Y> = <var:a> \land <var:C0> = <nat:9> \} \\ <var:W> := <var:C0> \\ \{ <var:Y> = <var:a> \land <var:W> = <nat:9> \} \end{eqnarray} Thus , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:9> ; <var:W> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Y> = <var:a> }} <def:poly> {{ <var:W> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:W> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 