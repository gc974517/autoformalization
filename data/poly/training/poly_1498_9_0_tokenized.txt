\begin{document} \begin{theorem} Take a code segment as follows \begin{verbatim} <var:u0> := <nat:4> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:A> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:A> ; <var:u2> := <var:u2> * <var:A> ; <var:d> := <var:u2> ; <var:d> := <var:d> + <var:u1> ; <var:d> := <var:d> + <var:u0> \end{verbatim} Allowing ( assuming some natural coefficients $ <var:r> $ ) that $ <var:A> = <var:r> $ ahead of running this segment of code it follows that we have $ <var:d> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:4> $ when code is done . \end{theorem} \begin{proof} Using standard Hoare reasoning returns : \begin{eqnarray} \{ <var:A> = <var:r> \} \\ <var:u0> := <nat:4> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \} \\ <var:u1> := <nat:4> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:u1> = <nat:4> \} \\ <var:u1> := <var:u1> * <var:A> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:u1> = <nat:4> \times <var:r> \} \\ <var:u2> := <nat:1> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:u1> = <nat:4> \times <var:r> \land <var:u2> = <nat:1> \} \\ <var:u2> := <var:u2> * <var:A> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:u1> = <nat:4> \times <var:r> \land <var:u2> = <nat:1> \times <var:r> \} \\ <var:u2> := <var:u2> * <var:A> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:u1> = <nat:4> \times <var:r> \land <var:u2> = <nat:1> \times <var:r> ^ <nat:2> \} \\ <var:d> := <var:u2> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:u1> = <nat:4> \times <var:r> \land <var:d> = <nat:1> \times <var:r> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:u1> ; \\ \{ <var:A> = <var:r> \land <var:u0> = <nat:4> \land <var:d> = <nat:1> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> \} \\ <var:d> := <var:d> + <var:u0> \\ \{ <var:A> = <var:r> \land <var:d> = <nat:1> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:4> \} \end{eqnarray} As a result , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:A> = <var:r> }} <var:u0> := <nat:4> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:A> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:A> ; <var:u2> := <var:u2> * <var:A> ; <var:d> := <var:u2> ; <var:d> := <var:d> + <var:u1> ; <var:d> := <var:d> + <var:u0> {{ <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:4> * <var:r> /\ <var:d> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:u0> = <nat:4> /\ <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:r> /\ <var:d> = <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 