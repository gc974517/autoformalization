\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:r> ; <var:j> := <var:W1> ; <var:j> := <var:j> + <var:W0> \end{verbatim} Allow , taking positive coefficients $ <var:p> $ , it to hold that $ <var:r> = <var:p> $ ahead of interpreting our list of commands , it holds that $ <var:j> = <nat:4> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:p> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:r> = <var:p> \land <var:W0> = <nat:3> \} \\ <var:W1> := <nat:4> ; \\ \{ <var:r> = <var:p> \land <var:W0> = <nat:3> \land <var:W1> = <nat:4> \} \\ <var:W1> := <var:W1> * <var:r> ; \\ \{ <var:r> = <var:p> \land <var:W0> = <nat:3> \land <var:W1> = <nat:4> \times <var:p> \} \\ <var:j> := <var:W1> ; \\ \{ <var:r> = <var:p> \land <var:W0> = <nat:3> \land <var:j> = <nat:4> \times <var:p> \} \\ <var:j> := <var:j> + <var:W0> \\ \{ <var:r> = <var:p> \land <var:j> = <nat:4> \times <var:p> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:r> = <var:p> }} <var:W0> := <nat:3> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:r> ; <var:j> := <var:W1> ; <var:j> := <var:j> + <var:W0> {{ <var:j> = <nat:4> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:W0> = <nat:3> /\ <var:j> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:j> = <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 