\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:9> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:E> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:E> ; <var:M2> := <var:M2> * <var:E> ; <var:w> := <var:M2> ; <var:w> := <var:w> + <var:M1> ; <var:w> := <var:w> + <var:M0> \end{verbatim} Assume it to be that $ <var:E> = <var:e> $ , for any positive integers $ <var:e> $ , ahead of the execution of our list of instructions , it must be that $ <var:w> = <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:E> = <var:e> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:M1> = <nat:2> * <var:e> \} \\ <var:M2> := <nat:5> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:M1> = <nat:2> * <var:e> \land <var:M2> = <nat:5> \} \\ <var:M2> := <var:M2> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:M1> = <nat:2> * <var:e> \land <var:M2> = <nat:5> * <var:e> \} \\ <var:M2> := <var:M2> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:M1> = <nat:2> * <var:e> \land <var:M2> = <nat:5> * <var:e> ^ <nat:2> \} \\ <var:w> := <var:M2> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:M1> = <nat:2> * <var:e> \land <var:w> = <nat:5> * <var:e> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:M1> ; \\ \{ <var:E> = <var:e> \land <var:M0> = <nat:9> \land <var:w> = <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> \} \\ <var:w> := <var:w> + <var:M0> \\ \{ <var:E> = <var:e> \land <var:w> = <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> \} \end{eqnarray} Thus , our series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:E> = <var:e> }} <var:M0> := <nat:9> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:E> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:E> ; <var:M2> := <var:M2> * <var:E> ; <var:w> := <var:M2> ; <var:w> := <var:w> + <var:M1> ; <var:w> := <var:w> + <var:M0> {{ <var:w> = <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:2> * <var:e> /\ <var:M2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:2> * <var:e> /\ <var:M2> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:2> * <var:e> /\ <var:M2> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:2> * <var:e> /\ <var:w> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:M0> = <nat:9> /\ <var:w> = <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:w> = <nat:5> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 