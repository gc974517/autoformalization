\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:E> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:E> ; <var:W2> := <var:W2> * <var:E> ; <var:z> := <var:W2> ; <var:z> := <var:z> + <var:W1> ; <var:z> := <var:z> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Assume that $ <var:E> = <var:v> $ ahead of the execution of this code then we have $ <var:z> = <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> $ once program has exited . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:E> = <var:v> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \} \\ <var:W1> := <nat:3> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> \} \\ <var:W1> := <var:W1> * <var:E> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> * <var:v> \} \\ <var:W2> := <nat:5> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> * <var:v> \land <var:W2> = <nat:5> \} \\ <var:W2> := <var:W2> * <var:E> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> * <var:v> \land <var:W2> = <nat:5> * <var:v> \} \\ <var:W2> := <var:W2> * <var:E> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \} \\ <var:z> := <var:W2> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> * <var:v> \land <var:z> = <nat:5> * <var:v> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:W1> ; \\ \{ <var:E> = <var:v> \land <var:W0> = <nat:1> \land <var:z> = <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> \} \\ <var:z> := <var:z> + <var:W0> \\ \{ <var:E> = <var:v> \land <var:z> = <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> \} \end{eqnarray} Thus , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:E> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:E> ; <var:W2> := <var:W2> * <var:E> ; <var:z> := <var:W2> ; <var:z> := <var:z> + <var:W1> ; <var:z> := <var:z> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:E> = <var:v> }} <def:poly> {{ <var:z> = <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> * <var:v> /\ <var:W2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> * <var:v> /\ <var:W2> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> * <var:v> /\ <var:W2> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> * <var:v> /\ <var:z> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:W0> = <nat:1> /\ <var:z> = <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:z> = <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 