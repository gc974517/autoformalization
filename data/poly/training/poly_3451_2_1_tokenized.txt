\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:s> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given ( assuming some $ <var:n> \in \mathbb{N} $ ) that $ <var:p> = <var:n> $ prior to interpreting this list of commands , it follows that we see $ <var:s> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be seen using usual Hoare logic . Shifting focus toward the next statement seen in our list of commands , \verb | { <var:p> = <var:n> } <var:H0> := <nat:1> { <var:p> = <var:n> \land <var:H0> = <nat:1> } | . Immediately following , we see \verb | { <var:p> = <var:n> } <var:H0> := <nat:1> { <var:p> = <var:n> \land <var:H0> = <nat:1> } | . This is given using the variable assignmet law defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:s> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:p> = <var:n> }} <def:poly> {{ <var:s> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 