\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:C> ; <var:G> := <var:i1> ; <var:G> := <var:G> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Assuming for some $ <var:u> \in \mathbb{Z}^+ $ that we have $ <var:C> = <var:u> $ prior to the evaluation of our code , it must be that we see $ <var:G> = <nat:2> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the series of instructions is evident with usual Hoare logic . Further , \verb | { <var:C> = <var:u> } <var:i0> := <nat:3> { <var:C> = <var:u> \land <var:i0> = <nat:3> } | and \verb | { <var:C> = <var:u> \land <var:i0> = <nat:3> } <var:i1> := <nat:2> { <var:C> = <var:u> \land <var:i0> = <nat:3> \land <var:i1> = <nat:2> } | . This is known to be sound through the assignment law of typical Hoare techniques . Moving forward , \verb | { <var:C> = <var:u> } <var:i0> := <nat:3> { <var:C> = <var:u> \land <var:i0> = <nat:3> } | . This is rigorously given through the variable binding rule given by usual Hoare logic . Advancing to the next step , \verb | { <var:C> = <var:u> } <var:i0> := <nat:3> { <var:C> = <var:u> \land <var:i0> = <nat:3> } | and \verb | { <var:C> = <var:u> \land <var:i0> = <nat:3> } <var:i1> := <nat:2> { <var:C> = <var:u> \land <var:i0> = <nat:3> \land <var:i1> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:C> ; <var:G> := <var:i1> ; <var:G> := <var:G> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:C> = <var:u> }} <def:poly> {{ <var:G> = <nat:2> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:i0> = <nat:3> /\ <var:G> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:G> = <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 