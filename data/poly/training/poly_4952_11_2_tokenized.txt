\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} : \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <nat:4> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <var:X> * <var:V> ; <var:X> := <nat:4> + <var:X> * <var:V> ; <var:X> := <nat:2> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <nat:2> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> \end{verbatim} Assume that $ <var:V> = <var:m> $ before the execution of the segment of code , it must be that we see $ <var:X> = <nat:4> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:9> + <nat:4> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> $ when program has executed . \end{theorem} \begin{proof} The way to prove correctness for this code is evident by Hoare reasoning . Moving onward , the environment update statement binding $ <nat:4> $ into $ <var:X>$ . This forwards the precondition $ \{ <var:V> = <var:m> \} $ into $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \} $ . Considering the next line seen in our set of commands , the assignment code defining $ <nat:3> + <var:X> * <var:V> $ as $ <var:X>$ . This statement moves the precondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \} $ toward $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> + <nat:3> \} $ . Immediately following , we have the variable assignmet line assigning $ <nat:4> + <var:X> * <var:V> $ to $ <var:X>$ . This statement forwards the precondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> + <nat:3> \} $ to the condition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:4> \} $ . Going forward , we have the binding statement defining $ <nat:3> + <var:X> * <var:V> $ as $ <var:X>$ . This advances the precondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:4> \} $ as the postcondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:3> \} $ . This is given with the assignment law given in Hoare reasoning . Jumping to the following command found in the program , we have the assignment code \verb | <var:X> := <var:X> * <var:V> ; | . This line transfers $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:3> \} $ to $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + \} $ . This is shown with the assignment inference rule defined by usual Hoare reasoning . Looking at the subsequent piece of code contained in the segment of code , we have the environment update code giving $ <nat:4> + <var:X> * <var:V> $ toward $ <var:X>$ . This moves the precondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + \} $ as $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \} $ . This is deduced using the assignment scheme defined by Hoare logic . Following , the variable update code \verb | <var:X> := <nat:2> + <var:X> * <var:V> ; | . This forwards $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \} $ into the postcondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> + <nat:2> \} $ . Stepping through , the variable binding code binding $ <nat:3> + <var:X> * <var:V> $ toward $ <var:X>$ . This line forwards the precondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> + <nat:2> \} $ toward the condition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} $ . Shifting focus toward the subsequent piece of code found in the code , the binding code letting $ <nat:2> + <var:X> * <var:V> $ toward $ <var:X>$ . This moves $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} $ to $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:8> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:2> \} $ . This is guaranteed through the assignment rule defined in usual Hoare logic . Honing in on the next step in our set of commands , we have the variable binding line letting $ <nat:3> + <var:X> * <var:V> $ as $ <var:X>$ . This line advances the condition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:8> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:2> \} $ to the condition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:9> + <nat:3> \cdot <var:m> ^ <nat:8> + <nat:4> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} $ . Moving onward , we see the variable binding code \verb | <var:X> := <nat:3> + <var:X> * <var:V> | . This command redefines the precondition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:9> + <nat:3> \cdot <var:m> ^ <nat:8> + <nat:4> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} $ as the condition $ \{ <var:V> = <var:m> \land <var:X> = <nat:4> \cdot <var:m> ^ <nat:10> + <nat:3> \cdot <var:m> ^ <nat:9> + <nat:4> \cdot <var:m> ^ <nat:8> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:V> = <var:m> }} <var:X> := <nat:4> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <nat:4> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <var:X> * <var:V> ; <var:X> := <nat:4> + <var:X> * <var:V> ; <var:X> := <nat:2> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <nat:2> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> ; <var:X> := <nat:3> + <var:X> * <var:V> {{ <var:X> = <nat:4> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:9> + <nat:4> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:X> = <nat:4> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:9> + <nat:4> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 