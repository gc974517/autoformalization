\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:3> ; <var:F> := <var:m0> \end{verbatim} Allowing , for positive integers $ <var:V> $ , that we have $ <var:e> = <var:V> $ ahead of the execution of our code segment , it holds that we see $ <var:F> = <nat:3> $ after segment of code executes . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:e> = <var:V> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:e> = <var:V> \land <var:m0> = <nat:3> \} \\ <var:F> := <var:m0> \\ \{ <var:e> = <var:V> \land <var:F> = <nat:3> \} \end{eqnarray} Thus , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:e> = <var:V> }} <var:m0> := <nat:3> ; <var:F> := <var:m0> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 