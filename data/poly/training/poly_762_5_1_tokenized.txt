\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:U> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:Z> := <var:W1> <var:Z> := <var:Z> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:U> = <var:m> $ before the evaluation of the series of instructions , then $ <var:Z> = <nat:2> \times <var:m> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is evident with typical Hoare reasoning . Stepping through , we see the assignment code \verb | <var:W1> := <var:U> ; | . This redefines the precondition $ \{ <var:U> = <var:m> \} $ into the condition $ \{ <var:U> = <var:m> \land <var:W1> = <var:m> \} $ . Considering the proceeding bit of code in the list of instructions , we see the variable assignmet line \verb | <var:W0> := <nat:4> ; | . This command moves $ \{ <var:U> = <var:m> \land <var:W1> = <var:m> \} $ to $ \{ <var:U> = <var:m> \land <var:W1> = <var:m> \land <var:W0> = <nat:4> \} $ . This is known to be sound through the assignment rule obtained from typical Hoare techniques . Moving forward , we have the statement yielding $ <var:W1> * <nat:2> $ to $ <var:W1>$ . This advances the precondition $ \{ <var:U> = <var:m> \land <var:W1> = <var:m> \land <var:W0> = <nat:4> \} $ as $ \{ <var:U> = <var:m> \land <var:W1> = <nat:2> \times <var:m> \land <var:W0> = <nat:4> \} $ . Moving onward , the variable binding code binding $ <var:W1$ toward $ <var:Z>$ . This statement advances the condition $ \{ <var:U> = <var:m> \land <var:W1> = <nat:2> \times <var:m> \land <var:W0> = <nat:4> \} $ toward the postcondition $ \{ <var:U> = <var:m> \land <var:W0> = <nat:4> \land <var:Z> = <nat:2> \times <var:m> \} $ . Taking a look at the upcoming command seen in our series of commands , we have the environment update statement yielding $ <var:Z> + <var:W0$ to $ <var:Z>$ . This redefines the precondition $ \{ <var:U> = <var:m> \land <var:W0> = <nat:4> \land <var:Z> = <nat:2> \times <var:m> \} $ as $ \{ <var:U> = <var:m> \land <var:Z> = <nat:2> \times <var:m> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:U> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:Z> := <var:W1> <var:Z> := <var:Z> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:U> = <var:m> }} <def:poly> {{ <var:Z> = <nat:2> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W1> = <var:m> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W1> = <nat:2> * <var:m> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W0> = <nat:4> /\ <var:Z> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Z> = <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 