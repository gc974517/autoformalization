\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:8> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:r> ; <var:I> := <var:w1> ; <var:I> := <var:I> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:r> = <var:W> $ --- for every $ <var:W> $ --- prior to running the set of commands then we have $ <var:I> = <nat:4> * <var:W> + <nat:8> $ once segment of code executes . \end{theorem} \begin{proof} Let the below decorated code segment . \begin{eqnarray} \{ <var:r> = <var:W> \} \\ <var:w0> := <nat:8> ; \\ \{ <var:r> = <var:W> \land <var:w0> = <nat:8> \} \\ <var:w1> := <nat:4> ; \\ \{ <var:r> = <var:W> \land <var:w0> = <nat:8> \land <var:w1> = <nat:4> \} \\ <var:w1> := <var:w1> * <var:r> ; \\ \{ <var:r> = <var:W> \land <var:w0> = <nat:8> \land <var:w1> = <nat:4> \cdot <var:W> \} \\ <var:I> := <var:w1> ; \\ \{ <var:r> = <var:W> \land <var:w0> = <nat:8> \land <var:I> = <nat:4> \cdot <var:W> \} \\ <var:I> := <var:I> + <var:w0> \\ \{ <var:r> = <var:W> \land <var:I> = <nat:4> \cdot <var:W> + <nat:8> \} \end{eqnarray} Utilizing Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:8> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:r> ; <var:I> := <var:w1> ; <var:I> := <var:I> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:r> = <var:W> }} <def:poly> {{ <var:I> = <nat:4> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:w0> = <nat:8> /\ <var:I> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:I> = <nat:4> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 