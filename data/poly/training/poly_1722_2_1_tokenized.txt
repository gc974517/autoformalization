\begin{document} \begin{theorem} Define a code as follows \begin{verbatim} <var:m0> := <nat:7> ; <var:Z> := <var:m0> \end{verbatim} Assume that we have $ <var:J> = <var:r> $ ahead of the evaluation of this series of instructions , then we have $ <var:Z> = <nat:7> $ when series of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for our program is given using Hoare techniques . Considering the upcoming bits of codeseen in the code segment , \[ \begin{tabular} {rcl} \{ <var:J> = <var:r> \} & <var:m0> := <nat:7> & \{ <var:J> = <var:r> \land <var:m0> = <nat:7> \} \\ \{ <var:J> = <var:r> \land <var:m0> = <nat:7> \} & <var:Z> := <var:m0& \{ <var:J> = <var:r> \land <var:Z> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <var:m0> := <nat:7> ; <var:Z> := <var:m0> {{ <var:Z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:Z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 