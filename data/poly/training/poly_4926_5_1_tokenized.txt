\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:J> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:7> ; <var:N> := <var:a1> <var:N> := <var:N> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allowing $ <var:J> = <var:L> $ ( given any $ <var:L> \in \mathbb{N} $ ) prior to the evaluation of the list of commands , it holds that $ <var:N> = <nat:7> * <var:L> + <nat:5> $ once code segment executes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be demonstrated through usual Hoare logic . Moving on to the next step , we see the variable assignmet statement letting $ <var:J> $ as $ <var:a1>$ . This redefines the precondition $ \{ <var:J> = <var:L> \} $ to $ \{ <var:J> = <var:L> \land <var:a1> = <var:L> \} $ . Taking a look at the next line of code found in our list of instructions , we have the variable binding line \verb | <var:a0> := <nat:5> ; | . This code advances the precondition $ \{ <var:J> = <var:L> \land <var:a1> = <var:L> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:a1> = <var:L> \land <var:a0> = <nat:5> \} $ . Taking another step toward the next bit of code found in our list of instructions , the code \verb | <var:a1> := <var:a1> * <nat:7> ; | . This forwards $ \{ <var:J> = <var:L> \land <var:a1> = <var:L> \land <var:a0> = <nat:5> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:a1> = <nat:7> * <var:L> \land <var:a0> = <nat:5> \} $ . This is sound through the assignment law obtained from Hoare techniques . Now , the command assigning $ <var:a1$ into $ <var:N>$ . This forwards the precondition $ \{ <var:J> = <var:L> \land <var:a1> = <nat:7> * <var:L> \land <var:a0> = <nat:5> \} $ as the condition $ \{ <var:J> = <var:L> \land <var:a0> = <nat:5> \land <var:N> = <nat:7> * <var:L> \} $ . Observing the subsequent bit of code in the code segment , we see the environment update statement \verb | <var:N> := <var:N> + <var:a0> | . This transfers the precondition $ \{ <var:J> = <var:L> \land <var:a0> = <nat:5> \land <var:N> = <nat:7> * <var:L> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:N> = <nat:7> * <var:L> + <nat:5> \} $ . This is ensured using the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:J> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:7> ; <var:N> := <var:a1> <var:N> := <var:N> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:J> = <var:L> }} <def:poly> {{ <var:N> = <nat:7> * <var:L> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:a1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:a1> = <var:L> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:a1> = <nat:7> * <var:L> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:a0> = <nat:5> /\ <var:N> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:N> = <nat:7> * <var:L> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 