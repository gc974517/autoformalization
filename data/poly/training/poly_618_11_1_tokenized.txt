\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J1> := <var:V> ; <var:J2> := <var:J1> * <var:V> ; <var:J3> := <var:J2> * <var:V> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:2> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:2> ; <var:l> := <var:J3> <var:l> := <var:l> + <var:J2> <var:l> := <var:l> + <var:J1> <var:l> := <var:l> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Assuming for any positive integers $ <var:T> $ it to hold that $ <var:V> = <var:T> $ prior to interpreting our set of commands , it holds that we have $ <var:l> = <nat:2> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> ^ <nat:2> + <nat:2> \times <var:T> + <nat:7> $ when segment of code has executed . \end{theorem} \begin{proof} The argument for our code can be done using usual Hoare reasoning . Taking a look at the subsequent lines contained in the list of instructions , we have \begin{eqnarray} \{ <var:V> = <var:T> \} \, <var:J1> := <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \} \, <var:J2> := <var:J1> * <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \} \, <var:J3> := <var:J2> * <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \} \, <var:J0> := <nat:7> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \land <var:J0> = <nat:7> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \land <var:J0> = <nat:7> \} \, <var:J1> := <var:J1> * <nat:2> \, \{ <var:V> = <var:T> \land <var:J1> = <nat:2> \times <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \land <var:J0> = <nat:7> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <nat:2> \times <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \land <var:J0> = <nat:7> \} \, <var:J2> := <var:J2> * <nat:1> \, \{ <var:V> = <var:T> \land <var:J1> = <nat:2> \times <var:T> \land <var:J2> = <nat:1> \times <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \land <var:J0> = <nat:7> \} \end{eqnarray} This is known to be sound by the variable binding rule in standard Hoare techniques . Now , we see \begin{eqnarray} \{ <var:V> = <var:T> \} \, <var:J1> := <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \} \, <var:J2> := <var:J1> * <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \} \end{eqnarray} This is shown with the scheme of standard Hoare reasoning . Taking a look at the subsequent statements in our series of commands , we see \begin{eqnarray} \{ <var:V> = <var:T> \} \, <var:J1> := <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \} \, <var:J2> := <var:J1> * <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \} \\ \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \} \, <var:J3> := <var:J2> * <var:V> \, \{ <var:V> = <var:T> \land <var:J1> = <var:T> \land <var:J2> = <var:T> ^ <nat:2> \land <var:J3> = <var:T> ^ <nat:3> \} \end{eqnarray} This is shown with the assignment scheme given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J1> := <var:V> ; <var:J2> := <var:J1> * <var:V> ; <var:J3> := <var:J2> * <var:V> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:2> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:2> ; <var:l> := <var:J3> <var:l> := <var:l> + <var:J2> <var:l> := <var:l> + <var:J1> <var:l> := <var:l> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:V> = <var:T> }} <def:poly> {{ <var:l> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <var:T> /\ <var:J2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <var:T> /\ <var:J2> = <var:T> ^ <nat:2> /\ <var:J3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <var:T> /\ <var:J2> = <var:T> ^ <nat:2> /\ <var:J3> = <var:T> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <nat:2> * <var:T> /\ <var:J2> = <var:T> ^ <nat:2> /\ <var:J3> = <var:T> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <nat:2> * <var:T> /\ <var:J2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:J3> = <var:T> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <nat:2> * <var:T> /\ <var:J2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <nat:2> * <var:T> /\ <var:J2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:J0> = <nat:7> /\ <var:l> = <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J1> = <nat:2> * <var:T> /\ <var:J0> = <nat:7> /\ <var:l> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:J0> = <nat:7> /\ <var:l> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:l> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 