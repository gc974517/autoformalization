\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:Z0> := <nat:3> ; <var:H> := <var:Z0> \end{verbatim} Allowing that $ <var:X> = <var:u> $ , taking $ <var:u> \in \mathbb{N} $ , ahead of the execution of this code then $ <var:H> = <nat:3> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The application of standard Hoare reasoning results in : \begin{eqnarray} \{ <var:X> = <var:u> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:X> = <var:u> \land <var:Z0> = <nat:3> \} \\ <var:H> := <var:Z0> \\ \{ <var:X> = <var:u> \land <var:H> = <nat:3> \} \end{eqnarray} Hence , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:X> = <var:u> }} <var:Z0> := <nat:3> ; <var:H> := <var:Z0> {{ <var:H> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:H> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 