\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:3> + <var:l> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allow it to hold that $ <var:c> = <var:O> $ ahead of running our series of commands then we see $ <var:l> = <nat:2> \cdot <var:O> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is accomplished with usual Hoare reasoning . Moving on to the next step , we have the binding command yielding $ <nat:2> $ as $ <var:l>$ . This transfers $ \{ <var:c> = <var:O> \} $ into $ \{ <var:c> = <var:O> \land <var:l> = <nat:2> \} $ . Moving onward , the variable assignmet statement \verb | <var:l> := <nat:3> + <var:l> * <var:c> | . This line moves the precondition $ \{ <var:c> = <var:O> \land <var:l> = <nat:2> \} $ to $ \{ <var:c> = <var:O> \land <var:l> = <nat:2> \cdot <var:O> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <nat:3> + <var:l> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:c> = <var:O> }} <def:poly> {{ <var:l> = <nat:2> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:l> = <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 