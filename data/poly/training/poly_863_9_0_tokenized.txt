\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:B> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:B> ; <var:r2> := <var:r2> * <var:B> ; <var:U> := <var:r2> ; <var:U> := <var:U> + <var:r1> ; <var:U> := <var:U> + <var:r0> \end{verbatim} Given that we have $ <var:B> = <var:d> $ prior to the evaluation of the set of commands it must be that $ <var:U> = <nat:7> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:9> $ when list of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is shown through this decorated list of instructions . \begin{eqnarray} \{ <var:B> = <var:d> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \} \\ <var:r1> := <nat:3> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \} \\ <var:r1> := <var:r1> * <var:B> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \cdot <var:d> \} \\ <var:r2> := <nat:7> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \cdot <var:d> \land <var:r2> = <nat:7> \} \\ <var:r2> := <var:r2> * <var:B> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \cdot <var:d> \land <var:r2> = <nat:7> \cdot <var:d> \} \\ <var:r2> := <var:r2> * <var:B> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \cdot <var:d> \land <var:r2> = <nat:7> \cdot <var:d> ^ <nat:2> \} \\ <var:U> := <var:r2> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:r1> = <nat:3> \cdot <var:d> \land <var:U> = <nat:7> \cdot <var:d> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:r1> ; \\ \{ <var:B> = <var:d> \land <var:r0> = <nat:9> \land <var:U> = <nat:7> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> \} \\ <var:U> := <var:U> + <var:r0> \\ \{ <var:B> = <var:d> \land <var:U> = <nat:7> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:9> \} \end{eqnarray} Applying Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:B> = <var:d> }} <var:r0> := <nat:9> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:B> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:B> ; <var:r2> := <var:r2> * <var:B> ; <var:U> := <var:r2> ; <var:U> := <var:U> + <var:r1> ; <var:U> := <var:U> + <var:r0> {{ <var:U> = <nat:7> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> * <var:d> /\ <var:r2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> * <var:d> /\ <var:r2> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> * <var:d> /\ <var:r2> = <nat:7> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:3> * <var:d> /\ <var:U> = <nat:7> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:r0> = <nat:9> /\ <var:U> = <nat:7> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:U> = <nat:7> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 