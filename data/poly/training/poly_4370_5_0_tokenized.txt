\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:M> ; <var:p> := <var:a1> ; <var:p> := <var:p> + <var:a0> \end{verbatim} Allow that we have $ <var:M> = <var:R> $ , letting positive integer coefficients $ <var:R> $ , before executing our code it holds that we see $ <var:p> = <nat:4> \cdot <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:M> = <var:R> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:M> = <var:R> \land <var:a0> = <nat:3> \} \\ <var:a1> := <nat:4> ; \\ \{ <var:M> = <var:R> \land <var:a0> = <nat:3> \land <var:a1> = <nat:4> \} \\ <var:a1> := <var:a1> * <var:M> ; \\ \{ <var:M> = <var:R> \land <var:a0> = <nat:3> \land <var:a1> = <nat:4> \cdot <var:R> \} \\ <var:p> := <var:a1> ; \\ \{ <var:M> = <var:R> \land <var:a0> = <nat:3> \land <var:p> = <nat:4> \cdot <var:R> \} \\ <var:p> := <var:p> + <var:a0> \\ \{ <var:M> = <var:R> \land <var:p> = <nat:4> \cdot <var:R> + <nat:3> \} \end{eqnarray} Hence , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:M> = <var:R> }} <var:a0> := <nat:3> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:M> ; <var:p> := <var:a1> ; <var:p> := <var:p> + <var:a0> {{ <var:p> = <nat:4> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:a0> = <nat:3> /\ <var:p> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:p> = <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 