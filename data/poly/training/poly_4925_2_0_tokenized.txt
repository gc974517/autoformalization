\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:1> ; <var:c> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Allow that $ <var:S> = <var:K> $ ahead of the execution of the series of instructions it must be that we see $ <var:c> = <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:S> = <var:K> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:S> = <var:K> \land <var:E0> = <nat:1> \} \\ <var:c> := <var:E0> \\ \{ <var:S> = <var:K> \land <var:c> = <nat:1> \} \end{eqnarray} Considering the above , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:1> ; <var:c> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:S> = <var:K> }} <def:poly> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 