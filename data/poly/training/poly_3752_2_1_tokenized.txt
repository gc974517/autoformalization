\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:1> ; <var:f> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Given $ <var:K> = <var:F> $ prior to the evaluation of the list of commands , it holds that we see $ <var:f> = <nat:1> $ . \end{theorem} \begin{proof} The application of Hoare reasoning returns : \begin{eqnarray} \{ <var:K> = <var:F> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:K> = <var:F> \land <var:E0> = <nat:1> \} \\ <var:f> := <var:E0> \\ \{ <var:K> = <var:F> \land <var:f> = <nat:1> \} \end{eqnarray} Given the above , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:1> ; <var:f> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:K> = <var:F> }} <def:poly> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 