\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:I> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:7> ; <var:e> := <var:y1> <var:e> := <var:e> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allowing it to be that $ <var:I> = <var:J> $ ahead of the execution of this set of instructions , it holds that we see $ <var:e> = <nat:7> \times <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be given through Hoare techniques . Observing the upcoming line in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:J> \} & <var:y1> := <var:I> & \{ <var:I> = <var:J> \land <var:y1> = <var:J> \} \end{tabular} This is shown using the environment update rule obtained from typical Hoare reasoning . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:J> \} & <var:y1> := <var:I> & \{ <var:I> = <var:J> \land <var:y1> = <var:J> \} \\ \{ <var:I> = <var:J> \land <var:y1> = <var:J> \} & <var:y0> := <nat:9> & \{ <var:I> = <var:J> \land <var:y1> = <var:J> \land <var:y0> = <nat:9> \} \\ \{ <var:I> = <var:J> \land <var:y1> = <var:J> \land <var:y0> = <nat:9> \} & <var:y1> := <var:y1> * <nat:7> & \{ <var:I> = <var:J> \land <var:y1> = <nat:7> \cdot <var:J> \land <var:y0> = <nat:9> \} \end{tabular} Paying attention to the upcoming command found in our series of commands , \[ \begin{tabular} {rcl} \{ <var:I> = <var:J> \} & <var:y1> := <var:I> & \{ <var:I> = <var:J> \land <var:y1> = <var:J> \} \end{tabular} This is rigorously given by the scheme found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:I> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:7> ; <var:e> := <var:y1> <var:e> := <var:e> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:I> = <var:J> }} <def:poly> {{ <var:e> = <nat:7> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:y1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:y1> = <var:J> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:y1> = <nat:7> * <var:J> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:y0> = <nat:9> /\ <var:e> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:e> = <nat:7> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 