\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:8> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:u> ; <var:Z> := <var:H1> ; <var:Z> := <var:Z> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:u> = <var:L> $ prior to evaluating the program it must be that we have $ <var:Z> = <nat:4> \times <var:L> + <nat:8> $ once program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:L> \} \\ <var:H0> := <nat:8> ; \\ \{ <var:u> = <var:L> \land <var:H0> = <nat:8> \} \\ <var:H1> := <nat:4> ; \\ \{ <var:u> = <var:L> \land <var:H0> = <nat:8> \land <var:H1> = <nat:4> \} \\ <var:H1> := <var:H1> * <var:u> ; \\ \{ <var:u> = <var:L> \land <var:H0> = <nat:8> \land <var:H1> = <nat:4> \times <var:L> \} \\ <var:Z> := <var:H1> ; \\ \{ <var:u> = <var:L> \land <var:H0> = <nat:8> \land <var:Z> = <nat:4> \times <var:L> \} \\ <var:Z> := <var:Z> + <var:H0> \\ \{ <var:u> = <var:L> \land <var:Z> = <nat:4> \times <var:L> + <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:8> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:u> ; <var:Z> := <var:H1> ; <var:Z> := <var:Z> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:u> = <var:L> }} <def:poly> {{ <var:Z> = <nat:4> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H0> = <nat:8> /\ <var:Z> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:Z> = <nat:4> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 