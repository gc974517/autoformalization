\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:5> ; <var:U> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allow for every positive integers $ <var:v> $ that we have $ <var:g> = <var:v> $ before evaluating the code , it must be that $ <var:U> = <nat:5> $ . \end{theorem} \begin{proof} The proof of the series of instructions can be seen with typical Hoare techniques . Going to the next step , we see \verb | { <var:g> = <var:v> } <var:D0> := <nat:5> { <var:g> = <var:v> \land <var:D0> = <nat:5> } | . This is shown by the variable binding law defined by typical Hoare reasoning . Keeping momentum , we have \verb | { <var:g> = <var:v> } <var:D0> := <nat:5> { <var:g> = <var:v> \land <var:D0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:5> ; <var:U> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:g> = <var:v> }} <def:poly> {{ <var:U> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:U> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 