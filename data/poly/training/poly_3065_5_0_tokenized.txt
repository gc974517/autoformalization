\begin{document} \begin{theorem} Define a list of instructions as follows \begin{verbatim} <var:Z0> := <nat:9> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:V> ; <var:P> := <var:Z1> ; <var:P> := <var:P> + <var:Z0> \end{verbatim} Assume that $ <var:V> = <var:c> $ ( taking positive integer coefficients $ <var:c> $ ) before the evaluation of our set of instructions it follows that we have $ <var:P> = <nat:4> \times <var:c> + <nat:9> $ after set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:c> \} \\ <var:Z0> := <nat:9> ; \\ \{ <var:V> = <var:c> \land <var:Z0> = <nat:9> \} \\ <var:Z1> := <nat:4> ; \\ \{ <var:V> = <var:c> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:4> \} \\ <var:Z1> := <var:Z1> * <var:V> ; \\ \{ <var:V> = <var:c> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:4> \cdot <var:c> \} \\ <var:P> := <var:Z1> ; \\ \{ <var:V> = <var:c> \land <var:Z0> = <nat:9> \land <var:P> = <nat:4> \cdot <var:c> \} \\ <var:P> := <var:P> + <var:Z0> \\ \{ <var:V> = <var:c> \land <var:P> = <nat:4> \cdot <var:c> + <nat:9> \} \end{eqnarray} Applying Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:V> = <var:c> }} <var:Z0> := <nat:9> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:V> ; <var:P> := <var:Z1> ; <var:P> := <var:P> + <var:Z0> {{ <var:P> = <nat:4> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:Z0> = <nat:9> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:Z0> = <nat:9> /\ <var:Z1> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:Z0> = <nat:9> /\ <var:P> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:P> = <nat:4> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 