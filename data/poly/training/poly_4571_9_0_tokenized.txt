\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:N> ; <var:f2> := <nat:3> ; <var:f2> := <var:f2> * <var:N> ; <var:f2> := <var:f2> * <var:N> ; <var:C> := <var:f2> ; <var:C> := <var:C> + <var:f1> ; <var:C> := <var:C> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:N> = <var:n> $ ahead of interpreting the code it must be that $ <var:C> = <nat:3> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:9> $ when code finishes . \end{theorem} \begin{proof} The course of logic for this code is demonstrated by this decorated list of instructions . \begin{eqnarray} \{ <var:N> = <var:n> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \} \\ <var:f1> := <nat:4> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:f1> = <nat:4> \} \\ <var:f1> := <var:f1> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:f1> = <nat:4> * <var:n> \} \\ <var:f2> := <nat:3> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:f1> = <nat:4> * <var:n> \land <var:f2> = <nat:3> \} \\ <var:f2> := <var:f2> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:f1> = <nat:4> * <var:n> \land <var:f2> = <nat:3> * <var:n> \} \\ <var:f2> := <var:f2> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:f1> = <nat:4> * <var:n> \land <var:f2> = <nat:3> * <var:n> ^ <nat:2> \} \\ <var:C> := <var:f2> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:f1> = <nat:4> * <var:n> \land <var:C> = <nat:3> * <var:n> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:f1> ; \\ \{ <var:N> = <var:n> \land <var:f0> = <nat:9> \land <var:C> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> \} \\ <var:C> := <var:C> + <var:f0> \\ \{ <var:N> = <var:n> \land <var:C> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:9> \} \end{eqnarray} Applying Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:N> ; <var:f2> := <nat:3> ; <var:f2> := <var:f2> * <var:N> ; <var:f2> := <var:f2> * <var:N> ; <var:C> := <var:f2> ; <var:C> := <var:C> + <var:f1> ; <var:C> := <var:C> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:N> = <var:n> }} <def:poly> {{ <var:C> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:4> * <var:n> /\ <var:f2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:4> * <var:n> /\ <var:f2> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:4> * <var:n> /\ <var:f2> = <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:4> * <var:n> /\ <var:C> = <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:f0> = <nat:9> /\ <var:C> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:C> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 