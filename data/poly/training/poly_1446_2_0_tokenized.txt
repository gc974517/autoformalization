\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:4> ; <var:B> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:D> = <var:A> $ , given any positive integers $ <var:A> $ , ahead of interpreting this series of commands then $ <var:B> = <nat:4> $ when list of commands is done executing . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:D> = <var:A> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:D> = <var:A> \land <var:Z0> = <nat:4> \} \\ <var:B> := <var:Z0> \\ \{ <var:D> = <var:A> \land <var:B> = <nat:4> \} \end{eqnarray} Utilizing standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:4> ; <var:B> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 