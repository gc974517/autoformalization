\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:M0> := <nat:3> ; <var:j> := <var:M0> \end{verbatim} Allow $ <var:w> = <var:q> $ ahead of the execution of our set of instructions , it follows that we have $ <var:j> = <nat:3> $ once list of commands is done executing . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:w> = <var:q> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:w> = <var:q> \land <var:M0> = <nat:3> \} \\ <var:j> := <var:M0> \\ \{ <var:w> = <var:q> \land <var:j> = <nat:3> \} \end{eqnarray} As a result , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:w> = <var:q> }} <var:M0> := <nat:3> ; <var:j> := <var:M0> {{ <var:j> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:j> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 