\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:5> ; <var:l1> := <var:l1> * <var:Y> ; <var:e> := <var:l1> ; <var:e> := <var:e> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:Y> = <var:J> $ ( for some whole numbers $ <var:J> $ ) before interpreting this series of commands it must be that we see $ <var:e> = <nat:5> \times <var:J> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code can be accomplished by this decorated program . \begin{eqnarray} \{ <var:Y> = <var:J> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:Y> = <var:J> \land <var:l0> = <nat:5> \} \\ <var:l1> := <nat:5> ; \\ \{ <var:Y> = <var:J> \land <var:l0> = <nat:5> \land <var:l1> = <nat:5> \} \\ <var:l1> := <var:l1> * <var:Y> ; \\ \{ <var:Y> = <var:J> \land <var:l0> = <nat:5> \land <var:l1> = <nat:5> \times <var:J> \} \\ <var:e> := <var:l1> ; \\ \{ <var:Y> = <var:J> \land <var:l0> = <nat:5> \land <var:e> = <nat:5> \times <var:J> \} \\ <var:e> := <var:e> + <var:l0> \\ \{ <var:Y> = <var:J> \land <var:e> = <nat:5> \times <var:J> + <nat:5> \} \end{eqnarray} The application of Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:5> ; <var:l1> := <nat:5> ; <var:l1> := <var:l1> * <var:Y> ; <var:e> := <var:l1> ; <var:e> := <var:e> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Y> = <var:J> }} <def:poly> {{ <var:e> = <nat:5> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:l0> = <nat:5> /\ <var:e> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:e> = <nat:5> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 