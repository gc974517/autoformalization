\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:2> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:m> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:m> ; <var:p2> := <var:p2> * <var:m> ; <var:s> := <var:p2> ; <var:s> := <var:s> + <var:p1> ; <var:s> := <var:s> + <var:p0> \end{verbatim} Allow that $ <var:m> = <var:k> $ , given any natural coefficients $ <var:k> $ , ahead of running our program , then we see $ <var:s> = <nat:4> \times <var:k> ^ <nat:2> + <nat:6> \times <var:k> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning produces : \begin{eqnarray} \{ <var:m> = <var:k> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \} \\ <var:p1> := <nat:6> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:p1> = <nat:6> \} \\ <var:p1> := <var:p1> * <var:m> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:p1> = <nat:6> \cdot <var:k> \} \\ <var:p2> := <nat:4> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:p1> = <nat:6> \cdot <var:k> \land <var:p2> = <nat:4> \} \\ <var:p2> := <var:p2> * <var:m> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:p1> = <nat:6> \cdot <var:k> \land <var:p2> = <nat:4> \cdot <var:k> \} \\ <var:p2> := <var:p2> * <var:m> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:p1> = <nat:6> \cdot <var:k> \land <var:p2> = <nat:4> \cdot <var:k> ^ <nat:2> \} \\ <var:s> := <var:p2> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:p1> = <nat:6> \cdot <var:k> \land <var:s> = <nat:4> \cdot <var:k> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:p1> ; \\ \{ <var:m> = <var:k> \land <var:p0> = <nat:2> \land <var:s> = <nat:4> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> \} \\ <var:s> := <var:s> + <var:p0> \\ \{ <var:m> = <var:k> \land <var:s> = <nat:4> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> + <nat:2> \} \end{eqnarray} Given the above , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:m> = <var:k> }} <var:p0> := <nat:2> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:m> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:m> ; <var:p2> := <var:p2> * <var:m> ; <var:s> := <var:p2> ; <var:s> := <var:s> + <var:p1> ; <var:s> := <var:s> + <var:p0> {{ <var:s> = <nat:4> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:6> * <var:k> /\ <var:p2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:6> * <var:k> /\ <var:p2> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:6> * <var:k> /\ <var:p2> = <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:6> * <var:k> /\ <var:s> = <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:p0> = <nat:2> /\ <var:s> = <nat:4> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:s> = <nat:4> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 