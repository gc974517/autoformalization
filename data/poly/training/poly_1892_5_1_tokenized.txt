\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:l1> := <var:Y> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:2> ; <var:p> := <var:l1> <var:p> := <var:p> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assuming $ <var:Y> = <var:A> $ for every $ <var:A> \in \mathbb{N} $ before evaluating the list of commands , then we have $ <var:p> = <nat:2> \times <var:A> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions can be seen with Hoare reasoning . Taking a look at the proceeding bit of code seen in the set of instructions , we have the assignment line \verb | <var:l1> := <var:Y> ; | . This moves the precondition $ \{ <var:Y> = <var:A> \} $ as the condition $ \{ <var:Y> = <var:A> \land <var:l1> = <var:A> \} $ . This is sound through the assignment rule given in standard Hoare reasoning . Immediately after , the statement \verb | <var:l0> := <nat:5> ; | . This code redefines the condition $ \{ <var:Y> = <var:A> \land <var:l1> = <var:A> \} $ toward the postcondition $ \{ <var:Y> = <var:A> \land <var:l1> = <var:A> \land <var:l0> = <nat:5> \} $ . Stepping through , we have the assignment line \verb | <var:l1> := <var:l1> * <nat:2> ; | . This line forwards the condition $ \{ <var:Y> = <var:A> \land <var:l1> = <var:A> \land <var:l0> = <nat:5> \} $ as the condition $ \{ <var:Y> = <var:A> \land <var:l1> = <nat:2> \times <var:A> \land <var:l0> = <nat:5> \} $ . Immediately following , the variable update statement \verb | <var:p> := <var:l1> | . This code forwards the condition $ \{ <var:Y> = <var:A> \land <var:l1> = <nat:2> \times <var:A> \land <var:l0> = <nat:5> \} $ into the condition $ \{ <var:Y> = <var:A> \land <var:l0> = <nat:5> \land <var:p> = <nat:2> \times <var:A> \} $ . Shifting focus toward the next statement contained in the code segment , we see the binding line binding $ <var:p> + <var:l0$ to $ <var:p>$ . This statement takes $ \{ <var:Y> = <var:A> \land <var:l0> = <nat:5> \land <var:p> = <nat:2> \times <var:A> \} $ toward the postcondition $ \{ <var:Y> = <var:A> \land <var:p> = <nat:2> \times <var:A> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:Y> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:2> ; <var:p> := <var:l1> <var:p> := <var:p> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Y> = <var:A> }} <def:poly> {{ <var:p> = <nat:2> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:l1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:l1> = <var:A> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:l1> = <nat:2> * <var:A> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:l0> = <nat:5> /\ <var:p> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:p> = <nat:2> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 