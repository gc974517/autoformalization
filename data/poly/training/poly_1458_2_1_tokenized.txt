\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:P0> := <nat:3> ; <var:d> := <var:P0> \end{verbatim} Assuming $ <var:v> = <var:f> $ ahead of running our set of instructions it holds that we have $ <var:d> = <nat:3> $ once segment of code exits . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is evident by typical Hoare reasoning . Observing the proceeding line seen in the series of instructions , we have \begin{verbatim} { <var:v> = <var:f> } <var:P0> := <nat:3> { <var:v> = <var:f> \land <var:P0> = <nat:3> } \end{verbatim} Observing the subsequent step found in our segment of code , \begin{verbatim} { <var:v> = <var:f> } <var:P0> := <nat:3> { <var:v> = <var:f> \land <var:P0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:v> = <var:f> }} <var:P0> := <nat:3> ; <var:d> := <var:P0> {{ <var:d> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:f> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:f> /\ <var:d> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 