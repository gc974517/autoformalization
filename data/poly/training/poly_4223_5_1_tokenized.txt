\begin{document} \begin{theorem} Consider a set of instructions as \begin{verbatim} <var:j1> := <var:Y> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:6> ; <var:D> := <var:j1> <var:D> := <var:D> + <var:j0> \end{verbatim} Allow it to hold that $ <var:Y> = <var:i> $ ahead of the evaluation of the segment of code , it must be that we see $ <var:D> = <nat:6> \times <var:i> + <nat:5> $ when code finishes . \end{theorem} \begin{proof} Proving correctness for the code can be seen with usual Hoare logic . Further , we have the variable assignmet statement defining $ <var:Y> $ to $ <var:j1>$ . This statement transfers $ \{ <var:Y> = <var:i> \} $ toward $ \{ <var:Y> = <var:i> \land <var:j1> = <var:i> \} $ . This is given with the assignment scheme of usual Hoare logic . Advancing on , we have the binding code \verb | <var:j0> := <nat:5> ; | . This code transfers the condition $ \{ <var:Y> = <var:i> \land <var:j1> = <var:i> \} $ into the condition $ \{ <var:Y> = <var:i> \land <var:j1> = <var:i> \land <var:j0> = <nat:5> \} $ . Taking another step toward the upcoming command contained in our segment of code , we see the assignment command defining $ <var:j1> * <nat:6> $ toward $ <var:j1>$ . This code transfers the condition $ \{ <var:Y> = <var:i> \land <var:j1> = <var:i> \land <var:j0> = <nat:5> \} $ to $ \{ <var:Y> = <var:i> \land <var:j1> = <nat:6> * <var:i> \land <var:j0> = <nat:5> \} $ . This is shown by the assignment law given in Hoare techniques . Jumping to the next statement found in the set of commands , we have the environment update command \verb | <var:D> := <var:j1> | . This forwards the condition $ \{ <var:Y> = <var:i> \land <var:j1> = <nat:6> * <var:i> \land <var:j0> = <nat:5> \} $ toward the condition $ \{ <var:Y> = <var:i> \land <var:j0> = <nat:5> \land <var:D> = <nat:6> * <var:i> \} $ . This is shown to be logically sound by the assignment rule of typical Hoare logic . Focusing on the proceeding line in our list of instructions , the variable assignmet command defining $ <var:D> + <var:j0$ toward $ <var:D>$ . This forwards $ \{ <var:Y> = <var:i> \land <var:j0> = <nat:5> \land <var:D> = <nat:6> * <var:i> \} $ toward $ \{ <var:Y> = <var:i> \land <var:D> = <nat:6> * <var:i> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Y> = <var:i> }} <var:j1> := <var:Y> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:6> ; <var:D> := <var:j1> <var:D> := <var:D> + <var:j0> {{ <var:D> = <nat:6> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:j1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:j1> = <var:i> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:j1> = <nat:6> * <var:i> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:j0> = <nat:5> /\ <var:D> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:D> = <nat:6> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 