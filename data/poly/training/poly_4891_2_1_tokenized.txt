\begin{document} \begin{theorem} Define a segment of code : \begin{verbatim} <var:r0> := <nat:8> ; <var:j> := <var:r0> \end{verbatim} Assume that $ <var:M> = <var:q> $ before executing our series of commands it must be that we have $ <var:j> = <nat:8> $ after series of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be accomplished through standard Hoare logic . Further , we see the statement \verb | <var:r0> := <nat:8> ; | . This code takes the precondition $ \{ <var:M> = <var:q> \} $ into the postcondition $ \{ <var:M> = <var:q> \land <var:r0> = <nat:8> \} $ . This is sound by the assignment inference rule defined in usual Hoare techniques . Taking another step toward the subsequent command contained in our program , we have the variable update command \verb | <var:j> := <var:r0> | . This advances the condition $ \{ <var:M> = <var:q> \land <var:r0> = <nat:8> \} $ into $ \{ <var:M> = <var:q> \land <var:j> = <nat:8> \} $ . This is deduced by the assignment scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <var:r0> := <nat:8> ; <var:j> := <var:r0> {{ <var:j> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:j> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 