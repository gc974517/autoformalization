\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:4> + <var:B> * <var:x> ; <var:B> := <nat:4> + <var:B> * <var:x> ; <var:B> := <nat:1> + <var:B> * <var:x> ; <var:B> := <var:B> * <var:x> ; <var:B> := <nat:1> + <var:B> * <var:x> ; <var:B> := <nat:4> + <var:B> * <var:x> ; <var:B> := <nat:3> + <var:B> * <var:x> ; <var:B> := <nat:1> + <var:B> * <var:x> ; <var:B> := <var:B> * <var:x> ; <var:B> := <nat:3> + <var:B> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Allow for all positive coefficients $ <var:j> $ it to hold that $ <var:x> = <var:j> $ before evaluating our segment of code , it follows that we have $ <var:B> = <nat:4> \times <var:j> ^ <nat:10> + <nat:4> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:1> \times <var:j> ^ <nat:7> + <nat:1> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> $ once list of commands has executed . \end{theorem} \begin{proof} The course of logic for the program can be shown with Hoare reasoning . Observing the following bit of code seen in our set of instructions , the variable update statement giving $ <nat:4> $ to $ <var:B>$ . This statement advances the precondition $ \{ <var:x> = <var:j> \} $ toward the postcondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule obtained from usual Hoare techniques . Taking another step toward the following line of code seen in the code , we see the variable update command \verb | <var:B> := <nat:4> + <var:B> * <var:x> ; | . This command redefines the precondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> \} $ into the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> + <nat:4> \} $ . Moving forward to the proceeding command in the segment of code , the assignment statement defining $ <nat:4> + <var:B> * <var:x> $ into $ <var:B>$ . This transfers the precondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> + <nat:4> \} $ as the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> \} $ . Moving on to the subsequent piece of code in the code segment , we have the line yielding $ <nat:1> + <var:B> * <var:x> $ to $ <var:B>$ . This statement takes the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> \} $ to $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> \} $ . Stepping forward , the environment update statement yielding $ <var:B> * <var:x> $ to $ <var:B>$ . This command forwards the precondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> \} $ as $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + \} $ . Considering the upcoming line in the program , we see the variable update line \verb | <var:B> := <nat:1> + <var:B> * <var:x> ; | . This takes the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + \} $ toward the postcondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> \} $ . Moving forward to the next step , we have the variable update statement binding $ <nat:4> + <var:B> * <var:x> $ toward $ <var:B>$ . This code advances the precondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> \} $ toward the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:4> \} $ . This is deduced by the assignment rule found in Hoare logic . Moving on to the upcoming bit of code seen in our series of commands , we have the variable update command \verb | <var:B> := <nat:3> + <var:B> * <var:x> ; | . This command takes the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:4> \} $ toward the postcondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ . This is known to be sound with the assignment rule defined by typical Hoare logic . Looking at the following bit of code in the program , the variable assignmet code \verb | <var:B> := <nat:1> + <var:B> * <var:x> ; | . This statement takes the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ into $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} $ . This is guaranteed through the assignment law given in typical Hoare logic . Observing the upcoming step contained in our series of instructions , we see the variable binding line yielding $ <var:B> * <var:x> $ toward $ <var:B>$ . This line transfers $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} $ to $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + \} $ . Now , we see the binding command binding $ <nat:3> + <var:B> * <var:x$ into $ <var:B>$ . This moves the condition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + \} $ toward the postcondition $ \{ <var:x> = <var:j> \land <var:B> = <nat:4> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:4> ; <var:B> := <nat:4> + <var:B> * <var:x> ; <var:B> := <nat:4> + <var:B> * <var:x> ; <var:B> := <nat:1> + <var:B> * <var:x> ; <var:B> := <var:B> * <var:x> ; <var:B> := <nat:1> + <var:B> * <var:x> ; <var:B> := <nat:4> + <var:B> * <var:x> ; <var:B> := <nat:3> + <var:B> * <var:x> ; <var:B> := <nat:1> + <var:B> * <var:x> ; <var:B> := <var:B> * <var:x> ; <var:B> := <nat:3> + <var:B> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:x> = <var:j> }} <def:poly> {{ <var:B> = <nat:4> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:j> /\ <var:B> = <nat:4> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 