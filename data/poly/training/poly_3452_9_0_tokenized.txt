\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:R> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:R> ; <var:J2> := <var:J2> * <var:R> ; <var:d> := <var:J2> ; <var:d> := <var:d> + <var:J1> ; <var:d> := <var:d> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:R> = <var:l> $ ahead of the execution of our set of instructions it holds that we have $ <var:d> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> $ when code segment finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:l> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \} \\ <var:J1> := <nat:4> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:J1> = <nat:4> \} \\ <var:J1> := <var:J1> * <var:R> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:J1> = <nat:4> * <var:l> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:J1> = <nat:4> * <var:l> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:R> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:J1> = <nat:4> * <var:l> \land <var:J2> = <nat:2> * <var:l> \} \\ <var:J2> := <var:J2> * <var:R> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:J1> = <nat:4> * <var:l> \land <var:J2> = <nat:2> * <var:l> ^ <nat:2> \} \\ <var:d> := <var:J2> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:J1> = <nat:4> * <var:l> \land <var:d> = <nat:2> * <var:l> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:J1> ; \\ \{ <var:R> = <var:l> \land <var:J0> = <nat:1> \land <var:d> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> \} \\ <var:d> := <var:d> + <var:J0> \\ \{ <var:R> = <var:l> \land <var:d> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> \} \end{eqnarray} Applying usual Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:1> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:R> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:R> ; <var:J2> := <var:J2> * <var:R> ; <var:d> := <var:J2> ; <var:d> := <var:d> + <var:J1> ; <var:d> := <var:d> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:R> = <var:l> }} <def:poly> {{ <var:d> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:4> * <var:l> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:4> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:4> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:4> * <var:l> /\ <var:d> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J0> = <nat:1> /\ <var:d> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:d> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 