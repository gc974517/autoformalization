\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:d> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:d> ; <var:i2> := <var:i2> * <var:d> ; <var:N> := <var:i2> ; <var:N> := <var:N> + <var:i1> ; <var:N> := <var:N> + <var:i0> \end{verbatim} Assume that $ <var:d> = <var:t> $ ahead of running our set of commands it follows that we have $ <var:N> = <nat:9> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is demonstrated with usual Hoare logic . Advancing to the upcoming step in the series of commands , the environment update command \verb | <var:i0> := <nat:3> ; | . This code advances $ \{ <var:d> = <var:t> \} $ as the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \} $ . This is given through the assignment law given by usual Hoare reasoning . Next , we have the statement yielding $ <nat:8> $ as $ <var:i1>$ . This moves $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \} $ as the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \} $ . Further , we see the variable update code \verb | <var:i1> := <var:i1> * <var:d> ; | . This transfers the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \} $ as the postcondition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \} $ . This is known to be sound through the assignment rule defined by Hoare logic . Observing the upcoming piece of code seen in our list of commands , the binding code giving $ <nat:9> $ to $ <var:i2>$ . This statement transfers the precondition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \} $ into the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:i2> = <nat:9> \} $ . This is deduced by the assignment inference rule from typical Hoare reasoning . Observing the next bit of code seen in our set of commands , the variable update line letting $ <var:i2> * <var:d> $ into $ <var:i2>$ . This transfers the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:i2> = <nat:9> \} $ as the postcondition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:i2> = <nat:9> \cdot <var:t> \} $ . Following , we see the variable binding code assigning $ <var:i2> * <var:d> $ as $ <var:i2>$ . This command takes the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:i2> = <nat:9> \cdot <var:t> \} $ into the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:i2> = <nat:9> \cdot <var:t> ^ <nat:2> \} $ . Moving forward to the proceeding piece of code found in our series of instructions , we see the statement binding $ <var:i2> $ toward $ <var:N>$ . This statement takes the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:i2> = <nat:9> \cdot <var:t> ^ <nat:2> \} $ into $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:N> = <nat:9> \cdot <var:t> ^ <nat:2> \} $ . Going to the next step , the variable assignmet code \verb | <var:N> := <var:N> + <var:i1> ; | . This transfers the condition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:i1> = <nat:8> \cdot <var:t> \land <var:N> = <nat:9> \cdot <var:t> ^ <nat:2> \} $ toward $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:N> = <nat:9> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> \} $ . This is shown by the assignment inference rule obtained from standard Hoare techniques . Now , we see the code letting $ <var:N> + <var:i0$ to $ <var:N>$ . This statement redefines the precondition $ \{ <var:d> = <var:t> \land <var:i0> = <nat:3> \land <var:N> = <nat:9> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> \} $ into the postcondition $ \{ <var:d> = <var:t> \land <var:N> = <nat:9> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> + <nat:3> \} $ . This is given using the assignment inference rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:d> = <var:t> }} <var:i0> := <nat:3> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:d> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:d> ; <var:i2> := <var:i2> * <var:d> ; <var:N> := <var:i2> ; <var:N> := <var:N> + <var:i1> ; <var:N> := <var:N> + <var:i0> {{ <var:N> = <nat:9> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:8> * <var:t> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:8> * <var:t> /\ <var:i2> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:8> * <var:t> /\ <var:i2> = <nat:9> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:8> * <var:t> /\ <var:N> = <nat:9> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:i0> = <nat:3> /\ <var:N> = <nat:9> * <var:t> ^ <nat:2> + <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:N> = <nat:9> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 