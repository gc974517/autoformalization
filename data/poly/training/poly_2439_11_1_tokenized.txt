\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:E1> := <var:n> ; <var:E2> := <var:E1> * <var:n> ; <var:E3> := <var:E2> * <var:n> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:7> ; <var:E2> := <var:E2> * <nat:4> ; <var:E3> := <var:E3> * <nat:1> ; <var:g> := <var:E3> <var:g> := <var:g> + <var:E2> <var:g> := <var:g> + <var:E1> <var:g> := <var:g> + <var:E0> \end{verbatim} Assume that $ <var:n> = <var:B> $ prior to the evaluation of our series of commands , it follows that we have $ <var:g> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:9> $ once list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:B> \} \\ <var:E1> := <var:n> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <var:B> \} \\ <var:E2> := <var:E1> * <var:n> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:n> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E1> := <var:E1> * <nat:7> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <nat:7> \cdot <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E2> := <var:E2> * <nat:4> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <nat:7> \cdot <var:B> \land <var:E2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E3> := <var:E3> * <nat:1> ; \\ \{ <var:n> = <var:B> \land <var:E1> = <nat:7> \cdot <var:B> \land <var:E2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:E3> = <nat:1> \cdot <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:g> := <var:E3> \\ \{ <var:n> = <var:B> \land <var:E1> = <nat:7> \cdot <var:B> \land <var:E2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:E0> = <nat:9> \land <var:g> = <nat:1> \cdot <var:B> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:E2> \\ \{ <var:n> = <var:B> \land <var:E1> = <nat:7> \cdot <var:B> \land <var:E0> = <nat:9> \land <var:g> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:E1> \\ \{ <var:n> = <var:B> \land <var:E0> = <nat:9> \land <var:g> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> \} \\ <var:g> := <var:g> + <var:E0> \\ \{ <var:n> = <var:B> \land <var:g> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:9> \} \end{eqnarray} Applying usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:n> = <var:B> }} <var:E1> := <var:n> ; <var:E2> := <var:E1> * <var:n> ; <var:E3> := <var:E2> * <var:n> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:7> ; <var:E2> := <var:E2> * <nat:4> ; <var:E3> := <var:E3> * <nat:1> ; <var:g> := <var:E3> <var:g> := <var:g> + <var:E2> <var:g> := <var:g> + <var:E1> <var:g> := <var:g> + <var:E0> {{ <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <nat:7> * <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <nat:7> * <var:B> /\ <var:E2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <nat:7> * <var:B> /\ <var:E2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:E3> = <nat:1> * <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <nat:7> * <var:B> /\ <var:E2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:E0> = <nat:9> /\ <var:g> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E1> = <nat:7> * <var:B> /\ <var:E0> = <nat:9> /\ <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:E0> = <nat:9> /\ <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 