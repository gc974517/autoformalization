\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:s> ; <var:j> := <var:J1> ; <var:j> := <var:j> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow taking natural numbers $ <var:G> $ that $ <var:s> = <var:G> $ ahead of the execution of the code then we see $ <var:j> = <nat:6> \cdot <var:G> + <nat:6> $ once set of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning produces : \begin{eqnarray} \{ <var:s> = <var:G> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:s> = <var:G> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:6> ; \\ \{ <var:s> = <var:G> \land <var:J0> = <nat:6> \land <var:J1> = <nat:6> \} \\ <var:J1> := <var:J1> * <var:s> ; \\ \{ <var:s> = <var:G> \land <var:J0> = <nat:6> \land <var:J1> = <nat:6> * <var:G> \} \\ <var:j> := <var:J1> ; \\ \{ <var:s> = <var:G> \land <var:J0> = <nat:6> \land <var:j> = <nat:6> * <var:G> \} \\ <var:j> := <var:j> + <var:J0> \\ \{ <var:s> = <var:G> \land <var:j> = <nat:6> * <var:G> + <nat:6> \} \end{eqnarray} As a consequence , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:s> ; <var:j> := <var:J1> ; <var:j> := <var:j> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:s> = <var:G> }} <def:poly> {{ <var:j> = <nat:6> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:J0> = <nat:6> /\ <var:j> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:j> = <nat:6> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 