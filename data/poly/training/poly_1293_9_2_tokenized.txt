\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F> := <nat:3> ; <var:F> := <nat:1> + <var:F> * <var:Y> ; <var:F> := <var:F> * <var:Y> ; <var:F> := <var:F> * <var:Y> ; <var:F> := <var:F> * <var:Y> ; <var:F> := <nat:4> + <var:F> * <var:Y> ; <var:F> := <nat:4> + <var:F> * <var:Y> ; <var:F> := <nat:4> + <var:F> * <var:Y> ; <var:F> := <nat:1> + <var:F> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assuming that $ <var:Y> = <var:O> $ before running our series of commands , it follows that we see $ <var:F> = <nat:3> \times <var:O> ^ <nat:8> + <nat:1> \times <var:O> ^ <nat:7> + <nat:4> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:1> $ once series of commands has finished . \end{theorem} \begin{proof} Using Hoare techniques gives us : \begin{eqnarray} \{ <var:Y> = <var:O> \} \\ <var:F> := <nat:3> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \} \\ <var:F> := <nat:1> + <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> + <nat:1> \} \\ <var:F> := <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> + \} \\ <var:F> := <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:3> + <nat:1> \times <var:O> ^ <nat:2> + \} \\ <var:F> := <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:4> + <nat:1> \times <var:O> ^ <nat:3> + \} \\ <var:F> := <nat:4> + <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:5> + <nat:1> \times <var:O> ^ <nat:4> + <nat:4> \} \\ <var:F> := <nat:4> + <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:6> + <nat:1> \times <var:O> ^ <nat:5> + <nat:4> \times <var:O> + <nat:4> \} \\ <var:F> := <nat:4> + <var:F> * <var:Y> ; \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:7> + <nat:1> \times <var:O> ^ <nat:6> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:4> \} \\ <var:F> := <nat:1> + <var:F> * <var:Y> \\ \{ <var:Y> = <var:O> \land <var:F> = <nat:3> \times <var:O> ^ <nat:8> + <nat:1> \times <var:O> ^ <nat:7> + <nat:4> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:1> \} \end{eqnarray} Therefore , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:3> ; <var:F> := <nat:1> + <var:F> * <var:Y> ; <var:F> := <var:F> * <var:Y> ; <var:F> := <var:F> * <var:Y> ; <var:F> := <var:F> * <var:Y> ; <var:F> := <nat:4> + <var:F> * <var:Y> ; <var:F> := <nat:4> + <var:F> * <var:Y> ; <var:F> := <nat:4> + <var:F> * <var:Y> ; <var:F> := <nat:1> + <var:F> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Y> = <var:O> }} <def:poly> {{ <var:F> = <nat:3> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:4> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:F> = <nat:3> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:4> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 