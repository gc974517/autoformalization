\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:o> ; <var:b> := <var:u1> ; <var:b> := <var:b> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Allow $ <var:o> = <var:d> $ ahead of interpreting this set of commands it follows that we see $ <var:b> = <nat:9> * <var:d> + <nat:5> $ once code segment is done . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives : \begin{eqnarray} \{ <var:o> = <var:d> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:o> = <var:d> \land <var:u0> = <nat:5> \} \\ <var:u1> := <nat:9> ; \\ \{ <var:o> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> \} \\ <var:u1> := <var:u1> * <var:o> ; \\ \{ <var:o> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> \cdot <var:d> \} \\ <var:b> := <var:u1> ; \\ \{ <var:o> = <var:d> \land <var:u0> = <nat:5> \land <var:b> = <nat:9> \cdot <var:d> \} \\ <var:b> := <var:b> + <var:u0> \\ \{ <var:o> = <var:d> \land <var:b> = <nat:9> \cdot <var:d> + <nat:5> \} \end{eqnarray} Thus , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:o> ; <var:b> := <var:u1> ; <var:b> := <var:b> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:o> = <var:d> }} <def:poly> {{ <var:b> = <nat:9> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:u0> = <nat:5> /\ <var:b> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:b> = <nat:9> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 