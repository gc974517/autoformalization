\begin{document} \begin{theorem} Let the following code in \emph{Imp} as follows \begin{verbatim} <var:m1> := <var:S> ; <var:m2> := <var:m1> * <var:S> ; <var:m3> := <var:m2> * <var:S> ; <var:m0> := <nat:9> ; <var:m2> := <var:m2> * <nat:4> ; <var:m3> := <var:m3> * <nat:9> ; <var:Q> := <var:m3> <var:Q> := <var:Q> + <var:m2> <var:Q> := <var:Q> + <var:m0> \end{verbatim} Allow $ <var:S> = <var:K> $ before the execution of our list of commands it follows that we see $ <var:Q> = <nat:9> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is done with Hoare logic . Advancing to the next steps found in the list of commands , we see \verb | { <var:S> = <var:K> } <var:m1> := <var:S> { <var:S> = <var:K> \land <var:m1> = <var:K> } | , \verb | { <var:S> = <var:K> \land <var:m1> = <var:K> } <var:m2> := <var:m1> * <var:S> { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> } | , \verb | { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> } <var:m3> := <var:m2> * <var:S> { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> } | , \verb | { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> } <var:m0> := <nat:9> { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> \land <var:m0> = <nat:9> } | , \verb | { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> \land <var:m0> = <nat:9> } <var:m2> := <var:m2> * <nat:4> { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <nat:4> * <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> \land <var:m0> = <nat:9> } | and \verb | { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <nat:4> * <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> \land <var:m0> = <nat:9> } <var:m3> := <var:m3> * <nat:9> { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <nat:4> * <var:K> ^ <nat:2> \land <var:m3> = <nat:9> * <var:K> ^ <nat:3> \land <var:m0> = <nat:9> } | . This is sound with the variable binding rule found in typical Hoare reasoning . After , we see \verb | { <var:S> = <var:K> } <var:m1> := <var:S> { <var:S> = <var:K> \land <var:m1> = <var:K> } | . Moving forward , we have \verb | { <var:S> = <var:K> } <var:m1> := <var:S> { <var:S> = <var:K> \land <var:m1> = <var:K> } | and \verb | { <var:S> = <var:K> \land <var:m1> = <var:K> } <var:m2> := <var:m1> * <var:S> { <var:S> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> } | . This is rigorously given by the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:S> = <var:K> }} <var:m1> := <var:S> ; <var:m2> := <var:m1> * <var:S> ; <var:m3> := <var:m2> * <var:S> ; <var:m0> := <nat:9> ; <var:m2> := <var:m2> * <nat:4> ; <var:m3> := <var:m3> * <nat:9> ; <var:Q> := <var:m3> <var:Q> := <var:Q> + <var:m2> <var:Q> := <var:Q> + <var:m0> {{ <var:Q> = <nat:9> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <var:K> ^ <nat:2> /\ <var:m3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <var:K> ^ <nat:2> /\ <var:m3> = <var:K> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:m3> = <var:K> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:m3> = <nat:9> * <var:K> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:m0> = <nat:9> /\ <var:Q> = <nat:9> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:m1> = <var:K> /\ <var:m0> = <nat:9> /\ <var:Q> = <nat:9> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:Q> = <nat:9> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 