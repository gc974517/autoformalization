\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:2> ; <var:f> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:P> = <var:r> $ before evaluating this segment of code it follows that we see $ <var:f> = <nat:2> $ once list of commands has executed . \end{theorem} \begin{proof} We can see that this decorated code . \begin{eqnarray} \{ <var:P> = <var:r> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:P> = <var:r> \land <var:m0> = <nat:2> \} \\ <var:f> := <var:m0> \\ \{ <var:P> = <var:r> \land <var:f> = <nat:2> \} \end{eqnarray} Using typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:f> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:P> = <var:r> }} <def:poly> {{ <var:f> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:f> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 