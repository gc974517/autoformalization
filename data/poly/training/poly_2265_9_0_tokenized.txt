\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:Q> ; <var:J2> := <nat:6> ; <var:J2> := <var:J2> * <var:Q> ; <var:J2> := <var:J2> * <var:Q> ; <var:w> := <var:J2> ; <var:w> := <var:w> + <var:J1> ; <var:w> := <var:w> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Assuming , for every positive coefficients $ <var:q> $ , $ <var:Q> = <var:q> $ prior to running our set of commands then we see $ <var:w> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> + <nat:1> $ after program has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:q> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \} \\ <var:J1> := <nat:5> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \} \\ <var:J1> := <var:J1> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:q> \} \\ <var:J2> := <nat:6> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:q> \land <var:J2> = <nat:6> \} \end{eqnarray} Allowing interpreting our program produces : \begin{eqnarray} <var:J2> := <var:J2> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:q> \land <var:J2> = <nat:6> \cdot <var:q> \} \\ <var:J2> := <var:J2> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:q> \land <var:J2> = <nat:6> \cdot <var:q> ^ <nat:2> \} \\ <var:w> := <var:J2> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:q> \land <var:w> = <nat:6> \cdot <var:q> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:J1> ; \\ \{ <var:Q> = <var:q> \land <var:J0> = <nat:1> \land <var:w> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> \} \\ <var:w> := <var:w> + <var:J0> \\ \{ <var:Q> = <var:q> \land <var:w> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> + <nat:1> \} \end{eqnarray} Using typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:1> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:Q> ; <var:J2> := <nat:6> ; <var:J2> := <var:J2> * <var:Q> ; <var:J2> := <var:J2> * <var:Q> ; <var:w> := <var:J2> ; <var:w> := <var:w> + <var:J1> ; <var:w> := <var:w> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <def:poly> {{ <var:w> = <nat:6> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:q> /\ <var:J2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:q> /\ <var:J2> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:q> /\ <var:J2> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:q> /\ <var:w> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:J0> = <nat:1> /\ <var:w> = <nat:6> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:w> = <nat:6> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 