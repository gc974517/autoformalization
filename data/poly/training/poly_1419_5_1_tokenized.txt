\begin{document} \begin{theorem} Consider a program as follows \begin{verbatim} <var:e1> := <var:G> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:4> ; <var:F> := <var:e1> <var:F> := <var:F> + <var:e0> \end{verbatim} Assuming it to hold that $ <var:G> = <var:t> $ , for any positive numbers $ <var:t> $ , prior to interpreting the segment of code , then we see $ <var:F> = <nat:4> \cdot <var:t> + <nat:6> $ after program has finished executing . \end{theorem} \begin{proof} The method of proof for the series of commands can be seen through typical Hoare techniques . Moving forward to the proceeding piece of code found in the series of instructions , the code \verb | <var:e1> := <var:G> ; | . This code advances the precondition $ \{ <var:G> = <var:t> \} $ toward $ \{ <var:G> = <var:t> \land <var:e1> = <var:t> \} $ . This is known to be sound through the assignment inference rule in Hoare logic . Next , the binding line yielding $ <nat:6> $ toward $ <var:e0>$ . This command takes $ \{ <var:G> = <var:t> \land <var:e1> = <var:t> \} $ toward the condition $ \{ <var:G> = <var:t> \land <var:e1> = <var:t> \land <var:e0> = <nat:6> \} $ . This is shown through the assignment law in Hoare logic . Now , the code yielding $ <var:e1> * <nat:4> $ as $ <var:e1>$ . This line transfers the condition $ \{ <var:G> = <var:t> \land <var:e1> = <var:t> \land <var:e0> = <nat:6> \} $ toward the condition $ \{ <var:G> = <var:t> \land <var:e1> = <nat:4> * <var:t> \land <var:e0> = <nat:6> \} $ . This is known to be sound through the assignment inference rule of standard Hoare logic . Stepping forward , we have the line yielding $ <var:e1$ as $ <var:F>$ . This command forwards $ \{ <var:G> = <var:t> \land <var:e1> = <nat:4> * <var:t> \land <var:e0> = <nat:6> \} $ into the postcondition $ \{ <var:G> = <var:t> \land <var:e0> = <nat:6> \land <var:F> = <nat:4> * <var:t> \} $ . Advancing on , we have the code giving $ <var:F> + <var:e0$ as $ <var:F>$ . This advances the precondition $ \{ <var:G> = <var:t> \land <var:e0> = <nat:6> \land <var:F> = <nat:4> * <var:t> \} $ toward the postcondition $ \{ <var:G> = <var:t> \land <var:F> = <nat:4> * <var:t> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <var:e1> := <var:G> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:4> ; <var:F> := <var:e1> <var:F> := <var:F> + <var:e0> {{ <var:F> = <nat:4> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e1> = <var:t> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e1> = <nat:4> * <var:t> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:6> /\ <var:F> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:F> = <nat:4> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 