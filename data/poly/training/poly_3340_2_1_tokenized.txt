\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:6> ; <var:R> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Allowing ( given every $ <var:D> $ ) that we have $ <var:s> = <var:D> $ before the evaluation of this code segment , it must be that $ <var:R> = <nat:6> $ . \end{theorem} \begin{proof} The argument for this code can be done with Hoare logic . Keeping momentum , the assignment line yielding $ <nat:6> $ to $ <var:a0>$ . This moves $ \{ <var:s> = <var:D> \} $ into the condition $ \{ <var:s> = <var:D> \land <var:a0> = <nat:6> \} $ . This is guaranteed by the assignment scheme defined by usual Hoare logic . Focusing on the following statement found in our series of commands , the variable assignmet command yielding $ <var:a0$ to $ <var:R>$ . This takes the condition $ \{ <var:s> = <var:D> \land <var:a0> = <nat:6> \} $ as $ \{ <var:s> = <var:D> \land <var:R> = <nat:6> \} $ . This is deduced by the assignment law in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:R> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:s> = <var:D> }} <def:poly> {{ <var:R> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:R> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 