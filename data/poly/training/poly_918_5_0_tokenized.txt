\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:J0> := <nat:8> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:g> ; <var:W> := <var:J1> ; <var:W> := <var:W> + <var:J0> \end{verbatim} Assuming it to hold that $ <var:g> = <var:k> $ given any positive coefficients $ <var:k> $ ahead of interpreting the set of commands , then $ <var:W> = <nat:1> \times <var:k> + <nat:8> $ once series of commands terminates . \end{theorem} \begin{proof} Showing our claim about correctness for our code is given by typical Hoare reasoning . Immediately after , we have the statement \verb | <var:J0> := <nat:8> ; | . This takes the condition $ \{ <var:g> = <var:k> \} $ as $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \} $ . This is shown to be logically sound with the assignment inference rule found in standard Hoare reasoning . Going forward , the assignment statement \verb | <var:J1> := <nat:1> ; | . This transfers the precondition $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \} $ toward $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> \} $ . This is sound through the assignment law found in usual Hoare reasoning . Immediately following , the variable assignmet code \verb | <var:J1> := <var:J1> * <var:g> ; | . This forwards the condition $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> \} $ toward the postcondition $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> \cdot <var:k> \} $ . Honing in on the following bit of code found in our set of instructions , the assignment line \verb | <var:W> := <var:J1> ; | . This redefines the condition $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \land <var:J1> = <nat:1> \cdot <var:k> \} $ into the postcondition $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \land <var:W> = <nat:1> \cdot <var:k> \} $ . Looking at the following line of code in our code segment , we have the assignment command giving $ <var:W> + <var:J0$ into $ <var:W>$ . This moves the condition $ \{ <var:g> = <var:k> \land <var:J0> = <nat:8> \land <var:W> = <nat:1> \cdot <var:k> \} $ as the postcondition $ \{ <var:g> = <var:k> \land <var:W> = <nat:1> \cdot <var:k> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:g> = <var:k> }} <var:J0> := <nat:8> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:g> ; <var:W> := <var:J1> ; <var:W> := <var:W> + <var:J0> {{ <var:W> = <nat:1> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:J0> = <nat:8> /\ <var:W> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:W> = <nat:1> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 