\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:8> ; <var:v> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Allow --- given any whole numbers $ <var:u> $ --- it to hold that $ <var:N> = <var:u> $ ahead of the evaluation of this list of instructions it holds that we have $ <var:v> = <nat:8> $ after list of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:u> \} \\ <var:w0> := <nat:8> ; \\ \{ <var:N> = <var:u> \land <var:w0> = <nat:8> \} \\ <var:v> := <var:w0> \\ \{ <var:N> = <var:u> \land <var:v> = <nat:8> \} \end{eqnarray} The application of typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:8> ; <var:v> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:N> = <var:u> }} <def:poly> {{ <var:v> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:v> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 