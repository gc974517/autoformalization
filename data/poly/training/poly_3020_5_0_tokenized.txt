\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:B> ; <var:P> := <var:x1> ; <var:P> := <var:P> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allowing ( taking positive numbers $ <var:t> $ ) that $ <var:B> = <var:t> $ ahead of executing our code segment , it must be that $ <var:P> = <nat:9> \cdot <var:t> + <nat:9> $ once program finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is demonstrated using usual Hoare techniques . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:t> \} & <var:x0> := <nat:9> & \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \} \end{tabular} Looking at the following bits of codecontained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:t> \} & <var:x0> := <nat:9> & \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \} \\ \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \} & <var:x1> := <nat:9> & \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \} \\ \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \} & <var:x1> := <var:x1> * <var:B> & \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> * <var:t> \} \\ \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> * <var:t> \} & <var:P> := <var:x1> & \{ <var:B> = <var:t> \land <var:x0> = <nat:9> \land <var:P> = <nat:9> * <var:t> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:9> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:B> ; <var:P> := <var:x1> ; <var:P> := <var:P> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:B> = <var:t> }} <def:poly> {{ <var:P> = <nat:9> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:x0> = <nat:9> /\ <var:P> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:P> = <nat:9> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 