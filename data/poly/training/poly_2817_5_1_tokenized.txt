\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:X> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:7> ; <var:y> := <var:k1> <var:y> := <var:y> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:X> = <var:M> $ before the evaluation of the program , then $ <var:y> = <nat:7> * <var:M> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:M> \} \\ <var:k1> := <var:X> ; \\ \{ <var:X> = <var:M> \land <var:k1> = <var:M> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:X> = <var:M> \land <var:k1> = <var:M> \land <var:k0> = <nat:9> \} \\ <var:k1> := <var:k1> * <nat:7> ; \\ \{ <var:X> = <var:M> \land <var:k1> = <nat:7> * <var:M> \land <var:k0> = <nat:9> \} \\ <var:y> := <var:k1> \\ \{ <var:X> = <var:M> \land <var:k0> = <nat:9> \land <var:y> = <nat:7> * <var:M> \} \\ <var:y> := <var:y> + <var:k0> \\ \{ <var:X> = <var:M> \land <var:y> = <nat:7> * <var:M> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:X> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:7> ; <var:y> := <var:k1> <var:y> := <var:y> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:X> = <var:M> }} <def:poly> {{ <var:y> = <nat:7> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:k1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:k1> = <var:M> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:k1> = <nat:7> * <var:M> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:k0> = <nat:9> /\ <var:y> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:M> /\ <var:y> = <nat:7> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 