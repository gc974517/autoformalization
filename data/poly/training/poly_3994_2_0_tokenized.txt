\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:a0> := <nat:3> ; <var:T> := <var:a0> \end{verbatim} Assuming ( with some whole numbers $ <var:K> $ ) it to be that $ <var:F> = <var:K> $ before evaluating our list of instructions , then we have $ <var:T> = <nat:3> $ once set of instructions is done . \end{theorem} \begin{proof} Let the following decorated series of commands . \begin{eqnarray} \{ <var:F> = <var:K> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:F> = <var:K> \land <var:a0> = <nat:3> \} \\ <var:T> := <var:a0> \\ \{ <var:F> = <var:K> \land <var:T> = <nat:3> \} \end{eqnarray} Utilizing standard Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <var:a0> := <nat:3> ; <var:T> := <var:a0> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 