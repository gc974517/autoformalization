\begin{document} \begin{theorem} Define the following segment of code : \begin{verbatim} <var:Y0> := <nat:1> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:l> ; <var:X> := <var:Y1> ; <var:X> := <var:X> + <var:Y0> \end{verbatim} Given that $ <var:l> = <var:f> $ ahead of interpreting the set of commands , then $ <var:X> = <nat:9> * <var:f> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this code segment is demonstrated by usual Hoare techniques . Taking another step toward the proceeding commands in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:f> \} & <var:Y0> := <nat:1> & \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \} \\ \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \} & <var:Y1> := <nat:9> & \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:9> \} \end{tabular} Shifting focus toward the next statements seen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:f> \} & <var:Y0> := <nat:1> & \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \} \\ \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \} & <var:Y1> := <nat:9> & \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:9> \} \\ \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:9> \} & <var:Y1> := <var:Y1> * <var:l> & \{ <var:l> = <var:f> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:9> \times <var:f> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:l> = <var:f> }} <var:Y0> := <nat:1> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:l> ; <var:X> := <var:Y1> ; <var:X> := <var:X> + <var:Y0> {{ <var:X> = <nat:9> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:Y0> = <nat:1> /\ <var:Y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:Y0> = <nat:1> /\ <var:Y1> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:Y0> = <nat:1> /\ <var:X> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:X> = <nat:9> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 