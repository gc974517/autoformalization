\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:9> ; <var:n> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Assume it to hold that $ <var:e> = <var:P> $ ahead of the evaluation of the series of instructions it follows that we have $ <var:n> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our code segment is shown by Hoare techniques . Honing in on the proceeding statement seen in the set of instructions , we have \verb | { <var:e> = <var:P> } <var:x0> := <nat:9> { <var:e> = <var:P> \land <var:x0> = <nat:9> } | . Going to the next step , we see \verb | { <var:e> = <var:P> } <var:x0> := <nat:9> { <var:e> = <var:P> \land <var:x0> = <nat:9> } | . This is ensured by the variable binding rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:9> ; <var:n> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:e> = <var:P> }} <def:poly> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 