\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:2> ; <var:U> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:C> = <var:L> $ prior to evaluating our series of commands it follows that we see $ <var:U> = <nat:2> $ after code has executed . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be done by typical Hoare reasoning . Immediately after , we have the binding code letting $ <nat:2> $ as $ <var:q0>$ . This line forwards the precondition $ \{ <var:C> = <var:L> \} $ into $ \{ <var:C> = <var:L> \land <var:q0> = <nat:2> \} $ . This is shown to be logically sound using the assignment scheme given in typical Hoare reasoning . Moving forward , we see the variable assignmet code letting $ <var:q0$ to $ <var:U>$ . This transfers the precondition $ \{ <var:C> = <var:L> \land <var:q0> = <nat:2> \} $ to $ \{ <var:C> = <var:L> \land <var:U> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:U> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:C> = <var:L> }} <def:poly> {{ <var:U> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:U> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 