\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:J> ; <var:T> := <var:A1> ; <var:T> := <var:T> + <var:A0> \end{verbatim} Assuming it to hold that $ <var:J> = <var:M> $ ( given some whole numbers $ <var:M> $ ) before the evaluation of the program , it must be that we have $ <var:T> = <nat:4> \times <var:M> + <nat:4> $ once series of commands exits . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:J> = <var:M> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:J> = <var:M> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:4> ; \\ \{ <var:J> = <var:M> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> \} \\ <var:A1> := <var:A1> * <var:J> ; \\ \{ <var:J> = <var:M> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> \times <var:M> \} \\ <var:T> := <var:A1> ; \\ \{ <var:J> = <var:M> \land <var:A0> = <nat:4> \land <var:T> = <nat:4> \times <var:M> \} \\ <var:T> := <var:T> + <var:A0> \\ \{ <var:J> = <var:M> \land <var:T> = <nat:4> \times <var:M> + <nat:4> \} \end{eqnarray} Considering the above , this series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <var:A0> := <nat:4> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:J> ; <var:T> := <var:A1> ; <var:T> := <var:T> + <var:A0> {{ <var:T> = <nat:4> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:A0> = <nat:4> /\ <var:T> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:T> = <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 