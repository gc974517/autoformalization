\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:R1> := <var:x> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:J> := <var:R1> <var:J> := <var:J> + <var:R0> \end{verbatim} Allow it to be that $ <var:x> = <var:i> $ --- given positive integer coefficients $ <var:i> $ --- ahead of the execution of this set of commands , then we have $ <var:J> = <nat:6> \cdot <var:i> + <nat:6> $ once series of commands exits . \end{theorem} \begin{proof} Observe this decorated set of commands . \begin{eqnarray} \{ <var:x> = <var:i> \} \\ <var:R1> := <var:x> ; \\ \{ <var:x> = <var:i> \land <var:R1> = <var:i> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:x> = <var:i> \land <var:R1> = <var:i> \land <var:R0> = <nat:6> \} \\ <var:R1> := <var:R1> * <nat:6> ; \\ \{ <var:x> = <var:i> \land <var:R1> = <nat:6> * <var:i> \land <var:R0> = <nat:6> \} \\ <var:J> := <var:R1> \\ \{ <var:x> = <var:i> \land <var:R0> = <nat:6> \land <var:J> = <nat:6> * <var:i> \} \\ <var:J> := <var:J> + <var:R0> \\ \{ <var:x> = <var:i> \land <var:J> = <nat:6> * <var:i> + <nat:6> \} \end{eqnarray} Using standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:x> = <var:i> }} <var:R1> := <var:x> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:J> := <var:R1> <var:J> := <var:J> + <var:R0> {{ <var:J> = <nat:6> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:R1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:R1> = <var:i> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:R1> = <nat:6> * <var:i> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:R0> = <nat:6> /\ <var:J> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:J> = <nat:6> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 