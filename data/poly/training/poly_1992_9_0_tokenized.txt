\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:a0> := <nat:7> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:N> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:N> ; <var:a2> := <var:a2> * <var:N> ; <var:f> := <var:a2> ; <var:f> := <var:f> + <var:a1> ; <var:f> := <var:f> + <var:a0> \end{verbatim} Assuming it to be that $ <var:N> = <var:W> $ given all natural numbers $ <var:W> $ before the execution of our series of commands , then we see $ <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:7> $ after code segment has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:W> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \} \\ <var:a1> := <nat:2> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> \} \\ <var:a1> := <var:a1> * <var:N> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:W> \} \\ <var:a2> := <nat:3> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:W> \land <var:a2> = <nat:3> \} \\ <var:a2> := <var:a2> * <var:N> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:W> \land <var:a2> = <nat:3> * <var:W> \} \\ <var:a2> := <var:a2> * <var:N> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:W> \land <var:a2> = <nat:3> * <var:W> ^ <nat:2> \} \\ <var:f> := <var:a2> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:W> \land <var:f> = <nat:3> * <var:W> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:a1> ; \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:7> \land <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> \} \\ <var:f> := <var:f> + <var:a0> \\ \{ <var:N> = <var:W> \land <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:7> \} \end{eqnarray} The application of Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:N> = <var:W> }} <var:a0> := <nat:7> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:N> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:N> ; <var:a2> := <var:a2> * <var:N> ; <var:f> := <var:a2> ; <var:f> := <var:f> + <var:a1> ; <var:f> := <var:f> + <var:a0> {{ <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:W> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:W> /\ <var:a2> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:W> /\ <var:a2> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:W> /\ <var:f> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:7> /\ <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 