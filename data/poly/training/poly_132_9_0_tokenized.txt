\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:L> ; <var:P2> := <nat:8> ; <var:P2> := <var:P2> * <var:L> ; <var:P2> := <var:P2> * <var:L> ; <var:S> := <var:P2> ; <var:S> := <var:S> + <var:P1> ; <var:S> := <var:S> + <var:P0> \end{verbatim} Allowing that we have $ <var:L> = <var:n> $ ( given $ <var:n> $ ) prior to the execution of our set of instructions , then we have $ <var:S> = <nat:8> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:8> $ once code segment has exited . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:n> \} \\ <var:P0> := <nat:8> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \} \\ <var:P1> := <nat:4> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:P1> = <nat:4> \} \\ <var:P1> := <var:P1> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:P1> = <nat:4> \cdot <var:n> \} \\ <var:P2> := <nat:8> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:P1> = <nat:4> \cdot <var:n> \land <var:P2> = <nat:8> \} \\ <var:P2> := <var:P2> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:P1> = <nat:4> \cdot <var:n> \land <var:P2> = <nat:8> \cdot <var:n> \} \\ <var:P2> := <var:P2> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:P1> = <nat:4> \cdot <var:n> \land <var:P2> = <nat:8> \cdot <var:n> ^ <nat:2> \} \end{eqnarray} Continuing running the program results in : \begin{eqnarray} <var:S> := <var:P2> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:P1> = <nat:4> \cdot <var:n> \land <var:S> = <nat:8> \cdot <var:n> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:P1> ; \\ \{ <var:L> = <var:n> \land <var:P0> = <nat:8> \land <var:S> = <nat:8> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> \} \\ <var:S> := <var:S> + <var:P0> \\ \{ <var:L> = <var:n> \land <var:S> = <nat:8> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <var:P0> := <nat:8> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:L> ; <var:P2> := <nat:8> ; <var:P2> := <var:P2> * <var:L> ; <var:P2> := <var:P2> * <var:L> ; <var:S> := <var:P2> ; <var:S> := <var:S> + <var:P1> ; <var:S> := <var:S> + <var:P0> {{ <var:S> = <nat:8> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:4> * <var:n> /\ <var:P2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:4> * <var:n> /\ <var:P2> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:4> * <var:n> /\ <var:P2> = <nat:8> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:4> * <var:n> /\ <var:S> = <nat:8> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:P0> = <nat:8> /\ <var:S> = <nat:8> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:S> = <nat:8> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 