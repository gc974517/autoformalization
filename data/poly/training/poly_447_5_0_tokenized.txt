\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:1> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:X> ; <var:k> := <var:E1> ; <var:k> := <var:k> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming for all positive coefficients $ <var:Y> $ $ <var:X> = <var:Y> $ ahead of running our segment of code , it holds that we see $ <var:k> = <nat:1> \cdot <var:Y> + <nat:1> $ when code is done . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be accomplished by typical Hoare logic . Moving forward to the subsequent step found in our set of commands , we have the environment update line letting $ <nat:1> $ into $ <var:E0>$ . This line transfers the condition $ \{ <var:X> = <var:Y> \} $ as the condition $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \} $ . Focusing on the upcoming line found in our set of commands , we have the variable binding command \verb | <var:E1> := <nat:1> ; | . This statement forwards the precondition $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \} $ as $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \land <var:E1> = <nat:1> \} $ . This is sound by the assignment law defined in standard Hoare logic . Advancing , the assignment statement assigning $ <var:E1> * <var:X> $ toward $ <var:E1>$ . This command moves the condition $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \land <var:E1> = <nat:1> \} $ toward the postcondition $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \land <var:E1> = <nat:1> * <var:Y> \} $ . This is shown to be logically sound by the assignment scheme found in Hoare logic . Looking at the proceeding step found in our program , the variable assignmet line letting $ <var:E1> $ to $ <var:k>$ . This takes $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \land <var:E1> = <nat:1> * <var:Y> \} $ into $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \land <var:k> = <nat:1> * <var:Y> \} $ . Advancing to the proceeding bit of code found in our segment of code , we have the binding line \verb | <var:k> := <var:k> + <var:E0> | . This command redefines the precondition $ \{ <var:X> = <var:Y> \land <var:E0> = <nat:1> \land <var:k> = <nat:1> * <var:Y> \} $ toward the postcondition $ \{ <var:X> = <var:Y> \land <var:k> = <nat:1> * <var:Y> + <nat:1> \} $ . This is shown with the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:1> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:X> ; <var:k> := <var:E1> ; <var:k> := <var:k> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:X> = <var:Y> }} <def:poly> {{ <var:k> = <nat:1> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:E0> = <nat:1> /\ <var:k> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:k> = <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 