\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:U1> := <var:e> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:9> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> \end{verbatim} Assuming --- given some $ <var:x> $ --- that we have $ <var:e> = <var:x> $ prior to running the code , it follows that $ <var:d> = <nat:9> \times <var:x> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this segment of code can be given using typical Hoare techniques . Now , we see the variable assignmet statement defining $ <var:e> $ into $ <var:U1>$ . This code advances the precondition $ \{ <var:e> = <var:x> \} $ into the condition $ \{ <var:e> = <var:x> \land <var:U1> = <var:x> \} $ . Taking a look at the proceeding line seen in our list of instructions , we have the binding command \verb | <var:U0> := <nat:1> ; | . This code transfers $ \{ <var:e> = <var:x> \land <var:U1> = <var:x> \} $ as $ \{ <var:e> = <var:x> \land <var:U1> = <var:x> \land <var:U0> = <nat:1> \} $ . Moving on to the proceeding statement in our series of commands , we have the variable update code \verb | <var:U1> := <var:U1> * <nat:9> ; | . This line takes the condition $ \{ <var:e> = <var:x> \land <var:U1> = <var:x> \land <var:U0> = <nat:1> \} $ to the condition $ \{ <var:e> = <var:x> \land <var:U1> = <nat:9> * <var:x> \land <var:U0> = <nat:1> \} $ . Moving on to the next step , the variable assignmet statement \verb | <var:d> := <var:U1> | . This forwards the condition $ \{ <var:e> = <var:x> \land <var:U1> = <nat:9> * <var:x> \land <var:U0> = <nat:1> \} $ as the condition $ \{ <var:e> = <var:x> \land <var:U0> = <nat:1> \land <var:d> = <nat:9> * <var:x> \} $ . Looking at the proceeding step contained in our series of commands , we have the binding code letting $ <var:d> + <var:U0$ as $ <var:d>$ . This redefines $ \{ <var:e> = <var:x> \land <var:U0> = <nat:1> \land <var:d> = <nat:9> * <var:x> \} $ into the condition $ \{ <var:e> = <var:x> \land <var:d> = <nat:9> * <var:x> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:e> = <var:x> }} <var:U1> := <var:e> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:9> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> {{ <var:d> = <nat:9> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:U1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:U1> = <var:x> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:U1> = <nat:9> * <var:x> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:U0> = <nat:1> /\ <var:d> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:d> = <nat:9> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 