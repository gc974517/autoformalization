\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:3> ; <var:h> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:l> = <var:g> $ , given $ <var:g> \in \mathbb{N} $ , before evaluating the set of commands , it must be that we see $ <var:h> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our set of commands can be given with typical Hoare logic . Going to the next step , we have \verb | { <var:l> = <var:g> } <var:Y0> := <nat:3> { <var:l> = <var:g> \land <var:Y0> = <nat:3> } | and \verb | { <var:l> = <var:g> \land <var:Y0> = <nat:3> } <var:h> := <var:Y0{ <var:l> = <var:g> \land <var:h> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:h> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:l> = <var:g> }} <def:poly> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 