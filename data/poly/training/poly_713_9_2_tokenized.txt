\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:3> + <var:f> * <var:v> ; <var:f> := <nat:3> + <var:f> * <var:v> ; <var:f> := <nat:2> + <var:f> * <var:v> ; <var:f> := <nat:1> + <var:f> * <var:v> ; <var:f> := <nat:1> + <var:f> * <var:v> ; <var:f> := <nat:1> + <var:f> * <var:v> ; <var:f> := <var:f> * <var:v> ; <var:f> := <nat:4> + <var:f> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Assume --- taking natural numbers $ <var:e> $ --- $ <var:v> = <var:e> $ ahead of evaluating our segment of code it holds that $ <var:f> = <nat:1> \times <var:e> ^ <nat:8> + <nat:3> \times <var:e> ^ <nat:7> + <nat:3> \times <var:e> ^ <nat:6> + <nat:2> \times <var:e> ^ <nat:5> + <nat:1> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this code is evident through usual Hoare logic . Now , we see the variable binding statement assigning $ <nat:1> $ as $ <var:f>$ . This advances the condition $ \{ <var:v> = <var:e> \} $ to the condition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \} $ . Taking another step toward the proceeding bit of code seen in the series of commands , the variable assignmet command \verb | <var:f> := <nat:3> + <var:f> * <var:v> ; | . This code moves the condition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \} $ into $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> + <nat:3> \} $ . Stepping through , we see the variable binding statement defining $ <nat:3> + <var:f> * <var:v> $ as $ <var:f>$ . This code redefines the precondition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> + <nat:3> \} $ as the condition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:3> \} $ . Advancing to the next statement found in the program , we see the variable assignmet statement binding $ <nat:2> + <var:f> * <var:v> $ to $ <var:f>$ . This statement redefines $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:3> \} $ into $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:2> \} $ . Following , the variable assignmet command \verb | <var:f> := <nat:1> + <var:f> * <var:v> ; | . This advances the precondition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:1> \} $ . Honing in on the subsequent step found in our code segment , we see the variable update statement binding $ <nat:1> + <var:f> * <var:v> $ as $ <var:f>$ . This command advances $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:1> \} $ toward the condition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} $ . This is shown to be logically sound with the assignment scheme in standard Hoare reasoning . Now , the environment update line \verb | <var:f> := <nat:1> + <var:f> * <var:v> ; | . This forwards $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} $ into the postcondition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:6> + <nat:3> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} $ . This is rigorously given using the assignment law defined by usual Hoare reasoning . Stepping forward , we see the variable binding command yielding $ <var:f> * <var:v> $ toward $ <var:f>$ . This moves the condition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:6> + <nat:3> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} $ as the postcondition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:7> + <nat:3> \times <var:e> ^ <nat:6> + <nat:3> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + \} $ . This is sound with the assignment scheme given by standard Hoare reasoning . After , we see the variable assignmet code \verb | <var:f> := <nat:4> + <var:f> * <var:v> | . This transfers $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:7> + <nat:3> \times <var:e> ^ <nat:6> + <nat:3> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + \} $ to the condition $ \{ <var:v> = <var:e> \land <var:f> = <nat:1> \times <var:e> ^ <nat:8> + <nat:3> \times <var:e> ^ <nat:7> + <nat:3> \times <var:e> ^ <nat:6> + <nat:2> \times <var:e> ^ <nat:5> + <nat:1> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:1> ; <var:f> := <nat:3> + <var:f> * <var:v> ; <var:f> := <nat:3> + <var:f> * <var:v> ; <var:f> := <nat:2> + <var:f> * <var:v> ; <var:f> := <nat:1> + <var:f> * <var:v> ; <var:f> := <nat:1> + <var:f> * <var:v> ; <var:f> := <nat:1> + <var:f> * <var:v> ; <var:f> := <var:f> * <var:v> ; <var:f> := <nat:4> + <var:f> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:v> = <var:e> }} <def:poly> {{ <var:f> = <nat:1> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:f> = <nat:1> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 