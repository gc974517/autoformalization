\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w1> := <var:c> ; <var:w2> := <var:w1> * <var:c> ; <var:w3> := <var:w2> * <var:c> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:3> ; <var:w2> := <var:w2> * <nat:9> ; <var:w3> := <var:w3> * <nat:5> ; <var:v> := <var:w3> <var:v> := <var:v> + <var:w2> <var:v> := <var:v> + <var:w1> <var:v> := <var:v> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Assuming it to be that $ <var:c> = <var:z> $ for any positive integer coefficients $ <var:z> $ before interpreting this list of instructions , it follows that we see $ <var:v> = <nat:5> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:9> $ . \end{theorem} \begin{proof} Note that the below decorated code . \begin{eqnarray} \{ <var:c> = <var:z> \} \\ <var:w1> := <var:c> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <var:z> \} \\ <var:w2> := <var:w1> * <var:c> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <var:z> \land <var:w2> = <var:z> ^ <nat:2> \} \\ <var:w3> := <var:w2> * <var:c> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <var:z> \land <var:w2> = <var:z> ^ <nat:2> \land <var:w3> = <var:z> ^ <nat:3> \} \\ <var:w0> := <nat:9> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <var:z> \land <var:w2> = <var:z> ^ <nat:2> \land <var:w3> = <var:z> ^ <nat:3> \land <var:w0> = <nat:9> \} \\ <var:w1> := <var:w1> * <nat:3> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <nat:3> \cdot <var:z> \land <var:w2> = <var:z> ^ <nat:2> \land <var:w3> = <var:z> ^ <nat:3> \land <var:w0> = <nat:9> \} \\ <var:w2> := <var:w2> * <nat:9> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <nat:3> \cdot <var:z> \land <var:w2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:w3> = <var:z> ^ <nat:3> \land <var:w0> = <nat:9> \} \\ <var:w3> := <var:w3> * <nat:5> ; \\ \{ <var:c> = <var:z> \land <var:w1> = <nat:3> \cdot <var:z> \land <var:w2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:z> ^ <nat:3> \land <var:w0> = <nat:9> \} \\ <var:v> := <var:w3> \\ \{ <var:c> = <var:z> \land <var:w1> = <nat:3> \cdot <var:z> \land <var:w2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:w0> = <nat:9> \land <var:v> = <nat:5> \cdot <var:z> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:w2> \\ \{ <var:c> = <var:z> \land <var:w1> = <nat:3> \cdot <var:z> \land <var:w0> = <nat:9> \land <var:v> = <nat:5> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:w1> \\ \{ <var:c> = <var:z> \land <var:w0> = <nat:9> \land <var:v> = <nat:5> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> \} \\ <var:v> := <var:v> + <var:w0> \\ \{ <var:c> = <var:z> \land <var:v> = <nat:5> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:9> \} \end{eqnarray} Utilizing Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w1> := <var:c> ; <var:w2> := <var:w1> * <var:c> ; <var:w3> := <var:w2> * <var:c> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:3> ; <var:w2> := <var:w2> * <nat:9> ; <var:w3> := <var:w3> * <nat:5> ; <var:v> := <var:w3> <var:v> := <var:v> + <var:w2> <var:v> := <var:v> + <var:w1> <var:v> := <var:v> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:c> = <var:z> }} <def:poly> {{ <var:v> = <nat:5> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <var:z> /\ <var:w2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <var:z> /\ <var:w2> = <var:z> ^ <nat:2> /\ <var:w3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <var:z> /\ <var:w2> = <var:z> ^ <nat:2> /\ <var:w3> = <var:z> ^ <nat:3> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <nat:3> * <var:z> /\ <var:w2> = <var:z> ^ <nat:2> /\ <var:w3> = <var:z> ^ <nat:3> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <nat:3> * <var:z> /\ <var:w2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:w3> = <var:z> ^ <nat:3> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <nat:3> * <var:z> /\ <var:w2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:z> ^ <nat:3> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <nat:3> * <var:z> /\ <var:w2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:w0> = <nat:9> /\ <var:v> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w1> = <nat:3> * <var:z> /\ <var:w0> = <nat:9> /\ <var:v> = <nat:5> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:w0> = <nat:9> /\ <var:v> = <nat:5> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:v> = <nat:5> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 