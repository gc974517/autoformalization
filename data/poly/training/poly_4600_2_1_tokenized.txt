\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:3> ; <var:c> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:G> = <var:P> $ before the evaluation of the segment of code , it follows that we see $ <var:c> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:G> = <var:P> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:G> = <var:P> \land <var:p0> = <nat:3> \} \\ <var:c> := <var:p0> \\ \{ <var:G> = <var:P> \land <var:c> = <nat:3> \} \end{eqnarray} Given the preceding argument , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:c> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:G> = <var:P> }} <def:poly> {{ <var:c> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:c> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 