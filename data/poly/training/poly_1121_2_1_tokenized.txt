\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:t0> := <nat:2> ; <var:y> := <var:t0> \end{verbatim} Given it to hold that $ <var:d> = <var:G> $ ahead of evaluating our series of instructions , then we have $ <var:y> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:d> = <var:G> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:d> = <var:G> \land <var:t0> = <nat:2> \} \\ <var:y> := <var:t0> \\ \{ <var:d> = <var:G> \land <var:y> = <nat:2> \} \end{eqnarray} Hence , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:d> = <var:G> }} <var:t0> := <nat:2> ; <var:y> := <var:t0> {{ <var:y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 