\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:S> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:S> ; <var:Z2> := <var:Z2> * <var:S> ; <var:O> := <var:Z2> ; <var:O> := <var:O> + <var:Z1> ; <var:O> := <var:O> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Assume that we have $ <var:S> = <var:d> $ , with some $ <var:d> $ , before the execution of this code , it follows that $ <var:O> = <nat:1> \times <var:d> ^ <nat:2> + <nat:9> \times <var:d> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment is done using Hoare techniques . Jumping to the upcoming step in our list of instructions , we have the variable assignmet code defining $ <nat:8> $ into $ <var:Z0>$ . This forwards $ \{ <var:S> = <var:d> \} $ as $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \} $ . Jumping to the upcoming line of code found in the segment of code , we see the assignment command \verb | <var:Z1> := <nat:9> ; | . This line moves the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \} $ into the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \} $ . Advancing , the command defining $ <var:Z1> * <var:S> $ toward $ <var:Z1>$ . This moves the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \} $ toward $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \} $ . This is shown using the assignment rule in typical Hoare techniques . Jumping to the upcoming piece of code contained in our code , we have the environment update command \verb | <var:Z2> := <nat:1> ; | . This code moves the precondition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \} $ as the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:Z2> = <nat:1> \} $ . Advancing to the subsequent statement found in our code , we see the variable assignmet line \verb | <var:Z2> := <var:Z2> * <var:S> ; | . This command forwards the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:Z2> = <nat:1> \} $ as the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:Z2> = <nat:1> \cdot <var:d> \} $ . Further , the binding statement defining $ <var:Z2> * <var:S> $ as $ <var:Z2>$ . This command takes $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:Z2> = <nat:1> \cdot <var:d> \} $ to the postcondition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:Z2> = <nat:1> \cdot <var:d> ^ <nat:2> \} $ . Keeping momentum , the variable update statement \verb | <var:O> := <var:Z2> ; | . This line transfers the precondition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:Z2> = <nat:1> \cdot <var:d> ^ <nat:2> \} $ into $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:O> = <nat:1> \cdot <var:d> ^ <nat:2> \} $ . Honing in on the next command found in our code segment , the variable assignmet statement \verb | <var:O> := <var:O> + <var:Z1> ; | . This statement advances the precondition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:9> \cdot <var:d> \land <var:O> = <nat:1> \cdot <var:d> ^ <nat:2> \} $ as the condition $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:O> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> \} $ . Observing the following line found in the series of commands , the variable binding code \verb | <var:O> := <var:O> + <var:Z0> | . This code transfers $ \{ <var:S> = <var:d> \land <var:Z0> = <nat:8> \land <var:O> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> \} $ toward $ \{ <var:S> = <var:d> \land <var:O> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> + <nat:8> \} $ . This is deduced by the assignment law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:S> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:S> ; <var:Z2> := <var:Z2> * <var:S> ; <var:O> := <var:Z2> ; <var:O> := <var:O> + <var:Z1> ; <var:O> := <var:O> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:S> = <var:d> }} <def:poly> {{ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:9> * <var:d> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:9> * <var:d> /\ <var:Z2> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:9> * <var:d> /\ <var:Z2> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:9> * <var:d> /\ <var:O> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:Z0> = <nat:8> /\ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 