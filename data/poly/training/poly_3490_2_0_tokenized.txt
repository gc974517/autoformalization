\begin{document} \begin{theorem} Take a series of commands such that \begin{verbatim} <var:h0> := <nat:1> ; <var:c> := <var:h0> \end{verbatim} Allowing it to hold that $ <var:e> = <var:C> $ ( given any positive numbers $ <var:C> $ ) ahead of the evaluation of this code segment then $ <var:c> = <nat:1> $ after code has finished executing . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:e> = <var:C> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:e> = <var:C> \land <var:h0> = <nat:1> \} \\ <var:c> := <var:h0> \\ \{ <var:e> = <var:C> \land <var:c> = <nat:1> \} \end{eqnarray} Therefore , this series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:e> = <var:C> }} <var:h0> := <nat:1> ; <var:c> := <var:h0> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 