\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:e> ; <var:Y> := <var:Y> * <var:e> ; <var:Y> := <nat:4> + <var:Y> * <var:e> ; <var:Y> := <nat:2> + <var:Y> * <var:e> \end{verbatim} Allowing it to be that $ <var:e> = <var:y> $ before evaluating the program it must be that $ <var:Y> = <nat:1> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> + <nat:2> $ when set of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of this code can be given using standard Hoare logic . Jumping to the upcoming bit of code found in the code segment , we have the variable update code assigning $ <nat:1> $ toward $ <var:Y>$ . This transfers $ \{ <var:e> = <var:y> \} $ toward $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \} $ . This is known to be sound through the assignment inference rule defined in typical Hoare reasoning . Immediately following , we see the environment update statement letting $ <nat:2> + <var:Y> * <var:e> $ into $ <var:Y>$ . This command takes $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \} $ as $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> + <nat:2> \} $ . Advancing on , the variable binding command yielding $ <var:Y> * <var:e> $ as $ <var:Y>$ . This advances the condition $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> + <nat:2> \} $ as the condition $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + \} $ . This is sound using the assignment scheme defined in typical Hoare reasoning . Stepping forward , we have the command giving $ <nat:4> + <var:Y> * <var:e> $ into $ <var:Y>$ . This forwards the precondition $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + \} $ into the postcondition $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:4> \} $ . This is guaranteed through the assignment inference rule of typical Hoare reasoning . Moving forward , we see the binding code giving $ <nat:2> + <var:Y> * <var:e$ toward $ <var:Y>$ . This forwards the precondition $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:4> \} $ as the condition $ \{ <var:e> = <var:y> \land <var:Y> = <nat:1> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> + <nat:2> \} $ . This is known to be sound by the assignment scheme obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:e> = <var:y> }} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:e> ; <var:Y> := <var:Y> * <var:e> ; <var:Y> := <nat:4> + <var:Y> * <var:e> ; <var:Y> := <nat:2> + <var:Y> * <var:e> {{ <var:Y> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:Y> = <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:Y> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:Y> = <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:Y> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 