\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:5> ; <var:H> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:l> = <var:I> $ , for any integers $ <var:I> $ , prior to running this set of instructions , it follows that we see $ <var:H> = <nat:5> $ once segment of code has finished executing . \end{theorem} \begin{proof} The proof of the list of commands can be accomplished through standard Hoare reasoning . Immediately following , the variable assignmet code binding $ <nat:5> $ as $ <var:h0>$ . This redefines the condition $ \{ <var:l> = <var:I> \} $ toward the postcondition $ \{ <var:l> = <var:I> \land <var:h0> = <nat:5> \} $ . Taking a look at the next step found in the code segment , we have the variable update code assigning $ <var:h0$ into $ <var:H>$ . This advances the precondition $ \{ <var:l> = <var:I> \land <var:h0> = <nat:5> \} $ into the postcondition $ \{ <var:l> = <var:I> \land <var:H> = <nat:5> \} $ . This is given through the assignment scheme of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:H> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:l> = <var:I> }} <def:poly> {{ <var:H> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:I> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:I> /\ <var:H> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 