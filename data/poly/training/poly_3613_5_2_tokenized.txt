\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <nat:2> + <var:r> * <var:z> ; <var:r> := <var:r> * <var:z> ; <var:r> := <nat:2> + <var:r> * <var:z> ; <var:r> := <nat:2> + <var:r> * <var:z> \end{verbatim} Allowing that $ <var:z> = <var:F> $ --- for all positive coefficients $ <var:F> $ --- prior to the evaluation of this code it must be that $ <var:r> = <nat:3> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> + <nat:2> $ once segment of code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:F> \} \\ <var:r> := <nat:3> ; \\ \{ <var:z> = <var:F> \land <var:r> = <nat:3> \} \\ <var:r> := <nat:2> + <var:r> * <var:z> ; \\ \{ <var:z> = <var:F> \land <var:r> = <nat:3> * <var:F> + <nat:2> \} \\ <var:r> := <var:r> * <var:z> ; \\ \{ <var:z> = <var:F> \land <var:r> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + \} \\ <var:r> := <nat:2> + <var:r> * <var:z> ; \\ \{ <var:z> = <var:F> \land <var:r> = <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> \} \\ <var:r> := <nat:2> + <var:r> * <var:z> \\ \{ <var:z> = <var:F> \land <var:r> = <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:z> = <var:F> }} <var:r> := <nat:3> ; <var:r> := <nat:2> + <var:r> * <var:z> ; <var:r> := <var:r> * <var:z> ; <var:r> := <nat:2> + <var:r> * <var:z> ; <var:r> := <nat:2> + <var:r> * <var:z> {{ <var:r> = <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:r> = <nat:3> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:r> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:r> = <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:F> /\ <var:r> = <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 