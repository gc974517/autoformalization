\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:3> ; <var:E1> := <nat:6> ; <var:E1> := <var:E1> * <var:D> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:D> ; <var:E2> := <var:E2> * <var:D> ; <var:C> := <var:E2> ; <var:C> := <var:C> + <var:E1> ; <var:C> := <var:C> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:D> = <var:s> $ prior to interpreting our segment of code , it must be that $ <var:C> = <nat:9> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:s> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \} \\ <var:E1> := <nat:6> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \} \\ <var:E1> := <var:E1> * <var:D> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> * <var:s> \} \\ <var:E2> := <nat:9> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> * <var:s> \land <var:E2> = <nat:9> \} \\ <var:E2> := <var:E2> * <var:D> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> * <var:s> \land <var:E2> = <nat:9> * <var:s> \} \\ <var:E2> := <var:E2> * <var:D> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> * <var:s> \land <var:E2> = <nat:9> * <var:s> ^ <nat:2> \} \end{eqnarray} Advancing executing this list of commands gives : \begin{eqnarray} <var:C> := <var:E2> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> * <var:s> \land <var:C> = <nat:9> * <var:s> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:E1> ; \\ \{ <var:D> = <var:s> \land <var:E0> = <nat:3> \land <var:C> = <nat:9> * <var:s> ^ <nat:2> + <nat:6> * <var:s> \} \\ <var:C> := <var:C> + <var:E0> \\ \{ <var:D> = <var:s> \land <var:C> = <nat:9> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:3> ; <var:E1> := <nat:6> ; <var:E1> := <var:E1> * <var:D> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:D> ; <var:E2> := <var:E2> * <var:D> ; <var:C> := <var:E2> ; <var:C> := <var:C> + <var:E1> ; <var:C> := <var:C> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:D> = <var:s> }} <def:poly> {{ <var:C> = <nat:9> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:s> /\ <var:E2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:s> /\ <var:E2> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:s> /\ <var:E2> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:s> /\ <var:C> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:E0> = <nat:3> /\ <var:C> = <nat:9> * <var:s> ^ <nat:2> + <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:s> /\ <var:C> = <nat:9> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 