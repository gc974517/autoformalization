\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:e> ; <var:l> := <var:O1> ; <var:l> := <var:l> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:e> = <var:X> $ before evaluating this segment of code then we see $ <var:l> = <nat:8> \times <var:X> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:X> \} \\ <var:O0> := <nat:6> ; \\ \{ <var:e> = <var:X> \land <var:O0> = <nat:6> \} \\ <var:O1> := <nat:8> ; \\ \{ <var:e> = <var:X> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} \\ <var:O1> := <var:O1> * <var:e> ; \\ \{ <var:e> = <var:X> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:X> \} \\ <var:l> := <var:O1> ; \\ \{ <var:e> = <var:X> \land <var:O0> = <nat:6> \land <var:l> = <nat:8> * <var:X> \} \\ <var:l> := <var:l> + <var:O0> \\ \{ <var:e> = <var:X> \land <var:l> = <nat:8> * <var:X> + <nat:6> \} \end{eqnarray} Applying Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:e> ; <var:l> := <var:O1> ; <var:l> := <var:l> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:e> = <var:X> }} <def:poly> {{ <var:l> = <nat:8> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:O0> = <nat:6> /\ <var:l> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:l> = <nat:8> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 