\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:T> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Allow ( letting positive coefficients $ <var:A> $ ) that we have $ <var:E> = <var:A> $ before executing our code then we have $ <var:T> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:A> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:E> = <var:A> \land <var:a0> = <nat:8> \} \\ <var:T> := <var:a0> \\ \{ <var:E> = <var:A> \land <var:T> = <nat:8> \} \end{eqnarray} Using usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:8> ; <var:T> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:E> = <var:A> }} <def:poly> {{ <var:T> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:T> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 