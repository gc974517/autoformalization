\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:B> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:B> ; <var:w2> := <var:w2> * <var:B> ; <var:J> := <var:w2> ; <var:J> := <var:J> + <var:w1> ; <var:J> := <var:J> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:B> = <var:m> $ , letting integers $ <var:m> $ , before interpreting the series of commands it holds that $ <var:J> = <nat:7> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:B> = <var:m> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:5> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:w1> = <nat:5> \} \\ <var:w1> := <var:w1> * <var:B> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:w1> = <nat:5> \times <var:m> \} \\ <var:w2> := <nat:7> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:w1> = <nat:5> \times <var:m> \land <var:w2> = <nat:7> \} \\ <var:w2> := <var:w2> * <var:B> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:w1> = <nat:5> \times <var:m> \land <var:w2> = <nat:7> \times <var:m> \} \\ <var:w2> := <var:w2> * <var:B> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:w1> = <nat:5> \times <var:m> \land <var:w2> = <nat:7> \times <var:m> ^ <nat:2> \} \\ <var:J> := <var:w2> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:w1> = <nat:5> \times <var:m> \land <var:J> = <nat:7> \times <var:m> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:w1> ; \\ \{ <var:B> = <var:m> \land <var:w0> = <nat:1> \land <var:J> = <nat:7> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> \} \\ <var:J> := <var:J> + <var:w0> \\ \{ <var:B> = <var:m> \land <var:J> = <nat:7> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> + <nat:1> \} \end{eqnarray} Considering the above , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:B> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:B> ; <var:w2> := <var:w2> * <var:B> ; <var:J> := <var:w2> ; <var:J> := <var:J> + <var:w1> ; <var:J> := <var:J> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <def:poly> {{ <var:J> = <nat:7> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:5> * <var:m> /\ <var:J> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:w0> = <nat:1> /\ <var:J> = <nat:7> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:J> = <nat:7> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 