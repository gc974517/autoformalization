\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:u1> := <var:x> ; <var:u2> := <var:u1> * <var:x> ; <var:u3> := <var:u2> * <var:x> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:8> ; <var:u2> := <var:u2> * <nat:7> ; <var:u3> := <var:u3> * <nat:1> ; <var:f> := <var:u3> <var:f> := <var:f> + <var:u2> <var:f> := <var:f> + <var:u1> <var:f> := <var:f> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given some natural numbers $ <var:s> $ ) $ <var:x> = <var:s> $ before running this segment of code then we see $ <var:f> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:2> $ once list of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be seen by standard Hoare reasoning . Now , \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:u1> := <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} \\ \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} & <var:u2> := <var:u1> * <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \} \\ \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \} & <var:u3> := <var:u2> * <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \} \\ \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \} & <var:u0> := <nat:2> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \land <var:u0> = <nat:2> \} \end{tabular} This is known to be sound through the variable assignmet inference rule given by typical Hoare reasoning . Next , \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:u1> := <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} \\ \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} & <var:u2> := <var:u1> * <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \} \\ \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \} & <var:u3> := <var:u2> * <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \} \\ \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \} & <var:u0> := <nat:2> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \land <var:u0> = <nat:2> \} \end{tabular} Paying attention to the next line of code contained in our segment of code , \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:u1> := <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} \end{tabular} Moving on to the next step in our code , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:u1> := <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} \end{tabular} Jumping to the subsequent command contained in our code segment , \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:u1> := <var:x> & \{ <var:x> = <var:s> \land <var:u1> = <var:s> \} \end{tabular} This is shown to be logically sound using the law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:x> ; <var:u2> := <var:u1> * <var:x> ; <var:u3> := <var:u2> * <var:x> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:8> ; <var:u2> := <var:u2> * <nat:7> ; <var:u3> := <var:u3> * <nat:1> ; <var:f> := <var:u3> <var:f> := <var:f> + <var:u2> <var:f> := <var:f> + <var:u1> <var:f> := <var:f> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:x> = <var:s> }} <def:poly> {{ <var:f> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <var:s> /\ <var:u2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <var:s> /\ <var:u2> = <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <var:s> /\ <var:u2> = <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <nat:8> * <var:s> /\ <var:u2> = <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <nat:8> * <var:s> /\ <var:u2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <nat:8> * <var:s> /\ <var:u2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:s> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <nat:8> * <var:s> /\ <var:u2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:f> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u1> = <nat:8> * <var:s> /\ <var:u0> = <nat:2> /\ <var:f> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:u0> = <nat:2> /\ <var:f> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:f> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 