\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:A> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:8> ; <var:S> := <var:D1> <var:S> := <var:S> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:A> = <var:y> $ ahead of the evaluation of the code segment it holds that we see $ <var:S> = <nat:8> \times <var:y> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:A> = <var:y> \} \\ <var:D1> := <var:A> ; \\ \{ <var:A> = <var:y> \land <var:D1> = <var:y> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:A> = <var:y> \land <var:D1> = <var:y> \land <var:D0> = <nat:2> \} \\ <var:D1> := <var:D1> * <nat:8> ; \\ \{ <var:A> = <var:y> \land <var:D1> = <nat:8> \cdot <var:y> \land <var:D0> = <nat:2> \} \\ <var:S> := <var:D1> \\ \{ <var:A> = <var:y> \land <var:D0> = <nat:2> \land <var:S> = <nat:8> \cdot <var:y> \} \\ <var:S> := <var:S> + <var:D0> \\ \{ <var:A> = <var:y> \land <var:S> = <nat:8> \cdot <var:y> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:A> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:8> ; <var:S> := <var:D1> <var:S> := <var:S> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:A> = <var:y> }} <def:poly> {{ <var:S> = <nat:8> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:D1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:D1> = <var:y> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:D1> = <nat:8> * <var:y> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:D0> = <nat:2> /\ <var:S> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:S> = <nat:8> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 