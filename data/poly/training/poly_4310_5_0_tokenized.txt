\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:8> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:T> ; <var:k> := <var:q1> ; <var:k> := <var:k> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allowing --- given $ <var:B> $ --- it to hold that $ <var:T> = <var:B> $ ahead of the evaluation of our list of commands , it holds that we have $ <var:k> = <nat:4> * <var:B> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be done with Hoare logic . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:B> \} & <var:q0> := <nat:8> & \{ <var:T> = <var:B> \land <var:q0> = <nat:8> \} \end{tabular} This is guaranteed using the variable update scheme in Hoare logic . Advancing to the proceeding lines of codein the code segment , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:B> \} & <var:q0> := <nat:8> & \{ <var:T> = <var:B> \land <var:q0> = <nat:8> \} \\ \{ <var:T> = <var:B> \land <var:q0> = <nat:8> \} & <var:q1> := <nat:4> & \{ <var:T> = <var:B> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \} \end{tabular} Focusing on the proceeding step seen in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:B> \} & <var:q0> := <nat:8> & \{ <var:T> = <var:B> \land <var:q0> = <nat:8> \} \end{tabular} This is shown using the scheme given by Hoare logic . Further , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:B> \} & <var:q0> := <nat:8> & \{ <var:T> = <var:B> \land <var:q0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:8> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:T> ; <var:k> := <var:q1> ; <var:k> := <var:k> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <def:poly> {{ <var:k> = <nat:4> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:q0> = <nat:8> /\ <var:k> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:k> = <nat:4> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 