\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:I0> := <nat:4> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:m> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:m> ; <var:I2> := <var:I2> * <var:m> ; <var:X> := <var:I2> ; <var:X> := <var:X> + <var:I1> ; <var:X> := <var:X> + <var:I0> \end{verbatim} Assume it to hold that $ <var:m> = <var:S> $ ahead of the execution of the series of instructions , it holds that $ <var:X> = <nat:8> \times <var:S> ^ <nat:2> + <nat:9> \times <var:S> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:S> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \} \\ <var:I1> := <nat:9> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:9> \} \\ <var:I1> := <var:I1> * <var:m> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:9> * <var:S> \} \\ <var:I2> := <nat:8> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:9> * <var:S> \land <var:I2> = <nat:8> \} \\ <var:I2> := <var:I2> * <var:m> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:9> * <var:S> \land <var:I2> = <nat:8> * <var:S> \} \\ <var:I2> := <var:I2> * <var:m> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:9> * <var:S> \land <var:I2> = <nat:8> * <var:S> ^ <nat:2> \} \\ <var:X> := <var:I2> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:9> * <var:S> \land <var:X> = <nat:8> * <var:S> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:I1> ; \\ \{ <var:m> = <var:S> \land <var:I0> = <nat:4> \land <var:X> = <nat:8> * <var:S> ^ <nat:2> + <nat:9> * <var:S> \} \\ <var:X> := <var:X> + <var:I0> \\ \{ <var:m> = <var:S> \land <var:X> = <nat:8> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:m> = <var:S> }} <var:I0> := <nat:4> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:m> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:m> ; <var:I2> := <var:I2> * <var:m> ; <var:X> := <var:I2> ; <var:X> := <var:X> + <var:I1> ; <var:X> := <var:X> + <var:I0> {{ <var:X> = <nat:8> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:9> * <var:S> /\ <var:I2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:9> * <var:S> /\ <var:I2> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:9> * <var:S> /\ <var:I2> = <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:9> * <var:S> /\ <var:X> = <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:I0> = <nat:4> /\ <var:X> = <nat:8> * <var:S> ^ <nat:2> + <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:X> = <nat:8> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 