\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:T> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:T> ; <var:a2> := <var:a2> * <var:T> ; <var:l> := <var:a2> ; <var:l> := <var:l> + <var:a1> ; <var:l> := <var:l> + <var:a0> \end{verbatim} Allow ( taking positive numbers $ <var:q> $ ) that $ <var:T> = <var:q> $ prior to evaluating this list of commands then $ <var:l> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> $ once code has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be accomplished using usual Hoare logic . Moving forward , we have \begin{eqnarray} \{ <var:T> = <var:q> \} \, <var:a0> := <nat:2> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \} \, <var:a1> := <nat:2> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} \, <var:a1> := <var:a1> * <var:T> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \} \, <var:a2> := <nat:1> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \land <var:a2> = <nat:1> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \land <var:a2> = <nat:1> \} \, <var:a2> := <var:a2> * <var:T> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \land <var:a2> = <nat:1> * <var:q> \} \end{eqnarray} This is shown by the environment update scheme obtained from Hoare reasoning . Following , we have \begin{eqnarray} \{ <var:T> = <var:q> \} \, <var:a0> := <nat:2> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \} \, <var:a1> := <nat:2> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} \, <var:a1> := <var:a1> * <var:T> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \} \\ \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \} \, <var:a2> := <nat:1> \, \{ <var:T> = <var:q> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> * <var:q> \land <var:a2> = <nat:1> \} \end{eqnarray} This is shown using the variable assignmet rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:T> = <var:q> }} <var:a0> := <nat:2> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:T> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:T> ; <var:a2> := <var:a2> * <var:T> ; <var:l> := <var:a2> ; <var:l> := <var:l> + <var:a1> ; <var:l> := <var:l> + <var:a0> {{ <var:l> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:q> /\ <var:a2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:q> /\ <var:a2> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:q> /\ <var:a2> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:q> /\ <var:l> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:a0> = <nat:2> /\ <var:l> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:l> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 