\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:F> ; <var:Q> := <nat:2> + <var:Q> * <var:F> ; <var:Q> := <nat:1> + <var:Q> * <var:F> ; <var:Q> := <nat:3> + <var:Q> * <var:F> \end{verbatim} Allowing it to be that $ <var:F> = <var:w> $ before the evaluation of our set of commands it must be that we have $ <var:Q> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the set of commands is clear through usual Hoare reasoning . Moving onward , \verb | { <var:F> = <var:w> } <var:Q> := <nat:3> { <var:F> = <var:w> \land <var:Q> = <nat:3> } | , \verb | { <var:F> = <var:w> \land <var:Q> = <nat:3> } <var:Q> := <nat:1> + <var:Q> * <var:F> { <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> + <nat:1> } | , \verb | { <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> + <nat:1> } <var:Q> := <nat:2> + <var:Q> * <var:F> { <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:2> } | , \verb | { <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:2> } <var:Q> := <nat:1> + <var:Q> * <var:F> { <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:1> } | and \verb | { <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:1> } <var:Q> := <nat:3> + <var:Q> * <var:F{ <var:F> = <var:w> \land <var:Q> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:F> ; <var:Q> := <nat:2> + <var:Q> * <var:F> ; <var:Q> := <nat:1> + <var:Q> * <var:F> ; <var:Q> := <nat:3> + <var:Q> * <var:F> {{ <var:Q> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:Q> = <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:Q> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:Q> = <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:Q> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 