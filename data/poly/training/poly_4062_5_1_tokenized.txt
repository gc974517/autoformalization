\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:A1> := <var:o> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:1> ; <var:a> := <var:A1> <var:a> := <var:a> + <var:A0> \end{verbatim} Allow , given all natural coefficients $ <var:h> $ , it to be that $ <var:o> = <var:h> $ before the evaluation of this series of instructions , it holds that we see $ <var:a> = <nat:1> \cdot <var:h> + <nat:7> $ when series of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is demonstrated by Hoare techniques . Moving on to the next step , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:h> \} & <var:A1> := <var:o> & \{ <var:o> = <var:h> \land <var:A1> = <var:h> \} \\ \{ <var:o> = <var:h> \land <var:A1> = <var:h> \} & <var:A0> := <nat:7> & \{ <var:o> = <var:h> \land <var:A1> = <var:h> \land <var:A0> = <nat:7> \} \\ \{ <var:o> = <var:h> \land <var:A1> = <var:h> \land <var:A0> = <nat:7> \} & <var:A1> := <var:A1> * <nat:1> & \{ <var:o> = <var:h> \land <var:A1> = <nat:1> * <var:h> \land <var:A0> = <nat:7> \} \end{tabular} This is sound through the environment update scheme from usual Hoare logic . Advancing to the following line of code contained in the program , we see \[ \begin{tabular} {rcl} \{ <var:o> = <var:h> \} & <var:A1> := <var:o> & \{ <var:o> = <var:h> \land <var:A1> = <var:h> \} \end{tabular} Moving on to the next step contained in the program , we see \[ \begin{tabular} {rcl} \{ <var:o> = <var:h> \} & <var:A1> := <var:o> & \{ <var:o> = <var:h> \land <var:A1> = <var:h> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:o> = <var:h> }} <var:A1> := <var:o> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:1> ; <var:a> := <var:A1> <var:a> := <var:a> + <var:A0> {{ <var:a> = <nat:1> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:A1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:A1> = <var:h> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:A1> = <nat:1> * <var:h> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:A0> = <nat:7> /\ <var:a> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:a> = <nat:1> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 