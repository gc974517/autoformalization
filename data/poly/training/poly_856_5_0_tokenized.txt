\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:h> ; <var:P> := <var:G1> ; <var:P> := <var:P> + <var:G0> \end{verbatim} Given that we have $ <var:h> = <var:l> $ , letting positive integer coefficients $ <var:l> $ , ahead of interpreting the set of commands , then $ <var:P> = <nat:4> \cdot <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands is done by standard Hoare reasoning . Immediately following , the binding statement assigning $ <nat:4> $ to $ <var:G0>$ . This transfers the condition $ \{ <var:h> = <var:l> \} $ to the condition $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \} $ . This is deduced with the assignment rule from standard Hoare logic . Going to the next step , we see the environment update command \verb | <var:G1> := <nat:4> ; | . This forwards $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \} $ into the postcondition $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \} $ . Further , the environment update code \verb | <var:G1> := <var:G1> * <var:h> ; | . This statement moves the condition $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \} $ into the condition $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:l> \} $ . This is ensured with the assignment rule found in usual Hoare reasoning . Moving forward to the proceeding step in our list of commands , we have the variable assignmet line \verb | <var:P> := <var:G1> ; | . This advances the precondition $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:l> \} $ to $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \land <var:P> = <nat:4> \cdot <var:l> \} $ . This is given with the assignment law given by usual Hoare reasoning . Moving on to the next step , we have the variable update line defining $ <var:P> + <var:G0$ as $ <var:P>$ . This command forwards $ \{ <var:h> = <var:l> \land <var:G0> = <nat:4> \land <var:P> = <nat:4> \cdot <var:l> \} $ to the condition $ \{ <var:h> = <var:l> \land <var:P> = <nat:4> \cdot <var:l> + <nat:4> \} $ . This is rigorously given through the assignment rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:h> = <var:l> }} <var:G0> := <nat:4> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:h> ; <var:P> := <var:G1> ; <var:P> := <var:P> + <var:G0> {{ <var:P> = <nat:4> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:G0> = <nat:4> /\ <var:P> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:P> = <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 