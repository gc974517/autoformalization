\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:c1> := <var:q> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:6> ; <var:F> := <var:c1> <var:F> := <var:F> + <var:c0> \end{verbatim} Allowing it to hold that $ <var:q> = <var:D> $ , taking positive numbers $ <var:D> $ , ahead of running our series of commands it follows that $ <var:F> = <nat:6> \times <var:D> + <nat:4> $ when list of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of our program is accomplished by standard Hoare reasoning . Moving onward , we see the assignment code \verb | <var:c1> := <var:q> ; | . This redefines the condition $ \{ <var:q> = <var:D> \} $ toward the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \} $ . This is rigorously given by the assignment law of usual Hoare techniques . Immediately after , we see the variable binding command \verb | <var:c0> := <nat:4> ; | . This line takes the precondition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \} $ toward the postcondition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c0> = <nat:4> \} $ . This is ensured with the assignment law from typical Hoare reasoning . Observing the proceeding piece of code in our list of commands , we have the line \verb | <var:c1> := <var:c1> * <nat:6> ; | . This statement advances the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c0> = <nat:4> \} $ into the postcondition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:6> * <var:D> \land <var:c0> = <nat:4> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare reasoning . Immediately following , the code \verb | <var:F> := <var:c1> | . This redefines the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:6> * <var:D> \land <var:c0> = <nat:4> \} $ to $ \{ <var:q> = <var:D> \land <var:c0> = <nat:4> \land <var:F> = <nat:6> * <var:D> \} $ . After , we see the assignment code yielding $ <var:F> + <var:c0$ to $ <var:F>$ . This line takes the precondition $ \{ <var:q> = <var:D> \land <var:c0> = <nat:4> \land <var:F> = <nat:6> * <var:D> \} $ toward $ \{ <var:q> = <var:D> \land <var:F> = <nat:6> * <var:D> + <nat:4> \} $ . This is known to be sound through the assignment law defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:q> = <var:D> }} <var:c1> := <var:q> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:6> ; <var:F> := <var:c1> <var:F> := <var:F> + <var:c0> {{ <var:F> = <nat:6> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <var:D> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <nat:6> * <var:D> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c0> = <nat:4> /\ <var:F> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:F> = <nat:6> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 