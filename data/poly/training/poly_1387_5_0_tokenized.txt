\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:Q> ; <var:H> := <var:c1> ; <var:H> := <var:H> + <var:c0> \end{verbatim} Assuming that we have $ <var:Q> = <var:f> $ , for all natural coefficients $ <var:f> $ , ahead of executing our set of instructions it must be that $ <var:H> = <nat:3> \cdot <var:f> + <nat:9> $ when list of instructions executes . \end{theorem} \begin{proof} Observe the below decorated series of instructions . \begin{eqnarray} \{ <var:Q> = <var:f> \} \\ <var:c0> := <nat:9> ; \\ \{ <var:Q> = <var:f> \land <var:c0> = <nat:9> \} \\ <var:c1> := <nat:3> ; \\ \{ <var:Q> = <var:f> \land <var:c0> = <nat:9> \land <var:c1> = <nat:3> \} \\ <var:c1> := <var:c1> * <var:Q> ; \\ \{ <var:Q> = <var:f> \land <var:c0> = <nat:9> \land <var:c1> = <nat:3> * <var:f> \} \\ <var:H> := <var:c1> ; \\ \{ <var:Q> = <var:f> \land <var:c0> = <nat:9> \land <var:H> = <nat:3> * <var:f> \} \\ <var:H> := <var:H> + <var:c0> \\ \{ <var:Q> = <var:f> \land <var:H> = <nat:3> * <var:f> + <nat:9> \} \end{eqnarray} Applying typical Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Q> = <var:f> }} <var:c0> := <nat:9> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:Q> ; <var:H> := <var:c1> ; <var:H> := <var:H> + <var:c0> {{ <var:H> = <nat:3> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:c0> = <nat:9> /\ <var:H> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:H> = <nat:3> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 