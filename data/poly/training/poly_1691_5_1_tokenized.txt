\begin{document} \begin{theorem} Take the following list of commands : \begin{verbatim} <var:b1> := <var:f> ; <var:b0> := <nat:8> ; <var:b1> := <var:b1> * <nat:8> ; <var:i> := <var:b1> <var:i> := <var:i> + <var:b0> \end{verbatim} Allow that we have $ <var:f> = <var:o> $ for all $ <var:o> \in \mathbb{N} $ before running our series of commands it holds that $ <var:i> = <nat:8> * <var:o> + <nat:8> $ when set of instructions exits . \end{theorem} \begin{proof} The argument for this code is given using Hoare techniques . Moving on to the next step , we see \verb | { <var:f> = <var:o> } <var:b1> := <var:f> { <var:f> = <var:o> \land <var:b1> = <var:o> } | . This is shown with the variable binding inference rule given by usual Hoare logic . Immediately following , we have \verb | { <var:f> = <var:o> } <var:b1> := <var:f> { <var:f> = <var:o> \land <var:b1> = <var:o> } | , \verb | { <var:f> = <var:o> \land <var:b1> = <var:o> } <var:b0> := <nat:8> { <var:f> = <var:o> \land <var:b1> = <var:o> \land <var:b0> = <nat:8> } | , \verb | { <var:f> = <var:o> \land <var:b1> = <var:o> \land <var:b0> = <nat:8> } <var:b1> := <var:b1> * <nat:8> { <var:f> = <var:o> \land <var:b1> = <nat:8> * <var:o> \land <var:b0> = <nat:8> } | and \verb | { <var:f> = <var:o> \land <var:b1> = <nat:8> * <var:o> \land <var:b0> = <nat:8> } <var:i> := <var:b1{ <var:f> = <var:o> \land <var:b0> = <nat:8> \land <var:i> = <nat:8> * <var:o> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:f> = <var:o> }} <var:b1> := <var:f> ; <var:b0> := <nat:8> ; <var:b1> := <var:b1> * <nat:8> ; <var:i> := <var:b1> <var:i> := <var:i> + <var:b0> {{ <var:i> = <nat:8> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:b1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:b1> = <var:o> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:b1> = <nat:8> * <var:o> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:b0> = <nat:8> /\ <var:i> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:i> = <nat:8> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 