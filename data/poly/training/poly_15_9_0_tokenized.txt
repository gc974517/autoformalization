\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:2> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:c> ; <var:E2> := <nat:8> ; <var:E2> := <var:E2> * <var:c> ; <var:E2> := <var:E2> * <var:c> ; <var:Z> := <var:E2> ; <var:Z> := <var:Z> + <var:E1> ; <var:Z> := <var:Z> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:c> = <var:H> $ before interpreting this code segment it holds that we see $ <var:Z> = <nat:8> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:2> $ when series of instructions is done executing . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:c> = <var:H> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \} \\ <var:E1> := <nat:2> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:E1> = <nat:2> \} \\ <var:E1> := <var:E1> * <var:c> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:E1> = <nat:2> * <var:H> \} \\ <var:E2> := <nat:8> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:E1> = <nat:2> * <var:H> \land <var:E2> = <nat:8> \} \\ <var:E2> := <var:E2> * <var:c> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:E1> = <nat:2> * <var:H> \land <var:E2> = <nat:8> * <var:H> \} \\ <var:E2> := <var:E2> * <var:c> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:E1> = <nat:2> * <var:H> \land <var:E2> = <nat:8> * <var:H> ^ <nat:2> \} \\ <var:Z> := <var:E2> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:E1> = <nat:2> * <var:H> \land <var:Z> = <nat:8> * <var:H> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:E1> ; \\ \{ <var:c> = <var:H> \land <var:E0> = <nat:2> \land <var:Z> = <nat:8> * <var:H> ^ <nat:2> + <nat:2> * <var:H> \} \\ <var:Z> := <var:Z> + <var:E0> \\ \{ <var:c> = <var:H> \land <var:Z> = <nat:8> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> \} \end{eqnarray} Therefore , the series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:2> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:c> ; <var:E2> := <nat:8> ; <var:E2> := <var:E2> * <var:c> ; <var:E2> := <var:E2> * <var:c> ; <var:Z> := <var:E2> ; <var:Z> := <var:Z> + <var:E1> ; <var:Z> := <var:Z> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <def:poly> {{ <var:Z> = <nat:8> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:2> * <var:H> /\ <var:E2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:2> * <var:H> /\ <var:E2> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:2> * <var:H> /\ <var:E2> = <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:2> * <var:H> /\ <var:Z> = <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:E0> = <nat:2> /\ <var:Z> = <nat:8> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:Z> = <nat:8> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 