\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:9> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:w> ; <var:f2> := <var:f2> * <var:w> ; <var:f3> := <nat:4> ; <var:f3> := <var:f3> * <var:w> ; <var:f3> := <var:f3> * <var:w> ; <var:f3> := <var:f3> * <var:w> ; <var:s> := <var:f3> ; <var:s> := <var:s> + <var:f2> ; <var:s> := <var:s> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allowing $ <var:w> = <var:M> $ prior to the execution of our set of instructions , it follows that we have $ <var:s> = <nat:4> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> + <nat:9> $ after list of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is clear using standard Hoare reasoning . Observing the subsequent pieces of code found in the code , \[ \begin{tabular} {rcl} \{ <var:w> = <var:M> \} & <var:f0> := <nat:9> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \} & <var:f2> := <nat:6> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \} & <var:f2> := <var:f2> * <var:w> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> \} & <var:f2> := <var:f2> * <var:w> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> ^ <nat:2> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> ^ <nat:2> \} & <var:f3> := <nat:4> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> ^ <nat:2> \land <var:f3> = <nat:4> \} \end{tabular} This is given with the binding scheme found in typical Hoare logic . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:w> = <var:M> \} & <var:f0> := <nat:9> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \} & <var:f2> := <nat:6> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \} & <var:f2> := <var:f2> * <var:w> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> \} & <var:f2> := <var:f2> * <var:w> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \times <var:M> ^ <nat:2> \} \end{tabular} Looking at the proceeding lines of codecontained in the series of commands , \[ \begin{tabular} {rcl} \{ <var:w> = <var:M> \} & <var:f0> := <nat:9> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \} \\ \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \} & <var:f2> := <nat:6> & \{ <var:w> = <var:M> \land <var:f0> = <nat:9> \land <var:f2> = <nat:6> \} \end{tabular} This is given through the scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:w> ; <var:f2> := <var:f2> * <var:w> ; <var:f3> := <nat:4> ; <var:f3> := <var:f3> * <var:w> ; <var:f3> := <var:f3> * <var:w> ; <var:f3> := <var:f3> * <var:w> ; <var:s> := <var:f3> ; <var:s> := <var:s> + <var:f2> ; <var:s> := <var:s> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:w> = <var:M> }} <def:poly> {{ <var:s> = <nat:4> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:f3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:s> = <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:f0> = <nat:9> /\ <var:s> = <nat:4> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:s> = <nat:4> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 