\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:3> ; <var:J> := <var:Z0> \end{verbatim} Assuming it to be that $ <var:G> = <var:B> $ , with some positive coefficients $ <var:B> $ , ahead of the evaluation of the series of instructions , it must be that $ <var:J> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the code segment is given using typical Hoare logic . Taking another step toward the subsequent pieces of code found in our list of commands , we have \verb | { <var:G> = <var:B> } <var:Z0> := <nat:3> { <var:G> = <var:B> \land <var:Z0> = <nat:3> } | and \verb | { <var:G> = <var:B> \land <var:Z0> = <nat:3> } <var:J> := <var:Z0{ <var:G> = <var:B> \land <var:J> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:G> = <var:B> }} <var:Z0> := <nat:3> ; <var:J> := <var:Z0> {{ <var:J> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:J> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 