\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:6> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:K> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:K> ; <var:m2> := <var:m2> * <var:K> ; <var:U> := <var:m2> ; <var:U> := <var:U> + <var:m1> ; <var:U> := <var:U> + <var:m0> \end{verbatim} Given that we have $ <var:K> = <var:Q> $ --- given every natural numbers $ <var:Q> $ --- ahead of executing the code , then $ <var:U> = <nat:1> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for this code is shown with typical Hoare techniques . Focusing on the proceeding bit of code seen in our series of instructions , we have the environment update line assigning $ <nat:6> $ to $ <var:m0>$ . This line redefines the condition $ \{ <var:K> = <var:Q> \} $ into $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \} $ . Going forward , we have the assignment code \verb | <var:m1> := <nat:8> ; | . This statement takes the condition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \} $ into $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \} $ . This is given using the assignment law given in standard Hoare techniques . Moving on , we see the variable binding code defining $ <var:m1> * <var:K> $ into $ <var:m1>$ . This statement forwards the precondition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \} $ toward the condition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \} $ . Moving forward to the proceeding command seen in the list of commands , we see the binding command \verb | <var:m2> := <nat:1> ; | . This transfers the precondition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \} $ to the condition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:m2> = <nat:1> \} $ . This is sound by the assignment inference rule given by usual Hoare logic . Moving on to the next step , we have the variable binding command \verb | <var:m2> := <var:m2> * <var:K> ; | . This statement advances $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:m2> = <nat:1> \} $ into the postcondition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:m2> = <nat:1> \cdot <var:Q> \} $ . Shifting focus toward the next bit of code in the code , we see the assignment line defining $ <var:m2> * <var:K> $ toward $ <var:m2>$ . This takes $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:m2> = <nat:1> \cdot <var:Q> \} $ to the postcondition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:m2> = <nat:1> \cdot <var:Q> ^ <nat:2> \} $ . Taking another step toward the following statement found in our program , we have the variable update command yielding $ <var:m2> $ toward $ <var:U>$ . This code takes the condition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:m2> = <nat:1> \cdot <var:Q> ^ <nat:2> \} $ as $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:U> = <nat:1> \cdot <var:Q> ^ <nat:2> \} $ . This is rigorously given by the assignment rule defined in standard Hoare techniques . Moving on to the next step , we see the variable assignmet line yielding $ <var:U> + <var:m1> $ toward $ <var:U>$ . This moves the precondition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:m1> = <nat:8> \cdot <var:Q> \land <var:U> = <nat:1> \cdot <var:Q> ^ <nat:2> \} $ to $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:U> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:8> \cdot <var:Q> \} $ . Moving onward , we have the environment update line \verb | <var:U> := <var:U> + <var:m0> | . This statement advances the condition $ \{ <var:K> = <var:Q> \land <var:m0> = <nat:6> \land <var:U> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:8> \cdot <var:Q> \} $ into the postcondition $ \{ <var:K> = <var:Q> \land <var:U> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:8> \cdot <var:Q> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <var:m0> := <nat:6> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:K> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:K> ; <var:m2> := <var:m2> * <var:K> ; <var:U> := <var:m2> ; <var:U> := <var:U> + <var:m1> ; <var:U> := <var:U> + <var:m0> {{ <var:U> = <nat:1> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:8> * <var:Q> /\ <var:m2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:8> * <var:Q> /\ <var:m2> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:8> * <var:Q> /\ <var:m2> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:8> * <var:Q> /\ <var:U> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:m0> = <nat:6> /\ <var:U> = <nat:1> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:U> = <nat:1> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 