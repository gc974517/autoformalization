\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:4> ; <var:V> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> . Assuming ( given all positive integer coefficients $ <var:l> $ ) it to be that $ <var:A> = <var:l> $ ahead of the execution of the series of instructions it holds that we see $ <var:V> = <nat:4> $ after code executes . \end{theorem} \begin{proof} The course of logic for the series of instructions is evident with Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:l> \} & <var:S0> := <nat:4> & \{ <var:A> = <var:l> \land <var:S0> = <nat:4> \} \end{tabular} Jumping to the upcoming piece of code in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:l> \} & <var:S0> := <nat:4> & \{ <var:A> = <var:l> \land <var:S0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:V> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:A> = <var:l> }} <def:poly> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 