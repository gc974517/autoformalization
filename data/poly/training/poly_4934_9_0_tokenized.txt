\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:G> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:G> ; <var:F2> := <var:F2> * <var:G> ; <var:L> := <var:F2> ; <var:L> := <var:L> + <var:F1> ; <var:L> := <var:L> + <var:F0> \end{verbatim} Assuming , given any integers $ <var:m> $ , $ <var:G> = <var:m> $ prior to interpreting this series of commands it follows that we have $ <var:L> = <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> $ . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:G> = <var:m> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \} \\ <var:F1> := <nat:3> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> \} \\ <var:F1> := <var:F1> * <var:G> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> * <var:m> \} \\ <var:F2> := <nat:1> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> * <var:m> \land <var:F2> = <nat:1> \} \\ <var:F2> := <var:F2> * <var:G> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> * <var:m> \land <var:F2> = <nat:1> * <var:m> \} \\ <var:F2> := <var:F2> * <var:G> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> * <var:m> \land <var:F2> = <nat:1> * <var:m> ^ <nat:2> \} \\ <var:L> := <var:F2> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> * <var:m> \land <var:L> = <nat:1> * <var:m> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:F1> ; \\ \{ <var:G> = <var:m> \land <var:F0> = <nat:2> \land <var:L> = <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> \} \\ <var:L> := <var:L> + <var:F0> \\ \{ <var:G> = <var:m> \land <var:L> = <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> \} \end{eqnarray} Thus , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:G> = <var:m> }} <var:F0> := <nat:2> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:G> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:G> ; <var:F2> := <var:F2> * <var:G> ; <var:L> := <var:F2> ; <var:L> := <var:L> + <var:F1> ; <var:L> := <var:L> + <var:F0> {{ <var:L> = <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> * <var:m> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> * <var:m> /\ <var:F2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> * <var:m> /\ <var:F2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> * <var:m> /\ <var:L> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:F0> = <nat:2> /\ <var:L> = <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:m> /\ <var:L> = <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 