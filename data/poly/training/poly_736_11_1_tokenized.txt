\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:s> ; <var:D2> := <var:D1> * <var:s> ; <var:D3> := <var:D2> * <var:s> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:1> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:1> ; <var:q> := <var:D3> <var:q> := <var:q> + <var:D2> <var:q> := <var:q> + <var:D1> <var:q> := <var:q> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Assuming it to be that $ <var:s> = <var:v> $ ahead of evaluating our program it holds that we have $ <var:q> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is done using usual Hoare reasoning . Immediately following , the environment update code assigning $ <var:s> $ toward $ <var:D1>$ . This code transfers the precondition $ \{ <var:s> = <var:v> \} $ as the condition $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \} $ . This is rigorously given by the assignment scheme of typical Hoare reasoning . Immediately following , we see the variable binding statement \verb | <var:D2> := <var:D1> * <var:s> ; | . This statement moves $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \} $ into the condition $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \} $ . This is sound using the assignment inference rule given in usual Hoare logic . Moving forward to the next line in the set of commands , we have the variable binding command \verb | <var:D3> := <var:D2> * <var:s> ; | . This advances the condition $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \} $ to $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \} $ . Going to the next step , the command \verb | <var:D0> := <nat:1> ; | . This statement forwards $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \} $ as $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . Taking a look at the proceeding step seen in the set of commands , the binding statement assigning $ <var:D1> * <nat:1> $ toward $ <var:D1>$ . This transfers the condition $ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ toward the postcondition $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . This is guaranteed by the assignment scheme defined by Hoare techniques . Stepping through , we see the variable binding line \verb | <var:D2> := <var:D2> * <nat:1> ; | . This statement forwards the condition $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ to the condition $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <nat:1> * <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . This is shown to be logically sound using the assignment scheme found in typical Hoare reasoning . Honing in on the upcoming step seen in our series of commands , we see the command \verb | <var:D3> := <var:D3> * <nat:1> ; | . This command moves $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <nat:1> * <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ into the condition $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <nat:1> * <var:v> ^ <nat:2> \land <var:D3> = <nat:1> * <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . Honing in on the proceeding statement found in the set of commands , we have the variable update code \verb | <var:q> := <var:D3> | . This line advances the condition $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <nat:1> * <var:v> ^ <nat:2> \land <var:D3> = <nat:1> * <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} $ into $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <nat:1> * <var:v> ^ <nat:2> \land <var:D0> = <nat:1> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> \} $ . This is given using the assignment scheme in Hoare reasoning . Advancing to the next step , we see the variable binding line defining $ <var:q> + <var:D2$ into $ <var:q>$ . This line moves $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D2> = <nat:1> * <var:v> ^ <nat:2> \land <var:D0> = <nat:1> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> \} $ as $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D0> = <nat:1> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> \} $ . This is given by the assignment scheme from Hoare logic . Jumping to the next bit of code contained in the list of instructions , we see the assignment line binding $ <var:q> + <var:D1$ to $ <var:q>$ . This code forwards $ \{ <var:s> = <var:v> \land <var:D1> = <nat:1> * <var:v> \land <var:D0> = <nat:1> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> \} $ as the postcondition $ \{ <var:s> = <var:v> \land <var:D0> = <nat:1> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} $ . Observing the following bit of code contained in the list of commands , the binding code yielding $ <var:q> + <var:D0$ toward $ <var:q>$ . This takes the condition $ \{ <var:s> = <var:v> \land <var:D0> = <nat:1> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} $ into the postcondition $ \{ <var:s> = <var:v> \land <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:s> ; <var:D2> := <var:D1> * <var:s> ; <var:D3> := <var:D2> * <var:s> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:1> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:1> ; <var:q> := <var:D3> <var:q> := <var:q> + <var:D2> <var:q> := <var:q> + <var:D1> <var:q> := <var:q> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:s> = <var:v> }} <def:poly> {{ <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:1> * <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:1> * <var:v> /\ <var:D2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:1> * <var:v> /\ <var:D2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:1> * <var:v> /\ <var:D2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:D0> = <nat:1> /\ <var:q> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:1> * <var:v> /\ <var:D0> = <nat:1> /\ <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D0> = <nat:1> /\ <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:q> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 