\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:8> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:S> ; <var:w> := <var:A1> ; <var:w> := <var:w> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:S> = <var:D> $ prior to the evaluation of our list of commands , it holds that $ <var:w> = <nat:8> \cdot <var:D> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions is done by usual Hoare techniques . Focusing on the upcoming piece of code found in our code , we have the variable update line \verb | <var:A0> := <nat:8> ; | . This forwards the precondition $ \{ <var:S> = <var:D> \} $ as $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \} $ . This is rigorously given through the assignment law given by typical Hoare reasoning . Observing the upcoming bit of code in our code segment , we see the assignment command \verb | <var:A1> := <nat:8> ; | . This advances the condition $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \} $ toward $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \land <var:A1> = <nat:8> \} $ . Taking a look at the subsequent step found in the code segment , the variable assignmet line \verb | <var:A1> := <var:A1> * <var:S> ; | . This code takes the condition $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \land <var:A1> = <nat:8> \} $ into the condition $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \land <var:A1> = <nat:8> * <var:D> \} $ . Considering the proceeding command seen in our set of instructions , the environment update statement binding $ <var:A1> $ toward $ <var:w>$ . This line advances the condition $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \land <var:A1> = <nat:8> * <var:D> \} $ into $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \land <var:w> = <nat:8> * <var:D> \} $ . This is rigorously given using the assignment law obtained from typical Hoare reasoning . Considering the following bit of code found in the segment of code , we have the binding line binding $ <var:w> + <var:A0$ to $ <var:w>$ . This forwards the precondition $ \{ <var:S> = <var:D> \land <var:A0> = <nat:8> \land <var:w> = <nat:8> * <var:D> \} $ toward $ \{ <var:S> = <var:D> \land <var:w> = <nat:8> * <var:D> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:8> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:S> ; <var:w> := <var:A1> ; <var:w> := <var:w> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:S> = <var:D> }} <def:poly> {{ <var:w> = <nat:8> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:A0> = <nat:8> /\ <var:w> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:w> = <nat:8> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 