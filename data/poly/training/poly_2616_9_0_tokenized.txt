\begin{document} \begin{theorem} We define a list of commands : \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:m> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:m> ; <var:k2> := <var:k2> * <var:m> ; <var:g> := <var:k2> ; <var:g> := <var:g> + <var:k1> ; <var:g> := <var:g> + <var:k0> \end{verbatim} Allowing given $ <var:P> \in \mathbb{N} $ that we have $ <var:m> = <var:P> $ before the execution of this program , then $ <var:g> = <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code segment can be done by Hoare techniques . Observing the subsequent bit of code found in our list of instructions , we have the variable binding code \verb | <var:k0> := <nat:2> ; | . This command moves $ \{ <var:m> = <var:P> \} $ into the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \} $ . This is ensured using the assignment law defined in typical Hoare logic . Now , the statement giving $ <nat:2> $ as $ <var:k1>$ . This code redefines the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \} $ into the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \} $ . Moving on to the upcoming step found in our list of instructions , we see the assignment statement \verb | <var:k1> := <var:k1> * <var:m> ; | . This code advances $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \} $ . Going to the next step , we see the code giving $ <nat:4> $ to $ <var:k2>$ . This line transfers $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \} $ as the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:k2> = <nat:4> \} $ . Paying attention to the subsequent statement found in our series of commands , the variable assignmet code assigning $ <var:k2> * <var:m> $ to $ <var:k2>$ . This takes $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:k2> = <nat:4> \} $ as $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:k2> = <nat:4> \cdot <var:P> \} $ . Stepping through , we see the variable binding statement assigning $ <var:k2> * <var:m> $ toward $ <var:k2>$ . This command advances the precondition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:k2> = <nat:4> \cdot <var:P> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:k2> = <nat:4> \cdot <var:P> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule from Hoare techniques . Moving on to the next step , we have the variable binding line \verb | <var:g> := <var:k2> ; | . This code transfers the precondition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:k2> = <nat:4> \cdot <var:P> ^ <nat:2> \} $ toward the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:g> = <nat:4> \cdot <var:P> ^ <nat:2> \} $ . Stepping forward , we see the code defining $ <var:g> + <var:k1> $ toward $ <var:g>$ . This forwards the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \cdot <var:P> \land <var:g> = <nat:4> \cdot <var:P> ^ <nat:2> \} $ into the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:g> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> \} $ . Looking at the subsequent command contained in the set of commands , we have the command assigning $ <var:g> + <var:k0$ toward $ <var:g>$ . This forwards the condition $ \{ <var:m> = <var:P> \land <var:k0> = <nat:2> \land <var:g> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> \} $ as the condition $ \{ <var:m> = <var:P> \land <var:g> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:2> \} $ . This is given using the assignment scheme given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <var:k0> := <nat:2> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:m> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:m> ; <var:k2> := <var:k2> * <var:m> ; <var:g> := <var:k2> ; <var:g> := <var:g> + <var:k1> ; <var:g> := <var:g> + <var:k0> {{ <var:g> = <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:P> /\ <var:k2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:P> /\ <var:k2> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:P> /\ <var:k2> = <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:P> /\ <var:g> = <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:k0> = <nat:2> /\ <var:g> = <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:g> = <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 