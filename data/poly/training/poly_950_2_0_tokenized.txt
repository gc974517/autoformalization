\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:2> ; <var:q> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing , assuming some positive coefficients $ <var:b> $ , that $ <var:h> = <var:b> $ ahead of the execution of the code it follows that we see $ <var:q> = <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:h> = <var:b> \} \\ <var:L0> := <nat:2> ; \\ \{ <var:h> = <var:b> \land <var:L0> = <nat:2> \} \\ <var:q> := <var:L0> \\ \{ <var:h> = <var:b> \land <var:q> = <nat:2> \} \end{eqnarray} Thus , this set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:2> ; <var:q> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:h> = <var:b> }} <def:poly> {{ <var:q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 