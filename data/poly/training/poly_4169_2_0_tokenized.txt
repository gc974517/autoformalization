\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:2> ; <var:Z> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Assuming that we have $ <var:F> = <var:i> $ before interpreting the list of instructions it must be that we have $ <var:Z> = <nat:2> $ . \end{theorem} \begin{proof} Note that the below decorated series of instructions . \begin{eqnarray} \{ <var:F> = <var:i> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:F> = <var:i> \land <var:w0> = <nat:2> \} \\ <var:Z> := <var:w0> \\ \{ <var:F> = <var:i> \land <var:Z> = <nat:2> \} \end{eqnarray} Using typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:Z> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:F> = <var:i> }} <def:poly> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:i> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 