\begin{document} \begin{theorem} Consider the following list of instructions : \begin{verbatim} <var:d0> := <nat:9> ; <var:j> := <var:d0> \end{verbatim} Assuming $ <var:b> = <var:S> $ ( assuming some integers $ <var:S> $ ) ahead of running the code segment , it holds that $ <var:j> = <nat:9> $ when list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:S> \} \\ <var:d0> := <nat:9> ; \\ \{ <var:b> = <var:S> \land <var:d0> = <nat:9> \} \\ <var:j> := <var:d0> \\ \{ <var:b> = <var:S> \land <var:j> = <nat:9> \} \end{eqnarray} Utilizing usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <var:d0> := <nat:9> ; <var:j> := <var:d0> {{ <var:j> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:j> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 