\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:8> ; <var:a> := <var:C0> \end{verbatim} Assume that $ <var:Z> = <var:A> $ , for all natural numbers $ <var:A> $ , prior to evaluating this set of instructions , it holds that $ <var:a> = <nat:8> $ once code finishes . \end{theorem} \begin{proof} The course of logic for this series of instructions is clear by usual Hoare logic . Immediately after , the assignment code \verb | <var:C0> := <nat:8> ; | . This forwards the precondition $ \{ <var:Z> = <var:A> \} $ into the postcondition $ \{ <var:Z> = <var:A> \land <var:C0> = <nat:8> \} $ . Taking another step toward the next bit of code seen in the list of commands , we have the statement yielding $ <var:C0$ to $ <var:a>$ . This forwards the condition $ \{ <var:Z> = <var:A> \land <var:C0> = <nat:8> \} $ into the condition $ \{ <var:Z> = <var:A> \land <var:a> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Z> = <var:A> }} <var:C0> := <nat:8> ; <var:a> := <var:C0> {{ <var:a> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 