\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:4> ; <var:r> := <var:B0> \end{verbatim} Assuming ( taking positive integer coefficients $ <var:g> $ ) it to hold that $ <var:F> = <var:g> $ ahead of evaluating our series of instructions it holds that $ <var:r> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:g> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:F> = <var:g> \land <var:B0> = <nat:4> \} \\ <var:r> := <var:B0> \\ \{ <var:F> = <var:g> \land <var:r> = <nat:4> \} \end{eqnarray} The application of typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <var:B0> := <nat:4> ; <var:r> := <var:B0> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 