\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:4> ; <var:M> := <var:k3> <var:M> := <var:M> + <var:k2> <var:M> := <var:M> + <var:k1> <var:M> := <var:M> + <var:k0> \end{verbatim} Given that $ <var:n> = <var:l> $ prior to interpreting the segment of code then we have $ <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> $ after list of instructions finishes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:n> = <var:l> \} \\ <var:k1> := <var:n> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <var:l> \} \\ <var:k2> := <var:k1> * <var:n> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <var:l> \land <var:k2> = <var:l> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:n> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <var:l> \land <var:k2> = <var:l> ^ <nat:2> \land <var:k3> = <var:l> ^ <nat:3> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <var:l> \land <var:k2> = <var:l> ^ <nat:2> \land <var:k3> = <var:l> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:k1> := <var:k1> * <nat:4> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <var:l> ^ <nat:2> \land <var:k3> = <var:l> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:k2> := <var:k2> * <nat:1> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <nat:1> * <var:l> ^ <nat:2> \land <var:k3> = <var:l> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:k3> := <var:k3> * <nat:4> ; \\ \{ <var:n> = <var:l> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <nat:1> * <var:l> ^ <nat:2> \land <var:k3> = <nat:4> * <var:l> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:M> := <var:k3> \\ \{ <var:n> = <var:l> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <nat:1> * <var:l> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:M> = <nat:4> * <var:l> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:k2> \\ \{ <var:n> = <var:l> \land <var:k1> = <nat:4> * <var:l> \land <var:k0> = <nat:3> \land <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:k1> \\ \{ <var:n> = <var:l> \land <var:k0> = <nat:3> \land <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> \} \\ <var:M> := <var:M> + <var:k0> \\ \{ <var:n> = <var:l> \land <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> \} \end{eqnarray} Given the preceding argument , the code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:4> ; <var:M> := <var:k3> <var:M> := <var:M> + <var:k2> <var:M> := <var:M> + <var:k1> <var:M> := <var:M> + <var:k0> {{ <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <var:l> /\ <var:k2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <var:l> /\ <var:k2> = <var:l> ^ <nat:2> /\ <var:k3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <var:l> /\ <var:k2> = <var:l> ^ <nat:2> /\ <var:k3> = <var:l> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <var:l> ^ <nat:2> /\ <var:k3> = <var:l> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:k3> = <var:l> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:k0> = <nat:3> /\ <var:M> = <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k0> = <nat:3> /\ <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:k0> = <nat:3> /\ <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:M> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 