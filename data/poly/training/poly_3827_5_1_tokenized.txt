\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:o> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:4> ; <var:l> := <var:C1> <var:l> := <var:l> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:o> = <var:k> $ ahead of the execution of this list of instructions , then we have $ <var:l> = <nat:4> * <var:k> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:o> = <var:k> \} \\ <var:C1> := <var:o> ; \\ \{ <var:o> = <var:k> \land <var:C1> = <var:k> \} \\ <var:C0> := <nat:8> ; \\ \{ <var:o> = <var:k> \land <var:C1> = <var:k> \land <var:C0> = <nat:8> \} \\ <var:C1> := <var:C1> * <nat:4> ; \\ \{ <var:o> = <var:k> \land <var:C1> = <nat:4> * <var:k> \land <var:C0> = <nat:8> \} \end{eqnarray} Continuing the evaluation of our list of instructions yields : \begin{eqnarray} <var:l> := <var:C1> \\ \{ <var:o> = <var:k> \land <var:C0> = <nat:8> \land <var:l> = <nat:4> * <var:k> \} \\ <var:l> := <var:l> + <var:C0> \\ \{ <var:o> = <var:k> \land <var:l> = <nat:4> * <var:k> + <nat:8> \} \end{eqnarray} Considering the above , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:o> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:4> ; <var:l> := <var:C1> <var:l> := <var:l> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:o> = <var:k> }} <def:poly> {{ <var:l> = <nat:4> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:C1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:C1> = <var:k> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:C1> = <nat:4> * <var:k> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:C0> = <nat:8> /\ <var:l> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:l> = <nat:4> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 