\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:S0> := <nat:3> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:i> ; <var:Z> := <var:S1> ; <var:Z> := <var:Z> + <var:S0> \end{verbatim} Assuming that we have $ <var:i> = <var:R> $ , given some positive integers $ <var:R> $ , prior to running the program it follows that we see $ <var:Z> = <nat:2> \times <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code is done by usual Hoare reasoning . Honing in on the subsequent bits of codefound in the segment of code , we have \begin{eqnarray} \{ <var:i> = <var:R> \} \, <var:S0> := <nat:3> \, \{ <var:i> = <var:R> \land <var:S0> = <nat:3> \} \\ \{ <var:i> = <var:R> \land <var:S0> = <nat:3> \} \, <var:S1> := <nat:2> \, \{ <var:i> = <var:R> \land <var:S0> = <nat:3> \land <var:S1> = <nat:2> \} \end{eqnarray} Immediately following , \begin{eqnarray} \{ <var:i> = <var:R> \} \, <var:S0> := <nat:3> \, \{ <var:i> = <var:R> \land <var:S0> = <nat:3> \} \end{eqnarray} This is known to be sound through the rule from usual Hoare reasoning . Advancing on , we see \begin{eqnarray} \{ <var:i> = <var:R> \} \, <var:S0> := <nat:3> \, \{ <var:i> = <var:R> \land <var:S0> = <nat:3> \} \end{eqnarray} Further , we have \begin{eqnarray} \{ <var:i> = <var:R> \} \, <var:S0> := <nat:3> \, \{ <var:i> = <var:R> \land <var:S0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:i> = <var:R> }} <var:S0> := <nat:3> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:i> ; <var:Z> := <var:S1> ; <var:Z> := <var:Z> + <var:S0> {{ <var:Z> = <nat:2> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:R> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:R> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:R> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:R> /\ <var:S0> = <nat:3> /\ <var:Z> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:R> /\ <var:Z> = <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 