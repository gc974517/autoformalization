\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:M> ; <var:n2> := <var:n1> * <var:M> ; <var:n3> := <var:n2> * <var:M> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:1> ; <var:n3> := <var:n3> * <nat:7> ; <var:v> := <var:n3> <var:v> := <var:v> + <var:n2> <var:v> := <var:v> + <var:n1> <var:v> := <var:v> + <var:n0> \end{verbatim} Assuming --- given any integers $ <var:o> $ --- it to be that $ <var:M> = <var:o> $ prior to executing our list of instructions it follows that $ <var:v> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:o> \} \\ <var:n1> := <var:M> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <var:o> \} \\ <var:n2> := <var:n1> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <var:o> \land <var:n2> = <var:o> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <var:o> \land <var:n2> = <var:o> ^ <nat:2> \land <var:n3> = <var:o> ^ <nat:3> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <var:o> \land <var:n2> = <var:o> ^ <nat:2> \land <var:n3> = <var:o> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:n1> := <var:n1> * <nat:3> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <nat:3> \cdot <var:o> \land <var:n2> = <var:o> ^ <nat:2> \land <var:n3> = <var:o> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:n2> := <var:n2> * <nat:1> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <nat:3> \cdot <var:o> \land <var:n2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:n3> = <var:o> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:n3> := <var:n3> * <nat:7> ; \\ \{ <var:M> = <var:o> \land <var:n1> = <nat:3> \cdot <var:o> \land <var:n2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:n3> = <nat:7> \cdot <var:o> ^ <nat:3> \land <var:n0> = <nat:1> \} \\ <var:v> := <var:n3> \\ \{ <var:M> = <var:o> \land <var:n1> = <nat:3> \cdot <var:o> \land <var:n2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:n0> = <nat:1> \land <var:v> = <nat:7> \cdot <var:o> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:n2> \\ \{ <var:M> = <var:o> \land <var:n1> = <nat:3> \cdot <var:o> \land <var:n0> = <nat:1> \land <var:v> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:n1> \\ \{ <var:M> = <var:o> \land <var:n0> = <nat:1> \land <var:v> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> \} \\ <var:v> := <var:v> + <var:n0> \\ \{ <var:M> = <var:o> \land <var:v> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:M> = <var:o> }} <var:n1> := <var:M> ; <var:n2> := <var:n1> * <var:M> ; <var:n3> := <var:n2> * <var:M> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:1> ; <var:n3> := <var:n3> * <nat:7> ; <var:v> := <var:n3> <var:v> := <var:v> + <var:n2> <var:v> := <var:v> + <var:n1> <var:v> := <var:v> + <var:n0> {{ <var:v> = <nat:7> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <var:o> /\ <var:n2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <var:o> /\ <var:n2> = <var:o> ^ <nat:2> /\ <var:n3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <var:o> /\ <var:n2> = <var:o> ^ <nat:2> /\ <var:n3> = <var:o> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <nat:3> * <var:o> /\ <var:n2> = <var:o> ^ <nat:2> /\ <var:n3> = <var:o> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <nat:3> * <var:o> /\ <var:n2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:n3> = <var:o> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <nat:3> * <var:o> /\ <var:n2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:n3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <nat:3> * <var:o> /\ <var:n2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:n0> = <nat:1> /\ <var:v> = <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n1> = <nat:3> * <var:o> /\ <var:n0> = <nat:1> /\ <var:v> = <nat:7> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:n0> = <nat:1> /\ <var:v> = <nat:7> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:v> = <nat:7> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 