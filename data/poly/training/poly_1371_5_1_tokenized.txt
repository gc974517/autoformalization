\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:h> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:3> ; <var:O> := <var:t1> <var:O> := <var:O> + <var:t0> \end{verbatim} Allow it to hold that $ <var:h> = <var:f> $ , given positive coefficients $ <var:f> $ , prior to evaluating the set of commands , it follows that we see $ <var:O> = <nat:3> \times <var:f> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions can be seen through Hoare logic . Advancing to the next step , we see \verb | { <var:h> = <var:f> } <var:t1> := <var:h> { <var:h> = <var:f> \land <var:t1> = <var:f> } | . This is shown to be logically sound by the variable binding law defined by standard Hoare reasoning . Advancing , we see \verb | { <var:h> = <var:f> } <var:t1> := <var:h> { <var:h> = <var:f> \land <var:t1> = <var:f> } | , \verb | { <var:h> = <var:f> \land <var:t1> = <var:f> } <var:t0> := <nat:8> { <var:h> = <var:f> \land <var:t1> = <var:f> \land <var:t0> = <nat:8> } | and \verb | { <var:h> = <var:f> \land <var:t1> = <var:f> \land <var:t0> = <nat:8> } <var:t1> := <var:t1> * <nat:3> { <var:h> = <var:f> \land <var:t1> = <nat:3> * <var:f> \land <var:t0> = <nat:8> } | . This is ensured by the binding rule in usual Hoare logic . Looking at the next line of code in the program , \verb | { <var:h> = <var:f> } <var:t1> := <var:h> { <var:h> = <var:f> \land <var:t1> = <var:f> } | . This is sound with the variable assignmet rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:h> = <var:f> }} <var:t1> := <var:h> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:3> ; <var:O> := <var:t1> <var:O> := <var:O> + <var:t0> {{ <var:O> = <nat:3> * <var:f> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:t1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:t1> = <var:f> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:t1> = <nat:3> * <var:f> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:t0> = <nat:8> /\ <var:O> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:O> = <nat:3> * <var:f> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 