\begin{document} \begin{theorem} Consider the following set of commands as follows \begin{verbatim} <var:b0> := <nat:2> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:Q> ; <var:w> := <var:b1> ; <var:w> := <var:w> + <var:b0> \end{verbatim} Allowing it to hold that $ <var:Q> = <var:m> $ prior to the execution of our program , it must be that we have $ <var:w> = <nat:1> \times <var:m> + <nat:2> $ after segment of code has executed . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be demonstrated with typical Hoare reasoning . Honing in on the upcoming pieces of code found in the code segment , we have \begin{verbatim} { <var:Q> = <var:m> } <var:b0> := <nat:2> { <var:Q> = <var:m> \land <var:b0> = <nat:2> } { <var:Q> = <var:m> \land <var:b0> = <nat:2> } <var:b1> := <nat:1> { <var:Q> = <var:m> \land <var:b0> = <nat:2> \land <var:b1> = <nat:1> } { <var:Q> = <var:m> \land <var:b0> = <nat:2> \land <var:b1> = <nat:1> } <var:b1> := <var:b1> * <var:Q> { <var:Q> = <var:m> \land <var:b0> = <nat:2> \land <var:b1> = <nat:1> \cdot <var:m> } { <var:Q> = <var:m> \land <var:b0> = <nat:2> \land <var:b1> = <nat:1> \cdot <var:m> } <var:w> := <var:b1> { <var:Q> = <var:m> \land <var:b0> = <nat:2> \land <var:w> = <nat:1> \cdot <var:m> } \end{verbatim} After , we see \begin{verbatim} { <var:Q> = <var:m> } <var:b0> := <nat:2> { <var:Q> = <var:m> \land <var:b0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Q> = <var:m> }} <var:b0> := <nat:2> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:Q> ; <var:w> := <var:b1> ; <var:w> := <var:w> + <var:b0> {{ <var:w> = <nat:1> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:b0> = <nat:2> /\ <var:w> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:w> = <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 