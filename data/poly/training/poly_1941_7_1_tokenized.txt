\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:J1> := <var:N> ; <var:J2> := <var:J1> * <var:N> ; <var:J3> := <var:J2> * <var:N> ; <var:J0> := <nat:2> ; <var:J3> := <var:J3> * <nat:4> ; <var:w> := <var:J3> <var:w> := <var:w> + <var:J0> \end{verbatim} Allow for every $ <var:q> $ that we have $ <var:N> = <var:q> $ ahead of executing the program , it follows that we have $ <var:w> = <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the segment of code can be accomplished by usual Hoare reasoning . Focusing on the following step in the code segment , we see the statement \verb | <var:J1> := <var:N> ; | . This redefines the condition $ \{ <var:N> = <var:q> \} $ to the condition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \} $ . This is shown by the assignment law defined in usual Hoare reasoning . Moving forward to the next step , the variable update line \verb | <var:J2> := <var:J1> * <var:N> ; | . This command moves the precondition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \} $ toward $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \} $ . Moving on , the code assigning $ <var:J2> * <var:N> $ as $ <var:J3>$ . This takes the precondition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \} $ into the postcondition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J3> = <var:q> ^ <nat:3> \} $ . Advancing to the next step , the environment update command \verb | <var:J0> := <nat:2> ; | . This forwards the condition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J3> = <var:q> ^ <nat:3> \} $ toward the postcondition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J3> = <var:q> ^ <nat:3> \land <var:J0> = <nat:2> \} $ . This is known to be sound with the assignment scheme given by usual Hoare logic . Observing the next step contained in the code segment , the variable assignmet statement \verb | <var:J3> := <var:J3> * <nat:4> ; | . This takes the condition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J3> = <var:q> ^ <nat:3> \land <var:J0> = <nat:2> \} $ toward the postcondition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J3> = <nat:4> * <var:q> ^ <nat:3> \land <var:J0> = <nat:2> \} $ . This is sound by the assignment inference rule of standard Hoare logic . Going forward , we see the command \verb | <var:w> := <var:J3> | . This transfers $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J3> = <nat:4> * <var:q> ^ <nat:3> \land <var:J0> = <nat:2> \} $ to the postcondition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J0> = <nat:2> \land <var:w> = <nat:4> * <var:q> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme found in standard Hoare techniques . Focusing on the next piece of code in the list of commands , the environment update command yielding $ <var:w> + <var:J0$ into $ <var:w>$ . This advances the condition $ \{ <var:N> = <var:q> \land <var:J1> = <var:q> \land <var:J2> = <var:q> ^ <nat:2> \land <var:J0> = <nat:2> \land <var:w> = <nat:4> * <var:q> ^ <nat:3> \} $ as the condition $ \{ <var:N> = <var:q> \land <var:w> = <nat:4> * <var:q> ^ <nat:3> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:N> = <var:q> }} <var:J1> := <var:N> ; <var:J2> := <var:J1> * <var:N> ; <var:J3> := <var:J2> * <var:N> ; <var:J0> := <nat:2> ; <var:J3> := <var:J3> * <nat:4> ; <var:w> := <var:J3> <var:w> := <var:w> + <var:J0> {{ <var:w> = <nat:4> * <var:q> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:J1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:J1> = <var:q> /\ <var:J2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:J1> = <var:q> /\ <var:J2> = <var:q> ^ <nat:2> /\ <var:J3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:J1> = <var:q> /\ <var:J2> = <var:q> ^ <nat:2> /\ <var:J3> = <var:q> ^ <nat:3> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:J1> = <var:q> /\ <var:J2> = <var:q> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:J1> = <var:q> /\ <var:J2> = <var:q> ^ <nat:2> /\ <var:J0> = <nat:2> /\ <var:w> = <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:w> = <nat:4> * <var:q> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 