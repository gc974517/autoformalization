\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:x1> := <var:K> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:4> ; <var:h> := <var:x1> <var:h> := <var:h> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow ( for every $ <var:b> $ ) it to be that $ <var:K> = <var:b> $ before evaluating the list of commands , it follows that we see $ <var:h> = <nat:4> * <var:b> + <nat:9> $ when set of instructions has exited . \end{theorem} \begin{proof} The flow of logic for this set of commands can be seen by typical Hoare techniques . Shifting focus toward the following command in our set of commands , the command \verb | <var:x1> := <var:K> ; | . This takes $ \{ <var:K> = <var:b> \} $ toward the postcondition $ \{ <var:K> = <var:b> \land <var:x1> = <var:b> \} $ . This is guaranteed with the assignment inference rule from typical Hoare techniques . Considering the following line of code contained in the program , we have the variable update line yielding $ <nat:9> $ as $ <var:x0>$ . This line takes $ \{ <var:K> = <var:b> \land <var:x1> = <var:b> \} $ as the postcondition $ \{ <var:K> = <var:b> \land <var:x1> = <var:b> \land <var:x0> = <nat:9> \} $ . Following , we see the assignment command binding $ <var:x1> * <nat:4> $ toward $ <var:x1>$ . This forwards $ \{ <var:K> = <var:b> \land <var:x1> = <var:b> \land <var:x0> = <nat:9> \} $ as $ \{ <var:K> = <var:b> \land <var:x1> = <nat:4> * <var:b> \land <var:x0> = <nat:9> \} $ . Advancing , the assignment statement \verb | <var:h> := <var:x1> | . This command redefines $ \{ <var:K> = <var:b> \land <var:x1> = <nat:4> * <var:b> \land <var:x0> = <nat:9> \} $ into $ \{ <var:K> = <var:b> \land <var:x0> = <nat:9> \land <var:h> = <nat:4> * <var:b> \} $ . Now , we see the command yielding $ <var:h> + <var:x0$ toward $ <var:h>$ . This statement redefines $ \{ <var:K> = <var:b> \land <var:x0> = <nat:9> \land <var:h> = <nat:4> * <var:b> \} $ as the postcondition $ \{ <var:K> = <var:b> \land <var:h> = <nat:4> * <var:b> + <nat:9> \} $ . This is guaranteed using the assignment rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:K> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:4> ; <var:h> := <var:x1> <var:h> := <var:h> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:K> = <var:b> }} <def:poly> {{ <var:h> = <nat:4> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:x1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:x1> = <var:b> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:x1> = <nat:4> * <var:b> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:x0> = <nat:9> /\ <var:h> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:h> = <nat:4> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 