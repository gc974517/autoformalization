\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:k1> := <var:a> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:4> ; <var:R> := <var:k1> <var:R> := <var:R> + <var:k0> \end{verbatim} Assuming that $ <var:a> = <var:r> $ before executing this list of commands then we have $ <var:R> = <nat:4> \cdot <var:r> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be done using Hoare techniques . Moving forward to the next step , \verb | { <var:a> = <var:r> } <var:k1> := <var:a> { <var:a> = <var:r> \land <var:k1> = <var:r> } | , \verb | { <var:a> = <var:r> \land <var:k1> = <var:r> } <var:k0> := <nat:6> { <var:a> = <var:r> \land <var:k1> = <var:r> \land <var:k0> = <nat:6> } | and \verb | { <var:a> = <var:r> \land <var:k1> = <var:r> \land <var:k0> = <nat:6> } <var:k1> := <var:k1> * <nat:4> { <var:a> = <var:r> \land <var:k1> = <nat:4> \times <var:r> \land <var:k0> = <nat:6> } | . This is shown with the variable assignmet scheme given by usual Hoare techniques . After , \verb | { <var:a> = <var:r> } <var:k1> := <var:a> { <var:a> = <var:r> \land <var:k1> = <var:r> } | . Considering the following statement found in the code segment , we see \verb | { <var:a> = <var:r> } <var:k1> := <var:a> { <var:a> = <var:r> \land <var:k1> = <var:r> } | . This is shown using the environment update inference rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:a> = <var:r> }} <var:k1> := <var:a> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:4> ; <var:R> := <var:k1> <var:R> := <var:R> + <var:k0> {{ <var:R> = <nat:4> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:k1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:k1> = <var:r> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:k1> = <nat:4> * <var:r> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:k0> = <nat:6> /\ <var:R> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:R> = <nat:4> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 