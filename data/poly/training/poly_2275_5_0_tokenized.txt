\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:P> ; <var:S> := <var:o1> ; <var:S> := <var:S> + <var:o0> \end{verbatim} Allow ( given every positive integers $ <var:E> $ ) $ <var:P> = <var:E> $ ahead of the execution of this set of commands , then $ <var:S> = <nat:7> \cdot <var:E> + <nat:1> $ when segment of code is done . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be shown with usual Hoare logic . Honing in on the next bits of codefound in the series of instructions , we have \begin{eqnarray} \{ <var:P> = <var:E> \} \, <var:o0> := <nat:1> \, \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \} \\ \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \} \, <var:o1> := <nat:7> \, \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \land <var:o1> = <nat:7> \} \\ \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \land <var:o1> = <nat:7> \} \, <var:o1> := <var:o1> * <var:P> \, \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \land <var:o1> = <nat:7> \times <var:E> \} \\ \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \land <var:o1> = <nat:7> \times <var:E> \} \, <var:S> := <var:o1> \, \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \land <var:S> = <nat:7> \times <var:E> \} \\ \{ <var:P> = <var:E> \land <var:o0> = <nat:1> \land <var:S> = <nat:7> \times <var:E> \} \, <var:S> := <var:S> + <var:o0\, \{ <var:P> = <var:E> \land <var:S> = <nat:7> \times <var:E> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:P> = <var:E> }} <var:o0> := <nat:1> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:P> ; <var:S> := <var:o1> ; <var:S> := <var:S> + <var:o0> {{ <var:S> = <nat:7> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:o0> = <nat:1> /\ <var:S> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:S> = <nat:7> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 