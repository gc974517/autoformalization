\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:4> ; <var:U2> := <nat:6> ; <var:U2> := <var:U2> * <var:A> ; <var:U2> := <var:U2> * <var:A> ; <var:U3> := <nat:2> ; <var:U3> := <var:U3> * <var:A> ; <var:U3> := <var:U3> * <var:A> ; <var:U3> := <var:U3> * <var:A> ; <var:r> := <var:U3> ; <var:r> := <var:r> + <var:U2> ; <var:r> := <var:r> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:A> = <var:j> $ prior to the execution of this code segment then $ <var:r> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> ^ <nat:2> + <nat:4> $ once code segment has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:A> = <var:j> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \} \\ <var:U2> := <nat:6> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \} \\ <var:U2> := <var:U2> * <var:A> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> \} \\ <var:U2> := <var:U2> * <var:A> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> ^ <nat:2> \} \\ <var:U3> := <nat:2> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> ^ <nat:2> \land <var:U3> = <nat:2> \} \\ <var:U3> := <var:U3> * <var:A> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:j> \} \\ <var:U3> := <var:U3> * <var:A> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:j> ^ <nat:2> \} \\ <var:U3> := <var:U3> * <var:A> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:j> ^ <nat:3> \} \\ <var:r> := <var:U3> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:U2> = <nat:6> \times <var:j> ^ <nat:2> \land <var:r> = <nat:2> \times <var:j> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:U2> ; \\ \{ <var:A> = <var:j> \land <var:U0> = <nat:4> \land <var:r> = <nat:2> \times <var:j> ^ <nat:3> + <nat:6> \times <var:j> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:U0> \\ \{ <var:A> = <var:j> \land <var:r> = <nat:2> \times <var:j> ^ <nat:3> + <nat:6> \times <var:j> ^ <nat:2> + <nat:4> \} \end{eqnarray} Given the above , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U2> := <nat:6> ; <var:U2> := <var:U2> * <var:A> ; <var:U2> := <var:U2> * <var:A> ; <var:U3> := <nat:2> ; <var:U3> := <var:U3> * <var:A> ; <var:U3> := <var:U3> * <var:A> ; <var:U3> := <var:U3> * <var:A> ; <var:r> := <var:U3> ; <var:r> := <var:r> + <var:U2> ; <var:r> := <var:r> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <def:poly> {{ <var:r> = <nat:2> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:U3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:r> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:U0> = <nat:4> /\ <var:r> = <nat:2> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:r> = <nat:2> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 