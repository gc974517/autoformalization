\begin{document} \begin{theorem} Take a set of instructions as follows \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:Z> ; <var:w> := <var:w> * <var:Z> ; <var:w> := <nat:3> + <var:w> * <var:Z> ; <var:w> := <nat:3> + <var:w> * <var:Z> ; <var:w> := <var:w> * <var:Z> ; <var:w> := <nat:2> + <var:w> * <var:Z> ; <var:w> := <nat:3> + <var:w> * <var:Z> ; <var:w> := <nat:2> + <var:w> * <var:Z> \end{verbatim} Given it to be that $ <var:Z> = <var:W> $ given every whole numbers $ <var:W> $ ahead of running our code , then we have $ <var:w> = <nat:4> \cdot <var:W> ^ <nat:8> + <nat:4> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:2> $ after series of commands terminates . \end{theorem} \begin{proof} The application of standard Hoare reasoning produces : \begin{eqnarray} \{ <var:Z> = <var:W> \} \\ <var:w> := <nat:4> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> + <nat:4> \} \end{eqnarray} Furthering the evaluation of our set of commands produces : \begin{eqnarray} <var:w> := <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + \} \\ <var:w> := <nat:3> + <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> + <nat:3> \} \\ <var:w> := <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:5> + <nat:4> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + \} \\ <var:w> := <nat:2> + <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:6> + <nat:4> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:7> + <nat:4> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> + <nat:3> \} \\ <var:w> := <nat:2> + <var:w> * <var:Z> \\ \{ <var:Z> = <var:W> \land <var:w> = <nat:4> \cdot <var:W> ^ <nat:8> + <nat:4> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:2> \} \end{eqnarray} Considering the above , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Z> = <var:W> }} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:Z> ; <var:w> := <var:w> * <var:Z> ; <var:w> := <nat:3> + <var:w> * <var:Z> ; <var:w> := <nat:3> + <var:w> * <var:Z> ; <var:w> := <var:w> * <var:Z> ; <var:w> := <nat:2> + <var:w> * <var:Z> ; <var:w> := <nat:3> + <var:w> * <var:Z> ; <var:w> := <nat:2> + <var:w> * <var:Z> {{ <var:w> = <nat:4> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:w> = <nat:4> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 