\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:9> ; <var:p> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:z> = <var:q> $ assuming some natural coefficients $ <var:q> $ prior to executing this list of instructions then we see $ <var:p> = <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:z> = <var:q> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:z> = <var:q> \land <var:O0> = <nat:9> \} \\ <var:p> := <var:O0> \\ \{ <var:z> = <var:q> \land <var:p> = <nat:9> \} \end{eqnarray} As a consequence , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:p> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <def:poly> {{ <var:p> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:p> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 