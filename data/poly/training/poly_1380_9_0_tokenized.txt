\begin{document} \begin{theorem} Define the following program such that \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:F> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:F> ; <var:W2> := <var:W2> * <var:F> ; <var:w> := <var:W2> ; <var:w> := <var:w> + <var:W1> ; <var:w> := <var:w> + <var:W0> \end{verbatim} Allow that we have $ <var:F> = <var:d> $ --- given some positive integer coefficients $ <var:d> $ --- before interpreting this series of commands then $ <var:w> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this program can be accomplished by standard Hoare techniques . Focusing on the upcoming piece of code seen in the code segment , we see the binding statement \verb | <var:W0> := <nat:3> ; | . This moves $ \{ <var:F> = <var:d> \} $ as the postcondition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \} $ . This is guaranteed with the assignment scheme obtained from standard Hoare reasoning . Stepping forward , the assignment command letting $ <nat:2> $ toward $ <var:W1>$ . This command moves $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \} $ to the postcondition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \} $ . This is guaranteed with the assignment law from standard Hoare logic . Paying attention to the upcoming line in the set of instructions , we see the variable assignmet code \verb | <var:W1> := <var:W1> * <var:F> ; | . This takes $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \} $ toward the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \} $ . Advancing to the following bit of code contained in our list of commands , the variable assignmet command \verb | <var:W2> := <nat:4> ; | . This takes the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \} $ as the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:W2> = <nat:4> \} $ . This is known to be sound through the assignment inference rule obtained from typical Hoare logic . Shifting focus toward the proceeding line found in the series of instructions , we have the assignment statement \verb | <var:W2> := <var:W2> * <var:F> ; | . This redefines the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:W2> = <nat:4> \} $ toward the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:W2> = <nat:4> \cdot <var:d> \} $ . Immediately following , the binding code \verb | <var:W2> := <var:W2> * <var:F> ; | . This line forwards the precondition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:W2> = <nat:4> \cdot <var:d> \} $ to the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:W2> = <nat:4> \cdot <var:d> ^ <nat:2> \} $ . This is given by the assignment scheme in usual Hoare techniques . Immediately after , we have the line yielding $ <var:W2> $ to $ <var:w>$ . This command takes the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:W2> = <nat:4> \cdot <var:d> ^ <nat:2> \} $ as $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:w> = <nat:4> \cdot <var:d> ^ <nat:2> \} $ . This is deduced using the assignment law found in standard Hoare techniques . Looking at the subsequent statement found in the series of instructions , the variable binding line binding $ <var:w> + <var:W1> $ toward $ <var:w>$ . This transfers the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:W1> = <nat:2> \cdot <var:d> \land <var:w> = <nat:4> \cdot <var:d> ^ <nat:2> \} $ as $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:w> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> \} $ . This is shown using the assignment inference rule from usual Hoare techniques . Paying attention to the proceeding bit of code contained in our code , we see the assignment code yielding $ <var:w> + <var:W0$ to $ <var:w>$ . This code forwards the condition $ \{ <var:F> = <var:d> \land <var:W0> = <nat:3> \land <var:w> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> \} $ as the condition $ \{ <var:F> = <var:d> \land <var:w> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:3> \} $ . This is rigorously given using the assignment rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:F> = <var:d> }} <var:W0> := <nat:3> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:F> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:F> ; <var:W2> := <var:W2> * <var:F> ; <var:w> := <var:W2> ; <var:w> := <var:w> + <var:W1> ; <var:w> := <var:w> + <var:W0> {{ <var:w> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> * <var:d> /\ <var:W2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> * <var:d> /\ <var:W2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> * <var:d> /\ <var:W2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:2> * <var:d> /\ <var:w> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:W0> = <nat:3> /\ <var:w> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:w> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 