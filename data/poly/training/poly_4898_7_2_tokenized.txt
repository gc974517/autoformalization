\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:D> := <nat:2> ; <var:D> := <nat:1> + <var:D> * <var:K> ; <var:D> := <var:D> * <var:K> ; <var:D> := <nat:2> + <var:D> * <var:K> ; <var:D> := <nat:1> + <var:D> * <var:K> ; <var:D> := <nat:4> + <var:D> * <var:K> ; <var:D> := <nat:2> + <var:D> * <var:K> \end{verbatim} Assume given any $ <var:Q> $ that we have $ <var:K> = <var:Q> $ before executing this series of commands it must be that we have $ <var:D> = <nat:2> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:2> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:2> $ after series of instructions has finished . \end{theorem} \begin{proof} The method of proof for the series of instructions can be seen using standard Hoare reasoning . Taking a look at the upcoming step seen in our segment of code , the variable binding code giving $ <nat:2> $ toward $ <var:D>$ . This transfers the condition $ \{ <var:K> = <var:Q> \} $ toward $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \} $ . This is deduced through the assignment rule given by typical Hoare logic . Moving forward to the proceeding line seen in our set of commands , we see the statement \verb | <var:D> := <nat:1> + <var:D> * <var:K> ; | . This code moves $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \} $ as $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> + <nat:1> \} $ . Moving forward to the next step , we have the variable binding code \verb | <var:D> := <var:D> * <var:K> ; | . This moves $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> + <nat:1> \} $ as the postcondition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + \} $ . This is ensured through the assignment rule found in typical Hoare techniques . Advancing to the proceeding line of code in our set of instructions , the variable assignmet command assigning $ <nat:2> + <var:D> * <var:K> $ into $ <var:D>$ . This line advances the precondition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + \} $ as the condition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:2> \} $ . Shifting focus toward the subsequent command found in our series of commands , the line \verb | <var:D> := <nat:1> + <var:D> * <var:K> ; | . This redefines $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:2> \} $ into the condition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> + <nat:1> \} $ . Following , we have the variable update statement \verb | <var:D> := <nat:4> + <var:D> * <var:K> ; | . This redefines the precondition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> + <nat:1> \} $ to the condition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:4> \} $ . Taking another step toward the subsequent step found in the series of commands , we have the environment update statement defining $ <nat:2> + <var:D> * <var:K$ as $ <var:D>$ . This forwards the condition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:4> \} $ as the condition $ \{ <var:K> = <var:Q> \land <var:D> = <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:2> \} $ . This is shown with the assignment scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <var:D> := <nat:2> ; <var:D> := <nat:1> + <var:D> * <var:K> ; <var:D> := <var:D> * <var:K> ; <var:D> := <nat:2> + <var:D> * <var:K> ; <var:D> := <nat:1> + <var:D> * <var:K> ; <var:D> := <nat:4> + <var:D> * <var:K> ; <var:D> := <nat:2> + <var:D> * <var:K> {{ <var:D> = <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:D> = <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 