\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:w0> := <nat:6> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:M> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:M> ; <var:w2> := <var:w2> * <var:M> ; <var:U> := <var:w2> ; <var:U> := <var:U> + <var:w1> ; <var:U> := <var:U> + <var:w0> \end{verbatim} Allow given every integers $ <var:t> $ it to be that $ <var:M> = <var:t> $ prior to the evaluation of this code then $ <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:6> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:M> = <var:t> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> \} \\ <var:w1> := <var:w1> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> * <var:t> \} \\ <var:w2> := <nat:3> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> * <var:t> \land <var:w2> = <nat:3> \} \\ <var:w2> := <var:w2> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> * <var:t> \land <var:w2> = <nat:3> * <var:t> \} \\ <var:w2> := <var:w2> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> * <var:t> \land <var:w2> = <nat:3> * <var:t> ^ <nat:2> \} \\ <var:U> := <var:w2> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:w1> = <nat:2> * <var:t> \land <var:U> = <nat:3> * <var:t> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:w1> ; \\ \{ <var:M> = <var:t> \land <var:w0> = <nat:6> \land <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> \} \\ <var:U> := <var:U> + <var:w0> \\ \{ <var:M> = <var:t> \land <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:6> \} \end{eqnarray} As a consequence , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:M> = <var:t> }} <var:w0> := <nat:6> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:M> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:M> ; <var:w2> := <var:w2> * <var:M> ; <var:U> := <var:w2> ; <var:U> := <var:U> + <var:w1> ; <var:U> := <var:U> + <var:w0> {{ <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> * <var:t> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> * <var:t> /\ <var:w2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> * <var:t> /\ <var:w2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:2> * <var:t> /\ <var:U> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:w0> = <nat:6> /\ <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 