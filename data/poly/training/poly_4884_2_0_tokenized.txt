\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:B> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:e> = <var:O> $ before the execution of our code , it holds that we have $ <var:B> = <nat:9> $ . \end{theorem} \begin{proof} Observe the below decorated list of instructions . \begin{eqnarray} \{ <var:e> = <var:O> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:e> = <var:O> \land <var:U0> = <nat:9> \} \\ <var:B> := <var:U0> \\ \{ <var:e> = <var:O> \land <var:B> = <nat:9> \} \end{eqnarray} The application of typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:B> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:e> = <var:O> }} <def:poly> {{ <var:B> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:B> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 