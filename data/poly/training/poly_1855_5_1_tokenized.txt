\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:s1> := <var:C> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:5> ; <var:c> := <var:s1> <var:c> := <var:c> + <var:s0> \end{verbatim} Allow that $ <var:C> = <var:u> $ prior to the evaluation of the program it must be that $ <var:c> = <nat:5> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:C> = <var:u> \} \\ <var:s1> := <var:C> ; \\ \{ <var:C> = <var:u> \land <var:s1> = <var:u> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:C> = <var:u> \land <var:s1> = <var:u> \land <var:s0> = <nat:3> \} \\ <var:s1> := <var:s1> * <nat:5> ; \\ \{ <var:C> = <var:u> \land <var:s1> = <nat:5> \cdot <var:u> \land <var:s0> = <nat:3> \} \\ <var:c> := <var:s1> \\ \{ <var:C> = <var:u> \land <var:s0> = <nat:3> \land <var:c> = <nat:5> \cdot <var:u> \} \\ <var:c> := <var:c> + <var:s0> \\ \{ <var:C> = <var:u> \land <var:c> = <nat:5> \cdot <var:u> + <nat:3> \} \end{eqnarray} Considering the above , our series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:C> = <var:u> }} <var:s1> := <var:C> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:5> ; <var:c> := <var:s1> <var:c> := <var:c> + <var:s0> {{ <var:c> = <nat:5> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:s1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:s1> = <var:u> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:s1> = <nat:5> * <var:u> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:s0> = <nat:3> /\ <var:c> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:c> = <nat:5> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 