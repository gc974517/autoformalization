\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:R1> := <var:K> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:1> ; <var:h> := <var:R1> <var:h> := <var:h> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assuming that $ <var:K> = <var:H> $ before the execution of our code segment , it holds that $ <var:h> = <nat:1> * <var:H> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our list of instructions is done using the below decorated code segment . \begin{eqnarray} \{ <var:K> = <var:H> \} \\ <var:R1> := <var:K> ; \\ \{ <var:K> = <var:H> \land <var:R1> = <var:H> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:K> = <var:H> \land <var:R1> = <var:H> \land <var:R0> = <nat:2> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:K> = <var:H> \land <var:R1> = <nat:1> \cdot <var:H> \land <var:R0> = <nat:2> \} \\ <var:h> := <var:R1> \\ \{ <var:K> = <var:H> \land <var:R0> = <nat:2> \land <var:h> = <nat:1> \cdot <var:H> \} \\ <var:h> := <var:h> + <var:R0> \\ \{ <var:K> = <var:H> \land <var:h> = <nat:1> \cdot <var:H> + <nat:2> \} \end{eqnarray} The application of Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:K> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:1> ; <var:h> := <var:R1> <var:h> := <var:h> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:K> = <var:H> }} <def:poly> {{ <var:h> = <nat:1> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:R1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:R1> = <var:H> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:R1> = <nat:1> * <var:H> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:R0> = <nat:2> /\ <var:h> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:h> = <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 