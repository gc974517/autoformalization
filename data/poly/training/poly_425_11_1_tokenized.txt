\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:c> ; <var:M2> := <var:M1> * <var:c> ; <var:M3> := <var:M2> * <var:c> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:8> ; <var:M2> := <var:M2> * <nat:4> ; <var:M3> := <var:M3> * <nat:3> ; <var:O> := <var:M3> <var:O> := <var:O> + <var:M2> <var:O> := <var:O> + <var:M1> <var:O> := <var:O> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:c> = <var:Z> $ --- letting $ <var:Z> $ --- ahead of interpreting the code segment it follows that we see $ <var:O> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:2> $ once list of instructions finishes . \end{theorem} \begin{proof} The course of logic for the series of instructions is done using typical Hoare logic . Taking a look at the subsequent lines of codein the code , we have \begin{verbatim} { <var:c> = <var:Z> } <var:M1> := <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> } <var:M2> := <var:M1> * <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> } <var:M3> := <var:M2> * <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> } <var:M0> := <nat:2> { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> \land <var:M0> = <nat:2> } \end{verbatim} This is sound with the environment update law given by typical Hoare reasoning . Keeping momentum , \begin{verbatim} { <var:c> = <var:Z> } <var:M1> := <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> } <var:M2> := <var:M1> * <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> } <var:M3> := <var:M2> * <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> } <var:M0> := <nat:2> { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> \land <var:M0> = <nat:2> } { <var:c> = <var:Z> \land <var:M1> = <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> \land <var:M0> = <nat:2> } <var:M1> := <var:M1> * <nat:8> { <var:c> = <var:Z> \land <var:M1> = <nat:8> \cdot <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> \land <var:M0> = <nat:2> } { <var:c> = <var:Z> \land <var:M1> = <nat:8> \cdot <var:Z> \land <var:M2> = <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> \land <var:M0> = <nat:2> } <var:M2> := <var:M2> * <nat:4> { <var:c> = <var:Z> \land <var:M1> = <nat:8> \cdot <var:Z> \land <var:M2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:M3> = <var:Z> ^ <nat:3> \land <var:M0> = <nat:2> } \end{verbatim} This is given using the variable update rule given in typical Hoare techniques . Taking another step toward the following line of code in our list of commands , we see \begin{verbatim} { <var:c> = <var:Z> } <var:M1> := <var:c> { <var:c> = <var:Z> \land <var:M1> = <var:Z> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:c> ; <var:M2> := <var:M1> * <var:c> ; <var:M3> := <var:M2> * <var:c> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:8> ; <var:M2> := <var:M2> * <nat:4> ; <var:M3> := <var:M3> * <nat:3> ; <var:O> := <var:M3> <var:O> := <var:O> + <var:M2> <var:O> := <var:O> + <var:M1> <var:O> := <var:O> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:c> = <var:Z> }} <def:poly> {{ <var:O> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <var:Z> /\ <var:M2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <var:Z> /\ <var:M2> = <var:Z> ^ <nat:2> /\ <var:M3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <var:Z> /\ <var:M2> = <var:Z> ^ <nat:2> /\ <var:M3> = <var:Z> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <nat:8> * <var:Z> /\ <var:M2> = <var:Z> ^ <nat:2> /\ <var:M3> = <var:Z> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <nat:8> * <var:Z> /\ <var:M2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:M3> = <var:Z> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <nat:8> * <var:Z> /\ <var:M2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:Z> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <nat:8> * <var:Z> /\ <var:M2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:M0> = <nat:2> /\ <var:O> = <nat:3> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M1> = <nat:8> * <var:Z> /\ <var:M0> = <nat:2> /\ <var:O> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:M0> = <nat:2> /\ <var:O> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:O> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 