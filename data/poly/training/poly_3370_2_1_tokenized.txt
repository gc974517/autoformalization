\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:6> ; <var:h> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Given , for some $ <var:f> $ , it to be that $ <var:M> = <var:f> $ before the execution of our segment of code , it must be that $ <var:h> = <nat:6> $ . \end{theorem} \begin{proof} Observe that the following decorated code segment . \begin{eqnarray} \{ <var:M> = <var:f> \} \\ <var:U0> := <nat:6> ; \\ \{ <var:M> = <var:f> \land <var:U0> = <nat:6> \} \\ <var:h> := <var:U0> \\ \{ <var:M> = <var:f> \land <var:h> = <nat:6> \} \end{eqnarray} Applying Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:6> ; <var:h> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:M> = <var:f> }} <def:poly> {{ <var:h> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:h> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 