\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:2> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:T> ; <var:t> := <var:V1> ; <var:t> := <var:t> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:T> = <var:A> $ ( for some natural numbers $ <var:A> $ ) prior to interpreting this segment of code it holds that $ <var:t> = <nat:2> \cdot <var:A> + <nat:2> $ when series of commands terminates . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:T> = <var:A> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:T> = <var:A> \land <var:V0> = <nat:2> \} \\ <var:V1> := <nat:2> ; \\ \{ <var:T> = <var:A> \land <var:V0> = <nat:2> \land <var:V1> = <nat:2> \} \\ <var:V1> := <var:V1> * <var:T> ; \\ \{ <var:T> = <var:A> \land <var:V0> = <nat:2> \land <var:V1> = <nat:2> \times <var:A> \} \\ <var:t> := <var:V1> ; \\ \{ <var:T> = <var:A> \land <var:V0> = <nat:2> \land <var:t> = <nat:2> \times <var:A> \} \\ <var:t> := <var:t> + <var:V0> \\ \{ <var:T> = <var:A> \land <var:t> = <nat:2> \times <var:A> + <nat:2> \} \end{eqnarray} Hence , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:2> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:T> ; <var:t> := <var:V1> ; <var:t> := <var:t> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:T> = <var:A> }} <def:poly> {{ <var:t> = <nat:2> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:V0> = <nat:2> /\ <var:t> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:t> = <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 