\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:v1> := <var:w> ; <var:v2> := <var:v1> * <var:w> ; <var:v3> := <var:v2> * <var:w> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:2> ; <var:v3> := <var:v3> * <nat:3> ; <var:D> := <var:v3> <var:D> := <var:D> + <var:v2> <var:D> := <var:D> + <var:v1> <var:D> := <var:D> + <var:v0> \end{verbatim} Assuming that we have $ <var:w> = <var:m> $ ( for some $ <var:m> \in \mathbb{N} $ ) prior to running our series of commands it follows that we see $ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands can be done with standard Hoare reasoning . Moving on , we see the line \verb | <var:v1> := <var:w> ; | . This transfers the precondition $ \{ <var:w> = <var:m> \} $ to the condition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \} $ . Advancing on , the binding command giving $ <var:v1> * <var:w> $ as $ <var:v2>$ . This statement redefines the precondition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \} $ to the condition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \} $ . This is rigorously given by the assignment rule given in typical Hoare reasoning . Looking at the following line found in the set of instructions , we see the variable binding code binding $ <var:v2> * <var:w> $ toward $ <var:v3>$ . This statement moves the precondition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \} $ into the condition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \} $ . This is ensured using the assignment inference rule of Hoare logic . Moving on , we have the variable assignmet command \verb | <var:v0> := <nat:3> ; | . This statement transfers the condition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \} $ to $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ . Immediately following , the statement giving $ <var:v1> * <nat:3> $ toward $ <var:v1>$ . This advances the precondition $ \{ <var:w> = <var:m> \land <var:v1> = <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ to the postcondition $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ . This is shown through the assignment inference rule defined by Hoare reasoning . Immediately following , we have the variable assignmet statement \verb | <var:v2> := <var:v2> * <nat:2> ; | . This forwards the condition $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ to $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <nat:2> * <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ . Jumping to the following line contained in our set of instructions , we see the variable binding command \verb | <var:v3> := <var:v3> * <nat:3> ; | . This line forwards $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <nat:2> * <var:m> ^ <nat:2> \land <var:v3> = <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ into the condition $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <nat:2> * <var:m> ^ <nat:2> \land <var:v3> = <nat:3> * <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ . This is known to be sound through the assignment law found in usual Hoare techniques . Advancing to the next step , the environment update command \verb | <var:D> := <var:v3> | . This advances $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <nat:2> * <var:m> ^ <nat:2> \land <var:v3> = <nat:3> * <var:m> ^ <nat:3> \land <var:v0> = <nat:3> \} $ as $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <nat:2> * <var:m> ^ <nat:2> \land <var:v0> = <nat:3> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> \} $ . Moving forward to the subsequent piece of code in our code , the assignment code \verb | <var:D> := <var:D> + <var:v2> | . This line takes $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v2> = <nat:2> * <var:m> ^ <nat:2> \land <var:v0> = <nat:3> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> \} $ toward the condition $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v0> = <nat:3> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> \} $ . This is sound by the assignment inference rule of typical Hoare reasoning . Advancing , we have the variable binding command letting $ <var:D> + <var:v1$ as $ <var:D>$ . This takes the precondition $ \{ <var:w> = <var:m> \land <var:v1> = <nat:3> * <var:m> \land <var:v0> = <nat:3> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> \} $ into the condition $ \{ <var:w> = <var:m> \land <var:v0> = <nat:3> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> \} $ . Advancing to the next step , we see the variable binding line \verb | <var:D> := <var:D> + <var:v0> | . This transfers the condition $ \{ <var:w> = <var:m> \land <var:v0> = <nat:3> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> \} $ to the condition $ \{ <var:w> = <var:m> \land <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:w> = <var:m> }} <var:v1> := <var:w> ; <var:v2> := <var:v1> * <var:w> ; <var:v3> := <var:v2> * <var:w> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:2> ; <var:v3> := <var:v3> * <nat:3> ; <var:D> := <var:v3> <var:D> := <var:D> + <var:v2> <var:D> := <var:D> + <var:v1> <var:D> := <var:D> + <var:v0> {{ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <nat:3> * <var:m> /\ <var:v2> = <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <nat:3> * <var:m> /\ <var:v2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:v3> = <var:m> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <nat:3> * <var:m> /\ <var:v2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <nat:3> * <var:m> /\ <var:v2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:v0> = <nat:3> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v1> = <nat:3> * <var:m> /\ <var:v0> = <nat:3> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:v0> = <nat:3> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 