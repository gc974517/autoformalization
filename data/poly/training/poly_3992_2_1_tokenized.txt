\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:2> ; <var:k> := <var:f0> \end{verbatim} Assuming that we have $ <var:V> = <var:p> $ --- given integers $ <var:p> $ --- before the evaluation of our list of instructions , it must be that we see $ <var:k> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:V> = <var:p> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:V> = <var:p> \land <var:f0> = <nat:2> \} \\ <var:k> := <var:f0> \\ \{ <var:V> = <var:p> \land <var:k> = <nat:2> \} \end{eqnarray} Hence , our segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <var:f0> := <nat:2> ; <var:k> := <var:f0> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 