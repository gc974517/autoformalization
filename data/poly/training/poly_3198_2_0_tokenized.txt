\begin{document} \begin{theorem} Define a code as \begin{verbatim} <var:w0> := <nat:7> ; <var:O> := <var:w0> \end{verbatim} Allow $ <var:e> = <var:B> $ ( for positive integer coefficients $ <var:B> $ ) ahead of evaluating the code segment , it must be that we see $ <var:O> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:B> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:e> = <var:B> \land <var:w0> = <nat:7> \} \\ <var:O> := <var:w0> \\ \{ <var:e> = <var:B> \land <var:O> = <nat:7> \} \end{eqnarray} Using Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:e> = <var:B> }} <var:w0> := <nat:7> ; <var:O> := <var:w0> {{ <var:O> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:O> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 