\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:4> ; <var:H> := <var:a0> \end{verbatim} Assuming it to be that $ <var:k> = <var:e> $ ahead of the evaluation of the series of instructions it follows that we have $ <var:H> = <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this series of instructions can be shown using usual Hoare reasoning . Considering the upcoming statement found in our set of instructions , the variable update line \verb | <var:a0> := <nat:4> ; | . This advances $ \{ <var:k> = <var:e> \} $ toward $ \{ <var:k> = <var:e> \land <var:a0> = <nat:4> \} $ . This is rigorously given with the assignment scheme given by usual Hoare logic . Stepping through , we see the environment update statement giving $ <var:a0$ into $ <var:H>$ . This forwards the condition $ \{ <var:k> = <var:e> \land <var:a0> = <nat:4> \} $ as the condition $ \{ <var:k> = <var:e> \land <var:H> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:k> = <var:e> }} <var:a0> := <nat:4> ; <var:H> := <var:a0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 