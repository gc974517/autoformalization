\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:2> ; <var:H1> := <nat:7> ; <var:H1> := <var:H1> * <var:S> ; <var:d> := <var:H1> ; <var:d> := <var:d> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for natural numbers $ <var:T> $ , $ <var:S> = <var:T> $ before the evaluation of the program it follows that we have $ <var:d> = <nat:7> * <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this code is shown with typical Hoare logic . Shifting focus toward the next step contained in the code segment , we have the binding statement \verb | <var:H0> := <nat:2> ; | . This command advances the condition $ \{ <var:S> = <var:T> \} $ to the condition $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule obtained from Hoare logic . Paying attention to the proceeding bit of code in our code , we see the line \verb | <var:H1> := <nat:7> ; | . This moves the condition $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \} $ into $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:7> \} $ . Going to the next step , the binding line \verb | <var:H1> := <var:H1> * <var:S> ; | . This code moves $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:7> \} $ toward $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:7> \cdot <var:T> \} $ . Shifting focus toward the proceeding bit of code contained in the series of commands , we see the binding code \verb | <var:d> := <var:H1> ; | . This statement moves the precondition $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \land <var:H1> = <nat:7> \cdot <var:T> \} $ toward the condition $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \land <var:d> = <nat:7> \cdot <var:T> \} $ . Shifting focus toward the following line of code found in the set of instructions , the environment update code letting $ <var:d> + <var:H0$ toward $ <var:d>$ . This takes the condition $ \{ <var:S> = <var:T> \land <var:H0> = <nat:2> \land <var:d> = <nat:7> \cdot <var:T> \} $ into $ \{ <var:S> = <var:T> \land <var:d> = <nat:7> \cdot <var:T> + <nat:2> \} $ . This is shown to be logically sound through the assignment scheme of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:H1> := <nat:7> ; <var:H1> := <var:H1> * <var:S> ; <var:d> := <var:H1> ; <var:d> := <var:d> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:S> = <var:T> }} <def:poly> {{ <var:d> = <nat:7> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:H0> = <nat:2> /\ <var:d> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:d> = <nat:7> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 