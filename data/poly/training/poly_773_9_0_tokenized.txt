\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:P> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:P> ; <var:S2> := <var:S2> * <var:P> ; <var:p> := <var:S2> ; <var:p> := <var:p> + <var:S1> ; <var:p> := <var:p> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Allow it to be that $ <var:P> = <var:f> $ ahead of the evaluation of the segment of code , it holds that we see $ <var:p> = <nat:8> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> + <nat:9> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:P> = <var:f> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \} \\ <var:S1> := <nat:5> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> \} \\ <var:S1> := <var:S1> * <var:P> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:f> \} \\ <var:S2> := <nat:8> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:f> \land <var:S2> = <nat:8> \} \\ <var:S2> := <var:S2> * <var:P> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:f> \land <var:S2> = <nat:8> * <var:f> \} \\ <var:S2> := <var:S2> * <var:P> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:f> \land <var:S2> = <nat:8> * <var:f> ^ <nat:2> \} \\ <var:p> := <var:S2> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:f> \land <var:p> = <nat:8> * <var:f> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:S1> ; \\ \{ <var:P> = <var:f> \land <var:S0> = <nat:9> \land <var:p> = <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> \} \\ <var:p> := <var:p> + <var:S0> \\ \{ <var:P> = <var:f> \land <var:p> = <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> \} \end{eqnarray} Thus , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:9> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:P> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:P> ; <var:S2> := <var:S2> * <var:P> ; <var:p> := <var:S2> ; <var:p> := <var:p> + <var:S1> ; <var:p> := <var:p> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:P> = <var:f> }} <def:poly> {{ <var:p> = <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:f> /\ <var:S2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:f> /\ <var:S2> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:f> /\ <var:S2> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:f> /\ <var:p> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:S0> = <nat:9> /\ <var:p> = <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:p> = <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 