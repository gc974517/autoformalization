\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:h> ; <var:N> := <var:z1> ; <var:N> := <var:N> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Assume it to hold that $ <var:h> = <var:m> $ taking positive numbers $ <var:m> $ prior to evaluating our segment of code , it must be that we see $ <var:N> = <nat:7> \times <var:m> + <nat:1> $ once set of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this code is demonstrated using Hoare techniques . Moving onward , \begin{eqnarray} \{ <var:h> = <var:m> \} \, <var:z0> := <nat:1> \, \{ <var:h> = <var:m> \land <var:z0> = <nat:1> \} \end{eqnarray} Moving on to the subsequent step found in the list of instructions , we have \begin{eqnarray} \{ <var:h> = <var:m> \} \, <var:z0> := <nat:1> \, \{ <var:h> = <var:m> \land <var:z0> = <nat:1> \} \end{eqnarray} Moving on , \begin{eqnarray} \{ <var:h> = <var:m> \} \, <var:z0> := <nat:1> \, \{ <var:h> = <var:m> \land <var:z0> = <nat:1> \} \end{eqnarray} Jumping to the next lines of codein the program , \begin{eqnarray} \{ <var:h> = <var:m> \} \, <var:z0> := <nat:1> \, \{ <var:h> = <var:m> \land <var:z0> = <nat:1> \} \\ \{ <var:h> = <var:m> \land <var:z0> = <nat:1> \} \, <var:z1> := <nat:7> \, \{ <var:h> = <var:m> \land <var:z0> = <nat:1> \land <var:z1> = <nat:7> \} \end{eqnarray} This is rigorously given by the variable binding rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:1> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:h> ; <var:N> := <var:z1> ; <var:N> := <var:N> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:h> = <var:m> }} <def:poly> {{ <var:N> = <nat:7> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:z0> = <nat:1> /\ <var:N> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:N> = <nat:7> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 