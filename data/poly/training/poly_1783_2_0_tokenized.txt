\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:6> ; <var:o> := <var:P0> \end{verbatim} Assume that $ <var:N> = <var:T> $ prior to running this series of instructions , it follows that $ <var:o> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be demonstrated with Hoare techniques . Moving on to the next step , \verb | { <var:N> = <var:T> } <var:P0> := <nat:6> { <var:N> = <var:T> \land <var:P0> = <nat:6> } | . Moving onward , we have \verb | { <var:N> = <var:T> } <var:P0> := <nat:6> { <var:N> = <var:T> \land <var:P0> = <nat:6> } | . This is guaranteed with the variable update scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:N> = <var:T> }} <var:P0> := <nat:6> ; <var:o> := <var:P0> {{ <var:o> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:o> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 