\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <var:c> * <var:v> ; <var:c> := <nat:4> + <var:c> * <var:v> ; <var:c> := <nat:2> + <var:c> * <var:v> ; <var:c> := <nat:4> + <var:c> * <var:v> \end{verbatim} Given it to hold that $ <var:v> = <var:m> $ prior to running our code segment , it holds that $ <var:c> = <nat:3> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be accomplished using usual Hoare reasoning . Moving on to the next step , we have \begin{eqnarray} \{ <var:v> = <var:m> \} \, <var:c> := <nat:3> \, \{ <var:v> = <var:m> \land <var:c> = <nat:3> \} \\ \{ <var:v> = <var:m> \land <var:c> = <nat:3> \} \, <var:c> := <var:c> * <var:v> \, \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> + \} \\ \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> + \} \, <var:c> := <nat:4> + <var:c> * <var:v> \, \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \} \\ \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \} \, <var:c> := <nat:2> + <var:c> * <var:v> \, \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> + <nat:2> \} \\ \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> + <nat:2> \} \, <var:c> := <nat:4> + <var:c> * <var:v\, \{ <var:v> = <var:m> \land <var:c> = <nat:3> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:4> \} \end{eqnarray} This is guaranteed through the variable assignmet scheme defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:v> = <var:m> }} <var:c> := <nat:3> ; <var:c> := <var:c> * <var:v> ; <var:c> := <nat:4> + <var:c> * <var:v> ; <var:c> := <nat:2> + <var:c> * <var:v> ; <var:c> := <nat:4> + <var:c> * <var:v> {{ <var:c> = <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:c> = <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:c> = <nat:3> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:c> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:c> = <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 