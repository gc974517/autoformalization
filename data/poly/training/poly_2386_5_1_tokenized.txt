\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:b1> := <var:N> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:3> ; <var:J> := <var:b1> <var:J> := <var:J> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Assume $ <var:N> = <var:y> $ ahead of interpreting the series of instructions , it holds that $ <var:J> = <nat:3> * <var:y> + <nat:5> $ after segment of code terminates . \end{theorem} \begin{proof} Demonstrating correctness of our program can be done through usual Hoare techniques . Observing the following line contained in the set of commands , we have the environment update command \verb | <var:b1> := <var:N> ; | . This statement forwards $ \{ <var:N> = <var:y> \} $ into $ \{ <var:N> = <var:y> \land <var:b1> = <var:y> \} $ . Advancing , we see the variable binding code giving $ <nat:5> $ toward $ <var:b0>$ . This statement redefines the precondition $ \{ <var:N> = <var:y> \land <var:b1> = <var:y> \} $ as $ \{ <var:N> = <var:y> \land <var:b1> = <var:y> \land <var:b0> = <nat:5> \} $ . This is deduced with the assignment inference rule of Hoare reasoning . Jumping to the proceeding bit of code in the code , we see the binding line \verb | <var:b1> := <var:b1> * <nat:3> ; | . This moves the precondition $ \{ <var:N> = <var:y> \land <var:b1> = <var:y> \land <var:b0> = <nat:5> \} $ as the postcondition $ \{ <var:N> = <var:y> \land <var:b1> = <nat:3> * <var:y> \land <var:b0> = <nat:5> \} $ . Stepping through , the binding command \verb | <var:J> := <var:b1> | . This statement takes the condition $ \{ <var:N> = <var:y> \land <var:b1> = <nat:3> * <var:y> \land <var:b0> = <nat:5> \} $ as $ \{ <var:N> = <var:y> \land <var:b0> = <nat:5> \land <var:J> = <nat:3> * <var:y> \} $ . This is shown with the assignment scheme defined by standard Hoare logic . Going forward , we see the variable update line yielding $ <var:J> + <var:b0$ as $ <var:J>$ . This redefines the condition $ \{ <var:N> = <var:y> \land <var:b0> = <nat:5> \land <var:J> = <nat:3> * <var:y> \} $ toward $ \{ <var:N> = <var:y> \land <var:J> = <nat:3> * <var:y> + <nat:5> \} $ . This is deduced using the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:N> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:3> ; <var:J> := <var:b1> <var:J> := <var:J> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:N> = <var:y> }} <def:poly> {{ <var:J> = <nat:3> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:b1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:b1> = <var:y> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:b1> = <nat:3> * <var:y> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:b0> = <nat:5> /\ <var:J> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:J> = <nat:3> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 