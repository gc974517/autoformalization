\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:T> ; <var:K> := <var:d1> ; <var:K> := <var:K> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assuming it to hold that $ <var:T> = <var:F> $ prior to executing our program it holds that we see $ <var:K> = <nat:2> * <var:F> + <nat:4> $ after list of instructions exits . \end{theorem} \begin{proof} The course of logic for our series of instructions can be given by the below decorated segment of code . \begin{eqnarray} \{ <var:T> = <var:F> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:T> = <var:F> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:2> ; \\ \{ <var:T> = <var:F> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> \} \\ <var:d1> := <var:d1> * <var:T> ; \\ \{ <var:T> = <var:F> \land <var:d0> = <nat:4> \land <var:d1> = <nat:2> * <var:F> \} \\ <var:K> := <var:d1> ; \\ \{ <var:T> = <var:F> \land <var:d0> = <nat:4> \land <var:K> = <nat:2> * <var:F> \} \\ <var:K> := <var:K> + <var:d0> \\ \{ <var:T> = <var:F> \land <var:K> = <nat:2> * <var:F> + <nat:4> \} \end{eqnarray} Applying Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:T> ; <var:K> := <var:d1> ; <var:K> := <var:K> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:T> = <var:F> }} <def:poly> {{ <var:K> = <nat:2> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:d0> = <nat:4> /\ <var:K> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:K> = <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 