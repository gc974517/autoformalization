\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:7> ; <var:f1> := <nat:5> ; <var:f1> := <var:f1> * <var:u> ; <var:f2> := <nat:2> ; <var:f2> := <var:f2> * <var:u> ; <var:f2> := <var:f2> * <var:u> ; <var:Q> := <var:f2> ; <var:Q> := <var:Q> + <var:f1> ; <var:Q> := <var:Q> + <var:f0> \end{verbatim} Given $ <var:u> = <var:m> $ prior to interpreting the set of commands it follows that we see $ <var:Q> = <nat:2> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the code segment is done using typical Hoare reasoning . Going forward , we see the binding command assigning $ <nat:7> $ toward $ <var:f0>$ . This redefines the precondition $ \{ <var:u> = <var:m> \} $ into $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \} $ . This is shown using the assignment scheme from standard Hoare techniques . Following , the variable binding statement binding $ <nat:5> $ to $ <var:f1>$ . This advances the condition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \} $ toward the postcondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \} $ . Stepping through , we see the environment update code letting $ <var:f1> * <var:u> $ to $ <var:f1>$ . This code takes the condition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \} $ into the postcondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \} $ . Going to the next step , we have the variable binding command \verb | <var:f2> := <nat:2> ; | . This command forwards $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \} $ into $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:f2> = <nat:2> \} $ . Moving onward , we have the assignment statement \verb | <var:f2> := <var:f2> * <var:u> ; | . This forwards the precondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:f2> = <nat:2> \} $ as the condition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:f2> = <nat:2> \times <var:m> \} $ . Moving forward to the proceeding line seen in the program , the variable binding command \verb | <var:f2> := <var:f2> * <var:u> ; | . This forwards $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:f2> = <nat:2> \times <var:m> \} $ toward the postcondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:f2> = <nat:2> \times <var:m> ^ <nat:2> \} $ . Taking a look at the following statement in our code , the variable assignmet line assigning $ <var:f2> $ to $ <var:Q>$ . This forwards $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:f2> = <nat:2> \times <var:m> ^ <nat:2> \} $ as the postcondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:Q> = <nat:2> \times <var:m> ^ <nat:2> \} $ . This is sound by the assignment scheme found in Hoare logic . Next , the statement giving $ <var:Q> + <var:f1> $ as $ <var:Q>$ . This code redefines the precondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:f1> = <nat:5> \times <var:m> \land <var:Q> = <nat:2> \times <var:m> ^ <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:Q> = <nat:2> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> \} $ . This is known to be sound through the assignment rule given by usual Hoare logic . Stepping through , the environment update code letting $ <var:Q> + <var:f0$ into $ <var:Q>$ . This forwards the condition $ \{ <var:u> = <var:m> \land <var:f0> = <nat:7> \land <var:Q> = <nat:2> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> \} $ toward the condition $ \{ <var:u> = <var:m> \land <var:Q> = <nat:2> \times <var:m> ^ <nat:2> + <nat:5> \times <var:m> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:u> = <var:m> }} <var:f0> := <nat:7> ; <var:f1> := <nat:5> ; <var:f1> := <var:f1> * <var:u> ; <var:f2> := <nat:2> ; <var:f2> := <var:f2> * <var:u> ; <var:f2> := <var:f2> * <var:u> ; <var:Q> := <var:f2> ; <var:Q> := <var:Q> + <var:f1> ; <var:Q> := <var:Q> + <var:f0> {{ <var:Q> = <nat:2> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:5> * <var:m> /\ <var:f2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:5> * <var:m> /\ <var:f2> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:5> * <var:m> /\ <var:f2> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:5> * <var:m> /\ <var:Q> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:f0> = <nat:7> /\ <var:Q> = <nat:2> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:Q> = <nat:2> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 