\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:3> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:a> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:a> ; <var:h2> := <var:h2> * <var:a> ; <var:u> := <var:h2> ; <var:u> := <var:u> + <var:h1> ; <var:u> := <var:u> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow ( with some $ <var:K> $ ) it to hold that $ <var:a> = <var:K> $ prior to the evaluation of the code , it holds that we have $ <var:u> = <nat:7> \cdot <var:K> ^ <nat:2> + <nat:4> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:K> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \} \\ <var:h1> := <nat:4> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:h1> = <nat:4> \} \\ <var:h1> := <var:h1> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:h1> = <nat:4> \times <var:K> \} \\ <var:h2> := <nat:7> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:h1> = <nat:4> \times <var:K> \land <var:h2> = <nat:7> \} \\ <var:h2> := <var:h2> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:h1> = <nat:4> \times <var:K> \land <var:h2> = <nat:7> \times <var:K> \} \\ <var:h2> := <var:h2> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:h1> = <nat:4> \times <var:K> \land <var:h2> = <nat:7> \times <var:K> ^ <nat:2> \} \\ <var:u> := <var:h2> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:h1> = <nat:4> \times <var:K> \land <var:u> = <nat:7> \times <var:K> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:h1> ; \\ \{ <var:a> = <var:K> \land <var:h0> = <nat:3> \land <var:u> = <nat:7> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> \} \\ <var:u> := <var:u> + <var:h0> \\ \{ <var:a> = <var:K> \land <var:u> = <nat:7> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:3> \} \end{eqnarray} Applying usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:a> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:a> ; <var:h2> := <var:h2> * <var:a> ; <var:u> := <var:h2> ; <var:u> := <var:u> + <var:h1> ; <var:u> := <var:u> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:a> = <var:K> }} <def:poly> {{ <var:u> = <nat:7> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:4> * <var:K> /\ <var:h2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:4> * <var:K> /\ <var:h2> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:4> * <var:K> /\ <var:h2> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:4> * <var:K> /\ <var:u> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:h0> = <nat:3> /\ <var:u> = <nat:7> * <var:K> ^ <nat:2> + <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:u> = <nat:7> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 