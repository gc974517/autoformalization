\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:E1> := <var:A> ; <var:E2> := <var:E1> * <var:A> ; <var:E3> := <var:E2> * <var:A> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:3> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:6> ; <var:h> := <var:E3> <var:h> := <var:h> + <var:E2> <var:h> := <var:h> + <var:E1> <var:h> := <var:h> + <var:E0> \end{verbatim} Given --- for any $ <var:k> \in \mathbb{Z}^+ $ --- that we have $ <var:A> = <var:k> $ ahead of running the series of instructions , it must be that we see $ <var:h> = <nat:6> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:9> $ after segment of code has executed . \end{theorem} \begin{proof} The course of logic for our set of instructions can be demonstrated with usual Hoare reasoning . Following , we see \verb | { <var:A> = <var:k> } <var:E1> := <var:A> { <var:A> = <var:k> \land <var:E1> = <var:k> } | , \verb | { <var:A> = <var:k> \land <var:E1> = <var:k> } <var:E2> := <var:E1> * <var:A> { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> } | , \verb | { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> } <var:E3> := <var:E2> * <var:A> { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> } | , \verb | { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> } <var:E0> := <nat:9> { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } | , \verb | { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } <var:E1> := <var:E1> * <nat:3> { <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } | , \verb | { <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } <var:E2> := <var:E2> * <nat:2> { <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } | , \verb | { <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:E3> = <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } <var:E3> := <var:E3> * <nat:6> { <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:E3> = <nat:6> \times <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } | and \verb | { <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:E3> = <nat:6> \times <var:k> ^ <nat:3> \land <var:E0> = <nat:9> } <var:h> := <var:E3{ <var:A> = <var:k> \land <var:E1> = <nat:3> \times <var:k> \land <var:E2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:E0> = <nat:9> \land <var:h> = <nat:6> \times <var:k> ^ <nat:3> } | . This is known to be sound using the assignment inference rule from usual Hoare reasoning . Following , we see \verb | { <var:A> = <var:k> } <var:E1> := <var:A> { <var:A> = <var:k> \land <var:E1> = <var:k> } | . Moving forward to the next lines of codeseen in our series of instructions , we have \verb | { <var:A> = <var:k> } <var:E1> := <var:A> { <var:A> = <var:k> \land <var:E1> = <var:k> } | and \verb | { <var:A> = <var:k> \land <var:E1> = <var:k> } <var:E2> := <var:E1> * <var:A> { <var:A> = <var:k> \land <var:E1> = <var:k> \land <var:E2> = <var:k> ^ <nat:2> } | . This is shown by the variable binding rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:A> = <var:k> }} <var:E1> := <var:A> ; <var:E2> := <var:E1> * <var:A> ; <var:E3> := <var:E2> * <var:A> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:3> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:6> ; <var:h> := <var:E3> <var:h> := <var:h> + <var:E2> <var:h> := <var:h> + <var:E1> <var:h> := <var:h> + <var:E0> {{ <var:h> = <nat:6> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <var:k> /\ <var:E2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <var:k> /\ <var:E2> = <var:k> ^ <nat:2> /\ <var:E3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <var:k> /\ <var:E2> = <var:k> ^ <nat:2> /\ <var:E3> = <var:k> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <nat:3> * <var:k> /\ <var:E2> = <var:k> ^ <nat:2> /\ <var:E3> = <var:k> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <nat:3> * <var:k> /\ <var:E2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:E3> = <var:k> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <nat:3> * <var:k> /\ <var:E2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:E3> = <nat:6> * <var:k> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <nat:3> * <var:k> /\ <var:E2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:E0> = <nat:9> /\ <var:h> = <nat:6> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E1> = <nat:3> * <var:k> /\ <var:E0> = <nat:9> /\ <var:h> = <nat:6> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:E0> = <nat:9> /\ <var:h> = <nat:6> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:h> = <nat:6> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 