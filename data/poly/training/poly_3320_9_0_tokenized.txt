\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:2> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:A> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:A> ; <var:s2> := <var:s2> * <var:A> ; <var:f> := <var:s2> ; <var:f> := <var:f> + <var:s1> ; <var:f> := <var:f> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Given given every whole numbers $ <var:u> $ that $ <var:A> = <var:u> $ prior to the execution of this series of instructions , then we see $ <var:f> = <nat:1> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:2> $ once list of commands has finished . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:A> = <var:u> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \} \\ <var:s1> := <nat:3> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \} \\ <var:s1> := <var:s1> * <var:A> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:u> \} \\ <var:s2> := <nat:1> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:u> \land <var:s2> = <nat:1> \} \\ <var:s2> := <var:s2> * <var:A> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:u> \land <var:s2> = <nat:1> \cdot <var:u> \} \\ <var:s2> := <var:s2> * <var:A> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:u> \land <var:s2> = <nat:1> \cdot <var:u> ^ <nat:2> \} \\ <var:f> := <var:s2> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:u> \land <var:f> = <nat:1> \cdot <var:u> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:s1> ; \\ \{ <var:A> = <var:u> \land <var:s0> = <nat:2> \land <var:f> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> \} \\ <var:f> := <var:f> + <var:s0> \\ \{ <var:A> = <var:u> \land <var:f> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:2> \} \end{eqnarray} Hence , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:A> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:A> ; <var:s2> := <var:s2> * <var:A> ; <var:f> := <var:s2> ; <var:f> := <var:f> + <var:s1> ; <var:f> := <var:f> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:A> = <var:u> }} <def:poly> {{ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:u> /\ <var:s2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:u> /\ <var:s2> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:u> /\ <var:s2> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:u> /\ <var:f> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:s0> = <nat:2> /\ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 