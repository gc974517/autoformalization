\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:j> = <var:f> $ ( given some $ <var:f> \in \mathbb{Z}^+ $ ) prior to interpreting our set of commands , it must be that $ <var:l> = <nat:2> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:3> $ when set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:f> \} \\ <var:l> := <nat:2> ; \\ \{ <var:j> = <var:f> \land <var:l> = <nat:2> \} \\ <var:l> := <nat:1> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:l> = <nat:2> * <var:f> + <nat:1> \} \\ <var:l> := <nat:3> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:l> = <nat:2> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> \} \\ <var:l> := <var:l> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:l> = <nat:2> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + \} \\ <var:l> := <nat:3> + <var:l> * <var:j> \\ \{ <var:j> = <var:f> \land <var:l> = <nat:2> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <nat:1> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:j> = <var:f> }} <def:poly> {{ <var:l> = <nat:2> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:l> = <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:l> = <nat:2> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:l> = <nat:2> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:l> = <nat:2> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 