\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:2> ; <var:V> := <var:p0> \end{verbatim} Given that $ <var:O> = <var:G> $ ahead of running our list of instructions then $ <var:V> = <nat:2> $ after code has terminated . \end{theorem} \begin{proof} The argument for our code segment is clear by Hoare reasoning . Jumping to the next bit of code seen in our list of instructions , we have the variable update command \verb | <var:p0> := <nat:2> ; | . This line redefines $ \{ <var:O> = <var:G> \} $ toward $ \{ <var:O> = <var:G> \land <var:p0> = <nat:2> \} $ . Taking another step toward the subsequent statement found in our list of instructions , we see the environment update code defining $ <var:p0$ to $ <var:V>$ . This moves $ \{ <var:O> = <var:G> \land <var:p0> = <nat:2> \} $ as the condition $ \{ <var:O> = <var:G> \land <var:V> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:O> = <var:G> }} <var:p0> := <nat:2> ; <var:V> := <var:p0> {{ <var:V> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:V> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 