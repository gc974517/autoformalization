\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:6> ; <var:J> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assume , for every integers $ <var:m> $ , that we have $ <var:X> = <var:m> $ prior to running this segment of code , it holds that $ <var:J> = <nat:6> $ after set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:m> \} \\ <var:N0> := <nat:6> ; \\ \{ <var:X> = <var:m> \land <var:N0> = <nat:6> \} \\ <var:J> := <var:N0> \\ \{ <var:X> = <var:m> \land <var:J> = <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:6> ; <var:J> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <def:poly> {{ <var:J> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:J> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 