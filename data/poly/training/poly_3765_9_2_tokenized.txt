\begin{document} \begin{theorem} Take the following code segment as \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <nat:2> + <var:h> * <var:k> ; <var:h> := <nat:3> + <var:h> * <var:k> ; <var:h> := <nat:2> + <var:h> * <var:k> \end{verbatim} Assume that we have $ <var:k> = <var:n> $ --- with some $ <var:n> \in \mathbb{Z}^+ $ --- prior to the execution of our code segment , it holds that we have $ <var:h> = <nat:4> \times <var:n> ^ <nat:8> + <nat:1> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:2> $ after code segment has executed . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be shown using standard Hoare reasoning . Moving on to the following line of code seen in our code , the variable update command defining $ <nat:4> $ to $ <var:h>$ . This advances $ \{ <var:k> = <var:n> \} $ as $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \} $ . This is shown with the assignment inference rule defined by Hoare techniques . Stepping forward , the binding statement yielding $ <nat:1> + <var:h> * <var:k> $ toward $ <var:h>$ . This takes the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \} $ into the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> + <nat:1> \} $ . This is given using the assignment law of typical Hoare logic . Paying attention to the upcoming statement found in our series of commands , the environment update line defining $ <nat:1> + <var:h> * <var:k> $ toward $ <var:h>$ . This takes the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> + <nat:1> \} $ as the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} $ . This is shown with the assignment rule from typical Hoare reasoning . Taking a look at the following line of code seen in the series of instructions , the binding statement \verb | <var:h> := <nat:1> + <var:h> * <var:k> ; | . This redefines the precondition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} $ into the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} $ . This is rigorously given by the assignment rule from Hoare techniques . Further , we have the variable binding code binding $ <var:h> * <var:k> $ into $ <var:h>$ . This line redefines the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} $ to $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + \} $ . This is ensured with the assignment scheme given in Hoare reasoning . Jumping to the next line found in the series of instructions , we see the binding code binding $ <var:h> * <var:k> $ as $ <var:h>$ . This redefines $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + \} $ toward the postcondition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + \} $ . This is rigorously given by the assignment inference rule of standard Hoare techniques . Advancing to the next step , the variable update code \verb | <var:h> := <nat:2> + <var:h> * <var:k> ; | . This moves the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> \} $ . Considering the next piece of code found in the series of commands , the binding code \verb | <var:h> := <nat:3> + <var:h> * <var:k> ; | . This statement redefines the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> \} $ into the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:7> + <nat:1> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> + <nat:3> \} $ . Moving forward , we have the variable binding code binding $ <nat:2> + <var:h> * <var:k$ into $ <var:h>$ . This code takes the precondition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:7> + <nat:1> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> + <nat:3> \} $ to the condition $ \{ <var:k> = <var:n> \land <var:h> = <nat:4> \cdot <var:n> ^ <nat:8> + <nat:1> \cdot <var:n> ^ <nat:7> + <nat:1> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:2> \} $ . This is guaranteed with the assignment inference rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:k> = <var:n> }} <var:h> := <nat:4> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <nat:1> + <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <var:h> * <var:k> ; <var:h> := <nat:2> + <var:h> * <var:k> ; <var:h> := <nat:3> + <var:h> * <var:k> ; <var:h> := <nat:2> + <var:h> * <var:k> {{ <var:h> = <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:h> = <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 