\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:W0> := <nat:9> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:z> ; <var:d> := <var:W1> ; <var:d> := <var:d> + <var:W0> \end{verbatim} Allow $ <var:z> = <var:m> $ ahead of running this list of commands , then we see $ <var:d> = <nat:8> \times <var:m> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is evident by usual Hoare logic . After , we have \verb | { <var:z> = <var:m> } <var:W0> := <nat:9> { <var:z> = <var:m> \land <var:W0> = <nat:9> } | , \verb | { <var:z> = <var:m> \land <var:W0> = <nat:9> } <var:W1> := <nat:8> { <var:z> = <var:m> \land <var:W0> = <nat:9> \land <var:W1> = <nat:8> } | and \verb | { <var:z> = <var:m> \land <var:W0> = <nat:9> \land <var:W1> = <nat:8> } <var:W1> := <var:W1> * <var:z> { <var:z> = <var:m> \land <var:W0> = <nat:9> \land <var:W1> = <nat:8> * <var:m> } | . Moving on to the next step , \verb | { <var:z> = <var:m> } <var:W0> := <nat:9> { <var:z> = <var:m> \land <var:W0> = <nat:9> } | . Going to the next step , we have \verb | { <var:z> = <var:m> } <var:W0> := <nat:9> { <var:z> = <var:m> \land <var:W0> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:z> = <var:m> }} <var:W0> := <nat:9> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:z> ; <var:d> := <var:W1> ; <var:d> := <var:d> + <var:W0> {{ <var:d> = <nat:8> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:W0> = <nat:9> /\ <var:d> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:d> = <nat:8> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 