\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:P> ; <var:A2> := <nat:4> ; <var:A2> := <var:A2> * <var:P> ; <var:A2> := <var:A2> * <var:P> ; <var:l> := <var:A2> ; <var:l> := <var:l> + <var:A1> ; <var:l> := <var:l> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:P> = <var:c> $ , given all natural coefficients $ <var:c> $ , before interpreting our segment of code it holds that we see $ <var:l> = <nat:4> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:c> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:5> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:A1> = <nat:5> \} \\ <var:A1> := <var:A1> * <var:P> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:A1> = <nat:5> * <var:c> \} \\ <var:A2> := <nat:4> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:A1> = <nat:5> * <var:c> \land <var:A2> = <nat:4> \} \\ <var:A2> := <var:A2> * <var:P> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:A1> = <nat:5> * <var:c> \land <var:A2> = <nat:4> * <var:c> \} \\ <var:A2> := <var:A2> * <var:P> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:A1> = <nat:5> * <var:c> \land <var:A2> = <nat:4> * <var:c> ^ <nat:2> \} \\ <var:l> := <var:A2> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:A1> = <nat:5> * <var:c> \land <var:l> = <nat:4> * <var:c> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:A1> ; \\ \{ <var:P> = <var:c> \land <var:A0> = <nat:4> \land <var:l> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> \} \\ <var:l> := <var:l> + <var:A0> \\ \{ <var:P> = <var:c> \land <var:l> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:P> ; <var:A2> := <nat:4> ; <var:A2> := <var:A2> * <var:P> ; <var:A2> := <var:A2> * <var:P> ; <var:l> := <var:A2> ; <var:l> := <var:l> + <var:A1> ; <var:l> := <var:l> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:P> = <var:c> }} <def:poly> {{ <var:l> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:5> * <var:c> /\ <var:A2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:5> * <var:c> /\ <var:A2> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:5> * <var:c> /\ <var:A2> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:5> * <var:c> /\ <var:l> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:A0> = <nat:4> /\ <var:l> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:l> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 