\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E> := <nat:1> ; <var:E> := <var:E> * <var:o> ; <var:E> := <nat:2> + <var:E> * <var:o> ; <var:E> := <var:E> * <var:o> ; <var:E> := <nat:1> + <var:E> * <var:o> ; <var:E> := <var:E> * <var:o> ; <var:E> := <nat:2> + <var:E> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allowing that we have $ <var:o> = <var:a> $ ahead of executing the set of instructions , then we have $ <var:E> = <nat:1> \times <var:a> ^ <nat:6> + <nat:2> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our code segment is done using Hoare reasoning . Observing the upcoming commands in our series of commands , we have \begin{eqnarray} \{ <var:o> = <var:a> \} \, <var:E> := <nat:1> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \} \\ \{ <var:o> = <var:a> \land <var:E> = <nat:1> \} \, <var:E> := <var:E> * <var:o> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> + \} \end{eqnarray} Following , we see \begin{eqnarray} \{ <var:o> = <var:a> \} \, <var:E> := <nat:1> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \} \\ \{ <var:o> = <var:a> \land <var:E> = <nat:1> \} \, <var:E> := <var:E> * <var:o> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> + \} \\ \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> + \} \, <var:E> := <nat:2> + <var:E> * <var:o> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> ^ <nat:2> + <nat:2> \} \\ \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> ^ <nat:2> + <nat:2> \} \, <var:E> := <var:E> * <var:o> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> + \} \\ \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> + \} \, <var:E> := <nat:1> + <var:E> * <var:o> \, \{ <var:o> = <var:a> \land <var:E> = <nat:1> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:1> ; <var:E> := <var:E> * <var:o> ; <var:E> := <nat:2> + <var:E> * <var:o> ; <var:E> := <var:E> * <var:o> ; <var:E> := <nat:1> + <var:E> * <var:o> ; <var:E> := <var:E> * <var:o> ; <var:E> := <nat:2> + <var:E> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:o> = <var:a> }} <def:poly> {{ <var:E> = <nat:1> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:a> /\ <var:E> = <nat:1> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 