\begin{document} \begin{theorem} Take the following list of commands : \begin{verbatim} <var:t0> := <nat:1> ; <var:J> := <var:t0> \end{verbatim} Assume $ <var:C> = <var:V> $ , given any $ <var:V> $ , ahead of the execution of the code segment , it must be that $ <var:J> = <nat:1> $ once code segment executes . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be given through standard Hoare logic . Going forward , we have \verb | { <var:C> = <var:V> } <var:t0> := <nat:1> { <var:C> = <var:V> \land <var:t0> = <nat:1> } | and \verb | { <var:C> = <var:V> \land <var:t0> = <nat:1> } <var:J> := <var:t0{ <var:C> = <var:V> \land <var:J> = <nat:1> } | . This is shown by the environment update scheme defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <var:t0> := <nat:1> ; <var:J> := <var:t0> {{ <var:J> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:J> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 