\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} : \begin{verbatim} <var:D1> := <var:p> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:9> ; <var:v> := <var:D1> <var:v> := <var:v> + <var:D0> \end{verbatim} Allowing it to be that $ <var:p> = <var:R> $ for every natural numbers $ <var:R> $ ahead of executing the code segment , it holds that $ <var:v> = <nat:9> \cdot <var:R> + <nat:8> $ after set of instructions is done . \end{theorem} \begin{proof} The method of proof for the program can be given using standard Hoare techniques . Moving forward to the next step , we have \begin{verbatim} { <var:p> = <var:R> } <var:D1> := <var:p> { <var:p> = <var:R> \land <var:D1> = <var:R> } \end{verbatim} Moving on to the next step , we have \begin{verbatim} { <var:p> = <var:R> } <var:D1> := <var:p> { <var:p> = <var:R> \land <var:D1> = <var:R> } \end{verbatim} This is guaranteed by the binding inference rule given by standard Hoare techniques . Honing in on the following bits of codeseen in the set of instructions , we see \begin{verbatim} { <var:p> = <var:R> } <var:D1> := <var:p> { <var:p> = <var:R> \land <var:D1> = <var:R> } { <var:p> = <var:R> \land <var:D1> = <var:R> } <var:D0> := <nat:8> { <var:p> = <var:R> \land <var:D1> = <var:R> \land <var:D0> = <nat:8> } { <var:p> = <var:R> \land <var:D1> = <var:R> \land <var:D0> = <nat:8> } <var:D1> := <var:D1> * <nat:9> { <var:p> = <var:R> \land <var:D1> = <nat:9> \cdot <var:R> \land <var:D0> = <nat:8> } \end{verbatim} This is known to be sound using the variable update inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:p> = <var:R> }} <var:D1> := <var:p> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:9> ; <var:v> := <var:D1> <var:v> := <var:v> + <var:D0> {{ <var:v> = <nat:9> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D1> = <var:R> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D1> = <nat:9> * <var:R> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:8> /\ <var:v> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:v> = <nat:9> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 