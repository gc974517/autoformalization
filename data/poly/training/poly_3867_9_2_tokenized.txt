\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} : \begin{verbatim} <var:G> := <nat:3> ; <var:G> := <nat:2> + <var:G> * <var:n> ; <var:G> := <nat:3> + <var:G> * <var:n> ; <var:G> := <var:G> * <var:n> ; <var:G> := <var:G> * <var:n> ; <var:G> := <nat:2> + <var:G> * <var:n> ; <var:G> := <nat:4> + <var:G> * <var:n> ; <var:G> := <nat:1> + <var:G> * <var:n> ; <var:G> := <nat:1> + <var:G> * <var:n> \end{verbatim} Assuming it to be that $ <var:n> = <var:f> $ ahead of the execution of our list of instructions it must be that $ <var:G> = <nat:3> \cdot <var:f> ^ <nat:8> + <nat:2> \cdot <var:f> ^ <nat:7> + <nat:3> \cdot <var:f> ^ <nat:6> + <nat:2> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this code segment can be accomplished with standard Hoare techniques . Shifting focus toward the subsequent line found in our segment of code , we have the variable binding statement letting $ <nat:3> $ as $ <var:G>$ . This takes $ \{ <var:n> = <var:f> \} $ toward $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \} $ . Moving on , we see the assignment code binding $ <nat:2> + <var:G> * <var:n> $ to $ <var:G>$ . This transfers the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \} $ into the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> + <nat:2> \} $ . This is sound through the assignment inference rule given in standard Hoare techniques . Observing the subsequent piece of code found in our segment of code , the variable update code \verb | <var:G> := <nat:3> + <var:G> * <var:n> ; | . This moves the precondition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> + <nat:2> \} $ into the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:3> \} $ . Moving forward to the next step , we see the environment update code \verb | <var:G> := <var:G> * <var:n> ; | . This forwards $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:3> \} $ into $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> + \} $ . Advancing to the next step , the environment update line assigning $ <var:G> * <var:n> $ toward $ <var:G>$ . This command advances the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> + \} $ toward the postcondition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + \} $ . This is deduced using the assignment law defined by typical Hoare reasoning . Focusing on the subsequent step in the set of instructions , we have the assignment line \verb | <var:G> := <nat:2> + <var:G> * <var:n> ; | . This line advances $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + \} $ into the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:4> + <nat:3> \times <var:f> ^ <nat:3> + <nat:2> \} $ . This is given through the assignment rule given in Hoare techniques . Honing in on the next line of code seen in the code , we see the environment update code yielding $ <nat:4> + <var:G> * <var:n> $ toward $ <var:G>$ . This advances the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:4> + <nat:3> \times <var:f> ^ <nat:3> + <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:6> + <nat:2> \times <var:f> ^ <nat:5> + <nat:3> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> + <nat:4> \} $ . Moving on , we have the variable binding line \verb | <var:G> := <nat:1> + <var:G> * <var:n> ; | . This command forwards the condition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:6> + <nat:2> \times <var:f> ^ <nat:5> + <nat:3> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> + <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:7> + <nat:2> \times <var:f> ^ <nat:6> + <nat:3> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:1> \} $ . Focusing on the subsequent line contained in our list of instructions , the variable assignmet command yielding $ <nat:1> + <var:G> * <var:n$ into $ <var:G>$ . This redefines $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:7> + <nat:2> \times <var:f> ^ <nat:6> + <nat:3> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:1> \} $ to $ \{ <var:n> = <var:f> \land <var:G> = <nat:3> \times <var:f> ^ <nat:8> + <nat:2> \times <var:f> ^ <nat:7> + <nat:3> \times <var:f> ^ <nat:6> + <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> \} $ . This is guaranteed through the assignment scheme of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:n> = <var:f> }} <var:G> := <nat:3> ; <var:G> := <nat:2> + <var:G> * <var:n> ; <var:G> := <nat:3> + <var:G> * <var:n> ; <var:G> := <var:G> * <var:n> ; <var:G> := <var:G> * <var:n> ; <var:G> := <nat:2> + <var:G> * <var:n> ; <var:G> := <nat:4> + <var:G> * <var:n> ; <var:G> := <nat:1> + <var:G> * <var:n> ; <var:G> := <nat:1> + <var:G> * <var:n> {{ <var:G> = <nat:3> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:7> + <nat:2> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:G> = <nat:3> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 