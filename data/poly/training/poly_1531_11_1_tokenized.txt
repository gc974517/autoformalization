\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:a> ; <var:r2> := <var:r1> * <var:a> ; <var:r3> := <var:r2> * <var:a> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:8> ; <var:r3> := <var:r3> * <nat:1> ; <var:j> := <var:r3> <var:j> := <var:j> + <var:r2> <var:j> := <var:j> + <var:r1> <var:j> := <var:j> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:a> = <var:Q> $ --- given any positive integer coefficients $ <var:Q> $ --- prior to the evaluation of this code , it must be that we see $ <var:j> = <nat:1> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:7> $ when series of commands executes . \end{theorem} \begin{proof} Note that this decorated list of instructions . \begin{eqnarray} \{ <var:a> = <var:Q> \} \\ <var:r1> := <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <var:Q> \} \\ <var:r2> := <var:r1> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <nat:1> \times <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:r2> := <var:r2> * <nat:8> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <nat:1> \times <var:Q> \land <var:r2> = <nat:8> \times <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:r3> := <var:r3> * <nat:1> ; \\ \{ <var:a> = <var:Q> \land <var:r1> = <nat:1> \times <var:Q> \land <var:r2> = <nat:8> \times <var:Q> ^ <nat:2> \land <var:r3> = <nat:1> \times <var:Q> ^ <nat:3> \land <var:r0> = <nat:7> \} \\ <var:j> := <var:r3> \\ \{ <var:a> = <var:Q> \land <var:r1> = <nat:1> \times <var:Q> \land <var:r2> = <nat:8> \times <var:Q> ^ <nat:2> \land <var:r0> = <nat:7> \land <var:j> = <nat:1> \times <var:Q> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:r2> \\ \{ <var:a> = <var:Q> \land <var:r1> = <nat:1> \times <var:Q> \land <var:r0> = <nat:7> \land <var:j> = <nat:1> \times <var:Q> ^ <nat:3> + <nat:8> \times <var:Q> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:r1> \\ \{ <var:a> = <var:Q> \land <var:r0> = <nat:7> \land <var:j> = <nat:1> \times <var:Q> ^ <nat:3> + <nat:8> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> \} \\ <var:j> := <var:j> + <var:r0> \\ \{ <var:a> = <var:Q> \land <var:j> = <nat:1> \times <var:Q> ^ <nat:3> + <nat:8> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:7> \} \end{eqnarray} The application of Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:a> ; <var:r2> := <var:r1> * <var:a> ; <var:r3> := <var:r2> * <var:a> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:8> ; <var:r3> := <var:r3> * <nat:1> ; <var:j> := <var:r3> <var:j> := <var:j> + <var:r2> <var:j> := <var:j> + <var:r1> <var:j> := <var:j> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <def:poly> {{ <var:j> = <nat:1> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <nat:1> * <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <nat:1> * <var:Q> /\ <var:r2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <nat:1> * <var:Q> /\ <var:r2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:r3> = <nat:1> * <var:Q> ^ <nat:3> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <nat:1> * <var:Q> /\ <var:r2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:r0> = <nat:7> /\ <var:j> = <nat:1> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r1> = <nat:1> * <var:Q> /\ <var:r0> = <nat:7> /\ <var:j> = <nat:1> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:r0> = <nat:7> /\ <var:j> = <nat:1> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:j> = <nat:1> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 