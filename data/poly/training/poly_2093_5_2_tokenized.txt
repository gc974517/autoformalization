\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:w> := <nat:1> ; <var:w> := <nat:3> + <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <nat:1> + <var:w> * <var:u> \end{verbatim} Assume it to hold that $ <var:u> = <var:X> $ , given positive coefficients $ <var:X> $ , ahead of the execution of the program , then we see $ <var:w> = <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> + <nat:1> $ once segment of code terminates . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:u> = <var:X> \} \\ <var:w> := <nat:1> ; \\ \{ <var:u> = <var:X> \land <var:w> = <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:u> ; \\ \{ <var:u> = <var:X> \land <var:w> = <nat:1> \times <var:X> + <nat:3> \} \\ <var:w> := <var:w> * <var:u> ; \\ \{ <var:u> = <var:X> \land <var:w> = <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + \} \\ <var:w> := <nat:2> + <var:w> * <var:u> ; \\ \{ <var:u> = <var:X> \land <var:w> = <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:2> \} \\ <var:w> := <nat:1> + <var:w> * <var:u> \\ \{ <var:u> = <var:X> \land <var:w> = <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> + <nat:1> \} \end{eqnarray} Thus , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:u> = <var:X> }} <var:w> := <nat:1> ; <var:w> := <nat:3> + <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <nat:1> + <var:w> * <var:u> {{ <var:w> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:w> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:w> = <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:w> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:w> = <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:w> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 