\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:r1> := <var:j> ; <var:r2> := <var:r1> * <var:j> ; <var:r3> := <var:r2> * <var:j> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:8> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:4> ; <var:M> := <var:r3> <var:M> := <var:M> + <var:r2> <var:M> := <var:M> + <var:r1> <var:M> := <var:M> + <var:r0> \end{verbatim} Given it to hold that $ <var:j> = <var:L> $ ( for every positive numbers $ <var:L> $ ) ahead of executing this set of commands , it must be that we see $ <var:M> = <nat:4> \times <var:L> ^ <nat:3> + <nat:9> \times <var:L> ^ <nat:2> + <nat:8> \times <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:j> = <var:L> \} \\ <var:r1> := <var:j> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <var:L> \} \\ <var:r2> := <var:r1> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <var:L> \land <var:r2> = <var:L> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <var:L> \land <var:r2> = <var:L> ^ <nat:2> \land <var:r3> = <var:L> ^ <nat:3> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <var:L> \land <var:r2> = <var:L> ^ <nat:2> \land <var:r3> = <var:L> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r1> := <var:r1> * <nat:8> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <nat:8> * <var:L> \land <var:r2> = <var:L> ^ <nat:2> \land <var:r3> = <var:L> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r2> := <var:r2> * <nat:9> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <nat:8> * <var:L> \land <var:r2> = <nat:9> * <var:L> ^ <nat:2> \land <var:r3> = <var:L> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r3> := <var:r3> * <nat:4> ; \\ \{ <var:j> = <var:L> \land <var:r1> = <nat:8> * <var:L> \land <var:r2> = <nat:9> * <var:L> ^ <nat:2> \land <var:r3> = <nat:4> * <var:L> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:M> := <var:r3> \\ \{ <var:j> = <var:L> \land <var:r1> = <nat:8> * <var:L> \land <var:r2> = <nat:9> * <var:L> ^ <nat:2> \land <var:r0> = <nat:3> \land <var:M> = <nat:4> * <var:L> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:r2> \\ \{ <var:j> = <var:L> \land <var:r1> = <nat:8> * <var:L> \land <var:r0> = <nat:3> \land <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:r1> \\ \{ <var:j> = <var:L> \land <var:r0> = <nat:3> \land <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:8> * <var:L> \} \\ <var:M> := <var:M> + <var:r0> \\ \{ <var:j> = <var:L> \land <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:3> \} \end{eqnarray} Given the preceding argument , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:j> = <var:L> }} <var:r1> := <var:j> ; <var:r2> := <var:r1> * <var:j> ; <var:r3> := <var:r2> * <var:j> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:8> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:4> ; <var:M> := <var:r3> <var:M> := <var:M> + <var:r2> <var:M> := <var:M> + <var:r1> <var:M> := <var:M> + <var:r0> {{ <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <var:L> /\ <var:r2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <var:L> /\ <var:r2> = <var:L> ^ <nat:2> /\ <var:r3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <var:L> /\ <var:r2> = <var:L> ^ <nat:2> /\ <var:r3> = <var:L> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <nat:8> * <var:L> /\ <var:r2> = <var:L> ^ <nat:2> /\ <var:r3> = <var:L> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <nat:8> * <var:L> /\ <var:r2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:r3> = <var:L> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <nat:8> * <var:L> /\ <var:r2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:r3> = <nat:4> * <var:L> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <nat:8> * <var:L> /\ <var:r2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:r0> = <nat:3> /\ <var:M> = <nat:4> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r1> = <nat:8> * <var:L> /\ <var:r0> = <nat:3> /\ <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:r0> = <nat:3> /\ <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:M> = <nat:4> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 