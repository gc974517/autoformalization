\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:1> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:E> ; <var:A> := <var:i1> ; <var:A> := <var:A> + <var:i0> \end{verbatim} Assuming that $ <var:E> = <var:Y> $ , given natural coefficients $ <var:Y> $ , before evaluating our program , it must be that we see $ <var:A> = <nat:4> * <var:Y> + <nat:1> $ when list of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is given with Hoare reasoning . Advancing to the proceeding statements in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:E> = <var:Y> \} & <var:i0> := <nat:1> & \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \} \\ \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \} & <var:i1> := <nat:4> & \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \land <var:i1> = <nat:4> \} \\ \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \land <var:i1> = <nat:4> \} & <var:i1> := <var:i1> * <var:E> & \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \land <var:i1> = <nat:4> \times <var:Y> \} \\ \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \land <var:i1> = <nat:4> \times <var:Y> \} & <var:A> := <var:i1> & \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \land <var:A> = <nat:4> \times <var:Y> \} \\ \{ <var:E> = <var:Y> \land <var:i0> = <nat:1> \land <var:A> = <nat:4> \times <var:Y> \} & <var:A> := <var:A> + <var:i0& \{ <var:E> = <var:Y> \land <var:A> = <nat:4> \times <var:Y> + <nat:1> \} \end{tabular} This is sound by the environment update rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:E> = <var:Y> }} <var:i0> := <nat:1> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:E> ; <var:A> := <var:i1> ; <var:A> := <var:A> + <var:i0> {{ <var:A> = <nat:4> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:i0> = <nat:1> /\ <var:A> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:A> = <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 