\begin{document} \begin{theorem} Consider a code segment : \begin{verbatim} <var:O0> := <nat:9> ; <var:K> := <var:O0> \end{verbatim} Allowing ( given some positive integer coefficients $ <var:c> $ ) it to hold that $ <var:l> = <var:c> $ ahead of the evaluation of this set of commands it holds that we have $ <var:K> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions is evident through this decorated series of instructions . \begin{eqnarray} \{ <var:l> = <var:c> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:l> = <var:c> \land <var:O0> = <nat:9> \} \\ <var:K> := <var:O0> \\ \{ <var:l> = <var:c> \land <var:K> = <nat:9> \} \end{eqnarray} The application of usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:l> = <var:c> }} <var:O0> := <nat:9> ; <var:K> := <var:O0> {{ <var:K> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:K> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 