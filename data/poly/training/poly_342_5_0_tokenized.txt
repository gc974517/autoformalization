\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:4> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:w> ; <var:o> := <var:H1> ; <var:o> := <var:o> + <var:H0> \end{verbatim} Allowing $ <var:w> = <var:t> $ , for all natural coefficients $ <var:t> $ , before the execution of this set of instructions it holds that $ <var:o> = <nat:4> \times <var:t> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:t> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:w> = <var:t> \land <var:H0> = <nat:4> \} \\ <var:H1> := <nat:4> ; \\ \{ <var:w> = <var:t> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> \} \\ <var:H1> := <var:H1> * <var:w> ; \\ \{ <var:w> = <var:t> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:t> \} \\ <var:o> := <var:H1> ; \\ \{ <var:w> = <var:t> \land <var:H0> = <nat:4> \land <var:o> = <nat:4> * <var:t> \} \\ <var:o> := <var:o> + <var:H0> \\ \{ <var:w> = <var:t> \land <var:o> = <nat:4> * <var:t> + <nat:4> \} \end{eqnarray} Using standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:w> = <var:t> }} <var:H0> := <nat:4> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:w> ; <var:o> := <var:H1> ; <var:o> := <var:o> + <var:H0> {{ <var:o> = <nat:4> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:H0> = <nat:4> /\ <var:o> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:o> = <nat:4> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 