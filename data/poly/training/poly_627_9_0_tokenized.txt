\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:7> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:D> ; <var:O2> := <nat:3> ; <var:O2> := <var:O2> * <var:D> ; <var:O2> := <var:O2> * <var:D> ; <var:y> := <var:O2> ; <var:y> := <var:y> + <var:O1> ; <var:y> := <var:y> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Given assuming some whole numbers $ <var:j> $ that we have $ <var:D> = <var:j> $ prior to interpreting our segment of code it holds that we see $ <var:y> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:6> \cdot <var:j> + <nat:7> $ . \end{theorem} \begin{proof} Applying typical Hoare logic produces : \begin{eqnarray} \{ <var:D> = <var:j> \} \\ <var:O0> := <nat:7> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \} \\ <var:O1> := <nat:6> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> \} \\ <var:O1> := <var:O1> * <var:D> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> * <var:j> \} \\ <var:O2> := <nat:3> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> * <var:j> \land <var:O2> = <nat:3> \} \\ <var:O2> := <var:O2> * <var:D> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> * <var:j> \land <var:O2> = <nat:3> * <var:j> \} \\ <var:O2> := <var:O2> * <var:D> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> * <var:j> \land <var:O2> = <nat:3> * <var:j> ^ <nat:2> \} \\ <var:y> := <var:O2> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:O1> = <nat:6> * <var:j> \land <var:y> = <nat:3> * <var:j> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:O1> ; \\ \{ <var:D> = <var:j> \land <var:O0> = <nat:7> \land <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:6> * <var:j> \} \\ <var:y> := <var:y> + <var:O0> \\ \{ <var:D> = <var:j> \land <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:7> \} \end{eqnarray} Considering the above , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:7> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:D> ; <var:O2> := <nat:3> ; <var:O2> := <var:O2> * <var:D> ; <var:O2> := <var:O2> * <var:D> ; <var:y> := <var:O2> ; <var:y> := <var:y> + <var:O1> ; <var:y> := <var:y> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:D> = <var:j> }} <def:poly> {{ <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:j> /\ <var:O2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:j> /\ <var:O2> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:j> /\ <var:O2> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:6> * <var:j> /\ <var:y> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:O0> = <nat:7> /\ <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:j> /\ <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 