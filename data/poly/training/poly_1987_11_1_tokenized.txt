\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:o> ; <var:F2> := <var:F1> * <var:o> ; <var:F3> := <var:F2> * <var:o> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:8> ; <var:f> := <var:F3> <var:f> := <var:f> + <var:F2> <var:f> := <var:f> + <var:F1> <var:f> := <var:f> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assuming it to hold that $ <var:o> = <var:P> $ , with some positive integers $ <var:P> $ , before running this list of instructions it follows that we see $ <var:f> = <nat:8> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:P> \} \\ <var:F1> := <var:o> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <var:P> \} \\ <var:F2> := <var:F1> * <var:o> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <var:P> \land <var:F2> = <var:P> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:o> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <var:P> \land <var:F2> = <var:P> ^ <nat:2> \land <var:F3> = <var:P> ^ <nat:3> \} \\ <var:F0> := <nat:5> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <var:P> \land <var:F2> = <var:P> ^ <nat:2> \land <var:F3> = <var:P> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:F1> := <var:F1> * <nat:1> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <nat:1> \times <var:P> \land <var:F2> = <var:P> ^ <nat:2> \land <var:F3> = <var:P> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:F2> := <var:F2> * <nat:4> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <nat:1> \times <var:P> \land <var:F2> = <nat:4> \times <var:P> ^ <nat:2> \land <var:F3> = <var:P> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:F3> := <var:F3> * <nat:8> ; \\ \{ <var:o> = <var:P> \land <var:F1> = <nat:1> \times <var:P> \land <var:F2> = <nat:4> \times <var:P> ^ <nat:2> \land <var:F3> = <nat:8> \times <var:P> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:f> := <var:F3> \\ \{ <var:o> = <var:P> \land <var:F1> = <nat:1> \times <var:P> \land <var:F2> = <nat:4> \times <var:P> ^ <nat:2> \land <var:F0> = <nat:5> \land <var:f> = <nat:8> \times <var:P> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:F2> \\ \{ <var:o> = <var:P> \land <var:F1> = <nat:1> \times <var:P> \land <var:F0> = <nat:5> \land <var:f> = <nat:8> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:F1> \\ \{ <var:o> = <var:P> \land <var:F0> = <nat:5> \land <var:f> = <nat:8> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> \} \\ <var:f> := <var:f> + <var:F0> \\ \{ <var:o> = <var:P> \land <var:f> = <nat:8> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:5> \} \end{eqnarray} The application of standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:o> ; <var:F2> := <var:F1> * <var:o> ; <var:F3> := <var:F2> * <var:o> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:8> ; <var:f> := <var:F3> <var:f> := <var:f> + <var:F2> <var:f> := <var:f> + <var:F1> <var:f> := <var:f> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:o> = <var:P> }} <def:poly> {{ <var:f> = <nat:8> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <var:P> /\ <var:F2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <var:P> /\ <var:F2> = <var:P> ^ <nat:2> /\ <var:F3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <var:P> /\ <var:F2> = <var:P> ^ <nat:2> /\ <var:F3> = <var:P> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <nat:1> * <var:P> /\ <var:F2> = <var:P> ^ <nat:2> /\ <var:F3> = <var:P> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <nat:1> * <var:P> /\ <var:F2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:F3> = <var:P> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <nat:1> * <var:P> /\ <var:F2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:F3> = <nat:8> * <var:P> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <nat:1> * <var:P> /\ <var:F2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:F0> = <nat:5> /\ <var:f> = <nat:8> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F1> = <nat:1> * <var:P> /\ <var:F0> = <nat:5> /\ <var:f> = <nat:8> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:F0> = <nat:5> /\ <var:f> = <nat:8> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:f> = <nat:8> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 