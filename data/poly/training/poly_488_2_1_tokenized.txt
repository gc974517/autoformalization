\begin{document} \begin{theorem} Define a list of instructions as \begin{verbatim} <var:N0> := <nat:5> ; <var:r> := <var:N0> \end{verbatim} Allow it to hold that $ <var:E> = <var:j> $ --- for some integers $ <var:j> $ --- prior to running this series of instructions it must be that we have $ <var:r> = <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is done using usual Hoare logic . Honing in on the subsequent statement seen in our code , we have \begin{verbatim} { <var:E> = <var:j> } <var:N0> := <nat:5> { <var:E> = <var:j> \land <var:N0> = <nat:5> } \end{verbatim} This is ensured by the variable assignmet law found in typical Hoare reasoning . Taking a look at the next line of code in the set of commands , we see \begin{verbatim} { <var:E> = <var:j> } <var:N0> := <nat:5> { <var:E> = <var:j> \land <var:N0> = <nat:5> } \end{verbatim} This is given through the inference rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:E> = <var:j> }} <var:N0> := <nat:5> ; <var:r> := <var:N0> {{ <var:r> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:r> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 