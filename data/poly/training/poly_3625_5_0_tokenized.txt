\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:3> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:C> ; <var:D> := <var:N1> ; <var:D> := <var:D> + <var:N0> \end{verbatim} Assuming , given every $ <var:t> \in \mathbb{N} $ , that we have $ <var:C> = <var:t> $ before executing our series of instructions , it holds that $ <var:D> = <nat:3> \cdot <var:t> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:t> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:C> = <var:t> \land <var:N0> = <nat:3> \} \\ <var:N1> := <nat:3> ; \\ \{ <var:C> = <var:t> \land <var:N0> = <nat:3> \land <var:N1> = <nat:3> \} \\ <var:N1> := <var:N1> * <var:C> ; \\ \{ <var:C> = <var:t> \land <var:N0> = <nat:3> \land <var:N1> = <nat:3> \cdot <var:t> \} \\ <var:D> := <var:N1> ; \\ \{ <var:C> = <var:t> \land <var:N0> = <nat:3> \land <var:D> = <nat:3> \cdot <var:t> \} \\ <var:D> := <var:D> + <var:N0> \\ \{ <var:C> = <var:t> \land <var:D> = <nat:3> \cdot <var:t> + <nat:3> \} \end{eqnarray} Using Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:C> = <var:t> }} <var:N0> := <nat:3> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:C> ; <var:D> := <var:N1> ; <var:D> := <var:D> + <var:N0> {{ <var:D> = <nat:3> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:N0> = <nat:3> /\ <var:D> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:D> = <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 