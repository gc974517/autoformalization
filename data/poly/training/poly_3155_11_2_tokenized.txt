\begin{document} \begin{theorem} Let the following list of commands : \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> \end{verbatim} Assuming ( letting $ <var:H> $ ) that $ <var:Q> = <var:H> $ before running the program it follows that $ <var:U> = <nat:2> \cdot <var:H> ^ <nat:10> + <nat:2> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:3> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:1> $ after set of commands has executed . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:Q> = <var:H> \} \\ <var:U> := <nat:2> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \} \\ <var:U> := <nat:2> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> + <nat:2> \} \\ <var:U> := <nat:2> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:2> \} \\ <var:U> := <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + \} \\ <var:U> := <nat:3> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> + <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:3> \} \\ <var:U> := <nat:4> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:4> \} \\ <var:U> := <nat:1> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:1> \} \\ <var:U> := <nat:3> + <var:U> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:Q> \\ \{ <var:Q> = <var:H> \land <var:U> = <nat:2> \cdot <var:H> ^ <nat:10> + <nat:2> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:3> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:1> \} \end{eqnarray} Therefore , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Q> = <var:H> }} <var:U> := <nat:2> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> {{ <var:U> = <nat:2> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:U> = <nat:2> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 