\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:g> ; <var:k2> := <var:k1> * <var:g> ; <var:k3> := <var:k2> * <var:g> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:3> ; <var:f> := <var:k3> <var:f> := <var:f> + <var:k2> <var:f> := <var:f> + <var:k1> <var:f> := <var:f> + <var:k0> \end{verbatim} Assume that $ <var:g> = <var:Z> $ before running the series of instructions it follows that we see $ <var:f> = <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare logic results in : \begin{eqnarray} \{ <var:g> = <var:Z> \} \\ <var:k1> := <var:g> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <var:Z> \} \\ <var:k2> := <var:k1> * <var:g> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:g> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:k1> := <var:k1> * <nat:1> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <nat:1> \times <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:k2> := <var:k2> * <nat:1> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <nat:1> \times <var:Z> \land <var:k2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:k3> := <var:k3> * <nat:3> ; \\ \{ <var:g> = <var:Z> \land <var:k1> = <nat:1> \times <var:Z> \land <var:k2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:k3> = <nat:3> \times <var:Z> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:f> := <var:k3> \\ \{ <var:g> = <var:Z> \land <var:k1> = <nat:1> \times <var:Z> \land <var:k2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:f> = <nat:3> \times <var:Z> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:k2> \\ \{ <var:g> = <var:Z> \land <var:k1> = <nat:1> \times <var:Z> \land <var:k0> = <nat:2> \land <var:f> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:k1> \\ \{ <var:g> = <var:Z> \land <var:k0> = <nat:2> \land <var:f> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> \} \\ <var:f> := <var:f> + <var:k0> \\ \{ <var:g> = <var:Z> \land <var:f> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> \} \end{eqnarray} Given the above , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:g> = <var:Z> }} <var:k1> := <var:g> ; <var:k2> := <var:k1> * <var:g> ; <var:k3> := <var:k2> * <var:g> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:3> ; <var:f> := <var:k3> <var:f> := <var:f> + <var:k2> <var:f> := <var:f> + <var:k1> <var:f> := <var:f> + <var:k0> {{ <var:f> = <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:Z> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:k0> = <nat:2> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k0> = <nat:2> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:k0> = <nat:2> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 