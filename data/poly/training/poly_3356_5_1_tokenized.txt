\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:I1> := <var:w> ; <var:I0> := <nat:5> ; <var:I1> := <var:I1> * <nat:2> ; <var:x> := <var:I1> <var:x> := <var:x> + <var:I0> \end{verbatim} Assuming it to hold that $ <var:w> = <var:Z> $ ( with some integers $ <var:Z> $ ) prior to evaluating this code it holds that $ <var:x> = <nat:2> * <var:Z> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this series of commands is given with Hoare logic . Jumping to the upcoming commands contained in our set of instructions , \begin{verbatim} { <var:w> = <var:Z> } <var:I1> := <var:w> { <var:w> = <var:Z> \land <var:I1> = <var:Z> } { <var:w> = <var:Z> \land <var:I1> = <var:Z> } <var:I0> := <nat:5> { <var:w> = <var:Z> \land <var:I1> = <var:Z> \land <var:I0> = <nat:5> } { <var:w> = <var:Z> \land <var:I1> = <var:Z> \land <var:I0> = <nat:5> } <var:I1> := <var:I1> * <nat:2> { <var:w> = <var:Z> \land <var:I1> = <nat:2> \times <var:Z> \land <var:I0> = <nat:5> } { <var:w> = <var:Z> \land <var:I1> = <nat:2> \times <var:Z> \land <var:I0> = <nat:5> } <var:x> := <var:I1{ <var:w> = <var:Z> \land <var:I0> = <nat:5> \land <var:x> = <nat:2> \times <var:Z> } \end{verbatim} This is rigorously given through the variable assignmet inference rule defined in usual Hoare reasoning . Honing in on the subsequent command found in our series of commands , we see \begin{verbatim} { <var:w> = <var:Z> } <var:I1> := <var:w> { <var:w> = <var:Z> \land <var:I1> = <var:Z> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:I1> := <var:w> ; <var:I0> := <nat:5> ; <var:I1> := <var:I1> * <nat:2> ; <var:x> := <var:I1> <var:x> := <var:x> + <var:I0> {{ <var:x> = <nat:2> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:I1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:I1> = <nat:2> * <var:Z> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:I0> = <nat:5> /\ <var:x> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:x> = <nat:2> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 