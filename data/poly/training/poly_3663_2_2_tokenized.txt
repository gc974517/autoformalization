\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:1> + <var:y> * <var:u> \end{verbatim} Allow ( letting natural numbers $ <var:e> $ ) that $ <var:u> = <var:e> $ before the evaluation of this list of commands it follows that we see $ <var:y> = <nat:3> * <var:e> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this code segment is given using usual Hoare logic . Focusing on the next line of code contained in the set of commands , we have the command \verb | <var:y> := <nat:3> ; | . This code transfers $ \{ <var:u> = <var:e> \} $ to the condition $ \{ <var:u> = <var:e> \land <var:y> = <nat:3> \} $ . Advancing to the next line of code found in our list of instructions , we have the command binding $ <nat:1> + <var:y> * <var:u$ as $ <var:y>$ . This line moves the condition $ \{ <var:u> = <var:e> \land <var:y> = <nat:3> \} $ as $ \{ <var:u> = <var:e> \land <var:y> = <nat:3> \cdot <var:e> + <nat:1> \} $ . This is shown by the assignment scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:u> = <var:e> }} <var:y> := <nat:3> ; <var:y> := <nat:1> + <var:y> * <var:u> {{ <var:y> = <nat:3> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:y> = <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 