\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:8> ; <var:u> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:t> = <var:w> $ prior to the evaluation of our program it must be that $ <var:u> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be shown using typical Hoare logic . Moving on , \begin{verbatim} { <var:t> = <var:w> } <var:H0> := <nat:8> { <var:t> = <var:w> \land <var:H0> = <nat:8> } { <var:t> = <var:w> \land <var:H0> = <nat:8> } <var:u> := <var:H0{ <var:t> = <var:w> \land <var:u> = <nat:8> } \end{verbatim} This is ensured by the environment update inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:8> ; <var:u> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:t> = <var:w> }} <def:poly> {{ <var:u> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:u> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 