\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:K> ; <var:d> := <nat:1> + <var:d> * <var:K> \end{verbatim} Allowing $ <var:K> = <var:V> $ before the evaluation of this code , it follows that we see $ <var:d> = <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> $ when code has terminated . \end{theorem} \begin{proof} Proving correctness for our code segment is done with typical Hoare reasoning . Immediately after , the variable binding statement letting $ <nat:1> $ toward $ <var:d>$ . This code redefines the precondition $ \{ <var:K> = <var:V> \} $ as $ \{ <var:K> = <var:V> \land <var:d> = <nat:1> \} $ . This is ensured with the assignment scheme found in usual Hoare techniques . Honing in on the upcoming line contained in our code , we have the environment update command \verb | <var:d> := <nat:2> + <var:d> * <var:K> ; | . This transfers $ \{ <var:K> = <var:V> \land <var:d> = <nat:1> \} $ toward the postcondition $ \{ <var:K> = <var:V> \land <var:d> = <nat:1> \cdot <var:V> + <nat:2> \} $ . Immediately after , the variable binding code binding $ <nat:1> + <var:d> * <var:K$ into $ <var:d>$ . This code advances the condition $ \{ <var:K> = <var:V> \land <var:d> = <nat:1> \cdot <var:V> + <nat:2> \} $ toward $ \{ <var:K> = <var:V> \land <var:d> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + <nat:1> \} $ . This is ensured through the assignment law given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:K> = <var:V> }} <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:K> ; <var:d> := <nat:1> + <var:d> * <var:K> {{ <var:d> = <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:V> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:V> /\ <var:d> = <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:V> /\ <var:d> = <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 