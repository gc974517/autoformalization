\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:z1> := <var:O> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:8> ; <var:G> := <var:z1> <var:G> := <var:G> + <var:z0> \end{verbatim} Assume --- taking $ <var:d> \in \mathbb{N} $ --- $ <var:O> = <var:d> $ before the execution of our set of instructions , it must be that we see $ <var:G> = <nat:8> \cdot <var:d> + <nat:4> $ after program is done executing . \end{theorem} \begin{proof} The way to prove correctness for this code can be shown through usual Hoare reasoning . Further , \begin{eqnarray} \{ <var:O> = <var:d> \} \, <var:z1> := <var:O> \, \{ <var:O> = <var:d> \land <var:z1> = <var:d> \} \end{eqnarray} Shifting focus toward the next statements in the code segment , \begin{eqnarray} \{ <var:O> = <var:d> \} \, <var:z1> := <var:O> \, \{ <var:O> = <var:d> \land <var:z1> = <var:d> \} \\ \{ <var:O> = <var:d> \land <var:z1> = <var:d> \} \, <var:z0> := <nat:4> \, \{ <var:O> = <var:d> \land <var:z1> = <var:d> \land <var:z0> = <nat:4> \} \\ \{ <var:O> = <var:d> \land <var:z1> = <var:d> \land <var:z0> = <nat:4> \} \, <var:z1> := <var:z1> * <nat:8> \, \{ <var:O> = <var:d> \land <var:z1> = <nat:8> \cdot <var:d> \land <var:z0> = <nat:4> \} \\ \{ <var:O> = <var:d> \land <var:z1> = <nat:8> \cdot <var:d> \land <var:z0> = <nat:4> \} \, <var:G> := <var:z1\, \{ <var:O> = <var:d> \land <var:z0> = <nat:4> \land <var:G> = <nat:8> \cdot <var:d> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:O> = <var:d> }} <var:z1> := <var:O> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:8> ; <var:G> := <var:z1> <var:G> := <var:G> + <var:z0> {{ <var:G> = <nat:8> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:z1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:z1> = <var:d> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:z1> = <nat:8> * <var:d> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:z0> = <nat:4> /\ <var:G> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:G> = <nat:8> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 