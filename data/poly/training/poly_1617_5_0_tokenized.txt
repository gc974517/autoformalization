\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:7> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:M> ; <var:I> := <var:b1> ; <var:I> := <var:I> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:M> = <var:s> $ before evaluating our program then $ <var:I> = <nat:6> \times <var:s> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands can be shown by usual Hoare techniques . Moving on to the next step , \begin{eqnarray} \{ <var:M> = <var:s> \} \, <var:b0> := <nat:7> \, \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \} \end{eqnarray} This is deduced by the binding inference rule in usual Hoare logic . Advancing to the subsequent steps contained in the set of instructions , \begin{eqnarray} \{ <var:M> = <var:s> \} \, <var:b0> := <nat:7> \, \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \} \\ \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \} \, <var:b1> := <nat:6> \, \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \} \\ \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \} \, <var:b1> := <var:b1> * <var:M> \, \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \cdot <var:s> \} \end{eqnarray} This is shown through the variable assignmet scheme defined in standard Hoare techniques . Focusing on the subsequent statement contained in our list of instructions , we see \begin{eqnarray} \{ <var:M> = <var:s> \} \, <var:b0> := <nat:7> \, \{ <var:M> = <var:s> \land <var:b0> = <nat:7> \} \end{eqnarray} This is sound by the law obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:7> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:M> ; <var:I> := <var:b1> ; <var:I> := <var:I> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:M> = <var:s> }} <def:poly> {{ <var:I> = <nat:6> * <var:s> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:b0> = <nat:7> /\ <var:I> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:I> = <nat:6> * <var:s> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 