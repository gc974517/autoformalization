\begin{document} \begin{theorem} Consider the following program in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:3> ; <var:y> := <var:u0> \end{verbatim} Allowing it to be that $ <var:Z> = <var:Q> $ before interpreting the code it holds that we see $ <var:y> = <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code can be done using Hoare reasoning . Looking at the subsequent piece of code contained in the set of instructions , we see \begin{verbatim} { <var:Z> = <var:Q> } <var:u0> := <nat:3> { <var:Z> = <var:Q> \land <var:u0> = <nat:3> } \end{verbatim} This is ensured through the environment update inference rule given by typical Hoare reasoning . Keeping momentum , \begin{verbatim} { <var:Z> = <var:Q> } <var:u0> := <nat:3> { <var:Z> = <var:Q> \land <var:u0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Z> = <var:Q> }} <var:u0> := <nat:3> ; <var:y> := <var:u0> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 