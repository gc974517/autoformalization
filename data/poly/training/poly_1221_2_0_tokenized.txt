\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:g0> := <nat:1> ; <var:H> := <var:g0> \end{verbatim} Given for any $ <var:P> \in \mathbb{Z}^+ $ it to hold that $ <var:i> = <var:P> $ before executing our program it holds that we see $ <var:H> = <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:i> = <var:P> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:i> = <var:P> \land <var:g0> = <nat:1> \} \end{eqnarray} Continuing the execution of this list of commands results in : \begin{eqnarray} <var:H> := <var:g0> \\ \{ <var:i> = <var:P> \land <var:H> = <nat:1> \} \end{eqnarray} Therefore , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:i> = <var:P> }} <var:g0> := <nat:1> ; <var:H> := <var:g0> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 