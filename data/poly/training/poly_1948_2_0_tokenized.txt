\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:3> ; <var:G> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Allow it to be that $ <var:N> = <var:V> $ ( taking positive integer coefficients $ <var:V> $ ) prior to executing this code segment , it follows that we see $ <var:G> = <nat:3> $ once segment of code executes . \end{theorem} \begin{proof} The method of proof for the code segment can be done with usual Hoare reasoning . Advancing to the following statements in the set of commands , we see \begin{verbatim} { <var:N> = <var:V> } <var:k0> := <nat:3> { <var:N> = <var:V> \land <var:k0> = <nat:3> } { <var:N> = <var:V> \land <var:k0> = <nat:3> } <var:G> := <var:k0{ <var:N> = <var:V> \land <var:G> = <nat:3> } \end{verbatim} This is shown to be logically sound with the variable assignmet inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:3> ; <var:G> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:N> = <var:V> }} <def:poly> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:V> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:V> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 