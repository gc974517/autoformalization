\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:m> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:m> ; <var:T2> := <var:T2> * <var:m> ; <var:y> := <var:T2> ; <var:y> := <var:y> + <var:T1> ; <var:y> := <var:y> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:m> = <var:Z> $ prior to executing this code segment , then we have $ <var:y> = <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:9> $ once program exits . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:m> = <var:Z> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:5> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \} \\ <var:T1> := <var:T1> * <var:m> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \times <var:Z> \} \\ <var:T2> := <nat:6> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \times <var:Z> \land <var:T2> = <nat:6> \} \\ <var:T2> := <var:T2> * <var:m> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \times <var:Z> \land <var:T2> = <nat:6> \times <var:Z> \} \\ <var:T2> := <var:T2> * <var:m> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \times <var:Z> \land <var:T2> = <nat:6> \times <var:Z> ^ <nat:2> \} \\ <var:y> := <var:T2> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \times <var:Z> \land <var:y> = <nat:6> \times <var:Z> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:T1> ; \\ \{ <var:m> = <var:Z> \land <var:T0> = <nat:9> \land <var:y> = <nat:6> \times <var:Z> ^ <nat:2> + <nat:5> \times <var:Z> \} \\ <var:y> := <var:y> + <var:T0> \\ \{ <var:m> = <var:Z> \land <var:y> = <nat:6> \times <var:Z> ^ <nat:2> + <nat:5> \times <var:Z> + <nat:9> \} \end{eqnarray} Thus , the code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:9> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:m> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:m> ; <var:T2> := <var:T2> * <var:m> ; <var:y> := <var:T2> ; <var:y> := <var:y> + <var:T1> ; <var:y> := <var:y> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:m> = <var:Z> }} <def:poly> {{ <var:y> = <nat:6> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:Z> /\ <var:T2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:Z> /\ <var:T2> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:Z> /\ <var:T2> = <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:Z> /\ <var:y> = <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:T0> = <nat:9> /\ <var:y> = <nat:6> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:y> = <nat:6> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 