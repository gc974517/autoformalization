\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:3> ; <var:x> := <nat:4> + <var:x> * <var:g> ; <var:x> := <nat:1> + <var:x> * <var:g> ; <var:x> := <nat:3> + <var:x> * <var:g> ; <var:x> := <nat:3> + <var:x> * <var:g> ; <var:x> := <var:x> * <var:g> ; <var:x> := <nat:3> + <var:x> * <var:g> ; <var:x> := <var:x> * <var:g> ; <var:x> := <nat:1> + <var:x> * <var:g> ; <var:x> := <var:x> * <var:g> ; <var:x> := <nat:4> + <var:x> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:g> = <var:Q> $ ( for some natural coefficients $ <var:Q> $ ) prior to the evaluation of our segment of code it follows that we see $ <var:x> = <nat:3> \times <var:Q> ^ <nat:10> + <nat:4> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:3> \times <var:Q> ^ <nat:7> + <nat:3> \times <var:Q> ^ <nat:6> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:g> = <var:Q> \} \\ <var:x> := <nat:3> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \} \\ <var:x> := <nat:4> + <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> + <nat:4> \} \\ <var:x> := <nat:1> + <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:1> \} \\ <var:x> := <nat:3> + <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:3> \} \\ <var:x> := <nat:3> + <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:3> \} \\ <var:x> := <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:5> + <nat:4> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + \} \\ <var:x> := <nat:3> + <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:6> + <nat:4> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:3> \} \\ <var:x> := <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:7> + <nat:4> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> + \} \\ <var:x> := <nat:1> + <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:8> + <nat:4> \times <var:Q> ^ <nat:7> + <nat:1> \times <var:Q> ^ <nat:6> + <nat:3> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:1> \} \\ <var:x> := <var:x> * <var:g> ; \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:9> + <nat:4> \times <var:Q> ^ <nat:8> + <nat:1> \times <var:Q> ^ <nat:7> + <nat:3> \times <var:Q> ^ <nat:6> + <nat:3> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> + \} \\ <var:x> := <nat:4> + <var:x> * <var:g> \\ \{ <var:g> = <var:Q> \land <var:x> = <nat:3> \times <var:Q> ^ <nat:10> + <nat:4> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:3> \times <var:Q> ^ <nat:7> + <nat:3> \times <var:Q> ^ <nat:6> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Thusly , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:3> ; <var:x> := <nat:4> + <var:x> * <var:g> ; <var:x> := <nat:1> + <var:x> * <var:g> ; <var:x> := <nat:3> + <var:x> * <var:g> ; <var:x> := <nat:3> + <var:x> * <var:g> ; <var:x> := <var:x> * <var:g> ; <var:x> := <nat:3> + <var:x> * <var:g> ; <var:x> := <var:x> * <var:g> ; <var:x> := <nat:1> + <var:x> * <var:g> ; <var:x> := <var:x> * <var:g> ; <var:x> := <nat:4> + <var:x> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:g> = <var:Q> }} <def:poly> {{ <var:x> = <nat:3> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:x> = <nat:3> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 