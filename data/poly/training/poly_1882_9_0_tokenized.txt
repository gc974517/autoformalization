\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:C0> := <nat:8> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:G> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:G> ; <var:C2> := <var:C2> * <var:G> ; <var:K> := <var:C2> ; <var:K> := <var:K> + <var:C1> ; <var:K> := <var:K> + <var:C0> \end{verbatim} Assuming $ <var:G> = <var:u> $ before the evaluation of the series of instructions , it holds that we have $ <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> $ when series of instructions is done . \end{theorem} \begin{proof} The flow of logic for this list of instructions is shown using standard Hoare logic . Going forward , we see the variable assignmet code giving $ <nat:8> $ as $ <var:C0>$ . This advances the condition $ \{ <var:G> = <var:u> \} $ as the condition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \} $ . This is sound using the assignment scheme of Hoare logic . After , the variable binding line \verb | <var:C1> := <nat:2> ; | . This advances the precondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \} $ toward the postcondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \} $ . Focusing on the following line of code in our code segment , we see the variable assignmet statement \verb | <var:C1> := <var:C1> * <var:G> ; | . This statement transfers $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \} $ into the condition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \} $ . This is deduced by the assignment law given in standard Hoare reasoning . Advancing to the next command seen in our segment of code , the variable assignmet code \verb | <var:C2> := <nat:6> ; | . This code advances $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \} $ to the postcondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:6> \} $ . This is deduced by the assignment scheme of usual Hoare logic . Jumping to the proceeding line in the list of commands , we have the variable binding statement binding $ <var:C2> * <var:G> $ toward $ <var:C2>$ . This command takes the condition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:6> \} $ toward the postcondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:6> * <var:u> \} $ . Shifting focus toward the next statement seen in the series of instructions , we have the assignment command yielding $ <var:C2> * <var:G> $ as $ <var:C2>$ . This statement advances the condition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:6> * <var:u> \} $ as the postcondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:6> * <var:u> ^ <nat:2> \} $ . This is rigorously given through the assignment rule obtained from standard Hoare techniques . Paying attention to the upcoming line in our segment of code , we see the statement assigning $ <var:C2> $ toward $ <var:K>$ . This takes $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:C2> = <nat:6> * <var:u> ^ <nat:2> \} $ toward $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:K> = <nat:6> * <var:u> ^ <nat:2> \} $ . Moving forward to the next step , the code \verb | <var:K> := <var:K> + <var:C1> ; | . This takes the precondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> * <var:u> \land <var:K> = <nat:6> * <var:u> ^ <nat:2> \} $ toward the postcondition $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> \} $ . Honing in on the next line contained in our code , we have the variable assignmet line \verb | <var:K> := <var:K> + <var:C0> | . This takes $ \{ <var:G> = <var:u> \land <var:C0> = <nat:8> \land <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> \} $ to the condition $ \{ <var:G> = <var:u> \land <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:G> = <var:u> }} <var:C0> := <nat:8> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:G> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:G> ; <var:C2> := <var:C2> * <var:G> ; <var:K> := <var:C2> ; <var:K> := <var:K> + <var:C1> ; <var:K> := <var:K> + <var:C0> {{ <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:u> /\ <var:K> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:C0> = <nat:8> /\ <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:K> = <nat:6> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 