\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:y> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:y> ; <var:F2> := <var:F2> * <var:y> ; <var:K> := <var:F2> ; <var:K> := <var:K> + <var:F1> ; <var:K> := <var:K> + <var:F0> \end{verbatim} Assume for any positive numbers $ <var:i> $ it to be that $ <var:y> = <var:i> $ prior to the evaluation of the list of commands , it must be that we have $ <var:K> = <nat:6> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> + <nat:2> $ once code is done . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:y> = <var:i> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \} \\ <var:F1> := <nat:5> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:F1> = <nat:5> \} \\ <var:F1> := <var:F1> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:F1> = <nat:5> \cdot <var:i> \} \\ <var:F2> := <nat:6> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:F1> = <nat:5> \cdot <var:i> \land <var:F2> = <nat:6> \} \\ <var:F2> := <var:F2> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:F1> = <nat:5> \cdot <var:i> \land <var:F2> = <nat:6> \cdot <var:i> \} \\ <var:F2> := <var:F2> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:F1> = <nat:5> \cdot <var:i> \land <var:F2> = <nat:6> \cdot <var:i> ^ <nat:2> \} \\ <var:K> := <var:F2> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:F1> = <nat:5> \cdot <var:i> \land <var:K> = <nat:6> \cdot <var:i> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:F1> ; \\ \{ <var:y> = <var:i> \land <var:F0> = <nat:2> \land <var:K> = <nat:6> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> \} \\ <var:K> := <var:K> + <var:F0> \\ \{ <var:y> = <var:i> \land <var:K> = <nat:6> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> + <nat:2> \} \end{eqnarray} Given the above , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <var:F0> := <nat:2> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:y> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:y> ; <var:F2> := <var:F2> * <var:y> ; <var:K> := <var:F2> ; <var:K> := <var:K> + <var:F1> ; <var:K> := <var:K> + <var:F0> {{ <var:K> = <nat:6> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:5> * <var:i> /\ <var:F2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:5> * <var:i> /\ <var:F2> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:5> * <var:i> /\ <var:F2> = <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:5> * <var:i> /\ <var:K> = <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:F0> = <nat:2> /\ <var:K> = <nat:6> * <var:i> ^ <nat:2> + <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:K> = <nat:6> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 