\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:2> ; <var:Q> := <var:g0> \end{verbatim} Assuming --- for every $ <var:i> \in \mathbb{Z}^+ $ --- $ <var:J> = <var:i> $ before evaluating the code segment , it follows that we see $ <var:Q> = <nat:2> $ when set of instructions has terminated . \end{theorem} \begin{proof} Applying usual Hoare logic gives : \begin{eqnarray} \{ <var:J> = <var:i> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:J> = <var:i> \land <var:g0> = <nat:2> \} \\ <var:Q> := <var:g0> \\ \{ <var:J> = <var:i> \land <var:Q> = <nat:2> \} \end{eqnarray} Given the preceding argument , the set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:J> = <var:i> }} <var:g0> := <nat:2> ; <var:Q> := <var:g0> {{ <var:Q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:i> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:i> /\ <var:Q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 