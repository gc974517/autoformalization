\begin{document} \begin{theorem} Define the following program such that \begin{verbatim} <var:G0> := <nat:5> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:k> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:k> ; <var:G2> := <var:G2> * <var:k> ; <var:r> := <var:G2> ; <var:r> := <var:r> + <var:G1> ; <var:r> := <var:r> + <var:G0> \end{verbatim} Assuming that we have $ <var:k> = <var:J> $ prior to running this code then $ <var:r> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:5> $ after set of instructions is done . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:k> = <var:J> \} \\ <var:G0> := <nat:5> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \} \\ <var:G1> := <nat:4> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:G1> = <nat:4> \} \\ <var:G1> := <var:G1> * <var:k> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:G1> = <nat:4> \cdot <var:J> \} \\ <var:G2> := <nat:1> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:G1> = <nat:4> \cdot <var:J> \land <var:G2> = <nat:1> \} \\ <var:G2> := <var:G2> * <var:k> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:G1> = <nat:4> \cdot <var:J> \land <var:G2> = <nat:1> \cdot <var:J> \} \\ <var:G2> := <var:G2> * <var:k> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:G1> = <nat:4> \cdot <var:J> \land <var:G2> = <nat:1> \cdot <var:J> ^ <nat:2> \} \\ <var:r> := <var:G2> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:G1> = <nat:4> \cdot <var:J> \land <var:r> = <nat:1> \cdot <var:J> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:G1> ; \\ \{ <var:k> = <var:J> \land <var:G0> = <nat:5> \land <var:r> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> \} \\ <var:r> := <var:r> + <var:G0> \\ \{ <var:k> = <var:J> \land <var:r> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:5> \} \end{eqnarray} Hence , this program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:k> = <var:J> }} <var:G0> := <nat:5> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:k> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:k> ; <var:G2> := <var:G2> * <var:k> ; <var:r> := <var:G2> ; <var:r> := <var:r> + <var:G1> ; <var:r> := <var:r> + <var:G0> {{ <var:r> = <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:4> * <var:J> /\ <var:G2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:4> * <var:J> /\ <var:G2> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:4> * <var:J> /\ <var:G2> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:4> * <var:J> /\ <var:r> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:G0> = <nat:5> /\ <var:r> = <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:r> = <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 