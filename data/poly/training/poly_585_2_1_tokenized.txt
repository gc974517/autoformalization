\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:1> ; <var:E> := <var:u0> \end{verbatim} Given it to be that $ <var:p> = <var:x> $ before evaluating the series of commands , it must be that we have $ <var:E> = <nat:1> $ after program has finished . \end{theorem} \begin{proof} The proof of this code is demonstrated using the below decorated program . \begin{eqnarray} \{ <var:p> = <var:x> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:p> = <var:x> \land <var:u0> = <nat:1> \} \\ <var:E> := <var:u0> \\ \{ <var:p> = <var:x> \land <var:E> = <nat:1> \} \end{eqnarray} The application of typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <var:u0> := <nat:1> ; <var:E> := <var:u0> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 