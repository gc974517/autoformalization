\begin{document} \begin{theorem} We define a program as follows \begin{verbatim} <var:M0> := <nat:1> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:w> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:w> ; <var:M2> := <var:M2> * <var:w> ; <var:x> := <var:M2> ; <var:x> := <var:x> + <var:M1> ; <var:x> := <var:x> + <var:M0> \end{verbatim} Given ( for all natural numbers $ <var:e> $ ) it to hold that $ <var:w> = <var:e> $ prior to the execution of the series of instructions , it holds that $ <var:x> = <nat:5> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions is clear with typical Hoare logic . Paying attention to the upcoming lines of codeseen in our program , we have \verb | { <var:w> = <var:e> } <var:M0> := <nat:1> { <var:w> = <var:e> \land <var:M0> = <nat:1> } | , \verb | { <var:w> = <var:e> \land <var:M0> = <nat:1> } <var:M1> := <nat:9> { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> } | , \verb | { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> } <var:M1> := <var:M1> * <var:w> { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> \times <var:e> } | and \verb | { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> \times <var:e> } <var:M2> := <nat:5> { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> \times <var:e> \land <var:M2> = <nat:5> } | . This is sound through the variable assignmet rule given in Hoare reasoning . Moving on to the next step , we have \verb | { <var:w> = <var:e> } <var:M0> := <nat:1> { <var:w> = <var:e> \land <var:M0> = <nat:1> } | , \verb | { <var:w> = <var:e> \land <var:M0> = <nat:1> } <var:M1> := <nat:9> { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> } | and \verb | { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> } <var:M1> := <var:M1> * <var:w> { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> \times <var:e> } | . Focusing on the next commands found in the series of instructions , \verb | { <var:w> = <var:e> } <var:M0> := <nat:1> { <var:w> = <var:e> \land <var:M0> = <nat:1> } | and \verb | { <var:w> = <var:e> \land <var:M0> = <nat:1> } <var:M1> := <nat:9> { <var:w> = <var:e> \land <var:M0> = <nat:1> \land <var:M1> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:w> = <var:e> }} <var:M0> := <nat:1> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:w> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:w> ; <var:M2> := <var:M2> * <var:w> ; <var:x> := <var:M2> ; <var:x> := <var:x> + <var:M1> ; <var:x> := <var:x> + <var:M0> {{ <var:x> = <nat:5> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:9> * <var:e> /\ <var:M2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:9> * <var:e> /\ <var:M2> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:9> * <var:e> /\ <var:M2> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:9> * <var:e> /\ <var:x> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M0> = <nat:1> /\ <var:x> = <nat:5> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:x> = <nat:5> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 