\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:6> ; <var:K> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:s> = <var:r> $ before interpreting our set of commands it must be that we see $ <var:K> = <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:s> = <var:r> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:s> = <var:r> \land <var:z0> = <nat:6> \} \end{eqnarray} Allowing executing our series of instructions returns : \begin{eqnarray} <var:K> := <var:z0> \\ \{ <var:s> = <var:r> \land <var:K> = <nat:6> \} \end{eqnarray} Considering the above , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:6> ; <var:K> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:s> = <var:r> }} <def:poly> {{ <var:K> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:K> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 