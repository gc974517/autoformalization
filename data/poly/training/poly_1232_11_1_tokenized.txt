\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:f> ; <var:U2> := <var:U1> * <var:f> ; <var:U3> := <var:U2> * <var:f> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:6> ; <var:k> := <var:U3> <var:k> := <var:k> + <var:U2> <var:k> := <var:k> + <var:U1> <var:k> := <var:k> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> . Allow it to be that $ <var:f> = <var:d> $ prior to the evaluation of our set of commands , then we have $ <var:k> = <nat:6> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:7> $ after code has finished . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:f> = <var:d> \} \\ <var:U1> := <var:f> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <var:d> \} \\ <var:U2> := <var:U1> * <var:f> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <var:d> \land <var:U2> = <var:d> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:f> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <var:d> \land <var:U2> = <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <var:d> \land <var:U2> = <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:U1> := <var:U1> * <nat:1> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <nat:1> * <var:d> \land <var:U2> = <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:U2> := <var:U2> * <nat:1> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <nat:1> * <var:d> \land <var:U2> = <nat:1> * <var:d> ^ <nat:2> \land <var:U3> = <var:d> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:U3> := <var:U3> * <nat:6> ; \\ \{ <var:f> = <var:d> \land <var:U1> = <nat:1> * <var:d> \land <var:U2> = <nat:1> * <var:d> ^ <nat:2> \land <var:U3> = <nat:6> * <var:d> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:k> := <var:U3> \\ \{ <var:f> = <var:d> \land <var:U1> = <nat:1> * <var:d> \land <var:U2> = <nat:1> * <var:d> ^ <nat:2> \land <var:U0> = <nat:7> \land <var:k> = <nat:6> * <var:d> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:U2> \\ \{ <var:f> = <var:d> \land <var:U1> = <nat:1> * <var:d> \land <var:U0> = <nat:7> \land <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:U1> \\ \{ <var:f> = <var:d> \land <var:U0> = <nat:7> \land <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> \} \\ <var:k> := <var:k> + <var:U0> \\ \{ <var:f> = <var:d> \land <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> \} \end{eqnarray} As a result , our series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:f> ; <var:U2> := <var:U1> * <var:f> ; <var:U3> := <var:U2> * <var:f> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:6> ; <var:k> := <var:U3> <var:k> := <var:k> + <var:U2> <var:k> := <var:k> + <var:U1> <var:k> := <var:k> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:f> = <var:d> }} <def:poly> {{ <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <var:d> /\ <var:U2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <var:d> /\ <var:U2> = <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <var:d> /\ <var:U2> = <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <nat:1> * <var:d> /\ <var:U2> = <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <nat:1> * <var:d> /\ <var:U2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:U3> = <var:d> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <nat:1> * <var:d> /\ <var:U2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:U3> = <nat:6> * <var:d> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <nat:1> * <var:d> /\ <var:U2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:U0> = <nat:7> /\ <var:k> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U1> = <nat:1> * <var:d> /\ <var:U0> = <nat:7> /\ <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:U0> = <nat:7> /\ <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:k> = <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 