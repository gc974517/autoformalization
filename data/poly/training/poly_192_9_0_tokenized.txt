\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:7> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:C> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:C> ; <var:b2> := <var:b2> * <var:C> ; <var:v> := <var:b2> ; <var:v> := <var:v> + <var:b1> ; <var:v> := <var:v> + <var:b0> \end{verbatim} Given that we have $ <var:C> = <var:N> $ ahead of the execution of our code segment it holds that we see $ <var:v> = <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands can be shown with this decorated code . \begin{eqnarray} \{ <var:C> = <var:N> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \} \\ <var:b1> := <nat:6> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \} \\ <var:b1> := <var:b1> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \times <var:N> \} \\ <var:b2> := <nat:1> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \times <var:N> \land <var:b2> = <nat:1> \} \\ <var:b2> := <var:b2> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \times <var:N> \land <var:b2> = <nat:1> \times <var:N> \} \\ <var:b2> := <var:b2> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \times <var:N> \land <var:b2> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:v> := <var:b2> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:b1> = <nat:6> \times <var:N> \land <var:v> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:b1> ; \\ \{ <var:C> = <var:N> \land <var:b0> = <nat:7> \land <var:v> = <nat:1> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> \} \\ <var:v> := <var:v> + <var:b0> \\ \{ <var:C> = <var:N> \land <var:v> = <nat:1> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> + <nat:7> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:C> = <var:N> }} <var:b0> := <nat:7> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:C> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:C> ; <var:b2> := <var:b2> * <var:C> ; <var:v> := <var:b2> ; <var:v> := <var:v> + <var:b1> ; <var:v> := <var:v> + <var:b0> {{ <var:v> = <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> * <var:N> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> * <var:N> /\ <var:b2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> * <var:N> /\ <var:b2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:6> * <var:N> /\ <var:v> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:b0> = <nat:7> /\ <var:v> = <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:v> = <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 