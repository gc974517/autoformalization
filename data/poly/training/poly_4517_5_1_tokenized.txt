\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:G1> := <var:N> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:8> ; <var:t> := <var:G1> <var:t> := <var:t> + <var:G0> \end{verbatim} Assuming that $ <var:N> = <var:O> $ ahead of evaluating our code it must be that we see $ <var:t> = <nat:8> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be accomplished using this decorated segment of code . \begin{eqnarray} \{ <var:N> = <var:O> \} \\ <var:G1> := <var:N> ; \\ \{ <var:N> = <var:O> \land <var:G1> = <var:O> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:N> = <var:O> \land <var:G1> = <var:O> \land <var:G0> = <nat:3> \} \\ <var:G1> := <var:G1> * <nat:8> ; \\ \{ <var:N> = <var:O> \land <var:G1> = <nat:8> * <var:O> \land <var:G0> = <nat:3> \} \\ <var:t> := <var:G1> \\ \{ <var:N> = <var:O> \land <var:G0> = <nat:3> \land <var:t> = <nat:8> * <var:O> \} \\ <var:t> := <var:t> + <var:G0> \\ \{ <var:N> = <var:O> \land <var:t> = <nat:8> * <var:O> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:N> = <var:O> }} <var:G1> := <var:N> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:8> ; <var:t> := <var:G1> <var:t> := <var:t> + <var:G0> {{ <var:t> = <nat:8> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:G1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:G1> = <var:O> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:G1> = <nat:8> * <var:O> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:G0> = <nat:3> /\ <var:t> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:t> = <nat:8> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 