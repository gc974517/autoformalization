\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:G> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:G> ; <var:s2> := <var:s2> * <var:G> ; <var:i> := <var:s2> ; <var:i> := <var:i> + <var:s1> ; <var:i> := <var:i> + <var:s0> \end{verbatim} Allow for any positive integer coefficients $ <var:P> $ that $ <var:G> = <var:P> $ prior to executing our set of instructions , it holds that we have $ <var:i> = <nat:1> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:4> $ once list of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:P> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \} \\ <var:s1> := <nat:3> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \} \\ <var:s1> := <var:s1> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> * <var:P> \} \\ <var:s2> := <nat:1> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> * <var:P> \land <var:s2> = <nat:1> \} \\ <var:s2> := <var:s2> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> * <var:P> \land <var:s2> = <nat:1> * <var:P> \} \\ <var:s2> := <var:s2> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> * <var:P> \land <var:s2> = <nat:1> * <var:P> ^ <nat:2> \} \\ <var:i> := <var:s2> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> * <var:P> \land <var:i> = <nat:1> * <var:P> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:s1> ; \\ \{ <var:G> = <var:P> \land <var:s0> = <nat:4> \land <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> \} \\ <var:i> := <var:i> + <var:s0> \\ \{ <var:G> = <var:P> \land <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> \} \end{eqnarray} The application of typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:G> = <var:P> }} <var:s0> := <nat:4> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:G> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:G> ; <var:s2> := <var:s2> * <var:G> ; <var:i> := <var:s2> ; <var:i> := <var:i> + <var:s1> ; <var:i> := <var:i> + <var:s0> {{ <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:P> /\ <var:s2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:P> /\ <var:s2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:P> /\ <var:s2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:P> /\ <var:i> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s0> = <nat:4> /\ <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:i> = <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 