\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:4> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:E> ; <var:z> := <var:u1> ; <var:z> := <var:z> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:E> = <var:g> $ prior to evaluating this list of instructions , then $ <var:z> = <nat:5> \times <var:g> + <nat:4> $ when list of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for this list of commands is demonstrated by usual Hoare logic . Moving on , the variable binding line \verb | <var:u0> := <nat:4> ; | . This line redefines the condition $ \{ <var:E> = <var:g> \} $ toward the condition $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \} $ . This is shown to be logically sound by the assignment law given by standard Hoare techniques . Taking a look at the subsequent step contained in our code segment , we see the variable update code \verb | <var:u1> := <nat:5> ; | . This takes the condition $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \} $ to the condition $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \land <var:u1> = <nat:5> \} $ . This is shown to be logically sound with the assignment scheme defined in standard Hoare logic . Moving on to the proceeding bit of code contained in our program , we have the assignment code binding $ <var:u1> * <var:E> $ to $ <var:u1>$ . This code redefines $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \land <var:u1> = <nat:5> \} $ into $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \land <var:u1> = <nat:5> * <var:g> \} $ . This is shown to be logically sound through the assignment law found in typical Hoare logic . Honing in on the upcoming piece of code seen in our series of commands , we see the variable update command letting $ <var:u1> $ to $ <var:z>$ . This transfers the precondition $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \land <var:u1> = <nat:5> * <var:g> \} $ to the condition $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \land <var:z> = <nat:5> * <var:g> \} $ . This is ensured by the assignment rule of Hoare logic . Observing the next piece of code found in our code , we see the variable assignmet line binding $ <var:z> + <var:u0$ toward $ <var:z>$ . This forwards the precondition $ \{ <var:E> = <var:g> \land <var:u0> = <nat:4> \land <var:z> = <nat:5> * <var:g> \} $ as the postcondition $ \{ <var:E> = <var:g> \land <var:z> = <nat:5> * <var:g> + <nat:4> \} $ . This is shown to be logically sound through the assignment law defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:4> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:E> ; <var:z> := <var:u1> ; <var:z> := <var:z> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:E> = <var:g> }} <def:poly> {{ <var:z> = <nat:5> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:u0> = <nat:4> /\ <var:z> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:z> = <nat:5> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 