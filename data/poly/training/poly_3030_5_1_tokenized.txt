\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:s> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:5> ; <var:V> := <var:T1> <var:V> := <var:V> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Given that $ <var:s> = <var:N> $ --- for natural numbers $ <var:N> $ --- ahead of running the set of instructions , it follows that $ <var:V> = <nat:5> \times <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is shown by standard Hoare techniques . Advancing to the next step , we have \verb | { <var:s> = <var:N> } <var:T1> := <var:s> { <var:s> = <var:N> \land <var:T1> = <var:N> } | . Considering the proceeding command contained in the set of instructions , we see \verb | { <var:s> = <var:N> } <var:T1> := <var:s> { <var:s> = <var:N> \land <var:T1> = <var:N> } | . This is ensured through the environment update rule found in Hoare techniques . Immediately following , \verb | { <var:s> = <var:N> } <var:T1> := <var:s> { <var:s> = <var:N> \land <var:T1> = <var:N> } | . This is deduced through the variable assignmet inference rule from Hoare reasoning . Considering the upcoming commands found in our series of commands , we see \verb | { <var:s> = <var:N> } <var:T1> := <var:s> { <var:s> = <var:N> \land <var:T1> = <var:N> } | and \verb | { <var:s> = <var:N> \land <var:T1> = <var:N> } <var:T0> := <nat:1> { <var:s> = <var:N> \land <var:T1> = <var:N> \land <var:T0> = <nat:1> } | . This is deduced with the variable binding inference rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:s> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:5> ; <var:V> := <var:T1> <var:V> := <var:V> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:s> = <var:N> }} <def:poly> {{ <var:V> = <nat:5> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:N> /\ <var:T1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:N> /\ <var:T1> = <var:N> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:N> /\ <var:T1> = <nat:5> * <var:N> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:N> /\ <var:T0> = <nat:1> /\ <var:V> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:N> /\ <var:V> = <nat:5> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 