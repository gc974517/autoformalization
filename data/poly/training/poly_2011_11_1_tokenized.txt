\begin{document} \begin{theorem} Consider the following series of commands : \begin{verbatim} <var:G1> := <var:e> ; <var:G2> := <var:G1> * <var:e> ; <var:G3> := <var:G2> * <var:e> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:9> ; <var:G2> := <var:G2> * <nat:7> ; <var:G3> := <var:G3> * <nat:9> ; <var:u> := <var:G3> <var:u> := <var:u> + <var:G2> <var:u> := <var:u> + <var:G1> <var:u> := <var:u> + <var:G0> \end{verbatim} Assume that $ <var:e> = <var:E> $ before interpreting our code segment , it follows that we see $ <var:u> = <nat:9> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:9> $ after code is done executing . \end{theorem} \begin{proof} Applying Hoare logic gives : \begin{eqnarray} \{ <var:e> = <var:E> \} \\ <var:G1> := <var:e> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <var:E> \} \\ <var:G2> := <var:G1> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:9> \} \\ <var:G1> := <var:G1> * <nat:9> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <nat:9> \cdot <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:9> \} \\ <var:G2> := <var:G2> * <nat:7> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <nat:9> \cdot <var:E> \land <var:G2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:9> \} \\ <var:G3> := <var:G3> * <nat:9> ; \\ \{ <var:e> = <var:E> \land <var:G1> = <nat:9> \cdot <var:E> \land <var:G2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:G3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:G0> = <nat:9> \} \\ <var:u> := <var:G3> \\ \{ <var:e> = <var:E> \land <var:G1> = <nat:9> \cdot <var:E> \land <var:G2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:G0> = <nat:9> \land <var:u> = <nat:9> \cdot <var:E> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:G2> \\ \{ <var:e> = <var:E> \land <var:G1> = <nat:9> \cdot <var:E> \land <var:G0> = <nat:9> \land <var:u> = <nat:9> \cdot <var:E> ^ <nat:3> + <nat:7> \cdot <var:E> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:G1> \\ \{ <var:e> = <var:E> \land <var:G0> = <nat:9> \land <var:u> = <nat:9> \cdot <var:E> ^ <nat:3> + <nat:7> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> \} \\ <var:u> := <var:u> + <var:G0> \\ \{ <var:e> = <var:E> \land <var:u> = <nat:9> \cdot <var:E> ^ <nat:3> + <nat:7> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> + <nat:9> \} \end{eqnarray} Given the above , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:e> = <var:E> }} <var:G1> := <var:e> ; <var:G2> := <var:G1> * <var:e> ; <var:G3> := <var:G2> * <var:e> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:9> ; <var:G2> := <var:G2> * <nat:7> ; <var:G3> := <var:G3> * <nat:9> ; <var:u> := <var:G3> <var:u> := <var:u> + <var:G2> <var:u> := <var:u> + <var:G1> <var:u> := <var:u> + <var:G0> {{ <var:u> = <nat:9> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <var:E> /\ <var:G2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <var:E> /\ <var:G2> = <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <var:E> /\ <var:G2> = <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <nat:9> * <var:E> /\ <var:G2> = <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <nat:9> * <var:E> /\ <var:G2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <nat:9> * <var:E> /\ <var:G2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:G3> = <nat:9> * <var:E> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <nat:9> * <var:E> /\ <var:G2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:G0> = <nat:9> /\ <var:u> = <nat:9> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G1> = <nat:9> * <var:E> /\ <var:G0> = <nat:9> /\ <var:u> = <nat:9> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:G0> = <nat:9> /\ <var:u> = <nat:9> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:u> = <nat:9> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 