\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:R> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:6> ; <var:l> := <var:n1> <var:l> := <var:l> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Allow that $ <var:R> = <var:U> $ ahead of executing the series of instructions , it follows that we have $ <var:l> = <nat:6> \times <var:U> + <nat:9> $ once code segment has finished executing . \end{theorem} \begin{proof} The flow of logic for the set of commands is accomplished with standard Hoare techniques . Moving forward to the next step , the environment update line binding $ <var:R> $ toward $ <var:n1>$ . This code moves the precondition $ \{ <var:R> = <var:U> \} $ as $ \{ <var:R> = <var:U> \land <var:n1> = <var:U> \} $ . This is known to be sound using the assignment rule defined in Hoare reasoning . Advancing to the next step , the binding command yielding $ <nat:9> $ as $ <var:n0>$ . This line moves $ \{ <var:R> = <var:U> \land <var:n1> = <var:U> \} $ into $ \{ <var:R> = <var:U> \land <var:n1> = <var:U> \land <var:n0> = <nat:9> \} $ . Jumping to the proceeding line of code found in the program , we see the variable assignmet code binding $ <var:n1> * <nat:6> $ toward $ <var:n1>$ . This advances the precondition $ \{ <var:R> = <var:U> \land <var:n1> = <var:U> \land <var:n0> = <nat:9> \} $ toward the postcondition $ \{ <var:R> = <var:U> \land <var:n1> = <nat:6> \times <var:U> \land <var:n0> = <nat:9> \} $ . Moving onward , the binding command giving $ <var:n1$ to $ <var:l>$ . This moves the condition $ \{ <var:R> = <var:U> \land <var:n1> = <nat:6> \times <var:U> \land <var:n0> = <nat:9> \} $ into the postcondition $ \{ <var:R> = <var:U> \land <var:n0> = <nat:9> \land <var:l> = <nat:6> \times <var:U> \} $ . This is rigorously given through the assignment rule found in standard Hoare reasoning . Shifting focus toward the proceeding step contained in our series of commands , the binding statement \verb | <var:l> := <var:l> + <var:n0> | . This statement forwards the condition $ \{ <var:R> = <var:U> \land <var:n0> = <nat:9> \land <var:l> = <nat:6> \times <var:U> \} $ as the condition $ \{ <var:R> = <var:U> \land <var:l> = <nat:6> \times <var:U> + <nat:9> \} $ . This is rigorously given using the assignment inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:R> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:6> ; <var:l> := <var:n1> <var:l> := <var:l> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:R> = <var:U> }} <def:poly> {{ <var:l> = <nat:6> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:n1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:n1> = <var:U> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:n1> = <nat:6> * <var:U> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:n0> = <nat:9> /\ <var:l> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:l> = <nat:6> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 