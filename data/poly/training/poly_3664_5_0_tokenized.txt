\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:D> ; <var:K> := <var:V1> ; <var:K> := <var:K> + <var:V0> \end{verbatim} Assuming given any $ <var:e> \in \mathbb{N} $ that we have $ <var:D> = <var:e> $ before interpreting our series of commands , it follows that we have $ <var:K> = <nat:7> \cdot <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the code segment is done with usual Hoare techniques . Moving on to the next steps seen in our list of commands , \verb | { <var:D> = <var:e> } <var:V0> := <nat:4> { <var:D> = <var:e> \land <var:V0> = <nat:4> } | , \verb | { <var:D> = <var:e> \land <var:V0> = <nat:4> } <var:V1> := <nat:7> { <var:D> = <var:e> \land <var:V0> = <nat:4> \land <var:V1> = <nat:7> } | , \verb | { <var:D> = <var:e> \land <var:V0> = <nat:4> \land <var:V1> = <nat:7> } <var:V1> := <var:V1> * <var:D> { <var:D> = <var:e> \land <var:V0> = <nat:4> \land <var:V1> = <nat:7> \cdot <var:e> } | , \verb | { <var:D> = <var:e> \land <var:V0> = <nat:4> \land <var:V1> = <nat:7> \cdot <var:e> } <var:K> := <var:V1> { <var:D> = <var:e> \land <var:V0> = <nat:4> \land <var:K> = <nat:7> \cdot <var:e> } | and \verb | { <var:D> = <var:e> \land <var:V0> = <nat:4> \land <var:K> = <nat:7> \cdot <var:e> } <var:K> := <var:K> + <var:V0{ <var:D> = <var:e> \land <var:K> = <nat:7> \cdot <var:e> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:D> = <var:e> }} <var:V0> := <nat:4> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:D> ; <var:K> := <var:V1> ; <var:K> := <var:K> + <var:V0> {{ <var:K> = <nat:7> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:V0> = <nat:4> /\ <var:K> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:K> = <nat:7> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 