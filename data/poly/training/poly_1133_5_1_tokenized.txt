\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:q> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:6> ; <var:a> := <var:U1> <var:a> := <var:a> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume --- for positive integer coefficients $ <var:b> $ --- it to hold that $ <var:q> = <var:b> $ prior to the execution of our segment of code it holds that $ <var:a> = <nat:6> \times <var:b> + <nat:9> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:b> \} \\ <var:U1> := <var:q> ; \\ \{ <var:q> = <var:b> \land <var:U1> = <var:b> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:q> = <var:b> \land <var:U1> = <var:b> \land <var:U0> = <nat:9> \} \\ <var:U1> := <var:U1> * <nat:6> ; \\ \{ <var:q> = <var:b> \land <var:U1> = <nat:6> \cdot <var:b> \land <var:U0> = <nat:9> \} \\ <var:a> := <var:U1> \\ \{ <var:q> = <var:b> \land <var:U0> = <nat:9> \land <var:a> = <nat:6> \cdot <var:b> \} \\ <var:a> := <var:a> + <var:U0> \\ \{ <var:q> = <var:b> \land <var:a> = <nat:6> \cdot <var:b> + <nat:9> \} \end{eqnarray} Thus , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:q> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:6> ; <var:a> := <var:U1> <var:a> := <var:a> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:q> = <var:b> }} <def:poly> {{ <var:a> = <nat:6> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:U1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:U1> = <var:b> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:U1> = <nat:6> * <var:b> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:U0> = <nat:9> /\ <var:a> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:a> = <nat:6> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 