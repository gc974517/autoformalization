\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:P> ; <var:b2> := <var:b1> * <var:P> ; <var:b3> := <var:b2> * <var:P> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:3> ; <var:b3> := <var:b3> * <nat:6> ; <var:h> := <var:b3> <var:h> := <var:h> + <var:b2> <var:h> := <var:h> + <var:b1> <var:h> := <var:h> + <var:b0> \end{verbatim} Assuming that we have $ <var:P> = <var:D> $ , for any positive integers $ <var:D> $ , ahead of the evaluation of this list of instructions , it follows that we have $ <var:h> = <nat:6> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:1> $ . \end{theorem} \begin{proof} See that the following decorated series of instructions . \begin{eqnarray} \{ <var:P> = <var:D> \} \\ <var:b1> := <var:P> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <var:D> \} \\ <var:b2> := <var:b1> * <var:P> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <var:D> \land <var:b2> = <var:D> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:P> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <var:D> \land <var:b2> = <var:D> ^ <nat:2> \land <var:b3> = <var:D> ^ <nat:3> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <var:D> \land <var:b2> = <var:D> ^ <nat:2> \land <var:b3> = <var:D> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ <var:b1> := <var:b1> * <nat:5> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <nat:5> \cdot <var:D> \land <var:b2> = <var:D> ^ <nat:2> \land <var:b3> = <var:D> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ <var:b2> := <var:b2> * <nat:3> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <nat:5> \cdot <var:D> \land <var:b2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:b3> = <var:D> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ <var:b3> := <var:b3> * <nat:6> ; \\ \{ <var:P> = <var:D> \land <var:b1> = <nat:5> \cdot <var:D> \land <var:b2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:b3> = <nat:6> \cdot <var:D> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ <var:h> := <var:b3> \\ \{ <var:P> = <var:D> \land <var:b1> = <nat:5> \cdot <var:D> \land <var:b2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:b0> = <nat:1> \land <var:h> = <nat:6> \cdot <var:D> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:b2> \\ \{ <var:P> = <var:D> \land <var:b1> = <nat:5> \cdot <var:D> \land <var:b0> = <nat:1> \land <var:h> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:b1> \\ \{ <var:P> = <var:D> \land <var:b0> = <nat:1> \land <var:h> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> \} \end{eqnarray} Allowing executing the code produces : \begin{eqnarray} <var:h> := <var:h> + <var:b0> \\ \{ <var:P> = <var:D> \land <var:h> = <nat:6> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> + <nat:1> \} \end{eqnarray} Using standard Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:P> = <var:D> }} <var:b1> := <var:P> ; <var:b2> := <var:b1> * <var:P> ; <var:b3> := <var:b2> * <var:P> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:3> ; <var:b3> := <var:b3> * <nat:6> ; <var:h> := <var:b3> <var:h> := <var:h> + <var:b2> <var:h> := <var:h> + <var:b1> <var:h> := <var:h> + <var:b0> {{ <var:h> = <nat:6> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <var:D> /\ <var:b2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <var:D> /\ <var:b2> = <var:D> ^ <nat:2> /\ <var:b3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <var:D> /\ <var:b2> = <var:D> ^ <nat:2> /\ <var:b3> = <var:D> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <nat:5> * <var:D> /\ <var:b2> = <var:D> ^ <nat:2> /\ <var:b3> = <var:D> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <nat:5> * <var:D> /\ <var:b2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:b3> = <var:D> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <nat:5> * <var:D> /\ <var:b2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:D> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <nat:5> * <var:D> /\ <var:b2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:b0> = <nat:1> /\ <var:h> = <nat:6> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b1> = <nat:5> * <var:D> /\ <var:b0> = <nat:1> /\ <var:h> = <nat:6> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:b0> = <nat:1> /\ <var:h> = <nat:6> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:h> = <nat:6> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 