\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:k0> := <nat:9> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:B> ; <var:k2> := <nat:1> ; <var:k2> := <var:k2> * <var:B> ; <var:k2> := <var:k2> * <var:B> ; <var:F> := <var:k2> ; <var:F> := <var:F> + <var:k1> ; <var:F> := <var:F> + <var:k0> \end{verbatim} Allowing --- for every $ <var:G> \in \mathbb{Z}^+ $ --- $ <var:B> = <var:G> $ ahead of evaluating the set of instructions , then $ <var:F> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:9> $ once list of instructions has executed . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:B> = <var:G> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \} \\ <var:k1> := <nat:1> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:k1> = <nat:1> \} \\ <var:k1> := <var:k1> * <var:B> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:k1> = <nat:1> \times <var:G> \} \\ <var:k2> := <nat:1> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:k1> = <nat:1> \times <var:G> \land <var:k2> = <nat:1> \} \\ <var:k2> := <var:k2> * <var:B> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:k1> = <nat:1> \times <var:G> \land <var:k2> = <nat:1> \times <var:G> \} \\ <var:k2> := <var:k2> * <var:B> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:k1> = <nat:1> \times <var:G> \land <var:k2> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:F> := <var:k2> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:k1> = <nat:1> \times <var:G> \land <var:F> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:k1> ; \\ \{ <var:B> = <var:G> \land <var:k0> = <nat:9> \land <var:F> = <nat:1> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> \} \\ <var:F> := <var:F> + <var:k0> \\ \{ <var:B> = <var:G> \land <var:F> = <nat:1> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:9> \} \end{eqnarray} As a consequence , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:B> = <var:G> }} <var:k0> := <nat:9> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:B> ; <var:k2> := <nat:1> ; <var:k2> := <var:k2> * <var:B> ; <var:k2> := <var:k2> * <var:B> ; <var:F> := <var:k2> ; <var:F> := <var:F> + <var:k1> ; <var:F> := <var:F> + <var:k0> {{ <var:F> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:1> * <var:G> /\ <var:k2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:1> * <var:G> /\ <var:k2> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:1> * <var:G> /\ <var:k2> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:1> * <var:G> /\ <var:F> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:k0> = <nat:9> /\ <var:F> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:F> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 