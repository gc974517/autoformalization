\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:a> ; <var:U2> := <var:U1> * <var:a> ; <var:U3> := <var:U2> * <var:a> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:3> ; <var:U2> := <var:U2> * <nat:6> ; <var:U3> := <var:U3> * <nat:2> ; <var:j> := <var:U3> <var:j> := <var:j> + <var:U2> <var:j> := <var:j> + <var:U1> <var:j> := <var:j> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:a> = <var:O> $ before the evaluation of our code segment it must be that $ <var:j> = <nat:2> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands can be demonstrated by usual Hoare reasoning . Immediately after , we see the variable assignmet statement \verb | <var:U1> := <var:a> ; | . This forwards the precondition $ \{ <var:a> = <var:O> \} $ toward $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \} $ . Advancing to the proceeding piece of code contained in our code segment , we see the assignment command giving $ <var:U1> * <var:a> $ as $ <var:U2>$ . This code moves $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \} $ as the condition $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \land <var:U2> = <var:O> ^ <nat:2> \} $ . This is sound through the assignment law found in standard Hoare techniques . Looking at the next step found in the list of instructions , the environment update command \verb | <var:U3> := <var:U2> * <var:a> ; | . This statement moves $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \land <var:U2> = <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \land <var:U2> = <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \} $ . This is guaranteed through the assignment rule found in standard Hoare techniques . Taking another step toward the proceeding piece of code found in our set of instructions , the variable binding statement defining $ <nat:6> $ into $ <var:U0>$ . This statement moves $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \land <var:U2> = <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \} $ as $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \land <var:U2> = <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ . Looking at the upcoming line seen in the program , we have the environment update command \verb | <var:U1> := <var:U1> * <nat:3> ; | . This advances the condition $ \{ <var:a> = <var:O> \land <var:U1> = <var:O> \land <var:U2> = <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ to $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ . This is shown to be logically sound by the assignment inference rule from typical Hoare reasoning . Observing the next line of code seen in the list of commands , we have the line \verb | <var:U2> := <var:U2> * <nat:6> ; | . This statement takes the precondition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ into the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ . Advancing on , we see the variable assignmet code \verb | <var:U3> := <var:U3> * <nat:2> ; | . This moves the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:U3> = <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ to the postcondition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ . This is deduced through the assignment law obtained from standard Hoare logic . Advancing to the next step , the binding command \verb | <var:j> := <var:U3> | . This redefines the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:O> ^ <nat:3> \land <var:U0> = <nat:6> \} $ as the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:U0> = <nat:6> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> \} $ . Moving forward to the next step , we have the variable binding command \verb | <var:j> := <var:j> + <var:U2> | . This moves the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:U0> = <nat:6> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> \} $ to the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U0> = <nat:6> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> \} $ . Jumping to the proceeding bit of code seen in the code , we see the variable update command \verb | <var:j> := <var:j> + <var:U1> | . This statement takes the condition $ \{ <var:a> = <var:O> \land <var:U1> = <nat:3> \times <var:O> \land <var:U0> = <nat:6> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> \} $ to the condition $ \{ <var:a> = <var:O> \land <var:U0> = <nat:6> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> \} $ . This is shown to be logically sound using the assignment inference rule found in standard Hoare reasoning . Moving on , the environment update statement yielding $ <var:j> + <var:U0$ to $ <var:j>$ . This code takes the precondition $ \{ <var:a> = <var:O> \land <var:U0> = <nat:6> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> \} $ as $ \{ <var:a> = <var:O> \land <var:j> = <nat:2> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> + <nat:6> \} $ . This is guaranteed through the assignment rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:a> ; <var:U2> := <var:U1> * <var:a> ; <var:U3> := <var:U2> * <var:a> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:3> ; <var:U2> := <var:U2> * <nat:6> ; <var:U3> := <var:U3> * <nat:2> ; <var:j> := <var:U3> <var:j> := <var:j> + <var:U2> <var:j> := <var:j> + <var:U1> <var:j> := <var:j> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <def:poly> {{ <var:j> = <nat:2> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <var:O> /\ <var:U2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <var:O> /\ <var:U2> = <var:O> ^ <nat:2> /\ <var:U3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <var:O> /\ <var:U2> = <var:O> ^ <nat:2> /\ <var:U3> = <var:O> ^ <nat:3> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <nat:3> * <var:O> /\ <var:U2> = <var:O> ^ <nat:2> /\ <var:U3> = <var:O> ^ <nat:3> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <nat:3> * <var:O> /\ <var:U2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:U3> = <var:O> ^ <nat:3> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <nat:3> * <var:O> /\ <var:U2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:O> ^ <nat:3> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <nat:3> * <var:O> /\ <var:U2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:U0> = <nat:6> /\ <var:j> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U1> = <nat:3> * <var:O> /\ <var:U0> = <nat:6> /\ <var:j> = <nat:2> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:U0> = <nat:6> /\ <var:j> = <nat:2> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:j> = <nat:2> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 