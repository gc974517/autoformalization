\begin{document} \begin{theorem} We define a code segment in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:N> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:6> ; <var:j> := <var:d1> <var:j> := <var:j> + <var:d0> \end{verbatim} Assume $ <var:N> = <var:Z> $ , letting positive integer coefficients $ <var:Z> $ , ahead of executing the series of commands it holds that we see $ <var:j> = <nat:6> \times <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our program is evident by typical Hoare logic . Going forward , we see the line assigning $ <var:N> $ toward $ <var:d1>$ . This line moves the precondition $ \{ <var:N> = <var:Z> \} $ as the postcondition $ \{ <var:N> = <var:Z> \land <var:d1> = <var:Z> \} $ . Moving on , we have the statement yielding $ <nat:3> $ into $ <var:d0>$ . This line transfers the condition $ \{ <var:N> = <var:Z> \land <var:d1> = <var:Z> \} $ to $ \{ <var:N> = <var:Z> \land <var:d1> = <var:Z> \land <var:d0> = <nat:3> \} $ . This is shown to be logically sound through the assignment law obtained from Hoare logic . Advancing , we have the variable assignmet command \verb | <var:d1> := <var:d1> * <nat:6> ; | . This command transfers $ \{ <var:N> = <var:Z> \land <var:d1> = <var:Z> \land <var:d0> = <nat:3> \} $ toward the postcondition $ \{ <var:N> = <var:Z> \land <var:d1> = <nat:6> \times <var:Z> \land <var:d0> = <nat:3> \} $ . This is given through the assignment law given in standard Hoare reasoning . Following , we have the assignment code \verb | <var:j> := <var:d1> | . This statement transfers the precondition $ \{ <var:N> = <var:Z> \land <var:d1> = <nat:6> \times <var:Z> \land <var:d0> = <nat:3> \} $ as the postcondition $ \{ <var:N> = <var:Z> \land <var:d0> = <nat:3> \land <var:j> = <nat:6> \times <var:Z> \} $ . Observing the next statement in our series of instructions , we have the variable update line giving $ <var:j> + <var:d0$ as $ <var:j>$ . This command transfers the precondition $ \{ <var:N> = <var:Z> \land <var:d0> = <nat:3> \land <var:j> = <nat:6> \times <var:Z> \} $ to the postcondition $ \{ <var:N> = <var:Z> \land <var:j> = <nat:6> \times <var:Z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:N> = <var:Z> }} <var:d1> := <var:N> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:6> ; <var:j> := <var:d1> <var:j> := <var:j> + <var:d0> {{ <var:j> = <nat:6> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:d1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:d1> = <var:Z> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:d1> = <nat:6> * <var:Z> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:d0> = <nat:3> /\ <var:j> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:j> = <nat:6> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 