\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:8> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:U> ; <var:z> := <var:d1> ; <var:z> := <var:z> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Assume it to be that $ <var:U> = <var:w> $ ahead of the evaluation of the code it must be that we have $ <var:z> = <nat:7> \times <var:w> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is given by Hoare reasoning . Stepping through , we have \verb | { <var:U> = <var:w> } <var:d0> := <nat:8> { <var:U> = <var:w> \land <var:d0> = <nat:8> } | , \verb | { <var:U> = <var:w> \land <var:d0> = <nat:8> } <var:d1> := <nat:7> { <var:U> = <var:w> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } | , \verb | { <var:U> = <var:w> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } <var:d1> := <var:d1> * <var:U> { <var:U> = <var:w> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> \times <var:w> } | and \verb | { <var:U> = <var:w> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> \times <var:w> } <var:z> := <var:d1> { <var:U> = <var:w> \land <var:d0> = <nat:8> \land <var:z> = <nat:7> \times <var:w> } | . Going to the next step , we have \verb | { <var:U> = <var:w> } <var:d0> := <nat:8> { <var:U> = <var:w> \land <var:d0> = <nat:8> } | . This is sound by the variable binding law obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:8> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:U> ; <var:z> := <var:d1> ; <var:z> := <var:z> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:U> = <var:w> }} <def:poly> {{ <var:z> = <nat:7> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:d0> = <nat:8> /\ <var:z> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:z> = <nat:7> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 