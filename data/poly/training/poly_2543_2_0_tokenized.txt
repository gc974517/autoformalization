\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:6> ; <var:H> := <var:I0> \end{verbatim} Assume it to be that $ <var:B> = <var:Y> $ prior to interpreting this series of commands , it holds that we have $ <var:H> = <nat:6> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions is accomplished with typical Hoare logic . Shifting focus toward the proceeding steps contained in our list of instructions , we have \begin{eqnarray} \{ <var:B> = <var:Y> \} \, <var:I0> := <nat:6> \, \{ <var:B> = <var:Y> \land <var:I0> = <nat:6> \} \\ \{ <var:B> = <var:Y> \land <var:I0> = <nat:6> \} \, <var:H> := <var:I0\, \{ <var:B> = <var:Y> \land <var:H> = <nat:6> \} \end{eqnarray} This is shown to be logically sound using the binding inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:B> = <var:Y> }} <var:I0> := <nat:6> ; <var:H> := <var:I0> {{ <var:H> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Y> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Y> /\ <var:H> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 