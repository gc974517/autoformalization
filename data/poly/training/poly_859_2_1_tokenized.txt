\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:q0> := <nat:4> ; <var:J> := <var:q0> \end{verbatim} Allowing that $ <var:Q> = <var:C> $ ahead of evaluating this program then we see $ <var:J> = <nat:4> $ once list of instructions has finished . \end{theorem} \begin{proof} We can see that the below decorated program . \begin{eqnarray} \{ <var:Q> = <var:C> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:Q> = <var:C> \land <var:q0> = <nat:4> \} \\ <var:J> := <var:q0> \\ \{ <var:Q> = <var:C> \land <var:J> = <nat:4> \} \end{eqnarray} Using Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:Q> = <var:C> }} <var:q0> := <nat:4> ; <var:J> := <var:q0> {{ <var:J> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:J> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 