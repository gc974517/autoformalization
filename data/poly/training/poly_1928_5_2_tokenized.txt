\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <nat:1> + <var:k> * <var:q> ; <var:k> := <var:k> * <var:q> ; <var:k> := <nat:2> + <var:k> * <var:q> ; <var:k> := <nat:1> + <var:k> * <var:q> \end{verbatim} Given --- given any $ <var:J> \in \mathbb{Z}^+ $ --- that $ <var:q> = <var:J> $ prior to the evaluation of our segment of code it must be that we see $ <var:k> = <nat:4> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> + <nat:1> $ after list of instructions terminates . \end{theorem} \begin{proof} The argument for the series of commands is accomplished with standard Hoare techniques . Immediately following , we have the variable binding line \verb | <var:k> := <nat:4> ; | . This code moves the precondition $ \{ <var:q> = <var:J> \} $ into the condition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \} $ . Further , we see the variable assignmet statement yielding $ <nat:1> + <var:k> * <var:q> $ toward $ <var:k>$ . This line forwards the condition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \} $ as the condition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> + <nat:1> \} $ . Taking another step toward the upcoming bit of code seen in the segment of code , we have the variable binding command binding $ <var:k> * <var:q> $ to $ <var:k>$ . This advances $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> + <nat:1> \} $ to the postcondition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + \} $ . Considering the next bit of code found in our series of instructions , the variable update command letting $ <nat:2> + <var:k> * <var:q> $ to $ <var:k>$ . This line transfers the precondition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + \} $ into the postcondition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:2> \} $ . Moving on , we have the assignment statement \verb | <var:k> := <nat:1> + <var:k> * <var:q> | . This statement moves the condition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:2> \} $ as the condition $ \{ <var:q> = <var:J> \land <var:k> = <nat:4> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> + <nat:1> \} $ . This is deduced by the assignment law defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:q> = <var:J> }} <var:k> := <nat:4> ; <var:k> := <nat:1> + <var:k> * <var:q> ; <var:k> := <var:k> * <var:q> ; <var:k> := <nat:2> + <var:k> * <var:q> ; <var:k> := <nat:1> + <var:k> * <var:q> {{ <var:k> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:k> = <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 