\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:4> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:l> ; <var:z> := <var:X1> ; <var:z> := <var:z> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Assuming it to be that $ <var:l> = <var:V> $ ahead of executing this series of instructions it must be that we see $ <var:z> = <nat:6> \cdot <var:V> + <nat:4> $ when list of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:V> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:l> = <var:V> \land <var:X0> = <nat:4> \} \\ <var:X1> := <nat:6> ; \\ \{ <var:l> = <var:V> \land <var:X0> = <nat:4> \land <var:X1> = <nat:6> \} \\ <var:X1> := <var:X1> * <var:l> ; \\ \{ <var:l> = <var:V> \land <var:X0> = <nat:4> \land <var:X1> = <nat:6> \cdot <var:V> \} \\ <var:z> := <var:X1> ; \\ \{ <var:l> = <var:V> \land <var:X0> = <nat:4> \land <var:z> = <nat:6> \cdot <var:V> \} \\ <var:z> := <var:z> + <var:X0> \\ \{ <var:l> = <var:V> \land <var:z> = <nat:6> \cdot <var:V> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:4> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:l> ; <var:z> := <var:X1> ; <var:z> := <var:z> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:l> = <var:V> }} <def:poly> {{ <var:z> = <nat:6> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:X0> = <nat:4> /\ <var:z> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:V> /\ <var:z> = <nat:6> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 