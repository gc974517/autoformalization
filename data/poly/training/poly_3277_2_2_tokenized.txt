\begin{document} \begin{theorem} Take the following list of commands as follows \begin{verbatim} <var:x> := <nat:2> ; <var:x> := <nat:3> + <var:x> * <var:N> \end{verbatim} Allowing that $ <var:N> = <var:h> $ ahead of executing this series of commands it follows that we see $ <var:x> = <nat:2> * <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be shown with the following decorated list of commands . \begin{eqnarray} \{ <var:N> = <var:h> \} \\ <var:x> := <nat:2> ; \\ \{ <var:N> = <var:h> \land <var:x> = <nat:2> \} \\ <var:x> := <nat:3> + <var:x> * <var:N> \\ \{ <var:N> = <var:h> \land <var:x> = <nat:2> \times <var:h> + <nat:3> \} \end{eqnarray} Using usual Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:N> = <var:h> }} <var:x> := <nat:2> ; <var:x> := <nat:3> + <var:x> * <var:N> {{ <var:x> = <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:x> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:x> = <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 