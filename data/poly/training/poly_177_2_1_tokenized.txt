\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:6> ; <var:e> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow that we have $ <var:o> = <var:T> $ ahead of the evaluation of this series of commands it must be that $ <var:e> = <nat:6> $ when code segment has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be accomplished by the following decorated series of commands . \begin{eqnarray} \{ <var:o> = <var:T> \} \\ <var:Z0> := <nat:6> ; \\ \{ <var:o> = <var:T> \land <var:Z0> = <nat:6> \} \\ <var:e> := <var:Z0> \\ \{ <var:o> = <var:T> \land <var:e> = <nat:6> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:6> ; <var:e> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:o> = <var:T> }} <def:poly> {{ <var:e> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:e> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 