\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:i> ; <var:C2> := <var:C1> * <var:i> ; <var:C3> := <var:C2> * <var:i> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:6> ; <var:F> := <var:C3> <var:F> := <var:F> + <var:C2> <var:F> := <var:F> + <var:C1> <var:F> := <var:F> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:i> = <var:P> $ ahead of the evaluation of this list of instructions it holds that $ <var:F> = <nat:6> \cdot <var:P> ^ <nat:3> + <nat:4> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:2> $ once series of instructions is done . \end{theorem} \begin{proof} The argument for the code segment can be seen using typical Hoare logic . Advancing to the following lines of codecontained in our list of instructions , we see \verb | { <var:i> = <var:P> } <var:C1> := <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> } | and \verb | { <var:i> = <var:P> \land <var:C1> = <var:P> } <var:C2> := <var:C1> * <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> } | . This is deduced through the binding rule given in typical Hoare logic . Keeping momentum , we have \verb | { <var:i> = <var:P> } <var:C1> := <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> } | , \verb | { <var:i> = <var:P> \land <var:C1> = <var:P> } <var:C2> := <var:C1> * <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> } | , \verb | { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> } <var:C3> := <var:C2> * <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C3> = <var:P> ^ <nat:3> } | , \verb | { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C3> = <var:P> ^ <nat:3> } <var:C0> := <nat:2> { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C3> = <var:P> ^ <nat:3> \land <var:C0> = <nat:2> } | and \verb | { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C3> = <var:P> ^ <nat:3> \land <var:C0> = <nat:2> } <var:C1> := <var:C1> * <nat:4> { <var:i> = <var:P> \land <var:C1> = <nat:4> * <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C3> = <var:P> ^ <nat:3> \land <var:C0> = <nat:2> } | . Taking another step toward the following lines of codein our series of commands , \verb | { <var:i> = <var:P> } <var:C1> := <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> } | and \verb | { <var:i> = <var:P> \land <var:C1> = <var:P> } <var:C2> := <var:C1> * <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> } | . Stepping through , we have \verb | { <var:i> = <var:P> } <var:C1> := <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> } | . Stepping forward , we see \verb | { <var:i> = <var:P> } <var:C1> := <var:i> { <var:i> = <var:P> \land <var:C1> = <var:P> } | . This is rigorously given through the variable binding inference rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C1> := <var:i> ; <var:C2> := <var:C1> * <var:i> ; <var:C3> := <var:C2> * <var:i> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:6> ; <var:F> := <var:C3> <var:F> := <var:F> + <var:C2> <var:F> := <var:F> + <var:C1> <var:F> := <var:F> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:i> = <var:P> }} <def:poly> {{ <var:F> = <nat:6> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <var:P> /\ <var:C2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <var:P> /\ <var:C2> = <var:P> ^ <nat:2> /\ <var:C3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <var:P> /\ <var:C2> = <var:P> ^ <nat:2> /\ <var:C3> = <var:P> ^ <nat:3> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <nat:4> * <var:P> /\ <var:C2> = <var:P> ^ <nat:2> /\ <var:C3> = <var:P> ^ <nat:3> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <nat:4> * <var:P> /\ <var:C2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:C3> = <var:P> ^ <nat:3> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <nat:4> * <var:P> /\ <var:C2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:C3> = <nat:6> * <var:P> ^ <nat:3> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <nat:4> * <var:P> /\ <var:C2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:C0> = <nat:2> /\ <var:F> = <nat:6> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C1> = <nat:4> * <var:P> /\ <var:C0> = <nat:2> /\ <var:F> = <nat:6> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:C0> = <nat:2> /\ <var:F> = <nat:6> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:F> = <nat:6> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 