\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:r> := <nat:1> ; <var:r> := <nat:2> + <var:r> * <var:e> ; <var:r> := <var:r> * <var:e> ; <var:r> := <nat:2> + <var:r> * <var:e> ; <var:r> := <nat:1> + <var:r> * <var:e> ; <var:r> := <var:r> * <var:e> ; <var:r> := <nat:1> + <var:r> * <var:e> \end{verbatim} Assuming that we have $ <var:e> = <var:z> $ ahead of the evaluation of our list of instructions then we have $ <var:r> = <nat:1> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:e> = <var:z> \} \\ <var:r> := <nat:1> ; \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \} \\ <var:r> := <nat:2> + <var:r> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \times <var:z> + <nat:2> \} \\ <var:r> := <var:r> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + \} \\ <var:r> := <nat:2> + <var:r> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \} \\ <var:r> := <nat:1> + <var:r> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> + <nat:1> \} \\ <var:r> := <var:r> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + \} \\ <var:r> := <nat:1> + <var:r> * <var:e> \\ \{ <var:e> = <var:z> \land <var:r> = <nat:1> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \} \end{eqnarray} Considering the above , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <var:r> := <nat:1> ; <var:r> := <nat:2> + <var:r> * <var:e> ; <var:r> := <var:r> * <var:e> ; <var:r> := <nat:2> + <var:r> * <var:e> ; <var:r> := <nat:1> + <var:r> * <var:e> ; <var:r> := <var:r> * <var:e> ; <var:r> := <nat:1> + <var:r> * <var:e> {{ <var:r> = <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:r> = <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 