\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:U> ; <var:A2> := <var:A1> * <var:U> ; <var:A3> := <var:A2> * <var:U> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:2> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:3> ; <var:p> := <var:A3> <var:p> := <var:p> + <var:A2> <var:p> := <var:p> + <var:A1> <var:p> := <var:p> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given some positive integer coefficients $ <var:R> $ --- that $ <var:U> = <var:R> $ prior to running the set of instructions , it must be that we see $ <var:p> = <nat:3> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:4> $ once segment of code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:R> \} \\ <var:A1> := <var:U> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <var:R> \} \\ <var:A2> := <var:A1> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <var:R> \land <var:A2> = <var:R> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <var:R> \land <var:A2> = <var:R> ^ <nat:2> \land <var:A3> = <var:R> ^ <nat:3> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <var:R> \land <var:A2> = <var:R> ^ <nat:2> \land <var:A3> = <var:R> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A1> := <var:A1> * <nat:2> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <nat:2> \times <var:R> \land <var:A2> = <var:R> ^ <nat:2> \land <var:A3> = <var:R> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A2> := <var:A2> * <nat:9> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <nat:2> \times <var:R> \land <var:A2> = <nat:9> \times <var:R> ^ <nat:2> \land <var:A3> = <var:R> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:A3> := <var:A3> * <nat:3> ; \\ \{ <var:U> = <var:R> \land <var:A1> = <nat:2> \times <var:R> \land <var:A2> = <nat:9> \times <var:R> ^ <nat:2> \land <var:A3> = <nat:3> \times <var:R> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ <var:p> := <var:A3> \\ \{ <var:U> = <var:R> \land <var:A1> = <nat:2> \times <var:R> \land <var:A2> = <nat:9> \times <var:R> ^ <nat:2> \land <var:A0> = <nat:4> \land <var:p> = <nat:3> \times <var:R> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:A2> \\ \{ <var:U> = <var:R> \land <var:A1> = <nat:2> \times <var:R> \land <var:A0> = <nat:4> \land <var:p> = <nat:3> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:A1> \\ \{ <var:U> = <var:R> \land <var:A0> = <nat:4> \land <var:p> = <nat:3> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> \} \\ <var:p> := <var:p> + <var:A0> \\ \{ <var:U> = <var:R> \land <var:p> = <nat:3> \times <var:R> ^ <nat:3> + <nat:9> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:4> \} \end{eqnarray} Utilizing Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:U> ; <var:A2> := <var:A1> * <var:U> ; <var:A3> := <var:A2> * <var:U> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:2> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:3> ; <var:p> := <var:A3> <var:p> := <var:p> + <var:A2> <var:p> := <var:p> + <var:A1> <var:p> := <var:p> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:U> = <var:R> }} <def:poly> {{ <var:p> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <var:R> /\ <var:A2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <var:R> /\ <var:A2> = <var:R> ^ <nat:2> /\ <var:A3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <var:R> /\ <var:A2> = <var:R> ^ <nat:2> /\ <var:A3> = <var:R> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <nat:2> * <var:R> /\ <var:A2> = <var:R> ^ <nat:2> /\ <var:A3> = <var:R> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <nat:2> * <var:R> /\ <var:A2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:A3> = <var:R> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <nat:2> * <var:R> /\ <var:A2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:R> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <nat:2> * <var:R> /\ <var:A2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:3> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A1> = <nat:2> * <var:R> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 