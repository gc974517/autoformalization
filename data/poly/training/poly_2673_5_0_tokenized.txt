\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:T> ; <var:h> := <var:Q1> ; <var:h> := <var:h> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:T> = <var:m> $ ahead of executing our program , it must be that we see $ <var:h> = <nat:5> \times <var:m> + <nat:8> $ . \end{theorem} \begin{proof} The proof of the series of commands can be accomplished by typical Hoare techniques . Taking a look at the proceeding bits of codefound in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:m> \} & <var:Q0> := <nat:8> & \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \} \\ \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \} & <var:Q1> := <nat:5> & \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:5> \} \\ \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:5> \} & <var:Q1> := <var:Q1> * <var:T> & \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:5> \cdot <var:m> \} \end{tabular} This is guaranteed by the variable update rule found in Hoare techniques . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:m> \} & <var:Q0> := <nat:8> & \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \} \end{tabular} Moving forward to the proceeding bit of code seen in the code , \[ \begin{tabular} {rcl} \{ <var:T> = <var:m> \} & <var:Q0> := <nat:8> & \{ <var:T> = <var:m> \land <var:Q0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:T> ; <var:h> := <var:Q1> ; <var:h> := <var:h> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:T> = <var:m> }} <def:poly> {{ <var:h> = <nat:5> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Q0> = <nat:8> /\ <var:h> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:h> = <nat:5> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 