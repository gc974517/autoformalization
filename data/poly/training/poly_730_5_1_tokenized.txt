\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:g1> := <var:q> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:5> ; <var:x> := <var:g1> <var:x> := <var:x> + <var:g0> \end{verbatim} Allow --- given some positive numbers $ <var:V> $ --- that we have $ <var:q> = <var:V> $ ahead of executing this segment of code , it follows that $ <var:x> = <nat:5> \cdot <var:V> + <nat:7> $ after series of instructions is done . \end{theorem} \begin{proof} The flow of logic for the code can be seen using typical Hoare techniques . Immediately following , we see \verb | { <var:q> = <var:V> } <var:g1> := <var:q> { <var:q> = <var:V> \land <var:g1> = <var:V> } | , \verb | { <var:q> = <var:V> \land <var:g1> = <var:V> } <var:g0> := <nat:7> { <var:q> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:7> } | , \verb | { <var:q> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:7> } <var:g1> := <var:g1> * <nat:5> { <var:q> = <var:V> \land <var:g1> = <nat:5> \cdot <var:V> \land <var:g0> = <nat:7> } | , \verb | { <var:q> = <var:V> \land <var:g1> = <nat:5> \cdot <var:V> \land <var:g0> = <nat:7> } <var:x> := <var:g1{ <var:q> = <var:V> \land <var:g0> = <nat:7> \land <var:x> = <nat:5> \cdot <var:V> } | and \verb | { <var:q> = <var:V> \land <var:g0> = <nat:7> \land <var:x> = <nat:5> \cdot <var:V> } <var:x> := <var:x> + <var:g0{ <var:q> = <var:V> \land <var:x> = <nat:5> \cdot <var:V> + <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:q> = <var:V> }} <var:g1> := <var:q> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:5> ; <var:x> := <var:g1> <var:x> := <var:x> + <var:g0> {{ <var:x> = <nat:5> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:g1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:g1> = <var:V> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:g1> = <nat:5> * <var:V> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:g0> = <nat:7> /\ <var:x> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:x> = <nat:5> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 