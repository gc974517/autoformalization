\begin{document} \begin{theorem} We define a set of instructions as \begin{verbatim} <var:A1> := <var:t> ; <var:A2> := <var:A1> * <var:t> ; <var:A3> := <var:A2> * <var:t> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:7> ; <var:A3> := <var:A3> * <nat:7> ; <var:d> := <var:A3> <var:d> := <var:d> + <var:A2> <var:d> := <var:d> + <var:A1> <var:d> := <var:d> + <var:A0> \end{verbatim} Assume it to hold that $ <var:t> = <var:X> $ before executing our set of commands , it must be that we see $ <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be seen with Hoare reasoning . Moving forward , we have the code yielding $ <var:t> $ into $ <var:A1>$ . This moves $ \{ <var:t> = <var:X> \} $ toward $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \} $ . Advancing on , we have the environment update code \verb | <var:A2> := <var:A1> * <var:t> ; | . This code redefines $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \} $ to the postcondition $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \land <var:A2> = <var:X> ^ <nat:2> \} $ . This is guaranteed with the assignment inference rule given in Hoare logic . Following , we see the assignment command yielding $ <var:A2> * <var:t> $ toward $ <var:A3>$ . This moves the condition $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \land <var:A2> = <var:X> ^ <nat:2> \} $ as the condition $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \land <var:A2> = <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \} $ . This is rigorously given by the assignment scheme in Hoare techniques . Paying attention to the following piece of code in our code segment , the variable assignmet command \verb | <var:A0> := <nat:7> ; | . This advances $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \land <var:A2> = <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \} $ as $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \land <var:A2> = <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . This is given through the assignment scheme found in Hoare techniques . Going to the next step , the environment update command \verb | <var:A1> := <var:A1> * <nat:3> ; | . This advances $ \{ <var:t> = <var:X> \land <var:A1> = <var:X> \land <var:A2> = <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ to $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . Moving onward , we see the binding code \verb | <var:A2> := <var:A2> * <nat:7> ; | . This moves the condition $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ into $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <nat:7> * <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . Advancing , we see the variable assignmet line letting $ <var:A3> * <nat:7> $ as $ <var:A3>$ . This forwards the precondition $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <nat:7> * <var:X> ^ <nat:2> \land <var:A3> = <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ to the postcondition $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <nat:7> * <var:X> ^ <nat:2> \land <var:A3> = <nat:7> * <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . This is guaranteed by the assignment rule defined in Hoare reasoning . Looking at the next bit of code contained in our code segment , we see the variable binding code \verb | <var:d> := <var:A3> | . This statement forwards the precondition $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <nat:7> * <var:X> ^ <nat:2> \land <var:A3> = <nat:7> * <var:X> ^ <nat:3> \land <var:A0> = <nat:7> \} $ toward the condition $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <nat:7> * <var:X> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> \} $ . Paying attention to the upcoming bit of code contained in our segment of code , we see the command binding $ <var:d> + <var:A2$ as $ <var:d>$ . This statement advances $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A2> = <nat:7> * <var:X> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> \} $ as $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A0> = <nat:7> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> \} $ . Honing in on the following line of code in our segment of code , the command \verb | <var:d> := <var:d> + <var:A1> | . This redefines the condition $ \{ <var:t> = <var:X> \land <var:A1> = <nat:3> * <var:X> \land <var:A0> = <nat:7> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:X> \land <var:A0> = <nat:7> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} $ . This is sound by the assignment inference rule given in usual Hoare reasoning . Stepping through , we see the variable binding command \verb | <var:d> := <var:d> + <var:A0> | . This moves the condition $ \{ <var:t> = <var:X> \land <var:A0> = <nat:7> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} $ as the postcondition $ \{ <var:t> = <var:X> \land <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:t> = <var:X> }} <var:A1> := <var:t> ; <var:A2> := <var:A1> * <var:t> ; <var:A3> := <var:A2> * <var:t> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:7> ; <var:A3> := <var:A3> * <nat:7> ; <var:d> := <var:A3> <var:d> := <var:d> + <var:A2> <var:d> := <var:d> + <var:A1> <var:d> := <var:d> + <var:A0> {{ <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <var:X> /\ <var:A2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <var:X> /\ <var:A2> = <var:X> ^ <nat:2> /\ <var:A3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <var:X> /\ <var:A2> = <var:X> ^ <nat:2> /\ <var:A3> = <var:X> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <nat:3> * <var:X> /\ <var:A2> = <var:X> ^ <nat:2> /\ <var:A3> = <var:X> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <nat:3> * <var:X> /\ <var:A2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:A3> = <var:X> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <nat:3> * <var:X> /\ <var:A2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:A3> = <nat:7> * <var:X> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <nat:3> * <var:X> /\ <var:A2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:A0> = <nat:7> /\ <var:d> = <nat:7> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A1> = <nat:3> * <var:X> /\ <var:A0> = <nat:7> /\ <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:A0> = <nat:7> /\ <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:d> = <nat:7> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 