\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:b> ; <var:S2> := <nat:7> ; <var:S2> := <var:S2> * <var:b> ; <var:S2> := <var:S2> * <var:b> ; <var:X> := <var:S2> ; <var:X> := <var:X> + <var:S1> ; <var:X> := <var:X> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Allowing that $ <var:b> = <var:F> $ ahead of interpreting this list of commands it holds that $ <var:X> = <nat:7> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> + <nat:8> $ after code segment has exited . \end{theorem} \begin{proof} The argument for our code can be accomplished using typical Hoare logic . Keeping momentum , we see the variable binding statement binding $ <nat:8> $ into $ <var:S0>$ . This takes the precondition $ \{ <var:b> = <var:F> \} $ toward $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \} $ . This is deduced through the assignment scheme from usual Hoare techniques . Honing in on the proceeding statement seen in the code , we have the variable binding line binding $ <nat:7> $ toward $ <var:S1>$ . This line transfers $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \} $ into the postcondition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \} $ . This is given by the assignment law obtained from typical Hoare reasoning . Moving onward , the variable binding command \verb | <var:S1> := <var:S1> * <var:b> ; | . This forwards the precondition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \} $ to $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \} $ . Jumping to the upcoming line seen in the segment of code , we have the variable binding statement defining $ <nat:7> $ toward $ <var:S2>$ . This redefines $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \} $ as the condition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:S2> = <nat:7> \} $ . Advancing to the next step , we see the variable assignmet code assigning $ <var:S2> * <var:b> $ to $ <var:S2>$ . This takes $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:S2> = <nat:7> \} $ as the condition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:S2> = <nat:7> \cdot <var:F> \} $ . Considering the upcoming line of code in our segment of code , we see the line defining $ <var:S2> * <var:b> $ as $ <var:S2>$ . This statement forwards $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:S2> = <nat:7> \cdot <var:F> \} $ as the condition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:S2> = <nat:7> \cdot <var:F> ^ <nat:2> \} $ . Focusing on the next piece of code in our set of instructions , the variable binding statement giving $ <var:S2> $ into $ <var:X>$ . This statement forwards the precondition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:S2> = <nat:7> \cdot <var:F> ^ <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:X> = <nat:7> \cdot <var:F> ^ <nat:2> \} $ . Following , the variable binding command \verb | <var:X> := <var:X> + <var:S1> ; | . This forwards the condition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:S1> = <nat:7> \cdot <var:F> \land <var:X> = <nat:7> \cdot <var:F> ^ <nat:2> \} $ toward $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:X> = <nat:7> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> \} $ . Shifting focus toward the upcoming command contained in the set of commands , the variable update statement \verb | <var:X> := <var:X> + <var:S0> | . This code redefines the precondition $ \{ <var:b> = <var:F> \land <var:S0> = <nat:8> \land <var:X> = <nat:7> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> \} $ to the condition $ \{ <var:b> = <var:F> \land <var:X> = <nat:7> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:b> ; <var:S2> := <nat:7> ; <var:S2> := <var:S2> * <var:b> ; <var:S2> := <var:S2> * <var:b> ; <var:X> := <var:S2> ; <var:X> := <var:X> + <var:S1> ; <var:X> := <var:X> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:b> = <var:F> }} <def:poly> {{ <var:X> = <nat:7> * <var:F> ^ <nat:2> + <nat:7> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:7> * <var:F> /\ <var:S2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:7> * <var:F> /\ <var:S2> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:7> * <var:F> /\ <var:S2> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:7> * <var:F> /\ <var:X> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:S0> = <nat:8> /\ <var:X> = <nat:7> * <var:F> ^ <nat:2> + <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:X> = <nat:7> * <var:F> ^ <nat:2> + <nat:7> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 