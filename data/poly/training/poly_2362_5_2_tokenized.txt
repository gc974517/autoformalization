\begin{document} \begin{theorem} Take a program in \emph{Imp} such that \begin{verbatim} <var:T> := <nat:4> ; <var:T> := <var:T> * <var:X> ; <var:T> := <nat:4> + <var:T> * <var:X> ; <var:T> := <nat:2> + <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> \end{verbatim} Given that $ <var:X> = <var:C> $ before running this code segment then we see $ <var:T> = <nat:4> \cdot <var:C> ^ <nat:4> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions can be seen with Hoare reasoning . Considering the proceeding piece of code seen in the list of commands , we have the variable binding statement \verb | <var:T> := <nat:4> ; | . This statement takes the condition $ \{ <var:X> = <var:C> \} $ to the postcondition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> \} $ . This is guaranteed with the assignment scheme found in usual Hoare logic . Looking at the upcoming statement found in our list of instructions , we have the variable update line defining $ <var:T> * <var:X> $ as $ <var:T>$ . This redefines the condition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> \} $ to the condition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> + \} $ . Moving on to the upcoming line seen in the program , we have the binding line binding $ <nat:4> + <var:T> * <var:X> $ into $ <var:T>$ . This moves the precondition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> + \} $ into the postcondition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> \} $ . This is ensured using the assignment rule defined in standard Hoare logic . Shifting focus toward the following line found in our set of instructions , we see the assignment command giving $ <nat:2> + <var:T> * <var:X> $ as $ <var:T>$ . This advances the precondition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> \} $ to the postcondition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> + <nat:2> \} $ . Advancing , we have the variable binding command \verb | <var:T> := <nat:3> + <var:T> * <var:X> | . This advances $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> + <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:C> \land <var:T> = <nat:4> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> \} $ . This is shown to be logically sound through the assignment scheme of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <var:T> := <nat:4> ; <var:T> := <var:T> * <var:X> ; <var:T> := <nat:4> + <var:T> * <var:X> ; <var:T> := <nat:2> + <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> {{ <var:T> = <nat:4> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:T> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:T> = <nat:4> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:T> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:T> = <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:T> = <nat:4> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 