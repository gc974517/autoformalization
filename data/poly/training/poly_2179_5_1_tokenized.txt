\begin{document} \begin{theorem} Define the following program such that \begin{verbatim} <var:L1> := <var:e> ; <var:L0> := <nat:2> ; <var:L1> := <var:L1> * <nat:9> ; <var:J> := <var:L1> <var:J> := <var:J> + <var:L0> \end{verbatim} Assume that we have $ <var:e> = <var:T> $ prior to the execution of our set of instructions , it follows that we see $ <var:J> = <nat:9> * <var:T> + <nat:2> $ once list of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for our set of instructions is given by Hoare techniques . Moving forward to the proceeding bit of code found in our code segment , the assignment code defining $ <var:e> $ into $ <var:L1>$ . This statement transfers the condition $ \{ <var:e> = <var:T> \} $ into the condition $ \{ <var:e> = <var:T> \land <var:L1> = <var:T> \} $ . This is shown by the assignment rule defined in usual Hoare reasoning . Keeping momentum , the variable binding line giving $ <nat:2> $ toward $ <var:L0>$ . This command advances the condition $ \{ <var:e> = <var:T> \land <var:L1> = <var:T> \} $ toward $ \{ <var:e> = <var:T> \land <var:L1> = <var:T> \land <var:L0> = <nat:2> \} $ . Immediately after , we have the variable binding command \verb | <var:L1> := <var:L1> * <nat:9> ; | . This transfers $ \{ <var:e> = <var:T> \land <var:L1> = <var:T> \land <var:L0> = <nat:2> \} $ as $ \{ <var:e> = <var:T> \land <var:L1> = <nat:9> \times <var:T> \land <var:L0> = <nat:2> \} $ . Taking a look at the proceeding piece of code contained in the list of commands , we have the variable assignmet command giving $ <var:L1$ to $ <var:J>$ . This command moves the condition $ \{ <var:e> = <var:T> \land <var:L1> = <nat:9> \times <var:T> \land <var:L0> = <nat:2> \} $ toward the postcondition $ \{ <var:e> = <var:T> \land <var:L0> = <nat:2> \land <var:J> = <nat:9> \times <var:T> \} $ . This is known to be sound using the assignment rule from usual Hoare reasoning . Moving on , the code assigning $ <var:J> + <var:L0$ to $ <var:J>$ . This statement takes $ \{ <var:e> = <var:T> \land <var:L0> = <nat:2> \land <var:J> = <nat:9> \times <var:T> \} $ to the postcondition $ \{ <var:e> = <var:T> \land <var:J> = <nat:9> \times <var:T> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:e> = <var:T> }} <var:L1> := <var:e> ; <var:L0> := <nat:2> ; <var:L1> := <var:L1> * <nat:9> ; <var:J> := <var:L1> <var:J> := <var:J> + <var:L0> {{ <var:J> = <nat:9> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:L1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:L1> = <var:T> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:L1> = <nat:9> * <var:T> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:L0> = <nat:2> /\ <var:J> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:J> = <nat:9> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 