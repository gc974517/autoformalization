\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:2> ; <var:a> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Given it to hold that $ <var:M> = <var:o> $ before executing this set of instructions , it follows that we see $ <var:a> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:o> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:M> = <var:o> \land <var:z0> = <nat:2> \} \\ <var:a> := <var:z0> \\ \{ <var:M> = <var:o> \land <var:a> = <nat:2> \} \end{eqnarray} Utilizing usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:a> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:M> = <var:o> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 