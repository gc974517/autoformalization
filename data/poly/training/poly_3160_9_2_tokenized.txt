\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:2> + <var:V> * <var:E> ; <var:V> := <nat:4> + <var:V> * <var:E> ; <var:V> := <nat:4> + <var:V> * <var:E> ; <var:V> := <nat:2> + <var:V> * <var:E> ; <var:V> := <var:V> * <var:E> ; <var:V> := <nat:1> + <var:V> * <var:E> ; <var:V> := <nat:1> + <var:V> * <var:E> ; <var:V> := <nat:3> + <var:V> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:E> = <var:Y> $ for natural coefficients $ <var:Y> $ ahead of the execution of our series of instructions it follows that we see $ <var:V> = <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:2> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:3> $ when segment of code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:Y> \} \\ <var:V> := <nat:4> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \} \\ <var:V> := <nat:2> + <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> + <nat:2> \} \\ <var:V> := <nat:4> + <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:4> \} \\ <var:V> := <nat:4> + <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:4> \} \\ <var:V> := <nat:2> + <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:2> \} \\ <var:V> := <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + \} \\ <var:V> := <nat:1> + <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:2> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:1> \} \end{eqnarray} Advancing the execution of the list of instructions produces : \begin{eqnarray} <var:V> := <nat:1> + <var:V> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:7> + <nat:2> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> + <nat:1> \} \end{eqnarray} Furthering evaluating our program yields : \begin{eqnarray} <var:V> := <nat:3> + <var:V> * <var:E> \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:2> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:3> \} \end{eqnarray} Using Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <nat:2> + <var:V> * <var:E> ; <var:V> := <nat:4> + <var:V> * <var:E> ; <var:V> := <nat:4> + <var:V> * <var:E> ; <var:V> := <nat:2> + <var:V> * <var:E> ; <var:V> := <var:V> * <var:E> ; <var:V> := <nat:1> + <var:V> * <var:E> ; <var:V> := <nat:1> + <var:V> * <var:E> ; <var:V> := <nat:3> + <var:V> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:E> = <var:Y> }} <def:poly> {{ <var:V> = <nat:4> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 