\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:6> ; <var:d1> := <nat:9> ; <var:d1> := <var:d1> * <var:I> ; <var:E> := <var:d1> ; <var:E> := <var:E> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:I> = <var:M> $ ahead of interpreting our list of commands , it must be that $ <var:E> = <nat:9> * <var:M> + <nat:6> $ . \end{theorem} \begin{proof} Let the following decorated series of commands . \begin{eqnarray} \{ <var:I> = <var:M> \} \\ <var:d0> := <nat:6> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:6> \} \\ <var:d1> := <nat:9> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:6> \land <var:d1> = <nat:9> \} \\ <var:d1> := <var:d1> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:6> \land <var:d1> = <nat:9> \times <var:M> \} \end{eqnarray} Allowing the evaluation of our code gives : \begin{eqnarray} <var:E> := <var:d1> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:6> \land <var:E> = <nat:9> \times <var:M> \} \\ <var:E> := <var:E> + <var:d0> \\ \{ <var:I> = <var:M> \land <var:E> = <nat:9> \times <var:M> + <nat:6> \} \end{eqnarray} Using standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:6> ; <var:d1> := <nat:9> ; <var:d1> := <var:d1> * <var:I> ; <var:E> := <var:d1> ; <var:E> := <var:E> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:I> = <var:M> }} <def:poly> {{ <var:E> = <nat:9> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:6> /\ <var:E> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:E> = <nat:9> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 