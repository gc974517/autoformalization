\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:e0> := <nat:6> ; <var:m> := <var:e0> \end{verbatim} Given it to be that $ <var:F> = <var:S> $ ahead of the execution of our program it must be that we see $ <var:m> = <nat:6> $ . \end{theorem} \begin{proof} The proof of the series of commands can be demonstrated by usual Hoare reasoning . Shifting focus toward the proceeding statement in the set of instructions , we have the statement defining $ <nat:6> $ into $ <var:e0>$ . This advances the condition $ \{ <var:F> = <var:S> \} $ into the condition $ \{ <var:F> = <var:S> \land <var:e0> = <nat:6> \} $ . Going to the next step , the binding line binding $ <var:e0$ into $ <var:m>$ . This redefines $ \{ <var:F> = <var:S> \land <var:e0> = <nat:6> \} $ as the condition $ \{ <var:F> = <var:S> \land <var:m> = <nat:6> \} $ . This is deduced with the assignment inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:F> = <var:S> }} <var:e0> := <nat:6> ; <var:m> := <var:e0> {{ <var:m> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:m> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 