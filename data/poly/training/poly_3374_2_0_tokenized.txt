\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:4> ; <var:N> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Assume $ <var:v> = <var:H> $ ahead of the evaluation of this set of instructions , then we have $ <var:N> = <nat:4> $ when set of instructions exits . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives us : \begin{eqnarray} \{ <var:v> = <var:H> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:v> = <var:H> \land <var:Z0> = <nat:4> \} \\ <var:N> := <var:Z0> \\ \{ <var:v> = <var:H> \land <var:N> = <nat:4> \} \end{eqnarray} Thus , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:4> ; <var:N> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:v> = <var:H> }} <def:poly> {{ <var:N> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:N> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 