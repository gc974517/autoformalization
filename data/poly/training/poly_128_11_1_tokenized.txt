\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:O> ; <var:v2> := <var:v1> * <var:O> ; <var:v3> := <var:v2> * <var:O> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:5> ; <var:q> := <var:v3> <var:q> := <var:q> + <var:v2> <var:q> := <var:q> + <var:v1> <var:q> := <var:q> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:O> = <var:o> $ ahead of evaluating our set of commands , then we see $ <var:q> = <nat:5> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:2> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:O> = <var:o> \} \\ <var:v1> := <var:O> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <var:o> \} \end{eqnarray} Furthering the evaluation of this set of instructions returns : \begin{eqnarray} <var:v2> := <var:v1> * <var:O> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:O> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:2> \} \\ <var:v1> := <var:v1> * <nat:3> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <nat:3> \cdot <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:2> \} \\ <var:v2> := <var:v2> * <nat:1> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <nat:3> \cdot <var:o> \land <var:v2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:2> \} \\ <var:v3> := <var:v3> * <nat:5> ; \\ \{ <var:O> = <var:o> \land <var:v1> = <nat:3> \cdot <var:o> \land <var:v2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:v3> = <nat:5> \cdot <var:o> ^ <nat:3> \land <var:v0> = <nat:2> \} \\ <var:q> := <var:v3> \\ \{ <var:O> = <var:o> \land <var:v1> = <nat:3> \cdot <var:o> \land <var:v2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:v0> = <nat:2> \land <var:q> = <nat:5> \cdot <var:o> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:v2> \\ \{ <var:O> = <var:o> \land <var:v1> = <nat:3> \cdot <var:o> \land <var:v0> = <nat:2> \land <var:q> = <nat:5> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:v1> \\ \{ <var:O> = <var:o> \land <var:v0> = <nat:2> \land <var:q> = <nat:5> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> \} \\ <var:q> := <var:q> + <var:v0> \\ \{ <var:O> = <var:o> \land <var:q> = <nat:5> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:2> \} \end{eqnarray} Hence , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:O> ; <var:v2> := <var:v1> * <var:O> ; <var:v3> := <var:v2> * <var:O> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:5> ; <var:q> := <var:v3> <var:q> := <var:q> + <var:v2> <var:q> := <var:q> + <var:v1> <var:q> := <var:q> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <def:poly> {{ <var:q> = <nat:5> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <var:o> /\ <var:v2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <var:o> /\ <var:v2> = <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <var:o> /\ <var:v2> = <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <nat:3> * <var:o> /\ <var:v2> = <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <nat:3> * <var:o> /\ <var:v2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <nat:3> * <var:o> /\ <var:v2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:v3> = <nat:5> * <var:o> ^ <nat:3> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <nat:3> * <var:o> /\ <var:v2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:v0> = <nat:2> /\ <var:q> = <nat:5> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v1> = <nat:3> * <var:o> /\ <var:v0> = <nat:2> /\ <var:q> = <nat:5> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:v0> = <nat:2> /\ <var:q> = <nat:5> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:q> = <nat:5> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 