\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:9> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:G> ; <var:V> := <var:A1> ; <var:V> := <var:V> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Allowing that $ <var:G> = <var:t> $ before interpreting our series of instructions it follows that we see $ <var:V> = <nat:3> \times <var:t> + <nat:9> $ when program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:t> \} \\ <var:A0> := <nat:9> ; \\ \{ <var:G> = <var:t> \land <var:A0> = <nat:9> \} \\ <var:A1> := <nat:3> ; \\ \{ <var:G> = <var:t> \land <var:A0> = <nat:9> \land <var:A1> = <nat:3> \} \\ <var:A1> := <var:A1> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:A0> = <nat:9> \land <var:A1> = <nat:3> \times <var:t> \} \\ <var:V> := <var:A1> ; \\ \{ <var:G> = <var:t> \land <var:A0> = <nat:9> \land <var:V> = <nat:3> \times <var:t> \} \\ <var:V> := <var:V> + <var:A0> \\ \{ <var:G> = <var:t> \land <var:V> = <nat:3> \times <var:t> + <nat:9> \} \end{eqnarray} Using Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:9> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:G> ; <var:V> := <var:A1> ; <var:V> := <var:V> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <def:poly> {{ <var:V> = <nat:3> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:A0> = <nat:9> /\ <var:V> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:V> = <nat:3> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 