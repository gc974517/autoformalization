\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:M0> := <nat:9> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:D> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:D> ; <var:M2> := <var:M2> * <var:D> ; <var:O> := <var:M2> ; <var:O> := <var:O> + <var:M1> ; <var:O> := <var:O> + <var:M0> \end{verbatim} Given that we have $ <var:D> = <var:A> $ ahead of interpreting this set of commands then $ <var:O> = <nat:3> \cdot <var:A> ^ <nat:2> + <nat:9> \cdot <var:A> + <nat:9> $ when list of commands is done executing . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:D> = <var:A> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \} \\ <var:M1> := <nat:9> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:M1> = <nat:9> \} \\ <var:M1> := <var:M1> * <var:D> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:M1> = <nat:9> * <var:A> \} \\ <var:M2> := <nat:3> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:M1> = <nat:9> * <var:A> \land <var:M2> = <nat:3> \} \\ <var:M2> := <var:M2> * <var:D> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:M1> = <nat:9> * <var:A> \land <var:M2> = <nat:3> * <var:A> \} \\ <var:M2> := <var:M2> * <var:D> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:M1> = <nat:9> * <var:A> \land <var:M2> = <nat:3> * <var:A> ^ <nat:2> \} \\ <var:O> := <var:M2> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:M1> = <nat:9> * <var:A> \land <var:O> = <nat:3> * <var:A> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:M1> ; \\ \{ <var:D> = <var:A> \land <var:M0> = <nat:9> \land <var:O> = <nat:3> * <var:A> ^ <nat:2> + <nat:9> * <var:A> \} \\ <var:O> := <var:O> + <var:M0> \\ \{ <var:D> = <var:A> \land <var:O> = <nat:3> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:9> \} \end{eqnarray} As a result , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <var:M0> := <nat:9> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:D> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:D> ; <var:M2> := <var:M2> * <var:D> ; <var:O> := <var:M2> ; <var:O> := <var:O> + <var:M1> ; <var:O> := <var:O> + <var:M0> {{ <var:O> = <nat:3> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:9> * <var:A> /\ <var:M2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:9> * <var:A> /\ <var:M2> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:9> * <var:A> /\ <var:M2> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:9> * <var:A> /\ <var:O> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:M0> = <nat:9> /\ <var:O> = <nat:3> * <var:A> ^ <nat:2> + <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:O> = <nat:3> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 