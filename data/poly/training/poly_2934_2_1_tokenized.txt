\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:3> ; <var:h> := <var:o0> \end{verbatim} Allowing that $ <var:D> = <var:K> $ ahead of running our code , then we see $ <var:h> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:K> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:D> = <var:K> \land <var:o0> = <nat:3> \} \\ <var:h> := <var:o0> \\ \{ <var:D> = <var:K> \land <var:h> = <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:D> = <var:K> }} <var:o0> := <nat:3> ; <var:h> := <var:o0> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 