\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:v0> := <nat:9> ; <var:R> := <var:v0> \end{verbatim} Allow $ <var:f> = <var:I> $ before the execution of this list of commands , it holds that $ <var:R> = <nat:9> $ once segment of code exits . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:I> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:f> = <var:I> \land <var:v0> = <nat:9> \} \\ <var:R> := <var:v0> \\ \{ <var:f> = <var:I> \land <var:R> = <nat:9> \} \end{eqnarray} As a result , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:f> = <var:I> }} <var:v0> := <nat:9> ; <var:R> := <var:v0> {{ <var:R> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:R> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 