\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:D> ; <var:H> := <var:V1> ; <var:H> := <var:H> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:D> = <var:A> $ ahead of evaluating the code , then we see $ <var:H> = <nat:5> \times <var:A> + <nat:4> $ when code segment has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be done using Hoare techniques . Immediately after , the variable binding command \verb | <var:V0> := <nat:4> ; | . This code takes $ \{ <var:D> = <var:A> \} $ toward $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \} $ . This is deduced with the assignment scheme defined in usual Hoare techniques . Observing the next line of code in our list of instructions , we have the variable binding command \verb | <var:V1> := <nat:5> ; | . This statement advances the precondition $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \} $ toward the postcondition $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \land <var:V1> = <nat:5> \} $ . This is deduced through the assignment law found in standard Hoare techniques . Taking another step toward the following step found in our list of commands , the variable assignmet line \verb | <var:V1> := <var:V1> * <var:D> ; | . This forwards the condition $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \land <var:V1> = <nat:5> \} $ as the condition $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \land <var:V1> = <nat:5> \cdot <var:A> \} $ . Next , we have the binding line binding $ <var:V1> $ as $ <var:H>$ . This statement advances $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \land <var:V1> = <nat:5> \cdot <var:A> \} $ as the condition $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \land <var:H> = <nat:5> \cdot <var:A> \} $ . Immediately following , we have the assignment statement \verb | <var:H> := <var:H> + <var:V0> | . This redefines $ \{ <var:D> = <var:A> \land <var:V0> = <nat:4> \land <var:H> = <nat:5> \cdot <var:A> \} $ as the postcondition $ \{ <var:D> = <var:A> \land <var:H> = <nat:5> \cdot <var:A> + <nat:4> \} $ . This is shown using the assignment rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:D> ; <var:H> := <var:V1> ; <var:H> := <var:H> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <def:poly> {{ <var:H> = <nat:5> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:V0> = <nat:4> /\ <var:H> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:H> = <nat:5> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 