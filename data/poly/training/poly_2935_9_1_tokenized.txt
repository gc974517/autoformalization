\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:g> ; <var:I2> := <var:I1> * <var:g> ; <var:I3> := <var:I2> * <var:g> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:1> ; <var:I3> := <var:I3> * <nat:3> ; <var:P> := <var:I3> <var:P> := <var:P> + <var:I1> <var:P> := <var:P> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:g> = <var:q> $ prior to the execution of our set of commands , it follows that we see $ <var:P> = <nat:3> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> + <nat:4> $ after segment of code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:q> \} \\ <var:I1> := <var:g> ; \\ \{ <var:g> = <var:q> \land <var:I1> = <var:q> \} \\ <var:I2> := <var:I1> * <var:g> ; \\ \{ <var:g> = <var:q> \land <var:I1> = <var:q> \land <var:I2> = <var:q> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:g> ; \\ \{ <var:g> = <var:q> \land <var:I1> = <var:q> \land <var:I2> = <var:q> ^ <nat:2> \land <var:I3> = <var:q> ^ <nat:3> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:g> = <var:q> \land <var:I1> = <var:q> \land <var:I2> = <var:q> ^ <nat:2> \land <var:I3> = <var:q> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:I1> := <var:I1> * <nat:1> ; \\ \{ <var:g> = <var:q> \land <var:I1> = <nat:1> \times <var:q> \land <var:I2> = <var:q> ^ <nat:2> \land <var:I3> = <var:q> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:I3> := <var:I3> * <nat:3> ; \\ \{ <var:g> = <var:q> \land <var:I1> = <nat:1> \times <var:q> \land <var:I2> = <var:q> ^ <nat:2> \land <var:I3> = <nat:3> \times <var:q> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:P> := <var:I3> \\ \{ <var:g> = <var:q> \land <var:I1> = <nat:1> \times <var:q> \land <var:I2> = <var:q> ^ <nat:2> \land <var:I0> = <nat:4> \land <var:P> = <nat:3> \times <var:q> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:I1> \\ \{ <var:g> = <var:q> \land <var:I0> = <nat:4> \land <var:P> = <nat:3> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> \} \\ <var:P> := <var:P> + <var:I0> \\ \{ <var:g> = <var:q> \land <var:P> = <nat:3> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> + <nat:4> \} \end{eqnarray} The application of Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:g> ; <var:I2> := <var:I1> * <var:g> ; <var:I3> := <var:I2> * <var:g> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:1> ; <var:I3> := <var:I3> * <nat:3> ; <var:P> := <var:I3> <var:P> := <var:P> + <var:I1> <var:P> := <var:P> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:g> = <var:q> }} <def:poly> {{ <var:P> = <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <var:q> /\ <var:I2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <var:q> /\ <var:I2> = <var:q> ^ <nat:2> /\ <var:I3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <var:q> /\ <var:I2> = <var:q> ^ <nat:2> /\ <var:I3> = <var:q> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <nat:1> * <var:q> /\ <var:I2> = <var:q> ^ <nat:2> /\ <var:I3> = <var:q> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <nat:1> * <var:q> /\ <var:I2> = <var:q> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:q> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I1> = <nat:1> * <var:q> /\ <var:I2> = <var:q> ^ <nat:2> /\ <var:I0> = <nat:4> /\ <var:P> = <nat:3> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:I0> = <nat:4> /\ <var:P> = <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:P> = <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 