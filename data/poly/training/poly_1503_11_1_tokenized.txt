\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:H> ; <var:y2> := <var:y1> * <var:H> ; <var:y3> := <var:y2> * <var:H> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:8> ; <var:y2> := <var:y2> * <nat:5> ; <var:y3> := <var:y3> * <nat:9> ; <var:p> := <var:y3> <var:p> := <var:p> + <var:y2> <var:p> := <var:p> + <var:y1> <var:p> := <var:p> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assuming --- assuming some positive numbers $ <var:g> $ --- $ <var:H> = <var:g> $ prior to the evaluation of the series of commands , it must be that we have $ <var:p> = <nat:9> \times <var:g> ^ <nat:3> + <nat:5> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this segment of code can be seen with standard Hoare reasoning . Advancing to the next step , we have the variable update line \verb | <var:y1> := <var:H> ; | . This moves the condition $ \{ <var:H> = <var:g> \} $ into the condition $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \} $ . This is sound using the assignment inference rule of usual Hoare logic . Looking at the following command contained in the list of instructions , the variable assignmet code \verb | <var:y2> := <var:y1> * <var:H> ; | . This statement takes $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \} $ as $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \land <var:y2> = <var:g> ^ <nat:2> \} $ . This is rigorously given using the assignment scheme defined in usual Hoare logic . Jumping to the upcoming line found in the program , we have the binding line \verb | <var:y3> := <var:y2> * <var:H> ; | . This statement forwards the condition $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \land <var:y2> = <var:g> ^ <nat:2> \} $ into $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \land <var:y2> = <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \} $ . Now , the variable update command letting $ <nat:3> $ to $ <var:y0>$ . This transfers the precondition $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \land <var:y2> = <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \} $ toward the postcondition $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \land <var:y2> = <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . Moving on to the subsequent line seen in the list of commands , we have the binding statement yielding $ <var:y1> * <nat:8> $ to $ <var:y1>$ . This moves $ \{ <var:H> = <var:g> \land <var:y1> = <var:g> \land <var:y2> = <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ into $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . This is deduced using the assignment rule defined by Hoare techniques . Advancing to the upcoming command seen in our program , the assignment line giving $ <var:y2> * <nat:5> $ into $ <var:y2>$ . This moves $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <nat:5> * <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . Moving onward , we have the assignment code yielding $ <var:y3> * <nat:9> $ as $ <var:y3>$ . This command takes $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <nat:5> * <var:g> ^ <nat:2> \land <var:y3> = <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <nat:5> * <var:g> ^ <nat:2> \land <var:y3> = <nat:9> * <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . Keeping momentum , we have the environment update command \verb | <var:p> := <var:y3> | . This line takes the condition $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <nat:5> * <var:g> ^ <nat:2> \land <var:y3> = <nat:9> * <var:g> ^ <nat:3> \land <var:y0> = <nat:3> \} $ into $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <nat:5> * <var:g> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> \} $ . Looking at the next line contained in the segment of code , we have the command assigning $ <var:p> + <var:y2$ into $ <var:p>$ . This line redefines the precondition $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y2> = <nat:5> * <var:g> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> \} $ into $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y0> = <nat:3> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> \} $ . This is shown using the assignment rule obtained from typical Hoare techniques . Moving on to the next statement contained in the program , we have the assignment code binding $ <var:p> + <var:y1$ as $ <var:p>$ . This moves the precondition $ \{ <var:H> = <var:g> \land <var:y1> = <nat:8> * <var:g> \land <var:y0> = <nat:3> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> \} $ into $ \{ <var:H> = <var:g> \land <var:y0> = <nat:3> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:8> * <var:g> \} $ . Shifting focus toward the proceeding command contained in our code segment , we have the assignment code letting $ <var:p> + <var:y0$ into $ <var:p>$ . This code redefines $ \{ <var:H> = <var:g> \land <var:y0> = <nat:3> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:8> * <var:g> \} $ toward the postcondition $ \{ <var:H> = <var:g> \land <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:H> ; <var:y2> := <var:y1> * <var:H> ; <var:y3> := <var:y2> * <var:H> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:8> ; <var:y2> := <var:y2> * <nat:5> ; <var:y3> := <var:y3> * <nat:9> ; <var:p> := <var:y3> <var:p> := <var:p> + <var:y2> <var:p> := <var:p> + <var:y1> <var:p> := <var:p> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:H> = <var:g> }} <def:poly> {{ <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <var:g> /\ <var:y2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <var:g> /\ <var:y2> = <var:g> ^ <nat:2> /\ <var:y3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <var:g> /\ <var:y2> = <var:g> ^ <nat:2> /\ <var:y3> = <var:g> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <nat:8> * <var:g> /\ <var:y2> = <var:g> ^ <nat:2> /\ <var:y3> = <var:g> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <nat:8> * <var:g> /\ <var:y2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:y3> = <var:g> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <nat:8> * <var:g> /\ <var:y2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:g> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <nat:8> * <var:g> /\ <var:y2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:y0> = <nat:3> /\ <var:p> = <nat:9> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y1> = <nat:8> * <var:g> /\ <var:y0> = <nat:3> /\ <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:y0> = <nat:3> /\ <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:p> = <nat:9> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 