\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assume for any $ <var:g> \in \mathbb{Z}^+ $ it to be that $ <var:W> = <var:g> $ prior to executing the set of commands , then we have $ <var:i> = <nat:1> \times <var:g> ^ <nat:8> + <nat:1> \times <var:g> ^ <nat:7> + <nat:4> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:4> $ once series of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of our code can be accomplished by the below decorated series of commands . \begin{eqnarray} \{ <var:W> = <var:g> \} \\ <var:i> := <nat:1> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> + <nat:1> \} \\ <var:i> := <nat:4> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:4> \} \\ <var:i> := <nat:3> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:3> \} \\ <var:i> := <nat:2> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:2> \} \\ <var:i> := <nat:4> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:4> \} \\ <var:i> := <nat:1> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:5> + <nat:4> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:1> \} \\ <var:i> := <nat:2> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:7> + <nat:1> \times <var:g> ^ <nat:6> + <nat:4> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:2> \} \\ <var:i> := <nat:4> + <var:i> * <var:W> \\ \{ <var:W> = <var:g> \land <var:i> = <nat:1> \times <var:g> ^ <nat:8> + <nat:1> \times <var:g> ^ <nat:7> + <nat:4> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:1> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:W> = <var:g> }} <def:poly> {{ <var:i> = <nat:1> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:i> = <nat:1> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 