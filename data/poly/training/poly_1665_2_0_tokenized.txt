\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:2> ; <var:Q> := <var:D0> \end{verbatim} Assume it to be that $ <var:d> = <var:B> $ for any integers $ <var:B> $ ahead of the execution of this set of commands , it follows that we have $ <var:Q> = <nat:2> $ when list of commands has exited . \end{theorem} \begin{proof} The course of logic for the list of commands is clear using usual Hoare techniques . Shifting focus toward the proceeding lines seen in the program , we have \begin{verbatim} { <var:d> = <var:B> } <var:D0> := <nat:2> { <var:d> = <var:B> \land <var:D0> = <nat:2> } { <var:d> = <var:B> \land <var:D0> = <nat:2> } <var:Q> := <var:D0{ <var:d> = <var:B> \land <var:Q> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:d> = <var:B> }} <var:D0> := <nat:2> ; <var:Q> := <var:D0> {{ <var:Q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:Q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 