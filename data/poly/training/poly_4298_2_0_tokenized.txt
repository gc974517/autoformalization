\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:9> ; <var:Q> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:A> = <var:x> $ ahead of executing our set of commands , it holds that we see $ <var:Q> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this set of commands can be accomplished using usual Hoare logic . After , we have \verb | { <var:A> = <var:x> } <var:K0> := <nat:9> { <var:A> = <var:x> \land <var:K0> = <nat:9> } | . This is known to be sound by the variable assignmet rule from Hoare techniques . Immediately after , \verb | { <var:A> = <var:x> } <var:K0> := <nat:9> { <var:A> = <var:x> \land <var:K0> = <nat:9> } | . This is shown using the variable assignmet law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:9> ; <var:Q> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:A> = <var:x> }} <def:poly> {{ <var:Q> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:Q> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 