\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:7> ; <var:q> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:d> = <var:c> $ , given every whole numbers $ <var:c> $ , before evaluating this list of instructions , it holds that $ <var:q> = <nat:7> $ after set of instructions has finished . \end{theorem} \begin{proof} The method of proof for the list of commands is evident by typical Hoare reasoning . Considering the proceeding line seen in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:c> \} & <var:J0> := <nat:7> & \{ <var:d> = <var:c> \land <var:J0> = <nat:7> \} \end{tabular} Moving on to the proceeding step contained in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:c> \} & <var:J0> := <nat:7> & \{ <var:d> = <var:c> \land <var:J0> = <nat:7> \} \end{tabular} This is ensured by the rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:7> ; <var:q> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:d> = <var:c> }} <def:poly> {{ <var:q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 