\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:m> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:m> ; <var:s2> := <var:s2> * <var:m> ; <var:c> := <var:s2> ; <var:c> := <var:c> + <var:s1> ; <var:c> := <var:c> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Allowing that $ <var:m> = <var:q> $ before evaluating the segment of code , then we see $ <var:c> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> $ once code has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:m> = <var:q> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \} \\ <var:s1> := <nat:3> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \} \\ <var:s1> := <var:s1> * <var:m> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \times <var:q> \} \\ <var:s2> := <nat:8> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \times <var:q> \land <var:s2> = <nat:8> \} \\ <var:s2> := <var:s2> * <var:m> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \times <var:q> \land <var:s2> = <nat:8> \times <var:q> \} \\ <var:s2> := <var:s2> * <var:m> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \times <var:q> \land <var:s2> = <nat:8> \times <var:q> ^ <nat:2> \} \\ <var:c> := <var:s2> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:s1> = <nat:3> \times <var:q> \land <var:c> = <nat:8> \times <var:q> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:s1> ; \\ \{ <var:m> = <var:q> \land <var:s0> = <nat:4> \land <var:c> = <nat:8> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> \} \\ <var:c> := <var:c> + <var:s0> \\ \{ <var:m> = <var:q> \land <var:c> = <nat:8> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:4> \} \end{eqnarray} Thusly , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:m> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:m> ; <var:s2> := <var:s2> * <var:m> ; <var:c> := <var:s2> ; <var:c> := <var:c> + <var:s1> ; <var:c> := <var:c> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:m> = <var:q> }} <def:poly> {{ <var:c> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:q> /\ <var:s2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:q> /\ <var:s2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:q> /\ <var:s2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:3> * <var:q> /\ <var:c> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:s0> = <nat:4> /\ <var:c> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:q> /\ <var:c> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 