\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:T1> := <var:P> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:3> ; <var:M> := <var:T1> <var:M> := <var:M> + <var:T0> \end{verbatim} Assuming --- given any positive integers $ <var:D> $ --- that we have $ <var:P> = <var:D> $ prior to the evaluation of the list of instructions it must be that $ <var:M> = <nat:3> \times <var:D> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is evident using the below decorated code . \begin{eqnarray} \{ <var:P> = <var:D> \} \\ <var:T1> := <var:P> ; \\ \{ <var:P> = <var:D> \land <var:T1> = <var:D> \} \\ <var:T0> := <nat:5> ; \\ \{ <var:P> = <var:D> \land <var:T1> = <var:D> \land <var:T0> = <nat:5> \} \\ <var:T1> := <var:T1> * <nat:3> ; \\ \{ <var:P> = <var:D> \land <var:T1> = <nat:3> * <var:D> \land <var:T0> = <nat:5> \} \\ <var:M> := <var:T1> \\ \{ <var:P> = <var:D> \land <var:T0> = <nat:5> \land <var:M> = <nat:3> * <var:D> \} \\ <var:M> := <var:M> + <var:T0> \\ \{ <var:P> = <var:D> \land <var:M> = <nat:3> * <var:D> + <nat:5> \} \end{eqnarray} The application of standard Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:P> = <var:D> }} <var:T1> := <var:P> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:3> ; <var:M> := <var:T1> <var:M> := <var:M> + <var:T0> {{ <var:M> = <nat:3> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:T1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:T1> = <var:D> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:T1> = <nat:3> * <var:D> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:T0> = <nat:5> /\ <var:M> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:M> = <nat:3> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 