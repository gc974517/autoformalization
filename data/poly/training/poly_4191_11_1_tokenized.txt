\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:X> ; <var:O2> := <var:O1> * <var:X> ; <var:O3> := <var:O2> * <var:X> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:9> ; <var:Q> := <var:O3> <var:Q> := <var:Q> + <var:O2> <var:Q> := <var:Q> + <var:O1> <var:Q> := <var:Q> + <var:O0> \end{verbatim} Allow that $ <var:X> = <var:W> $ ahead of running this list of instructions then $ <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:7> \times <var:W> ^ <nat:2> + <nat:9> \times <var:W> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:W> \} \\ <var:O1> := <var:X> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <var:W> \} \\ <var:O2> := <var:O1> * <var:X> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <var:W> \land <var:O2> = <var:W> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:X> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <var:W> \land <var:O2> = <var:W> ^ <nat:2> \land <var:O3> = <var:W> ^ <nat:3> \} \\ <var:O0> := <nat:6> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <var:W> \land <var:O2> = <var:W> ^ <nat:2> \land <var:O3> = <var:W> ^ <nat:3> \land <var:O0> = <nat:6> \} \\ <var:O1> := <var:O1> * <nat:9> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <nat:9> * <var:W> \land <var:O2> = <var:W> ^ <nat:2> \land <var:O3> = <var:W> ^ <nat:3> \land <var:O0> = <nat:6> \} \end{eqnarray} Advancing running this set of commands gives us : \begin{eqnarray} <var:O2> := <var:O2> * <nat:7> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <nat:9> * <var:W> \land <var:O2> = <nat:7> * <var:W> ^ <nat:2> \land <var:O3> = <var:W> ^ <nat:3> \land <var:O0> = <nat:6> \} \\ <var:O3> := <var:O3> * <nat:9> ; \\ \{ <var:X> = <var:W> \land <var:O1> = <nat:9> * <var:W> \land <var:O2> = <nat:7> * <var:W> ^ <nat:2> \land <var:O3> = <nat:9> * <var:W> ^ <nat:3> \land <var:O0> = <nat:6> \} \\ <var:Q> := <var:O3> \\ \{ <var:X> = <var:W> \land <var:O1> = <nat:9> * <var:W> \land <var:O2> = <nat:7> * <var:W> ^ <nat:2> \land <var:O0> = <nat:6> \land <var:Q> = <nat:9> * <var:W> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:O2> \\ \{ <var:X> = <var:W> \land <var:O1> = <nat:9> * <var:W> \land <var:O0> = <nat:6> \land <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:O1> \\ \{ <var:X> = <var:W> \land <var:O0> = <nat:6> \land <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> \} \\ <var:Q> := <var:Q> + <var:O0> \\ \{ <var:X> = <var:W> \land <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:6> \} \end{eqnarray} Using typical Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:X> = <var:W> }} <var:O1> := <var:X> ; <var:O2> := <var:O1> * <var:X> ; <var:O3> := <var:O2> * <var:X> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:9> ; <var:Q> := <var:O3> <var:Q> := <var:Q> + <var:O2> <var:Q> := <var:Q> + <var:O1> <var:Q> := <var:Q> + <var:O0> {{ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <var:W> /\ <var:O2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <var:W> /\ <var:O2> = <var:W> ^ <nat:2> /\ <var:O3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <var:W> /\ <var:O2> = <var:W> ^ <nat:2> /\ <var:O3> = <var:W> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <nat:9> * <var:W> /\ <var:O2> = <var:W> ^ <nat:2> /\ <var:O3> = <var:W> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <nat:9> * <var:W> /\ <var:O2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:O3> = <var:W> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <nat:9> * <var:W> /\ <var:O2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:O3> = <nat:9> * <var:W> ^ <nat:3> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <nat:9> * <var:W> /\ <var:O2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:O0> = <nat:6> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O1> = <nat:9> * <var:W> /\ <var:O0> = <nat:6> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:O0> = <nat:6> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 