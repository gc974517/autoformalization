\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} such that \begin{verbatim} <var:P1> := <var:E> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:1> ; <var:I> := <var:P1> <var:I> := <var:I> + <var:P0> \end{verbatim} Allowing $ <var:E> = <var:W> $ ahead of the evaluation of this list of commands , it holds that we have $ <var:I> = <nat:1> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} The proof of our code segment can be shown with standard Hoare techniques . Advancing , the environment update line defining $ <var:E> $ as $ <var:P1>$ . This redefines the condition $ \{ <var:E> = <var:W> \} $ to $ \{ <var:E> = <var:W> \land <var:P1> = <var:W> \} $ . Advancing , we have the assignment command letting $ <nat:1> $ into $ <var:P0>$ . This line advances the condition $ \{ <var:E> = <var:W> \land <var:P1> = <var:W> \} $ toward the postcondition $ \{ <var:E> = <var:W> \land <var:P1> = <var:W> \land <var:P0> = <nat:1> \} $ . This is rigorously given by the assignment rule defined in standard Hoare techniques . Looking at the proceeding line in our segment of code , we have the assignment code \verb | <var:P1> := <var:P1> * <nat:1> ; | . This command takes the precondition $ \{ <var:E> = <var:W> \land <var:P1> = <var:W> \land <var:P0> = <nat:1> \} $ into the condition $ \{ <var:E> = <var:W> \land <var:P1> = <nat:1> \times <var:W> \land <var:P0> = <nat:1> \} $ . This is known to be sound by the assignment rule from typical Hoare reasoning . Going to the next step , the variable assignmet command \verb | <var:I> := <var:P1> | . This code redefines the condition $ \{ <var:E> = <var:W> \land <var:P1> = <nat:1> \times <var:W> \land <var:P0> = <nat:1> \} $ as $ \{ <var:E> = <var:W> \land <var:P0> = <nat:1> \land <var:I> = <nat:1> \times <var:W> \} $ . Moving forward to the upcoming line in our code segment , we see the variable binding statement \verb | <var:I> := <var:I> + <var:P0> | . This redefines $ \{ <var:E> = <var:W> \land <var:P0> = <nat:1> \land <var:I> = <nat:1> \times <var:W> \} $ as the postcondition $ \{ <var:E> = <var:W> \land <var:I> = <nat:1> \times <var:W> + <nat:1> \} $ . This is shown through the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:E> = <var:W> }} <var:P1> := <var:E> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:1> ; <var:I> := <var:P1> <var:I> := <var:I> + <var:P0> {{ <var:I> = <nat:1> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:W> /\ <var:P1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:W> /\ <var:P1> = <var:W> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:W> /\ <var:P1> = <nat:1> * <var:W> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:W> /\ <var:P0> = <nat:1> /\ <var:I> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:W> /\ <var:I> = <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 