\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:U> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:8> ; <var:J> := <var:C1> <var:J> := <var:J> + <var:C0> \end{verbatim} Allow $ <var:U> = <var:X> $ ahead of evaluating the set of commands , it follows that we see $ <var:J> = <nat:8> * <var:X> + <nat:9> $ when series of commands exits . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be seen through Hoare logic . Going forward , we see \begin{eqnarray} \{ <var:U> = <var:X> \} \, <var:C1> := <var:U> \, \{ <var:U> = <var:X> \land <var:C1> = <var:X> \} \\ \{ <var:U> = <var:X> \land <var:C1> = <var:X> \} \, <var:C0> := <nat:9> \, \{ <var:U> = <var:X> \land <var:C1> = <var:X> \land <var:C0> = <nat:9> \} \end{eqnarray} This is shown to be logically sound by the variable update scheme defined in typical Hoare reasoning . Moving forward to the next steps contained in our set of commands , we have \begin{eqnarray} \{ <var:U> = <var:X> \} \, <var:C1> := <var:U> \, \{ <var:U> = <var:X> \land <var:C1> = <var:X> \} \\ \{ <var:U> = <var:X> \land <var:C1> = <var:X> \} \, <var:C0> := <nat:9> \, \{ <var:U> = <var:X> \land <var:C1> = <var:X> \land <var:C0> = <nat:9> \} \end{eqnarray} This is shown to be logically sound using the variable assignmet law given by usual Hoare logic . Advancing , we have \begin{eqnarray} \{ <var:U> = <var:X> \} \, <var:C1> := <var:U> \, \{ <var:U> = <var:X> \land <var:C1> = <var:X> \} \end{eqnarray} This is ensured by the variable binding law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:U> = <var:X> }} <var:C1> := <var:U> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:8> ; <var:J> := <var:C1> <var:J> := <var:J> + <var:C0> {{ <var:J> = <nat:8> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:C1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:C1> = <var:X> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:C1> = <nat:8> * <var:X> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:C0> = <nat:9> /\ <var:J> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:J> = <nat:8> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 