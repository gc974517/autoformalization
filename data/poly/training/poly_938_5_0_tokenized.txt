\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:7> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:m> ; <var:t> := <var:p1> ; <var:t> := <var:t> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Allow that we have $ <var:m> = <var:M> $ , given any $ <var:M> \in \mathbb{Z}^+ $ , prior to executing the list of instructions , it must be that $ <var:t> = <nat:5> \cdot <var:M> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions is demonstrated through Hoare logic . Moving on to the next step , we have \begin{verbatim} { <var:m> = <var:M> } <var:p0> := <nat:7> { <var:m> = <var:M> \land <var:p0> = <nat:7> } \end{verbatim} Now , we see \begin{verbatim} { <var:m> = <var:M> } <var:p0> := <nat:7> { <var:m> = <var:M> \land <var:p0> = <nat:7> } \end{verbatim} This is shown to be logically sound through the assignment inference rule in Hoare techniques . Moving onward , we have \begin{verbatim} { <var:m> = <var:M> } <var:p0> := <nat:7> { <var:m> = <var:M> \land <var:p0> = <nat:7> } { <var:m> = <var:M> \land <var:p0> = <nat:7> } <var:p1> := <nat:5> { <var:m> = <var:M> \land <var:p0> = <nat:7> \land <var:p1> = <nat:5> } \end{verbatim} Stepping forward , we have \begin{verbatim} { <var:m> = <var:M> } <var:p0> := <nat:7> { <var:m> = <var:M> \land <var:p0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:7> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:m> ; <var:t> := <var:p1> ; <var:t> := <var:t> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:m> = <var:M> }} <def:poly> {{ <var:t> = <nat:5> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:p0> = <nat:7> /\ <var:t> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:t> = <nat:5> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 