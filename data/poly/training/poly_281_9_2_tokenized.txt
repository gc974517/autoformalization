\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allowing $ <var:U> = <var:q> $ , for all natural coefficients $ <var:q> $ , prior to evaluating this list of instructions , it holds that we see $ <var:L> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> $ once list of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for this code can be given by Hoare logic . After , we see \verb | { <var:U> = <var:q> } <var:L> := <nat:1> { <var:U> = <var:q> \land <var:L> = <nat:1> } | , \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> } <var:L> := <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> + } | and \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> + } <var:L> := <nat:2> + <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:2> + <nat:2> } | . This is sound by the assignment rule given by usual Hoare reasoning . Further , we have \verb | { <var:U> = <var:q> } <var:L> := <nat:1> { <var:U> = <var:q> \land <var:L> = <nat:1> } | , \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> } <var:L> := <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> + } | , \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> + } <var:L> := <nat:2> + <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:2> + <nat:2> } | , \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:2> + <nat:2> } <var:L> := <nat:1> + <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> + <nat:1> } | , \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> + <nat:1> } <var:L> := <nat:3> + <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:3> } | and \verb | { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:3> } <var:L> := <var:L> * <var:U> { <var:U> = <var:q> \land <var:L> = <nat:1> \times <var:q> ^ <nat:5> + <nat:2> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:1> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:U> = <var:q> }} <def:poly> {{ <var:L> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:L> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 