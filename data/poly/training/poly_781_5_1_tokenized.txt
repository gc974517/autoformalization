\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:D1> := <var:o> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:5> ; <var:P> := <var:D1> <var:P> := <var:P> + <var:D0> \end{verbatim} Assume that $ <var:o> = <var:C> $ prior to the evaluation of the series of instructions , it holds that $ <var:P> = <nat:5> * <var:C> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:o> = <var:C> \} \\ <var:D1> := <var:o> ; \\ \{ <var:o> = <var:C> \land <var:D1> = <var:C> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:o> = <var:C> \land <var:D1> = <var:C> \land <var:D0> = <nat:8> \} \\ <var:D1> := <var:D1> * <nat:5> ; \\ \{ <var:o> = <var:C> \land <var:D1> = <nat:5> \cdot <var:C> \land <var:D0> = <nat:8> \} \\ <var:P> := <var:D1> \\ \{ <var:o> = <var:C> \land <var:D0> = <nat:8> \land <var:P> = <nat:5> \cdot <var:C> \} \\ <var:P> := <var:P> + <var:D0> \\ \{ <var:o> = <var:C> \land <var:P> = <nat:5> \cdot <var:C> + <nat:8> \} \end{eqnarray} As a result , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:o> = <var:C> }} <var:D1> := <var:o> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:5> ; <var:P> := <var:D1> <var:P> := <var:P> + <var:D0> {{ <var:P> = <nat:5> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:D1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:D1> = <var:C> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:D1> = <nat:5> * <var:C> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:D0> = <nat:8> /\ <var:P> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:P> = <nat:5> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 