\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:b> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:9> ; <var:i> := <var:p1> <var:i> := <var:i> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:b> = <var:A> $ ( assuming some positive numbers $ <var:A> $ ) ahead of executing this segment of code , it holds that we have $ <var:i> = <nat:9> \times <var:A> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:A> \} \\ <var:p1> := <var:b> ; \\ \{ <var:b> = <var:A> \land <var:p1> = <var:A> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:b> = <var:A> \land <var:p1> = <var:A> \land <var:p0> = <nat:4> \} \end{eqnarray} Continuing running the code segment yields : \begin{eqnarray} <var:p1> := <var:p1> * <nat:9> ; \\ \{ <var:b> = <var:A> \land <var:p1> = <nat:9> * <var:A> \land <var:p0> = <nat:4> \} \\ <var:i> := <var:p1> \\ \{ <var:b> = <var:A> \land <var:p0> = <nat:4> \land <var:i> = <nat:9> * <var:A> \} \\ <var:i> := <var:i> + <var:p0> \\ \{ <var:b> = <var:A> \land <var:i> = <nat:9> * <var:A> + <nat:4> \} \end{eqnarray} Applying typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p1> := <var:b> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:9> ; <var:i> := <var:p1> <var:i> := <var:i> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:b> = <var:A> }} <def:poly> {{ <var:i> = <nat:9> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:p1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:p1> = <var:A> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:p1> = <nat:9> * <var:A> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:p0> = <nat:4> /\ <var:i> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:i> = <nat:9> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 