\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:B> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:4> ; <var:y> := <var:r1> <var:y> := <var:y> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:B> = <var:c> $ prior to interpreting the series of commands it follows that we see $ <var:y> = <nat:4> * <var:c> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our series of commands is evident by Hoare logic . Honing in on the upcoming command in our code segment , we see the statement \verb | <var:r1> := <var:B> ; | . This line advances the precondition $ \{ <var:B> = <var:c> \} $ into the postcondition $ \{ <var:B> = <var:c> \land <var:r1> = <var:c> \} $ . Moving forward to the subsequent line in the series of instructions , we see the assignment line giving $ <nat:2> $ into $ <var:r0>$ . This advances the condition $ \{ <var:B> = <var:c> \land <var:r1> = <var:c> \} $ to the postcondition $ \{ <var:B> = <var:c> \land <var:r1> = <var:c> \land <var:r0> = <nat:2> \} $ . This is deduced through the assignment scheme of Hoare techniques . Taking a look at the subsequent line of code contained in the code , the line \verb | <var:r1> := <var:r1> * <nat:4> ; | . This moves $ \{ <var:B> = <var:c> \land <var:r1> = <var:c> \land <var:r0> = <nat:2> \} $ toward the condition $ \{ <var:B> = <var:c> \land <var:r1> = <nat:4> \times <var:c> \land <var:r0> = <nat:2> \} $ . This is ensured through the assignment inference rule obtained from standard Hoare reasoning . Stepping forward , we have the statement \verb | <var:y> := <var:r1> | . This command transfers $ \{ <var:B> = <var:c> \land <var:r1> = <nat:4> \times <var:c> \land <var:r0> = <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:c> \land <var:r0> = <nat:2> \land <var:y> = <nat:4> \times <var:c> \} $ . This is deduced by the assignment inference rule of standard Hoare logic . Stepping through , we see the binding code assigning $ <var:y> + <var:r0$ toward $ <var:y>$ . This code forwards $ \{ <var:B> = <var:c> \land <var:r0> = <nat:2> \land <var:y> = <nat:4> \times <var:c> \} $ into the condition $ \{ <var:B> = <var:c> \land <var:y> = <nat:4> \times <var:c> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:B> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:4> ; <var:y> := <var:r1> <var:y> := <var:y> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:B> = <var:c> }} <def:poly> {{ <var:y> = <nat:4> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:r1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:r1> = <var:c> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:r1> = <nat:4> * <var:c> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:r0> = <nat:2> /\ <var:y> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:c> /\ <var:y> = <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 