\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:3> ; <var:J> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:C> = <var:n> $ , given all positive numbers $ <var:n> $ , before running the list of instructions then we have $ <var:J> = <nat:3> $ after list of instructions is done . \end{theorem} \begin{proof} The flow of logic for this segment of code is done by Hoare logic . Considering the subsequent command contained in the set of instructions , \verb | { <var:C> = <var:n> } <var:p0> := <nat:3> { <var:C> = <var:n> \land <var:p0> = <nat:3> } | . This is given through the rule given in standard Hoare logic . Shifting focus toward the proceeding piece of code in the program , we see \verb | { <var:C> = <var:n> } <var:p0> := <nat:3> { <var:C> = <var:n> \land <var:p0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:J> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:C> = <var:n> }} <def:poly> {{ <var:J> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:J> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 