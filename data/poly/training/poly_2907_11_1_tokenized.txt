\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:b1> := <var:D> ; <var:b2> := <var:b1> * <var:D> ; <var:b3> := <var:b2> * <var:D> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:5> ; <var:b3> := <var:b3> * <nat:3> ; <var:z> := <var:b3> <var:z> := <var:z> + <var:b2> <var:z> := <var:z> + <var:b1> <var:z> := <var:z> + <var:b0> \end{verbatim} Given $ <var:D> = <var:y> $ --- given natural numbers $ <var:y> $ --- before the evaluation of the list of commands it holds that we have $ <var:z> = <nat:3> \cdot <var:y> ^ <nat:3> + <nat:5> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:9> $ after code segment is done executing . \end{theorem} \begin{proof} Observe the following decorated set of instructions . \begin{eqnarray} \{ <var:D> = <var:y> \} \\ <var:b1> := <var:D> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <var:y> \} \\ <var:b2> := <var:b1> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <var:y> \land <var:b2> = <var:y> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:D> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <var:y> \land <var:b2> = <var:y> ^ <nat:2> \land <var:b3> = <var:y> ^ <nat:3> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <var:y> \land <var:b2> = <var:y> ^ <nat:2> \land <var:b3> = <var:y> ^ <nat:3> \land <var:b0> = <nat:9> \} \\ <var:b1> := <var:b1> * <nat:4> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <nat:4> * <var:y> \land <var:b2> = <var:y> ^ <nat:2> \land <var:b3> = <var:y> ^ <nat:3> \land <var:b0> = <nat:9> \} \\ <var:b2> := <var:b2> * <nat:5> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <nat:4> * <var:y> \land <var:b2> = <nat:5> * <var:y> ^ <nat:2> \land <var:b3> = <var:y> ^ <nat:3> \land <var:b0> = <nat:9> \} \\ <var:b3> := <var:b3> * <nat:3> ; \\ \{ <var:D> = <var:y> \land <var:b1> = <nat:4> * <var:y> \land <var:b2> = <nat:5> * <var:y> ^ <nat:2> \land <var:b3> = <nat:3> * <var:y> ^ <nat:3> \land <var:b0> = <nat:9> \} \\ <var:z> := <var:b3> \\ \{ <var:D> = <var:y> \land <var:b1> = <nat:4> * <var:y> \land <var:b2> = <nat:5> * <var:y> ^ <nat:2> \land <var:b0> = <nat:9> \land <var:z> = <nat:3> * <var:y> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:b2> \\ \{ <var:D> = <var:y> \land <var:b1> = <nat:4> * <var:y> \land <var:b0> = <nat:9> \land <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:b1> \\ \{ <var:D> = <var:y> \land <var:b0> = <nat:9> \land <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:4> * <var:y> \} \\ <var:z> := <var:z> + <var:b0> \\ \{ <var:D> = <var:y> \land <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <var:b1> := <var:D> ; <var:b2> := <var:b1> * <var:D> ; <var:b3> := <var:b2> * <var:D> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:5> ; <var:b3> := <var:b3> * <nat:3> ; <var:z> := <var:b3> <var:z> := <var:z> + <var:b2> <var:z> := <var:z> + <var:b1> <var:z> := <var:z> + <var:b0> {{ <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <var:y> /\ <var:b2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <var:y> /\ <var:b2> = <var:y> ^ <nat:2> /\ <var:b3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <var:y> /\ <var:b2> = <var:y> ^ <nat:2> /\ <var:b3> = <var:y> ^ <nat:3> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <var:y> ^ <nat:2> /\ <var:b3> = <var:y> ^ <nat:3> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:b3> = <var:y> ^ <nat:3> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:y> ^ <nat:3> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:b0> = <nat:9> /\ <var:z> = <nat:3> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b0> = <nat:9> /\ <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:b0> = <nat:9> /\ <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:z> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 