\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:i> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:8> ; <var:V> := <var:U1> <var:V> := <var:V> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Given , assuming some $ <var:A> $ , that $ <var:i> = <var:A> $ prior to the evaluation of the program it must be that $ <var:V> = <nat:8> \cdot <var:A> + <nat:2> $ after program finishes . \end{theorem} \begin{proof} Proving correctness for our list of instructions is given through usual Hoare logic . Considering the following bit of code found in the set of instructions , the variable assignmet code \verb | <var:U1> := <var:i> ; | . This advances the condition $ \{ <var:i> = <var:A> \} $ as the postcondition $ \{ <var:i> = <var:A> \land <var:U1> = <var:A> \} $ . Focusing on the subsequent piece of code in the code , we have the variable assignmet code defining $ <nat:2> $ as $ <var:U0>$ . This takes the condition $ \{ <var:i> = <var:A> \land <var:U1> = <var:A> \} $ toward the postcondition $ \{ <var:i> = <var:A> \land <var:U1> = <var:A> \land <var:U0> = <nat:2> \} $ . Taking another step toward the proceeding statement seen in our program , we have the assignment command letting $ <var:U1> * <nat:8> $ as $ <var:U1>$ . This forwards $ \{ <var:i> = <var:A> \land <var:U1> = <var:A> \land <var:U0> = <nat:2> \} $ to the condition $ \{ <var:i> = <var:A> \land <var:U1> = <nat:8> \times <var:A> \land <var:U0> = <nat:2> \} $ . This is sound by the assignment scheme defined in typical Hoare techniques . Taking a look at the subsequent step found in the program , the variable update code \verb | <var:V> := <var:U1> | . This command forwards $ \{ <var:i> = <var:A> \land <var:U1> = <nat:8> \times <var:A> \land <var:U0> = <nat:2> \} $ as the postcondition $ \{ <var:i> = <var:A> \land <var:U0> = <nat:2> \land <var:V> = <nat:8> \times <var:A> \} $ . This is shown by the assignment inference rule given by standard Hoare techniques . Further , the line yielding $ <var:V> + <var:U0$ into $ <var:V>$ . This takes $ \{ <var:i> = <var:A> \land <var:U0> = <nat:2> \land <var:V> = <nat:8> \times <var:A> \} $ as the postcondition $ \{ <var:i> = <var:A> \land <var:V> = <nat:8> \times <var:A> + <nat:2> \} $ . This is sound with the assignment inference rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:i> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:8> ; <var:V> := <var:U1> <var:V> := <var:V> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:i> = <var:A> }} <def:poly> {{ <var:V> = <nat:8> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:U1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:U1> = <var:A> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:U1> = <nat:8> * <var:A> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:U0> = <nat:2> /\ <var:V> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:V> = <nat:8> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 