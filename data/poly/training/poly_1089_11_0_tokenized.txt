\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:m0> := <nat:4> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:B> ; <var:m2> := <var:m2> * <var:B> ; <var:m3> := <nat:8> ; <var:m3> := <var:m3> * <var:B> ; <var:m3> := <var:m3> * <var:B> ; <var:m3> := <var:m3> * <var:B> ; <var:H> := <var:m3> ; <var:H> := <var:H> + <var:m2> ; <var:H> := <var:H> + <var:m0> \end{verbatim} Allow that $ <var:B> = <var:l> $ prior to the evaluation of the code segment it holds that we see $ <var:H> = <nat:8> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:4> $ once list of commands exits . \end{theorem} \begin{proof} The flow of logic for our set of commands can be shown with Hoare reasoning . Further , we see the variable update statement \verb | <var:m0> := <nat:4> ; | . This line takes $ \{ <var:B> = <var:l> \} $ toward the condition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \} $ . Going to the next step , we have the variable binding statement \verb | <var:m2> := <nat:2> ; | . This transfers $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \} $ into $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \} $ . This is guaranteed with the assignment rule given in standard Hoare logic . Moving onward , we see the variable binding command \verb | <var:m2> := <var:m2> * <var:B> ; | . This code redefines $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> \} $ . Paying attention to the upcoming piece of code found in the code , we see the variable update statement assigning $ <var:m2> * <var:B> $ toward $ <var:m2>$ . This command advances the precondition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> \} $ into $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \} $ . This is sound using the assignment inference rule found in typical Hoare reasoning . Advancing to the proceeding statement in our list of instructions , we see the assignment command \verb | <var:m3> := <nat:8> ; | . This takes $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \} $ toward the condition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \} $ . This is ensured with the assignment rule found in typical Hoare logic . Observing the subsequent command seen in our series of commands , we see the variable update command binding $ <var:m3> * <var:B> $ into $ <var:m3>$ . This command takes the precondition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \} $ into $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \times <var:l> \} $ . Moving onward , we have the variable update command binding $ <var:m3> * <var:B> $ as $ <var:m3>$ . This command forwards $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \times <var:l> \} $ toward $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \times <var:l> ^ <nat:2> \} $ . This is given with the assignment rule found in standard Hoare techniques . Keeping momentum , we have the variable binding statement \verb | <var:m3> := <var:m3> * <var:B> ; | . This redefines $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \times <var:l> ^ <nat:2> \} $ to the postcondition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \times <var:l> ^ <nat:3> \} $ . Next , we see the variable binding line \verb | <var:H> := <var:m3> ; | . This command forwards the condition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:m3> = <nat:8> \times <var:l> ^ <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:H> = <nat:8> \times <var:l> ^ <nat:3> \} $ . Focusing on the subsequent step seen in the set of instructions , the assignment code \verb | <var:H> := <var:H> + <var:m2> ; | . This command transfers the condition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:m2> = <nat:2> \times <var:l> ^ <nat:2> \land <var:H> = <nat:8> \times <var:l> ^ <nat:3> \} $ to $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:H> = <nat:8> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> \} $ . This is rigorously given using the assignment law defined in standard Hoare reasoning . After , we have the binding line letting $ <var:H> + <var:m0$ as $ <var:H>$ . This takes the precondition $ \{ <var:B> = <var:l> \land <var:m0> = <nat:4> \land <var:H> = <nat:8> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> \} $ to the condition $ \{ <var:B> = <var:l> \land <var:H> = <nat:8> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:4> \} $ . This is deduced by the assignment law obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:B> = <var:l> }} <var:m0> := <nat:4> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:B> ; <var:m2> := <var:m2> * <var:B> ; <var:m3> := <nat:8> ; <var:m3> := <var:m3> * <var:B> ; <var:m3> := <var:m3> * <var:B> ; <var:m3> := <var:m3> * <var:B> ; <var:H> := <var:m3> ; <var:H> := <var:H> + <var:m2> ; <var:H> := <var:H> + <var:m0> {{ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:m3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:m2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:m0> = <nat:4> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 