\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:103> + <var:P> \cdot <nat:480> + <nat:234> \cdot <var:m> + <var:t> \cdot <nat:470> + <nat:230> \cdot <var:M> + <nat:390> \cdot <var:k> + <var:Q> \cdot <nat:132> + <var:w> \cdot <nat:292> + <var:L> \cdot <nat:34> $ is guaranteed to be odd assuming every $ <var:Q> $ , $ <var:M> $ , $ <var:P> $ , $ <var:m> $ , $ <var:t> $ , $ <var:L> $ , $ <var:k> $ , and $ <var:w> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} Take note the terms $ <nat:234> \cdot <var:m> $ , $ <var:Q> \cdot <nat:132> $ , $ <var:L> \cdot <nat:34> $ , $ <var:t> \cdot <nat:470> $ , $ <nat:480> \cdot <var:P> $ , $ <nat:230> \cdot <var:M> $ , plus $ <nat:292> \cdot <var:w> $ are clearly even . This holds by reason that taking the product between an even number and any number in $ \mathbb{N} $ will be an even positive integer . Building on , recall the term $ <var:k> \cdot <nat:390> $ is clearly an even number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:M> <var:P> <var:m> <var:t> <var:L> <var:k> <var:w> : nat , Nat . odd ( <nat:480> * <var:P> + <nat:234> * <var:m> + <nat:470> * <var:t> + <nat:230> * <var:M> + <nat:390> * <var:k> + <nat:132> * <var:Q> + <nat:292> * <var:w> + <nat:34> * <var:L> + <nat:103> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:234> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:470> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 