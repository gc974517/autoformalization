\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some unknowns $ <var:u> $ , $ <var:y> $ , $ <var:T> $ , $ <var:C> $ , $ <var:j> $ , $ <var:H> $ , $ <var:X> $ , $ <var:E> $ , and $ <var:l> $ the formula $ <nat:263> + <var:T> \times <nat:52> + <var:l> \times <nat:400> + <nat:198> \times <var:u> + <nat:424> \times <var:H> + <var:y> \times <nat:434> + <var:X> \times <nat:66> + <nat:56> \times <var:E> + <nat:266> \times <var:C> + <nat:22> \times <var:j> $ is odd . \end{theorem} \begin{proof} It can be verified that the lemma holds . We know that $ <nat:263> $ is clearly odd . Recall that the whole numbers $ <nat:424> $ , $ <nat:434> $ , and also $ <nat:56> $ are known as even Adding on , the leading terms $ <nat:66> $ as well as $ <nat:52> $ are known as even Remember that the coefficient $ <nat:22> $ is clearly an even positive integer Furthermore , the number $ <nat:400> $ is trivially an even number in $ \mathbb{N} $ On top of this , the leading term $ <nat:266> $ is obviously even Observe the positive integer $ <nat:198> $ is known to be even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:y> <var:T> <var:C> <var:j> <var:H> <var:X> <var:E> <var:l> : nat , Nat . odd ( <nat:52> * <var:T> + <nat:400> * <var:l> + <nat:198> * <var:u> + <nat:424> * <var:H> + <nat:434> * <var:y> + <nat:66> * <var:X> + <nat:56> * <var:E> + <nat:266> * <var:C> + <nat:22> * <var:j> + <nat:263> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:263> = true ) . { auto . } assert ( <genH> : Nat . even <nat:424> = true ) . { auto . } assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:22> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 