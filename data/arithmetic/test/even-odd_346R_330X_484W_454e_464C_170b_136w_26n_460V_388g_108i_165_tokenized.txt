\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every unknowns $ <var:w> $ , $ <var:X> $ , $ <var:C> $ , $ <var:R> $ , $ <var:g> $ , $ <var:b> $ , $ <var:n> $ , $ <var:W> $ , $ <var:i> $ , $ <var:e> $ , and $ <var:V> $ the expression $ <var:R> * <nat:346> + <nat:330> * <var:X> + <var:W> * <nat:484> + <nat:454> * <var:e> + <nat:464> * <var:C> + <var:b> * <nat:170> + <nat:165> + <var:w> * <nat:136> + <nat:26> * <var:n> + <var:V> * <nat:460> + <var:g> * <nat:388> + <nat:108> * <var:i> $ is odd . \end{theorem} \begin{proof} The whole numbers $ <nat:388> $ , $ <nat:346> $ , $ <nat:108> $ , $ <nat:330> $ , $ <nat:170> $ , $ <nat:464> $ , $ <nat:460> $ , $ <nat:26> $ , $ <nat:484> $ , plus $ <nat:136> $ are known as even numbers in $ \mathbb{N} $ In addition to this , remember the integer $ <nat:454> $ is clearly even The adding between even naturals together and an odd number is guaranteed to be odd . Remember $ <nat:165> $ is trivially an odd integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:X> <var:C> <var:R> <var:g> <var:b> <var:n> <var:W> <var:i> <var:e> <var:V> : nat , Nat . odd ( <nat:346> * <var:R> + <nat:330> * <var:X> + <nat:484> * <var:W> + <nat:454> * <var:e> + <nat:464> * <var:C> + <nat:170> * <var:b> + <nat:136> * <var:w> + <nat:26> * <var:n> + <nat:460> * <var:V> + <nat:388> * <var:g> + <nat:108> * <var:i> + <nat:165> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:108> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:165> = true ) . { auto . } repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 