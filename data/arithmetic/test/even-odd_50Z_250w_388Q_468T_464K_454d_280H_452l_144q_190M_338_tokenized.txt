\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Z> * <nat:50> + <nat:250> * <var:w> + <nat:388> * <var:Q> + <var:T> * <nat:468> + <nat:464> * <var:K> + <nat:454> * <var:d> + <nat:280> * <var:H> + <nat:452> * <var:l> + <nat:338> + <var:q> * <nat:144> + <nat:190> * <var:M> $ will be even given $ <var:T> $ , $ <var:d> $ , $ <var:q> $ , $ <var:l> $ , $ <var:M> $ , $ <var:H> $ , $ <var:K> $ , $ <var:Z> $ , $ <var:Q> $ , and $ <var:w> \in \mathbb{N} $ . \end{theorem} \begin{proof} The leading terms $ <nat:50> $ , $ <nat:250> $ , $ <nat:388> $ , $ <nat:468> $ , $ <nat:464> $ , $ <nat:454> $ , $ <nat:280> $ , $ <nat:452> $ , $ <nat:144> $ , and $ <nat:190> $ are obviously even . Hence , the terms $ <var:Z> * <nat:50> $ , $ <var:w> * <nat:250> $ , $ <nat:388> * <var:Q> $ , $ <var:T> * <nat:468> $ , $ <nat:464> * <var:K> $ , $ <nat:454> * <var:d> $ , $ <nat:280> * <var:H> $ , $ <nat:452> * <var:l> $ , $ <nat:144> * <var:q> $ , additionally $ <nat:190> * <var:M> $ is even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:d> <var:q> <var:l> <var:M> <var:H> <var:K> <var:Z> <var:Q> <var:w> : nat , Nat . even ( <nat:50> * <var:Z> + <nat:250> * <var:w> + <nat:388> * <var:Q> + <nat:468> * <var:T> + <nat:464> * <var:K> + <nat:454> * <var:d> + <nat:280> * <var:H> + <nat:452> * <var:l> + <nat:144> * <var:q> + <nat:190> * <var:M> + <nat:338> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 