\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Granted that we get satisfying the condition that $ <var:M> $ , $ <var:l> $ , $ <var:N> $ , $ <var:j> $ , $ <var:y> $ , and $ <var:m> > <nat:1> $ where using $ <var:K> \in \mathbb{Z}^+ $ , $ <var:y> * <var:l> * <var:m> * <var:M> * <var:N> * <var:j> = <var:K> $ , take as given that $ <var:K> $ is a <def:six-composite> natural number with some numbers $ <var:N> $ , $ <var:M> $ , $ <var:y> $ , $ <var:j> $ , $ <var:m> $ , $ <var:l> $ . \end{definition} \begin{theorem} The integer <nat:120120> is a <def:six-composite> integer . \end{theorem} \begin{proof} Recollect that a <def:six-composite> integer is the product of whole numbers $ <var:M> $ , $ <var:N> $ , $ <var:y> $ , $ <var:m> $ , $ <var:j> $ and $ <var:l> $ larger than <nat:1> . We confirm <nat:120120> is a <def:six-composite> natural number . Notice that $ <nat:6> $ , $ <nat:11> $ , $ <nat:13> $ , $ <nat:10> $ , $ <nat:7> $ , $ <nat:2> > <nat:1> $ . Furthermore notice also $ <nat:120120> = <var:j> * <var:m> * <var:N> * <var:l> * <var:M> * <var:y> $ gives $ <var:m> = <nat:6> $ , $ <var:y> = <nat:10> $ , $ <var:N> = <nat:13> $ , $ <var:M> = <nat:2> $ , $ <var:j> = <nat:7> $ and $ <var:l> = <nat:11> $ . This implies <nat:120120> is a <def:six-composite> whole number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:K> : nat ) := exists <var:N> <var:M> <var:y> <var:j> <var:m> <var:l> : nat , ( <var:M> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:N> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:y> * <var:l> * <var:m> * <var:M> * <var:N> * <var:j> = <var:K> ) . Theorem <genP:1> : <def:six-composite> <nat:120120> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } exists <nat:13> . exists <nat:2> . exists <nat:10> . exists <nat:7> . exists <nat:6> . exists <nat:11> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 