\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:451> + <nat:10> \times <var:C> + <nat:66> \times <var:b> + <nat:130> \times <var:d> + <var:H> \times <nat:248> + <nat:480> \times <var:Z> + <var:T> \times <nat:274> $ is guaranteed to be odd . \end{theorem} \begin{proof} The natural number $ <nat:130> $ is trivially an even natural number . So , $ <var:d> <nat:130> $ is guaranteed to be even additionally . Building on , $ <nat:480> <var:Z> $ is even as a consequence that the product between an even positive integer and some natural number will be even , which is true as a consequence that the positive integer $ <nat:480> $ is guaranteed to be an even element of $ \mathbb{Z}^+ $ . In addition to this , notice the term $ <nat:248> <var:H> $ is known to be even . This is proven from the fact the product between an even integer with a integer is even , and must be true because the integer $ <nat:248> $ is guaranteed to be an even number . On top of this , $ <nat:66> <var:b> $ is obviously even since the positive integer $ <nat:66> $ is known to be even . The coefficient $ <nat:10> $ is even . Accordingly , the term $ <nat:10> <var:C> $ will be even in addition . Building on , see $ <nat:274> <var:T> $ is known as an even natural number . This fact is true from the fact the coefficient $ <nat:274> $ is clearly even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:b> <var:d> <var:H> <var:Z> <var:T> : nat , Nat . odd ( <nat:10> * <var:C> + <nat:66> * <var:b> + <nat:130> * <var:d> + <nat:248> * <var:H> + <nat:480> * <var:Z> + <nat:274> * <var:T> + <nat:451> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 