\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:f> $ , $ <var:t> $ , $ <var:G> $ , $ <var:U> $ , $ <var:a> $ , $ <var:v> $ , $ <var:i> $ , $ <var:m> $ , $ <var:c> $ , $ <var:K> $ , $ <var:d> \in \mathbb{N} $ . Say that some whole number $ <var:S> $ is defined as a <def:eleven-composite> whole number if $ <var:S> = <var:a> \times <var:U> \times <var:i> \times <var:t> \times <var:f> \times <var:v> \times <var:K> \times <var:d> \times <var:m> \times <var:G> \times <var:c> $ as well as terms are more than <nat:1> . Therefore the positive integer <nat:518918400> is a <def:eleven-composite> positive integer . \end{theorem} \begin{proof} Note $ <nat:6> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:13> $ , $ <nat:8> $ , $ <nat:9> $ , $ <nat:4> $ , $ <nat:10> $ , $ <nat:5> $ , $ <nat:2> > <nat:1> $ . In addition note as well $ <nat:9> \cdot <nat:11> \cdot <nat:8> \cdot <nat:2> \cdot <nat:5> \cdot <nat:7> \cdot <nat:3> \cdot <nat:10> \cdot <nat:6> \cdot <nat:4> \cdot <nat:13> = <nat:518918400> = <var:i> \cdot <var:U> \cdot <var:f> \cdot <var:G> \cdot <var:c> \cdot <var:d> \cdot <var:a> \cdot <var:t> \cdot <var:v> \cdot <var:m> \cdot <var:K> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eleven-composite> ( <var:S> : nat ) := exists <var:f> <var:t> <var:G> <var:U> <var:a> <var:v> <var:i> <var:m> <var:c> <var:K> <var:d> : nat , ( <var:S> = <var:a> * <var:U> * <var:i> * <var:t> * <var:f> * <var:v> * <var:K> * <var:d> * <var:m> * <var:G> * <var:c> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:t> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:K> > <nat:1> ) /\ ( <var:d> > <nat:1> ) . Theorem <genP:1> : <def:eleven-composite> <nat:518918400> . Proof . unfold <def:eleven-composite> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } exists <nat:8> . exists <nat:10> . exists <nat:2> . exists <nat:11> . exists <nat:3> . exists <nat:6> . exists <nat:9> . exists <nat:4> . exists <nat:5> . exists <nat:13> . exists <nat:7> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 