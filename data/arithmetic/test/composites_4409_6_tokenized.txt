\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We assume that $ <var:R> $ is a <def:six-composite> whole number if and only if $ \exists <var:a> $ , $ <var:q> $ , $ <var:w> $ , $ <var:g> $ , $ <var:z> $ , $ <var:U> \in \mathbb{N} $ satisfying the condition that $ <var:U> $ , $ <var:w> $ , $ <var:z> $ , $ <var:g> $ , $ <var:q> $ , and $ <var:a> \geq <nat:2> $ plus assuming $ <var:R> \in \mathbb{N} $ , $ <var:a> * <var:g> * <var:z> * <var:q> * <var:U> * <var:w> = <var:R> $ . \end{definition} \begin{theorem} The integer <nat:202176> is a <def:six-composite> number . \end{theorem} \begin{proof} Remember that <nat:202176> is <def:six-composite> if <nat:202176> is the multiplication between whole numbers $ <var:z> $ , $ <var:U> $ , $ <var:w> $ , $ <var:g> $ , $ <var:a> $ , $ <var:q> $ greater than or equal to <nat:2> . We present <nat:202176> is a <def:six-composite> natural number . We demonstrate <nat:202176> is a <def:six-composite> natural number as $ <nat:3> \cdot <nat:9> \cdot <nat:6> \cdot <nat:8> \cdot <nat:13> \cdot <nat:12> = <nat:202176> $ and in consideration of $ <nat:3> $ , $ <nat:6> $ , $ <nat:8> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:13> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:R> : nat ) := exists <var:a> <var:q> <var:w> <var:g> <var:z> <var:U> : nat , ( <var:U> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:a> * <var:g> * <var:z> * <var:q> * <var:U> * <var:w> = <var:R> ) . Theorem <genP:1> : <def:six-composite> <nat:202176> . Proof . unfold <def:six-composite> . exists <nat:3> . exists <nat:12> . exists <nat:13> . exists <nat:6> . exists <nat:9> . exists <nat:8> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 