\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:317> + <var:T> * <nat:204> + <nat:320> * <var:Z> + <nat:442> * <var:j> + <nat:116> * <var:e> + <var:L> * <nat:22> + <var:z> * <nat:362> + <var:t> * <nat:100> + <nat:330> * <var:b> + <nat:458> * <var:y> + <var:f> * <nat:256> $ is odd for unknowns $ <var:f> $ , $ <var:y> $ , $ <var:j> $ , $ <var:z> $ , $ <var:L> $ , $ <var:T> $ , $ <var:t> $ , $ <var:b> $ , $ <var:Z> $ , and $ <var:e> $ . \end{theorem} \begin{proof} The terms $ <nat:330> \times <var:b> $ , $ <var:T> \times <nat:204> $ , $ <nat:458> \times <var:y> $ , $ <var:e> \times <nat:116> $ , $ <var:t> \times <nat:100> $ , $ <var:f> \times <nat:256> $ , $ <nat:22> \times <var:L> $ , $ <nat:362> \times <var:z> $ , in addition to $ <nat:320> \times <var:Z> $ are known as even . $ <nat:442> \times <var:j> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:y> <var:j> <var:z> <var:L> <var:T> <var:t> <var:b> <var:Z> <var:e> : nat , Nat . odd ( <nat:204> * <var:T> + <nat:320> * <var:Z> + <nat:442> * <var:j> + <nat:116> * <var:e> + <nat:22> * <var:L> + <nat:362> * <var:z> + <nat:100> * <var:t> + <nat:330> * <var:b> + <nat:458> * <var:y> + <nat:256> * <var:f> + <nat:317> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:330> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 