\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given that there are $ <var:g> $ , $ <var:h> $ , $ <var:J> $ , $ <var:L> $ , $ <var:G> $ , $ <var:w> \in \mathbb{N} $ then we define that some integer $ <var:j> $ will be named a <def:six-composite> integer given $ <var:w> * <var:G> * <var:J> * <var:h> * <var:L> * <var:g> = <var:j> $ and unique factors are greater than <nat:1> . Thus the whole number <nat:36960> is a <def:six-composite> positive integer . \end{theorem} \begin{proof} Recall that <nat:36960> is a <def:six-composite> natural number iff <nat:36960> is the product between $ <var:G> $ , $ <var:w> $ , $ <var:g> $ , $ <var:h> $ , $ <var:L> $ , $ <var:J> $ satisfying the condition that $ <var:h> $ , $ <var:G> $ , $ <var:L> $ , $ <var:J> $ , $ <var:g> $ , $ <var:w> > <nat:1> $ . Observe that $ <nat:2> \cdot <nat:8> \cdot <nat:11> \cdot <nat:7> \cdot <nat:3> \cdot <nat:10> = <nat:36960> $ . Furthermore notice that $ <nat:3> $ , $ <nat:2> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:8> $ , and $ <nat:7> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:j> : nat ) := exists <var:g> <var:h> <var:J> <var:L> <var:G> <var:w> : nat , ( <var:w> * <var:G> * <var:J> * <var:h> * <var:L> * <var:g> = <var:j> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:w> > <nat:1> ) . Theorem <genP:1> : <def:six-composite> <nat:36960> . Proof . unfold <def:six-composite> . exists <nat:8> . exists <nat:2> . exists <nat:3> . exists <nat:7> . exists <nat:11> . exists <nat:10> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 