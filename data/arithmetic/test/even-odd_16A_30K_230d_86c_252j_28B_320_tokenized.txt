\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:320> + <var:A> <nat:16> + <nat:230> <var:d> + <var:B> <nat:28> + <nat:86> <var:c> + <nat:252> <var:j> + <var:K> <nat:30> $ is even with some variables $ <var:A> $ , $ <var:j> $ , $ <var:c> $ , $ <var:d> $ , $ <var:K> $ , and $ <var:B> $ . \end{theorem} \begin{proof} We apply that the formula $ <var:A> <nat:16> + <nat:30> <var:K> + <var:d> <nat:230> + <var:c> <nat:86> + <var:j> <nat:252> + <nat:28> <var:B> $ is clearly even , as a consequence that multiplying between even positive integers must be even . The number $ <nat:86> $ is guaranteed to be even The natural numbers $ <nat:16> $ , $ <nat:230> $ , as well as $ <nat:30> $ are trivially even integers The integer $ <nat:28> $ is an even number Furthermore , recall that the positive integer $ <nat:252> $ is obviously an even number in $ \mathbb{Z}^+ $ Since the summing of an even number in $ \mathbb{Z}^+ $ with an even number in $ \mathbb{N} $ will be even , The totaling of an even natural number and an even natural is guaranteed to be even . Thus , this theorem holds . See that $ <nat:320> $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:j> <var:c> <var:d> <var:K> <var:B> : nat , Nat . even ( <nat:16> * <var:A> + <nat:230> * <var:d> + <nat:28> * <var:B> + <nat:86> * <var:c> + <nat:252> * <var:j> + <nat:30> * <var:K> + <nat:320> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:A> + <nat:230> * <var:d> + <nat:28> * <var:B> + <nat:86> * <var:c> + <nat:252> * <var:j> + <nat:30> * <var:K> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } rewrite <genH> . rewrite <genH> . auto . Qed . 