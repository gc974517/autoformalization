\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Given that there are $ <var:Z> $ , $ <var:h> $ , $ <var:B> $ , $ <var:b> $ , $ <var:J> $ , $ <var:z> \in \mathbb{N} $ then let that some integer $ <var:o> $ is named a <def:six-composite> positive integer if $ <var:J> \times <var:b> \times <var:z> \times <var:h> \times <var:B> \times <var:Z> = <var:o> $ and unique factors are greater than <nat:1> . \end{definition} \begin{theorem} The positive integer <nat:147420> is a <def:six-composite> number . \end{theorem} \begin{proof} Recollect that <nat:147420> is a <def:six-composite> number wherever <nat:147420> is the multiplication between numbers $ <var:b> $ , $ <var:h> $ , $ <var:z> $ , $ <var:J> $ , $ <var:Z> $ , $ <var:B> $ satisfying the condition that $ <var:h> $ , $ <var:b> $ , $ <var:z> $ , $ <var:B> $ , $ <var:J> $ , $ <var:Z> > <nat:1> $ . Notice that $ <var:h> * <var:z> * <var:b> * <var:B> * <var:Z> * <var:J> = <nat:147420> $ suggests $ <var:Z> = <nat:9> $ , $ <var:B> = <nat:5> $ , $ <var:b> = <nat:12> $ , $ <var:J> = <nat:7> $ , $ <var:h> = <nat:13> $ , $ <var:z> = <nat:3> $ . Similarly notice $ <nat:7> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:3> $ and $ <nat:13> $ are more than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:o> : nat ) := exists <var:Z> <var:h> <var:B> <var:b> <var:J> <var:z> : nat , ( <var:J> * <var:b> * <var:z> * <var:h> * <var:B> * <var:Z> = <var:o> ) /\ ( <var:Z> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:B> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:z> > <nat:1> ) . Theorem <genP:1> : <def:six-composite> <nat:147420> . Proof . unfold <def:six-composite> . exists <nat:9> . exists <nat:13> . exists <nat:5> . exists <nat:12> . exists <nat:7> . exists <nat:3> . assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 