\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:c> $ , $ <var:V> $ , $ <var:U> $ , $ <var:n> $ , $ <var:A> $ , $ <var:t> $ , $ <var:P> $ , $ <var:y> $ , $ <var:C> $ as whole numbers . We assume that some positive integer $ <var:l> $ is defined to be a <def:nine-composite> integer given $ <var:l> = <var:t> * <var:U> * <var:y> * <var:c> * <var:P> * <var:C> * <var:A> * <var:V> * <var:n> $ plus terms are more than <nat:1> . Hence the positive integer <nat:11793600> is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Recollect that <nat:11793600> is a <def:nine-composite> positive integer iff <nat:11793600> is the multiplication of positive integers $ <var:P> $ , $ <var:t> $ , $ <var:A> $ , $ <var:n> $ , $ <var:U> $ , $ <var:C> $ , $ <var:V> $ , $ <var:y> $ and $ <var:c> $ such that $ <var:C> $ , $ <var:A> $ , $ <var:t> $ , $ <var:y> $ , $ <var:V> $ , $ <var:P> $ , $ <var:n> $ , $ <var:c> $ and $ <var:U> > <nat:1> $ . Take $ <var:C> = <nat:8> $ , $ <var:n> = <nat:10> $ , $ <var:U> = <nat:3> $ , $ <var:A> = <nat:5> $ , $ <var:t> = <nat:13> $ , $ <var:V> = <nat:9> $ , $ <var:c> = <nat:7> $ , $ <var:P> = <nat:6> $ , $ <var:y> = <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:l> : nat ) := exists <var:c> <var:V> <var:U> <var:n> <var:A> <var:t> <var:P> <var:y> <var:C> : nat , ( <var:l> = <var:t> * <var:U> * <var:y> * <var:c> * <var:P> * <var:C> * <var:A> * <var:V> * <var:n> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:t> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:C> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:11793600> . Proof . unfold <def:nine-composite> . exists <nat:7> . exists <nat:9> . exists <nat:3> . exists <nat:10> . exists <nat:5> . exists <nat:13> . exists <nat:6> . exists <nat:2> . exists <nat:8> . repeat split . all : lia . Qed . 