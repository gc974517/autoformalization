\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:65> + <var:P> * <nat:186> + <nat:154> * <var:d> + <nat:128> * <var:y> + <var:o> * <nat:410> + <var:e> * <nat:400> + <nat:14> * <var:T> + <var:Y> * <nat:28> + <nat:268> * <var:p> + <nat:386> * <var:j> + <var:H> * <nat:156> $ is guaranteed to be odd . \end{theorem} \begin{proof} The adding between even integers with an odd number is odd . Remember that $ <nat:65> $ is clearly odd . Additionally , the coefficients $ <nat:186> $ , $ <nat:154> $ , $ <nat:128> $ , $ <nat:410> $ , $ <nat:400> $ , $ <nat:14> $ , $ <nat:28> $ , $ <nat:268> $ , $ <nat:386> $ , plus $ <nat:156> $ are clearly even . Thus , the pairs $ <var:P> * <nat:186> $ , $ <nat:154> * <var:d> $ , $ <nat:128> * <var:y> $ , $ <nat:410> * <var:o> $ , $ <var:e> * <nat:400> $ , $ <nat:14> * <var:T> $ , $ <nat:28> * <var:Y> $ , $ <nat:268> * <var:p> $ , $ <var:j> * <nat:386> $ , and also $ <var:H> * <nat:156> $ must be even at the same time . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:d> <var:y> <var:o> <var:e> <var:T> <var:Y> <var:p> <var:j> <var:H> : nat , Nat . odd ( <nat:186> * <var:P> + <nat:154> * <var:d> + <nat:128> * <var:y> + <nat:410> * <var:o> + <nat:400> * <var:e> + <nat:14> * <var:T> + <nat:28> * <var:Y> + <nat:268> * <var:p> + <nat:386> * <var:j> + <nat:156> * <var:H> + <nat:65> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:65> = true ) . { auto . } assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 