\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} When $ \exists <var:U> $ , $ <var:Z> $ , $ <var:q> $ , $ <var:b> $ , $ <var:p> $ , $ <var:r> \in \mathbb{Z}^+ $ then take as given that $ <var:D> \in \mathbb{N} $ will be considered a <def:six-composite> natural number assuming $ <var:r> * <var:Z> * <var:b> * <var:U> * <var:p> * <var:q> = <var:D> $ as well as unique terms are larger than or equivalent to <nat:2> . For this reason <nat:7560> is a <def:six-composite> positive integer . \end{theorem} \begin{proof} Allow $ <var:r> = <nat:5> $ , $ <var:Z> = <nat:2> $ , $ <var:b> = <nat:4> $ , $ <var:p> = <nat:7> $ , $ <var:U> = <nat:3> $ and $ <var:q> = <nat:9> $ . Notice $ <var:p> = <nat:7> $ , $ <var:r> = <nat:5> $ , $ <var:q> = <nat:9> $ , $ <var:Z> = <nat:2> $ , $ <var:b> = <nat:4> $ , and $ <var:U> = <nat:3> \geq <nat:2> $ . Moreover notice moreover $ <var:q> \times <var:U> \times <var:b> \times <var:r> \times <var:p> \times <var:Z> = <nat:9> \times <nat:3> \times <nat:4> \times <nat:5> \times <nat:7> \times <nat:2> = <nat:7560> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:D> : nat ) := exists <var:U> <var:Z> <var:q> <var:b> <var:p> <var:r> : nat , ( <var:r> * <var:Z> * <var:b> * <var:U> * <var:p> * <var:q> = <var:D> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:7560> . Proof . unfold <def:six-composite> . exists <nat:3> . exists <nat:2> . exists <nat:9> . exists <nat:4> . exists <nat:7> . exists <nat:5> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 