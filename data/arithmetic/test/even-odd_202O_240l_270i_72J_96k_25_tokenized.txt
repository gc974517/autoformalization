\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:J> * <nat:72> + <nat:96> * <var:k> + <nat:25> + <var:O> * <nat:202> + <var:l> * <nat:240> + <nat:270> * <var:i> $ must be odd assuming any $ <var:J> $ , $ <var:i> $ , $ <var:k> $ , $ <var:l> $ , and $ <var:O> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} Remember that $ <nat:240> \cdot <var:l> + <var:O> \cdot <nat:202> + <nat:96> \cdot <var:k> + <var:J> \cdot <nat:72> + <nat:270> \cdot <var:i> $ is known to be even . Take note that the coefficients $ <nat:72> $ , $ <nat:202> $ , and also $ <nat:96> $ are trivially even whole numbers Furthermore , the coefficient $ <nat:240> $ is clearly an even element of $ \mathbb{N} $ Notice that the whole number $ <nat:270> $ is known to be an even positive integer By reason that the addition between even numbers with even whole numbers is guaranteed to be even , $ <nat:202> \times <var:O> + <nat:240> \times <var:l> + <var:i> \times <nat:270> + <var:J> \times <nat:72> + <nat:96> \times <var:k> $ must be even . Take note that the addition between an even positive integer and an odd whole number must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:i> <var:k> <var:l> <var:O> : nat , Nat . odd ( <nat:72> * <var:J> + <nat:96> * <var:k> + <nat:202> * <var:O> + <nat:240> * <var:l> + <nat:270> * <var:i> + <nat:25> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:J> + <nat:96> * <var:k> + <nat:202> * <var:O> + <nat:240> * <var:l> + <nat:270> * <var:i> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 