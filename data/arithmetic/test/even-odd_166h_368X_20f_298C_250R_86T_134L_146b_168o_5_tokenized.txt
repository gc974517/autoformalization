\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:250> \times <var:R> + <nat:5> + <nat:134> \times <var:L> + <var:o> \times <nat:168> + <var:X> \times <nat:368> + <nat:20> \times <var:f> + <var:b> \times <nat:146> + <nat:298> \times <var:C> + <var:T> \times <nat:86> + <var:h> \times <nat:166> $ is guaranteed to be odd given every variables $ <var:o> $ , $ <var:b> $ , $ <var:C> $ , $ <var:L> $ , $ <var:h> $ , $ <var:R> $ , $ <var:X> $ , $ <var:T> $ , and $ <var:f> $ . \end{theorem} \begin{proof} We use the assumption that the formula $ <nat:146> \times <var:b> + <nat:166> \times <var:h> + <var:f> \times <nat:20> + <var:X> \times <nat:368> + <nat:168> \times <var:o> + <var:T> \times <nat:86> + <nat:298> \times <var:C> + <var:L> \times <nat:134> + <var:R> \times <nat:250> $ is trivially even . The products $ <nat:168> <var:o> $ , $ <var:L> <nat:134> $ , $ <nat:368> <var:X> $ , $ <nat:250> <var:R> $ , $ <var:b> <nat:146> $ , and likewise $ <var:C> <nat:298> $ are obviously even positive integers . On top of this , recall the pairs $ <nat:166> <var:h> $ in addition to $ <var:f> <nat:20> $ are guaranteed to be even naturals as a consequence that taking the product of an even number with a element of $ \mathbb{Z}^+ $ is guaranteed to be in itself an even positive integer . In addition to this , the pair $ <var:T> <nat:86> $ is an even integer . This claim is proven as a consequence that taking the product between an even positive integer with a integer is even . The summation $ <var:o> * <nat:168> + <nat:368> * <var:X> + <nat:250> * <var:R> + <var:h> * <nat:166> + <nat:146> * <var:b> + <nat:20> * <var:f> + <nat:134> * <var:L> + <nat:298> * <var:C> + <var:T> * <nat:86> $ must be even from the fact the adding between even numbers and even naturals will be even . Observe that $ <nat:5> $ is known as odd . From the knowledge the totaling of an even number in $ \mathbb{Z}^+ $ with an odd element of $ \mathbb{Z}^+ $ must be odd , as a consequence $ <var:h> \times <nat:166> + <var:X> \times <nat:368> + <var:f> \times <nat:20> + <nat:298> \times <var:C> + <nat:250> \times <var:R> + <nat:86> \times <var:T> + <var:L> \times <nat:134> + <nat:5> + <var:b> \times <nat:146> + <nat:168> \times <var:o> $ by its very nature must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:b> <var:C> <var:L> <var:h> <var:R> <var:X> <var:T> <var:f> : nat , Nat . odd ( <nat:250> * <var:R> + <nat:134> * <var:L> + <nat:168> * <var:o> + <nat:368> * <var:X> + <nat:20> * <var:f> + <nat:146> * <var:b> + <nat:298> * <var:C> + <nat:86> * <var:T> + <nat:166> * <var:h> + <nat:5> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:168> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:R> + <nat:134> * <var:L> + <nat:168> * <var:o> + <nat:368> * <var:X> + <nat:20> * <var:f> + <nat:146> * <var:b> + <nat:298> * <var:C> + <nat:86> * <var:T> + <nat:166> * <var:h> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:5> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 