\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:296> <var:Q> + <var:V> <nat:148> + <nat:471> + <nat:276> <var:c> + <var:h> <nat:388> $ is odd taking some $ <var:V> $ , $ <var:h> $ , $ <var:Q> $ , and $ <var:c> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} We justify that the sum $ <nat:471> + <nat:148> \cdot <var:V> + <var:h> \cdot <nat:388> + <var:c> \cdot <nat:276> + <var:Q> \cdot <nat:296> $ is trivially odd since $ <var:c> \cdot <nat:276> + <var:V> \cdot <nat:148> + <nat:388> \cdot <var:h> + <nat:296> \cdot <var:Q> $ is even . The terms $ <nat:276> \cdot <var:c> $ and likewise $ <nat:388> \cdot <var:h> $ will be even . Adding on , we know that the product $ <var:Q> \cdot <nat:296> $ is obviously even since the multiplication of an even number and an arbitrary number in $ \mathbb{Z}^+ $ is guaranteed to be itself an even number . The pair $ <var:V> \cdot <nat:148> $ is clearly an even integer because the product between an even element of $ \mathbb{N} $ and some element of $ \mathbb{N} $ will be even . The totaling of an even natural number with an odd natural must be odd . Observe $ <nat:471> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:h> <var:Q> <var:c> : nat , Nat . odd ( <nat:296> * <var:Q> + <nat:148> * <var:V> + <nat:276> * <var:c> + <nat:388> * <var:h> + <nat:471> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:276> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:Q> + <nat:148> * <var:V> + <nat:276> * <var:c> + <nat:388> * <var:h> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:471> = true ) . { auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 