\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:v> * <nat:302> + <var:u> * <nat:246> + <nat:400> * <var:m> + <nat:17> + <nat:458> * <var:z> + <var:b> * <nat:416> + <var:i> * <nat:100> + <nat:360> * <var:t> + <nat:76> * <var:T> $ will be odd for all whole numbers $ <var:i> $ , $ <var:b> $ , $ <var:v> $ , $ <var:z> $ , $ <var:T> $ , $ <var:m> $ , $ <var:t> $ , and $ <var:u> $ . \end{theorem} \begin{proof} $ <var:T> \times <nat:76> $ is clearly even . This fact must be true from the knowledge the number $ <nat:76> $ is guaranteed to be trivially an even element of $ \mathbb{N} $ . In addition to this , the product $ <nat:416> \times <var:b> $ is an even element of $ \mathbb{Z}^+ $ . This fact holds from the fact the multiplication of an even number in $ \mathbb{N} $ and an arbitrary integer must be in itself an even positive integer and also the positive integer $ <nat:416> $ is known as even . Take note the integer $ <nat:400> $ is trivially an even natural number . Accordingly , the pair $ <nat:400> \times <var:m> $ is guaranteed to be even too . Likewise , the product $ <nat:246> \times <var:u> $ is known to be an even element of $ \mathbb{Z}^+ $ . This claim holds as a consequence that taking the product of an even number and any natural must be an even element of $ \mathbb{Z}^+ $ and the positive integer $ <nat:246> $ is trivially an even natural number . Likewise , recall that the number $ <nat:360> $ is known as even . Accordingly , the pair $ <nat:360> \times <var:t> $ must be even also . Adding on , take note that the pair $ <var:z> \times <nat:458> $ is known to be an even number in $ \mathbb{N} $ from the knowledge multiplying between an even number in $ \mathbb{Z}^+ $ and an arbitrary number is an even number . This must be true because the positive integer $ <nat:458> $ is known as an even whole number . Likewise , notice $ <var:i> \times <nat:100> $ is clearly even from the fact the whole number $ <nat:100> $ is obviously even . We know the whole number $ <nat:302> $ is obviously an even integer . Hence , $ <nat:302> \times <var:v> $ is even too . We know $ <nat:17> $ is clearly odd . The adding of even natural numbers concurrently with an odd element of $ \mathbb{Z}^+ $ is guaranteed to be an odd number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:b> <var:v> <var:z> <var:T> <var:m> <var:t> <var:u> : nat , Nat . odd ( <nat:302> * <var:v> + <nat:246> * <var:u> + <nat:400> * <var:m> + <nat:458> * <var:z> + <nat:416> * <var:b> + <nat:100> * <var:i> + <nat:360> * <var:t> + <nat:76> * <var:T> + <nat:17> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:302> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:302> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:17> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 