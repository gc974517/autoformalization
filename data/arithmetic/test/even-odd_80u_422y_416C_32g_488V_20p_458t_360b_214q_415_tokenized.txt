\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For some $ <var:u> $ , $ <var:g> $ , $ <var:t> $ , $ <var:C> $ , $ <var:p> $ , $ <var:b> $ , $ <var:V> $ , $ <var:q> $ , and $ <var:y> \in \mathbb{Z}^+ $ the formula $ <nat:80> \cdot <var:u> + <var:y> \cdot <nat:422> + <var:C> \cdot <nat:416> + <nat:32> \cdot <var:g> + <var:V> \cdot <nat:488> + <nat:415> + <nat:20> \cdot <var:p> + <nat:458> \cdot <var:t> + <var:b> \cdot <nat:360> + <var:q> \cdot <nat:214> $ must be odd . \end{theorem} \begin{proof} The products $ <nat:458> <var:t> $ , $ <nat:20> <var:p> $ , $ <var:V> <nat:488> $ , $ <var:q> <nat:214> $ , as well as $ <var:C> <nat:416> $ are known to be even integers . We know that the terms $ <var:y> <nat:422> $ , $ <var:u> <nat:80> $ , as well as $ <nat:32> <var:g> $ must be even . See that the pair $ <nat:360> <var:b> $ is clearly an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:g> <var:t> <var:C> <var:p> <var:b> <var:V> <var:q> <var:y> : nat , Nat . odd ( <nat:80> * <var:u> + <nat:422> * <var:y> + <nat:416> * <var:C> + <nat:32> * <var:g> + <nat:488> * <var:V> + <nat:20> * <var:p> + <nat:458> * <var:t> + <nat:360> * <var:b> + <nat:214> * <var:q> + <nat:415> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:458> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:422> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 