\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:n> * <nat:42> + <var:g> * <nat:122> + <nat:472> * <var:Z> + <var:Y> * <nat:284> + <nat:361> + <nat:36> * <var:e> + <var:l> * <nat:354> $ is odd assuming every variables $ <var:g> $ , $ <var:n> $ , $ <var:l> $ , $ <var:e> $ , $ <var:Z> $ , and $ <var:Y> $ . \end{theorem} \begin{proof} We know the pairs $ <nat:472> \times <var:Z> $ , $ <var:n> \times <nat:42> $ , $ <var:g> \times <nat:122> $ , and likewise $ <var:Y> \times <nat:284> $ are guaranteed to be even . We know that the term $ <nat:354> \times <var:l> $ is known as even . Additionally , remember that the product $ <var:e> \times <nat:36> $ is trivially an even positive integer . This claim is true from the knowledge the product between an even number in $ \mathbb{N} $ and some number in $ \mathbb{Z}^+ $ must be even . Remember $ <nat:361> $ is trivially odd . Remember that the summing between even elements of $ \mathbb{N} $ collectively and an odd element of $ \mathbb{Z}^+ $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:n> <var:l> <var:e> <var:Z> <var:Y> : nat , Nat . odd ( <nat:42> * <var:n> + <nat:122> * <var:g> + <nat:472> * <var:Z> + <nat:284> * <var:Y> + <nat:36> * <var:e> + <nat:354> * <var:l> + <nat:361> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:472> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:122> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:361> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 