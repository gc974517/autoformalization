\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using any unknowns $ <var:V> $ , $ <var:D> $ , $ <var:a> $ , $ <var:H> $ , $ <var:t> $ , $ <var:Q> $ , $ <var:d> $ , $ <var:w> $ , $ <var:x> $ , $ <var:i> $ , and $ <var:o> $ the expression $ <var:V> <nat:56> + <var:i> <nat:250> + <nat:25> + <nat:164> <var:D> + <var:Q> <nat:266> + <nat:438> <var:w> + <nat:222> <var:d> + <nat:286> <var:H> + <var:x> <nat:98> + <nat:168> <var:t> + <nat:106> <var:o> + <nat:290> <var:a> $ must be odd . \end{theorem} \begin{proof} The summation $ <var:H> <nat:286> + <nat:56> <var:V> + <var:D> <nat:164> + <nat:106> <var:o> + <var:x> <nat:98> + <nat:250> <var:i> + <nat:168> <var:t> + <var:d> <nat:222> + <nat:25> + <nat:290> <var:a> + <var:w> <nat:438> + <var:Q> <nat:266> $ is obviously odd from the fact the sum $ <nat:250> \cdot <var:i> + <nat:286> \cdot <var:H> + <nat:56> \cdot <var:V> + <nat:290> \cdot <var:a> + <var:t> \cdot <nat:168> + <nat:98> \cdot <var:x> + <var:Q> \cdot <nat:266> + <var:D> \cdot <nat:164> + <nat:222> \cdot <var:d> + <nat:438> \cdot <var:w> + <nat:106> \cdot <var:o> $ is even . The pairs $ <var:w> <nat:438> $ , $ <var:o> <nat:106> $ , $ <var:x> <nat:98> $ , $ <nat:56> <var:V> $ , $ <nat:286> <var:H> $ , in addition to $ <nat:164> <var:D> $ are guaranteed to be even . Additionally , the pairs $ <nat:290> <var:a> $ in addition to $ <nat:222> <var:d> $ must be even . Remember the terms $ <var:Q> <nat:266> $ in addition to $ <var:i> <nat:250> $ are guaranteed to be even elements of $ \mathbb{Z}^+ $ . Take note that the pair $ <nat:168> <var:t> $ is known to be even since the multiplication between an even integer and an arbitrary positive integer is guaranteed to be an even integer . Recall that $ <nat:25> $ is known to be odd . The adding of an even number in $ \mathbb{Z}^+ $ and an odd integer will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:D> <var:a> <var:H> <var:t> <var:Q> <var:d> <var:w> <var:x> <var:i> <var:o> : nat , Nat . odd ( <nat:56> * <var:V> + <nat:250> * <var:i> + <nat:164> * <var:D> + <nat:266> * <var:Q> + <nat:438> * <var:w> + <nat:222> * <var:d> + <nat:286> * <var:H> + <nat:98> * <var:x> + <nat:168> * <var:t> + <nat:106> * <var:o> + <nat:290> * <var:a> + <nat:25> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:438> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:V> + <nat:250> * <var:i> + <nat:164> * <var:D> + <nat:266> * <var:Q> + <nat:438> * <var:w> + <nat:222> * <var:d> + <nat:286> * <var:H> + <nat:98> * <var:x> + <nat:168> * <var:t> + <nat:106> * <var:o> + <nat:290> * <var:a> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:25> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 