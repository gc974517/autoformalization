\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:346> \cdot <var:p> + <var:S> \cdot <nat:200> + <var:Q> \cdot <nat:384> + <nat:389> $ must be odd taking some $ <var:p> $ , $ <var:S> $ , and $ <var:Q> \in \mathbb{N} $ . \end{theorem} \begin{proof} We apply the fact that the sum $ <var:Q> \times <nat:384> + <nat:389> + <var:S> \times <nat:200> + <var:p> \times <nat:346> $ is guaranteed to be odd since the summation $ <nat:384> <var:Q> + <nat:200> <var:S> + <var:p> <nat:346> $ is known as even . The positive integer $ <nat:346> $ is known as an even positive integer . So , the term $ <var:p> \times <nat:346> $ must be even additionally . Recall that the pair $ <nat:200> \times <var:S> $ is trivially even since the natural number $ <nat:200> $ is an even element of $ \mathbb{N} $ . The product $ <var:Q> \times <nat:384> $ is known as an even number in $ \mathbb{N} $ . This holds because the leading term $ <nat:384> $ is clearly obviously an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:S> <var:Q> : nat , Nat . odd ( <nat:346> * <var:p> + <nat:200> * <var:S> + <nat:384> * <var:Q> + <nat:389> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:p> + <nat:200> * <var:S> + <nat:384> * <var:Q> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 