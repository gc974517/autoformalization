\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:260> * <var:n> + <var:K> * <nat:142> + <nat:314> * <var:Y> + <nat:357> + <var:i> * <nat:140> + <nat:184> * <var:J> + <var:B> * <nat:460> + <nat:38> * <var:o> + <nat:250> * <var:l> + <nat:384> * <var:r> + <var:Q> * <nat:446> $ is guaranteed to be odd . \end{theorem} \begin{proof} Take note the whole numbers $ <nat:260> $ , $ <nat:142> $ , $ <nat:314> $ , $ <nat:140> $ , $ <nat:184> $ , $ <nat:460> $ , $ <nat:38> $ , $ <nat:250> $ , $ <nat:384> $ , plus $ <nat:446> $ are known as even . Consequently , the products $ <nat:260> \times <var:n> $ , $ <var:K> \times <nat:142> $ , $ <nat:314> \times <var:Y> $ , $ <nat:140> \times <var:i> $ , $ <var:J> \times <nat:184> $ , $ <nat:460> \times <var:B> $ , $ <nat:38> \times <var:o> $ , $ <nat:250> \times <var:l> $ , $ <var:r> \times <nat:384> $ , and $ <nat:446> \times <var:Q> $ is even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:K> <var:Y> <var:i> <var:J> <var:B> <var:o> <var:l> <var:r> <var:Q> : nat , Nat . odd ( <nat:260> * <var:n> + <nat:142> * <var:K> + <nat:314> * <var:Y> + <nat:140> * <var:i> + <nat:184> * <var:J> + <nat:460> * <var:B> + <nat:38> * <var:o> + <nat:250> * <var:l> + <nat:384> * <var:r> + <nat:446> * <var:Q> + <nat:357> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even <nat:38> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:38> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 