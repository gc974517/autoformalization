\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:205> + <nat:6> <var:R> + <nat:258> <var:G> + <var:i> <nat:446> + <nat:190> <var:Q> $ is odd for every natural numbers $ <var:Q> $ , $ <var:i> $ , $ <var:G> $ , and $ <var:R> $ . \end{theorem} \begin{proof} The formula $ <var:G> * <nat:258> + <var:i> * <nat:446> + <nat:190> * <var:Q> + <nat:6> * <var:R> $ is trivially even . Take note the adding of even elements of $ \mathbb{N} $ concurrently with an even whole number is guaranteed to be itself an even number . Notice the products $ <nat:446> \times <var:i> $ , $ <var:Q> \times <nat:190> $ , additionally $ <nat:258> \times <var:G> $ are trivially even positive integers . The term $ <var:R> \times <nat:6> $ is known as an even number in $ \mathbb{Z}^+ $ . additionally from the knowledge the multiplication of an even number in $ \mathbb{Z}^+ $ with a element of $ \mathbb{N} $ will be by itself an even element of $ \mathbb{Z}^+ $ . Observe the summing between even numbers in $ \mathbb{Z}^+ $ concurrently and an odd number in $ \mathbb{N} $ will be an odd number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:i> <var:G> <var:R> : nat , Nat . odd ( <nat:6> * <var:R> + <nat:258> * <var:G> + <nat:446> * <var:i> + <nat:190> * <var:Q> + <nat:205> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:446> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:R> + <nat:258> * <var:G> + <nat:446> * <var:i> + <nat:190> * <var:Q> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 