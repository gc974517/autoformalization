\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let that with the condition that $ \exists <var:y> $ , $ <var:g> $ , $ <var:X> $ , $ <var:z> $ , $ <var:G> $ , $ <var:Y> $ , $ <var:v> $ , $ <var:E> $ , $ <var:x> $ , $ <var:U> \in \mathbb{Z}^+ $ more than or equivalent to <nat:2> . Take that some natural number $ <var:W> $ will be considered to be a <def:ten-composite> positive integer given $ <var:g> \times <var:Y> \times <var:E> \times <var:v> \times <var:G> \times <var:X> \times <var:y> \times <var:z> \times <var:U> \times <var:x> = <var:W> $ . For this reason $ <var:W> = <nat:239500800> $ is a <def:ten-composite> natural number . \end{theorem} \begin{proof} Remember that a <def:ten-composite> positive integer is the product of numbers $ <var:z> $ , $ <var:v> $ , $ <var:g> $ , $ <var:G> $ , $ <var:U> $ , $ <var:y> $ , $ <var:Y> $ , $ <var:X> $ , $ <var:x> $ , and $ <var:E> $ so that $ <var:Y> $ , $ <var:z> $ , $ <var:v> $ , $ <var:U> $ , $ <var:X> $ , $ <var:y> $ , $ <var:E> $ , $ <var:x> $ , $ <var:G> $ and $ <var:g> \geq <nat:2> $ . Allow $ <var:z> = <nat:11> $ , $ <var:E> = <nat:6> $ , $ <var:y> = <nat:12> $ , $ <var:Y> = <nat:5> $ , $ <var:g> = <nat:3> $ , $ <var:v> = <nat:8> $ , $ <var:X> = <nat:4> $ , $ <var:x> = <nat:7> $ , $ <var:U> = <nat:10> $ and $ <var:G> = <nat:9> $ . What's more note that $ <nat:12> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:3> $ , $ <nat:6> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:4> $ , $ <nat:11> $ , and $ <nat:8> \geq <nat:2> $ . This yields <nat:239500800> is a <def:ten-composite> whole number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:ten-composite> ( <var:W> : nat ) := exists <var:y> <var:g> <var:X> <var:z> <var:G> <var:Y> <var:v> <var:E> <var:x> <var:U> : nat , ( <var:y> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:g> * <var:Y> * <var:E> * <var:v> * <var:G> * <var:X> * <var:y> * <var:z> * <var:U> * <var:x> = <var:W> ) . Theorem <genP:1> : <def:ten-composite> <nat:239500800> . Proof . unfold <def:ten-composite> . exists <nat:12> . exists <nat:3> . exists <nat:4> . exists <nat:11> . exists <nat:9> . exists <nat:5> . exists <nat:8> . exists <nat:6> . exists <nat:7> . exists <nat:10> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 