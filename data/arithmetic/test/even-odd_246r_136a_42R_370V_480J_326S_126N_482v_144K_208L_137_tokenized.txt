\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given natural numbers $ <var:K> $ , $ <var:N> $ , $ <var:a> $ , $ <var:v> $ , $ <var:L> $ , $ <var:r> $ , $ <var:J> $ , $ <var:V> $ , $ <var:S> $ , and $ <var:R> $ $ <nat:137> + <var:R> \times <nat:42> + <nat:144> \times <var:K> + <nat:480> \times <var:J> + <nat:482> \times <var:v> + <var:a> \times <nat:136> + <nat:208> \times <var:L> + <var:V> \times <nat:370> + <nat:126> \times <var:N> + <nat:246> \times <var:r> + <var:S> \times <nat:326> $ is odd . \end{theorem} \begin{proof} We demonstrate $ <var:L> * <nat:208> + <var:R> * <nat:42> + <var:r> * <nat:246> + <var:S> * <nat:326> + <nat:480> * <var:J> + <nat:144> * <var:K> + <nat:126> * <var:N> + <var:a> * <nat:136> + <var:V> * <nat:370> + <nat:137> + <var:v> * <nat:482> $ is odd . $ <var:v> \times <nat:482> + <nat:126> \times <var:N> + <var:S> \times <nat:326> + <nat:42> \times <var:R> + <nat:137> + <nat:246> \times <var:r> + <var:V> \times <nat:370> + <nat:480> \times <var:J> + <var:L> \times <nat:208> + <var:a> \times <nat:136> + <nat:144> \times <var:K> $ is guaranteed to be odd from the knowledge the summation $ <var:r> \cdot <nat:246> + <var:a> \cdot <nat:136> + <nat:42> \cdot <var:R> + <nat:370> \cdot <var:V> + <nat:480> \cdot <var:J> + <var:S> \cdot <nat:326> + <var:N> \cdot <nat:126> + <nat:482> \cdot <var:v> + <nat:144> \cdot <var:K> + <nat:208> \cdot <var:L> $ is clearly even . The terms $ <var:R> * <nat:42> $ and moreover $ <var:a> * <nat:136> $ are clearly even naturals since the multiplication of an even integer with a element of $ \mathbb{N} $ is guaranteed to be even . What's more , the products $ <var:L> * <nat:208> $ , $ <var:S> * <nat:326> $ , $ <nat:370> * <var:V> $ , $ <var:K> * <nat:144> $ , and $ <var:v> * <nat:482> $ are even numbers in $ \mathbb{Z}^+ $ . See the pair $ <nat:246> * <var:r> $ is an even integer because multiplying between an even natural with a element of $ \mathbb{Z}^+ $ is guaranteed to be an even number in $ \mathbb{N} $ . The term $ <var:J> * <nat:480> $ is trivially even . What's more , the pair $ <var:N> * <nat:126> $ is known to be an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:N> <var:a> <var:v> <var:L> <var:r> <var:J> <var:V> <var:S> <var:R> : nat , Nat . odd ( <nat:42> * <var:R> + <nat:144> * <var:K> + <nat:480> * <var:J> + <nat:482> * <var:v> + <nat:136> * <var:a> + <nat:208> * <var:L> + <nat:370> * <var:V> + <nat:126> * <var:N> + <nat:246> * <var:r> + <nat:326> * <var:S> + <nat:137> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:42> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:R> + <nat:144> * <var:K> + <nat:480> * <var:J> + <nat:482> * <var:v> + <nat:136> * <var:a> + <nat:208> * <var:L> + <nat:370> * <var:V> + <nat:126> * <var:N> + <nat:246> * <var:r> + <nat:326> * <var:S> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 