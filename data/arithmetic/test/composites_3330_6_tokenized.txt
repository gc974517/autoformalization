\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:D> $ , $ <var:i> $ , $ <var:M> $ , $ <var:t> $ , $ <var:K> $ , $ <var:p> \in \mathbb{Z}^+ $ . Say that some natural number $ <var:v> $ will be a <def:six-composite> positive integer given $ <var:v> = <var:p> \cdot <var:K> \cdot <var:M> \cdot <var:i> \cdot <var:D> \cdot <var:t> $ and more than or equal to <nat:2> . \end{definition} \begin{theorem} $ <nat:35100> = <var:v> $ is <def:six-composite> . \end{theorem} \begin{proof} Remember <nat:35100> is a <def:six-composite> positive integer assuming it is the multiplication between numbers $ <var:i> $ , $ <var:M> $ , $ <var:D> $ , $ <var:K> $ , $ <var:t> $ , and $ <var:p> $ larger than or equal to <nat:2> . Allow $ <var:D> = <nat:10> $ , $ <var:i> = <nat:9> $ , $ <var:M> = <nat:2> $ , $ <var:K> = <nat:13> $ , $ <var:p> = <nat:5> $ , and $ <var:t> = <nat:3> $ . Observe $ <var:M> = <nat:2> $ , $ <var:p> = <nat:5> $ , $ <var:t> = <nat:3> $ , $ <var:K> = <nat:13> $ , $ <var:D> = <nat:10> $ and $ <var:i> = <nat:9> $ are more than or equal to <nat:2> . What's more observe moreover $ <nat:35100> = <nat:2> * <nat:9> * <nat:10> * <nat:5> * <nat:3> * <nat:13> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:v> : nat ) := exists <var:D> <var:i> <var:M> <var:t> <var:K> <var:p> : nat , ( <var:v> = <var:p> * <var:K> * <var:M> * <var:i> * <var:D> * <var:t> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:35100> . Proof . unfold <def:six-composite> . exists <nat:10> . exists <nat:9> . exists <nat:2> . exists <nat:3> . exists <nat:13> . exists <nat:5> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 