\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:f> \cdot <nat:462> + <nat:119> + <var:q> \cdot <nat:486> + <var:M> \cdot <nat:254> $ must be odd . \end{theorem} \begin{proof} It can be demonstrated that that the sum $ <nat:119> + <nat:254> <var:M> + <var:q> <nat:486> + <var:f> <nat:462> $ is trivially odd from the fact the expression $ <nat:462> \cdot <var:f> + <nat:486> \cdot <var:q> + <nat:254> \cdot <var:M> $ is trivially even , since the addition of an even number with an even natural must be even . $ <nat:462> \times <var:f> $ is guaranteed to be even . This fact is true as a consequence that the positive integer $ <nat:462> $ is guaranteed to be fundamentally an even element of $ \mathbb{Z}^+ $ . Furthermore , the term $ <nat:254> \times <var:M> $ is guaranteed to be an even positive integer as a consequence that the multiplication between an even integer and some whole number will be an even number in $ \mathbb{N} $ , and must be true from the knowledge the whole number $ <nat:254> $ is guaranteed to be even . In addition to this , the term $ <var:q> \times <nat:486> $ is trivially an even number in $ \mathbb{N} $ . This must be true from the fact the natural number $ <nat:486> $ is even . Remember that $ <nat:119> $ is known to be odd . As a consequence that the totaling of an even element of $ \mathbb{N} $ with an odd positive integer is guaranteed to be odd , the formula $ <nat:254> \cdot <var:M> + <nat:119> + <var:q> \cdot <nat:486> + <var:f> \cdot <nat:462> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:q> <var:M> : nat , Nat . odd ( <nat:462> * <var:f> + <nat:486> * <var:q> + <nat:254> * <var:M> + <nat:119> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:f> + <nat:486> * <var:q> + <nat:254> * <var:M> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:119> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 