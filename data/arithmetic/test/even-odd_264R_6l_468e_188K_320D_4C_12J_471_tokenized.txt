\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking every whole numbers $ <var:J> $ , $ <var:e> $ , $ <var:K> $ , $ <var:l> $ , $ <var:C> $ , $ <var:R> $ , and $ <var:D> $ $ <var:l> \times <nat:6> + <var:D> \times <nat:320> + <var:J> \times <nat:12> + <nat:4> \times <var:C> + <nat:188> \times <var:K> + <nat:471> + <nat:468> \times <var:e> + <var:R> \times <nat:264> $ is guaranteed to be odd . \end{theorem} \begin{proof} We prove the formula $ <nat:471> + <nat:6> \cdot <var:l> + <var:K> \cdot <nat:188> + <nat:320> \cdot <var:D> + <var:C> \cdot <nat:4> + <var:e> \cdot <nat:468> + <var:J> \cdot <nat:12> + <var:R> \cdot <nat:264> $ is guaranteed to be odd . The expression $ <nat:264> * <var:R> + <var:K> * <nat:188> + <nat:320> * <var:D> + <var:J> * <nat:12> + <nat:471> + <var:C> * <nat:4> + <var:l> * <nat:6> + <nat:468> * <var:e> $ is guaranteed to be odd from the fact $ <var:R> \cdot <nat:264> + <var:l> \cdot <nat:6> + <var:e> \cdot <nat:468> + <var:K> \cdot <nat:188> + <nat:320> \cdot <var:D> + <var:C> \cdot <nat:4> + <nat:12> \cdot <var:J> $ is guaranteed to be even . See that the terms $ <nat:6> \times <var:l> $ , $ <var:D> \times <nat:320> $ , $ <var:e> \times <nat:468> $ , $ <nat:12> \times <var:J> $ , $ <nat:264> \times <var:R> $ , and $ <var:C> \times <nat:4> $ are known as even elements of $ \mathbb{Z}^+ $ . Additionally , the product $ <var:K> \times <nat:188> $ is obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:e> <var:K> <var:l> <var:C> <var:R> <var:D> : nat , Nat . odd ( <nat:6> * <var:l> + <nat:320> * <var:D> + <nat:12> * <var:J> + <nat:4> * <var:C> + <nat:188> * <var:K> + <nat:468> * <var:e> + <nat:264> * <var:R> + <nat:471> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:6> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:l> + <nat:320> * <var:D> + <nat:12> * <var:J> + <nat:4> * <var:C> + <nat:188> * <var:K> + <nat:468> * <var:e> + <nat:264> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 