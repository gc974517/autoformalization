\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming terms $ <var:p> $ , $ <var:j> $ , $ <var:i> $ , and $ <var:U> $ the formula $ <nat:148> \cdot <var:i> + <nat:69> + <var:p> \cdot <nat:490> + <nat:84> \cdot <var:U> + <var:j> \cdot <nat:478> $ must be odd . \end{theorem} \begin{proof} Notice the summation between an even whole number with an odd number is guaranteed to be odd . The expression $ <nat:148> * <var:i> + <nat:478> * <var:j> + <nat:84> * <var:U> + <nat:69> + <nat:490> * <var:p> $ is obviously odd since $ <nat:84> * <var:U> + <var:p> * <nat:490> + <nat:148> * <var:i> + <nat:478> * <var:j> $ is guaranteed to be even . In addition , observe that the integers $ <nat:84> $ , $ <nat:490> $ , $ <nat:148> $ , and also $ <nat:478> $ are trivially even . Consequently , the products $ <var:U> * <nat:84> $ , $ <nat:490> * <var:p> $ , $ <var:i> * <nat:148> $ , additionally $ <nat:478> * <var:j> $ will be even at the same time . Because the summation between an even element of $ \mathbb{N} $ with an even number in $ \mathbb{N} $ is by definition an even positive integer , this claim must be true . We check our lemma holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:j> <var:i> <var:U> : nat , Nat . odd ( <nat:148> * <var:i> + <nat:490> * <var:p> + <nat:84> * <var:U> + <nat:478> * <var:j> + <nat:69> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:84> = true ) . { auto . } assert ( <genH> : Nat . even <nat:490> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:i> + <nat:490> * <var:p> + <nat:84> * <var:U> + <nat:478> * <var:j> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 