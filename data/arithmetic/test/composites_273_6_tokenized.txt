\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Only if we get $ <var:q> \times <var:V> \times <var:x> \times <var:m> \times <var:n> \times <var:u> = <var:v> $ given $ <var:v> \in \mathbb{Z}^+ $ and satisfying the condition that $ <var:x> $ , $ <var:V> $ , $ <var:q> $ , $ <var:u> $ , $ <var:m> $ and $ <var:n> \geq <nat:2> $ with some $ <var:m> $ , $ <var:x> $ , $ <var:n> $ , $ <var:V> $ , $ <var:u> $ , $ <var:q> \in \mathbb{N} $ , then we assume that $ <var:v> $ is a <def:six-composite> natural number . Therefore $ <nat:110880> = <var:v> $ is a <def:six-composite> natural number . \end{theorem} \begin{proof} Recollect that <nat:110880> is a <def:six-composite> number assuming <nat:110880> is the multiplication of integers $ <var:x> $ , $ <var:n> $ , $ <var:q> $ , $ <var:m> $ , $ <var:V> $ and $ <var:u> $ satisfying the condition that $ <var:x> $ , $ <var:q> $ , $ <var:V> $ , $ <var:u> $ , $ <var:m> $ and $ <var:n> \geq <nat:2> $ . Take $ <var:V> = <nat:6> $ , $ <var:q> = <nat:11> $ , $ <var:x> = <nat:12> $ , $ <var:m> = <nat:7> $ , $ <var:n> = <nat:5> $ , $ <var:u> = <nat:4> $ . We justify <nat:110880> is a <def:six-composite> positive integer . Notice that $ <var:u> = <nat:4> $ , $ <var:x> = <nat:12> $ , $ <var:V> = <nat:6> $ , $ <var:n> = <nat:5> $ , $ <var:q> = <nat:11> $ , $ <var:m> = <nat:7> $ are more than or equal to <nat:2> . Furthermore notice additionally $ <nat:110880> = <nat:5> \cdot <nat:4> \cdot <nat:6> \cdot <nat:7> \cdot <nat:11> \cdot <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:v> : nat ) := exists <var:m> <var:x> <var:n> <var:V> <var:u> <var:q> : nat , ( <var:q> * <var:V> * <var:x> * <var:m> * <var:n> * <var:u> = <var:v> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:110880> . Proof . unfold <def:six-composite> . exists <nat:7> . exists <nat:12> . exists <nat:5> . exists <nat:6> . exists <nat:4> . exists <nat:11> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 