\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:S> $ , $ <var:D> $ , $ <var:I> $ , $ <var:Y> $ , $ <var:p> $ , $ <var:c> \in \mathbb{N} $ where $ <var:S> $ , $ <var:D> $ , $ <var:I> $ , $ <var:Y> $ , $ <var:p> $ and $ <var:c> > <nat:1> $ . Take as given that some natural number $ <var:W> $ is said to be a <def:six-composite> whole number given $ <var:W> = <var:I> \times <var:Y> \times <var:c> \times <var:S> \times <var:D> \times <var:p> $ . Therefore $ <nat:142560> = <var:W> $ is a <def:six-composite> positive integer . \end{theorem} \begin{proof} We confirm $ <var:c> $ , $ <var:Y> $ , $ <var:S> $ , $ <var:I> $ , $ <var:p> $ and $ <var:D> > <nat:1> $ plus $ <nat:142560> = <var:S> \times <var:I> \times <var:D> \times <var:p> \times <var:c> \times <var:Y> $ . Note that $ <nat:12> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:9> > <nat:1> $ . In addition note too $ <nat:12> * <nat:11> * <nat:9> * <nat:8> * <nat:3> * <nat:5> = <nat:142560> $ . This indicates <nat:142560> is a <def:six-composite> number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:W> : nat ) := exists <var:S> <var:D> <var:I> <var:Y> <var:p> <var:c> : nat , ( <var:S> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:W> = <var:I> * <var:Y> * <var:c> * <var:S> * <var:D> * <var:p> ) . Theorem <genP:1> : <def:six-composite> <nat:142560> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } exists <nat:3> . exists <nat:5> . exists <nat:9> . exists <nat:11> . exists <nat:8> . exists <nat:12> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 