\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} If and only if we have where $ <var:V> $ , $ <var:G> $ , $ <var:W> $ , $ <var:O> $ , $ <var:L> $ and $ <var:J> > <nat:1> $ so that using some natural number $ <var:P> $ , $ <var:W> \cdot <var:J> \cdot <var:L> \cdot <var:O> \cdot <var:G> \cdot <var:V> = <var:P> $ , then we assume that $ <var:P> $ is a <def:six-composite> number assuming some natural numbers $ <var:J> $ , $ <var:O> $ , $ <var:L> $ , $ <var:G> $ , $ <var:W> $ , $ <var:V> $ . Hence $ <nat:43680> = <var:P> $ is a <def:six-composite> natural number . \end{theorem} \begin{proof} Remember that a <def:six-composite> is the product between whole numbers $ <var:G> $ , $ <var:V> $ , $ <var:O> $ , $ <var:J> $ , $ <var:L> $ , $ <var:W> $ where $ <var:J> $ , $ <var:G> $ , $ <var:W> $ , $ <var:O> $ , $ <var:L> $ , and $ <var:V> > <nat:1> $ . Take $ <var:W> = <nat:10> $ , $ <var:G> = <nat:13> $ , $ <var:J> = <nat:6> $ , $ <var:V> = <nat:2> $ , $ <var:O> = <nat:7> $ , and $ <var:L> = <nat:4> $ . We justify <nat:43680> is a <def:six-composite> integer . What's more observe that $ <nat:13> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:7> $ , $ <nat:2> $ , and $ <nat:10> > <nat:1> $ . This indicates <nat:43680> is a <def:six-composite> integer . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:P> : nat ) := exists <var:J> <var:O> <var:L> <var:G> <var:W> <var:V> : nat , ( <var:V> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:O> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:W> * <var:J> * <var:L> * <var:O> * <var:G> * <var:V> = <var:P> ) . Theorem <genP:1> : <def:six-composite> <nat:43680> . Proof . unfold <def:six-composite> . exists <nat:6> . exists <nat:7> . exists <nat:4> . exists <nat:13> . exists <nat:10> . exists <nat:2> . assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 