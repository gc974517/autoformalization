\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} If and only if we have $ <var:S> \cdot <var:h> \cdot <var:w> \cdot <var:C> \cdot <var:l> \cdot <var:t> \cdot <var:z> = <var:T> $ with $ <var:T> \in \mathbb{Z}^+ $ plus such that $ <var:C> $ , $ <var:w> $ , $ <var:t> $ , $ <var:l> $ , $ <var:S> $ , $ <var:z> $ , and $ <var:h> \geq <nat:2> $ , then claim that $ <var:T> $ is a <def:seven-composite> whole number given some $ <var:z> $ , $ <var:w> $ , $ <var:l> $ , $ <var:S> $ , $ <var:h> $ , $ <var:t> $ , $ <var:C> \in \mathbb{Z}^+ $ . Thus the natural number <nat:207360> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} We justify <nat:207360> is a <def:seven-composite> number because $ <nat:207360> = <var:t> * <var:w> * <var:z> * <var:l> * <var:C> * <var:S> * <var:h> $ indicates $ <var:t> = <nat:4> $ , $ <var:h> = <nat:6> $ , $ <var:l> = <nat:9> $ , $ <var:w> = <nat:8> $ , $ <var:S> = <nat:5> $ , $ <var:C> = <nat:2> $ and $ <var:z> = <nat:12> $ as well as as $ <nat:9> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:8> $ , $ <nat:6> $ , $ <nat:5> $ , $ <nat:4> $ are larger than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:T> : nat ) := exists <var:z> <var:w> <var:l> <var:S> <var:h> <var:t> <var:C> : nat , ( <var:S> * <var:h> * <var:w> * <var:C> * <var:l> * <var:t> * <var:z> = <var:T> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:207360> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:8> . exists <nat:9> . exists <nat:5> . exists <nat:6> . exists <nat:4> . exists <nat:2> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 