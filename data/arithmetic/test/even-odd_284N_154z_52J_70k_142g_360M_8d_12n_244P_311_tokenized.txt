\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:244> <var:P> + <var:N> <nat:284> + <nat:360> <var:M> + <nat:52> <var:J> + <nat:8> <var:d> + <var:k> <nat:70> + <nat:154> <var:z> + <var:g> <nat:142> + <nat:311> + <nat:12> <var:n> $ must be odd given every positive integers $ <var:P> $ , $ <var:k> $ , $ <var:n> $ , $ <var:M> $ , $ <var:g> $ , $ <var:d> $ , $ <var:J> $ , $ <var:N> $ , and $ <var:z> $ . \end{theorem} \begin{proof} The adding of an even number in $ \mathbb{N} $ with an odd number is guaranteed to be odd . Hence , the expression $ <nat:284> \times <var:N> + <var:z> \times <nat:154> + <nat:52> \times <var:J> + <nat:70> \times <var:k> + <var:g> \times <nat:142> + <var:M> \times <nat:360> + <nat:8> \times <var:d> + <var:n> \times <nat:12> + <nat:311> + <nat:244> \times <var:P> $ will be odd . The numbers $ <nat:284> $ , $ <nat:154> $ , $ <nat:52> $ , $ <nat:70> $ , $ <nat:142> $ , $ <nat:360> $ , $ <nat:8> $ , $ <nat:12> $ , plus $ <nat:244> $ are guaranteed to be even . Thus , the pairs $ <nat:284> <var:N> $ , $ <var:z> <nat:154> $ , $ <nat:52> <var:J> $ , $ <nat:70> <var:k> $ , $ <nat:142> <var:g> $ , $ <nat:360> <var:M> $ , $ <nat:8> <var:d> $ , $ <nat:12> <var:n> $ , as well as $ <nat:244> <var:P> $ is guaranteed to be even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:k> <var:n> <var:M> <var:g> <var:d> <var:J> <var:N> <var:z> : nat , Nat . odd ( <nat:244> * <var:P> + <nat:284> * <var:N> + <nat:360> * <var:M> + <nat:52> * <var:J> + <nat:8> * <var:d> + <nat:70> * <var:k> + <nat:154> * <var:z> + <nat:142> * <var:g> + <nat:12> * <var:n> + <nat:311> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:244> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 