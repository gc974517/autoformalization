\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:165> + <var:t> \times <nat:32> + <nat:104> \times <var:X> + <nat:358> \times <var:m> + <var:I> \times <nat:24> + <var:j> \times <nat:200> + <nat:310> \times <var:e> + <nat:172> \times <var:O> + <nat:168> \times <var:w> + <var:D> \times <nat:332> + <var:c> \times <nat:386> $ is odd taking $ <var:X> $ , $ <var:j> $ , $ <var:e> $ , $ <var:w> $ , $ <var:m> $ , $ <var:I> $ , $ <var:c> $ , $ <var:t> $ , $ <var:O> $ , and $ <var:D> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} We justify the summation $ <var:j> <nat:200> + <var:e> <nat:310> + <nat:172> <var:O> + <nat:358> <var:m> + <nat:32> <var:t> + <nat:104> <var:X> + <nat:386> <var:c> + <nat:165> + <var:w> <nat:168> + <nat:332> <var:D> + <nat:24> <var:I> $ will be odd . The integer $ <nat:200> $ is known as even . Accordingly , the product $ <nat:200> \times <var:j> $ will be even additionally . The terms $ <nat:310> \times <var:e> $ , $ <nat:32> \times <var:t> $ , and $ <nat:24> \times <var:I> $ are clearly even . This is true by reason that the multiplication between an even element of $ \mathbb{N} $ with some element of $ \mathbb{Z}^+ $ must be even , which must be true as a consequence that the coefficients $ <nat:310> $ , $ <nat:32> $ , and also $ <nat:24> $ are trivially even . The coefficients $ <nat:358> $ , $ <nat:386> $ , $ <nat:104> $ , $ <nat:168> $ , and also $ <nat:332> $ are even numbers in $ \mathbb{Z}^+ $ . Therefore , the products $ <var:m> \times <nat:358> $ , $ <nat:386> \times <var:c> $ , $ <nat:104> \times <var:X> $ , $ <nat:168> \times <var:w> $ , and moreover $ <var:D> \times <nat:332> $ must be even as well . Recall the pair $ <var:O> \times <nat:172> $ is known to be an even number in $ \mathbb{Z}^+ $ . This claim holds from the fact the leading term $ <nat:172> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:j> <var:e> <var:w> <var:m> <var:I> <var:c> <var:t> <var:O> <var:D> : nat , Nat . odd ( <nat:32> * <var:t> + <nat:104> * <var:X> + <nat:358> * <var:m> + <nat:24> * <var:I> + <nat:200> * <var:j> + <nat:310> * <var:e> + <nat:172> * <var:O> + <nat:168> * <var:w> + <nat:332> * <var:D> + <nat:386> * <var:c> + <nat:165> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:310> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:104> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:172> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 