\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Under the condition that we get so that $ <var:K> $ , $ <var:R> $ , $ <var:e> $ , $ <var:p> $ , $ <var:P> $ , $ <var:i> $ , $ <var:n> $ , $ <var:f> $ and $ <var:v> > <nat:1> $ where assuming $ <var:a> \in \mathbb{Z}^+ $ , $ <var:a> = <var:K> * <var:p> * <var:P> * <var:e> * <var:R> * <var:v> * <var:f> * <var:n> * <var:i> $ for some numbers $ <var:n> $ , $ <var:f> $ , $ <var:K> $ , $ <var:R> $ , $ <var:p> $ , $ <var:v> $ , $ <var:e> $ , $ <var:P> $ , $ <var:i> $ , take as given that $ <var:a> $ is a <def:nine-composite> whole number . \end{definition} \begin{theorem} $ <nat:6220800> = <var:a> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Observe $ <nat:8> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:4> $ are greater than <nat:1> . Further note that too $ <nat:3> \times <nat:2> \times <nat:12> \times <nat:4> \times <nat:5> \times <nat:9> \times <nat:10> \times <nat:8> \times <nat:6> = <var:f> \times <var:e> \times <var:p> \times <var:K> \times <var:v> \times <var:R> \times <var:i> \times <var:P> \times <var:n> = <nat:6220800> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:a> : nat ) := exists <var:n> <var:f> <var:K> <var:R> <var:p> <var:v> <var:e> <var:P> <var:i> : nat , ( <var:K> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:a> = <var:K> * <var:p> * <var:P> * <var:e> * <var:R> * <var:v> * <var:f> * <var:n> * <var:i> ) . Theorem <genP:1> : <def:nine-composite> <nat:6220800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } exists <nat:6> . exists <nat:3> . exists <nat:4> . exists <nat:9> . exists <nat:12> . exists <nat:5> . exists <nat:2> . exists <nat:8> . exists <nat:10> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 