\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Let that $ <var:C> $ is a <def:six-composite> positive integer supposing there exist some $ <var:F> $ , $ <var:O> $ , $ <var:k> $ , $ <var:W> $ , $ <var:y> $ , $ <var:p> $ such that $ <var:y> \times <var:k> \times <var:F> \times <var:p> \times <var:W> \times <var:O> = <var:C> $ given some number $ <var:C> $ as well as so that $ <var:p> $ , $ <var:k> $ , $ <var:y> $ , $ <var:W> $ , $ <var:F> $ , and $ <var:O> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:360360> = <var:C> $ is a <def:six-composite> integer . \end{theorem} \begin{proof} Assume $ <var:W> = <nat:7> $ , $ <var:y> = <nat:9> $ , $ <var:O> = <nat:11> $ , $ <var:p> = <nat:13> $ , $ <var:F> = <nat:5> $ and $ <var:k> = <nat:8> $ . Further notice that $ <nat:5> $ , $ <nat:13> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:7> $ , $ <nat:9> > <nat:1> $ . Therefore , $ <var:p> \times <var:y> \times <var:O> \times <var:k> \times <var:W> \times <var:F> = <nat:360360> $ is true has been proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:C> : nat ) := exists <var:F> <var:O> <var:k> <var:W> <var:y> <var:p> : nat , ( <var:y> * <var:k> * <var:F> * <var:p> * <var:W> * <var:O> = <var:C> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:360360> . Proof . unfold <def:six-composite> . exists <nat:5> . exists <nat:11> . exists <nat:8> . exists <nat:7> . exists <nat:9> . exists <nat:13> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 