\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:65> + <var:q> \cdot <nat:250> + <nat:92> \cdot <var:s> + <var:O> \cdot <nat:312> + <var:J> \cdot <nat:440> + <nat:376> \cdot <var:j> + <var:p> \cdot <nat:408> + <nat:436> \cdot <var:R> + <var:Z> \cdot <nat:148> $ will be odd . \end{theorem} \begin{proof} Our proposition holds by reason that $ <var:J> <nat:440> + <var:j> <nat:376> + <var:p> <nat:408> + <var:s> <nat:92> + <var:O> <nat:312> + <nat:436> <var:R> + <var:q> <nat:250> + <nat:148> <var:Z> $ is known as even . See that the terms $ <nat:376> \times <var:j> $ , $ <var:p> \times <nat:408> $ , additionally $ <var:s> \times <nat:92> $ will be even as a consequence that the numbers $ <nat:376> $ , $ <nat:408> $ , plus $ <nat:92> $ are known as trivially even whole numbers . Building on , observe the numbers $ <nat:436> $ in addition to $ <nat:148> $ are clearly even naturals . Accordingly , the terms $ <var:R> \times <nat:436> $ in addition to $ <var:Z> \times <nat:148> $ is even too . On top of this , remember the pairs $ <var:J> \times <nat:440> $ and also $ <nat:312> \times <var:O> $ will be even as a consequence that taking the product between an even integer and an arbitrary element of $ \mathbb{N} $ is by definition an even element of $ \mathbb{Z}^+ $ . This fact holds because the natural numbers $ <nat:440> $ and likewise $ <nat:312> $ are clearly . Remember that $ <nat:250> \times <var:q> $ is known to be even since the positive integer $ <nat:250> $ is clearly even . From the fact the summation between an even integer and even whole numbers is guaranteed to be fundamentally an even integer , the claim holds . Remember that $ <nat:65> $ is clearly an odd integer . Because the summation of an even number in $ \mathbb{Z}^+ $ and an odd number in $ \mathbb{Z}^+ $ must be odd , hence our theorem must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:s> <var:O> <var:J> <var:j> <var:p> <var:R> <var:Z> : nat , Nat . odd ( <nat:250> * <var:q> + <nat:92> * <var:s> + <nat:312> * <var:O> + <nat:440> * <var:J> + <nat:376> * <var:j> + <nat:408> * <var:p> + <nat:436> * <var:R> + <nat:148> * <var:Z> + <nat:65> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:376> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:376> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:q> + <nat:92> * <var:s> + <nat:312> * <var:O> + <nat:440> * <var:J> + <nat:376> * <var:j> + <nat:408> * <var:p> + <nat:436> * <var:R> + <nat:148> * <var:Z> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:65> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 