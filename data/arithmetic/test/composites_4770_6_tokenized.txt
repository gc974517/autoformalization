\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever we get $ <var:K> = <var:P> * <var:t> * <var:A> * <var:s> * <var:j> * <var:c> $ given some number $ <var:K> $ and such that $ <var:j> $ , $ <var:P> $ , $ <var:c> $ , $ <var:t> $ , $ <var:A> $ and $ <var:s> \geq <nat:2> $ , then we say that $ <var:K> $ is a <def:six-composite> number given some natural numbers $ <var:t> $ , $ <var:A> $ , $ <var:P> $ , $ <var:s> $ , $ <var:j> $ , $ <var:c> $ . Consequently $ <var:K> = <nat:134784> $ is <def:six-composite> . \end{theorem} \begin{proof} We show <nat:134784> is the multiplication of some natural numbers $ <var:P> $ , $ <var:j> $ , $ <var:t> $ , $ <var:c> $ , $ <var:s> $ , and $ <var:A> $ plus $ <var:c> $ , $ <var:P> $ , $ <var:s> $ , $ <var:j> $ , $ <var:t> $ , and $ <var:A> \geq <nat:2> $ . Observe $ <var:j> \times <var:s> \times <var:A> \times <var:t> \times <var:c> \times <var:P> = <nat:134784> = <nat:2> \times <nat:9> \times <nat:6> \times <nat:13> \times <nat:12> \times <nat:8> $ . Additionally observe $ <nat:6> $ , $ <nat:2> $ , $ <nat:8> $ , $ <nat:12> $ , $ <nat:9> $ and $ <nat:13> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:K> : nat ) := exists <var:t> <var:A> <var:P> <var:s> <var:j> <var:c> : nat , ( <var:K> = <var:P> * <var:t> * <var:A> * <var:s> * <var:j> * <var:c> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:134784> . Proof . unfold <def:six-composite> . exists <nat:13> . exists <nat:6> . exists <nat:8> . exists <nat:9> . exists <nat:2> . exists <nat:12> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 