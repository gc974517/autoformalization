\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:w> * <nat:126> + <var:U> * <nat:306> + <nat:278> * <var:t> + <var:s> * <nat:258> + <nat:11> + <nat:292> * <var:Q> + <var:o> * <nat:468> + <var:q> * <nat:110> + <nat:86> * <var:A> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be verified that $ <nat:11> + <var:U> \cdot <nat:306> + <var:t> \cdot <nat:278> + <var:A> \cdot <nat:86> + <nat:468> \cdot <var:o> + <var:Q> \cdot <nat:292> + <nat:258> \cdot <var:s> + <var:q> \cdot <nat:110> + <var:w> \cdot <nat:126> $ is guaranteed to be odd employing the understanding that multiplying of an even number in $ \mathbb{N} $ with an arbitrary number in $ \mathbb{N} $ must be fundamentally an even natural number . See that $ <nat:11> $ is guaranteed to be odd . The integers $ <nat:306> $ , $ <nat:468> $ , $ <nat:278> $ , $ <nat:292> $ , as well as $ <nat:110> $ are known to be even Building on , the numbers $ <nat:126> $ as well as $ <nat:86> $ are guaranteed to be even natural numbers The natural number $ <nat:258> $ is obviously even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:U> <var:t> <var:s> <var:Q> <var:o> <var:q> <var:A> : nat , Nat . odd ( <nat:126> * <var:w> + <nat:306> * <var:U> + <nat:278> * <var:t> + <nat:258> * <var:s> + <nat:292> * <var:Q> + <nat:468> * <var:o> + <nat:110> * <var:q> + <nat:86> * <var:A> + <nat:11> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . odd <nat:11> = true ) . { auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:126> = true ) . { auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 