\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For whole numbers $ <var:Z> $ , $ <var:T> $ , $ <var:p> $ , $ <var:q> $ , $ <var:o> $ , and $ <var:O> $ the expression $ <var:p> * <nat:466> + <var:Z> * <nat:204> + <nat:89> + <var:O> * <nat:438> + <nat:136> * <var:T> + <nat:86> * <var:q> + <var:o> * <nat:10> $ will be odd . \end{theorem} \begin{proof} Notice that the pairs $ <var:p> \cdot <nat:466> $ , $ <var:Z> \cdot <nat:204> $ , $ <nat:438> \cdot <var:O> $ , $ <nat:136> \cdot <var:T> $ , $ <var:q> \cdot <nat:86> $ , and $ <nat:10> \cdot <var:o> $ will be even . This claim must be true as a consequence that taking the product of an even integer with an arbitrary whole number must be even . This claim is proven as a consequence that the coefficients $ <nat:466> $ , $ <nat:204> $ , $ <nat:438> $ , $ <nat:136> $ , $ <nat:86> $ , and moreover $ <nat:10> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Z> <var:T> <var:p> <var:q> <var:o> <var:O> : nat , Nat . odd ( <nat:466> * <var:p> + <nat:204> * <var:Z> + <nat:438> * <var:O> + <nat:136> * <var:T> + <nat:86> * <var:q> + <nat:10> * <var:o> + <nat:89> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 