\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever there exist $ <var:S> $ , $ <var:Q> $ , $ <var:l> $ , $ <var:V> $ , $ <var:h> $ , $ <var:o> $ , $ <var:Y> $ , $ <var:H> $ , $ <var:F> \in \mathbb{Z}^+ $ claim that $ <var:O> \in \mathbb{N} $ will be considered as <def:nine-composite> when $ <var:O> = <var:o> * <var:S> * <var:F> * <var:Y> * <var:h> * <var:V> * <var:l> * <var:H> * <var:Q> $ plus unique factors are greater than <nat:1> . Hence $ <nat:23950080> = <var:O> $ is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Let $ <var:S> = <nat:11> $ , $ <var:V> = <nat:12> $ , $ <var:h> = <nat:7> $ , $ <var:H> = <nat:2> $ , $ <var:Q> = <nat:3> $ , $ <var:l> = <nat:9> $ , $ <var:F> = <nat:6> $ , $ <var:o> = <nat:10> $ and $ <var:Y> = <nat:8> $ . Notice that $ <var:V> = <nat:12> $ , $ <var:h> = <nat:7> $ , $ <var:H> = <nat:2> $ , $ <var:l> = <nat:9> $ , $ <var:o> = <nat:10> $ , $ <var:Y> = <nat:8> $ , $ <var:S> = <nat:11> $ , $ <var:F> = <nat:6> $ , and $ <var:Q> = <nat:3> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:O> : nat ) := exists <var:S> <var:Q> <var:l> <var:V> <var:h> <var:o> <var:Y> <var:H> <var:F> : nat , ( <var:O> = <var:o> * <var:S> * <var:F> * <var:Y> * <var:h> * <var:V> * <var:l> * <var:H> * <var:Q> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:F> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:23950080> . Proof . unfold <def:nine-composite> . exists <nat:11> . exists <nat:3> . exists <nat:9> . exists <nat:12> . exists <nat:7> . exists <nat:10> . exists <nat:8> . exists <nat:2> . exists <nat:6> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 