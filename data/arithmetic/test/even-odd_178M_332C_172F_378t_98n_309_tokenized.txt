\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:t> * <nat:378> + <nat:332> * <var:C> + <var:F> * <nat:172> + <var:n> * <nat:98> + <nat:309> + <nat:178> * <var:M> $ is odd . \end{theorem} \begin{proof} We check $ <nat:98> <var:n> + <nat:332> <var:C> + <var:F> <nat:172> + <nat:309> + <nat:378> <var:t> + <nat:178> <var:M> $ will be odd . It can be demonstrated that that $ <var:M> * <nat:178> + <var:C> * <nat:332> + <nat:172> * <var:F> + <var:t> * <nat:378> + <nat:98> * <var:n> $ is trivially even . Notice the products $ <nat:178> <var:M> $ , $ <nat:332> <var:C> $ , $ <nat:172> <var:F> $ , $ <nat:378> <var:t> $ , in addition to $ <nat:98> <var:n> $ will be even whole numbers as a consequence that taking the product of an even positive integer with an arbitrary natural will be even . This claim must be true by reason that the leading terms $ <nat:178> $ , $ <nat:332> $ , $ <nat:172> $ , $ <nat:378> $ , and moreover $ <nat:98> $ will be even . Notice that the summing between even numbers in $ \mathbb{N} $ together with an odd element of $ \mathbb{N} $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:t> <var:C> <var:F> <var:n> <var:M> : nat , Nat . odd ( <nat:378> * <var:t> + <nat:332> * <var:C> + <nat:172> * <var:F> + <nat:98> * <var:n> + <nat:178> * <var:M> + <nat:309> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:178> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:172> = true ) . { auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:178> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:t> + <nat:332> * <var:C> + <nat:172> * <var:F> + <nat:98> * <var:n> + <nat:178> * <var:M> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 