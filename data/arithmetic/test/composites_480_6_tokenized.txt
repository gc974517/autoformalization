\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Under the condition we get $ <var:v> = <var:m> \cdot <var:y> \cdot <var:p> \cdot <var:E> \cdot <var:X> \cdot <var:Y> $ assuming some number $ <var:v> $ and satisfying the condition that $ <var:p> $ , $ <var:Y> $ , $ <var:X> $ , $ <var:y> $ , $ <var:E> $ , $ <var:m> \geq <nat:2> $ , we claim that $ <var:v> $ is <def:six-composite> with some $ <var:E> $ , $ <var:y> $ , $ <var:Y> $ , $ <var:p> $ , $ <var:X> $ , $ <var:m> \in \mathbb{Z}^+ $ . \end{definition} \begin{theorem} The positive integer <nat:31680> is a <def:six-composite> natural number . \end{theorem} \begin{proof} We demonstrate <nat:31680> is a <def:six-composite> integer in consideration of $ <var:X> \times <var:E> \times <var:Y> \times <var:p> \times <var:y> \times <var:m> = <nat:31680> $ implies $ <var:Y> = <nat:12> $ , $ <var:E> = <nat:11> $ , $ <var:y> = <nat:3> $ , $ <var:m> = <nat:5> $ , $ <var:p> = <nat:2> $ , and $ <var:X> = <nat:8> $ plus because $ <nat:2> $ , $ <nat:5> $ , $ <nat:12> $ , $ <nat:11> $ , $ <nat:3> $ , and $ <nat:8> \geq <nat:2> $ . Therefore , $ <var:E> \cdot <var:p> \cdot <var:y> \cdot <var:X> \cdot <var:Y> \cdot <var:m> = <nat:31680> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:v> : nat ) := exists <var:E> <var:y> <var:Y> <var:p> <var:X> <var:m> : nat , ( <var:v> = <var:m> * <var:y> * <var:p> * <var:E> * <var:X> * <var:Y> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:31680> . Proof . unfold <def:six-composite> . exists <nat:11> . exists <nat:3> . exists <nat:12> . exists <nat:2> . exists <nat:8> . exists <nat:5> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 