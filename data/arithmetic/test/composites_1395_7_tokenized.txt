\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assuming we have $ <var:I> $ , $ <var:X> $ , $ <var:F> $ , $ <var:s> $ , $ <var:h> $ , $ <var:g> $ and $ <var:w> \geq <nat:2> $ such that with $ <var:V> \in \mathbb{N} $ , $ <var:V> = <var:s> * <var:I> * <var:X> * <var:w> * <var:g> * <var:F> * <var:h> $ , say that $ <var:V> $ is <def:seven-composite> for some $ <var:h> $ , $ <var:F> $ , $ <var:s> $ , $ <var:X> $ , $ <var:g> $ , $ <var:I> $ , $ <var:w> \in \mathbb{Z}^+ $ . \end{definition} \begin{theorem} $ <var:V> = <nat:887040> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Take $ <var:s> = <nat:8> $ , $ <var:I> = <nat:12> $ , $ <var:w> = <nat:7> $ , $ <var:g> = <nat:5> $ , $ <var:X> = <nat:4> $ , $ <var:h> = <nat:11> $ , $ <var:F> = <nat:6> $ . Note that $ <nat:11> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:7> $ , $ <nat:6> $ , $ <nat:12> \geq <nat:2> $ . Consequently , $ <var:w> $ , $ <var:h> $ , $ <var:F> $ , $ <var:X> $ , $ <var:g> $ , $ <var:s> $ and $ <var:I> \geq <nat:2> $ plus $ <nat:887040> = <var:g> \times <var:h> \times <var:w> \times <var:s> \times <var:F> \times <var:X> \times <var:I> $ is true has been proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:V> : nat ) := exists <var:h> <var:F> <var:s> <var:X> <var:g> <var:I> <var:w> : nat , ( <var:I> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:V> = <var:s> * <var:I> * <var:X> * <var:w> * <var:g> * <var:F> * <var:h> ) . Theorem <genP:1> : <def:seven-composite> <nat:887040> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:6> . exists <nat:8> . exists <nat:4> . exists <nat:5> . exists <nat:12> . exists <nat:7> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 