\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:I> $ , $ <var:l> $ , $ <var:L> $ , $ <var:x> $ , $ <var:V> $ , $ <var:S> $ as positive integers . Take as given that $ <var:E> \in \mathbb{Z}^+ $ will be considered as a <def:six-composite> natural number if $ <var:E> = <var:l> \cdot <var:x> \cdot <var:I> \cdot <var:L> \cdot <var:V> \cdot <var:S> $ plus more than <nat:1> . \end{definition} \begin{theorem} $ <var:E> = <nat:131040> $ is a <def:six-composite> positive integer . \end{theorem} \begin{proof} Let $ <var:I> = <nat:8> $ , $ <var:S> = <nat:10> $ , $ <var:V> = <nat:7> $ , $ <var:L> = <nat:6> $ , $ <var:x> = <nat:3> $ and $ <var:l> = <nat:13> $ . We show <nat:131040> is a <def:six-composite> whole number by reason of $ <var:I> = <nat:8> $ , $ <var:S> = <nat:10> $ , $ <var:x> = <nat:3> $ , $ <var:V> = <nat:7> $ , $ <var:L> = <nat:6> $ , $ <var:l> = <nat:13> $ are more than <nat:1> and in consideration of $ <nat:7> * <nat:13> * <nat:3> * <nat:10> * <nat:6> * <nat:8> = <nat:131040> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:E> : nat ) := exists <var:I> <var:l> <var:L> <var:x> <var:V> <var:S> : nat , ( <var:E> = <var:l> * <var:x> * <var:I> * <var:L> * <var:V> * <var:S> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:S> > <nat:1> ) . Theorem <genP:1> : <def:six-composite> <nat:131040> . Proof . unfold <def:six-composite> . exists <nat:8> . exists <nat:13> . exists <nat:6> . exists <nat:3> . exists <nat:7> . exists <nat:10> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 