\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:246> <var:v> + <nat:30> <var:T> + <nat:31> + <var:s> <nat:54> + <nat:118> <var:k> $ is guaranteed to be odd . \end{theorem} \begin{proof} The products $ <var:T> * <nat:30> $ , $ <nat:246> * <var:v> $ , in addition to $ <nat:54> * <var:s> $ will be even positive integers from the fact multiplying of an even number and any element of $ \mathbb{N} $ must be an even natural number . This fact is proven from the knowledge the natural numbers $ <nat:30> $ , $ <nat:246> $ , plus $ <nat:54> $ are trivially instrinsically even whole numbers . Additionally , remember the whole number $ <nat:118> $ is obviously an even natural . Hence , the product $ <nat:118> * <var:k> $ must be even also . It can be demonstrated that the formula $ <nat:30> * <var:T> + <nat:118> * <var:k> + <var:v> * <nat:246> + <nat:31> + <var:s> * <nat:54> $ is guaranteed to be odd . Take note that $ <nat:31> $ is trivially odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:T> <var:s> <var:k> : nat , Nat . odd ( <nat:246> * <var:v> + <nat:30> * <var:T> + <nat:54> * <var:s> + <nat:118> * <var:k> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:31> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 