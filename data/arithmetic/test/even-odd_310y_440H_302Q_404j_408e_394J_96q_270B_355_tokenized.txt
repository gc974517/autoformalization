\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:310> * <var:y> + <nat:440> * <var:H> + <var:Q> * <nat:302> + <nat:404> * <var:j> + <var:e> * <nat:408> + <nat:355> + <nat:394> * <var:J> + <nat:96> * <var:q> + <nat:270> * <var:B> $ is odd for some positive numbers $ <var:H> $ , $ <var:Q> $ , $ <var:J> $ , $ <var:B> $ , $ <var:e> $ , $ <var:q> $ , $ <var:y> $ , and $ <var:j> $ . \end{theorem} \begin{proof} Further , observe that the whole numbers $ <nat:310> $ , $ <nat:440> $ , $ <nat:302> $ , $ <nat:404> $ , $ <nat:408> $ , $ <nat:394> $ , $ <nat:96> $ , as well as $ <nat:270> $ are known to be even . For this reason , the terms $ <nat:310> <var:y> $ , $ <nat:440> <var:H> $ , $ <nat:302> <var:Q> $ , $ <var:j> <nat:404> $ , $ <nat:408> <var:e> $ , $ <var:J> <nat:394> $ , $ <nat:96> <var:q> $ , and likewise $ <nat:270> <var:B> $ is guaranteed to be even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:Q> <var:J> <var:B> <var:e> <var:q> <var:y> <var:j> : nat , Nat . odd ( <nat:310> * <var:y> + <nat:440> * <var:H> + <nat:302> * <var:Q> + <nat:404> * <var:j> + <nat:408> * <var:e> + <nat:394> * <var:J> + <nat:96> * <var:q> + <nat:270> * <var:B> + <nat:355> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:302> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:310> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:302> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 