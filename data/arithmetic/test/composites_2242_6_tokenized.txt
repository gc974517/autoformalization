\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assuming that we get $ <var:N> = <var:s> \times <var:x> \times <var:c> \times <var:u> \times <var:G> \times <var:U> $ with $ <var:N> \in \mathbb{Z}^+ $ plus such that $ <var:U> $ , $ <var:c> $ , $ <var:u> $ , $ <var:s> $ , $ <var:x> $ , $ <var:G> \geq <nat:2> $ taking some $ <var:U> $ , $ <var:x> $ , $ <var:u> $ , $ <var:c> $ , $ <var:G> $ , $ <var:s> \in \mathbb{N} $ , denote that $ <var:N> $ is <def:six-composite> . \end{definition} \begin{theorem} The natural number <nat:235872> is a <def:six-composite> number . \end{theorem} \begin{proof} Remember that a <def:six-composite> number is the multiplication of $ <var:c> $ , $ <var:x> $ , $ <var:U> $ , $ <var:u> $ , $ <var:s> $ , and $ <var:G> $ where $ <var:s> $ , $ <var:c> $ , $ <var:u> $ , $ <var:G> $ , $ <var:x> $ and $ <var:U> > <nat:1> $ . Assume $ <var:u> = <nat:7> $ , $ <var:s> = <nat:9> $ , $ <var:G> = <nat:12> $ , $ <var:U> = <nat:3> $ , $ <var:c> = <nat:8> $ , and $ <var:x> = <nat:13> $ . Furthermore note that $ <nat:12> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:13> $ , $ <nat:9> $ , and $ <nat:8> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:N> : nat ) := exists <var:U> <var:x> <var:u> <var:c> <var:G> <var:s> : nat , ( <var:N> = <var:s> * <var:x> * <var:c> * <var:u> * <var:G> * <var:U> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:235872> . Proof . unfold <def:six-composite> . exists <nat:3> . exists <nat:13> . exists <nat:7> . exists <nat:8> . exists <nat:12> . exists <nat:9> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 