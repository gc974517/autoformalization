\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:q> <nat:308> + <nat:480> <var:t> + <var:F> <nat:8> + <var:G> <nat:378> + <var:O> <nat:260> + <var:l> <nat:446> + <nat:135> $ is odd . \end{theorem} \begin{proof} Remember that the pair $ <nat:446> \times <var:l> $ is known to be even . This claim is true as a consequence that taking the product of an even number in $ \mathbb{Z}^+ $ with a number in $ \mathbb{N} $ is even , and must be true since the whole number $ <nat:446> $ is known to be even . What's more , the coefficients $ <nat:260> $ , $ <nat:480> $ , in addition to $ <nat:378> $ are clearly even . In consequence , the terms $ <var:O> \times <nat:260> $ , $ <nat:480> \times <var:t> $ , additionally $ <var:G> \times <nat:378> $ must be even at the same time . Take note that the number $ <nat:308> $ is obviously an even integer . Hence , the pair $ <nat:308> \times <var:q> $ is even also . The leading term $ <nat:8> $ is even . For this reason , the product $ <var:F> \times <nat:8> $ is guaranteed to be even as well . Take note $ <nat:135> $ is known as an odd integer . It can be proven that $ <var:q> \cdot <nat:308> + <nat:480> \cdot <var:t> + <nat:446> \cdot <var:l> + <var:F> \cdot <nat:8> + <nat:378> \cdot <var:G> + <nat:135> + <var:O> \cdot <nat:260> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:t> <var:F> <var:G> <var:O> <var:l> : nat , Nat . odd ( <nat:308> * <var:q> + <nat:480> * <var:t> + <nat:8> * <var:F> + <nat:378> * <var:G> + <nat:260> * <var:O> + <nat:446> * <var:l> + <nat:135> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:135> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 