\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming that we get $ <var:P> \times <var:C> \times <var:S> \times <var:g> \times <var:c> \times <var:b> \times <var:J> \times <var:E> \times <var:f> \times <var:i> = <var:m> $ assuming some integer $ <var:m> $ as well as satisfying the condition that $ <var:g> $ , $ <var:C> $ , $ <var:E> $ , $ <var:f> $ , $ <var:b> $ , $ <var:c> $ , $ <var:J> $ , $ <var:i> $ , $ <var:S> $ , and $ <var:P> \geq <nat:2> $ given some $ <var:S> $ , $ <var:J> $ , $ <var:g> $ , $ <var:f> $ , $ <var:c> $ , $ <var:P> $ , $ <var:i> $ , $ <var:E> $ , $ <var:C> $ , $ <var:b> \in \mathbb{N} $ , say that $ <var:m> $ is a <def:ten-composite> natural number . Therefore the integer <nat:56609280> is a <def:ten-composite> number . \end{theorem} \begin{proof} Notice $ <nat:8> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:13> $ , $ <nat:12> $ , $ <nat:5> $ , $ <nat:9> \geq <nat:2> $ . Furthermore note moreover $ <nat:56609280> = <nat:7> \times <nat:13> \times <nat:5> \times <nat:8> \times <nat:9> \times <nat:3> \times <nat:2> \times <nat:12> \times <nat:6> \times <nat:4> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:ten-composite> ( <var:m> : nat ) := exists <var:S> <var:J> <var:g> <var:f> <var:c> <var:P> <var:i> <var:E> <var:C> <var:b> : nat , ( <var:P> * <var:C> * <var:S> * <var:g> * <var:c> * <var:b> * <var:J> * <var:E> * <var:f> * <var:i> = <var:m> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) . Theorem <genP:1> : <def:ten-composite> <nat:56609280> . Proof . unfold <def:ten-composite> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } exists <nat:7> . exists <nat:4> . exists <nat:9> . exists <nat:8> . exists <nat:12> . exists <nat:5> . exists <nat:3> . exists <nat:6> . exists <nat:13> . exists <nat:2> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 