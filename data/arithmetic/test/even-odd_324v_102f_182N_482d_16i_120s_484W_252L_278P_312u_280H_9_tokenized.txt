\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:16> <var:i> + <var:u> <nat:312> + <nat:252> <var:L> + <var:N> <nat:182> + <nat:482> <var:d> + <nat:484> <var:W> + <nat:324> <var:v> + <nat:280> <var:H> + <nat:102> <var:f> + <var:P> <nat:278> + <nat:9> + <nat:120> <var:s> $ will be odd for all variables $ <var:N> $ , $ <var:v> $ , $ <var:s> $ , $ <var:P> $ , $ <var:i> $ , $ <var:d> $ , $ <var:u> $ , $ <var:W> $ , $ <var:L> $ , $ <var:f> $ , and $ <var:H> $ . \end{theorem} \begin{proof} We employ the knowledge that the formula $ <nat:484> \times <var:W> + <nat:9> + <var:d> \times <nat:482> + <nat:324> \times <var:v> + <nat:278> \times <var:P> + <nat:120> \times <var:s> + <nat:280> \times <var:H> + <nat:312> \times <var:u> + <nat:182> \times <var:N> + <var:L> \times <nat:252> + <nat:16> \times <var:i> + <var:f> \times <nat:102> $ is known as odd from the knowledge $ <var:v> * <nat:324> + <var:f> * <nat:102> + <nat:182> * <var:N> + <var:d> * <nat:482> + <var:i> * <nat:16> + <nat:120> * <var:s> + <var:W> * <nat:484> + <var:L> * <nat:252> + <nat:278> * <var:P> + <var:u> * <nat:312> + <var:H> * <nat:280> $ is guaranteed to be even . What's more , the numbers $ <nat:324> $ , $ <nat:102> $ , $ <nat:182> $ , $ <nat:482> $ , $ <nat:16> $ , $ <nat:120> $ , $ <nat:484> $ , $ <nat:252> $ , $ <nat:278> $ , $ <nat:312> $ , and likewise $ <nat:280> $ are known as even . Accordingly , the pairs $ <var:v> <nat:324> $ , $ <nat:102> <var:f> $ , $ <nat:182> <var:N> $ , $ <nat:482> <var:d> $ , $ <var:i> <nat:16> $ , $ <nat:120> <var:s> $ , $ <var:W> <nat:484> $ , $ <var:L> <nat:252> $ , $ <nat:278> <var:P> $ , $ <nat:312> <var:u> $ , as well as $ <var:H> <nat:280> $ will be even at the same time . Since the multiplication between an even element of $ \mathbb{N} $ with a number in $ \mathbb{Z}^+ $ is guaranteed to be even our main result must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:v> <var:s> <var:P> <var:i> <var:d> <var:u> <var:W> <var:L> <var:f> <var:H> : nat , Nat . odd ( <nat:16> * <var:i> + <nat:312> * <var:u> + <nat:252> * <var:L> + <nat:182> * <var:N> + <nat:482> * <var:d> + <nat:484> * <var:W> + <nat:324> * <var:v> + <nat:280> * <var:H> + <nat:102> * <var:f> + <nat:278> * <var:P> + <nat:120> * <var:s> + <nat:9> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:278> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:i> + <nat:312> * <var:u> + <nat:252> * <var:L> + <nat:182> * <var:N> + <nat:482> * <var:d> + <nat:484> * <var:W> + <nat:324> * <var:v> + <nat:280> * <var:H> + <nat:102> * <var:f> + <nat:278> * <var:P> + <nat:120> * <var:s> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 