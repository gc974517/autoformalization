\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:221> + <var:A> \times <nat:28> + <var:d> \times <nat:42> + <var:Y> \times <nat:468> + <var:s> \times <nat:92> + <nat:340> \times <var:R> + <var:t> \times <nat:404> + <nat:98> \times <var:i> $ will be odd . \end{theorem} \begin{proof} It can be justified that the sum $ <var:i> * <nat:98> + <nat:28> * <var:A> + <nat:92> * <var:s> + <var:Y> * <nat:468> + <var:d> * <nat:42> + <nat:404> * <var:t> + <nat:221> + <var:R> * <nat:340> $ is guaranteed to be odd . The terms $ <var:R> <nat:340> $ , $ <nat:404> <var:t> $ , in addition to $ <nat:468> <var:Y> $ are even numbers from the knowledge the product between an even natural with any integer is obviously an even element of $ \mathbb{N} $ . Further , the pairs $ <var:s> <nat:92> $ , $ <nat:42> <var:d> $ , and moreover $ <nat:98> <var:i> $ are known as even positive integers . $ <var:A> <nat:28> $ is trivially even . The adding of even numbers in $ \mathbb{Z}^+ $ collectively with an odd whole number will be an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:d> <var:Y> <var:s> <var:R> <var:t> <var:i> : nat , Nat . odd ( <nat:28> * <var:A> + <nat:42> * <var:d> + <nat:468> * <var:Y> + <nat:92> * <var:s> + <nat:340> * <var:R> + <nat:404> * <var:t> + <nat:98> * <var:i> + <nat:221> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:340> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 