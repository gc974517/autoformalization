\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:446> <var:V> + <var:K> <nat:200> + <nat:334> <var:Q> + <var:L> <nat:336> + <var:x> <nat:56> + <var:s> <nat:246> + <nat:110> <var:T> + <nat:99> + <var:A> <nat:134> + <nat:492> <var:w> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be checked that our proposition is true . We know that $ <nat:99> $ is guaranteed to be an odd element of $ \mathbb{N} $ . The terms $ <nat:446> <var:V> $ , $ <nat:200> <var:K> $ , $ <nat:334> <var:Q> $ , $ <var:L> <nat:336> $ , $ <nat:56> <var:x> $ , $ <var:s> <nat:246> $ , $ <var:T> <nat:110> $ , $ <nat:134> <var:A> $ , and likewise $ <nat:492> <var:w> $ will be even numbers . This fact is true by reason that the natural numbers $ <nat:446> $ , $ <nat:200> $ , $ <nat:334> $ , $ <nat:336> $ , $ <nat:56> $ , $ <nat:246> $ , $ <nat:110> $ , $ <nat:134> $ , and likewise $ <nat:492> $ are obviously even natural numbers . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:K> <var:Q> <var:L> <var:x> <var:s> <var:T> <var:A> <var:w> : nat , Nat . odd ( <nat:446> * <var:V> + <nat:200> * <var:K> + <nat:334> * <var:Q> + <nat:336> * <var:L> + <nat:56> * <var:x> + <nat:246> * <var:s> + <nat:110> * <var:T> + <nat:134> * <var:A> + <nat:492> * <var:w> + <nat:99> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:99> = true ) . { auto . } assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:336> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 