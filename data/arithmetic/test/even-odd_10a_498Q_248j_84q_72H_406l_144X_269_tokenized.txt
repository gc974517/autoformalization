\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:248> \cdot <var:j> + <nat:72> \cdot <var:H> + <nat:269> + <var:Q> \cdot <nat:498> + <nat:406> \cdot <var:l> + <var:X> \cdot <nat:144> + <nat:84> \cdot <var:q> + <nat:10> \cdot <var:a> $ is guaranteed to be odd using every variables $ <var:a> $ , $ <var:H> $ , $ <var:X> $ , $ <var:l> $ , $ <var:j> $ , $ <var:q> $ , and $ <var:Q> $ . \end{theorem} \begin{proof} The leading term $ <nat:144> $ is trivially an even element of $ \mathbb{N} $ . As a consequence , $ <nat:144> \cdot <var:X> $ will be even as well . Take note that $ <var:a> \cdot <nat:10> $ is even because the integer $ <nat:10> $ is obviously even . What's more , the term $ <nat:406> \cdot <var:l> $ is known to be even from the fact the coefficient $ <nat:406> $ is guaranteed to be obviously an even positive integer . $ <nat:84> \cdot <var:q> $ is known to be an even positive integer . This is proven as a consequence that the leading term $ <nat:84> $ is known as even . Observe $ <nat:248> \cdot <var:j> $ is known to be even . This is true by reason that the whole number $ <nat:248> $ is clearly by its very nature an even natural number . The whole number $ <nat:72> $ is even . In consequence , $ <nat:72> \cdot <var:H> $ must be even additionally . On top of this , observe that the number $ <nat:498> $ is obviously even . Thus , the product $ <nat:498> \cdot <var:Q> $ is guaranteed to be even as well . Since the summing of an even number and an odd natural must be odd , hence $ <nat:10> <var:a> + <nat:498> <var:Q> + <var:j> <nat:248> + <nat:269> + <nat:84> <var:q> + <nat:72> <var:H> + <nat:406> <var:l> + <nat:144> <var:X> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:a> <var:H> <var:X> <var:l> <var:j> <var:q> <var:Q> : nat , Nat . odd ( <nat:248> * <var:j> + <nat:72> * <var:H> + <nat:498> * <var:Q> + <nat:406> * <var:l> + <nat:144> * <var:X> + <nat:84> * <var:q> + <nat:10> * <var:a> + <nat:269> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:84> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 