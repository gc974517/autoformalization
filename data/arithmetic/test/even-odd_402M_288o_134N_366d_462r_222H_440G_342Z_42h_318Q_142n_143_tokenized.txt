\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:M> \cdot <nat:402> + <nat:288> \cdot <var:o> + <nat:134> \cdot <var:N> + <var:d> \cdot <nat:366> + <nat:143> + <nat:462> \cdot <var:r> + <var:H> \cdot <nat:222> + <var:G> \cdot <nat:440> + <nat:342> \cdot <var:Z> + <var:h> \cdot <nat:42> + <var:Q> \cdot <nat:318> + <nat:142> \cdot <var:n> $ is odd taking some integers $ <var:h> $ , $ <var:N> $ , $ <var:G> $ , $ <var:r> $ , $ <var:d> $ , $ <var:Q> $ , $ <var:Z> $ , $ <var:M> $ , $ <var:n> $ , $ <var:o> $ , and $ <var:H> $ . \end{theorem} \begin{proof} We justify our lemma is true by using the fact the totaling between even positive integers concurrently and an odd number is guaranteed to be an odd number in $ \mathbb{N} $ . Adding on , notice that the numbers $ <nat:402> $ , $ <nat:288> $ , $ <nat:134> $ , $ <nat:366> $ , $ <nat:462> $ , $ <nat:222> $ , $ <nat:440> $ , $ <nat:342> $ , $ <nat:42> $ , $ <nat:318> $ , and moreover $ <nat:142> $ are even whole numbers . Therefore , the pairs $ <var:M> \cdot <nat:402> $ , $ <var:o> \cdot <nat:288> $ , $ <var:N> \cdot <nat:134> $ , $ <var:d> \cdot <nat:366> $ , $ <var:r> \cdot <nat:462> $ , $ <var:H> \cdot <nat:222> $ , $ <var:G> \cdot <nat:440> $ , $ <nat:342> \cdot <var:Z> $ , $ <var:h> \cdot <nat:42> $ , $ <nat:318> \cdot <var:Q> $ , and likewise $ <nat:142> \cdot <var:n> $ must be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:N> <var:G> <var:r> <var:d> <var:Q> <var:Z> <var:M> <var:n> <var:o> <var:H> : nat , Nat . odd ( <nat:402> * <var:M> + <nat:288> * <var:o> + <nat:134> * <var:N> + <nat:366> * <var:d> + <nat:462> * <var:r> + <nat:222> * <var:H> + <nat:440> * <var:G> + <nat:342> * <var:Z> + <nat:42> * <var:h> + <nat:318> * <var:Q> + <nat:142> * <var:n> + <nat:143> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:402> = true ) . { auto . } assert ( <genH> : Nat . even <nat:288> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:402> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:288> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 