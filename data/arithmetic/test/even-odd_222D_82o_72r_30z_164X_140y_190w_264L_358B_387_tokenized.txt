\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every unknowns $ <var:D> $ , $ <var:w> $ , $ <var:L> $ , $ <var:o> $ , $ <var:X> $ , $ <var:B> $ , $ <var:r> $ , $ <var:y> $ , and $ <var:z> $ $ <var:D> \times <nat:222> + <var:o> \times <nat:82> + <nat:72> \times <var:r> + <var:z> \times <nat:30> + <nat:164> \times <var:X> + <nat:140> \times <var:y> + <var:w> \times <nat:190> + <nat:264> \times <var:L> + <nat:387> + <var:B> \times <nat:358> $ is guaranteed to be odd . \end{theorem} \begin{proof} We justify the lemma is proven . The products $ <var:D> \cdot <nat:222> $ , $ <nat:82> \cdot <var:o> $ , $ <var:r> \cdot <nat:72> $ , $ <nat:30> \cdot <var:z> $ , $ <nat:164> \cdot <var:X> $ , $ <var:y> \cdot <nat:140> $ , $ <nat:190> \cdot <var:w> $ , $ <var:L> \cdot <nat:264> $ , plus $ <var:B> \cdot <nat:358> $ are guaranteed to be even numbers in $ \mathbb{Z}^+ $ . This claim is proven by reason that the integers $ <nat:222> $ , $ <nat:82> $ , $ <nat:72> $ , $ <nat:30> $ , $ <nat:164> $ , $ <nat:140> $ , $ <nat:190> $ , $ <nat:264> $ , and $ <nat:358> $ are trivially themselves even elements of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:w> <var:L> <var:o> <var:X> <var:B> <var:r> <var:y> <var:z> : nat , Nat . odd ( <nat:222> * <var:D> + <nat:82> * <var:o> + <nat:72> * <var:r> + <nat:30> * <var:z> + <nat:164> * <var:X> + <nat:140> * <var:y> + <nat:190> * <var:w> + <nat:264> * <var:L> + <nat:358> * <var:B> + <nat:387> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 