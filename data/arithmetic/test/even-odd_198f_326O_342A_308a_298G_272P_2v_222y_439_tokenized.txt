\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:2> \times <var:v> + <nat:298> \times <var:G> + <nat:342> \times <var:A> + <nat:198> \times <var:f> + <var:a> \times <nat:308> + <nat:326> \times <var:O> + <var:P> \times <nat:272> + <nat:439> + <var:y> \times <nat:222> $ will be odd assuming every terms $ <var:O> $ , $ <var:v> $ , $ <var:y> $ , $ <var:G> $ , $ <var:P> $ , $ <var:a> $ , $ <var:A> $ , and $ <var:f> $ . \end{theorem} \begin{proof} We justify $ <var:v> * <nat:2> + <var:P> * <nat:272> + <nat:342> * <var:A> + <nat:198> * <var:f> + <nat:308> * <var:a> + <var:O> * <nat:326> + <nat:439> + <var:G> * <nat:298> + <nat:222> * <var:y> $ is odd . Recall that the summation $ <nat:308> <var:a> + <nat:198> <var:f> + <nat:222> <var:y> + <var:A> <nat:342> + <var:v> <nat:2> + <nat:298> <var:G> + <var:O> <nat:326> + <nat:272> <var:P> $ is clearly even . We know that the integers $ <nat:308> $ , $ <nat:198> $ , $ <nat:222> $ , $ <nat:342> $ , $ <nat:2> $ , $ <nat:298> $ , $ <nat:326> $ , additionally $ <nat:272> $ will be even elements of $ \mathbb{N} $ . Accordingly , the pairs $ <var:a> \cdot <nat:308> $ , $ <var:f> \cdot <nat:198> $ , $ <var:y> \cdot <nat:222> $ , $ <var:A> \cdot <nat:342> $ , $ <nat:2> \cdot <var:v> $ , $ <nat:298> \cdot <var:G> $ , $ <var:O> \cdot <nat:326> $ , and likewise $ <nat:272> \cdot <var:P> $ is guaranteed to be even also . From the knowledge the product between even numbers with any number in $ \mathbb{Z}^+ $ is an even natural number the summation $ <nat:198> <var:f> + <var:O> <nat:326> + <var:A> <nat:342> + <var:a> <nat:308> + <var:G> <nat:298> + <nat:272> <var:P> + <nat:2> <var:v> + <var:y> <nat:222> $ is even . The addition of even elements of $ \mathbb{Z}^+ $ concurrently and an odd element of $ \mathbb{N} $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:O> <var:v> <var:y> <var:G> <var:P> <var:a> <var:A> <var:f> : nat , Nat . odd ( <nat:2> * <var:v> + <nat:298> * <var:G> + <nat:342> * <var:A> + <nat:198> * <var:f> + <nat:308> * <var:a> + <nat:326> * <var:O> + <nat:272> * <var:P> + <nat:222> * <var:y> + <nat:439> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even <nat:298> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:v> + <nat:298> * <var:G> + <nat:342> * <var:A> + <nat:198> * <var:f> + <nat:308> * <var:a> + <nat:326> * <var:O> + <nat:272> * <var:P> + <nat:222> * <var:y> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 