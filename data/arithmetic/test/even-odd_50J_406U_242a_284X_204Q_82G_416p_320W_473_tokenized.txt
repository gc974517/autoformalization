\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:J> \times <nat:50> + <var:U> \times <nat:406> + <nat:473> + <nat:242> \times <var:a> + <var:X> \times <nat:284> + <var:Q> \times <nat:204> + <var:G> \times <nat:82> + <var:p> \times <nat:416> + <var:W> \times <nat:320> $ is odd . \end{theorem} \begin{proof} The term $ <nat:284> \cdot <var:X> $ is clearly an even positive integer . This fact holds since multiplying between an even number in $ \mathbb{N} $ with some element of $ \mathbb{Z}^+ $ is even . The terms $ <var:U> \cdot <nat:406> $ , $ <nat:320> \cdot <var:W> $ , $ <var:J> \cdot <nat:50> $ , and $ <var:G> \cdot <nat:82> $ are even . The pairs $ <var:p> \cdot <nat:416> $ additionally $ <var:a> \cdot <nat:242> $ must be even . The product $ <nat:204> \cdot <var:Q> $ is guaranteed to be even from the knowledge the product between an even number and an arbitrary element of $ \mathbb{Z}^+ $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:U> <var:a> <var:X> <var:Q> <var:G> <var:p> <var:W> : nat , Nat . odd ( <nat:50> * <var:J> + <nat:406> * <var:U> + <nat:242> * <var:a> + <nat:284> * <var:X> + <nat:204> * <var:Q> + <nat:82> * <var:G> + <nat:416> * <var:p> + <nat:320> * <var:W> + <nat:473> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:284> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 