\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:496> * <var:K> + <var:P> * <nat:340> + <nat:134> * <var:S> + <nat:142> * <var:u> + <var:z> * <nat:40> + <var:p> * <nat:378> + <nat:473> + <var:D> * <nat:296> $ must be odd for all positive numbers $ <var:z> $ , $ <var:S> $ , $ <var:D> $ , $ <var:u> $ , $ <var:p> $ , $ <var:P> $ , and $ <var:K> $ . \end{theorem} \begin{proof} Our claim holds because $ <var:K> <nat:496> + <nat:296> <var:D> + <var:P> <nat:340> + <var:p> <nat:378> + <nat:40> <var:z> + <nat:134> <var:S> + <var:u> <nat:142> $ is obviously even . Remember that the addition between even whole numbers successively and an even integer is even . We know $ <nat:496> \times <var:K> $ is trivially an even number in $ \mathbb{Z}^+ $ . This claim must be true since the positive integer $ <nat:496> $ is obviously even . In addition , see that the positive integer $ <nat:40> $ is obviously even . Then , the pair $ <nat:40> \times <var:z> $ is even at the same time . What's more , the product $ <var:S> \times <nat:134> $ is guaranteed to be an even whole number . This fact holds from the fact the whole number $ <nat:134> $ is known to be even . Additionally , the positive integer $ <nat:296> $ is known as an even positive integer . Consequently , $ <nat:296> \times <var:D> $ will be even as well . The number $ <nat:340> $ is guaranteed to be an even natural . Consequently , $ <nat:340> \times <var:P> $ is even at the same time . The pair $ <var:p> \times <nat:378> $ is trivially an even number in $ \mathbb{N} $ . This fact is proven by reason that the integer $ <nat:378> $ is trivially an even number in $ \mathbb{N} $ . Furthermore , the pair $ <nat:142> \times <var:u> $ is obviously an even number . This claim holds from the knowledge taking the product of an even positive integer with any number will be an even positive integer . This fact holds from the knowledge the integer $ <nat:142> $ is guaranteed to be even . and likewise as a consequence that multiplying of an even whole number with an arbitrary positive integer is an even whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:S> <var:D> <var:u> <var:p> <var:P> <var:K> : nat , Nat . odd ( <nat:496> * <var:K> + <nat:340> * <var:P> + <nat:134> * <var:S> + <nat:142> * <var:u> + <nat:40> * <var:z> + <nat:378> * <var:p> + <nat:296> * <var:D> + <nat:473> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:K> + <nat:340> * <var:P> + <nat:134> * <var:S> + <nat:142> * <var:u> + <nat:40> * <var:z> + <nat:378> * <var:p> + <nat:296> * <var:D> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 