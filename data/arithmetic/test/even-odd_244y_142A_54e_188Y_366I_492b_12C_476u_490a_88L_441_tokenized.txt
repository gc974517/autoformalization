\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With all unknowns $ <var:y> $ , $ <var:Y> $ , $ <var:L> $ , $ <var:b> $ , $ <var:a> $ , $ <var:u> $ , $ <var:e> $ , $ <var:I> $ , $ <var:C> $ , and $ <var:A> $ the expression $ <var:y> * <nat:244> + <var:A> * <nat:142> + <nat:54> * <var:e> + <nat:441> + <nat:188> * <var:Y> + <var:I> * <nat:366> + <var:b> * <nat:492> + <var:C> * <nat:12> + <var:u> * <nat:476> + <nat:490> * <var:a> + <var:L> * <nat:88> $ will be odd . \end{theorem} \begin{proof} Remember $ <nat:441> $ is guaranteed to be an odd natural number . It can be checked that our result is proven . Recall the pairs $ <nat:244> <var:y> $ , $ <var:Y> <nat:188> $ , $ <var:u> <nat:476> $ , $ <var:e> <nat:54> $ , and moreover $ <nat:490> <var:a> $ are known as even . Additionally , the pairs $ <var:b> <nat:492> $ , $ <nat:88> <var:L> $ , $ <nat:12> <var:C> $ , as well as $ <var:I> <nat:366> $ are guaranteed to be even integers . The product $ <nat:142> <var:A> $ is known to be an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:Y> <var:L> <var:b> <var:a> <var:u> <var:e> <var:I> <var:C> <var:A> : nat , Nat . odd ( <nat:244> * <var:y> + <nat:142> * <var:A> + <nat:54> * <var:e> + <nat:188> * <var:Y> + <nat:366> * <var:I> + <nat:492> * <var:b> + <nat:12> * <var:C> + <nat:476> * <var:u> + <nat:490> * <var:a> + <nat:88> * <var:L> + <nat:441> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:441> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 