\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With any positive numbers $ <var:m> $ , $ <var:o> $ , $ <var:W> $ , $ <var:R> $ , $ <var:X> $ , $ <var:V> $ , $ <var:P> $ , $ <var:x> $ , and $ <var:b> $ $ <nat:199> + <var:x> \times <nat:276> + <nat:394> \times <var:W> + <var:o> \times <nat:84> + <var:P> \times <nat:392> + <var:m> \times <nat:78> + <nat:230> \times <var:X> + <var:b> \times <nat:384> + <var:R> \times <nat:348> + <var:V> \times <nat:314> $ must be odd . \end{theorem} \begin{proof} Notice that the summing of an even positive integer and an odd natural is guaranteed to be odd . We know that the coefficients $ <nat:276> $ , $ <nat:394> $ , $ <nat:84> $ , $ <nat:392> $ , $ <nat:78> $ , $ <nat:230> $ , $ <nat:384> $ , $ <nat:348> $ , in addition to $ <nat:314> $ are known to be even positive integers . As a consequence , the pairs $ <nat:276> \times <var:x> $ , $ <nat:394> \times <var:W> $ , $ <var:o> \times <nat:84> $ , $ <nat:392> \times <var:P> $ , $ <var:m> \times <nat:78> $ , $ <nat:230> \times <var:X> $ , $ <var:b> \times <nat:384> $ , $ <var:R> \times <nat:348> $ , in addition to $ <var:V> \times <nat:314> $ is guaranteed to be even also . It can be verified that the theorem is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:o> <var:W> <var:R> <var:X> <var:V> <var:P> <var:x> <var:b> : nat , Nat . odd ( <nat:276> * <var:x> + <nat:394> * <var:W> + <nat:84> * <var:o> + <nat:392> * <var:P> + <nat:78> * <var:m> + <nat:230> * <var:X> + <nat:384> * <var:b> + <nat:348> * <var:R> + <nat:314> * <var:V> + <nat:199> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:84> = true ) . { auto . } assert ( <genH> : Nat . even <nat:392> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 