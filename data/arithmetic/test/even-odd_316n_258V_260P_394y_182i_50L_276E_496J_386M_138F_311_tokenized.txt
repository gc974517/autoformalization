\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all variables $ <var:L> $ , $ <var:n> $ , $ <var:i> $ , $ <var:F> $ , $ <var:E> $ , $ <var:y> $ , $ <var:V> $ , $ <var:J> $ , $ <var:M> $ , and $ <var:P> $ the summation $ <nat:316> <var:n> + <nat:258> <var:V> + <nat:311> + <nat:260> <var:P> + <var:y> <nat:394> + <var:i> <nat:182> + <nat:50> <var:L> + <var:E> <nat:276> + <var:J> <nat:496> + <nat:386> <var:M> + <nat:138> <var:F> $ is odd . \end{theorem} \begin{proof} Remember that the numbers $ <nat:258> $ , $ <nat:276> $ , $ <nat:394> $ , and moreover $ <nat:316> $ are clearly even The leading terms $ <nat:138> $ , $ <nat:182> $ , $ <nat:260> $ , $ <nat:386> $ , and moreover $ <nat:50> $ are obviously even elements of $ \mathbb{Z}^+ $ In addition to this , take note that the integer $ <nat:496> $ is even It can be shown that the claim is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:n> <var:i> <var:F> <var:E> <var:y> <var:V> <var:J> <var:M> <var:P> : nat , Nat . odd ( <nat:316> * <var:n> + <nat:258> * <var:V> + <nat:260> * <var:P> + <nat:394> * <var:y> + <nat:182> * <var:i> + <nat:50> * <var:L> + <nat:276> * <var:E> + <nat:496> * <var:J> + <nat:386> * <var:M> + <nat:138> * <var:F> + <nat:311> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:316> = true ) . { auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 