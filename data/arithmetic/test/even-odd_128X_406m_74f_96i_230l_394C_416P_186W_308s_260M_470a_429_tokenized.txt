\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some natural numbers $ <var:P> $ , $ <var:l> $ , $ <var:W> $ , $ <var:C> $ , $ <var:a> $ , $ <var:M> $ , $ <var:f> $ , $ <var:X> $ , $ <var:m> $ , $ <var:i> $ , and $ <var:s> $ $ <nat:429> + <nat:308> <var:s> + <var:W> <nat:186> + <var:M> <nat:260> + <var:P> <nat:416> + <nat:96> <var:i> + <var:X> <nat:128> + <nat:406> <var:m> + <var:C> <nat:394> + <nat:230> <var:l> + <nat:74> <var:f> + <nat:470> <var:a> $ must be odd . \end{theorem} \begin{proof} The expression $ <var:X> \times <nat:128> + <var:m> \times <nat:406> + <var:f> \times <nat:74> + <var:i> \times <nat:96> + <nat:230> \times <var:l> + <nat:394> \times <var:C> + <nat:416> \times <var:P> + <nat:186> \times <var:W> + <var:s> \times <nat:308> + <nat:260> \times <var:M> + <nat:470> \times <var:a> $ is even . Adding on , the leading terms $ <nat:128> $ , $ <nat:406> $ , $ <nat:74> $ , $ <nat:96> $ , $ <nat:230> $ , $ <nat:394> $ , $ <nat:416> $ , $ <nat:186> $ , $ <nat:308> $ , $ <nat:260> $ , plus $ <nat:470> $ will be even . So , the pairs $ <var:X> * <nat:128> $ , $ <nat:406> * <var:m> $ , $ <nat:74> * <var:f> $ , $ <var:i> * <nat:96> $ , $ <nat:230> * <var:l> $ , $ <nat:394> * <var:C> $ , $ <nat:416> * <var:P> $ , $ <var:W> * <nat:186> $ , $ <nat:308> * <var:s> $ , $ <nat:260> * <var:M> $ , additionally $ <var:a> * <nat:470> $ must be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:l> <var:W> <var:C> <var:a> <var:M> <var:f> <var:X> <var:m> <var:i> <var:s> : nat , Nat . odd ( <nat:308> * <var:s> + <nat:186> * <var:W> + <nat:260> * <var:M> + <nat:416> * <var:P> + <nat:96> * <var:i> + <nat:128> * <var:X> + <nat:406> * <var:m> + <nat:394> * <var:C> + <nat:230> * <var:l> + <nat:74> * <var:f> + <nat:470> * <var:a> + <nat:429> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:74> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:470> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:74> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:470> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:s> + <nat:186> * <var:W> + <nat:260> * <var:M> + <nat:416> * <var:P> + <nat:96> * <var:i> + <nat:128> * <var:X> + <nat:406> * <var:m> + <nat:394> * <var:C> + <nat:230> * <var:l> + <nat:74> * <var:f> + <nat:470> * <var:a> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 