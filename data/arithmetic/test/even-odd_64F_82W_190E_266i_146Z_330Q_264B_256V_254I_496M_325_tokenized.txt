\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given positive numbers $ <var:B> $ , $ <var:I> $ , $ <var:E> $ , $ <var:Q> $ , $ <var:V> $ , $ <var:i> $ , $ <var:M> $ , $ <var:F> $ , $ <var:Z> $ , and $ <var:W> $ the expression $ <nat:325> + <var:F> <nat:64> + <nat:82> <var:W> + <nat:190> <var:E> + <nat:266> <var:i> + <var:Z> <nat:146> + <nat:330> <var:Q> + <var:B> <nat:264> + <var:V> <nat:256> + <nat:254> <var:I> + <nat:496> <var:M> $ is guaranteed to be odd . \end{theorem} \begin{proof} Observe that the integers $ <nat:64> $ , $ <nat:82> $ , $ <nat:190> $ , $ <nat:266> $ , $ <nat:146> $ , $ <nat:330> $ , $ <nat:264> $ , $ <nat:256> $ , $ <nat:254> $ , and $ <nat:496> $ are known to be even . Consequently , the terms $ <nat:64> * <var:F> $ , $ <nat:82> * <var:W> $ , $ <var:E> * <nat:190> $ , $ <nat:266> * <var:i> $ , $ <nat:146> * <var:Z> $ , $ <nat:330> * <var:Q> $ , $ <nat:264> * <var:B> $ , $ <nat:256> * <var:V> $ , $ <nat:254> * <var:I> $ , as well as $ <nat:496> * <var:M> $ will be even at the same time . We show this main result holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:B> <var:I> <var:E> <var:Q> <var:V> <var:i> <var:M> <var:F> <var:Z> <var:W> : nat , Nat . odd ( <nat:64> * <var:F> + <nat:82> * <var:W> + <nat:190> * <var:E> + <nat:266> * <var:i> + <nat:146> * <var:Z> + <nat:330> * <var:Q> + <nat:264> * <var:B> + <nat:256> * <var:V> + <nat:254> * <var:I> + <nat:496> * <var:M> + <nat:325> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 