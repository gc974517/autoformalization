\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Whenever we have $ <var:a> = <var:Q> \cdot <var:V> \cdot <var:s> \cdot <var:Z> \cdot <var:R> \cdot <var:N> $ given $ <var:a> \in \mathbb{Z}^+ $ as well as so that $ <var:Q> $ , $ <var:V> $ , $ <var:R> $ , $ <var:Z> $ , $ <var:N> $ , and $ <var:s> \geq <nat:2> $ with some $ <var:V> $ , $ <var:Q> $ , $ <var:Z> $ , $ <var:N> $ , $ <var:R> $ , $ <var:s> \in \mathbb{Z}^+ $ , say that $ <var:a> $ is <def:six-composite> . Thus $ <nat:72800> = <var:a> $ is a <def:six-composite> natural number . \end{theorem} \begin{proof} Observe that $ <nat:72800> = <nat:8> * <nat:10> * <nat:2> * <nat:5> * <nat:7> * <nat:13> $ . Further notice that $ <nat:7> $ , $ <nat:10> $ , $ <nat:5> $ , $ <nat:13> $ , $ <nat:8> $ , and $ <nat:2> \geq <nat:2> $ . This implies the theory is valid . Because of this , <nat:72800> is the product between some whole numbers $ <var:N> $ , $ <var:Q> $ , $ <var:R> $ , $ <var:Z> $ , $ <var:V> $ , $ <var:s> $ as well as $ <var:s> $ , $ <var:N> $ , $ <var:Q> $ , $ <var:Z> $ , $ <var:R> $ and $ <var:V> $ are greater than or equal to <nat:2> has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:a> : nat ) := exists <var:V> <var:Q> <var:Z> <var:N> <var:R> <var:s> : nat , ( <var:a> = <var:Q> * <var:V> * <var:s> * <var:Z> * <var:R> * <var:N> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:72800> . Proof . unfold <def:six-composite> . exists <nat:7> . exists <nat:8> . exists <nat:5> . exists <nat:13> . exists <nat:10> . exists <nat:2> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 