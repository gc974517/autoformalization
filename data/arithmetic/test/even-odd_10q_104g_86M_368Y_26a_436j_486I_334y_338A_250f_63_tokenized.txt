\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:10> \cdot <var:q> + <var:g> \cdot <nat:104> + <nat:86> \cdot <var:M> + <nat:368> \cdot <var:Y> + <nat:26> \cdot <var:a> + <var:j> \cdot <nat:436> + <var:I> \cdot <nat:486> + <nat:334> \cdot <var:y> + <var:A> \cdot <nat:338> + <var:f> \cdot <nat:250> + <nat:63> $ will be odd . \end{theorem} \begin{proof} Observe $ <nat:63> $ is an odd whole number . We show this proposition is proven . The pair $ <var:M> <nat:86> $ is known to be an even number in $ \mathbb{N} $ as a consequence that the multiplication between an even number and any positive integer is guaranteed to be even . The products $ <var:j> <nat:436> $ , $ <nat:338> <var:A> $ , $ <nat:368> <var:Y> $ , plus $ <nat:26> <var:a> $ are guaranteed to be even integers from the knowledge multiplying between an even element of $ \mathbb{N} $ with an arbitrary natural number is even . Likewise , the terms $ <nat:486> <var:I> $ , $ <nat:10> <var:q> $ , $ <var:g> <nat:104> $ , and likewise $ <nat:250> <var:f> $ are known as even . See that the term $ <var:y> <nat:334> $ is an even natural number since taking the product between an even element of $ \mathbb{N} $ with any positive integer will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:g> <var:M> <var:Y> <var:a> <var:j> <var:I> <var:y> <var:A> <var:f> : nat , Nat . odd ( <nat:10> * <var:q> + <nat:104> * <var:g> + <nat:86> * <var:M> + <nat:368> * <var:Y> + <nat:26> * <var:a> + <nat:436> * <var:j> + <nat:486> * <var:I> + <nat:334> * <var:y> + <nat:338> * <var:A> + <nat:250> * <var:f> + <nat:63> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:63> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 