\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given that we have $ <var:d> = <var:h> * <var:A> * <var:P> * <var:o> * <var:T> * <var:g> * <var:b> * <var:y> * <var:l> $ with $ <var:d> \in \mathbb{N} $ plus such that $ <var:A> $ , $ <var:l> $ , $ <var:T> $ , $ <var:h> $ , $ <var:b> $ , $ <var:g> $ , $ <var:P> $ , $ <var:o> $ and $ <var:y> \geq <nat:2> $ assuming some whole numbers $ <var:l> $ , $ <var:P> $ , $ <var:b> $ , $ <var:T> $ , $ <var:o> $ , $ <var:A> $ , $ <var:g> $ , $ <var:y> $ , $ <var:h> $ , then claim that $ <var:d> $ is a <def:nine-composite> number . So $ <nat:43243200> = <var:d> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Let $ <var:g> = <nat:7> $ , $ <var:b> = <nat:4> $ , $ <var:T> = <nat:5> $ , $ <var:o> = <nat:12> $ , $ <var:h> = <nat:2> $ , $ <var:A> = <nat:11> $ , $ <var:P> = <nat:13> $ , $ <var:l> = <nat:9> $ , and $ <var:y> = <nat:10> $ . We prove our theory holds considering $ <var:A> = <nat:11> $ , $ <var:l> = <nat:9> $ , $ <var:b> = <nat:4> $ , $ <var:h> = <nat:2> $ , $ <var:y> = <nat:10> $ , $ <var:g> = <nat:7> $ , $ <var:P> = <nat:13> $ , $ <var:o> = <nat:12> $ , $ <var:T> = <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:d> : nat ) := exists <var:l> <var:P> <var:b> <var:T> <var:o> <var:A> <var:g> <var:y> <var:h> : nat , ( <var:d> = <var:h> * <var:A> * <var:P> * <var:o> * <var:T> * <var:g> * <var:b> * <var:y> * <var:l> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:43243200> . Proof . unfold <def:nine-composite> . exists <nat:9> . exists <nat:13> . exists <nat:4> . exists <nat:5> . exists <nat:12> . exists <nat:11> . exists <nat:7> . exists <nat:10> . exists <nat:2> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 