\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:C> $ , $ <var:y> $ , $ <var:i> $ , $ <var:o> $ , $ <var:A> $ , $ <var:J> $ , $ <var:V> \in \mathbb{N} $ . Assume that some natural number $ <var:f> $ is considered to be <def:seven-composite> when $ <var:f> = <var:i> * <var:o> * <var:y> * <var:C> * <var:V> * <var:J> * <var:A> $ plus factors are larger than <nat:1> . Hence $ <nat:514800> = <var:f> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Recollect that a <def:seven-composite> positive integer is the multiplication between numbers $ <var:A> $ , $ <var:V> $ , $ <var:o> $ , $ <var:y> $ , $ <var:J> $ , $ <var:C> $ , and $ <var:i> $ such that $ <var:J> $ , $ <var:o> $ , $ <var:A> $ , $ <var:i> $ , $ <var:C> $ , $ <var:y> $ and $ <var:V> > <nat:1> $ . Notice that $ <nat:5> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:4> $ , $ <nat:10> $ , $ <nat:13> $ and $ <nat:6> $ are larger than <nat:1> . Moreover notice additionally $ <nat:514800> = <var:y> * <var:A> * <var:C> * <var:i> * <var:J> * <var:o> * <var:V> $ shows $ <var:A> = <nat:13> $ , $ <var:J> = <nat:3> $ , $ <var:V> = <nat:5> $ , $ <var:i> = <nat:10> $ , $ <var:y> = <nat:6> $ , $ <var:o> = <nat:4> $ , and $ <var:C> = <nat:11> $ . So , <nat:514800> is a <def:seven-composite> integer is proven . Consequently , $ <var:J> \times <var:i> \times <var:o> \times <var:y> \times <var:C> \times <var:A> \times <var:V> = <nat:514800> $ is verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:f> : nat ) := exists <var:C> <var:y> <var:i> <var:o> <var:A> <var:J> <var:V> : nat , ( <var:f> = <var:i> * <var:o> * <var:y> * <var:C> * <var:V> * <var:J> * <var:A> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:V> > <nat:1> ) . Theorem <genP:1> : <def:seven-composite> <nat:514800> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } exists <nat:11> . exists <nat:6> . exists <nat:10> . exists <nat:4> . exists <nat:13> . exists <nat:3> . exists <nat:5> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 