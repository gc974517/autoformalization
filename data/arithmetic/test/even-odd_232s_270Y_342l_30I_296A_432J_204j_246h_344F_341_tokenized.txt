\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With any unknowns $ <var:s> $ , $ <var:I> $ , $ <var:j> $ , $ <var:h> $ , $ <var:F> $ , $ <var:J> $ , $ <var:l> $ , $ <var:A> $ , and $ <var:Y> $ the formula $ <var:s> \times <nat:232> + <nat:270> \times <var:Y> + <nat:342> \times <var:l> + <var:I> \times <nat:30> + <nat:296> \times <var:A> + <nat:341> + <nat:432> \times <var:J> + <var:j> \times <nat:204> + <nat:246> \times <var:h> + <var:F> \times <nat:344> $ is guaranteed to be odd . \end{theorem} \begin{proof} The summation between even numbers concurrently and an odd positive integer will be odd . Accordingly , the main result is proven . Observe that the numbers $ <nat:344> $ , $ <nat:342> $ , $ <nat:432> $ , $ <nat:296> $ , $ <nat:30> $ , $ <nat:232> $ , $ <nat:270> $ , and likewise $ <nat:246> $ are guaranteed to be even numbers in $ \mathbb{N} $ In addition , the integer $ <nat:204> $ is trivially even The multiplication of even numbers in $ \mathbb{N} $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:s> <var:I> <var:j> <var:h> <var:F> <var:J> <var:l> <var:A> <var:Y> : nat , Nat . odd ( <nat:232> * <var:s> + <nat:270> * <var:Y> + <nat:342> * <var:l> + <nat:30> * <var:I> + <nat:296> * <var:A> + <nat:432> * <var:J> + <nat:204> * <var:j> + <nat:246> * <var:h> + <nat:344> * <var:F> + <nat:341> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:432> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:232> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 