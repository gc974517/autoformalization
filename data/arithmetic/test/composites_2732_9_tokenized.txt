\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assuming that we have $ <var:O> * <var:P> * <var:f> * <var:T> * <var:l> * <var:r> * <var:a> * <var:G> * <var:Z> = <var:u> $ for $ <var:u> \in \mathbb{Z}^+ $ plus where $ <var:P> $ , $ <var:O> $ , $ <var:l> $ , $ <var:G> $ , $ <var:r> $ , $ <var:f> $ , $ <var:Z> $ , $ <var:T> $ and $ <var:a> \geq <nat:2> $ taking some $ <var:O> $ , $ <var:G> $ , $ <var:f> $ , $ <var:a> $ , $ <var:Z> $ , $ <var:l> $ , $ <var:T> $ , $ <var:r> $ , $ <var:P> \in \mathbb{N} $ , then claim that $ <var:u> $ is a <def:nine-composite> natural number . \end{definition} \begin{theorem} The whole number <nat:16216200> is a <def:nine-composite> integer . \end{theorem} \begin{proof} Allow $ <var:P> = <nat:2> $ , $ <var:f> = <nat:5> $ , $ <var:Z> = <nat:10> $ , $ <var:r> = <nat:9> $ , $ <var:l> = <nat:11> $ , $ <var:T> = <nat:13> $ , $ <var:a> = <nat:6> $ , $ <var:O> = <nat:3> $ and $ <var:G> = <nat:7> $ . Additionally observe that $ <nat:7> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:13> $ and $ <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:u> : nat ) := exists <var:O> <var:G> <var:f> <var:a> <var:Z> <var:l> <var:T> <var:r> <var:P> : nat , ( <var:O> * <var:P> * <var:f> * <var:T> * <var:l> * <var:r> * <var:a> * <var:G> * <var:Z> = <var:u> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:16216200> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:7> . exists <nat:5> . exists <nat:6> . exists <nat:10> . exists <nat:11> . exists <nat:13> . exists <nat:9> . exists <nat:2> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 