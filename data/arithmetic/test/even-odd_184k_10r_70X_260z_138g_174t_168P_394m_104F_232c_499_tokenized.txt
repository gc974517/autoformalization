\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For any unknowns $ <var:k> $ , $ <var:r> $ , $ <var:m> $ , $ <var:g> $ , $ <var:X> $ , $ <var:c> $ , $ <var:z> $ , $ <var:P> $ , $ <var:F> $ , and $ <var:t> $ the sum $ <nat:394> \times <var:m> + <nat:260> \times <var:z> + <var:g> \times <nat:138> + <nat:499> + <nat:10> \times <var:r> + <var:t> \times <nat:174> + <nat:168> \times <var:P> + <var:X> \times <nat:70> + <nat:184> \times <var:k> + <nat:104> \times <var:F> + <nat:232> \times <var:c> $ is odd . \end{theorem} \begin{proof} We employ the fact that the expression $ <var:r> * <nat:10> + <nat:394> * <var:m> + <nat:260> * <var:z> + <var:X> * <nat:70> + <nat:138> * <var:g> + <var:P> * <nat:168> + <var:F> * <nat:104> + <nat:184> * <var:k> + <nat:232> * <var:c> + <var:t> * <nat:174> $ is even . See the pairs $ <var:z> * <nat:260> $ , $ <var:X> * <nat:70> $ , $ <nat:10> * <var:r> $ , $ <var:m> * <nat:394> $ , $ <nat:232> * <var:c> $ , $ <nat:184> * <var:k> $ , $ <var:g> * <nat:138> $ , plus $ <nat:168> * <var:P> $ are guaranteed to be even naturals . Furthermore , the term $ <var:t> * <nat:174> $ is even from the fact the multiplication of an even number with some natural is guaranteed to be trivially an even element of $ \mathbb{Z}^+ $ . Remember $ <var:F> * <nat:104> $ is trivially an even element of $ \mathbb{Z}^+ $ . This must be true as a consequence that taking the product between an even natural number with a integer must be an even element of $ \mathbb{N} $ . $ <var:r> \cdot <nat:10> + <var:z> \cdot <nat:260> + <nat:168> \cdot <var:P> + <var:c> \cdot <nat:232> + <nat:70> \cdot <var:X> + <var:m> \cdot <nat:394> + <var:t> \cdot <nat:174> + <var:g> \cdot <nat:138> + <nat:104> \cdot <var:F> + <nat:184> \cdot <var:k> $ will be by definition even since the multiplication between even numbers in $ \mathbb{N} $ with any number will be even . It can be shown that the summation $ <nat:184> <var:k> + <var:r> <nat:10> + <nat:70> <var:X> + <var:z> <nat:260> + <nat:138> <var:g> + <nat:499> + <var:t> <nat:174> + <nat:168> <var:P> + <var:m> <nat:394> + <nat:104> <var:F> + <nat:232> <var:c> $ is odd . Take note that $ <nat:499> $ is guaranteed to be an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:r> <var:m> <var:g> <var:X> <var:c> <var:z> <var:P> <var:F> <var:t> : nat , Nat . odd ( <nat:394> * <var:m> + <nat:260> * <var:z> + <nat:138> * <var:g> + <nat:10> * <var:r> + <nat:174> * <var:t> + <nat:168> * <var:P> + <nat:70> * <var:X> + <nat:184> * <var:k> + <nat:104> * <var:F> + <nat:232> * <var:c> + <nat:499> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:260> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:174> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:m> + <nat:260> * <var:z> + <nat:138> * <var:g> + <nat:10> * <var:r> + <nat:174> * <var:t> + <nat:168> * <var:P> + <nat:70> * <var:X> + <nat:184> * <var:k> + <nat:104> * <var:F> + <nat:232> * <var:c> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:499> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 