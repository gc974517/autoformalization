\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take as given that whenever there exist $ <var:V> $ , $ <var:E> $ , $ <var:i> $ , $ <var:P> $ , $ <var:S> $ , $ <var:z> \in \mathbb{Z}^+ $ say that some positive integer $ <var:A> $ is said to be a <def:six-composite> positive integer assuming $ <var:i> \cdot <var:E> \cdot <var:P> \cdot <var:V> \cdot <var:S> \cdot <var:z> = <var:A> $ as well as factors are larger than or equivalent to <nat:2> . Therefore the whole number <nat:104832> is a <def:six-composite> positive integer . \end{theorem} \begin{proof} We justify <nat:104832> is the product of $ <var:P> $ , $ <var:i> $ , $ <var:z> $ , $ <var:E> $ , $ <var:S> $ , and $ <var:V> \in \mathbb{Z}^+ $ plus $ <var:z> $ , $ <var:S> $ , $ <var:i> $ , $ <var:P> $ , $ <var:V> $ , $ <var:E> \geq <nat:2> $ . Notice $ <nat:3> \times <nat:13> \times <nat:4> \times <nat:7> \times <nat:8> \times <nat:12> = <nat:104832> = <var:P> \times <var:i> \times <var:z> \times <var:V> \times <var:S> \times <var:E> $ . Also note $ <nat:12> $ , $ <nat:7> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:3> $ , $ <nat:13> $ are greater than or equal to <nat:2> . This indicates the proposition is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:A> : nat ) := exists <var:V> <var:E> <var:i> <var:P> <var:S> <var:z> : nat , ( <var:i> * <var:E> * <var:P> * <var:V> * <var:S> * <var:z> = <var:A> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:104832> . Proof . unfold <def:six-composite> . exists <nat:7> . exists <nat:12> . exists <nat:13> . exists <nat:3> . exists <nat:8> . exists <nat:4> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 