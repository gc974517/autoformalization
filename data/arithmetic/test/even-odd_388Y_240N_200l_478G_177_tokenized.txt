\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Y> <nat:388> + <var:N> <nat:240> + <var:G> <nat:478> + <nat:177> + <nat:200> <var:l> $ is odd using every $ <var:l> $ , $ <var:G> $ , $ <var:N> $ , and $ <var:Y> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} We utilize that the sum $ <nat:478> <var:G> + <nat:240> <var:N> + <var:l> <nat:200> + <nat:388> <var:Y> $ is clearly even . Remember that the positive integers $ <nat:478> $ , $ <nat:200> $ , as well as $ <nat:388> $ are clearly even . In consequence , the pairs $ <nat:478> <var:G> $ , $ <nat:200> <var:l> $ , in addition to $ <nat:388> <var:Y> $ will be even as well . Furthermore , remember that the pair $ <var:N> <nat:240> $ is known to be an even whole number . This is proven because the positive integer $ <nat:240> $ is known as even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:G> <var:N> <var:Y> : nat , Nat . odd ( <nat:388> * <var:Y> + <nat:240> * <var:N> + <nat:478> * <var:G> + <nat:200> * <var:l> + <nat:177> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:Y> + <nat:240> * <var:N> + <nat:478> * <var:G> + <nat:200> * <var:l> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 