\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:373> + <var:K> \cdot <nat:396> + <nat:450> \cdot <var:D> + <var:A> \cdot <nat:336> + <nat:64> \cdot <var:x> + <var:p> \cdot <nat:386> + <var:B> \cdot <nat:296> $ is odd given all natural terms $ <var:x> $ , $ <var:K> $ , $ <var:p> $ , $ <var:B> $ , $ <var:D> $ , and $ <var:A> $ . \end{theorem} \begin{proof} Notice that the totaling of an even number with an odd integer is guaranteed to be fundamentally an odd element of $ \mathbb{N} $ . What's more , the pairs $ <var:K> \times <nat:396> $ , $ <var:D> \times <nat:450> $ , $ <var:A> \times <nat:336> $ , $ <var:x> \times <nat:64> $ , $ <var:p> \times <nat:386> $ , additionally $ <var:B> \times <nat:296> $ will be even numbers in $ \mathbb{N} $ from the fact the positive integers $ <nat:396> $ , $ <nat:450> $ , $ <nat:336> $ , $ <nat:64> $ , $ <nat:386> $ , as well as $ <nat:296> $ are trivially even . It can be checked that this theorem is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:K> <var:p> <var:B> <var:D> <var:A> : nat , Nat . odd ( <nat:396> * <var:K> + <nat:450> * <var:D> + <nat:336> * <var:A> + <nat:64> * <var:x> + <nat:386> * <var:p> + <nat:296> * <var:B> + <nat:373> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:396> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even <nat:336> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:396> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 