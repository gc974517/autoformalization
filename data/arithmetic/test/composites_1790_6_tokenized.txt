\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We claim that $ <var:b> $ is a <def:six-composite> integer wherever $ \exists <var:d> $ , $ <var:j> $ , $ <var:K> $ , $ <var:J> $ , $ <var:v> $ , $ <var:P> \in \mathbb{Z}^+ $ such that $ <var:j> $ , $ <var:J> $ , $ <var:v> $ , $ <var:P> $ , $ <var:d> $ and $ <var:K> \geq <nat:2> $ as well as taking some whole number $ <var:b> $ , $ <var:K> \cdot <var:P> \cdot <var:J> \cdot <var:j> \cdot <var:d> \cdot <var:v> = <var:b> $ . So the natural number <nat:84240> is <def:six-composite> . \end{theorem} \begin{proof} Remember a <def:six-composite> integer is the product of $ <var:J> $ , $ <var:v> $ , $ <var:P> $ , $ <var:K> $ , $ <var:d> $ , $ <var:j> $ satisfying the condition that $ <var:K> $ , $ <var:P> $ , $ <var:J> $ , $ <var:d> $ , $ <var:j> $ , $ <var:v> \geq <nat:2> $ . Note $ <nat:84240> = <nat:9> * <nat:6> * <nat:3> * <nat:4> * <nat:13> * <nat:10> = <var:v> * <var:d> * <var:J> * <var:j> * <var:K> * <var:P> $ . Plus observe $ <nat:6> $ , $ <nat:13> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:3> $ , $ <nat:4> $ are greater than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:b> : nat ) := exists <var:d> <var:j> <var:K> <var:J> <var:v> <var:P> : nat , ( <var:j> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:K> * <var:P> * <var:J> * <var:j> * <var:d> * <var:v> = <var:b> ) . Theorem <genP:1> : <def:six-composite> <nat:84240> . Proof . unfold <def:six-composite> . exists <nat:6> . exists <nat:4> . exists <nat:13> . exists <nat:3> . exists <nat:9> . exists <nat:10> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 