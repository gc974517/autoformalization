\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With some integers $ <var:J> $ , $ <var:h> $ , $ <var:l> $ , $ <var:r> $ , and $ <var:s> $ the summation $ <nat:277> + <var:h> <nat:252> + <nat:20> <var:s> + <nat:124> <var:r> + <nat:200> <var:J> + <nat:44> <var:l> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be shown that our theorem is proven . The coefficients $ <nat:252> $ , $ <nat:20> $ , $ <nat:124> $ , $ <nat:200> $ , in addition to $ <nat:44> $ are guaranteed to be even . As a consequence , the terms $ <nat:252> \times <var:h> $ , $ <nat:20> \times <var:s> $ , $ <var:r> \times <nat:124> $ , $ <var:J> \times <nat:200> $ , and also $ <nat:44> \times <var:l> $ is guaranteed to be even additionally . The summation of even natural numbers together with an odd number is guaranteed to be an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:h> <var:l> <var:r> <var:s> : nat , Nat . odd ( <nat:252> * <var:h> + <nat:20> * <var:s> + <nat:124> * <var:r> + <nat:200> * <var:J> + <nat:44> * <var:l> + <nat:277> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 