\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:E> <nat:162> + <nat:244> <var:x> + <var:T> <nat:30> + <nat:286> <var:Z> + <var:v> <nat:264> + <var:u> <nat:480> + <nat:438> <var:D> + <var:c> <nat:336> + <var:n> <nat:226> + <nat:392> <var:B> + <nat:45> $ is guaranteed to be odd . \end{theorem} \begin{proof} Observe that the products $ <var:Z> * <nat:286> $ , $ <nat:30> * <var:T> $ , $ <var:u> * <nat:480> $ , $ <var:c> * <nat:336> $ , $ <var:E> * <nat:162> $ , $ <nat:244> * <var:x> $ , and $ <var:v> * <nat:264> $ are clearly even . Building on , notice that the products $ <var:D> * <nat:438> $ as well as $ <nat:226> * <var:n> $ will be even . This holds since taking the product of an even whole number with a number in $ \mathbb{N} $ is guaranteed to be even . Adding on , $ <var:B> * <nat:392> $ is trivially even . This is proven as a consequence that taking the product of an even element of $ \mathbb{N} $ with some element of $ \mathbb{N} $ is even . It can be checked that the result is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:x> <var:T> <var:Z> <var:v> <var:u> <var:D> <var:c> <var:n> <var:B> : nat , Nat . odd ( <nat:162> * <var:E> + <nat:244> * <var:x> + <nat:30> * <var:T> + <nat:286> * <var:Z> + <nat:264> * <var:v> + <nat:480> * <var:u> + <nat:438> * <var:D> + <nat:336> * <var:c> + <nat:226> * <var:n> + <nat:392> * <var:B> + <nat:45> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:286> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 