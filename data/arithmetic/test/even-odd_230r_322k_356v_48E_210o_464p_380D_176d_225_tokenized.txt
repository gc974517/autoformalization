\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:D> * <nat:380> + <var:E> * <nat:48> + <nat:230> * <var:r> + <nat:225> + <var:k> * <nat:322> + <var:v> * <nat:356> + <var:o> * <nat:210> + <nat:464> * <var:p> + <var:d> * <nat:176> $ is odd taking integers $ <var:D> $ , $ <var:k> $ , $ <var:r> $ , $ <var:p> $ , $ <var:v> $ , $ <var:d> $ , $ <var:o> $ , and $ <var:E> $ . \end{theorem} \begin{proof} We justify the formula $ <nat:230> \times <var:r> + <nat:322> \times <var:k> + <var:v> \times <nat:356> + <var:E> \times <nat:48> + <var:o> \times <nat:210> + <nat:464> \times <var:p> + <var:D> \times <nat:380> + <nat:225> + <var:d> \times <nat:176> $ will be odd . Notice $ <nat:225> $ is trivially odd . Recall that the number $ <nat:210> $ is trivially even Remember the leading terms $ <nat:464> $ , $ <nat:380> $ , $ <nat:356> $ , $ <nat:48> $ , $ <nat:230> $ , as well as $ <nat:176> $ are even numbers Adding on , we know the positive integer $ <nat:322> $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:k> <var:r> <var:p> <var:v> <var:d> <var:o> <var:E> : nat , Nat . odd ( <nat:380> * <var:D> + <nat:48> * <var:E> + <nat:230> * <var:r> + <nat:322> * <var:k> + <nat:356> * <var:v> + <nat:210> * <var:o> + <nat:464> * <var:p> + <nat:176> * <var:d> + <nat:225> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:225> = true ) . { auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:380> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:176> = true ) . { auto . } assert ( <genH> : Nat . even <nat:322> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 