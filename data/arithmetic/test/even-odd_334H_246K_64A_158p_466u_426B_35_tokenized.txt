\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:35> + <var:p> * <nat:158> + <nat:334> * <var:H> + <var:u> * <nat:466> + <nat:64> * <var:A> + <var:K> * <nat:246> + <nat:426> * <var:B> $ will be odd using some variables $ <var:p> $ , $ <var:u> $ , $ <var:K> $ , $ <var:H> $ , $ <var:B> $ , and $ <var:A> $ . \end{theorem} \begin{proof} We know that the whole numbers $ <nat:466> $ , $ <nat:64> $ , and moreover $ <nat:334> $ are trivially even naturals . Hence , the terms $ <nat:466> \cdot <var:u> $ , $ <nat:64> \cdot <var:A> $ , as well as $ <var:H> \cdot <nat:334> $ is even also . The pair $ <nat:158> \cdot <var:p> $ is clearly an even number in $ \mathbb{Z}^+ $ because multiplying between an even number with any integer is an even number , and is true from the fact the coefficient $ <nat:158> $ is guaranteed to be an even element of $ \mathbb{N} $ . What's more , see $ <nat:426> \cdot <var:B> $ is known to be even from the knowledge multiplying between an even integer with an arbitrary natural number is guaranteed to be an even number , which must be true from the fact the natural number $ <nat:426> $ is known to be even . The positive integer $ <nat:246> $ is an even positive integer . Therefore , the product $ <var:K> \cdot <nat:246> $ must be even as well . Take note the totaling of an even number with an odd element of $ \mathbb{Z}^+ $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:u> <var:K> <var:H> <var:B> <var:A> : nat , Nat . odd ( <nat:158> * <var:p> + <nat:334> * <var:H> + <nat:466> * <var:u> + <nat:64> * <var:A> + <nat:246> * <var:K> + <nat:426> * <var:B> + <nat:35> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 