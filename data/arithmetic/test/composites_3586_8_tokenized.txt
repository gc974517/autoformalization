\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Supposing that there are positive integers $ <var:R> $ , $ <var:r> $ , $ <var:Z> $ , $ <var:l> $ , $ <var:P> $ , $ <var:T> $ , $ <var:S> $ , $ <var:t> $ claim that some positive integer $ <var:C> $ is a <def:eight-composite> number if $ <var:S> \cdot <var:t> \cdot <var:T> \cdot <var:R> \cdot <var:Z> \cdot <var:l> \cdot <var:P> \cdot <var:r> = <var:C> $ and larger than or equal to <nat:2> . Consequently <nat:855360> is <def:eight-composite> . \end{theorem} \begin{proof} Take $ <var:Z> = <nat:12> $ , $ <var:r> = <nat:2> $ , $ <var:t> = <nat:11> $ , $ <var:P> = <nat:6> $ , $ <var:T> = <nat:5> $ , $ <var:S> = <nat:9> $ , $ <var:R> = <nat:3> $ , $ <var:l> = <nat:4> $ . Note $ <var:r> \cdot <var:S> \cdot <var:T> \cdot <var:t> \cdot <var:P> \cdot <var:Z> \cdot <var:R> \cdot <var:l> = <nat:855360> $ . In addition notice that $ <nat:4> $ , $ <nat:11> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:12> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:C> : nat ) := exists <var:R> <var:r> <var:Z> <var:l> <var:P> <var:T> <var:S> <var:t> : nat , ( <var:S> * <var:t> * <var:T> * <var:R> * <var:Z> * <var:l> * <var:P> * <var:r> = <var:C> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) . Theorem <genP:1> : <def:eight-composite> <nat:855360> . Proof . unfold <def:eight-composite> . exists <nat:3> . exists <nat:2> . exists <nat:12> . exists <nat:4> . exists <nat:6> . exists <nat:5> . exists <nat:9> . exists <nat:11> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 