\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:68> <var:R> + <nat:419> + <nat:24> <var:Q> + <var:w> <nat:488> + <var:r> <nat:56> + <nat:308> <var:d> + <nat:448> <var:A> + <nat:190> <var:s> + <nat:232> <var:f> $ must be odd taking every natural terms $ <var:A> $ , $ <var:w> $ , $ <var:d> $ , $ <var:r> $ , $ <var:Q> $ , $ <var:f> $ , $ <var:R> $ , and $ <var:s> $ . \end{theorem} \begin{proof} The summation $ <nat:488> <var:w> + <var:R> <nat:68> + <var:r> <nat:56> + <nat:448> <var:A> + <var:s> <nat:190> + <var:d> <nat:308> + <var:Q> <nat:24> + <nat:232> <var:f> $ is known to be even . The leading terms $ <nat:56> $ , $ <nat:68> $ , and likewise $ <nat:488> $ are clearly even numbers . As a consequence , the terms $ <nat:56> <var:r> $ , $ <nat:68> <var:R> $ , and likewise $ <nat:488> <var:w> $ is guaranteed to be even as well . Furthermore , the pairs $ <var:Q> <nat:24> $ , $ <var:A> <nat:448> $ , as well as $ <var:f> <nat:232> $ are obviously even integers by reason that the coefficients $ <nat:24> $ , $ <nat:448> $ , and likewise $ <nat:232> $ are guaranteed to be even . What's more , take note that the term $ <var:d> <nat:308> $ is clearly an even element of $ \mathbb{N} $ . This must be true from the fact the whole number $ <nat:308> $ is obviously even . What's more , remember the product $ <nat:190> <var:s> $ is clearly even . This claim must be true by reason that the positive integer $ <nat:190> $ is known as an even number . The formula $ <var:r> <nat:56> + <var:R> <nat:68> + <var:A> <nat:448> + <nat:308> <var:d> + <nat:488> <var:w> + <var:s> <nat:190> + <var:Q> <nat:24> + <nat:232> <var:f> $ is guaranteed to be even because the product of even positive integers with any positive integer is guaranteed to be an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:w> <var:d> <var:r> <var:Q> <var:f> <var:R> <var:s> : nat , Nat . odd ( <nat:68> * <var:R> + <nat:24> * <var:Q> + <nat:488> * <var:w> + <nat:56> * <var:r> + <nat:308> * <var:d> + <nat:448> * <var:A> + <nat:190> * <var:s> + <nat:232> * <var:f> + <nat:419> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even <nat:232> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:R> + <nat:24> * <var:Q> + <nat:488> * <var:w> + <nat:56> * <var:r> + <nat:308> * <var:d> + <nat:448> * <var:A> + <nat:190> * <var:s> + <nat:232> * <var:f> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 