\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:e> \times <nat:50> + <var:u> \times <nat:232> + <nat:279> + <var:f> \times <nat:348> + <var:X> \times <nat:80> + <var:F> \times <nat:332> + <nat:364> \times <var:i> + <nat:440> \times <var:V> $ is odd . \end{theorem} \begin{proof} The lemma holds from the fact $ <nat:364> <var:i> + <var:F> <nat:332> + <var:f> <nat:348> + <nat:232> <var:u> + <var:e> <nat:50> + <nat:440> <var:V> + <nat:80> <var:X> $ is known to be even . See the pairs $ <nat:80> * <var:X> $ in addition to $ <nat:50> * <var:e> $ are known to be even . This fact is true by reason that multiplying of an even natural number and any whole number is an even positive integer . Likewise , the pairs $ <var:u> * <nat:232> $ , $ <var:V> * <nat:440> $ , $ <nat:332> * <var:F> $ , additionally $ <var:f> * <nat:348> $ are guaranteed to be even . Additionally , recall the product $ <nat:364> * <var:i> $ is clearly even . This holds as a consequence that taking the product of an even positive integer and any element of $ \mathbb{Z}^+ $ will be even . From the fact the addition between even numbers and an even natural is guaranteed to be even , the sum $ <nat:440> * <var:V> + <var:u> * <nat:232> + <var:f> * <nat:348> + <nat:332> * <var:F> + <nat:364> * <var:i> + <nat:50> * <var:e> + <nat:80> * <var:X> $ must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:e> <var:u> <var:f> <var:X> <var:F> <var:i> <var:V> : nat , Nat . odd ( <nat:50> * <var:e> + <nat:232> * <var:u> + <nat:348> * <var:f> + <nat:80> * <var:X> + <nat:332> * <var:F> + <nat:364> * <var:i> + <nat:440> * <var:V> + <nat:279> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:80> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:e> + <nat:232> * <var:u> + <nat:348> * <var:f> + <nat:80> * <var:X> + <nat:332> * <var:F> + <nat:364> * <var:i> + <nat:440> * <var:V> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 