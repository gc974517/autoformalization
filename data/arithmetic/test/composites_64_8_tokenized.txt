\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume that $ <var:Y> $ is a <def:eight-composite> integer with the condition there exist $ <var:U> $ , $ <var:z> $ , $ <var:w> $ , $ <var:J> $ , $ <var:u> $ , $ <var:e> $ , $ <var:T> $ , $ <var:i> \in \mathbb{N} $ such that $ <var:Y> = <var:w> * <var:e> * <var:U> * <var:u> * <var:i> * <var:z> * <var:J> * <var:T> $ with some whole number $ <var:Y> $ as well as satisfying the condition that $ <var:z> $ , $ <var:w> $ , $ <var:T> $ , $ <var:u> $ , $ <var:U> $ , $ <var:J> $ , $ <var:e> $ , $ <var:i> \geq <nat:2> $ . \end{definition} \begin{theorem} The integer <nat:7413120> is <def:eight-composite> . \end{theorem} \begin{proof} Assume $ <var:J> = <nat:9> $ , $ <var:U> = <nat:11> $ , $ <var:w> = <nat:12> $ , $ <var:z> = <nat:13> $ , $ <var:T> = <nat:4> $ , $ <var:u> = <nat:2> $ , $ <var:e> = <nat:6> $ and $ <var:i> = <nat:10> $ . Note that $ <var:z> = <nat:13> $ , $ <var:u> = <nat:2> $ , $ <var:T> = <nat:4> $ , $ <var:e> = <nat:6> $ , $ <var:U> = <nat:11> $ , $ <var:J> = <nat:9> $ , $ <var:w> = <nat:12> $ , and $ <var:i> = <nat:10> $ are more than or equal to <nat:2> . This implies <nat:7413120> is a <def:eight-composite> integer . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:Y> : nat ) := exists <var:U> <var:z> <var:w> <var:J> <var:u> <var:e> <var:T> <var:i> : nat , ( <var:Y> = <var:w> * <var:e> * <var:U> * <var:u> * <var:i> * <var:z> * <var:J> * <var:T> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) . Theorem <genP:1> : <def:eight-composite> <nat:7413120> . Proof . unfold <def:eight-composite> . exists <nat:11> . exists <nat:13> . exists <nat:12> . exists <nat:9> . exists <nat:2> . exists <nat:6> . exists <nat:4> . exists <nat:10> . assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 