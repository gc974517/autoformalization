\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist $ <var:F> $ , $ <var:I> $ , $ <var:J> $ , $ <var:Y> $ , $ <var:j> $ , $ <var:X> \in \mathbb{N} $ so that $ <var:I> $ , $ <var:F> $ , $ <var:j> $ , $ <var:Y> $ , $ <var:X> $ , and $ <var:J> > <nat:1> $ . Let that some positive integer $ <var:w> $ is called <def:six-composite> if $ <var:J> * <var:X> * <var:I> * <var:F> * <var:j> * <var:Y> = <var:w> $ . \end{definition} \begin{theorem} The natural number <nat:42120> is a <def:six-composite> natural number . \end{theorem} \begin{proof} Let $ <var:j> = <nat:6> $ , $ <var:F> = <nat:5> $ , $ <var:J> = <nat:13> $ , $ <var:Y> = <nat:9> $ , $ <var:I> = <nat:4> $ and $ <var:X> = <nat:3> $ . We demonstrate $ <nat:42120> = <var:J> \cdot <var:F> \cdot <var:X> \cdot <var:I> \cdot <var:Y> \cdot <var:j> $ . Note that $ <var:F> = <nat:5> $ , $ <var:Y> = <nat:9> $ , $ <var:I> = <nat:4> $ , $ <var:X> = <nat:3> $ , $ <var:j> = <nat:6> $ , and $ <var:J> = <nat:13> > <nat:1> $ . Plus note additionally $ <nat:42120> = <var:I> \times <var:j> \times <var:J> \times <var:X> \times <var:Y> \times <var:F> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:w> : nat ) := exists <var:F> <var:I> <var:J> <var:Y> <var:j> <var:X> : nat , ( <var:I> > <nat:1> ) /\ ( <var:F> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:J> * <var:X> * <var:I> * <var:F> * <var:j> * <var:Y> = <var:w> ) . Theorem <genP:1> : <def:six-composite> <nat:42120> . Proof . unfold <def:six-composite> . exists <nat:5> . exists <nat:4> . exists <nat:13> . exists <nat:9> . exists <nat:6> . exists <nat:3> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 