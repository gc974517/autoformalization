\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:458> \cdot <var:v> + <nat:216> \cdot <var:O> + <nat:400> \cdot <var:f> + <var:l> \cdot <nat:232> + <nat:391> + <var:J> \cdot <nat:106> + <nat:30> \cdot <var:W> + <var:p> \cdot <nat:110> + <var:C> \cdot <nat:356> + <nat:310> \cdot <var:Z> + <var:T> \cdot <nat:130> + <nat:290> \cdot <var:z> $ is guaranteed to be odd . \end{theorem} \begin{proof} Take note $ <var:Z> \times <nat:310> + <nat:30> \times <var:W> + <var:l> \times <nat:232> + <var:v> \times <nat:458> + <nat:216> \times <var:O> + <var:T> \times <nat:130> + <nat:110> \times <var:p> + <nat:356> \times <var:C> + <nat:391> + <nat:290> \times <var:z> + <nat:106> \times <var:J> + <nat:400> \times <var:f> $ is guaranteed to be odd as a consequence that the summation $ <nat:458> \cdot <var:v> + <nat:110> \cdot <var:p> + <var:C> \cdot <nat:356> + <nat:290> \cdot <var:z> + <var:O> \cdot <nat:216> + <var:W> \cdot <nat:30> + <var:f> \cdot <nat:400> + <nat:106> \cdot <var:J> + <var:Z> \cdot <nat:310> + <var:l> \cdot <nat:232> + <nat:130> \cdot <var:T> $ is obviously even . Because the summing of even whole numbers with an even number in $ \mathbb{Z}^+ $ is even , our lemma must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:O> <var:f> <var:l> <var:J> <var:W> <var:p> <var:C> <var:Z> <var:T> <var:z> : nat , Nat . odd ( <nat:458> * <var:v> + <nat:216> * <var:O> + <nat:400> * <var:f> + <nat:232> * <var:l> + <nat:106> * <var:J> + <nat:30> * <var:W> + <nat:110> * <var:p> + <nat:356> * <var:C> + <nat:310> * <var:Z> + <nat:130> * <var:T> + <nat:290> * <var:z> + <nat:391> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:458> * <var:v> + <nat:216> * <var:O> + <nat:400> * <var:f> + <nat:232> * <var:l> + <nat:106> * <var:J> + <nat:30> * <var:W> + <nat:110> * <var:p> + <nat:356> * <var:C> + <nat:310> * <var:Z> + <nat:130> * <var:T> + <nat:290> * <var:z> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 