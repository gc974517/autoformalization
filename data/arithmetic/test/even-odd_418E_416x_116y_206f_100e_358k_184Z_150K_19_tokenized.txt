\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every positive terms $ <var:x> $ , $ <var:K> $ , $ <var:e> $ , $ <var:Z> $ , $ <var:f> $ , $ <var:E> $ , $ <var:k> $ , and $ <var:y> $ $ <nat:150> <var:K> + <var:e> <nat:100> + <nat:418> <var:E> + <var:Z> <nat:184> + <nat:358> <var:k> + <nat:416> <var:x> + <nat:19> + <nat:116> <var:y> + <nat:206> <var:f> $ is odd . \end{theorem} \begin{proof} Taking the product of an even number in $ \mathbb{N} $ and any number must be an even number in $ \mathbb{Z}^+ $ . The positive integers $ <nat:116> $ , $ <nat:100> $ , and also $ <nat:358> $ are known to be even Building on , the integers $ <nat:418> $ , $ <nat:206> $ , $ <nat:416> $ , and also $ <nat:150> $ are known as even naturals The integer $ <nat:184> $ is obviously an even element of $ \mathbb{Z}^+ $ We verify the sum $ <nat:19> + <nat:418> * <var:E> + <nat:416> * <var:x> + <var:y> * <nat:116> + <nat:206> * <var:f> + <var:e> * <nat:100> + <nat:358> * <var:k> + <var:Z> * <nat:184> + <var:K> * <nat:150> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:K> <var:e> <var:Z> <var:f> <var:E> <var:k> <var:y> : nat , Nat . odd ( <nat:150> * <var:K> + <nat:100> * <var:e> + <nat:418> * <var:E> + <nat:184> * <var:Z> + <nat:358> * <var:k> + <nat:416> * <var:x> + <nat:116> * <var:y> + <nat:206> * <var:f> + <nat:19> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even <nat:206> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 