\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} $ \exists <var:w> $ , $ <var:H> $ , $ <var:y> $ , $ <var:c> $ , $ <var:g> $ , $ <var:M> \in \mathbb{Z}^+ $ where $ <var:c> $ , $ <var:y> $ , $ <var:M> $ , $ <var:w> $ , $ <var:H> $ , and $ <var:g> > <nat:1> $ . Denote that $ <var:n> \in \mathbb{Z}^+ $ will be considered as a <def:six-composite> number when $ <var:w> \cdot <var:c> \cdot <var:M> \cdot <var:y> \cdot <var:H> \cdot <var:g> = <var:n> $ . \end{definition} \begin{theorem} The integer <nat:61600> is <def:six-composite> . \end{theorem} \begin{proof} Let $ <var:H> = <nat:7> $ , $ <var:y> = <nat:8> $ , $ <var:w> = <nat:2> $ , $ <var:c> = <nat:5> $ , $ <var:g> = <nat:11> $ , $ <var:M> = <nat:10> $ . We verify <nat:61600> is the product of some integers $ <var:w> $ , $ <var:c> $ , $ <var:M> $ , $ <var:g> $ , $ <var:y> $ and $ <var:H> $ . Observe that $ <var:y> = <nat:8> $ , $ <var:w> = <nat:2> $ , $ <var:M> = <nat:10> $ , $ <var:H> = <nat:7> $ , $ <var:g> = <nat:11> $ , and $ <var:c> = <nat:5> $ are larger than <nat:1> . Furthermore note that likewise $ <var:H> \times <var:y> \times <var:M> \times <var:w> \times <var:g> \times <var:c> = <nat:61600> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:n> : nat ) := exists <var:w> <var:H> <var:y> <var:c> <var:g> <var:M> : nat , ( <var:c> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:M> > <nat:1> ) /\ ( <var:w> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:w> * <var:c> * <var:M> * <var:y> * <var:H> * <var:g> = <var:n> ) . Theorem <genP:1> : <def:six-composite> <nat:61600> . Proof . unfold <def:six-composite> . exists <nat:2> . exists <nat:7> . exists <nat:8> . exists <nat:5> . exists <nat:11> . exists <nat:10> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 