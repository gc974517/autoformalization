\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever there are $ <var:z> $ , $ <var:e> $ , $ <var:f> $ , $ <var:H> $ , $ <var:R> $ , $ <var:G> $ , $ <var:a> $ , $ <var:p> \in \mathbb{N} $ larger than <nat:1> . We assume that some $ <var:y> $ is considered to be a <def:eight-composite> integer given $ <var:f> \times <var:G> \times <var:p> \times <var:a> \times <var:z> \times <var:e> \times <var:R> \times <var:H> = <var:y> $ . Consequently $ <var:y> = <nat:10108800> $ is <def:eight-composite> . \end{theorem} \begin{proof} We confirm our claim holds for $ <nat:10108800> = <nat:12> \cdot <nat:10> \cdot <nat:6> \cdot <nat:5> \cdot <nat:8> \cdot <nat:9> \cdot <nat:3> \cdot <nat:13> $ and for $ <nat:10> $ , $ <nat:6> $ , $ <nat:13> $ , $ <nat:12> $ , $ <nat:9> $ , $ <nat:8> $ , $ <nat:3> $ , $ <nat:5> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:y> : nat ) := exists <var:z> <var:e> <var:f> <var:H> <var:R> <var:G> <var:a> <var:p> : nat , ( <var:z> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:f> * <var:G> * <var:p> * <var:a> * <var:z> * <var:e> * <var:R> * <var:H> = <var:y> ) . Theorem <genP:1> : <def:eight-composite> <nat:10108800> . Proof . unfold <def:eight-composite> . exists <nat:5> . exists <nat:12> . exists <nat:9> . exists <nat:3> . exists <nat:6> . exists <nat:13> . exists <nat:8> . exists <nat:10> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 