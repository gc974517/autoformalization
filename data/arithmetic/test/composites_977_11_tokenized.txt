\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:g> $ , $ <var:D> $ , $ <var:z> $ , $ <var:H> $ , $ <var:b> $ , $ <var:F> $ , $ <var:h> $ , $ <var:Z> $ , $ <var:K> $ , $ <var:Y> $ , $ <var:W> $ be numbers . We define that some positive integer $ <var:N> $ is said to be a <def:eleven-composite> integer assuming $ <var:z> \cdot <var:H> \cdot <var:D> \cdot <var:b> \cdot <var:h> \cdot <var:W> \cdot <var:F> \cdot <var:g> \cdot <var:K> \cdot <var:Z> \cdot <var:Y> = <var:N> $ and terms are larger than or equal to <nat:2> . Accordingly $ <nat:1245404160> = <var:N> $ is a <def:eleven-composite> number . \end{theorem} \begin{proof} Observe that $ <nat:13> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:3> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:11> \geq <nat:2> $ . Furthermore observe that still $ <var:F> * <var:z> * <var:b> * <var:H> * <var:W> * <var:Y> * <var:D> * <var:g> * <var:K> * <var:Z> * <var:h> = <nat:1245404160> $ yields $ <var:D> = <nat:7> $ , $ <var:b> = <nat:6> $ , $ <var:h> = <nat:4> $ , $ <var:Z> = <nat:13> $ , $ <var:z> = <nat:11> $ , $ <var:K> = <nat:2> $ , $ <var:Y> = <nat:12> $ , $ <var:F> = <nat:8> $ , $ <var:H> = <nat:3> $ , $ <var:W> = <nat:9> $ , and $ <var:g> = <nat:10> $ . This gives <nat:1245404160> is <def:eleven-composite> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eleven-composite> ( <var:N> : nat ) := exists <var:g> <var:D> <var:z> <var:H> <var:b> <var:F> <var:h> <var:Z> <var:K> <var:Y> <var:W> : nat , ( <var:z> * <var:H> * <var:D> * <var:b> * <var:h> * <var:W> * <var:F> * <var:g> * <var:K> * <var:Z> * <var:Y> = <var:N> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) . Theorem <genP:1> : <def:eleven-composite> <nat:1245404160> . Proof . unfold <def:eleven-composite> . assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:7> . exists <nat:11> . exists <nat:3> . exists <nat:6> . exists <nat:8> . exists <nat:4> . exists <nat:13> . exists <nat:2> . exists <nat:12> . exists <nat:9> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 