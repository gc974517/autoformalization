\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking any positive terms $ <var:a> $ , $ <var:N> $ , and $ <var:A> $ the sum $ <nat:344> * <var:a> + <nat:269> + <nat:64> * <var:N> + <nat:456> * <var:A> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know that $ <nat:269> $ is an odd natural . We prove the sum $ <nat:456> \times <var:A> + <nat:269> + <nat:64> \times <var:N> + <var:a> \times <nat:344> $ is guaranteed to be odd . The proposition holds from the knowledge $ <var:a> * <nat:344> + <nat:456> * <var:A> + <nat:64> * <var:N> $ is obviously even . Take note the integer $ <nat:344> $ is known to be an even number in $ \mathbb{N} $ . Hence , the pair $ <nat:344> \cdot <var:a> $ is guaranteed to be even in addition . The pair $ <var:A> \cdot <nat:456> $ is obviously even since the product of an even element of $ \mathbb{Z}^+ $ and some positive integer must be even plus the whole number $ <nat:456> $ is known as even . Furthermore , the integer $ <nat:64> $ is trivially an even natural number . Hence , the pair $ <var:N> \cdot <nat:64> $ must be even too . This theorem holds by reason that the summing of an even positive integer and even numbers in $ \mathbb{N} $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:a> <var:N> <var:A> : nat , Nat . odd ( <nat:344> * <var:a> + <nat:64> * <var:N> + <nat:456> * <var:A> + <nat:269> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:269> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:a> + <nat:64> * <var:N> + <nat:456> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 