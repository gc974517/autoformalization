\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:458> \cdot <var:S> + <var:t> \cdot <nat:14> + <nat:189> + <var:E> \cdot <nat:44> + <var:B> \cdot <nat:152> + <nat:88> \cdot <var:j> + <nat:140> \cdot <var:l> + <var:W> \cdot <nat:472> + <nat:344> \cdot <var:d> $ is guaranteed to be odd using all unknowns $ <var:l> $ , $ <var:d> $ , $ <var:S> $ , $ <var:t> $ , $ <var:B> $ , $ <var:W> $ , $ <var:E> $ , and $ <var:j> $ . \end{theorem} \begin{proof} The products $ <var:t> * <nat:14> $ , $ <nat:344> * <var:d> $ , additionally $ <var:j> * <nat:88> $ are guaranteed to be even by reason that the product of an even number and an arbitrary number in $ \mathbb{Z}^+ $ is an even positive integer . In addition to this , the pairs $ <var:W> * <nat:472> $ , $ <nat:140> * <var:l> $ , in addition to $ <nat:44> * <var:E> $ are obviously even . This claim holds by reason that the multiplication between an even natural number with an arbitrary element of $ \mathbb{Z}^+ $ is even . We know $ <var:S> * <nat:458> $ is guaranteed to be even . $ <var:B> * <nat:152> $ is known to be an even positive integer as a consequence that the product of an even positive integer and a number is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:d> <var:S> <var:t> <var:B> <var:W> <var:E> <var:j> : nat , Nat . odd ( <nat:458> * <var:S> + <nat:14> * <var:t> + <nat:44> * <var:E> + <nat:152> * <var:B> + <nat:88> * <var:j> + <nat:140> * <var:l> + <nat:472> * <var:W> + <nat:344> * <var:d> + <nat:189> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:14> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:152> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 