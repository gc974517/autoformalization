\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted we get $ <var:F> $ , $ <var:x> $ , $ <var:W> $ , $ <var:j> $ , $ <var:E> $ , $ <var:z> $ , $ <var:c> $ , $ <var:K> $ , $ <var:g> \geq <nat:2> $ such that given $ <var:X> \in \mathbb{N} $ , $ <var:x> * <var:K> * <var:E> * <var:j> * <var:F> * <var:c> * <var:W> * <var:g> * <var:z> = <var:X> $ using some natural numbers $ <var:F> $ , $ <var:W> $ , $ <var:E> $ , $ <var:j> $ , $ <var:K> $ , $ <var:z> $ , $ <var:g> $ , $ <var:x> $ , $ <var:c> $ , claim that $ <var:X> $ is a <def:nine-composite> whole number . Hence <nat:37065600> is a <def:nine-composite> integer . \end{theorem} \begin{proof} We verify the claim holds in consideration of $ <nat:11> $ , $ <nat:13> $ , $ <nat:2> $ , $ <nat:10> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:4> $ , and $ <nat:6> \geq <nat:2> $ and by reason of $ <var:K> \times <var:z> \times <var:j> \times <var:E> \times <var:F> \times <var:x> \times <var:W> \times <var:c> \times <var:g> = <nat:4> \times <nat:5> \times <nat:13> \times <nat:12> \times <nat:10> \times <nat:9> \times <nat:6> \times <nat:11> \times <nat:2> = <nat:37065600> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:X> : nat ) := exists <var:F> <var:W> <var:E> <var:j> <var:K> <var:z> <var:g> <var:x> <var:c> : nat , ( <var:F> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:x> * <var:K> * <var:E> * <var:j> * <var:F> * <var:c> * <var:W> * <var:g> * <var:z> = <var:X> ) . Theorem <genP:1> : <def:nine-composite> <nat:37065600> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:6> . exists <nat:12> . exists <nat:13> . exists <nat:4> . exists <nat:5> . exists <nat:2> . exists <nat:9> . exists <nat:11> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 