\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:P> * <nat:234> + <var:v> * <nat:160> + <var:b> * <nat:112> + <var:n> * <nat:106> + <var:r> * <nat:40> + <nat:198> * <var:u> + <nat:54> * <var:m> + <nat:14> * <var:o> + <var:R> * <nat:164> + <nat:322> * <var:j> + <nat:34> $ will be even . \end{theorem} \begin{proof} Likewise , the leading terms $ <nat:234> $ , $ <nat:160> $ , $ <nat:112> $ , $ <nat:106> $ , $ <nat:40> $ , $ <nat:198> $ , $ <nat:54> $ , $ <nat:14> $ , $ <nat:164> $ , $ <nat:322> $ , are obviously even numbers in $ \mathbb{N} $ . For this reason , the products $ <nat:234> \cdot <var:P> $ , $ <var:v> \cdot <nat:160> $ , $ <nat:112> \cdot <var:b> $ , $ <var:n> \cdot <nat:106> $ , $ <var:r> \cdot <nat:40> $ , $ <var:u> \cdot <nat:198> $ , $ <nat:54> \cdot <var:m> $ , $ <var:o> \cdot <nat:14> $ , $ <nat:164> \cdot <var:R> $ , $ <var:j> \cdot <nat:322> $ , will be even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:v> <var:b> <var:n> <var:r> <var:u> <var:m> <var:o> <var:R> <var:j> : nat , Nat . even ( <nat:234> * <var:P> + <nat:160> * <var:v> + <nat:112> * <var:b> + <nat:106> * <var:n> + <nat:40> * <var:r> + <nat:198> * <var:u> + <nat:54> * <var:m> + <nat:14> * <var:o> + <nat:164> * <var:R> + <nat:322> * <var:j> + <nat:34> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:112> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even <nat:322> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:112> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 