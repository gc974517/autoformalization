\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Claim that $ <var:e> $ is a <def:six-composite> whole number if and only if for some $ <var:g> $ , $ <var:q> $ , $ <var:B> $ , $ <var:J> $ , $ <var:N> $ , $ <var:b> \in \mathbb{N} $ we have $ <var:g> $ , $ <var:b> $ , $ <var:N> $ , $ <var:q> $ , $ <var:J> $ , and $ <var:B> \geq <nat:2> $ plus using some number $ <var:e> $ , $ <var:B> * <var:q> * <var:b> * <var:g> * <var:J> * <var:N> = <var:e> $ . Hence $ <var:e> = <nat:494208> $ is <def:six-composite> . \end{theorem} \begin{proof} Remember that <nat:494208> is <def:six-composite> given <nat:494208> is the product of positive integers $ <var:g> $ , $ <var:B> $ , $ <var:N> $ , $ <var:J> $ , $ <var:q> $ and $ <var:b> $ larger than or equivalent to <nat:2> . Allow $ <var:b> = <nat:9> $ , $ <var:N> = <nat:8> $ , $ <var:J> = <nat:11> $ , $ <var:q> = <nat:13> $ , $ <var:B> = <nat:12> $ , $ <var:g> = <nat:4> $ . Plus notice $ <nat:11> $ , $ <nat:9> $ , $ <nat:8> $ , $ <nat:13> $ , $ <nat:12> $ , and $ <nat:4> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:e> : nat ) := exists <var:g> <var:q> <var:B> <var:J> <var:N> <var:b> : nat , ( <var:g> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:B> * <var:q> * <var:b> * <var:g> * <var:J> * <var:N> = <var:e> ) . Theorem <genP:1> : <def:six-composite> <nat:494208> . Proof . unfold <def:six-composite> . exists <nat:4> . exists <nat:13> . exists <nat:12> . exists <nat:11> . exists <nat:8> . exists <nat:9> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 