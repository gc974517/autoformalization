\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming that we get where $ <var:O> $ , $ <var:c> $ , $ <var:J> $ , $ <var:p> $ , $ <var:Y> $ , and $ <var:u> > <nat:1> $ where taking $ <var:t> \in \mathbb{Z}^+ $ , $ <var:c> \times <var:J> \times <var:Y> \times <var:u> \times <var:O> \times <var:p> = <var:t> $ assuming some $ <var:O> $ , $ <var:c> $ , $ <var:J> $ , $ <var:p> $ , $ <var:u> $ , $ <var:Y> \in \mathbb{N} $ , claim that $ <var:t> $ is a <def:six-composite> natural number . Accordingly the number <nat:26880> is a <def:six-composite> positive integer . \end{theorem} \begin{proof} Recollect that <nat:26880> is <def:six-composite> under the condition that <nat:26880> is the product between positive integers $ <var:J> $ , $ <var:Y> $ , $ <var:u> $ , $ <var:O> $ , $ <var:c> $ , $ <var:p> $ more than <nat:1> . Notice $ <nat:5> \times <nat:12> \times <nat:2> \times <nat:8> \times <nat:4> \times <nat:7> = <nat:26880> $ . Moreover observe that $ <nat:8> $ , $ <nat:5> $ , $ <nat:7> $ , $ <nat:2> $ , $ <nat:4> $ , $ <nat:12> $ are greater than <nat:1> . So , <nat:26880> is a <def:six-composite> positive integer is validated . Consequently , <nat:26880> is the multiplication of $ <var:p> $ , $ <var:O> $ , $ <var:J> $ , $ <var:u> $ , $ <var:Y> $ , and $ <var:c> \in \mathbb{Z}^+ $ has been verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:t> : nat ) := exists <var:O> <var:c> <var:J> <var:p> <var:u> <var:Y> : nat , ( <var:O> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:c> * <var:J> * <var:Y> * <var:u> * <var:O> * <var:p> = <var:t> ) . Theorem <genP:1> : <def:six-composite> <nat:26880> . Proof . unfold <def:six-composite> . exists <nat:2> . exists <nat:4> . exists <nat:5> . exists <nat:12> . exists <nat:7> . exists <nat:8> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 