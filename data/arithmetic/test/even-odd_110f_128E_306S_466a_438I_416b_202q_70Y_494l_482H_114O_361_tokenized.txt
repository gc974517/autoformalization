\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every natural terms $ <var:I> $ , $ <var:a> $ , $ <var:Y> $ , $ <var:f> $ , $ <var:E> $ , $ <var:l> $ , $ <var:b> $ , $ <var:H> $ , $ <var:S> $ , $ <var:q> $ , and $ <var:O> $ the expression $ <var:I> \times <nat:438> + <var:S> \times <nat:306> + <nat:494> \times <var:l> + <nat:202> \times <var:q> + <nat:128> \times <var:E> + <nat:361> + <var:Y> \times <nat:70> + <var:O> \times <nat:114> + <nat:482> \times <var:H> + <nat:466> \times <var:a> + <var:b> \times <nat:416> + <var:f> \times <nat:110> $ is guaranteed to be odd . \end{theorem} \begin{proof} The summation $ <nat:494> \cdot <var:l> + <var:E> \cdot <nat:128> + <var:Y> \cdot <nat:70> + <nat:466> \cdot <var:a> + <nat:306> \cdot <var:S> + <var:b> \cdot <nat:416> + <nat:482> \cdot <var:H> + <nat:438> \cdot <var:I> + <nat:110> \cdot <var:f> + <var:O> \cdot <nat:114> + <var:q> \cdot <nat:202> $ is even . Notice that the products $ <var:O> * <nat:114> $ , $ <nat:128> * <var:E> $ , $ <var:H> * <nat:482> $ , $ <var:q> * <nat:202> $ , $ <nat:416> * <var:b> $ , and moreover $ <nat:438> * <var:I> $ are trivially even . Furthermore , remember the pairs $ <var:l> * <nat:494> $ , $ <var:f> * <nat:110> $ , $ <var:Y> * <nat:70> $ , and $ <var:a> * <nat:466> $ are obviously even elements of $ \mathbb{Z}^+ $ . Building on , see that the pair $ <nat:306> * <var:S> $ is obviously even . The summation $ <var:f> <nat:110> + <var:E> <nat:128> + <var:S> <nat:306> + <nat:466> <var:a> + <nat:438> <var:I> + <nat:416> <var:b> + <var:q> <nat:202> + <var:Y> <nat:70> + <var:l> <nat:494> + <nat:482> <var:H> + <nat:114> <var:O> $ will be by itself even from the knowledge the multiplication of an even positive integer with any number in $ \mathbb{N} $ must be even . Observe that the addition of an even natural number and an odd element of $ \mathbb{Z}^+ $ must be instrinsically an odd number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:a> <var:Y> <var:f> <var:E> <var:l> <var:b> <var:H> <var:S> <var:q> <var:O> : nat , Nat . odd ( <nat:438> * <var:I> + <nat:306> * <var:S> + <nat:494> * <var:l> + <nat:202> * <var:q> + <nat:128> * <var:E> + <nat:70> * <var:Y> + <nat:114> * <var:O> + <nat:482> * <var:H> + <nat:466> * <var:a> + <nat:416> * <var:b> + <nat:110> * <var:f> + <nat:361> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:114> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:I> + <nat:306> * <var:S> + <nat:494> * <var:l> + <nat:202> * <var:q> + <nat:128> * <var:E> + <nat:70> * <var:Y> + <nat:114> * <var:O> + <nat:482> * <var:H> + <nat:466> * <var:a> + <nat:416> * <var:b> + <nat:110> * <var:f> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 