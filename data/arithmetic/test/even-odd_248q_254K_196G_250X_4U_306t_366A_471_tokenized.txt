\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming any terms $ <var:G> $ , $ <var:A> $ , $ <var:q> $ , $ <var:K> $ , $ <var:U> $ , $ <var:X> $ , and $ <var:t> $ $ <var:A> \times <nat:366> + <nat:196> \times <var:G> + <nat:250> \times <var:X> + <nat:306> \times <var:t> + <nat:471> + <var:K> \times <nat:254> + <nat:248> \times <var:q> + <nat:4> \times <var:U> $ must be odd . \end{theorem} \begin{proof} $ <nat:248> \times <var:q> + <nat:254> \times <var:K> + <var:G> \times <nat:196> + <nat:250> \times <var:X> + <nat:4> \times <var:U> + <var:t> \times <nat:306> + <var:A> \times <nat:366> $ is even . The numbers $ <nat:248> $ , $ <nat:254> $ , $ <nat:196> $ , $ <nat:250> $ , $ <nat:4> $ , $ <nat:306> $ , and likewise $ <nat:366> $ are obviously even . Consequently , the products $ <var:q> \cdot <nat:248> $ , $ <var:K> \cdot <nat:254> $ , $ <nat:196> \cdot <var:G> $ , $ <nat:250> \cdot <var:X> $ , $ <var:U> \cdot <nat:4> $ , $ <nat:306> \cdot <var:t> $ , and $ <var:A> \cdot <nat:366> $ is guaranteed to be even at the same time . This main result must be true since the multiplication of even positive integers and some integer must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:A> <var:q> <var:K> <var:U> <var:X> <var:t> : nat , Nat . odd ( <nat:366> * <var:A> + <nat:196> * <var:G> + <nat:250> * <var:X> + <nat:306> * <var:t> + <nat:254> * <var:K> + <nat:248> * <var:q> + <nat:4> * <var:U> + <nat:471> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:A> + <nat:196> * <var:G> + <nat:250> * <var:X> + <nat:306> * <var:t> + <nat:254> * <var:K> + <nat:248> * <var:q> + <nat:4> * <var:U> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 