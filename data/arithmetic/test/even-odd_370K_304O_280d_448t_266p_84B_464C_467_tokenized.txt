\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:280> * <var:d> + <nat:304> * <var:O> + <nat:84> * <var:B> + <var:t> * <nat:448> + <nat:370> * <var:K> + <var:p> * <nat:266> + <nat:464> * <var:C> + <nat:467> $ is odd given any integers $ <var:C> $ , $ <var:K> $ , $ <var:B> $ , $ <var:t> $ , $ <var:p> $ , $ <var:d> $ , and $ <var:O> $ . \end{theorem} \begin{proof} The expression $ <nat:280> <var:d> + <nat:304> <var:O> + <nat:266> <var:p> + <var:t> <nat:448> + <var:K> <nat:370> + <nat:467> + <nat:464> <var:C> + <var:B> <nat:84> $ is odd from the knowledge the expression $ <nat:370> \times <var:K> + <var:O> \times <nat:304> + <var:d> \times <nat:280> + <var:t> \times <nat:448> + <nat:266> \times <var:p> + <nat:84> \times <var:B> + <nat:464> \times <var:C> $ is guaranteed to be even . The pairs $ <nat:370> <var:K> $ plus $ <var:C> <nat:464> $ will be even numbers in $ \mathbb{Z}^+ $ as a consequence that the product of an even number with some whole number must be clearly an even number . The products $ <nat:304> <var:O> $ , $ <nat:84> <var:B> $ , $ <var:t> <nat:448> $ , and likewise $ <var:d> <nat:280> $ are even integers . In addition to this , notice the product $ <nat:266> <var:p> $ is obviously even . The lemma is proven from the knowledge multiplying of an even integer with some element of $ \mathbb{Z}^+ $ must be an even integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:K> <var:B> <var:t> <var:p> <var:d> <var:O> : nat , Nat . odd ( <nat:280> * <var:d> + <nat:304> * <var:O> + <nat:84> * <var:B> + <nat:448> * <var:t> + <nat:370> * <var:K> + <nat:266> * <var:p> + <nat:464> * <var:C> + <nat:467> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:370> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:d> + <nat:304> * <var:O> + <nat:84> * <var:B> + <nat:448> * <var:t> + <nat:370> * <var:K> + <nat:266> * <var:p> + <nat:464> * <var:C> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 