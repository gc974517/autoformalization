\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} The positive integer <nat:739200> is the multiplication of whole numbers $ <var:R> $ , $ <var:g> $ , $ <var:i> $ , $ <var:v> $ , $ <var:Z> $ , $ <var:b> $ , $ <var:I> $ , and $ <var:q> $ satisfying the condition that $ <var:I> $ , $ <var:Z> $ , $ <var:i> $ , $ <var:v> $ , $ <var:g> $ , $ <var:R> $ , $ <var:b> $ , and $ <var:q> > <nat:1> $ . \end{theorem} \begin{proof} Let $ <var:i> = <nat:8> $ , $ <var:v> = <nat:5> $ , $ <var:g> = <nat:4> $ , $ <var:b> = <nat:2> $ , $ <var:Z> = <nat:11> $ , $ <var:q> = <nat:10> $ , $ <var:I> = <nat:3> $ , $ <var:R> = <nat:7> $ . Notice $ <nat:3> \times <nat:11> \times <nat:2> \times <nat:10> \times <nat:5> \times <nat:4> \times <nat:7> \times <nat:8> = <nat:739200> = <var:I> \times <var:Z> \times <var:b> \times <var:q> \times <var:v> \times <var:g> \times <var:R> \times <var:i> $ . Further observe $ <var:g> = <nat:4> $ , $ <var:v> = <nat:5> $ , $ <var:b> = <nat:2> $ , $ <var:Z> = <nat:11> $ , $ <var:i> = <nat:8> $ , $ <var:R> = <nat:7> $ , $ <var:I> = <nat:3> $ , $ <var:q> = <nat:10> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:R> <var:g> <var:i> <var:v> <var:Z> <var:b> <var:I> <var:q> : nat , ( <nat:739200> = <var:R> * <var:g> * <var:i> * <var:v> * <var:Z> * <var:b> * <var:I> * <var:q> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:Z> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:q> > <nat:1> ) . Proof . exists <nat:7> . exists <nat:4> . exists <nat:8> . exists <nat:5> . exists <nat:11> . exists <nat:2> . exists <nat:3> . exists <nat:10> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 