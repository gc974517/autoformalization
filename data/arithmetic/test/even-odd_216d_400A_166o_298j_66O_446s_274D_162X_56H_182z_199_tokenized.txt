\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:216> <var:d> + <nat:400> <var:A> + <nat:166> <var:o> + <nat:199> + <var:j> <nat:298> + <var:O> <nat:66> + <var:s> <nat:446> + <var:D> <nat:274> + <var:X> <nat:162> + <var:H> <nat:56> + <nat:182> <var:z> $ will be odd . \end{theorem} \begin{proof} Observe the terms $ <var:j> <nat:298> $ , $ <nat:446> <var:s> $ , $ <nat:56> <var:H> $ , $ <nat:274> <var:D> $ , $ <var:X> <nat:162> $ , $ <nat:66> <var:O> $ , $ <var:d> <nat:216> $ , plus $ <var:A> <nat:400> $ will be even elements of $ \mathbb{Z}^+ $ by reason that multiplying of an even whole number with any integer must be even . Observe the term $ <nat:182> <var:z> $ is clearly even . Notice that the term $ <var:o> <nat:166> $ is even as a consequence that multiplying between an even natural and some number is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:A> <var:o> <var:j> <var:O> <var:s> <var:D> <var:X> <var:H> <var:z> : nat , Nat . odd ( <nat:216> * <var:d> + <nat:400> * <var:A> + <nat:166> * <var:o> + <nat:298> * <var:j> + <nat:66> * <var:O> + <nat:446> * <var:s> + <nat:274> * <var:D> + <nat:162> * <var:X> + <nat:56> * <var:H> + <nat:182> * <var:z> + <nat:199> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:298> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:216> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 