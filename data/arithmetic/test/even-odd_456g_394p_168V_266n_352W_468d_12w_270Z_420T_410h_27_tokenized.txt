\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all unknowns $ <var:d> $ , $ <var:T> $ , $ <var:w> $ , $ <var:p> $ , $ <var:g> $ , $ <var:n> $ , $ <var:Z> $ , $ <var:V> $ , $ <var:W> $ , and $ <var:h> $ $ <nat:352> * <var:W> + <var:p> * <nat:394> + <nat:12> * <var:w> + <nat:420> * <var:T> + <var:d> * <nat:468> + <var:Z> * <nat:270> + <nat:27> + <nat:168> * <var:V> + <nat:456> * <var:g> + <var:h> * <nat:410> + <var:n> * <nat:266> $ is odd . \end{theorem} \begin{proof} The products $ <var:n> <nat:266> $ , $ <var:p> <nat:394> $ , $ <var:Z> <nat:270> $ , $ <var:d> <nat:468> $ , $ <nat:410> <var:h> $ , and $ <nat:12> <var:w> $ are even positive integers from the knowledge the product of an even number and an arbitrary number in $ \mathbb{Z}^+ $ is guaranteed to be even . Notice that the products $ <var:W> <nat:352> $ , $ <var:T> <nat:420> $ , plus $ <nat:456> <var:g> $ are even numbers in $ \mathbb{N} $ . What's more , the pair $ <nat:168> <var:V> $ is guaranteed to be an even number in $ \mathbb{N} $ . This is proven from the knowledge the multiplication between an even number in $ \mathbb{N} $ and some element of $ \mathbb{N} $ will be even . It can be checked that $ <nat:27> + <var:g> \times <nat:456> + <nat:394> \times <var:p> + <nat:168> \times <var:V> + <var:n> \times <nat:266> + <nat:352> \times <var:W> + <nat:468> \times <var:d> + <nat:12> \times <var:w> + <var:Z> \times <nat:270> + <nat:420> \times <var:T> + <var:h> \times <nat:410> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:T> <var:w> <var:p> <var:g> <var:n> <var:Z> <var:V> <var:W> <var:h> : nat , Nat . odd ( <nat:352> * <var:W> + <nat:394> * <var:p> + <nat:12> * <var:w> + <nat:420> * <var:T> + <nat:468> * <var:d> + <nat:270> * <var:Z> + <nat:168> * <var:V> + <nat:456> * <var:g> + <nat:410> * <var:h> + <nat:266> * <var:n> + <nat:27> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:266> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 