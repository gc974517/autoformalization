\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> <nat:16> + <nat:382> <var:Z> + <var:I> <nat:124> + <nat:416> <var:g> + <var:H> <nat:94> + <nat:228> <var:E> + <nat:412> <var:a> + <nat:415> + <nat:374> <var:G> + <var:F> <nat:322> + <var:l> <nat:222> + <nat:466> <var:k> $ will be odd . \end{theorem} \begin{proof} We apply the understanding the expression $ <var:Z> * <nat:382> + <nat:94> * <var:H> + <nat:228> * <var:E> + <nat:124> * <var:I> + <var:G> * <nat:374> + <nat:466> * <var:k> + <var:K> * <nat:16> + <nat:412> * <var:a> + <nat:416> * <var:g> + <nat:222> * <var:l> + <nat:322> * <var:F> $ is clearly even . Adding on , the whole numbers $ <nat:382> $ , $ <nat:94> $ , $ <nat:228> $ , $ <nat:124> $ , $ <nat:374> $ , $ <nat:466> $ , $ <nat:16> $ , $ <nat:412> $ , $ <nat:416> $ , $ <nat:222> $ , plus $ <nat:322> $ are even . So , the pairs $ <nat:382> * <var:Z> $ , $ <var:H> * <nat:94> $ , $ <nat:228> * <var:E> $ , $ <nat:124> * <var:I> $ , $ <var:G> * <nat:374> $ , $ <var:k> * <nat:466> $ , $ <nat:16> * <var:K> $ , $ <nat:412> * <var:a> $ , $ <var:g> * <nat:416> $ , $ <var:l> * <nat:222> $ , and $ <nat:322> * <var:F> $ is even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:Z> <var:I> <var:g> <var:H> <var:E> <var:a> <var:G> <var:F> <var:l> <var:k> : nat , Nat . odd ( <nat:16> * <var:K> + <nat:382> * <var:Z> + <nat:124> * <var:I> + <nat:416> * <var:g> + <nat:94> * <var:H> + <nat:228> * <var:E> + <nat:412> * <var:a> + <nat:374> * <var:G> + <nat:322> * <var:F> + <nat:222> * <var:l> + <nat:466> * <var:k> + <nat:415> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:374> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:412> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:322> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:374> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:K> + <nat:382> * <var:Z> + <nat:124> * <var:I> + <nat:416> * <var:g> + <nat:94> * <var:H> + <nat:228> * <var:E> + <nat:412> * <var:a> + <nat:374> * <var:G> + <nat:322> * <var:F> + <nat:222> * <var:l> + <nat:466> * <var:k> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 