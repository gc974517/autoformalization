\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:152> \times <var:M> + <nat:62> \times <var:y> + <nat:117> + <nat:486> \times <var:P> + <nat:48> \times <var:c> + <nat:276> \times <var:Y> $ is odd with all integers $ <var:Y> $ , $ <var:c> $ , $ <var:P> $ , $ <var:y> $ , and $ <var:M> $ . \end{theorem} \begin{proof} In addition , the positive integers $ <nat:152> $ , $ <nat:62> $ , $ <nat:486> $ , $ <nat:48> $ , and likewise $ <nat:276> $ are even positive integers . For this reason , the terms $ <nat:152> * <var:M> $ , $ <var:y> * <nat:62> $ , $ <var:P> * <nat:486> $ , $ <nat:48> * <var:c> $ , as well as $ <nat:276> * <var:Y> $ is guaranteed to be even as well . Observe $ <nat:117> $ is an odd number . From the knowledge the totaling between even numbers in $ \mathbb{N} $ and an odd element of $ \mathbb{N} $ must be an odd natural number , then $ <nat:152> * <var:M> + <nat:486> * <var:P> + <var:y> * <nat:62> + <var:Y> * <nat:276> + <nat:117> + <var:c> * <nat:48> $ by its very nature will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:c> <var:P> <var:y> <var:M> : nat , Nat . odd ( <nat:152> * <var:M> + <nat:62> * <var:y> + <nat:486> * <var:P> + <nat:48> * <var:c> + <nat:276> * <var:Y> + <nat:117> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:152> = true ) . { auto . } assert ( <genH> : Nat . even <nat:62> = true ) . { auto . } assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:152> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:62> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:117> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 