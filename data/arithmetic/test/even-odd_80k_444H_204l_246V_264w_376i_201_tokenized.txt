\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using some $ <var:l> $ , $ <var:i> $ , $ <var:k> $ , $ <var:V> $ , $ <var:H> $ , and $ <var:w> $ the sum $ <var:k> \cdot <nat:80> + <var:H> \cdot <nat:444> + <nat:204> \cdot <var:l> + <var:V> \cdot <nat:246> + <var:w> \cdot <nat:264> + <nat:201> + <nat:376> \cdot <var:i> $ is odd . \end{theorem} \begin{proof} The product $ <var:V> \times <nat:246> $ is guaranteed to be an even number in $ \mathbb{N} $ . Likewise , remember that the products $ <nat:444> \times <var:H> $ , $ <nat:264> \times <var:w> $ , $ <nat:80> \times <var:k> $ , and likewise $ <nat:204> \times <var:l> $ are guaranteed to be even positive integers from the fact multiplying of an even integer and a natural will be even . The pair $ <nat:376> \times <var:i> $ is obviously even . This fact is proven by reason that the product between an even natural and an arbitrary whole number must be an even natural . Recall that the adding of an even natural number and an odd integer must be an odd number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:i> <var:k> <var:V> <var:H> <var:w> : nat , Nat . odd ( <nat:80> * <var:k> + <nat:444> * <var:H> + <nat:204> * <var:l> + <nat:246> * <var:V> + <nat:264> * <var:w> + <nat:376> * <var:i> + <nat:201> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:246> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:376> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 