\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:84> <var:x> + <var:A> <nat:292> + <nat:308> <var:G> + <nat:34> <var:u> + <nat:348> <var:E> + <var:K> <nat:192> + <nat:466> <var:B> + <nat:258> <var:Z> + <var:R> <nat:234> + <nat:309> + <var:l> <nat:30> + <var:f> <nat:66> $ must be odd . \end{theorem} \begin{proof} Notice that the pairs $ <nat:466> * <var:B> $ , $ <var:u> * <nat:34> $ , $ <nat:292> * <var:A> $ , $ <var:G> * <nat:308> $ , and also $ <var:f> * <nat:66> $ are guaranteed to be even since the product between an even integer and any natural number is an even number in $ \mathbb{N} $ and also the positive integers $ <nat:466> $ , $ <nat:34> $ , $ <nat:292> $ , $ <nat:308> $ , additionally $ <nat:66> $ must be even natural numbers . Take note that the products $ <var:x> * <nat:84> $ and $ <nat:234> * <var:R> $ are trivially even by reason that the positive integers $ <nat:84> $ plus $ <nat:234> $ are guaranteed to be even . We know the pair $ <nat:348> * <var:E> $ is known to be even by reason that the positive integer $ <nat:348> $ is known as even . The leading terms $ <nat:258> $ in addition to $ <nat:30> $ are clearly even whole numbers . Hence , the pairs $ <var:Z> * <nat:258> $ and moreover $ <var:l> * <nat:30> $ must be even in addition . The integer $ <nat:192> $ is guaranteed to be an even positive integer . Hence , the pair $ <var:K> * <nat:192> $ is even as well . We justify our lemma is proven . Recall that $ <nat:309> $ is trivially odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:A> <var:G> <var:u> <var:E> <var:K> <var:B> <var:Z> <var:R> <var:l> <var:f> : nat , Nat . odd ( <nat:84> * <var:x> + <nat:292> * <var:A> + <nat:308> * <var:G> + <nat:34> * <var:u> + <nat:348> * <var:E> + <nat:192> * <var:K> + <nat:466> * <var:B> + <nat:258> * <var:Z> + <nat:234> * <var:R> + <nat:30> * <var:l> + <nat:66> * <var:f> + <nat:309> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:84> = true ) . { auto . } assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:309> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 