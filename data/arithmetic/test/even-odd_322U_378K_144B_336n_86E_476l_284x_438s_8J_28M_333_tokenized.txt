\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:322> <var:U> + <var:K> <nat:378> + <var:B> <nat:144> + <var:n> <nat:336> + <var:E> <nat:86> + <var:l> <nat:476> + <nat:284> <var:x> + <nat:333> + <nat:438> <var:s> + <nat:8> <var:J> + <nat:28> <var:M> $ is guaranteed to be odd assuming all $ <var:M> $ , $ <var:U> $ , $ <var:x> $ , $ <var:s> $ , $ <var:E> $ , $ <var:B> $ , $ <var:n> $ , $ <var:K> $ , $ <var:l> $ , and $ <var:J> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} The terms $ <nat:378> * <var:K> $ , $ <var:s> * <nat:438> $ , $ <var:n> * <nat:336> $ , $ <var:l> * <nat:476> $ , $ <nat:86> * <var:E> $ , $ <nat:8> * <var:J> $ , $ <nat:144> * <var:B> $ , $ <nat:28> * <var:M> $ , plus $ <nat:284> * <var:x> $ are trivially even from the knowledge the product of an even element of $ \mathbb{N} $ and any positive integer is an even positive integer . Furthermore , recall that the product $ <var:U> * <nat:322> $ is trivially an even integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:U> <var:x> <var:s> <var:E> <var:B> <var:n> <var:K> <var:l> <var:J> : nat , Nat . odd ( <nat:322> * <var:U> + <nat:378> * <var:K> + <nat:144> * <var:B> + <nat:336> * <var:n> + <nat:86> * <var:E> + <nat:476> * <var:l> + <nat:284> * <var:x> + <nat:438> * <var:s> + <nat:8> * <var:J> + <nat:28> * <var:M> + <nat:333> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:378> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 