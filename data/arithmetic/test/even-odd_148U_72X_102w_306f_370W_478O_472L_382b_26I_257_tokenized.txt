\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:472> <var:L> + <var:w> <nat:102> + <var:O> <nat:478> + <nat:26> <var:I> + <var:W> <nat:370> + <nat:306> <var:f> + <nat:72> <var:X> + <nat:257> + <var:b> <nat:382> + <nat:148> <var:U> $ must be odd . \end{theorem} \begin{proof} We check that $ <nat:102> <var:w> + <nat:257> + <nat:472> <var:L> + <nat:72> <var:X> + <nat:370> <var:W> + <var:U> <nat:148> + <nat:382> <var:b> + <var:O> <nat:478> + <var:f> <nat:306> + <nat:26> <var:I> $ will be odd . Take note that the adding between an even number with an odd element of $ \mathbb{N} $ will be odd . We know $ <nat:257> $ is known to be an odd element of $ \mathbb{N} $ . Our claim holds since $ <var:U> <nat:148> + <var:X> <nat:72> + <var:w> <nat:102> + <nat:306> <var:f> + <var:W> <nat:370> + <nat:478> <var:O> + <nat:472> <var:L> + <var:b> <nat:382> + <var:I> <nat:26> $ is guaranteed to be even . Building on , recall the whole numbers $ <nat:148> $ , $ <nat:72> $ , $ <nat:102> $ , $ <nat:306> $ , $ <nat:370> $ , $ <nat:478> $ , $ <nat:472> $ , $ <nat:382> $ , and moreover $ <nat:26> $ are clearly even integers . As a consequence , the products $ <var:U> \cdot <nat:148> $ , $ <var:X> \cdot <nat:72> $ , $ <var:w> \cdot <nat:102> $ , $ <nat:306> \cdot <var:f> $ , $ <var:W> \cdot <nat:370> $ , $ <var:O> \cdot <nat:478> $ , $ <nat:472> \cdot <var:L> $ , $ <nat:382> \cdot <var:b> $ , and likewise $ <var:I> \cdot <nat:26> $ must be even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:w> <var:O> <var:I> <var:W> <var:f> <var:X> <var:b> <var:U> : nat , Nat . odd ( <nat:472> * <var:L> + <nat:102> * <var:w> + <nat:478> * <var:O> + <nat:26> * <var:I> + <nat:370> * <var:W> + <nat:306> * <var:f> + <nat:72> * <var:X> + <nat:382> * <var:b> + <nat:148> * <var:U> + <nat:257> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:257> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:472> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:L> + <nat:102> * <var:w> + <nat:478> * <var:O> + <nat:26> * <var:I> + <nat:370> * <var:W> + <nat:306> * <var:f> + <nat:72> * <var:X> + <nat:382> * <var:b> + <nat:148> * <var:U> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 