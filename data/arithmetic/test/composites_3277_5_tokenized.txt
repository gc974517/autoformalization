\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Whenever we get $ <var:L> $ , $ <var:P> $ , $ <var:Y> $ , $ <var:j> $ and $ <var:c> \geq <nat:2> $ where with $ <var:F> \in \mathbb{Z}^+ $ , $ <var:F> = <var:P> \times <var:c> \times <var:L> \times <var:Y> \times <var:j> $ , then take that $ <var:F> $ is a <def:five-composite> integer assuming some $ <var:P> $ , $ <var:Y> $ , $ <var:c> $ , $ <var:L> $ , $ <var:j> \in \mathbb{Z}^+ $ . \end{definition} \begin{theorem} The natural number <nat:46332> is a <def:five-composite> positive integer . \end{theorem} \begin{proof} Recollect that <nat:46332> is a <def:five-composite> number given it is the multiplication of positive integers $ <var:j> $ , $ <var:L> $ , $ <var:c> $ , $ <var:Y> $ , $ <var:P> $ more than or equal to <nat:2> . Allow $ <var:P> = <nat:9> $ , $ <var:c> = <nat:11> $ , $ <var:L> = <nat:13> $ , $ <var:j> = <nat:3> $ and $ <var:Y> = <nat:12> $ . Similarly notice $ <var:Y> = <nat:12> $ , $ <var:L> = <nat:13> $ , $ <var:c> = <nat:11> $ , $ <var:j> = <nat:3> $ , $ <var:P> = <nat:9> $ are more than or equivalent to <nat:2> . As a consequence , <nat:46332> is a <def:five-composite> integer has been validated . Because of this , $ <var:j> $ , $ <var:P> $ , $ <var:Y> $ , $ <var:L> $ , and $ <var:c> $ are more than or equal to <nat:2> and $ <var:L> * <var:Y> * <var:j> * <var:P> * <var:c> = <nat:46332> $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:F> : nat ) := exists <var:P> <var:Y> <var:c> <var:L> <var:j> : nat , ( <var:L> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:F> = <var:P> * <var:c> * <var:L> * <var:Y> * <var:j> ) . Theorem <genP:1> : <def:five-composite> <nat:46332> . Proof . unfold <def:five-composite> . exists <nat:9> . exists <nat:12> . exists <nat:11> . exists <nat:13> . exists <nat:3> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 