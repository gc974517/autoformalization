\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that we have $ <var:w> * <var:O> * <var:K> * <var:P> * <var:d> * <var:S> * <var:C> * <var:k> * <var:I> = <var:p> $ with some $ <var:p> $ as well as such that $ <var:S> $ , $ <var:d> $ , $ <var:I> $ , $ <var:K> $ , $ <var:C> $ , $ <var:O> $ , $ <var:w> $ , $ <var:k> $ and $ <var:P> \geq <nat:2> $ , then define that $ <var:p> $ is a <def:nine-composite> integer assuming some integers $ <var:C> $ , $ <var:d> $ , $ <var:O> $ , $ <var:I> $ , $ <var:S> $ , $ <var:K> $ , $ <var:w> $ , $ <var:P> $ , $ <var:k> $ . \end{definition} \begin{theorem} $ <nat:32432400> = <var:p> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Recollect that a <def:nine-composite> natural number is the product between $ <var:S> $ , $ <var:d> $ , $ <var:k> $ , $ <var:K> $ , $ <var:w> $ , $ <var:P> $ , $ <var:O> $ , $ <var:I> $ , $ <var:C> $ larger than <nat:1> . Note $ <var:C> * <var:k> * <var:O> * <var:d> * <var:S> * <var:K> * <var:w> * <var:P> * <var:I> = <nat:32432400> = <nat:3> * <nat:13> * <nat:7> * <nat:9> * <nat:11> * <nat:5> * <nat:2> * <nat:10> * <nat:12> $ . Additionally observe that $ <nat:11> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:7> $ , $ <nat:3> $ , $ <nat:13> $ , $ <nat:5> $ , $ <nat:9> $ , and $ <nat:10> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:p> : nat ) := exists <var:C> <var:d> <var:O> <var:I> <var:S> <var:K> <var:w> <var:P> <var:k> : nat , ( <var:w> * <var:O> * <var:K> * <var:P> * <var:d> * <var:S> * <var:C> * <var:k> * <var:I> = <var:p> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:32432400> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:9> . exists <nat:7> . exists <nat:12> . exists <nat:11> . exists <nat:5> . exists <nat:2> . exists <nat:10> . exists <nat:13> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 