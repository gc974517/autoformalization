\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:F> \times <nat:14> + <nat:30> \times <var:D> + <nat:78> \times <var:E> + <nat:405> + <nat:290> \times <var:B> + <var:L> \times <nat:414> $ will be odd . \end{theorem} \begin{proof} This theorem is true by reason that $ <nat:78> * <var:E> + <nat:30> * <var:D> + <var:L> * <nat:414> + <var:F> * <nat:14> + <nat:290> * <var:B> $ is known to be even . The terms $ <nat:414> * <var:L> $ , $ <var:D> * <nat:30> $ , $ <var:F> * <nat:14> $ , and moreover $ <var:B> * <nat:290> $ must be even natural numbers . In addition , observe the term $ <nat:78> * <var:E> $ is known to be even . $ <nat:30> * <var:D> + <var:E> * <nat:78> + <var:L> * <nat:414> + <var:F> * <nat:14> + <nat:290> * <var:B> $ must be even as a consequence that taking the product of an even number in $ \mathbb{Z}^+ $ and a whole number is guaranteed to be even . Remember the totaling between even positive integers concurrently with an odd natural number is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:D> <var:E> <var:B> <var:L> : nat , Nat . odd ( <nat:14> * <var:F> + <nat:30> * <var:D> + <nat:78> * <var:E> + <nat:290> * <var:B> + <nat:414> * <var:L> + <nat:405> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:414> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:F> + <nat:30> * <var:D> + <nat:78> * <var:E> + <nat:290> * <var:B> + <nat:414> * <var:L> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 