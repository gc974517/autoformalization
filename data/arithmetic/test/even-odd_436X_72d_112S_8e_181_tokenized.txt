\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:436> \times <var:X> + <nat:72> \times <var:d> + <nat:181> + <nat:8> \times <var:e> + <nat:112> \times <var:S> $ is odd . \end{theorem} \begin{proof} It can be demonstrated that $ <nat:436> \cdot <var:X> + <var:e> \cdot <nat:8> + <var:S> \cdot <nat:112> + <var:d> \cdot <nat:72> $ is guaranteed to be even . The whole numbers $ <nat:436> $ , $ <nat:8> $ , $ <nat:112> $ , and $ <nat:72> $ are obviously even integers . So , the pairs $ <nat:436> * <var:X> $ , $ <nat:8> * <var:e> $ , $ <var:S> * <nat:112> $ , and also $ <nat:72> * <var:d> $ is even in addition . From the knowledge multiplying between even elements of $ \mathbb{Z}^+ $ and an arbitrary natural must be obviously an even natural number $ <nat:436> <var:X> + <var:d> <nat:72> + <var:S> <nat:112> + <nat:8> <var:e> $ must be even . It can be verified that the lemma must be true . Remember $ <nat:181> $ is trivially an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:d> <var:e> <var:S> : nat , Nat . odd ( <nat:436> * <var:X> + <nat:72> * <var:d> + <nat:8> * <var:e> + <nat:112> * <var:S> + <nat:181> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:112> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:112> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:X> + <nat:72> * <var:d> + <nat:8> * <var:e> + <nat:112> * <var:S> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:181> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 