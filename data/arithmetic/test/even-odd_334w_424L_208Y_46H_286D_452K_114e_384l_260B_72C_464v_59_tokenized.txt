\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> <nat:452> + <nat:59> + <nat:424> <var:L> + <nat:208> <var:Y> + <nat:384> <var:l> + <var:w> <nat:334> + <var:e> <nat:114> + <nat:46> <var:H> + <var:C> <nat:72> + <var:B> <nat:260> + <var:D> <nat:286> + <var:v> <nat:464> $ will be odd . \end{theorem} \begin{proof} The proposition is proven as a consequence that $ <var:H> * <nat:46> + <var:D> * <nat:286> + <var:l> * <nat:384> + <var:C> * <nat:72> + <var:L> * <nat:424> + <var:w> * <nat:334> + <var:e> * <nat:114> + <nat:464> * <var:v> + <nat:452> * <var:K> + <nat:208> * <var:Y> + <var:B> * <nat:260> $ is known to be even . Likewise , take note that the leading terms $ <nat:46> $ , $ <nat:286> $ , $ <nat:384> $ , $ <nat:72> $ , $ <nat:424> $ , $ <nat:334> $ , $ <nat:114> $ , $ <nat:464> $ , $ <nat:452> $ , $ <nat:208> $ , and also $ <nat:260> $ will be even . As a consequence , the products $ <var:H> * <nat:46> $ , $ <var:D> * <nat:286> $ , $ <nat:384> * <var:l> $ , $ <nat:72> * <var:C> $ , $ <nat:424> * <var:L> $ , $ <var:w> * <nat:334> $ , $ <nat:114> * <var:e> $ , $ <nat:464> * <var:v> $ , $ <nat:452> * <var:K> $ , $ <var:Y> * <nat:208> $ , and also $ <var:B> * <nat:260> $ is even at the same time . The expression $ <nat:334> <var:w> + <nat:424> <var:L> + <var:Y> <nat:208> + <nat:46> <var:H> + <nat:286> <var:D> + <var:K> <nat:452> + <nat:114> <var:e> + <nat:384> <var:l> + <nat:260> <var:B> + <var:C> <nat:72> + <nat:464> <var:v> $ must be by itself even because taking the product between even numbers in $ \mathbb{N} $ and any number in $ \mathbb{N} $ must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:L> <var:Y> <var:l> <var:w> <var:e> <var:H> <var:C> <var:B> <var:D> <var:v> : nat , Nat . odd ( <nat:452> * <var:K> + <nat:424> * <var:L> + <nat:208> * <var:Y> + <nat:384> * <var:l> + <nat:334> * <var:w> + <nat:114> * <var:e> + <nat:46> * <var:H> + <nat:72> * <var:C> + <nat:260> * <var:B> + <nat:286> * <var:D> + <nat:464> * <var:v> + <nat:59> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:424> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:424> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:K> + <nat:424> * <var:L> + <nat:208> * <var:Y> + <nat:384> * <var:l> + <nat:334> * <var:w> + <nat:114> * <var:e> + <nat:46> * <var:H> + <nat:72> * <var:C> + <nat:260> * <var:B> + <nat:286> * <var:D> + <nat:464> * <var:v> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 