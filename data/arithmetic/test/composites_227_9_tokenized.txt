\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:s> $ , $ <var:z> $ , $ <var:e> $ , $ <var:b> $ , $ <var:t> $ , $ <var:m> $ , $ <var:y> $ , $ <var:j> $ , $ <var:M> \in \mathbb{N} $ greater than or equal to <nat:2> . Take as given that some integer $ <var:F> $ will be considered as a <def:nine-composite> natural number when $ <var:b> \cdot <var:j> \cdot <var:e> \cdot <var:z> \cdot <var:y> \cdot <var:m> \cdot <var:M> \cdot <var:t> \cdot <var:s> = <var:F> $ . \end{definition} \begin{theorem} The integer <nat:4838400> is a <def:nine-composite> number . \end{theorem} \begin{proof} Let $ <var:j> = <nat:6> $ , $ <var:m> = <nat:4> $ , $ <var:e> = <nat:2> $ , $ <var:y> = <nat:10> $ , $ <var:z> = <nat:8> $ , $ <var:M> = <nat:7> $ , $ <var:s> = <nat:5> $ , $ <var:t> = <nat:12> $ , and $ <var:b> = <nat:3> $ . Observe $ <nat:7> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:10> $ , $ <nat:2> $ , $ <nat:6> $ and $ <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:F> : nat ) := exists <var:s> <var:z> <var:e> <var:b> <var:t> <var:m> <var:y> <var:j> <var:M> : nat , ( <var:s> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:b> * <var:j> * <var:e> * <var:z> * <var:y> * <var:m> * <var:M> * <var:t> * <var:s> = <var:F> ) . Theorem <genP:1> : <def:nine-composite> <nat:4838400> . Proof . unfold <def:nine-composite> . exists <nat:5> . exists <nat:8> . exists <nat:2> . exists <nat:3> . exists <nat:12> . exists <nat:4> . exists <nat:10> . exists <nat:6> . exists <nat:7> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 