\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:472> \times <var:i> + <var:b> \times <nat:102> + <nat:240> \times <var:W> + <nat:160> \times <var:C> + <nat:350> \times <var:J> + <nat:224> \times <var:G> + <nat:196> \times <var:F> + <nat:63> + <var:V> \times <nat:358> + <nat:484> \times <var:Z> $ is guaranteed to be odd for variables $ <var:F> $ , $ <var:J> $ , $ <var:i> $ , $ <var:G> $ , $ <var:V> $ , $ <var:Z> $ , $ <var:W> $ , $ <var:b> $ , and $ <var:C> $ . \end{theorem} \begin{proof} Observe that the leading term $ <nat:224> $ is guaranteed to be even Adding on , recall the positive integers $ <nat:160> $ , $ <nat:358> $ , $ <nat:196> $ , additionally $ <nat:350> $ are known to be even whole numbers The positive integers $ <nat:472> $ , $ <nat:102> $ , additionally $ <nat:484> $ are obviously even The whole number $ <nat:240> $ is known as an even element of $ \mathbb{N} $ The product of an even element of $ \mathbb{N} $ and some element of $ \mathbb{N} $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ . Remember that $ <nat:63> $ is obviously odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:J> <var:i> <var:G> <var:V> <var:Z> <var:W> <var:b> <var:C> : nat , Nat . odd ( <nat:472> * <var:i> + <nat:102> * <var:b> + <nat:240> * <var:W> + <nat:160> * <var:C> + <nat:350> * <var:J> + <nat:224> * <var:G> + <nat:196> * <var:F> + <nat:358> * <var:V> + <nat:484> * <var:Z> + <nat:63> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:224> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:472> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . odd <nat:63> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 