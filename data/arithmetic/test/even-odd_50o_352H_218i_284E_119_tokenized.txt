\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:E> * <nat:284> + <nat:50> * <var:o> + <nat:218> * <var:i> + <nat:119> + <nat:352> * <var:H> $ will be odd . \end{theorem} \begin{proof} Our theorem is true from the knowledge $ <nat:218> \times <var:i> + <nat:50> \times <var:o> + <nat:284> \times <var:E> + <nat:352> \times <var:H> $ is known to be even . Recall that the number $ <nat:50> $ is known to be an even element of $ \mathbb{Z}^+ $ . Thus , $ <nat:50> \times <var:o> $ is even additionally . Building on , the product $ <nat:352> \times <var:H> $ is known to be an even element of $ \mathbb{N} $ since the number $ <nat:352> $ is an even whole number . In addition , the positive integer $ <nat:218> $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ . As a consequence , $ <var:i> \times <nat:218> $ is guaranteed to be even also . Recall that the leading term $ <nat:284> $ is known to be an even natural number . So , the term $ <nat:284> \times <var:E> $ is guaranteed to be even in addition . Since multiplying of even positive integers and some integer is guaranteed to be even $ <nat:50> \cdot <var:o> + <nat:352> \cdot <var:H> + <var:i> \cdot <nat:218> + <var:E> \cdot <nat:284> $ must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:o> <var:i> <var:H> : nat , Nat . odd ( <nat:284> * <var:E> + <nat:50> * <var:o> + <nat:218> * <var:i> + <nat:352> * <var:H> + <nat:119> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:E> + <nat:50> * <var:o> + <nat:218> * <var:i> + <nat:352> * <var:H> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 