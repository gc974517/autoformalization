\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:360> <var:B> + <var:y> <nat:136> + <nat:122> <var:X> + <var:O> <nat:494> + <var:r> <nat:184> + <nat:230> <var:f> + <var:T> <nat:294> + <nat:87> + <var:F> <nat:436> + <nat:128> <var:u> + <nat:468> <var:Y> $ will be odd . \end{theorem} \begin{proof} We make use the knowledge that the summation $ <var:X> * <nat:122> + <var:f> * <nat:230> + <nat:128> * <var:u> + <var:T> * <nat:294> + <var:r> * <nat:184> + <var:F> * <nat:436> + <var:O> * <nat:494> + <nat:468> * <var:Y> + <nat:136> * <var:y> + <nat:360> * <var:B> $ is obviously even . Take note that the products $ <var:u> \cdot <nat:128> $ , $ <var:B> \cdot <nat:360> $ , $ <var:F> \cdot <nat:436> $ , $ <var:T> \cdot <nat:294> $ , $ <nat:230> \cdot <var:f> $ , in addition to $ <nat:184> \cdot <var:r> $ are clearly even as a consequence that the whole numbers $ <nat:128> $ , $ <nat:360> $ , $ <nat:436> $ , $ <nat:294> $ , $ <nat:230> $ , plus $ <nat:184> $ are clearly even . We know that the pairs $ <var:O> \cdot <nat:494> $ , $ <var:X> \cdot <nat:122> $ , in addition to $ <var:Y> \cdot <nat:468> $ are clearly even from the knowledge the coefficients $ <nat:494> $ , $ <nat:122> $ , in addition to $ <nat:468> $ will be even . We know the integer $ <nat:136> $ is known as an even element of $ \mathbb{Z}^+ $ . As a consequence , $ <nat:136> \cdot <var:y> $ will be even additionally . We check our proposition is true . See $ <nat:87> $ is known to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:B> <var:y> <var:X> <var:O> <var:r> <var:f> <var:T> <var:F> <var:u> <var:Y> : nat , Nat . odd ( <nat:360> * <var:B> + <nat:136> * <var:y> + <nat:122> * <var:X> + <nat:494> * <var:O> + <nat:184> * <var:r> + <nat:230> * <var:f> + <nat:294> * <var:T> + <nat:436> * <var:F> + <nat:128> * <var:u> + <nat:468> * <var:Y> + <nat:87> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:494> = true ) . { auto . } assert ( <genH> : Nat . even <nat:122> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:122> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:B> + <nat:136> * <var:y> + <nat:122> * <var:X> + <nat:494> * <var:O> + <nat:184> * <var:r> + <nat:230> * <var:f> + <nat:294> * <var:T> + <nat:436> * <var:F> + <nat:128> * <var:u> + <nat:468> * <var:Y> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:87> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 