\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using all positive terms $ <var:X> $ , $ <var:B> $ , $ <var:D> $ , $ <var:s> $ , $ <var:b> $ , $ <var:o> $ , $ <var:r> $ , and $ <var:S> $ the formula $ <var:D> \cdot <nat:92> + <var:S> \cdot <nat:314> + <nat:364> \cdot <var:B> + <nat:308> \cdot <var:X> + <nat:76> \cdot <var:r> + <var:b> \cdot <nat:128> + <nat:406> \cdot <var:s> + <nat:416> + <var:o> \cdot <nat:266> $ is guaranteed to be even . \end{theorem} \begin{proof} The formula $ <var:o> * <nat:266> + <nat:76> * <var:r> + <nat:406> * <var:s> + <var:X> * <nat:308> + <var:S> * <nat:314> + <nat:364> * <var:B> + <var:b> * <nat:128> + <nat:92> * <var:D> $ is guaranteed to be even . Observe the totaling between even natural numbers collectively is guaranteed to be even . On top of this , the integers $ <nat:266> $ , $ <nat:76> $ , $ <nat:406> $ , $ <nat:308> $ , $ <nat:314> $ , $ <nat:364> $ , $ <nat:128> $ , in addition to $ <nat:92> $ must be even numbers . For this reason , the pairs $ <var:o> <nat:266> $ , $ <var:r> <nat:76> $ , $ <nat:406> <var:s> $ , $ <var:X> <nat:308> $ , $ <nat:314> <var:S> $ , $ <nat:364> <var:B> $ , $ <nat:128> <var:b> $ , plus $ <nat:92> <var:D> $ will be even also . in addition to as a consequence that the product of an even integer and a positive integer is guaranteed to be even the summation $ <var:S> \times <nat:314> + <nat:128> \times <var:b> + <nat:76> \times <var:r> + <nat:364> \times <var:B> + <nat:266> \times <var:o> + <var:s> \times <nat:406> + <var:D> \times <nat:92> + <var:X> \times <nat:308> $ will be fundamentally even . Remember that $ <nat:416> $ is trivially an even integer . It can be demonstrated that $ <nat:76> * <var:r> + <nat:416> + <nat:92> * <var:D> + <nat:128> * <var:b> + <var:s> * <nat:406> + <nat:308> * <var:X> + <var:S> * <nat:314> + <nat:266> * <var:o> + <nat:364> * <var:B> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:B> <var:D> <var:s> <var:b> <var:o> <var:r> <var:S> : nat , Nat . even ( <nat:92> * <var:D> + <nat:314> * <var:S> + <nat:364> * <var:B> + <nat:308> * <var:X> + <nat:76> * <var:r> + <nat:128> * <var:b> + <nat:406> * <var:s> + <nat:266> * <var:o> + <nat:416> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:D> + <nat:314> * <var:S> + <nat:364> * <var:B> + <nat:308> * <var:X> + <nat:76> * <var:r> + <nat:128> * <var:b> + <nat:406> * <var:s> + <nat:266> * <var:o> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . auto . Qed . 