\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:x> \times <var:w> \times <var:f> \times <var:V> \times <var:T> \times <var:s> \times <var:z> $ is the same as $ <nat:576576> $ assuming $ <var:s> $ , $ <var:z> $ , $ <var:x> $ , $ <var:w> $ , $ <var:T> $ , $ <var:f> $ , and $ <var:V> \in \mathbb{Z}^+ $ such that $ <var:z> $ , $ <var:x> $ , $ <var:s> $ , $ <var:f> $ , $ <var:T> $ , $ <var:w> $ , $ <var:V> $ greater than or equivalent to <nat:2> . \end{theorem} \begin{proof} We prove our statement is valid because $ <nat:4> \cdot <nat:7> \cdot <nat:11> \cdot <nat:12> \cdot <nat:6> \cdot <nat:13> \cdot <nat:2> = <nat:576576> = <var:w> \cdot <var:s> \cdot <var:T> \cdot <var:z> \cdot <var:V> \cdot <var:x> \cdot <var:f> $ and considering $ <nat:4> $ , $ <nat:7> $ , $ <nat:11> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:13> $ are larger than or equivalent to <nat:2> . As a result , <nat:576576> is the product between some positive integers $ <var:x> $ , $ <var:V> $ , $ <var:s> $ , $ <var:w> $ , $ <var:f> $ , $ <var:z> $ , and $ <var:T> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:s> <var:z> <var:x> <var:w> <var:T> <var:f> <var:V> : nat , ( <var:x> * <var:w> * <var:f> * <var:V> * <var:T> * <var:s> * <var:z> = <nat:576576> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) . Proof . exists <nat:7> . exists <nat:12> . exists <nat:13> . exists <nat:4> . exists <nat:11> . exists <nat:2> . exists <nat:6> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 