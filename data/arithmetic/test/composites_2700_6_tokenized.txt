\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume that $ <var:O> $ is a <def:six-composite> number when there exist $ <var:C> $ , $ <var:Y> $ , $ <var:m> $ , $ <var:p> $ , $ <var:U> $ , $ <var:w> \in \mathbb{N} $ satisfying the condition that $ <var:O> = <var:p> * <var:Y> * <var:C> * <var:w> * <var:m> * <var:U> $ for $ <var:O> \in \mathbb{N} $ plus such that $ <var:U> $ , $ <var:p> $ , $ <var:m> $ , $ <var:w> $ , $ <var:C> $ , and $ <var:Y> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:90720> = <var:O> $ is a <def:six-composite> number . \end{theorem} \begin{proof} Recall a <def:six-composite> number is the multiplication between positive integers $ <var:p> $ , $ <var:C> $ , $ <var:w> $ , $ <var:m> $ , $ <var:U> $ and $ <var:Y> $ greater than <nat:1> . We present <nat:90720> is a <def:six-composite> positive integer . We show our thesis holds by reason of $ <nat:6> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:9> $ , $ <nat:10> $ and $ <nat:7> $ are more than <nat:1> plus seeing that $ <var:m> \times <var:p> \times <var:U> \times <var:C> \times <var:w> \times <var:Y> = <nat:90720> $ gives $ <var:p> = <nat:7> $ , $ <var:m> = <nat:2> $ , $ <var:U> = <nat:9> $ , $ <var:Y> = <nat:6> $ , $ <var:w> = <nat:10> $ , $ <var:C> = <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:O> : nat ) := exists <var:C> <var:Y> <var:m> <var:p> <var:U> <var:w> : nat , ( <var:O> = <var:p> * <var:Y> * <var:C> * <var:w> * <var:m> * <var:U> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:90720> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } exists <nat:12> . exists <nat:6> . exists <nat:2> . exists <nat:7> . exists <nat:9> . exists <nat:10> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 