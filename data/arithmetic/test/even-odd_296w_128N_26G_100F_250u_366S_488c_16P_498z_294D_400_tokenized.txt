\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking positive numbers $ <var:G> $ , $ <var:z> $ , $ <var:u> $ , $ <var:N> $ , $ <var:D> $ , $ <var:c> $ , $ <var:w> $ , $ <var:F> $ , $ <var:P> $ , and $ <var:S> $ the expression $ <var:z> \times <nat:498> + <var:w> \times <nat:296> + <var:S> \times <nat:366> + <var:D> \times <nat:294> + <var:N> \times <nat:128> + <nat:400> + <var:F> \times <nat:100> + <nat:250> \times <var:u> + <var:c> \times <nat:488> + <var:P> \times <nat:16> + <var:G> \times <nat:26> $ is even . \end{theorem} \begin{proof} The summing of an even natural and an even positive integer will be even . We make use the knowledge the formula $ <nat:488> * <var:c> + <nat:128> * <var:N> + <var:S> * <nat:366> + <nat:26> * <var:G> + <var:u> * <nat:250> + <nat:400> + <nat:16> * <var:P> + <nat:100> * <var:F> + <nat:294> * <var:D> + <nat:498> * <var:z> + <var:w> * <nat:296> $ is known to be even since $ <nat:294> <var:D> + <var:w> <nat:296> + <nat:128> <var:N> + <nat:26> <var:G> + <var:u> <nat:250> + <var:F> <nat:100> + <var:c> <nat:488> + <var:P> <nat:16> + <nat:498> <var:z> + <var:S> <nat:366> $ is guaranteed to be even . The whole numbers $ <nat:294> $ , $ <nat:296> $ , $ <nat:128> $ , $ <nat:26> $ , $ <nat:250> $ , $ <nat:100> $ , $ <nat:488> $ , $ <nat:16> $ , $ <nat:498> $ , and moreover $ <nat:366> $ are trivially even . In consequence , the terms $ <var:D> \times <nat:294> $ , $ <var:w> \times <nat:296> $ , $ <var:N> \times <nat:128> $ , $ <var:G> \times <nat:26> $ , $ <nat:250> \times <var:u> $ , $ <nat:100> \times <var:F> $ , $ <nat:488> \times <var:c> $ , $ <var:P> \times <nat:16> $ , $ <nat:498> \times <var:z> $ , as well as $ <var:S> \times <nat:366> $ must be even as well . The expression $ <nat:296> * <var:w> + <nat:128> * <var:N> + <nat:26> * <var:G> + <nat:100> * <var:F> + <nat:250> * <var:u> + <var:S> * <nat:366> + <nat:488> * <var:c> + <nat:16> * <var:P> + <var:z> * <nat:498> + <var:D> * <nat:294> $ is guaranteed to be clearly even because taking the product between even positive integers and a natural must be an even number . It can be justified that the proposition is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:z> <var:u> <var:N> <var:D> <var:c> <var:w> <var:F> <var:P> <var:S> : nat , Nat . even ( <nat:498> * <var:z> + <nat:296> * <var:w> + <nat:366> * <var:S> + <nat:294> * <var:D> + <nat:128> * <var:N> + <nat:100> * <var:F> + <nat:250> * <var:u> + <nat:488> * <var:c> + <nat:16> * <var:P> + <nat:26> * <var:G> + <nat:400> ) = true . Proof . intros . rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:z> + <nat:296> * <var:w> + <nat:366> * <var:S> + <nat:294> * <var:D> + <nat:128> * <var:N> + <nat:100> * <var:F> + <nat:250> * <var:u> + <nat:488> * <var:c> + <nat:16> * <var:P> + <nat:26> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <genH> . auto . Qed . 