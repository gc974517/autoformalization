\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given that we have $ <var:z> $ , $ <var:j> $ , $ <var:b> $ , $ <var:k> $ , $ <var:v> \geq <nat:2> $ where given some number $ <var:Y> $ , $ <var:Y> = <var:b> \cdot <var:z> \cdot <var:j> \cdot <var:v> \cdot <var:k> $ given some positive integers $ <var:b> $ , $ <var:v> $ , $ <var:k> $ , $ <var:j> $ , $ <var:z> $ , we define that $ <var:Y> $ is a <def:five-composite> integer . Thus <nat:19440> is a <def:five-composite> number . \end{theorem} \begin{proof} Remember <nat:19440> is a <def:five-composite> integer whenever it is the product of positive integers $ <var:b> $ , $ <var:j> $ , $ <var:z> $ , $ <var:k> $ , and $ <var:v> $ more than or equal to <nat:2> . Take $ <var:v> = <nat:6> $ , $ <var:z> = <nat:3> $ , $ <var:j> = <nat:10> $ , $ <var:k> = <nat:12> $ , and $ <var:b> = <nat:9> $ . Notice that $ <nat:6> $ , $ <nat:10> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:3> $ are larger than or equal to <nat:2> . This indicates <nat:19440> is a <def:five-composite> positive integer . Therefore , <nat:19440> is a <def:five-composite> natural number has been validated . As a consequence , $ <nat:19440> = <var:v> \times <var:k> \times <var:z> \times <var:j> \times <var:b> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:Y> : nat ) := exists <var:b> <var:v> <var:k> <var:j> <var:z> : nat , ( <var:z> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:Y> = <var:b> * <var:z> * <var:j> * <var:v> * <var:k> ) . Theorem <genP:1> : <def:five-composite> <nat:19440> . Proof . unfold <def:five-composite> . exists <nat:9> . exists <nat:6> . exists <nat:12> . exists <nat:10> . exists <nat:3> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 