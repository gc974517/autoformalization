\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming that there are natural numbers $ <var:b> $ , $ <var:C> $ , $ <var:W> $ , $ <var:Q> $ , $ <var:x> $ , $ <var:L> $ then we denote that some $ <var:K> $ will be named a <def:six-composite> integer when $ <var:K> = <var:L> \cdot <var:W> \cdot <var:b> \cdot <var:x> \cdot <var:C> \cdot <var:Q> $ and unique factors are more than <nat:1> . For this reason <nat:99840> is a <def:six-composite> natural number . \end{theorem} \begin{proof} Remember that a <def:six-composite> integer is the multiplication of $ <var:Q> $ , $ <var:W> $ , $ <var:L> $ , $ <var:C> $ , $ <var:b> $ , and $ <var:x> $ greater than <nat:1> . We demonstrate the belief is true on account of $ <nat:10> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:13> $ , $ <nat:8> > <nat:1> $ as well as considering $ <var:Q> * <var:W> * <var:b> * <var:x> * <var:L> * <var:C> = <nat:99840> = <nat:12> * <nat:2> * <nat:4> * <nat:13> * <nat:8> * <nat:10> $ . Hence , <nat:99840> is a <def:six-composite> whole number is proven . Thus , $ <nat:99840> = <var:C> \times <var:Q> \times <var:x> \times <var:L> \times <var:W> \times <var:b> $ as well as $ <var:L> $ , $ <var:Q> $ , $ <var:C> $ , $ <var:b> $ , $ <var:W> $ and $ <var:x> $ are greater than <nat:1> has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:K> : nat ) := exists <var:b> <var:C> <var:W> <var:Q> <var:x> <var:L> : nat , ( <var:K> = <var:L> * <var:W> * <var:b> * <var:x> * <var:C> * <var:Q> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:L> > <nat:1> ) . Theorem <genP:1> : <def:six-composite> <nat:99840> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } exists <nat:4> . exists <nat:10> . exists <nat:2> . exists <nat:12> . exists <nat:13> . exists <nat:8> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 