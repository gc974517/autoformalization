\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Iff there are $ <var:l> $ , $ <var:P> $ , $ <var:n> $ , $ <var:y> $ , $ <var:A> $ , $ <var:m> \in \mathbb{N} $ then define that some positive integer $ <var:W> $ is said to be a <def:six-composite> positive integer when $ <var:P> \times <var:A> \times <var:n> \times <var:l> \times <var:m> \times <var:y> = <var:W> $ and so that $ <var:y> $ , $ <var:l> $ , $ <var:A> $ , $ <var:n> $ , $ <var:P> $ , and $ <var:m> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <var:W> = <nat:463320> $ is a <def:six-composite> number . \end{theorem} \begin{proof} Let $ <var:P> = <nat:13> $ , $ <var:n> = <nat:11> $ , $ <var:m> = <nat:9> $ , $ <var:l> = <nat:10> $ , $ <var:y> = <nat:3> $ , and $ <var:A> = <nat:12> $ . We prove <nat:463320> is a <def:six-composite> number because $ <var:A> = <nat:12> $ , $ <var:P> = <nat:13> $ , $ <var:n> = <nat:11> $ , $ <var:l> = <nat:10> $ , $ <var:y> = <nat:3> $ , $ <var:m> = <nat:9> $ are larger than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:W> : nat ) := exists <var:l> <var:P> <var:n> <var:y> <var:A> <var:m> : nat , ( <var:P> * <var:A> * <var:n> * <var:l> * <var:m> * <var:y> = <var:W> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:463320> . Proof . unfold <def:six-composite> . exists <nat:10> . exists <nat:13> . exists <nat:11> . exists <nat:3> . exists <nat:12> . exists <nat:9> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 