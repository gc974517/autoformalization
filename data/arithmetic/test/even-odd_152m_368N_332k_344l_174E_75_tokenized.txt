\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:332> <var:k> + <nat:344> <var:l> + <nat:174> <var:E> + <var:m> <nat:152> + <nat:75> + <nat:368> <var:N> $ will be odd . \end{theorem} \begin{proof} Remember that the formula $ <nat:344> \cdot <var:l> + <var:m> \cdot <nat:152> + <nat:75> + <var:N> \cdot <nat:368> + <nat:174> \cdot <var:E> + <nat:332> \cdot <var:k> $ is obviously odd because $ <nat:332> <var:k> + <var:N> <nat:368> + <nat:152> <var:m> + <nat:174> <var:E> + <nat:344> <var:l> $ is known as even . Notice that the summing between even naturals together with an even positive integer will be an even number in $ \mathbb{Z}^+ $ . Take note the natural numbers $ <nat:332> $ , $ <nat:152> $ , $ <nat:174> $ , and $ <nat:344> $ must be even whole numbers On top of this , the number $ <nat:368> $ is clearly an even number in $ \mathbb{N} $ as well as because the product between even elements of $ \mathbb{N} $ with an arbitrary natural number is an even element of $ \mathbb{N} $ this main result is true . We justify the sum $ <nat:75> + <nat:152> <var:m> + <nat:368> <var:N> + <var:k> <nat:332> + <nat:344> <var:l> + <nat:174> <var:E> $ will be odd . We know that $ <nat:75> $ is trivially odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:l> <var:E> <var:m> <var:N> : nat , Nat . odd ( <nat:332> * <var:k> + <nat:344> * <var:l> + <nat:174> * <var:E> + <nat:152> * <var:m> + <nat:368> * <var:N> + <nat:75> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:152> = true ) . { auto . } assert ( <genH> : Nat . even <nat:174> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:368> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:k> + <nat:344> * <var:l> + <nat:174> * <var:E> + <nat:152> * <var:m> + <nat:368> * <var:N> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:75> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 