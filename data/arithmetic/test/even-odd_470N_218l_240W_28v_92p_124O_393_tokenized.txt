\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:92> \times <var:p> + <nat:393> + <nat:218> \times <var:l> + <nat:28> \times <var:v> + <var:N> \times <nat:470> + <var:W> \times <nat:240> + <var:O> \times <nat:124> $ is guaranteed to be odd assuming $ <var:W> $ , $ <var:v> $ , $ <var:l> $ , $ <var:p> $ , $ <var:N> $ , and $ <var:O> \in \mathbb{N} $ . \end{theorem} \begin{proof} It can be justified that the proposition is true . Notice $ <nat:393> $ is odd . We use that the summation $ <var:N> \times <nat:470> + <nat:218> \times <var:l> + <var:W> \times <nat:240> + <nat:28> \times <var:v> + <var:p> \times <nat:92> + <nat:124> \times <var:O> $ is guaranteed to be even . Recall that the whole numbers $ <nat:124> $ and also $ <nat:28> $ are guaranteed to be even See that the positive integers $ <nat:218> $ plus $ <nat:92> $ are guaranteed to be even What's more , the positive integer $ <nat:470> $ is clearly even In addition , the whole number $ <nat:240> $ is guaranteed to be an even element of $ \mathbb{N} $ \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:W> <var:v> <var:l> <var:p> <var:N> <var:O> : nat , Nat . odd ( <nat:92> * <var:p> + <nat:218> * <var:l> + <nat:28> * <var:v> + <nat:470> * <var:N> + <nat:240> * <var:W> + <nat:124> * <var:O> + <nat:393> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:393> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even <nat:470> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:p> + <nat:218> * <var:l> + <nat:28> * <var:v> + <nat:470> * <var:N> + <nat:240> * <var:W> + <nat:124> * <var:O> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 