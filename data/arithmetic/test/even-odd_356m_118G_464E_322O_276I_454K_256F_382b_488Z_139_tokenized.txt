\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:464> * <var:E> + <nat:356> * <var:m> + <nat:139> + <nat:322> * <var:O> + <nat:382> * <var:b> + <nat:118> * <var:G> + <var:Z> * <nat:488> + <var:I> * <nat:276> + <var:F> * <nat:256> + <nat:454> * <var:K> $ is guaranteed to be odd . \end{theorem} \begin{proof} Because the summation between even positive integers concurrently and an odd whole number is guaranteed to be odd , as a result our claim is proven . The theorem holds from the fact $ <var:m> * <nat:356> + <var:G> * <nat:118> + <var:E> * <nat:464> + <var:O> * <nat:322> + <var:I> * <nat:276> + <nat:454> * <var:K> + <nat:256> * <var:F> + <nat:382> * <var:b> + <var:Z> * <nat:488> $ is trivially even . See the summation between an even positive integer with an even element of $ \mathbb{Z}^+ $ is trivially an even integer . Adding on , notice the numbers $ <nat:356> $ , $ <nat:118> $ , $ <nat:464> $ , $ <nat:322> $ , $ <nat:276> $ , $ <nat:454> $ , $ <nat:256> $ , $ <nat:382> $ , and moreover $ <nat:488> $ will be even . As a consequence , the pairs $ <nat:356> * <var:m> $ , $ <nat:118> * <var:G> $ , $ <nat:464> * <var:E> $ , $ <nat:322> * <var:O> $ , $ <var:I> * <nat:276> $ , $ <nat:454> * <var:K> $ , $ <nat:256> * <var:F> $ , $ <nat:382> * <var:b> $ , in addition to $ <var:Z> * <nat:488> $ is even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:m> <var:O> <var:b> <var:G> <var:Z> <var:I> <var:F> <var:K> : nat , Nat . odd ( <nat:464> * <var:E> + <nat:356> * <var:m> + <nat:322> * <var:O> + <nat:382> * <var:b> + <nat:118> * <var:G> + <nat:488> * <var:Z> + <nat:276> * <var:I> + <nat:256> * <var:F> + <nat:454> * <var:K> + <nat:139> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:322> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:E> + <nat:356> * <var:m> + <nat:322> * <var:O> + <nat:382> * <var:b> + <nat:118> * <var:G> + <nat:488> * <var:Z> + <nat:276> * <var:I> + <nat:256> * <var:F> + <nat:454> * <var:K> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 