\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Q> \cdot <nat:314> + <nat:67> + <var:d> \cdot <nat:154> + <nat:54> \cdot <var:M> $ is guaranteed to be odd . \end{theorem} \begin{proof} Notice that $ <nat:67> $ is guaranteed to be an odd natural . It can be shown that $ <nat:314> * <var:Q> + <nat:67> + <var:d> * <nat:154> + <nat:54> * <var:M> $ must be odd . This result is true as a consequence that $ <var:d> * <nat:154> + <nat:314> * <var:Q> + <nat:54> * <var:M> $ is known to be even . What's more , remember the terms $ <nat:154> <var:d> $ , $ <nat:314> <var:Q> $ , $ <var:M> <nat:54> $ , are known as even from the knowledge taking the product of an even natural with any element of $ \mathbb{N} $ must be even , and must be true because the positive integers $ <nat:154> $ , $ <nat:314> $ , $ <nat:54> $ , are clearly even . As a consequence that the multiplication of an even number in $ \mathbb{Z}^+ $ and any element of $ \mathbb{Z}^+ $ is guaranteed to be even this theorem holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:d> <var:M> : nat , Nat . odd ( <nat:314> * <var:Q> + <nat:154> * <var:d> + <nat:54> * <var:M> + <nat:67> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:67> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:Q> + <nat:154> * <var:d> + <nat:54> * <var:M> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 