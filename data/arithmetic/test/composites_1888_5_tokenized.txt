\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:n> $ , $ <var:e> $ , $ <var:c> $ , $ <var:L> $ , $ <var:V> \in \mathbb{Z}^+ $ where $ <var:n> $ , $ <var:L> $ , $ <var:c> $ , $ <var:e> $ , and $ <var:V> > <nat:1> $ . We assume that some $ <var:S> $ is defined as a <def:five-composite> number assuming $ <var:L> * <var:c> * <var:V> * <var:n> * <var:e> = <var:S> $ . \end{definition} \begin{theorem} The number <nat:2016> is a <def:five-composite> positive integer . \end{theorem} \begin{proof} Recall <nat:2016> is a <def:five-composite> whole number only if <nat:2016> is the product of integers $ <var:e> $ , $ <var:L> $ , $ <var:V> $ , $ <var:c> $ , and $ <var:n> $ where $ <var:V> $ , $ <var:e> $ , $ <var:n> $ , $ <var:L> $ , $ <var:c> > <nat:1> $ . Assume $ <var:L> = <nat:2> $ , $ <var:V> = <nat:3> $ , $ <var:c> = <nat:12> $ , $ <var:e> = <nat:7> $ and $ <var:n> = <nat:4> $ . Additionally notice $ <var:n> = <nat:4> $ , $ <var:V> = <nat:3> $ , $ <var:e> = <nat:7> $ , $ <var:L> = <nat:2> $ , $ <var:c> = <nat:12> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:S> : nat ) := exists <var:n> <var:e> <var:c> <var:L> <var:V> : nat , ( <var:n> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:L> * <var:c> * <var:V> * <var:n> * <var:e> = <var:S> ) . Theorem <genP:1> : <def:five-composite> <nat:2016> . Proof . unfold <def:five-composite> . exists <nat:4> . exists <nat:7> . exists <nat:12> . exists <nat:2> . exists <nat:3> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 