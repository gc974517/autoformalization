\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:r> \cdot <nat:446> + <var:D> \cdot <nat:50> + <nat:280> \cdot <var:S> + <nat:220> \cdot <var:J> + <var:N> \cdot <nat:170> + <var:T> \cdot <nat:58> + <var:c> \cdot <nat:136> + <nat:399> + <nat:330> \cdot <var:X> + <var:k> \cdot <nat:442> + <var:h> \cdot <nat:90> + <var:b> \cdot <nat:234> $ must be odd . \end{theorem} \begin{proof} We know $ <nat:399> $ is an odd number in $ \mathbb{Z}^+ $ . Notice that the adding between even integers successively with an odd number in $ \mathbb{N} $ is odd . The main result is proven from the fact $ <var:S> \times <nat:280> + <var:b> \times <nat:234> + <nat:50> \times <var:D> + <var:k> \times <nat:442> + <nat:170> \times <var:N> + <var:X> \times <nat:330> + <nat:136> \times <var:c> + <var:h> \times <nat:90> + <var:J> \times <nat:220> + <var:r> \times <nat:446> + <var:T> \times <nat:58> $ is obviously even . The products $ <nat:446> <var:r> $ , $ <var:h> <nat:90> $ , $ <var:N> <nat:170> $ , and also $ <nat:234> <var:b> $ are guaranteed to be even numbers in $ \mathbb{N} $ . Remember that the products $ <nat:58> <var:T> $ , $ <nat:330> <var:X> $ , $ <var:k> <nat:442> $ , $ <var:c> <nat:136> $ , and moreover $ <nat:220> <var:J> $ are known as even whole numbers . This is proven by reason that the product between an even number and some natural number will be an even positive integer . In addition , see the term $ <var:S> <nat:280> $ is known as an even whole number from the knowledge the product between an even natural and any number is guaranteed to be an even natural . What's more , the term $ <nat:50> <var:D> $ is trivially an even number in $ \mathbb{Z}^+ $ . Since the product between an even whole number and some element of $ \mathbb{N} $ must be an even integer the lemma is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:D> <var:S> <var:J> <var:N> <var:T> <var:c> <var:X> <var:k> <var:h> <var:b> : nat , Nat . odd ( <nat:446> * <var:r> + <nat:50> * <var:D> + <nat:280> * <var:S> + <nat:220> * <var:J> + <nat:170> * <var:N> + <nat:58> * <var:T> + <nat:136> * <var:c> + <nat:330> * <var:X> + <nat:442> * <var:k> + <nat:90> * <var:h> + <nat:234> * <var:b> + <nat:399> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:399> = true ) . { auto . } rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:446> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:90> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:220> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:r> + <nat:50> * <var:D> + <nat:280> * <var:S> + <nat:220> * <var:J> + <nat:170> * <var:N> + <nat:58> * <var:T> + <nat:136> * <var:c> + <nat:330> * <var:X> + <nat:442> * <var:k> + <nat:90> * <var:h> + <nat:234> * <var:b> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 