\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For every $ <var:b> $ , $ <var:A> $ , $ <var:Y> $ , $ <var:a> $ , $ <var:e> $ , $ <var:c> $ , $ <var:B> $ , $ <var:h> $ , $ <var:l> $ , $ <var:Q> $ , and $ <var:q> \in \mathbb{Z}^+ $ $ <var:q> \cdot <nat:336> + <var:a> \cdot <nat:480> + <nat:460> \cdot <var:B> + <var:l> \cdot <nat:86> + <nat:221> + <nat:90> \cdot <var:A> + <var:b> \cdot <nat:114> + <var:e> \cdot <nat:190> + <nat:140> \cdot <var:c> + <var:h> \cdot <nat:124> + <nat:468> \cdot <var:Y> + <var:Q> \cdot <nat:394> $ is odd . \end{theorem} \begin{proof} We verify $ <var:h> * <nat:124> + <nat:190> * <var:e> + <var:B> * <nat:460> + <nat:221> + <var:c> * <nat:140> + <nat:114> * <var:b> + <var:a> * <nat:480> + <var:l> * <nat:86> + <var:Q> * <nat:394> + <nat:90> * <var:A> + <nat:468> * <var:Y> + <nat:336> * <var:q> $ is odd . See that $ <nat:221> $ is an odd element of $ \mathbb{N} $ . We apply the sum $ <var:h> \times <nat:124> + <var:B> \times <nat:460> + <nat:221> + <nat:336> \times <var:q> + <nat:190> \times <var:e> + <nat:394> \times <var:Q> + <nat:86> \times <var:l> + <nat:140> \times <var:c> + <var:a> \times <nat:480> + <nat:114> \times <var:b> + <nat:468> \times <var:Y> + <nat:90> \times <var:A> $ is known to be odd because the sum $ <nat:190> <var:e> + <nat:460> <var:B> + <var:b> <nat:114> + <var:Y> <nat:468> + <var:c> <nat:140> + <var:a> <nat:480> + <var:Q> <nat:394> + <nat:86> <var:l> + <nat:90> <var:A> + <nat:124> <var:h> + <var:q> <nat:336> $ is trivially even . The term $ <var:B> * <nat:460> $ is known to be even from the fact the number $ <nat:460> $ is known as even . Furthermore , take note that the natural number $ <nat:336> $ is clearly even . As a consequence , the product $ <nat:336> * <var:q> $ will be even as well . Adding on , the term $ <var:h> * <nat:124> $ is known to be an even element of $ \mathbb{N} $ because multiplying of an even number with an arbitrary number will be even additionally the coefficient $ <nat:124> $ is guaranteed to be even . Additionally , we know the leading term $ <nat:190> $ is even . Therefore , the term $ <var:e> * <nat:190> $ will be even as well . Notice that the integer $ <nat:480> $ is guaranteed to be even . Then , the product $ <nat:480> * <var:a> $ is guaranteed to be even too . The integer $ <nat:86> $ is obviously an even natural number . For this reason , $ <var:l> * <nat:86> $ is even too . See that the product $ <var:c> * <nat:140> $ is known to be an even whole number because the whole number $ <nat:140> $ is clearly an even natural number . Adding on , observe that the natural number $ <nat:90> $ is clearly even . Hence , the pair $ <nat:90> * <var:A> $ is even at the same time . Adding on , see the whole number $ <nat:394> $ is known to be an even element of $ \mathbb{Z}^+ $ . For this reason , $ <nat:394> * <var:Q> $ will be even at the same time . See the pair $ <nat:468> * <var:Y> $ is obviously an even element of $ \mathbb{Z}^+ $ . This fact holds from the knowledge the whole number $ <nat:468> $ is trivially trivially an even number in $ \mathbb{Z}^+ $ . Remember that the leading term $ <nat:114> $ is trivially an even natural number . As a consequence , the term $ <nat:114> * <var:b> $ is even at the same time . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:A> <var:Y> <var:a> <var:e> <var:c> <var:B> <var:h> <var:l> <var:Q> <var:q> : nat , Nat . odd ( <nat:336> * <var:q> + <nat:480> * <var:a> + <nat:460> * <var:B> + <nat:86> * <var:l> + <nat:90> * <var:A> + <nat:114> * <var:b> + <nat:190> * <var:e> + <nat:140> * <var:c> + <nat:124> * <var:h> + <nat:468> * <var:Y> + <nat:394> * <var:Q> + <nat:221> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:221> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:336> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:90> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:90> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:q> + <nat:480> * <var:a> + <nat:460> * <var:B> + <nat:86> * <var:l> + <nat:90> * <var:A> + <nat:114> * <var:b> + <nat:190> * <var:e> + <nat:140> * <var:c> + <nat:124> * <var:h> + <nat:468> * <var:Y> + <nat:394> * <var:Q> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 