\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Let $ <var:F> $ , $ <var:d> $ , $ <var:V> $ , $ <var:Y> $ , $ <var:q> $ , $ <var:j> $ be numbers . Let that $ <var:R> \in \mathbb{Z}^+ $ is defined as a <def:six-composite> integer when $ <var:R> = <var:V> * <var:j> * <var:Y> * <var:d> * <var:F> * <var:q> $ plus such that $ <var:d> $ , $ <var:F> $ , $ <var:Y> $ , $ <var:j> $ , $ <var:V> $ , $ <var:q> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:17160> = <var:R> $ is a <def:six-composite> number . \end{theorem} \begin{proof} Let $ <var:F> = <nat:11> $ , $ <var:q> = <nat:3> $ , $ <var:V> = <nat:4> $ , $ <var:Y> = <nat:5> $ , $ <var:d> = <nat:13> $ and $ <var:j> = <nat:2> $ . We show our theorem holds on account of $ <var:q> \times <var:F> \times <var:Y> \times <var:V> \times <var:j> \times <var:d> = <nat:17160> $ and $ <var:d> = <nat:13> $ , $ <var:F> = <nat:11> $ , $ <var:Y> = <nat:5> $ , $ <var:j> = <nat:2> $ , $ <var:q> = <nat:3> $ and $ <var:V> = <nat:4> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:R> : nat ) := exists <var:F> <var:d> <var:V> <var:Y> <var:q> <var:j> : nat , ( <var:R> = <var:V> * <var:j> * <var:Y> * <var:d> * <var:F> * <var:q> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:17160> . Proof . unfold <def:six-composite> . exists <nat:11> . exists <nat:13> . exists <nat:4> . exists <nat:5> . exists <nat:3> . exists <nat:2> . assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 