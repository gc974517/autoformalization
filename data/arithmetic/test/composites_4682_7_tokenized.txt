\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ \exists <var:t> $ , $ <var:v> $ , $ <var:j> $ , $ <var:K> $ , $ <var:A> $ , $ <var:E> $ and $ <var:e> \in \mathbb{Z}^+ $ satisfying the condition that $ <var:e> $ , $ <var:j> $ , $ <var:t> $ , $ <var:E> $ , $ <var:K> $ , $ <var:A> $ , and $ <var:v> $ more than <nat:1> plus where the positive integer <nat:3088800> is the multiplication between positive integers $ <var:t> $ , $ <var:v> $ , $ <var:j> $ , $ <var:K> $ , $ <var:A> $ , $ <var:E> $ and $ <var:e> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} Take $ <var:K> = <nat:8> $ , $ <var:e> = <nat:10> $ , $ <var:v> = <nat:11> $ , $ <var:A> = <nat:9> $ , $ <var:t> = <nat:6> $ , $ <var:E> = <nat:5> $ , and $ <var:j> = <nat:13> $ . We confirm $ <nat:3088800> = <var:v> \cdot <var:e> \cdot <var:K> \cdot <var:j> \cdot <var:E> \cdot <var:t> \cdot <var:A> $ . Notice $ <var:v> = <nat:11> $ , $ <var:A> = <nat:9> $ , $ <var:E> = <nat:5> $ , $ <var:t> = <nat:6> $ , $ <var:e> = <nat:10> $ , $ <var:K> = <nat:8> $ , and $ <var:j> = <nat:13> > <nat:1> $ . This produces the claim is valid . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:t> <var:v> <var:j> <var:K> <var:A> <var:E> <var:e> : nat , ( <var:e> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:t> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:K> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <nat:3088800> = <var:t> * <var:v> * <var:j> * <var:K> * <var:A> * <var:E> * <var:e> ) . Proof . exists <nat:6> . exists <nat:11> . exists <nat:13> . exists <nat:8> . exists <nat:9> . exists <nat:5> . exists <nat:10> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 