\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take as given that $ <var:H> $ is a <def:eight-composite> positive integer only if there are some numbers $ <var:C> $ , $ <var:u> $ , $ <var:O> $ , $ <var:I> $ , $ <var:E> $ , $ <var:j> $ , $ <var:G> $ , $ <var:A> $ where $ <var:E> * <var:A> * <var:u> * <var:O> * <var:I> * <var:j> * <var:G> * <var:C> = <var:H> $ with some whole number $ <var:H> $ and where $ <var:A> $ , $ <var:j> $ , $ <var:I> $ , $ <var:G> $ , $ <var:C> $ , $ <var:E> $ , $ <var:u> $ and $ <var:O> \geq <nat:2> $ . \end{definition} \begin{theorem} The number <nat:1247400> is a <def:eight-composite> natural number . \end{theorem} \begin{proof} Remember <nat:1247400> is a <def:eight-composite> whole number under the condition <nat:1247400> is the multiplication between positive integers $ <var:u> $ , $ <var:I> $ , $ <var:O> $ , $ <var:E> $ , $ <var:A> $ , $ <var:C> $ , $ <var:j> $ and $ <var:G> $ larger than or equal to <nat:2> . Take $ <var:A> = <nat:3> $ , $ <var:E> = <nat:7> $ , $ <var:C> = <nat:5> $ , $ <var:O> = <nat:10> $ , $ <var:I> = <nat:11> $ , $ <var:j> = <nat:2> $ , $ <var:u> = <nat:9> $ and $ <var:G> = <nat:6> $ . We verify <nat:1247400> is <def:eight-composite> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:H> : nat ) := exists <var:C> <var:u> <var:O> <var:I> <var:E> <var:j> <var:G> <var:A> : nat , ( <var:E> * <var:A> * <var:u> * <var:O> * <var:I> * <var:j> * <var:G> * <var:C> = <var:H> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) . Theorem <genP:1> : <def:eight-composite> <nat:1247400> . Proof . unfold <def:eight-composite> . exists <nat:5> . exists <nat:9> . exists <nat:10> . exists <nat:11> . exists <nat:7> . exists <nat:2> . exists <nat:6> . exists <nat:3> . repeat split . all : lia . Qed . 