\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:154> \cdot <var:I> + <var:H> \cdot <nat:138> + <nat:194> \cdot <var:o> + <nat:440> \cdot <var:h> + <nat:223> + <var:Q> \cdot <nat:224> + <var:Z> \cdot <nat:478> + <nat:414> \cdot <var:D> + <var:f> \cdot <nat:412> $ is guaranteed to be odd . \end{theorem} \begin{proof} Notice that the totaling between even numbers in $ \mathbb{Z}^+ $ collectively with an odd element of $ \mathbb{N} $ must be clearly an odd positive integer . What's more , see the numbers $ <nat:154> $ , $ <nat:138> $ , $ <nat:194> $ , $ <nat:440> $ , $ <nat:224> $ , $ <nat:478> $ , $ <nat:414> $ , and moreover $ <nat:412> $ are guaranteed to be even whole numbers . Therefore , the terms $ <var:I> * <nat:154> $ , $ <var:H> * <nat:138> $ , $ <var:o> * <nat:194> $ , $ <nat:440> * <var:h> $ , $ <nat:224> * <var:Q> $ , $ <nat:478> * <var:Z> $ , $ <var:D> * <nat:414> $ , and moreover $ <var:f> * <nat:412> $ is guaranteed to be even at the same time . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:H> <var:o> <var:h> <var:Q> <var:Z> <var:D> <var:f> : nat , Nat . odd ( <nat:154> * <var:I> + <nat:138> * <var:H> + <nat:194> * <var:o> + <nat:440> * <var:h> + <nat:224> * <var:Q> + <nat:478> * <var:Z> + <nat:414> * <var:D> + <nat:412> * <var:f> + <nat:223> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:224> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even <nat:412> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:224> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 