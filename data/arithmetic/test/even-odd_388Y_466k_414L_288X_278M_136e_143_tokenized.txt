\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For any variables $ <var:Y> $ , $ <var:X> $ , $ <var:e> $ , $ <var:M> $ , $ <var:L> $ , and $ <var:k> $ the sum $ <nat:388> \times <var:Y> + <var:e> \times <nat:136> + <var:M> \times <nat:278> + <nat:143> + <var:L> \times <nat:414> + <nat:288> \times <var:X> + <var:k> \times <nat:466> $ must be odd . \end{theorem} \begin{proof} It can be verified that our claim must be true . We use the knowledge the expression $ <nat:388> \times <var:Y> + <nat:466> \times <var:k> + <var:L> \times <nat:414> + <nat:288> \times <var:X> + <nat:278> \times <var:M> + <var:e> \times <nat:136> $ is guaranteed to be even , from the knowledge the totaling of even natural numbers with an even integer must be obviously an even integer . Observe that the whole numbers $ <nat:136> $ , $ <nat:466> $ , $ <nat:278> $ , $ <nat:288> $ , as well as $ <nat:388> $ are obviously even positive integers The leading term $ <nat:414> $ is guaranteed to be even We know the totaling between even elements of $ \mathbb{N} $ together and an odd natural is guaranteed to be an odd number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:X> <var:e> <var:M> <var:L> <var:k> : nat , Nat . odd ( <nat:388> * <var:Y> + <nat:136> * <var:e> + <nat:278> * <var:M> + <nat:414> * <var:L> + <nat:288> * <var:X> + <nat:466> * <var:k> + <nat:143> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } assert ( <genH> : Nat . even <nat:288> = true ) . { auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:Y> + <nat:136> * <var:e> + <nat:278> * <var:M> + <nat:414> * <var:L> + <nat:288> * <var:X> + <nat:466> * <var:k> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 