\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using all $ <var:a> $ , $ <var:b> $ , $ <var:N> $ , $ <var:O> $ , $ <var:w> $ , $ <var:j> $ , $ <var:g> $ , $ <var:H> $ , $ <var:d> $ , $ <var:s> $ , and $ <var:D> \in \mathbb{Z}^+ $ the summation $ <var:N> <nat:54> + <var:D> <nat:320> + <nat:462> <var:b> + <var:j> <nat:304> + <nat:420> <var:g> + <var:w> <nat:118> + <var:s> <nat:64> + <var:d> <nat:494> + <nat:223> + <nat:444> <var:H> + <nat:314> <var:a> + <var:O> <nat:276> $ is odd . \end{theorem} \begin{proof} We verify that $ <var:b> * <nat:462> + <nat:494> * <var:d> + <var:H> * <nat:444> + <nat:223> + <var:N> * <nat:54> + <nat:64> * <var:s> + <var:g> * <nat:420> + <var:a> * <nat:314> + <nat:118> * <var:w> + <nat:276> * <var:O> + <var:D> * <nat:320> + <nat:304> * <var:j> $ is odd because the expression $ <var:j> \cdot <nat:304> + <nat:444> \cdot <var:H> + <var:N> \cdot <nat:54> + <var:d> \cdot <nat:494> + <var:D> \cdot <nat:320> + <nat:314> \cdot <var:a> + <nat:462> \cdot <var:b> + <nat:64> \cdot <var:s> + <var:O> \cdot <nat:276> + <nat:420> \cdot <var:g> + <nat:118> \cdot <var:w> $ is guaranteed to be even . On top of this , recall that the pairs $ <var:j> <nat:304> $ , $ <nat:444> <var:H> $ , $ <var:N> <nat:54> $ , $ <var:d> <nat:494> $ , $ <var:D> <nat:320> $ , $ <var:a> <nat:314> $ , $ <nat:462> <var:b> $ , $ <var:s> <nat:64> $ , $ <var:O> <nat:276> $ , $ <var:g> <nat:420> $ , $ <nat:118> <var:w> $ , are even because the positive integers $ <nat:304> $ , $ <nat:444> $ , $ <nat:54> $ , $ <nat:494> $ , $ <nat:320> $ , $ <nat:314> $ , $ <nat:462> $ , $ <nat:64> $ , $ <nat:276> $ , $ <nat:420> $ , $ <nat:118> $ , are obviously even . Observe $ <nat:223> $ is clearly an odd element of $ \mathbb{N} $ . It can be checked that our proposition is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:a> <var:b> <var:N> <var:O> <var:w> <var:j> <var:g> <var:H> <var:d> <var:s> <var:D> : nat , Nat . odd ( <nat:54> * <var:N> + <nat:320> * <var:D> + <nat:462> * <var:b> + <nat:304> * <var:j> + <nat:420> * <var:g> + <nat:118> * <var:w> + <nat:64> * <var:s> + <nat:494> * <var:d> + <nat:444> * <var:H> + <nat:314> * <var:a> + <nat:276> * <var:O> + <nat:223> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even <nat:494> = true ) . { auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:N> + <nat:320> * <var:D> + <nat:462> * <var:b> + <nat:304> * <var:j> + <nat:420> * <var:g> + <nat:118> * <var:w> + <nat:64> * <var:s> + <nat:494> * <var:d> + <nat:444> * <var:H> + <nat:314> * <var:a> + <nat:276> * <var:O> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:223> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 