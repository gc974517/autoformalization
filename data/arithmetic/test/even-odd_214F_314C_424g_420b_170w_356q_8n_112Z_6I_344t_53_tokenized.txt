\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:214> \cdot <var:F> + <nat:314> \cdot <var:C> + <nat:424> \cdot <var:g> + <nat:420> \cdot <var:b> + <var:w> \cdot <nat:170> + <var:q> \cdot <nat:356> + <var:n> \cdot <nat:8> + <nat:53> + <var:Z> \cdot <nat:112> + <nat:6> \cdot <var:I> + <var:t> \cdot <nat:344> $ will be odd . \end{theorem} \begin{proof} Observe the summation between even positive integers collectively with an odd element of $ \mathbb{N} $ is odd . The positive integers $ <nat:214> $ , $ <nat:314> $ , $ <nat:424> $ , $ <nat:420> $ , $ <nat:170> $ , $ <nat:356> $ , $ <nat:8> $ , $ <nat:112> $ , $ <nat:6> $ , as well as $ <nat:344> $ are even naturals . Then , the products $ <nat:214> * <var:F> $ , $ <nat:314> * <var:C> $ , $ <nat:424> * <var:g> $ , $ <nat:420> * <var:b> $ , $ <nat:170> * <var:w> $ , $ <var:q> * <nat:356> $ , $ <var:n> * <nat:8> $ , $ <nat:112> * <var:Z> $ , $ <var:I> * <nat:6> $ , and also $ <nat:344> * <var:t> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:C> <var:g> <var:b> <var:w> <var:q> <var:n> <var:Z> <var:I> <var:t> : nat , Nat . odd ( <nat:214> * <var:F> + <nat:314> * <var:C> + <nat:424> * <var:g> + <nat:420> * <var:b> + <nat:170> * <var:w> + <nat:356> * <var:q> + <nat:8> * <var:n> + <nat:112> * <var:Z> + <nat:6> * <var:I> + <nat:344> * <var:t> + <nat:53> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:424> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:112> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:424> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:112> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 