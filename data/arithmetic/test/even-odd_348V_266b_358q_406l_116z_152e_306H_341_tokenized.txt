\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming some natural numbers $ <var:H> $ , $ <var:e> $ , $ <var:z> $ , $ <var:b> $ , $ <var:l> $ , $ <var:V> $ , and $ <var:q> $ $ <var:V> <nat:348> + <var:b> <nat:266> + <nat:341> + <nat:358> <var:q> + <var:l> <nat:406> + <nat:116> <var:z> + <var:e> <nat:152> + <nat:306> <var:H> $ will be odd . \end{theorem} \begin{proof} The numbers $ <nat:348> $ , $ <nat:266> $ , $ <nat:358> $ , $ <nat:406> $ , $ <nat:116> $ , $ <nat:152> $ , and also $ <nat:306> $ are trivially even naturals . So , the terms $ <var:V> \cdot <nat:348> $ , $ <nat:266> \cdot <var:b> $ , $ <var:q> \cdot <nat:358> $ , $ <var:l> \cdot <nat:406> $ , $ <nat:116> \cdot <var:z> $ , $ <var:e> \cdot <nat:152> $ , and $ <nat:306> \cdot <var:H> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:e> <var:z> <var:b> <var:l> <var:V> <var:q> : nat , Nat . odd ( <nat:348> * <var:V> + <nat:266> * <var:b> + <nat:358> * <var:q> + <nat:406> * <var:l> + <nat:116> * <var:z> + <nat:152> * <var:e> + <nat:306> * <var:H> + <nat:341> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even <nat:152> = true ) . { auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:152> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 