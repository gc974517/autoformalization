\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:m> $ , $ <var:y> $ , $ <var:U> $ , $ <var:C> $ , $ <var:B> $ , $ <var:o> $ as positive integers . Take as given that some $ <var:T> $ will be considered as a <def:six-composite> whole number assuming $ <var:B> * <var:y> * <var:o> * <var:U> * <var:C> * <var:m> = <var:T> $ as well as unique terms are larger than or equal to <nat:2> . Then $ <nat:480480> = <var:T> $ is a <def:six-composite> number . \end{theorem} \begin{proof} Remember a <def:six-composite> number is the product of natural numbers $ <var:o> $ , $ <var:U> $ , $ <var:C> $ , $ <var:B> $ , $ <var:m> $ and $ <var:y> $ such that $ <var:B> $ , $ <var:o> $ , $ <var:m> $ , $ <var:y> $ , $ <var:C> $ , and $ <var:U> \geq <nat:2> $ . Allow $ <var:y> = <nat:12> $ , $ <var:C> = <nat:11> $ , $ <var:U> = <nat:8> $ , $ <var:m> = <nat:5> $ , $ <var:o> = <nat:13> $ and $ <var:B> = <nat:7> $ . We justify the claim holds seeing that Considering $ <var:C> = <nat:11> $ , $ <var:m> = <nat:5> $ , $ <var:y> = <nat:12> $ , $ <var:o> = <nat:13> $ , $ <var:U> = <nat:8> $ , $ <var:B> = <nat:7> $ are greater than or equal to <nat:2> . Hence , <nat:480480> is a <def:six-composite> integer is validated . Because of this , $ <var:y> \cdot <var:o> \cdot <var:C> \cdot <var:U> \cdot <var:B> \cdot <var:m> = <nat:480480> $ and $ <var:m> $ , $ <var:y> $ , $ <var:B> $ , $ <var:o> $ , $ <var:C> $ , $ <var:U> \geq <nat:2> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:T> : nat ) := exists <var:m> <var:y> <var:U> <var:C> <var:B> <var:o> : nat , ( <var:B> * <var:y> * <var:o> * <var:U> * <var:C> * <var:m> = <var:T> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:480480> . Proof . unfold <def:six-composite> . exists <nat:5> . exists <nat:12> . exists <nat:8> . exists <nat:11> . exists <nat:7> . exists <nat:13> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 