\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:340> * <var:R> + <nat:102> * <var:a> + <var:U> * <nat:364> + <var:D> * <nat:466> + <var:V> * <nat:88> + <var:Z> * <nat:482> + <nat:170> + <var:W> * <nat:162> + <nat:4> * <var:q> + <nat:444> * <var:H> + <nat:6> * <var:M> + <var:A> * <nat:34> $ is even with some $ <var:Z> $ , $ <var:A> $ , $ <var:D> $ , $ <var:V> $ , $ <var:R> $ , $ <var:W> $ , $ <var:q> $ , $ <var:U> $ , $ <var:H> $ , $ <var:M> $ , and $ <var:a> \in \mathbb{N} $ . \end{theorem} \begin{proof} We know that $ <nat:170> $ is clearly even . It can be checked that this proposition must be true by applying the fact that the totaling of even numbers in $ \mathbb{N} $ concurrently will be an even integer . The positive integers $ <nat:444> $ , $ <nat:88> $ , $ <nat:4> $ , $ <nat:340> $ , $ <nat:102> $ , $ <nat:364> $ , $ <nat:162> $ , $ <nat:482> $ , and also $ <nat:466> $ must be even numbers . Consequently , the products $ <var:H> * <nat:444> $ , $ <var:V> * <nat:88> $ , $ <nat:4> * <var:q> $ , $ <nat:340> * <var:R> $ , $ <var:a> * <nat:102> $ , $ <nat:364> * <var:U> $ , $ <var:W> * <nat:162> $ , $ <var:Z> * <nat:482> $ , and also $ <nat:466> * <var:D> $ must be even in addition . Furthermore , we know that the integer $ <nat:6> $ is an even number in $ \mathbb{N} $ . Accordingly , the product $ <var:M> * <nat:6> $ is guaranteed to be even at the same time . Remember the leading term $ <nat:34> $ is trivially an even natural . In consequence , the term $ <var:A> * <nat:34> $ will be even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Z> <var:A> <var:D> <var:V> <var:R> <var:W> <var:q> <var:U> <var:H> <var:M> <var:a> : nat , Nat . even ( <nat:340> * <var:R> + <nat:102> * <var:a> + <nat:364> * <var:U> + <nat:466> * <var:D> + <nat:88> * <var:V> + <nat:482> * <var:Z> + <nat:162> * <var:W> + <nat:4> * <var:q> + <nat:444> * <var:H> + <nat:6> * <var:M> + <nat:34> * <var:A> + <nat:170> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 