\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:t> \times <nat:180> + <var:n> \times <nat:466> + <var:c> \times <nat:334> + <var:C> \times <nat:118> + <var:U> \times <nat:326> + <var:L> \times <nat:184> + <var:l> \times <nat:24> + <var:s> \times <nat:30> + <nat:396> \times <var:a> + <nat:308> \times <var:A> + <nat:445> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be shown that this claim holds . The natural numbers $ <nat:180> $ , $ <nat:466> $ , $ <nat:334> $ , $ <nat:118> $ , $ <nat:326> $ , $ <nat:184> $ , $ <nat:24> $ , $ <nat:30> $ , $ <nat:396> $ , $ <nat:308> $ , are obviously even . In consequence , the pairs $ <nat:180> <var:t> $ , $ <var:n> <nat:466> $ , $ <var:c> <nat:334> $ , $ <nat:118> <var:C> $ , $ <nat:326> <var:U> $ , $ <nat:184> <var:L> $ , $ <var:l> <nat:24> $ , $ <nat:30> <var:s> $ , $ <nat:396> <var:a> $ , $ <nat:308> <var:A> $ , is even also . Notice that the summing of even integers collectively and an odd number will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:t> <var:n> <var:c> <var:C> <var:U> <var:L> <var:l> <var:s> <var:a> <var:A> : nat , Nat . odd ( <nat:180> * <var:t> + <nat:466> * <var:n> + <nat:334> * <var:c> + <nat:118> * <var:C> + <nat:326> * <var:U> + <nat:184> * <var:L> + <nat:24> * <var:l> + <nat:30> * <var:s> + <nat:396> * <var:a> + <nat:308> * <var:A> + <nat:445> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:180> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:396> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:396> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 