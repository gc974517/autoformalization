\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:106> * <var:h> + <var:d> * <nat:344> + <nat:96> * <var:Q> + <var:I> * <nat:76> + <var:J> * <nat:318> + <var:m> * <nat:64> + <nat:275> + <nat:352> * <var:A> $ is odd . \end{theorem} \begin{proof} Our claim is proven since $ <nat:76> \times <var:I> + <nat:352> \times <var:A> + <nat:344> \times <var:d> + <var:h> \times <nat:106> + <nat:96> \times <var:Q> + <var:m> \times <nat:64> + <nat:318> \times <var:J> $ is known as even . Recall that the leading term $ <nat:76> $ is known to be even . In consequence , the pair $ <nat:76> <var:I> $ will be even too . Adding on , the leading terms $ <nat:64> $ , $ <nat:106> $ , $ <nat:318> $ , $ <nat:96> $ , and likewise $ <nat:352> $ are clearly even positive integers . As a consequence , the terms $ <nat:64> <var:m> $ , $ <var:h> <nat:106> $ , $ <var:J> <nat:318> $ , $ <var:Q> <nat:96> $ , and likewise $ <nat:352> <var:A> $ will be even too . Notice that the product $ <var:d> <nat:344> $ is known as even since the integer $ <nat:344> $ is known to be an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:d> <var:Q> <var:I> <var:J> <var:m> <var:A> : nat , Nat . odd ( <nat:106> * <var:h> + <nat:344> * <var:d> + <nat:96> * <var:Q> + <nat:76> * <var:I> + <nat:318> * <var:J> + <nat:64> * <var:m> + <nat:352> * <var:A> + <nat:275> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:h> + <nat:344> * <var:d> + <nat:96> * <var:Q> + <nat:76> * <var:I> + <nat:318> * <var:J> + <nat:64> * <var:m> + <nat:352> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 