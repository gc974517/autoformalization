\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With every unknowns $ <var:u> $ , $ <var:a> $ , $ <var:f> $ , $ <var:k> $ , and $ <var:P> $ the expression $ <var:a> \times <nat:470> + <nat:196> \times <var:P> + <nat:243> + <var:k> \times <nat:342> + <nat:178> \times <var:f> + <var:u> \times <nat:344> $ must be odd . \end{theorem} \begin{proof} The numbers $ <nat:470> $ , $ <nat:196> $ , $ <nat:342> $ , $ <nat:178> $ , and likewise $ <nat:344> $ are clearly even . Consequently , the pairs $ <var:a> \times <nat:470> $ , $ <var:P> \times <nat:196> $ , $ <var:k> \times <nat:342> $ , $ <var:f> \times <nat:178> $ , additionally $ <nat:344> \times <var:u> $ is guaranteed to be even also . The summing between an even whole number and an odd natural number is an odd natural number . Notice that $ <nat:243> $ is guaranteed to be an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:a> <var:f> <var:k> <var:P> : nat , Nat . odd ( <nat:470> * <var:a> + <nat:196> * <var:P> + <nat:342> * <var:k> + <nat:178> * <var:f> + <nat:344> * <var:u> + <nat:243> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:470> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:178> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:470> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:178> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:243> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 