\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:l> \times <nat:198> + <nat:168> \times <var:E> + <nat:186> \times <var:k> + <nat:88> \times <var:i> + <var:C> \times <nat:496> + <nat:392> \times <var:r> + <var:a> \times <nat:52> + <nat:375> + <var:s> \times <nat:394> $ is guaranteed to be odd . \end{theorem} \begin{proof} Observe the pairs $ <var:l> \times <nat:198> $ , $ <nat:168> \times <var:E> $ , $ <nat:186> \times <var:k> $ , $ <nat:88> \times <var:i> $ , $ <nat:496> \times <var:C> $ , $ <nat:392> \times <var:r> $ , $ <nat:52> \times <var:a> $ , and likewise $ <var:s> \times <nat:394> $ are clearly even whole numbers since the product between an even whole number and any positive integer is an even number in $ \mathbb{N} $ and likewise the leading terms $ <nat:198> $ , $ <nat:168> $ , $ <nat:186> $ , $ <nat:88> $ , $ <nat:496> $ , $ <nat:392> $ , $ <nat:52> $ , and likewise $ <nat:394> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:E> <var:k> <var:i> <var:C> <var:r> <var:a> <var:s> : nat , Nat . odd ( <nat:198> * <var:l> + <nat:168> * <var:E> + <nat:186> * <var:k> + <nat:88> * <var:i> + <nat:496> * <var:C> + <nat:392> * <var:r> + <nat:52> * <var:a> + <nat:394> * <var:s> + <nat:375> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:392> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 