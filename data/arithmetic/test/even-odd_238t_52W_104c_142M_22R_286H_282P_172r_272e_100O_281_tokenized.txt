\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:281> + <var:P> * <nat:282> + <nat:272> * <var:e> + <nat:286> * <var:H> + <nat:238> * <var:t> + <var:R> * <nat:22> + <nat:100> * <var:O> + <nat:142> * <var:M> + <nat:104> * <var:c> + <var:W> * <nat:52> + <nat:172> * <var:r> $ is odd . \end{theorem} \begin{proof} The lemma is proven from the fact $ <var:R> * <nat:22> + <var:P> * <nat:282> + <nat:104> * <var:c> + <nat:52> * <var:W> + <nat:172> * <var:r> + <nat:286> * <var:H> + <nat:238> * <var:t> + <nat:272> * <var:e> + <nat:142> * <var:M> + <var:O> * <nat:100> $ is trivially even . The products $ <nat:286> \cdot <var:H> $ additionally $ <nat:52> \cdot <var:W> $ are obviously even natural numbers from the knowledge taking the product between an even number in $ \mathbb{N} $ with a element of $ \mathbb{N} $ is by definition an even number . The pairs $ <var:r> \cdot <nat:172> $ , $ <nat:104> \cdot <var:c> $ , and moreover $ <var:t> \cdot <nat:238> $ are known as even . $ <var:P> \cdot <nat:282> $ is even . This holds from the knowledge multiplying between an even natural and a element of $ \mathbb{Z}^+ $ must be an even number in $ \mathbb{N} $ . Remember that the terms $ <var:e> \cdot <nat:272> $ , $ <var:M> \cdot <nat:142> $ , plus $ <nat:22> \cdot <var:R> $ must be even from the fact the multiplication between an even natural number with some number in $ \mathbb{Z}^+ $ must be by its very nature an even integer . $ <var:O> \cdot <nat:100> $ is clearly even . This fact is true since taking the product between an even natural with some whole number is even . The summation $ <nat:52> * <var:W> + <nat:282> * <var:P> + <var:e> * <nat:272> + <var:r> * <nat:172> + <nat:238> * <var:t> + <var:c> * <nat:104> + <nat:22> * <var:R> + <nat:142> * <var:M> + <nat:100> * <var:O> + <var:H> * <nat:286> $ must be by its very nature even because the adding of even naturals with an even integer must be even . It can be justified that the formula $ <nat:238> \times <var:t> + <nat:52> \times <var:W> + <nat:104> \times <var:c> + <nat:142> \times <var:M> + <nat:281> + <var:R> \times <nat:22> + <var:H> \times <nat:286> + <nat:282> \times <var:P> + <var:r> \times <nat:172> + <nat:272> \times <var:e> + <nat:100> \times <var:O> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:e> <var:H> <var:t> <var:R> <var:O> <var:M> <var:c> <var:W> <var:r> : nat , Nat . odd ( <nat:282> * <var:P> + <nat:272> * <var:e> + <nat:286> * <var:H> + <nat:238> * <var:t> + <nat:22> * <var:R> + <nat:100> * <var:O> + <nat:142> * <var:M> + <nat:104> * <var:c> + <nat:52> * <var:W> + <nat:172> * <var:r> + <nat:281> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:286> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:P> + <nat:272> * <var:e> + <nat:286> * <var:H> + <nat:238> * <var:t> + <nat:22> * <var:R> + <nat:100> * <var:O> + <nat:142> * <var:M> + <nat:104> * <var:c> + <nat:52> * <var:W> + <nat:172> * <var:r> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 