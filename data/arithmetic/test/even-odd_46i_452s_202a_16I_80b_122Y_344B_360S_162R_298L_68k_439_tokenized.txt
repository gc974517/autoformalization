\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every positive terms $ <var:k> $ , $ <var:i> $ , $ <var:R> $ , $ <var:a> $ , $ <var:s> $ , $ <var:I> $ , $ <var:S> $ , $ <var:B> $ , $ <var:Y> $ , $ <var:L> $ , and $ <var:b> $ $ <nat:16> \times <var:I> + <nat:122> \times <var:Y> + <var:B> \times <nat:344> + <var:L> \times <nat:298> + <nat:439> + <var:k> \times <nat:68> + <var:b> \times <nat:80> + <nat:202> \times <var:a> + <nat:452> \times <var:s> + <var:i> \times <nat:46> + <var:S> \times <nat:360> + <var:R> \times <nat:162> $ will be odd . \end{theorem} \begin{proof} In addition to this , observe the numbers $ <nat:16> $ , $ <nat:122> $ , $ <nat:344> $ , $ <nat:298> $ , $ <nat:68> $ , $ <nat:80> $ , $ <nat:202> $ , $ <nat:452> $ , $ <nat:46> $ , $ <nat:360> $ , and moreover $ <nat:162> $ will be even . Consequently , the products $ <nat:16> <var:I> $ , $ <var:Y> <nat:122> $ , $ <var:B> <nat:344> $ , $ <nat:298> <var:L> $ , $ <nat:68> <var:k> $ , $ <var:b> <nat:80> $ , $ <var:a> <nat:202> $ , $ <nat:452> <var:s> $ , $ <var:i> <nat:46> $ , $ <nat:360> <var:S> $ , additionally $ <nat:162> <var:R> $ is guaranteed to be even as well . We check the summation $ <var:i> <nat:46> + <var:s> <nat:452> + <nat:202> <var:a> + <nat:439> + <nat:16> <var:I> + <var:b> <nat:80> + <nat:122> <var:Y> + <var:B> <nat:344> + <var:S> <nat:360> + <nat:162> <var:R> + <nat:298> <var:L> + <var:k> <nat:68> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:i> <var:R> <var:a> <var:s> <var:I> <var:S> <var:B> <var:Y> <var:L> <var:b> : nat , Nat . odd ( <nat:16> * <var:I> + <nat:122> * <var:Y> + <nat:344> * <var:B> + <nat:298> * <var:L> + <nat:68> * <var:k> + <nat:80> * <var:b> + <nat:202> * <var:a> + <nat:452> * <var:s> + <nat:46> * <var:i> + <nat:360> * <var:S> + <nat:162> * <var:R> + <nat:439> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:122> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:298> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:80> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:122> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 