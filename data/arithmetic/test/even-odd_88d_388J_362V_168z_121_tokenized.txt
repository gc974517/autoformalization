\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:V> \times <nat:362> + <nat:121> + <nat:168> \times <var:z> + <var:J> \times <nat:388> + <nat:88> \times <var:d> $ is odd for all positive terms $ <var:V> $ , $ <var:d> $ , $ <var:J> $ , and $ <var:z> $ . \end{theorem} \begin{proof} We know the formula $ <nat:121> + <nat:388> \times <var:J> + <var:d> \times <nat:88> + <var:z> \times <nat:168> + <var:V> \times <nat:362> $ is known as odd from the fact the sum $ <var:V> <nat:362> + <nat:168> <var:z> + <nat:388> <var:J> + <var:d> <nat:88> $ is known to be even . Take note that the whole numbers $ <nat:362> $ , $ <nat:168> $ , $ <nat:388> $ , and likewise $ <nat:88> $ are guaranteed to be even . For this reason , the pairs $ <var:V> \times <nat:362> $ , $ <nat:168> \times <var:z> $ , $ <var:J> \times <nat:388> $ , additionally $ <var:d> \times <nat:88> $ must be even as well . The summation $ <var:V> * <nat:362> + <nat:88> * <var:d> + <nat:168> * <var:z> + <var:J> * <nat:388> $ must be fundamentally even from the fact the product of an even natural number with a natural must be even . We verify the expression $ <nat:121> + <var:d> <nat:88> + <nat:388> <var:J> + <nat:362> <var:V> + <nat:168> <var:z> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:d> <var:J> <var:z> : nat , Nat . odd ( <nat:362> * <var:V> + <nat:168> * <var:z> + <nat:388> * <var:J> + <nat:88> * <var:d> + <nat:121> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:362> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:V> + <nat:168> * <var:z> + <nat:388> * <var:J> + <nat:88> * <var:d> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 