\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:280> \cdot <var:f> + <var:t> \cdot <nat:200> + <nat:324> \cdot <var:U> + <nat:13> + <var:c> \cdot <nat:192> + <nat:152> \cdot <var:b> $ is guaranteed to be odd assuming every whole numbers $ <var:c> $ , $ <var:t> $ , $ <var:f> $ , $ <var:b> $ , and $ <var:U> $ . \end{theorem} \begin{proof} We demonstrate the summation $ <var:f> \times <nat:280> + <var:c> \times <nat:192> + <nat:324> \times <var:U> + <var:b> \times <nat:152> + <var:t> \times <nat:200> + <nat:13> $ is obviously odd as a consequence that the sum $ <nat:192> <var:c> + <nat:200> <var:t> + <var:f> <nat:280> + <var:b> <nat:152> + <nat:324> <var:U> $ is clearly even , as a consequence that multiplying of an even natural number with a number in $ \mathbb{N} $ is even . Observe that the coefficients $ <nat:152> $ , $ <nat:200> $ , as well as $ <nat:192> $ are guaranteed to be even Likewise , we know that the coefficient $ <nat:324> $ is known as even In addition , the leading term $ <nat:280> $ is guaranteed to be even Remember $ <nat:13> $ is trivially odd . The summing between even numbers and an odd number in $ \mathbb{N} $ must be an odd number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:t> <var:f> <var:b> <var:U> : nat , Nat . odd ( <nat:280> * <var:f> + <nat:200> * <var:t> + <nat:324> * <var:U> + <nat:192> * <var:c> + <nat:152> * <var:b> + <nat:13> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:152> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:f> + <nat:200> * <var:t> + <nat:324> * <var:U> + <nat:192> * <var:c> + <nat:152> * <var:b> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:13> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 