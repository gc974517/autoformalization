\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:G> $ , $ <var:F> $ , $ <var:R> $ , $ <var:m> $ , $ <var:n> $ , $ <var:q> \in \mathbb{Z}^+ $ . We assume that some positive integer $ <var:H> $ will be considered <def:six-composite> when $ <var:H> = <var:q> * <var:F> * <var:m> * <var:G> * <var:R> * <var:n> $ as well as unique terms are greater than or equivalent to <nat:2> . \end{definition} \begin{theorem} $ <var:H> = <nat:145600> $ is <def:six-composite> . \end{theorem} \begin{proof} We confirm <nat:145600> is a <def:six-composite> natural number considering $ <nat:10> $ , $ <nat:7> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:13> $ and $ <nat:5> \geq <nat:2> $ and in view of $ <nat:145600> = <var:m> \times <var:G> \times <var:q> \times <var:F> \times <var:n> \times <var:R> $ suggests $ <var:m> = <nat:5> $ , $ <var:F> = <nat:8> $ , $ <var:G> = <nat:10> $ , $ <var:n> = <nat:7> $ , $ <var:q> = <nat:13> $ and $ <var:R> = <nat:4> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:H> : nat ) := exists <var:G> <var:F> <var:R> <var:m> <var:n> <var:q> : nat , ( <var:H> = <var:q> * <var:F> * <var:m> * <var:G> * <var:R> * <var:n> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:145600> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:8> . exists <nat:4> . exists <nat:5> . exists <nat:7> . exists <nat:13> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 