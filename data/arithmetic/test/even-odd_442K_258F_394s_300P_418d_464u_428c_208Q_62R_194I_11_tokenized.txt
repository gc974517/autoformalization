\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> \cdot <nat:442> + <nat:258> \cdot <var:F> + <nat:394> \cdot <var:s> + <var:P> \cdot <nat:300> + <nat:418> \cdot <var:d> + <var:u> \cdot <nat:464> + <nat:428> \cdot <var:c> + <var:Q> \cdot <nat:208> + <nat:62> \cdot <var:R> + <nat:194> \cdot <var:I> + <nat:11> $ is guaranteed to be odd . \end{theorem} \begin{proof} Additionally , the products $ <var:K> <nat:442> $ , $ <var:F> <nat:258> $ , $ <nat:394> <var:s> $ , $ <nat:300> <var:P> $ , $ <var:d> <nat:418> $ , $ <var:u> <nat:464> $ , $ <nat:428> <var:c> $ , $ <nat:208> <var:Q> $ , $ <var:R> <nat:62> $ , $ <var:I> <nat:194> $ , are known to be even from the knowledge the positive integers $ <nat:442> $ , $ <nat:258> $ , $ <nat:394> $ , $ <nat:300> $ , $ <nat:418> $ , $ <nat:464> $ , $ <nat:428> $ , $ <nat:208> $ , $ <nat:62> $ , $ <nat:194> $ , are trivially even natural numbers . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:F> <var:s> <var:P> <var:d> <var:u> <var:c> <var:Q> <var:R> <var:I> : nat , Nat . odd ( <nat:442> * <var:K> + <nat:258> * <var:F> + <nat:394> * <var:s> + <nat:300> * <var:P> + <nat:418> * <var:d> + <nat:464> * <var:u> + <nat:428> * <var:c> + <nat:208> * <var:Q> + <nat:62> * <var:R> + <nat:194> * <var:I> + <nat:11> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:442> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even <nat:62> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:62> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 