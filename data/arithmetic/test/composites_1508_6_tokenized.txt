\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Let $ <var:N> $ , $ <var:u> $ , $ <var:k> $ , $ <var:l> $ , $ <var:I> $ , $ <var:x> \in \mathbb{Z}^+ $ more than <nat:1> . Let that some positive integer $ <var:t> $ will be a <def:six-composite> integer when $ <var:t> = <var:x> \times <var:l> \times <var:u> \times <var:I> \times <var:k> \times <var:N> $ . \end{definition} \begin{theorem} <nat:218400> is a <def:six-composite> natural number . \end{theorem} \begin{proof} Recall that a <def:six-composite> integer is the multiplication of positive integers $ <var:N> $ , $ <var:k> $ , $ <var:I> $ , $ <var:l> $ , $ <var:x> $ , and $ <var:u> $ more than <nat:1> . Assume $ <var:x> = <nat:13> $ , $ <var:I> = <nat:7> $ , $ <var:N> = <nat:10> $ , $ <var:l> = <nat:6> $ , $ <var:u> = <nat:5> $ , $ <var:k> = <nat:8> $ . We present <nat:218400> is <def:six-composite> . We prove the thesis is true as $ <var:I> = <nat:7> $ , $ <var:N> = <nat:10> $ , $ <var:x> = <nat:13> $ , $ <var:k> = <nat:8> $ , $ <var:l> = <nat:6> $ and $ <var:u> = <nat:5> $ are greater than <nat:1> as well as because $ <nat:218400> = <nat:13> \cdot <nat:6> \cdot <nat:10> \cdot <nat:5> \cdot <nat:8> \cdot <nat:7> = <var:x> \cdot <var:l> \cdot <var:N> \cdot <var:u> \cdot <var:k> \cdot <var:I> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:t> : nat ) := exists <var:N> <var:u> <var:k> <var:l> <var:I> <var:x> : nat , ( <var:N> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:t> = <var:x> * <var:l> * <var:u> * <var:I> * <var:k> * <var:N> ) . Theorem <genP:1> : <def:six-composite> <nat:218400> . Proof . unfold <def:six-composite> . exists <nat:10> . exists <nat:5> . exists <nat:8> . exists <nat:6> . exists <nat:7> . exists <nat:13> . assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 