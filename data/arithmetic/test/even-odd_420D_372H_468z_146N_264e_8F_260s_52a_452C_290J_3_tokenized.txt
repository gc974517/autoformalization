\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given any positive terms $ <var:H> $ , $ <var:C> $ , $ <var:N> $ , $ <var:z> $ , $ <var:e> $ , $ <var:J> $ , $ <var:D> $ , $ <var:F> $ , $ <var:a> $ , and $ <var:s> $ $ <var:H> <nat:372> + <var:a> <nat:52> + <nat:452> <var:C> + <nat:146> <var:N> + <var:J> <nat:290> + <nat:3> + <nat:8> <var:F> + <nat:264> <var:e> + <var:D> <nat:420> + <nat:260> <var:s> + <var:z> <nat:468> $ is guaranteed to be odd . \end{theorem} \begin{proof} Recall that the summation between an even natural and an odd positive integer must be an odd number . Recall that the terms $ <var:F> <nat:8> $ , $ <var:D> <nat:420> $ , $ <nat:452> <var:C> $ , $ <nat:264> <var:e> $ , $ <nat:468> <var:z> $ , $ <nat:52> <var:a> $ , and $ <nat:260> <var:s> $ are even numbers . Further , the terms $ <var:J> <nat:290> $ and also $ <nat:146> <var:N> $ must be even . Notice that $ <nat:372> <var:H> $ is obviously even . It can be checked that $ <var:D> \times <nat:420> + <nat:372> \times <var:H> + <var:z> \times <nat:468> + <var:N> \times <nat:146> + <var:e> \times <nat:264> + <nat:8> \times <var:F> + <nat:3> + <var:s> \times <nat:260> + <var:a> \times <nat:52> + <var:C> \times <nat:452> + <nat:290> \times <var:J> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:C> <var:N> <var:z> <var:e> <var:J> <var:D> <var:F> <var:a> <var:s> : nat , Nat . odd ( <nat:372> * <var:H> + <nat:52> * <var:a> + <nat:452> * <var:C> + <nat:146> * <var:N> + <nat:290> * <var:J> + <nat:8> * <var:F> + <nat:264> * <var:e> + <nat:420> * <var:D> + <nat:260> * <var:s> + <nat:468> * <var:z> + <nat:3> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even ( <nat:8> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 