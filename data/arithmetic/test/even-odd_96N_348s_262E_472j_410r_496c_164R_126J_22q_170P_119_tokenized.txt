\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:262> * <var:E> + <nat:96> * <var:N> + <var:j> * <nat:472> + <nat:348> * <var:s> + <nat:170> * <var:P> + <nat:119> + <nat:410> * <var:r> + <var:q> * <nat:22> + <nat:126> * <var:J> + <nat:164> * <var:R> + <nat:496> * <var:c> $ must be odd taking some natural terms $ <var:R> $ , $ <var:q> $ , $ <var:N> $ , $ <var:J> $ , $ <var:j> $ , $ <var:r> $ , $ <var:E> $ , $ <var:P> $ , $ <var:s> $ , and $ <var:c> $ . \end{theorem} \begin{proof} We justify the formula $ <var:c> \cdot <nat:496> + <nat:119> + <nat:472> \cdot <var:j> + <var:R> \cdot <nat:164> + <nat:22> \cdot <var:q> + <var:s> \cdot <nat:348> + <var:r> \cdot <nat:410> + <var:E> \cdot <nat:262> + <var:P> \cdot <nat:170> + <var:J> \cdot <nat:126> + <nat:96> \cdot <var:N> $ is odd . We use the assumption $ <nat:96> * <var:N> + <nat:348> * <var:s> + <nat:262> * <var:E> + <nat:472> * <var:j> + <var:r> * <nat:410> + <var:c> * <nat:496> + <var:R> * <nat:164> + <nat:126> * <var:J> + <nat:22> * <var:q> + <var:P> * <nat:170> $ is trivially even . See the addition of an even whole number and an even natural is even . Recall the positive integers $ <nat:96> $ , $ <nat:348> $ , $ <nat:262> $ , $ <nat:472> $ , $ <nat:410> $ , $ <nat:496> $ , $ <nat:164> $ , $ <nat:126> $ , $ <nat:22> $ , as well as $ <nat:170> $ are known to be even . As a consequence , the products $ <var:N> \times <nat:96> $ , $ <var:s> \times <nat:348> $ , $ <nat:262> \times <var:E> $ , $ <var:j> \times <nat:472> $ , $ <var:r> \times <nat:410> $ , $ <nat:496> \times <var:c> $ , $ <nat:164> \times <var:R> $ , $ <var:J> \times <nat:126> $ , $ <var:q> \times <nat:22> $ , and likewise $ <var:P> \times <nat:170> $ is guaranteed to be even also . in addition to from the fact taking the product between even numbers in $ \mathbb{N} $ with an arbitrary element of $ \mathbb{Z}^+ $ is an even number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:R> <var:q> <var:N> <var:J> <var:j> <var:r> <var:E> <var:P> <var:s> <var:c> : nat , Nat . odd ( <nat:262> * <var:E> + <nat:96> * <var:N> + <nat:472> * <var:j> + <nat:348> * <var:s> + <nat:170> * <var:P> + <nat:410> * <var:r> + <nat:22> * <var:q> + <nat:126> * <var:J> + <nat:164> * <var:R> + <nat:496> * <var:c> + <nat:119> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even <nat:472> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even <nat:126> = true ) . { auto . } assert ( <genH> : Nat . even <nat:22> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:E> + <nat:96> * <var:N> + <nat:472> * <var:j> + <nat:348> * <var:s> + <nat:170> * <var:P> + <nat:410> * <var:r> + <nat:22> * <var:q> + <nat:126> * <var:J> + <nat:164> * <var:R> + <nat:496> * <var:c> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 