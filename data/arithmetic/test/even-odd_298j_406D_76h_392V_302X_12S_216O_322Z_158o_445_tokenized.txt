\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:298> \times <var:j> + <nat:406> \times <var:D> + <var:h> \times <nat:76> + <nat:392> \times <var:V> + <var:X> \times <nat:302> + <nat:12> \times <var:S> + <var:O> \times <nat:216> + <nat:322> \times <var:Z> + <nat:445> + <nat:158> \times <var:o> $ must be odd taking whole numbers $ <var:o> $ , $ <var:h> $ , $ <var:S> $ , $ <var:V> $ , $ <var:D> $ , $ <var:Z> $ , $ <var:O> $ , $ <var:X> $ , and $ <var:j> $ . \end{theorem} \begin{proof} The products $ <nat:406> <var:D> $ , $ <nat:158> <var:o> $ , $ <nat:216> <var:O> $ , $ <nat:76> <var:h> $ , $ <var:j> <nat:298> $ , and moreover $ <nat:392> <var:V> $ are trivially even . What's more , the pairs $ <var:X> <nat:302> $ plus $ <var:S> <nat:12> $ are trivially even positive integers . Take note $ <var:Z> <nat:322> $ is known to be even . This fact is true because multiplying of an even element of $ \mathbb{N} $ and any number must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:h> <var:S> <var:V> <var:D> <var:Z> <var:O> <var:X> <var:j> : nat , Nat . odd ( <nat:298> * <var:j> + <nat:406> * <var:D> + <nat:76> * <var:h> + <nat:392> * <var:V> + <nat:302> * <var:X> + <nat:12> * <var:S> + <nat:216> * <var:O> + <nat:322> * <var:Z> + <nat:158> * <var:o> + <nat:445> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:406> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:216> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:302> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 