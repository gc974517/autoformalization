\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Say that $ <var:F> $ is a <def:six-composite> integer given taking some $ <var:K> $ , $ <var:U> $ , $ <var:l> $ , $ <var:C> $ , $ <var:j> $ , $ <var:c> \in \mathbb{Z}^+ $ we have $ <var:l> $ , $ <var:c> $ , $ <var:K> $ , $ <var:C> $ , $ <var:j> $ and $ <var:U> \geq <nat:2> $ plus for $ <var:F> \in \mathbb{Z}^+ $ , $ <var:j> \times <var:C> \times <var:U> \times <var:c> \times <var:K> \times <var:l> = <var:F> $ . \end{definition} \begin{theorem} $ <var:F> = <nat:32760> $ is a <def:six-composite> integer . \end{theorem} \begin{proof} Remember that a <def:six-composite> is the multiplication of $ <var:C> $ , $ <var:c> $ , $ <var:K> $ , $ <var:l> $ , $ <var:j> $ , $ <var:U> $ where $ <var:U> $ , $ <var:j> $ , $ <var:C> $ , $ <var:c> $ , $ <var:l> $ and $ <var:K> \geq <nat:2> $ . We prove <nat:32760> is <def:six-composite> . Note that $ <nat:7> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:3> $ , $ <nat:13> $ , and $ <nat:12> \geq <nat:2> $ . Furthermore notice that likewise $ <nat:32760> = <var:c> \times <var:U> \times <var:C> \times <var:K> \times <var:j> \times <var:l> = <nat:2> \times <nat:13> \times <nat:12> \times <nat:3> \times <nat:5> \times <nat:7> $ . This hints <nat:32760> is a <def:six-composite> positive integer . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:F> : nat ) := exists <var:K> <var:U> <var:l> <var:C> <var:j> <var:c> : nat , ( <var:l> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:j> * <var:C> * <var:U> * <var:c> * <var:K> * <var:l> = <var:F> ) . Theorem <genP:1> : <def:six-composite> <nat:32760> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } exists <nat:3> . exists <nat:13> . exists <nat:7> . exists <nat:12> . exists <nat:5> . exists <nat:2> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 