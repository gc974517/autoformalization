\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:A> \times <nat:388> + <var:r> \times <nat:64> + <nat:250> \times <var:x> + <nat:196> \times <var:U> + <nat:306> \times <var:M> + <nat:260> \times <var:l> + <nat:87> + <var:k> \times <nat:326> + <var:B> \times <nat:290> + <nat:384> \times <var:W> + <nat:246> \times <var:R> + <nat:130> \times <var:o> $ must be odd . \end{theorem} \begin{proof} Notice the totaling between even elements of $ \mathbb{Z}^+ $ and an odd natural must be an odd element of $ \mathbb{N} $ . The sum $ <nat:290> * <var:B> + <nat:64> * <var:r> + <var:W> * <nat:384> + <nat:196> * <var:U> + <nat:306> * <var:M> + <var:o> * <nat:130> + <var:l> * <nat:260> + <nat:250> * <var:x> + <nat:246> * <var:R> + <var:A> * <nat:388> + <nat:326> * <var:k> $ is clearly even . Because multiplying of even whole numbers with any element of $ \mathbb{Z}^+ $ will be clearly an even number $ <var:A> <nat:388> + <var:B> <nat:290> + <var:U> <nat:196> + <nat:306> <var:M> + <var:l> <nat:260> + <var:W> <nat:384> + <nat:246> <var:R> + <var:x> <nat:250> + <nat:326> <var:k> + <nat:64> <var:r> + <var:o> <nat:130> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:r> <var:x> <var:U> <var:M> <var:l> <var:k> <var:B> <var:W> <var:R> <var:o> : nat , Nat . odd ( <nat:388> * <var:A> + <nat:64> * <var:r> + <nat:250> * <var:x> + <nat:196> * <var:U> + <nat:306> * <var:M> + <nat:260> * <var:l> + <nat:326> * <var:k> + <nat:290> * <var:B> + <nat:384> * <var:W> + <nat:246> * <var:R> + <nat:130> * <var:o> + <nat:87> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:388> * <var:A> + <nat:64> * <var:r> + <nat:250> * <var:x> + <nat:196> * <var:U> + <nat:306> * <var:M> + <nat:260> * <var:l> + <nat:326> * <var:k> + <nat:290> * <var:B> + <nat:384> * <var:W> + <nat:246> * <var:R> + <nat:130> * <var:o> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 