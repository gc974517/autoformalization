\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:P> \times <nat:188> + <nat:124> \times <var:C> + <var:W> \times <nat:12> + <nat:232> \times <var:A> + <var:i> \times <nat:10> + <nat:262> \times <var:I> + <nat:52> \times <var:U> + <var:x> \times <nat:54> + <nat:87> + <nat:16> \times <var:j> $ must be odd . \end{theorem} \begin{proof} Likewise , we know the leading terms $ <nat:188> $ , $ <nat:124> $ , $ <nat:12> $ , $ <nat:232> $ , $ <nat:10> $ , $ <nat:262> $ , $ <nat:52> $ , $ <nat:54> $ , and $ <nat:16> $ are guaranteed to be even integers . Accordingly , the terms $ <nat:188> \times <var:P> $ , $ <nat:124> \times <var:C> $ , $ <nat:12> \times <var:W> $ , $ <var:A> \times <nat:232> $ , $ <nat:10> \times <var:i> $ , $ <nat:262> \times <var:I> $ , $ <nat:52> \times <var:U> $ , $ <var:x> \times <nat:54> $ , plus $ <var:j> \times <nat:16> $ must be even also . Remember $ <nat:87> $ is guaranteed to be an odd positive integer . The adding of an even element of $ \mathbb{N} $ and an odd natural number will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:C> <var:W> <var:A> <var:i> <var:I> <var:U> <var:x> <var:j> : nat , Nat . odd ( <nat:188> * <var:P> + <nat:124> * <var:C> + <nat:12> * <var:W> + <nat:232> * <var:A> + <nat:10> * <var:i> + <nat:262> * <var:I> + <nat:52> * <var:U> + <nat:54> * <var:x> + <nat:16> * <var:j> + <nat:87> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:188> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:232> = true ) . { auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:87> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 