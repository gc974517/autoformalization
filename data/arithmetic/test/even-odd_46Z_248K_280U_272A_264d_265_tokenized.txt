\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:46> \times <var:Z> + <var:K> \times <nat:248> + <nat:264> \times <var:d> + <nat:265> + <nat:272> \times <var:A> + <var:U> \times <nat:280> $ is guaranteed to be odd with some unknowns $ <var:A> $ , $ <var:d> $ , $ <var:U> $ , $ <var:Z> $ , and $ <var:K> $ . \end{theorem} \begin{proof} It can be checked that the summation $ <nat:46> \cdot <var:Z> + <nat:248> \cdot <var:K> + <nat:280> \cdot <var:U> + <nat:272> \cdot <var:A> + <nat:264> \cdot <var:d> + <nat:265> $ is odd . In addition , we know the numbers $ <nat:46> $ , $ <nat:248> $ , $ <nat:280> $ , $ <nat:272> $ , $ <nat:264> $ , will be even naturals . Hence , the products $ <var:Z> <nat:46> $ , $ <var:K> <nat:248> $ , $ <nat:280> <var:U> $ , $ <nat:272> <var:A> $ , $ <nat:264> <var:d> $ , is even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:d> <var:U> <var:Z> <var:K> : nat , Nat . odd ( <nat:46> * <var:Z> + <nat:248> * <var:K> + <nat:264> * <var:d> + <nat:272> * <var:A> + <nat:280> * <var:U> + <nat:265> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 