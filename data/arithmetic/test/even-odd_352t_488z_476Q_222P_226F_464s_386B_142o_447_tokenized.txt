\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:352> <var:t> + <nat:488> <var:z> + <nat:476> <var:Q> + <var:P> <nat:222> + <nat:226> <var:F> + <nat:447> + <nat:464> <var:s> + <nat:386> <var:B> + <nat:142> <var:o> $ is odd assuming unknowns $ <var:P> $ , $ <var:Q> $ , $ <var:F> $ , $ <var:B> $ , $ <var:o> $ , $ <var:t> $ , $ <var:s> $ , and $ <var:z> $ . \end{theorem} \begin{proof} The pairs $ <nat:352> * <var:t> $ , $ <var:z> * <nat:488> $ , $ <var:Q> * <nat:476> $ , $ <nat:222> * <var:P> $ , $ <var:F> * <nat:226> $ , $ <var:s> * <nat:464> $ , $ <var:B> * <nat:386> $ , plus $ <var:o> * <nat:142> $ are even naturals . This fact must be true because the product of an even number and an arbitrary natural will be even . This fact is proven since the whole numbers $ <nat:352> $ , $ <nat:488> $ , $ <nat:476> $ , $ <nat:222> $ , $ <nat:226> $ , $ <nat:464> $ , $ <nat:386> $ , and also $ <nat:142> $ are guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:Q> <var:F> <var:B> <var:o> <var:t> <var:s> <var:z> : nat , Nat . odd ( <nat:352> * <var:t> + <nat:488> * <var:z> + <nat:476> * <var:Q> + <nat:222> * <var:P> + <nat:226> * <var:F> + <nat:464> * <var:s> + <nat:386> * <var:B> + <nat:142> * <var:o> + <nat:447> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 