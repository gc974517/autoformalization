\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let that $ <var:u> $ is a <def:seven-composite> whole number assuming that taking some $ <var:C> $ , $ <var:A> $ , $ <var:x> $ , $ <var:q> $ , $ <var:s> $ , $ <var:h> $ , $ <var:g> \in \mathbb{N} $ we get where $ <var:C> $ , $ <var:g> $ , $ <var:x> $ , $ <var:A> $ , $ <var:h> $ , $ <var:q> $ and $ <var:s> > <nat:1> $ as well as with $ <var:u> \in \mathbb{Z}^+ $ , $ <var:u> = <var:A> \cdot <var:x> \cdot <var:h> \cdot <var:q> \cdot <var:g> \cdot <var:C> \cdot <var:s> $ . So $ <nat:4118400> = <var:u> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Let $ <var:q> = <nat:13> $ , $ <var:C> = <nat:5> $ , $ <var:s> = <nat:8> $ , $ <var:A> = <nat:10> $ , $ <var:g> = <nat:11> $ , $ <var:x> = <nat:6> $ , and $ <var:h> = <nat:12> $ . We verify the principle is valid as $ <var:g> = <nat:11> $ , $ <var:x> = <nat:6> $ , $ <var:s> = <nat:8> $ , $ <var:A> = <nat:10> $ , $ <var:C> = <nat:5> $ , $ <var:h> = <nat:12> $ , and $ <var:q> = <nat:13> > <nat:1> $ plus in consideration of $ <var:q> * <var:s> * <var:g> * <var:x> * <var:A> * <var:C> * <var:h> = <nat:4118400> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:u> : nat ) := exists <var:C> <var:A> <var:x> <var:q> <var:s> <var:h> <var:g> : nat , ( <var:C> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:u> = <var:A> * <var:x> * <var:h> * <var:q> * <var:g> * <var:C> * <var:s> ) . Theorem <genP:1> : <def:seven-composite> <nat:4118400> . Proof . unfold <def:seven-composite> . exists <nat:5> . exists <nat:10> . exists <nat:6> . exists <nat:13> . exists <nat:8> . exists <nat:12> . exists <nat:11> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 