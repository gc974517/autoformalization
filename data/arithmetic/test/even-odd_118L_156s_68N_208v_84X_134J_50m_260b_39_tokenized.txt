\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:L> \times <nat:118> + <var:s> \times <nat:156> + <nat:68> \times <var:N> + <var:v> \times <nat:208> + <nat:84> \times <var:X> + <nat:39> + <nat:134> \times <var:J> + <var:m> \times <nat:50> + <nat:260> \times <var:b> $ will be odd given any positive integers $ <var:J> $ , $ <var:m> $ , $ <var:s> $ , $ <var:v> $ , $ <var:L> $ , $ <var:X> $ , $ <var:N> $ , and $ <var:b> $ . \end{theorem} \begin{proof} We know that the totaling between an even positive integer and an odd number must be an odd number in $ \mathbb{N} $ . Take note that the pairs $ <var:b> <nat:260> $ , $ <var:s> <nat:156> $ , $ <var:J> <nat:134> $ , $ <var:N> <nat:68> $ , $ <nat:84> <var:X> $ , plus $ <nat:50> <var:m> $ are obviously even numbers . We know that the product $ <var:L> <nat:118> $ is obviously even . $ <nat:208> <var:v> $ is known as even . This claim holds from the knowledge taking the product of an even number in $ \mathbb{Z}^+ $ and any element of $ \mathbb{N} $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:m> <var:s> <var:v> <var:L> <var:X> <var:N> <var:b> : nat , Nat . odd ( <nat:118> * <var:L> + <nat:156> * <var:s> + <nat:68> * <var:N> + <nat:208> * <var:v> + <nat:84> * <var:X> + <nat:134> * <var:J> + <nat:50> * <var:m> + <nat:260> * <var:b> + <nat:39> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even ( <nat:260> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 