\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take as given that $ <var:s> $ is a <def:seven-composite> whole number wherever there are $ <var:q> $ , $ <var:p> $ , $ <var:H> $ , $ <var:x> $ , $ <var:Y> $ , $ <var:L> $ , $ <var:b> \in \mathbb{N} $ satisfying the condition that $ <var:L> $ , $ <var:b> $ , $ <var:H> $ , $ <var:x> $ , $ <var:Y> $ , $ <var:q> $ , $ <var:p> \geq <nat:2> $ as well as given some natural number $ <var:s> $ , $ <var:s> = <var:x> * <var:q> * <var:Y> * <var:p> * <var:L> * <var:b> * <var:H> $ . \end{definition} \begin{theorem} $ <nat:1684800> = <var:s> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Recall that a <def:seven-composite> is the product between positive integers $ <var:p> $ , $ <var:b> $ , $ <var:L> $ , $ <var:x> $ , $ <var:q> $ , $ <var:Y> $ , $ <var:H> $ more than or equivalent to <nat:2> . Let $ <var:x> = <nat:5> $ , $ <var:b> = <nat:10> $ , $ <var:L> = <nat:9> $ , $ <var:q> = <nat:3> $ , $ <var:Y> = <nat:8> $ , $ <var:p> = <nat:13> $ , and $ <var:H> = <nat:12> $ . We justify <nat:1684800> is <def:seven-composite> . We justify <nat:1684800> is a <def:seven-composite> whole number on account of For $ <nat:3> $ , $ <nat:10> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:8> $ , and $ <nat:13> $ are more than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:s> : nat ) := exists <var:q> <var:p> <var:H> <var:x> <var:Y> <var:L> <var:b> : nat , ( <var:L> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:s> = <var:x> * <var:q> * <var:Y> * <var:p> * <var:L> * <var:b> * <var:H> ) . Theorem <genP:1> : <def:seven-composite> <nat:1684800> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:13> . exists <nat:12> . exists <nat:5> . exists <nat:8> . exists <nat:9> . exists <nat:10> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 