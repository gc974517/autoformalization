\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We say that granted that there are numbers $ <var:E> $ , $ <var:a> $ , $ <var:g> $ , $ <var:n> $ , $ <var:m> $ , $ <var:x> $ , $ <var:R> $ , $ <var:J> $ , $ <var:B> $ then let that some positive integer $ <var:Y> $ will be <def:nine-composite> when $ <var:g> * <var:x> * <var:m> * <var:E> * <var:n> * <var:J> * <var:a> * <var:B> * <var:R> = <var:Y> $ plus factors are larger than <nat:1> . Hence <nat:15724800> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Assume $ <var:E> = <nat:2> $ , $ <var:B> = <nat:8> $ , $ <var:R> = <nat:10> $ , $ <var:J> = <nat:13> $ , $ <var:n> = <nat:6> $ , $ <var:g> = <nat:9> $ , $ <var:a> = <nat:5> $ , $ <var:m> = <nat:4> $ , $ <var:x> = <nat:7> $ . We prove $ <nat:15724800> = <var:g> \cdot <var:B> \cdot <var:J> \cdot <var:a> \cdot <var:m> \cdot <var:E> \cdot <var:n> \cdot <var:x> \cdot <var:R> $ . What's more observe that $ <var:a> = <nat:5> $ , $ <var:m> = <nat:4> $ , $ <var:R> = <nat:10> $ , $ <var:E> = <nat:2> $ , $ <var:g> = <nat:9> $ , $ <var:n> = <nat:6> $ , $ <var:x> = <nat:7> $ , $ <var:B> = <nat:8> $ , $ <var:J> = <nat:13> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:Y> : nat ) := exists <var:E> <var:a> <var:g> <var:n> <var:m> <var:x> <var:R> <var:J> <var:B> : nat , ( <var:g> * <var:x> * <var:m> * <var:E> * <var:n> * <var:J> * <var:a> * <var:B> * <var:R> = <var:Y> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:B> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:15724800> . Proof . unfold <def:nine-composite> . exists <nat:2> . exists <nat:5> . exists <nat:9> . exists <nat:6> . exists <nat:4> . exists <nat:7> . exists <nat:10> . exists <nat:13> . exists <nat:8> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 