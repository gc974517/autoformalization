\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:286> * <var:J> + <nat:30> * <var:L> + <var:h> * <nat:292> + <nat:474> * <var:p> + <nat:77> + <nat:48> * <var:c> + <var:d> * <nat:2> $ must be odd . \end{theorem} \begin{proof} See $ <nat:77> $ is guaranteed to be an odd element of $ \mathbb{N} $ . It can be demonstrated that $ <nat:2> \cdot <var:d> + <nat:77> + <var:L> \cdot <nat:30> + <var:J> \cdot <nat:286> + <nat:48> \cdot <var:c> + <nat:292> \cdot <var:h> + <var:p> \cdot <nat:474> $ must be odd . The formula $ <nat:30> * <var:L> + <var:c> * <nat:48> + <var:J> * <nat:286> + <nat:292> * <var:h> + <var:d> * <nat:2> + <var:p> * <nat:474> $ is clearly even , as a consequence that the totaling between even whole numbers successively and an even element of $ \mathbb{Z}^+ $ must be even . The whole numbers $ <nat:286> $ , $ <nat:292> $ , and $ <nat:2> $ are trivially even Likewise , the leading term $ <nat:48> $ is clearly even The leading term $ <nat:30> $ is obviously even Further , take note that the coefficient $ <nat:474> $ is known as an even whole number \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:L> <var:h> <var:p> <var:c> <var:d> : nat , Nat . odd ( <nat:286> * <var:J> + <nat:30> * <var:L> + <nat:292> * <var:h> + <nat:474> * <var:p> + <nat:48> * <var:c> + <nat:2> * <var:d> + <nat:77> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:77> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:J> + <nat:30> * <var:L> + <nat:292> * <var:h> + <nat:474> * <var:p> + <nat:48> * <var:c> + <nat:2> * <var:d> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 