\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:100> * <var:F> + <nat:26> * <var:N> + <nat:65> + <var:J> * <nat:488> $ is odd assuming every positive numbers $ <var:F> $ , $ <var:N> $ , and $ <var:J> $ . \end{theorem} \begin{proof} Observe that $ <var:J> * <nat:488> + <var:F> * <nat:100> + <var:N> * <nat:26> $ is clearly even . The product $ <var:N> * <nat:26> $ is clearly an even element of $ \mathbb{Z}^+ $ . This must be true as a consequence that the positive integer $ <nat:26> $ is guaranteed to be even . Remember the number $ <nat:100> $ is an even whole number . For this reason , the product $ <nat:100> * <var:F> $ is even additionally . Furthermore , the product $ <nat:488> * <var:J> $ is known to be even . This is proven as a consequence that multiplying between an even number and some element of $ \mathbb{N} $ will be even . This fact must be true from the knowledge the whole number $ <nat:488> $ is trivially even . This result must be true as a consequence that the summing of an even element of $ \mathbb{N} $ with an even number in $ \mathbb{Z}^+ $ is even . Recall $ <nat:65> $ is trivially an odd positive integer . Recall the totaling between an even number and an odd whole number is guaranteed to be clearly an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:N> <var:J> : nat , Nat . odd ( <nat:100> * <var:F> + <nat:26> * <var:N> + <nat:488> * <var:J> + <nat:65> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:F> + <nat:26> * <var:N> + <nat:488> * <var:J> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:65> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 