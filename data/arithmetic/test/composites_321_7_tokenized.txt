\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition there are $ <var:q> $ , $ <var:p> $ , $ <var:f> $ , $ <var:Q> $ , $ <var:y> $ , $ <var:W> $ , $ <var:o> $ then let that some integer $ <var:O> $ will be named a <def:seven-composite> positive integer given $ <var:O> = <var:f> \times <var:y> \times <var:Q> \times <var:q> \times <var:o> \times <var:p> \times <var:W> $ plus unique terms are larger than <nat:1> . \end{definition} \begin{theorem} The positive integer <nat:336960> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Recall that <nat:336960> is a <def:seven-composite> number granted that it is the multiplication of integers $ <var:y> $ , $ <var:f> $ , $ <var:Q> $ , $ <var:o> $ , $ <var:W> $ , $ <var:q> $ , $ <var:p> $ more than <nat:1> . Take $ <var:y> = <nat:9> $ , $ <var:o> = <nat:10> $ , $ <var:f> = <nat:2> $ , $ <var:q> = <nat:3> $ , $ <var:Q> = <nat:13> $ , $ <var:p> = <nat:4> $ and $ <var:W> = <nat:12> $ . We show <nat:336960> is a <def:seven-composite> number . Note that $ <var:f> * <var:Q> * <var:y> * <var:o> * <var:q> * <var:p> * <var:W> = <nat:336960> $ . Similarly note that $ <var:Q> = <nat:13> $ , $ <var:q> = <nat:3> $ , $ <var:f> = <nat:2> $ , $ <var:o> = <nat:10> $ , $ <var:p> = <nat:4> $ , $ <var:y> = <nat:9> $ , $ <var:W> = <nat:12> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:O> : nat ) := exists <var:q> <var:p> <var:f> <var:Q> <var:y> <var:W> <var:o> : nat , ( <var:O> = <var:f> * <var:y> * <var:Q> * <var:q> * <var:o> * <var:p> * <var:W> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:o> > <nat:1> ) . Theorem <genP:1> : <def:seven-composite> <nat:336960> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:4> . exists <nat:2> . exists <nat:13> . exists <nat:9> . exists <nat:12> . exists <nat:10> . assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 