\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Iff we have where $ <var:I> $ , $ <var:A> $ , $ <var:u> $ , $ <var:m> $ , $ <var:D> $ , $ <var:e> $ , and $ <var:L> > <nat:1> $ so that given $ <var:s> \in \mathbb{Z}^+ $ , $ <var:s> = <var:L> \cdot <var:D> \cdot <var:m> \cdot <var:e> \cdot <var:u> \cdot <var:A> \cdot <var:I> $ using some $ <var:e> $ , $ <var:D> $ , $ <var:A> $ , $ <var:L> $ , $ <var:u> $ , $ <var:I> $ , $ <var:m> \in \mathbb{N} $ , claim that $ <var:s> $ is a <def:seven-composite> whole number . Therefore $ <nat:201600> = <var:s> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Notice that $ <var:u> \times <var:I> \times <var:m> \times <var:D> \times <var:L> \times <var:e> \times <var:A> = <nat:201600> $ gives $ <var:L> = <nat:2> $ , $ <var:A> = <nat:5> $ , $ <var:e> = <nat:12> $ , $ <var:u> = <nat:4> $ , $ <var:m> = <nat:7> $ , $ <var:D> = <nat:10> $ and $ <var:I> = <nat:6> $ . Similarly notice that $ <nat:5> $ , $ <nat:10> $ , $ <nat:4> $ , $ <nat:6> $ , $ <nat:12> $ , $ <nat:2> $ and $ <nat:7> $ are more than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:s> : nat ) := exists <var:e> <var:D> <var:A> <var:L> <var:u> <var:I> <var:m> : nat , ( <var:I> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:s> = <var:L> * <var:D> * <var:m> * <var:e> * <var:u> * <var:A> * <var:I> ) . Theorem <genP:1> : <def:seven-composite> <nat:201600> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:10> . exists <nat:5> . exists <nat:2> . exists <nat:4> . exists <nat:6> . exists <nat:7> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 