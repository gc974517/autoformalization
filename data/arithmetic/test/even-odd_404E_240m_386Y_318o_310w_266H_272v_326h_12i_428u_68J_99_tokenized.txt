\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:240> \cdot <var:m> + <var:w> \cdot <nat:310> + <var:o> \cdot <nat:318> + <var:E> \cdot <nat:404> + <nat:99> + <nat:12> \cdot <var:i> + <var:h> \cdot <nat:326> + <var:Y> \cdot <nat:386> + <var:J> \cdot <nat:68> + <var:H> \cdot <nat:266> + <nat:428> \cdot <var:u> + <var:v> \cdot <nat:272> $ will be odd taking all variables $ <var:H> $ , $ <var:Y> $ , $ <var:h> $ , $ <var:J> $ , $ <var:w> $ , $ <var:o> $ , $ <var:u> $ , $ <var:v> $ , $ <var:m> $ , $ <var:i> $ , and $ <var:E> $ . \end{theorem} \begin{proof} We show that $ <nat:404> * <var:E> + <nat:240> * <var:m> + <nat:386> * <var:Y> + <nat:318> * <var:o> + <nat:310> * <var:w> + <nat:266> * <var:H> + <var:v> * <nat:272> + <var:h> * <nat:326> + <var:i> * <nat:12> + <nat:428> * <var:u> + <var:J> * <nat:68> $ is obviously even . See the summing between an even number in $ \mathbb{N} $ with an even natural must be an even natural . Notice the term $ <nat:310> \times <var:w> $ is guaranteed to be even from the fact the multiplication between an even element of $ \mathbb{N} $ with a integer will be obviously an even element of $ \mathbb{Z}^+ $ . The products $ <var:i> \times <nat:12> $ , $ <var:H> \times <nat:266> $ , $ <var:m> \times <nat:240> $ , $ <nat:428> \times <var:u> $ , $ <var:o> \times <nat:318> $ , $ <var:v> \times <nat:272> $ , $ <nat:68> \times <var:J> $ , and also $ <nat:326> \times <var:h> $ are clearly even naturals by reason that multiplying of an even natural number with some number is guaranteed to be even . The product $ <var:E> \times <nat:404> $ is trivially an even element of $ \mathbb{N} $ . This fact is proven because multiplying of an even natural with some positive integer will be an even element of $ \mathbb{Z}^+ $ . See that $ <var:Y> \times <nat:386> $ is trivially an even number in $ \mathbb{Z}^+ $ . This claim must be true from the fact the multiplication between an even element of $ \mathbb{N} $ and an arbitrary integer is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:Y> <var:h> <var:J> <var:w> <var:o> <var:u> <var:v> <var:m> <var:i> <var:E> : nat , Nat . odd ( <nat:240> * <var:m> + <nat:310> * <var:w> + <nat:318> * <var:o> + <nat:404> * <var:E> + <nat:12> * <var:i> + <nat:326> * <var:h> + <nat:386> * <var:Y> + <nat:68> * <var:J> + <nat:266> * <var:H> + <nat:428> * <var:u> + <nat:272> * <var:v> + <nat:99> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:310> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:m> + <nat:310> * <var:w> + <nat:318> * <var:o> + <nat:404> * <var:E> + <nat:12> * <var:i> + <nat:326> * <var:h> + <nat:386> * <var:Y> + <nat:68> * <var:J> + <nat:266> * <var:H> + <nat:428> * <var:u> + <nat:272> * <var:v> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 