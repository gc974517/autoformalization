\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:186> \cdot <var:x> + <var:T> \cdot <nat:376> + <nat:24> \cdot <var:g> + <nat:188> \cdot <var:r> + <nat:60> + <var:L> \cdot <nat:336> + <var:w> \cdot <nat:108> + <var:o> \cdot <nat:208> + <nat:326> \cdot <var:h> + <var:d> \cdot <nat:224> + <nat:286> \cdot <var:p> $ must be even . \end{theorem} \begin{proof} Observe the products $ <var:T> <nat:376> $ , $ <var:g> <nat:24> $ , $ <nat:326> <var:h> $ , $ <nat:188> <var:r> $ , and moreover $ <nat:336> <var:L> $ are trivially even . Building on , the term $ <nat:186> <var:x> $ is known to be even . This claim holds as a consequence that taking the product of an even natural and a number in $ \mathbb{Z}^+ $ is guaranteed to be even . The terms $ <var:o> <nat:208> $ , $ <var:p> <nat:286> $ , and also $ <nat:108> <var:w> $ are trivially even numbers in $ \mathbb{Z}^+ $ . The term $ <nat:224> <var:d> $ is known to be even as a consequence that taking the product between an even natural number with a element of $ \mathbb{N} $ will be an even positive integer . We know that $ <nat:60> $ is known to be even . We check the expression $ <var:p> \times <nat:286> + <var:g> \times <nat:24> + <nat:108> \times <var:w> + <var:L> \times <nat:336> + <nat:326> \times <var:h> + <var:d> \times <nat:224> + <var:T> \times <nat:376> + <nat:60> + <nat:208> \times <var:o> + <var:r> \times <nat:188> + <nat:186> \times <var:x> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:T> <var:g> <var:r> <var:L> <var:w> <var:o> <var:h> <var:d> <var:p> : nat , Nat . even ( <nat:186> * <var:x> + <nat:376> * <var:T> + <nat:24> * <var:g> + <nat:188> * <var:r> + <nat:336> * <var:L> + <nat:108> * <var:w> + <nat:208> * <var:o> + <nat:326> * <var:h> + <nat:224> * <var:d> + <nat:286> * <var:p> + <nat:60> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:376> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:108> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:224> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 