\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:m> * <nat:280> + <nat:22> * <var:G> + <nat:110> * <var:Y> + <nat:236> * <var:L> + <var:O> * <nat:228> + <var:F> * <nat:42> + <nat:128> * <var:A> + <nat:354> * <var:h> + <nat:350> * <var:T> + <nat:225> + <nat:404> * <var:S> + <var:s> * <nat:358> $ must be odd assuming every $ <var:S> $ , $ <var:L> $ , $ <var:s> $ , $ <var:A> $ , $ <var:h> $ , $ <var:Y> $ , $ <var:T> $ , $ <var:m> $ , $ <var:F> $ , $ <var:O> $ , and $ <var:G> \in \mathbb{N} $ . \end{theorem} \begin{proof} It can be checked that $ <var:G> * <nat:22> + <var:h> * <nat:354> + <nat:42> * <var:F> + <nat:225> + <var:A> * <nat:128> + <var:T> * <nat:350> + <nat:236> * <var:L> + <nat:280> * <var:m> + <var:O> * <nat:228> + <var:s> * <nat:358> + <var:Y> * <nat:110> + <nat:404> * <var:S> $ is guaranteed to be odd by reason that the summation $ <nat:354> \cdot <var:h> + <nat:110> \cdot <var:Y> + <var:m> \cdot <nat:280> + <var:A> \cdot <nat:128> + <var:S> \cdot <nat:404> + <nat:42> \cdot <var:F> + <nat:228> \cdot <var:O> + <nat:236> \cdot <var:L> + <nat:350> \cdot <var:T> + <nat:358> \cdot <var:s> + <nat:22> \cdot <var:G> $ is guaranteed to be even , from the fact the adding between even numbers in $ \mathbb{Z}^+ $ and an even positive integer is guaranteed to be in itself an even number in $ \mathbb{N} $ . Notice that the products $ <nat:358> <var:s> $ , $ <nat:280> <var:m> $ , $ <var:T> <nat:350> $ , $ <nat:228> <var:O> $ , $ <var:F> <nat:42> $ , $ <var:Y> <nat:110> $ , $ <var:S> <nat:404> $ , $ <nat:354> <var:h> $ , $ <var:A> <nat:128> $ , plus $ <nat:236> <var:L> $ are even . The term $ <var:G> <nat:22> $ is clearly even . This fact must be true from the fact the product between an even positive integer with any natural number must be an even element of $ \mathbb{Z}^+ $ . additionally because the product of even numbers and an arbitrary number in $ \mathbb{N} $ will be fundamentally an even positive integer the result holds . See $ <nat:225> $ is known to be odd . We check the main result is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:S> <var:L> <var:s> <var:A> <var:h> <var:Y> <var:T> <var:m> <var:F> <var:O> <var:G> : nat , Nat . odd ( <nat:280> * <var:m> + <nat:22> * <var:G> + <nat:110> * <var:Y> + <nat:236> * <var:L> + <nat:228> * <var:O> + <nat:42> * <var:F> + <nat:128> * <var:A> + <nat:354> * <var:h> + <nat:350> * <var:T> + <nat:404> * <var:S> + <nat:358> * <var:s> + <nat:225> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:358> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:m> + <nat:22> * <var:G> + <nat:110> * <var:Y> + <nat:236> * <var:L> + <nat:228> * <var:O> + <nat:42> * <var:F> + <nat:128> * <var:A> + <nat:354> * <var:h> + <nat:350> * <var:T> + <nat:404> * <var:S> + <nat:358> * <var:s> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:225> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 