\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:48> \times <var:x> + <nat:22> \times <var:I> + <nat:160> \times <var:p> + <nat:226> \times <var:v> + <nat:130> \times <var:s> + <var:g> \times <nat:404> + <var:l> \times <nat:228> + <nat:318> \times <var:S> + <var:B> \times <nat:330> + <var:d> \times <nat:264> + <nat:258> + <nat:316> \times <var:T> $ is guaranteed to be even taking natural numbers $ <var:I> $ , $ <var:d> $ , $ <var:v> $ , $ <var:g> $ , $ <var:x> $ , $ <var:T> $ , $ <var:S> $ , $ <var:B> $ , $ <var:l> $ , $ <var:s> $ , and $ <var:p> $ . \end{theorem} \begin{proof} It can be checked that the sum $ <nat:318> \cdot <var:S> + <var:x> \cdot <nat:48> + <var:d> \cdot <nat:264> + <nat:160> \cdot <var:p> + <var:l> \cdot <nat:228> + <nat:226> \cdot <var:v> + <nat:22> \cdot <var:I> + <nat:404> \cdot <var:g> + <var:B> \cdot <nat:330> + <var:s> \cdot <nat:130> + <nat:316> \cdot <var:T> $ is trivially even . Remember the products $ <var:g> \cdot <nat:404> $ , $ <var:S> \cdot <nat:318> $ , and likewise $ <var:T> \cdot <nat:316> $ are trivially even . This is true since multiplying between an even positive integer with any positive integer is guaranteed to be even . Building on , the products $ <var:d> \cdot <nat:264> $ , $ <var:s> \cdot <nat:130> $ , $ <nat:22> \cdot <var:I> $ , $ <nat:226> \cdot <var:v> $ , $ <nat:48> \cdot <var:x> $ , plus $ <var:p> \cdot <nat:160> $ are clearly even positive integers by reason that taking the product between an even number with a natural is guaranteed to be clearly an even element of $ \mathbb{N} $ . The pair $ <nat:330> \cdot <var:B> $ is guaranteed to be an even natural by reason that taking the product between an even number in $ \mathbb{N} $ with an arbitrary natural number is even . What's more , observe the product $ <nat:228> \cdot <var:l> $ is clearly even from the knowledge multiplying of an even positive integer and an arbitrary whole number is guaranteed to be an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:d> <var:v> <var:g> <var:x> <var:T> <var:S> <var:B> <var:l> <var:s> <var:p> : nat , Nat . even ( <nat:48> * <var:x> + <nat:22> * <var:I> + <nat:160> * <var:p> + <nat:226> * <var:v> + <nat:130> * <var:s> + <nat:404> * <var:g> + <nat:228> * <var:l> + <nat:318> * <var:S> + <nat:330> * <var:B> + <nat:264> * <var:d> + <nat:316> * <var:T> + <nat:258> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:404> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:316> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:x> + <nat:22> * <var:I> + <nat:160> * <var:p> + <nat:226> * <var:v> + <nat:130> * <var:s> + <nat:404> * <var:g> + <nat:228> * <var:l> + <nat:318> * <var:S> + <nat:330> * <var:B> + <nat:264> * <var:d> + <nat:316> * <var:T> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . rewrite <genH> . auto . Qed . 