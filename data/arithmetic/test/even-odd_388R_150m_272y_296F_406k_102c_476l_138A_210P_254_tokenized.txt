\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:210> \cdot <var:P> + <nat:296> \cdot <var:F> + <nat:150> \cdot <var:m> + <var:k> \cdot <nat:406> + <nat:254> + <var:R> \cdot <nat:388> + <var:l> \cdot <nat:476> + <var:y> \cdot <nat:272> + <var:c> \cdot <nat:102> + <var:A> \cdot <nat:138> $ will be even using $ <var:A> $ , $ <var:y> $ , $ <var:P> $ , $ <var:R> $ , $ <var:l> $ , $ <var:k> $ , $ <var:F> $ , $ <var:m> $ , and $ <var:c> \in \mathbb{N} $ . \end{theorem} \begin{proof} This main result is true from the knowledge $ <nat:388> <var:R> + <nat:150> <var:m> + <nat:272> <var:y> + <nat:296> <var:F> + <nat:406> <var:k> + <nat:102> <var:c> + <var:l> <nat:476> + <var:A> <nat:138> + <nat:210> <var:P> $ is even . The natural numbers $ <nat:388> $ , $ <nat:150> $ , $ <nat:272> $ , $ <nat:296> $ , $ <nat:406> $ , $ <nat:102> $ , $ <nat:476> $ , $ <nat:138> $ , additionally $ <nat:210> $ must be even . For this reason , the terms $ <nat:388> \times <var:R> $ , $ <var:m> \times <nat:150> $ , $ <var:y> \times <nat:272> $ , $ <nat:296> \times <var:F> $ , $ <nat:406> \times <var:k> $ , $ <var:c> \times <nat:102> $ , $ <var:l> \times <nat:476> $ , $ <nat:138> \times <var:A> $ , and moreover $ <nat:210> \times <var:P> $ is even too . Notice $ <nat:254> $ is clearly an even element of $ \mathbb{N} $ . Take note the totaling of an even positive integer with an even element of $ \mathbb{Z}^+ $ is guaranteed to be an even number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:y> <var:P> <var:R> <var:l> <var:k> <var:F> <var:m> <var:c> : nat , Nat . even ( <nat:210> * <var:P> + <nat:296> * <var:F> + <nat:150> * <var:m> + <nat:406> * <var:k> + <nat:388> * <var:R> + <nat:476> * <var:l> + <nat:272> * <var:y> + <nat:102> * <var:c> + <nat:138> * <var:A> + <nat:254> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:P> + <nat:296> * <var:F> + <nat:150> * <var:m> + <nat:406> * <var:k> + <nat:388> * <var:R> + <nat:476> * <var:l> + <nat:272> * <var:y> + <nat:102> * <var:c> + <nat:138> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . auto . Qed . 