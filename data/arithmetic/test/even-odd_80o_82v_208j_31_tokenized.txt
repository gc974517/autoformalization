\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:o> * <nat:80> + <nat:208> * <var:j> + <nat:31> + <var:v> * <nat:82> $ is guaranteed to be odd . \end{theorem} \begin{proof} We use the assumption the understanding that the expression $ <nat:82> <var:v> + <nat:31> + <var:o> <nat:80> + <var:j> <nat:208> $ is known to be odd by reason that $ <nat:80> * <var:o> + <var:v> * <nat:82> + <var:j> * <nat:208> $ is trivially even . The pair $ <var:j> \cdot <nat:208> $ is trivially even by reason that the integer $ <nat:208> $ is clearly even . Adding on , observe that the coefficient $ <nat:80> $ is an even positive integer . As a consequence , $ <var:o> \cdot <nat:80> $ is guaranteed to be even as well . In addition to this , observe the number $ <nat:82> $ is known as even . Thus , the product $ <var:v> \cdot <nat:82> $ will be even also . The expression $ <var:o> \cdot <nat:80> + <var:v> \cdot <nat:82> + <var:j> \cdot <nat:208> $ will be instrinsically even since the product of an even number in $ \mathbb{Z}^+ $ with some number is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:j> <var:v> : nat , Nat . odd ( <nat:80> * <var:o> + <nat:208> * <var:j> + <nat:82> * <var:v> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:80> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:o> + <nat:208> * <var:j> + <nat:82> * <var:v> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 