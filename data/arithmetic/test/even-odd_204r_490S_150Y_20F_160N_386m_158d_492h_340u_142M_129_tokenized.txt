\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:u> \times <nat:340> + <var:h> \times <nat:492> + <var:m> \times <nat:386> + <var:N> \times <nat:160> + <var:F> \times <nat:20> + <var:Y> \times <nat:150> + <var:M> \times <nat:142> + <nat:204> \times <var:r> + <nat:129> + <var:d> \times <nat:158> + <nat:490> \times <var:S> $ is guaranteed to be odd using positive integers $ <var:N> $ , $ <var:h> $ , $ <var:F> $ , $ <var:r> $ , $ <var:Y> $ , $ <var:M> $ , $ <var:S> $ , $ <var:d> $ , $ <var:m> $ , and $ <var:u> $ . \end{theorem} \begin{proof} The summation $ <nat:204> \times <var:r> + <nat:490> \times <var:S> + <var:Y> \times <nat:150> + <var:F> \times <nat:20> + <var:N> \times <nat:160> + <var:m> \times <nat:386> + <nat:158> \times <var:d> + <nat:492> \times <var:h> + <nat:340> \times <var:u> + <nat:142> \times <var:M> $ is trivially even . The whole numbers $ <nat:204> $ , $ <nat:490> $ , $ <nat:150> $ , $ <nat:20> $ , $ <nat:160> $ , $ <nat:386> $ , $ <nat:158> $ , $ <nat:492> $ , $ <nat:340> $ , $ <nat:142> $ , are known as even natural numbers . Hence , the terms $ <var:r> <nat:204> $ , $ <var:S> <nat:490> $ , $ <nat:150> <var:Y> $ , $ <nat:20> <var:F> $ , $ <nat:160> <var:N> $ , $ <var:m> <nat:386> $ , $ <var:d> <nat:158> $ , $ <var:h> <nat:492> $ , $ <nat:340> <var:u> $ , $ <nat:142> <var:M> $ , is guaranteed to be even as well . By reason that the summation between even numbers in $ \mathbb{Z}^+ $ and an even whole number is even , our claim holds . Take note that $ <nat:129> $ is known to be an odd integer . We show this lemma is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:h> <var:F> <var:r> <var:Y> <var:M> <var:S> <var:d> <var:m> <var:u> : nat , Nat . odd ( <nat:340> * <var:u> + <nat:492> * <var:h> + <nat:386> * <var:m> + <nat:160> * <var:N> + <nat:20> * <var:F> + <nat:150> * <var:Y> + <nat:142> * <var:M> + <nat:204> * <var:r> + <nat:158> * <var:d> + <nat:490> * <var:S> + <nat:129> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even <nat:490> = true ) . { auto . } assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:u> + <nat:492> * <var:h> + <nat:386> * <var:m> + <nat:160> * <var:N> + <nat:20> * <var:F> + <nat:150> * <var:Y> + <nat:142> * <var:M> + <nat:204> * <var:r> + <nat:158> * <var:d> + <nat:490> * <var:S> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:129> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 