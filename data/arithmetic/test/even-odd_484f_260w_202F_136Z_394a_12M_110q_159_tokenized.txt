\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking some unknowns $ <var:Z> $ , $ <var:F> $ , $ <var:M> $ , $ <var:w> $ , $ <var:a> $ , $ <var:q> $ , and $ <var:f> $ the sum $ <nat:159> + <nat:484> <var:f> + <var:w> <nat:260> + <var:F> <nat:202> + <var:Z> <nat:136> + <nat:394> <var:a> + <nat:12> <var:M> + <var:q> <nat:110> $ must be odd . \end{theorem} \begin{proof} We prove this result is proven . See the terms $ <var:q> \cdot <nat:110> $ , $ <var:f> \cdot <nat:484> $ , $ <nat:394> \cdot <var:a> $ , $ <var:w> \cdot <nat:260> $ , and moreover $ <var:Z> \cdot <nat:136> $ must be even . Remember that the term $ <var:M> \cdot <nat:12> $ is obviously even . This fact holds since multiplying between an even integer with any element of $ \mathbb{N} $ will be an even number in $ \mathbb{N} $ . In addition , notice the pair $ <nat:202> \cdot <var:F> $ is known as even . Observe the addition of even positive integers and an odd positive integer must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Z> <var:F> <var:M> <var:w> <var:a> <var:q> <var:f> : nat , Nat . odd ( <nat:484> * <var:f> + <nat:260> * <var:w> + <nat:202> * <var:F> + <nat:136> * <var:Z> + <nat:394> * <var:a> + <nat:12> * <var:M> + <nat:110> * <var:q> + <nat:159> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:110> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 