\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:483> + <var:c> * <nat:100> + <var:d> * <nat:454> + <var:z> * <nat:252> + <nat:58> * <var:F> + <var:j> * <nat:344> + <var:X> * <nat:190> $ must be odd . \end{theorem} \begin{proof} Our result holds by reason that $ <var:j> * <nat:344> + <var:c> * <nat:100> + <var:z> * <nat:252> + <nat:58> * <var:F> + <nat:454> * <var:d> + <var:X> * <nat:190> $ is clearly even . The term $ <nat:252> \times <var:z> $ is known to be even . The term $ <nat:58> \times <var:F> $ is clearly an even element of $ \mathbb{Z}^+ $ . This fact is proven from the knowledge taking the product of an even natural and an arbitrary element of $ \mathbb{N} $ is even . In addition , the pair $ <var:d> \times <nat:454> $ is obviously an even element of $ \mathbb{N} $ . The terms $ <var:c> \times <nat:100> $ additionally $ <var:j> \times <nat:344> $ are known as even . We know that $ <nat:190> \times <var:X> $ is clearly even . The lemma holds from the fact multiplying between even elements of $ \mathbb{Z}^+ $ with some number in $ \mathbb{N} $ must be even . We know that the summation of an even number in $ \mathbb{Z}^+ $ and an odd number must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:d> <var:z> <var:F> <var:j> <var:X> : nat , Nat . odd ( <nat:100> * <var:c> + <nat:454> * <var:d> + <nat:252> * <var:z> + <nat:58> * <var:F> + <nat:344> * <var:j> + <nat:190> * <var:X> + <nat:483> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:252> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:c> + <nat:454> * <var:d> + <nat:252> * <var:z> + <nat:58> * <var:F> + <nat:344> * <var:j> + <nat:190> * <var:X> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 