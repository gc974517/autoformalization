\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take as given that $ <var:a> $ is a <def:six-composite> number with the condition for some $ <var:D> $ , $ <var:B> $ , $ <var:I> $ , $ <var:x> $ , $ <var:m> $ , $ <var:o> \in \mathbb{Z}^+ $ we have $ <var:a> = <var:o> * <var:m> * <var:B> * <var:I> * <var:D> * <var:x> $ given some number $ <var:a> $ and so that $ <var:x> $ , $ <var:o> $ , $ <var:m> $ , $ <var:B> $ , $ <var:I> $ and $ <var:D> \geq <nat:2> $ . For this reason $ <var:a> = <nat:102960> $ is a <def:six-composite> positive integer . \end{theorem} \begin{proof} Recall <nat:102960> is a <def:six-composite> integer assuming it is the multiplication between $ <var:o> $ , $ <var:D> $ , $ <var:x> $ , $ <var:m> $ , $ <var:I> $ and $ <var:B> $ so that $ <var:D> $ , $ <var:o> $ , $ <var:B> $ , $ <var:x> $ , $ <var:I> $ , $ <var:m> > <nat:1> $ . We confirm <nat:102960> is a <def:six-composite> number . Notice that $ <nat:11> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:13> $ and $ <nat:10> > <nat:1> $ . Plus observe as well $ <var:D> \cdot <var:I> \cdot <var:x> \cdot <var:m> \cdot <var:o> \cdot <var:B> = <nat:102960> $ implies $ <var:D> = <nat:2> $ , $ <var:I> = <nat:3> $ , $ <var:x> = <nat:11> $ , $ <var:m> = <nat:12> $ , $ <var:B> = <nat:10> $ , $ <var:o> = <nat:13> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:a> : nat ) := exists <var:D> <var:B> <var:I> <var:x> <var:m> <var:o> : nat , ( <var:a> = <var:o> * <var:m> * <var:B> * <var:I> * <var:D> * <var:x> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:102960> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } exists <nat:2> . exists <nat:10> . exists <nat:3> . exists <nat:11> . exists <nat:12> . exists <nat:13> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 