\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all unknowns $ <var:y> $ , $ <var:R> $ , $ <var:e> $ , and $ <var:f> $ the formula $ <var:e> * <nat:308> + <var:R> * <nat:262> + <var:y> * <nat:282> + <nat:125> + <nat:420> * <var:f> $ is guaranteed to be odd . \end{theorem} \begin{proof} The summing between even natural numbers concurrently with an odd integer must be by definition an odd element of $ \mathbb{N} $ . We make use the understanding the sum $ <nat:420> \times <var:f> + <nat:125> + <var:y> \times <nat:282> + <nat:308> \times <var:e> + <nat:262> \times <var:R> $ is trivially odd because the expression $ <var:e> \times <nat:308> + <nat:262> \times <var:R> + <var:y> \times <nat:282> + <nat:420> \times <var:f> $ is guaranteed to be even . The natural numbers $ <nat:262> $ , $ <nat:420> $ , additionally $ <nat:308> $ are known as even positive integers The leading term $ <nat:282> $ is clearly an even whole number As a consequence that the adding of an even positive integer with even natural numbers is guaranteed to be even , and likewise since taking the product of even natural numbers and an arbitrary number will be obviously an even whole number . It can be demonstrated that our lemma holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:R> <var:e> <var:f> : nat , Nat . odd ( <nat:308> * <var:e> + <nat:262> * <var:R> + <nat:282> * <var:y> + <nat:420> * <var:f> + <nat:125> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:e> + <nat:262> * <var:R> + <nat:282> * <var:y> + <nat:420> * <var:f> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 