\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:425> + <nat:280> <var:N> + <nat:492> <var:U> + <var:B> <nat:354> + <var:E> <nat:88> + <nat:160> <var:h> + <var:H> <nat:294> + <var:q> <nat:324> + <nat:4> <var:W> + <nat:100> <var:i> $ will be odd . \end{theorem} \begin{proof} Observe that the products $ <var:W> <nat:4> $ , $ <nat:100> <var:i> $ , $ <nat:160> <var:h> $ , $ <nat:88> <var:E> $ , $ <var:N> <nat:280> $ , $ <var:B> <nat:354> $ , $ <nat:492> <var:U> $ , and also $ <nat:294> <var:H> $ are guaranteed to be even positive integers . This claim is true because the natural numbers $ <nat:4> $ , $ <nat:100> $ , $ <nat:160> $ , $ <nat:88> $ , $ <nat:280> $ , $ <nat:354> $ , $ <nat:492> $ , as well as $ <nat:294> $ are known to be clearly even whole numbers . In addition to this , the number $ <nat:324> $ is obviously an even number in $ \mathbb{Z}^+ $ . Accordingly , $ <var:q> <nat:324> $ must be even additionally . We verify the claim is true . We know that $ <nat:425> $ is known to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:U> <var:B> <var:E> <var:h> <var:H> <var:q> <var:W> <var:i> : nat , Nat . odd ( <nat:280> * <var:N> + <nat:492> * <var:U> + <nat:354> * <var:B> + <nat:88> * <var:E> + <nat:160> * <var:h> + <nat:294> * <var:H> + <nat:324> * <var:q> + <nat:4> * <var:W> + <nat:100> * <var:i> + <nat:425> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:425> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 