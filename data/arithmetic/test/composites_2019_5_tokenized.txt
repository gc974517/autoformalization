\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There are $ <var:k> $ , $ <var:W> $ , $ <var:U> $ , $ <var:T> $ , $ <var:j> \in \mathbb{N} $ greater than or equivalent to <nat:2> . Assume that $ <var:F> \in \mathbb{N} $ is named a <def:five-composite> natural number when $ <var:W> * <var:j> * <var:U> * <var:T> * <var:k> = <var:F> $ . \end{definition} \begin{theorem} <nat:10800> is a <def:five-composite> natural number . \end{theorem} \begin{proof} Recollect that <nat:10800> is a <def:five-composite> natural number if and only if it is the product of integers $ <var:W> $ , $ <var:U> $ , $ <var:T> $ , $ <var:k> $ , and $ <var:j> $ more than or equivalent to <nat:2> . Allow $ <var:j> = <nat:4> $ , $ <var:U> = <nat:10> $ , $ <var:W> = <nat:5> $ , $ <var:T> = <nat:9> $ , $ <var:k> = <nat:6> $ . Note $ <nat:5> $ , $ <nat:4> $ , $ <nat:9> $ , $ <nat:6> $ , $ <nat:10> \geq <nat:2> $ . Because of this , <nat:10800> is a <def:five-composite> number is proven . Thus , $ <var:j> $ , $ <var:T> $ , $ <var:k> $ , $ <var:W> $ and $ <var:U> $ are larger than or equivalent to <nat:2> and <nat:10800> is the product of some numbers $ <var:T> $ , $ <var:k> $ , $ <var:U> $ , $ <var:j> $ , $ <var:W> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:F> : nat ) := exists <var:k> <var:W> <var:U> <var:T> <var:j> : nat , ( <var:k> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:W> * <var:j> * <var:U> * <var:T> * <var:k> = <var:F> ) . Theorem <genP:1> : <def:five-composite> <nat:10800> . Proof . unfold <def:five-composite> . exists <nat:6> . exists <nat:5> . exists <nat:10> . exists <nat:9> . exists <nat:4> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 