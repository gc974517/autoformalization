\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:k> $ , $ <var:L> $ , $ <var:e> $ , $ <var:F> $ , $ <var:K> $ , $ <var:m> \in \mathbb{Z}^+ $ where $ <var:F> $ , $ <var:e> $ , $ <var:m> $ , $ <var:L> $ , $ <var:K> $ and $ <var:k> > <nat:1> $ . Take as given that $ <var:g> \in \mathbb{N} $ is said to be a <def:six-composite> natural number when $ <var:L> \times <var:m> \times <var:e> \times <var:F> \times <var:K> \times <var:k> = <var:g> $ . \end{definition} \begin{theorem} <nat:35100> is a <def:six-composite> integer . \end{theorem} \begin{proof} Let $ <var:m> = <nat:2> $ , $ <var:L> = <nat:10> $ , $ <var:k> = <nat:13> $ , $ <var:K> = <nat:5> $ , $ <var:F> = <nat:9> $ , $ <var:e> = <nat:3> $ . Observe $ <var:e> = <nat:3> $ , $ <var:K> = <nat:5> $ , $ <var:m> = <nat:2> $ , $ <var:k> = <nat:13> $ , $ <var:L> = <nat:10> $ , $ <var:F> = <nat:9> $ are more than <nat:1> . What's more notice additionally $ <var:L> \cdot <var:F> \cdot <var:e> \cdot <var:m> \cdot <var:k> \cdot <var:K> = <nat:35100> $ . As a result , $ <var:k> $ , $ <var:K> $ , $ <var:e> $ , $ <var:F> $ , $ <var:L> $ , and $ <var:m> $ are more than <nat:1> plus <nat:35100> is the multiplication between some whole numbers $ <var:F> $ , $ <var:K> $ , $ <var:m> $ , $ <var:L> $ , $ <var:k> $ and $ <var:e> $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:g> : nat ) := exists <var:k> <var:L> <var:e> <var:F> <var:K> <var:m> : nat , ( <var:F> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:K> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:L> * <var:m> * <var:e> * <var:F> * <var:K> * <var:k> = <var:g> ) . Theorem <genP:1> : <def:six-composite> <nat:35100> . Proof . unfold <def:six-composite> . exists <nat:13> . exists <nat:10> . exists <nat:3> . exists <nat:9> . exists <nat:5> . exists <nat:2> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 