\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:y> <nat:296> + <var:G> <nat:60> + <var:F> <nat:374> + <nat:342> <var:K> + <nat:209> + <var:C> <nat:76> + <nat:468> <var:p> + <var:c> <nat:270> + <var:a> <nat:340> + <var:N> <nat:42> + <nat:320> <var:m> + <var:u> <nat:202> $ will be odd . \end{theorem} \begin{proof} We know $ <nat:209> $ is known to be odd . We show the claim holds . $ <var:y> <nat:296> + <nat:270> <var:c> + <var:C> <nat:76> + <var:N> <nat:42> + <nat:342> <var:K> + <var:m> <nat:320> + <nat:340> <var:a> + <var:F> <nat:374> + <nat:468> <var:p> + <var:u> <nat:202> + <nat:60> <var:G> $ is known to be even , from the knowledge the summing between even numbers in $ \mathbb{N} $ concurrently with an even element of $ \mathbb{N} $ is guaranteed to be an even whole number . Recall the product $ <nat:374> \times <var:F> $ is even from the knowledge the coefficient $ <nat:374> $ is obviously an even integer . The coefficient $ <nat:60> $ is guaranteed to be even . Thus , the term $ <var:G> \times <nat:60> $ is even too . Notice that the product $ <nat:340> \times <var:a> $ is obviously an even positive integer since taking the product between an even number in $ \mathbb{Z}^+ $ with any element of $ \mathbb{N} $ is guaranteed to be an even natural and the positive integer $ <nat:340> $ is obviously trivially an even natural . The term $ <nat:202> \times <var:u> $ is an even whole number from the fact the positive integer $ <nat:202> $ is clearly an even natural number . The coefficient $ <nat:42> $ is trivially an even whole number . Consequently , the product $ <var:N> \times <nat:42> $ is even at the same time . We know the positive integer $ <nat:320> $ is even . Accordingly , the term $ <var:m> \times <nat:320> $ is guaranteed to be even in addition . Building on , take note the coefficient $ <nat:270> $ is guaranteed to be an even element of $ \mathbb{N} $ . So , the pair $ <nat:270> \times <var:c> $ will be even in addition . On top of this , the pair $ <nat:296> \times <var:y> $ is known to be even . This claim is true because the whole number $ <nat:296> $ is guaranteed to be even . Additionally , we know the term $ <var:C> \times <nat:76> $ is obviously even by reason that the leading term $ <nat:76> $ is known as by itself an even whole number . What's more , we know the product $ <var:K> \times <nat:342> $ is trivially an even natural number . This claim holds from the fact the whole number $ <nat:342> $ is obviously even . See that the pair $ <nat:468> \times <var:p> $ is clearly an even positive integer since the multiplication of an even number in $ \mathbb{N} $ with any element of $ \mathbb{N} $ will be even and likewise the number $ <nat:468> $ is trivially even . and moreover since taking the product of even elements of $ \mathbb{N} $ with some natural number will be even the formula $ <var:K> \times <nat:342> + <var:F> \times <nat:374> + <nat:42> \times <var:N> + <var:m> \times <nat:320> + <var:y> \times <nat:296> + <nat:270> \times <var:c> + <var:a> \times <nat:340> + <var:C> \times <nat:76> + <nat:468> \times <var:p> + <nat:202> \times <var:u> + <var:G> \times <nat:60> $ must be fundamentally even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:G> <var:F> <var:K> <var:C> <var:p> <var:c> <var:a> <var:N> <var:m> <var:u> : nat , Nat . odd ( <nat:296> * <var:y> + <nat:60> * <var:G> + <nat:374> * <var:F> + <nat:342> * <var:K> + <nat:76> * <var:C> + <nat:468> * <var:p> + <nat:270> * <var:c> + <nat:340> * <var:a> + <nat:42> * <var:N> + <nat:320> * <var:m> + <nat:202> * <var:u> + <nat:209> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:209> = true ) . { auto . } assert ( <genH> : Nat . even <nat:374> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:374> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:y> + <nat:60> * <var:G> + <nat:374> * <var:F> + <nat:342> * <var:K> + <nat:76> * <var:C> + <nat:468> * <var:p> + <nat:270> * <var:c> + <nat:340> * <var:a> + <nat:42> * <var:N> + <nat:320> * <var:m> + <nat:202> * <var:u> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 