\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Under the condition that there are positive integers $ <var:L> $ , $ <var:D> $ , $ <var:j> $ , $ <var:c> $ , $ <var:O> $ , $ <var:N> $ , $ <var:v> $ satisfying the condition that $ <var:O> $ , $ <var:D> $ , $ <var:L> $ , $ <var:N> $ , $ <var:j> $ , $ <var:c> $ , and $ <var:v> \geq <nat:2> $ . We denote that $ <var:r> \in \mathbb{Z}^+ $ is called a <def:seven-composite> integer assuming $ <var:r> = <var:O> \cdot <var:j> \cdot <var:D> \cdot <var:c> \cdot <var:v> \cdot <var:L> \cdot <var:N> $ . Then $ <var:r> = <nat:45360> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Let $ <var:D> = <nat:2> $ , $ <var:L> = <nat:7> $ , $ <var:v> = <nat:3> $ , $ <var:N> = <nat:6> $ , $ <var:c> = <nat:5> $ , $ <var:O> = <nat:9> $ , and $ <var:j> = <nat:4> $ . Note that $ <nat:4> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:6> $ , $ <nat:5> $ , $ <nat:7> $ , $ <nat:3> $ are greater than or equivalent to <nat:2> . Plus note too $ <var:O> \times <var:v> \times <var:D> \times <var:j> \times <var:c> \times <var:N> \times <var:L> = <nat:45360> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:r> : nat ) := exists <var:L> <var:D> <var:j> <var:c> <var:O> <var:N> <var:v> : nat , ( <var:O> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:r> = <var:O> * <var:j> * <var:D> * <var:c> * <var:v> * <var:L> * <var:N> ) . Theorem <genP:1> : <def:seven-composite> <nat:45360> . Proof . unfold <def:seven-composite> . exists <nat:7> . exists <nat:2> . exists <nat:4> . exists <nat:5> . exists <nat:9> . exists <nat:6> . exists <nat:3> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 