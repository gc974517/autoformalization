\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given natural numbers $ <var:C> $ , $ <var:P> $ , $ <var:s> $ , and $ <var:p> $ $ <nat:209> + <var:C> <nat:22> + <nat:452> <var:s> + <var:p> <nat:412> + <var:P> <nat:202> $ will be odd . \end{theorem} \begin{proof} $ <var:P> \cdot <nat:202> + <var:s> \cdot <nat:452> + <nat:209> + <var:C> \cdot <nat:22> + <var:p> \cdot <nat:412> $ is clearly odd because the summation $ <var:p> \cdot <nat:412> + <var:s> \cdot <nat:452> + <nat:22> \cdot <var:C> + <nat:202> \cdot <var:P> $ is even . The pairs $ <nat:452> \times <var:s> $ , $ <nat:202> \times <var:P> $ , plus $ <nat:412> \times <var:p> $ are guaranteed to be even integers . Likewise , see the pair $ <nat:22> \times <var:C> $ is an even whole number from the fact the multiplication of an even number with an arbitrary number in $ \mathbb{Z}^+ $ is even . See $ <nat:209> $ is guaranteed to be odd . We justify $ <var:C> <nat:22> + <nat:202> <var:P> + <nat:412> <var:p> + <var:s> <nat:452> + <nat:209> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:P> <var:s> <var:p> : nat , Nat . odd ( <nat:22> * <var:C> + <nat:452> * <var:s> + <nat:412> * <var:p> + <nat:202> * <var:P> + <nat:209> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:452> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:C> + <nat:452> * <var:s> + <nat:412> * <var:p> + <nat:202> * <var:P> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:209> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 