\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given positive terms $ <var:h> $ , $ <var:a> $ , $ <var:p> $ , $ <var:F> $ , $ <var:E> $ , $ <var:z> $ , $ <var:c> $ , $ <var:K> $ , $ <var:U> $ , $ <var:n> $ , and $ <var:q> $ $ <nat:54> \cdot <var:U> + <nat:145> + <nat:202> \cdot <var:c> + <var:n> \cdot <nat:106> + <nat:260> \cdot <var:z> + <var:h> \cdot <nat:164> + <nat:472> \cdot <var:E> + <var:a> \cdot <nat:250> + <nat:246> \cdot <var:q> + <var:K> \cdot <nat:428> + <nat:306> \cdot <var:F> + <var:p> \cdot <nat:2> $ must be odd . \end{theorem} \begin{proof} Remember that $ <nat:145> $ is clearly odd . We justify the sum $ <var:z> <nat:260> + <nat:250> <var:a> + <nat:106> <var:n> + <nat:202> <var:c> + <nat:145> + <nat:2> <var:p> + <var:U> <nat:54> + <var:h> <nat:164> + <nat:428> <var:K> + <var:E> <nat:472> + <nat:306> <var:F> + <var:q> <nat:246> $ will be odd . We know the formula $ <nat:145> + <nat:106> * <var:n> + <var:q> * <nat:246> + <nat:202> * <var:c> + <var:U> * <nat:54> + <var:p> * <nat:2> + <var:E> * <nat:472> + <var:K> * <nat:428> + <var:a> * <nat:250> + <var:h> * <nat:164> + <nat:260> * <var:z> + <var:F> * <nat:306> $ is trivially odd from the knowledge the sum $ <var:a> <nat:250> + <var:q> <nat:246> + <nat:260> <var:z> + <nat:164> <var:h> + <nat:306> <var:F> + <var:U> <nat:54> + <var:p> <nat:2> + <var:n> <nat:106> + <nat:472> <var:E> + <nat:202> <var:c> + <var:K> <nat:428> $ is known to be even . $ <nat:202> \cdot <var:c> $ is trivially even . This claim is true as a consequence that the leading term $ <nat:202> $ is guaranteed to be an even whole number . In addition , the integer $ <nat:260> $ is obviously an even number . Consequently , the pair $ <nat:260> \cdot <var:z> $ is guaranteed to be even too . Likewise , notice the term $ <nat:246> \cdot <var:q> $ is known as even because the product between an even element of $ \mathbb{Z}^+ $ and any integer must be even , which must be true from the knowledge the integer $ <nat:246> $ is trivially trivially an even number . In addition to this , the whole number $ <nat:472> $ is obviously even . Therefore , the product $ <nat:472> \cdot <var:E> $ will be even too . Notice that $ <nat:250> \cdot <var:a> $ is even by reason that the multiplication between an even integer with an arbitrary positive integer is guaranteed to be an even natural number . This fact is true from the fact the number $ <nat:250> $ is clearly even . Building on , $ <nat:428> \cdot <var:K> $ is obviously an even element of $ \mathbb{N} $ . This fact holds as a consequence that the number $ <nat:428> $ is clearly even . Remember that the pair $ <var:n> \cdot <nat:106> $ is even from the fact the leading term $ <nat:106> $ is known as even . Observe the product $ <var:p> \cdot <nat:2> $ is guaranteed to be an even number in $ \mathbb{N} $ . This fact holds since taking the product between an even natural and a integer is guaranteed to be clearly an even natural and moreover the coefficient $ <nat:2> $ is known to be even . Take note the leading term $ <nat:306> $ is clearly an even natural number . In consequence , the pair $ <nat:306> \cdot <var:F> $ is even additionally . On top of this , the pair $ <nat:54> \cdot <var:U> $ is trivially an even number from the fact the integer $ <nat:54> $ is known as itself an even element of $ \mathbb{Z}^+ $ . Recall that the integer $ <nat:164> $ is obviously even . Accordingly , the product $ <var:h> \cdot <nat:164> $ must be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:a> <var:p> <var:F> <var:E> <var:z> <var:c> <var:K> <var:U> <var:n> <var:q> : nat , Nat . odd ( <nat:54> * <var:U> + <nat:202> * <var:c> + <nat:106> * <var:n> + <nat:260> * <var:z> + <nat:164> * <var:h> + <nat:472> * <var:E> + <nat:250> * <var:a> + <nat:246> * <var:q> + <nat:428> * <var:K> + <nat:306> * <var:F> + <nat:2> * <var:p> + <nat:145> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:145> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:472> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:U> + <nat:202> * <var:c> + <nat:106> * <var:n> + <nat:260> * <var:z> + <nat:164> * <var:h> + <nat:472> * <var:E> + <nat:250> * <var:a> + <nat:246> * <var:q> + <nat:428> * <var:K> + <nat:306> * <var:F> + <nat:2> * <var:p> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 