\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take as given that given that there are $ <var:o> $ , $ <var:S> $ , $ <var:v> $ , $ <var:q> $ , $ <var:B> $ , $ <var:x> $ , $ <var:J> $ , $ <var:m> \in \mathbb{Z}^+ $ such that $ <var:v> $ , $ <var:S> $ , $ <var:q> $ , $ <var:J> $ , $ <var:m> $ , $ <var:B> $ , $ <var:x> $ and $ <var:o> \geq <nat:2> $ . Say that $ <var:C> \in \mathbb{N} $ will be a <def:eight-composite> integer given $ <var:C> = <var:v> * <var:q> * <var:m> * <var:x> * <var:o> * <var:S> * <var:J> * <var:B> $ . Hence $ <var:C> = <nat:1201200> $ is a <def:eight-composite> natural number . \end{theorem} \begin{proof} Take $ <var:B> = <nat:7> $ , $ <var:J> = <nat:10> $ , $ <var:v> = <nat:2> $ , $ <var:S> = <nat:13> $ , $ <var:x> = <nat:5> $ , $ <var:o> = <nat:3> $ , $ <var:q> = <nat:4> $ , and $ <var:m> = <nat:11> $ . Observe that $ <nat:13> $ , $ <nat:4> $ , $ <nat:7> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:2> $ , $ <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:C> : nat ) := exists <var:o> <var:S> <var:v> <var:q> <var:B> <var:x> <var:J> <var:m> : nat , ( <var:v> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:C> = <var:v> * <var:q> * <var:m> * <var:x> * <var:o> * <var:S> * <var:J> * <var:B> ) . Theorem <genP:1> : <def:eight-composite> <nat:1201200> . Proof . unfold <def:eight-composite> . exists <nat:3> . exists <nat:13> . exists <nat:2> . exists <nat:4> . exists <nat:7> . exists <nat:5> . exists <nat:10> . exists <nat:11> . assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 