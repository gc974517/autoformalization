\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:N> * <nat:110> + <var:U> * <nat:72> + <nat:117> + <nat:14> * <var:s> + <var:x> * <nat:268> + <nat:136> * <var:P> + <var:T> * <nat:324> $ is guaranteed to be odd for all whole numbers $ <var:x> $ , $ <var:N> $ , $ <var:P> $ , $ <var:U> $ , $ <var:s> $ , and $ <var:T> $ . \end{theorem} \begin{proof} We know the pairs $ <nat:72> \cdot <var:U> $ , $ <var:P> \cdot <nat:136> $ , and moreover $ <var:x> \cdot <nat:268> $ are guaranteed to be even . This must be true by reason that the multiplication of an even whole number with any positive integer will be even , which is proven because the whole numbers $ <nat:72> $ , $ <nat:136> $ , and moreover $ <nat:268> $ are even . On top of this , the positive integers $ <nat:14> $ plus $ <nat:324> $ must be even naturals . Therefore , the terms $ <var:s> \cdot <nat:14> $ plus $ <nat:324> \cdot <var:T> $ is even in addition . Further , $ <var:N> \cdot <nat:110> $ is known to be an even number from the fact multiplying of an even number and a natural number must be an even element of $ \mathbb{N} $ and also the number $ <nat:110> $ is clearly even . Notice $ <nat:117> $ is an odd natural number . The summation of even whole numbers concurrently with an odd integer must be an odd whole number . As a consequence , this claim is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:N> <var:P> <var:U> <var:s> <var:T> : nat , Nat . odd ( <nat:110> * <var:N> + <nat:72> * <var:U> + <nat:14> * <var:s> + <nat:268> * <var:x> + <nat:136> * <var:P> + <nat:324> * <var:T> + <nat:117> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:117> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 