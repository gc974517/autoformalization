\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:r> <nat:470> + <var:F> <nat:288> + <nat:245> + <var:n> <nat:64> + <var:o> <nat:320> + <var:Z> <nat:480> + <var:m> <nat:98> $ must be odd assuming some $ <var:r> $ , $ <var:F> $ , $ <var:o> $ , $ <var:Z> $ , $ <var:n> $ , and $ <var:m> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} In addition , the numbers $ <nat:470> $ , $ <nat:288> $ , $ <nat:64> $ , $ <nat:320> $ , $ <nat:480> $ , in addition to $ <nat:98> $ are clearly even . So , the pairs $ <var:r> * <nat:470> $ , $ <var:F> * <nat:288> $ , $ <var:n> * <nat:64> $ , $ <nat:320> * <var:o> $ , $ <nat:480> * <var:Z> $ , and $ <nat:98> * <var:m> $ will be even as well . Remember that $ <nat:245> $ is guaranteed to be an odd integer . We demonstrate our lemma holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:F> <var:o> <var:Z> <var:n> <var:m> : nat , Nat . odd ( <nat:470> * <var:r> + <nat:288> * <var:F> + <nat:64> * <var:n> + <nat:320> * <var:o> + <nat:480> * <var:Z> + <nat:98> * <var:m> + <nat:245> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:470> = true ) . { auto . } assert ( <genH> : Nat . even <nat:288> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:470> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:288> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:245> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 