\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For any integers $ <var:B> $ , $ <var:N> $ , $ <var:f> $ , $ <var:J> $ , $ <var:F> $ , and $ <var:W> $ the expression $ <var:F> \cdot <nat:428> + <nat:245> + <var:B> \cdot <nat:102> + <var:J> \cdot <nat:58> + <var:W> \cdot <nat:336> + <var:f> \cdot <nat:356> + <var:N> \cdot <nat:98> $ must be odd . \end{theorem} \begin{proof} The pairs $ <var:J> \times <nat:58> $ , $ <var:B> \times <nat:102> $ , as well as $ <nat:98> \times <var:N> $ are clearly even . This must be true since multiplying of an even whole number and an arbitrary number is guaranteed to be fundamentally an even natural number . The pairs $ <nat:336> \times <var:W> $ in addition to $ <var:F> \times <nat:428> $ will be even . Recall the pair $ <var:f> \times <nat:356> $ is known as even . This fact is true because multiplying between an even whole number and a whole number must be trivially an even natural number . It can be justified that our theorem is proven . Recall that $ <nat:245> $ is clearly an odd element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:B> <var:N> <var:f> <var:J> <var:F> <var:W> : nat , Nat . odd ( <nat:428> * <var:F> + <nat:102> * <var:B> + <nat:58> * <var:J> + <nat:336> * <var:W> + <nat:356> * <var:f> + <nat:98> * <var:N> + <nat:245> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:58> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:245> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 