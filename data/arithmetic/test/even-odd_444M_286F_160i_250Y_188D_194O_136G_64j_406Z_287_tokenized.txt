\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With $ <var:i> $ , $ <var:F> $ , $ <var:O> $ , $ <var:M> $ , $ <var:D> $ , $ <var:G> $ , $ <var:j> $ , $ <var:Y> $ , and $ <var:Z> $ the summation $ <nat:444> <var:M> + <nat:286> <var:F> + <var:i> <nat:160> + <nat:287> + <nat:250> <var:Y> + <var:D> <nat:188> + <var:O> <nat:194> + <nat:136> <var:G> + <var:j> <nat:64> + <var:Z> <nat:406> $ is guaranteed to be odd . \end{theorem} \begin{proof} The products $ <var:G> \times <nat:136> $ as well as $ <nat:286> \times <var:F> $ are known as even . Recall that the products $ <nat:250> \times <var:Y> $ , $ <nat:194> \times <var:O> $ , $ <nat:160> \times <var:i> $ , and moreover $ <var:M> \times <nat:444> $ will be even whole numbers . This claim is proven from the fact taking the product of an even element of $ \mathbb{Z}^+ $ and any number will be even . The pairs $ <nat:406> \times <var:Z> $ and likewise $ <var:D> \times <nat:188> $ will be even integers . The product $ <nat:64> \times <var:j> $ is guaranteed to be even . This is proven from the fact multiplying of an even positive integer and some number must be by itself an even element of $ \mathbb{Z}^+ $ . Observe $ <nat:287> $ is guaranteed to be odd . The totaling of even integers successively and an odd natural must be an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:F> <var:O> <var:M> <var:D> <var:G> <var:j> <var:Y> <var:Z> : nat , Nat . odd ( <nat:444> * <var:M> + <nat:286> * <var:F> + <nat:160> * <var:i> + <nat:250> * <var:Y> + <nat:188> * <var:D> + <nat:194> * <var:O> + <nat:136> * <var:G> + <nat:64> * <var:j> + <nat:406> * <var:Z> + <nat:287> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:136> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:287> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 