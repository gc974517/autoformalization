\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Say that $ <var:K> $ is a <def:five-composite> integer with the condition that there exist some numbers $ <var:W> $ , $ <var:x> $ , $ <var:q> $ , $ <var:T> $ , $ <var:G> $ satisfying the condition that $ <var:T> $ , $ <var:x> $ , $ <var:W> $ , $ <var:G> $ , and $ <var:q> \geq <nat:2> $ and assuming $ <var:K> \in \mathbb{Z}^+ $ , $ <var:K> = <var:W> \cdot <var:G> \cdot <var:T> \cdot <var:q> \cdot <var:x> $ . \end{definition} \begin{theorem} $ <nat:11520> = <var:K> $ is <def:five-composite> . \end{theorem} \begin{proof} Let $ <var:q> = <nat:6> $ , $ <var:T> = <nat:4> $ , $ <var:W> = <nat:5> $ , $ <var:x> = <nat:8> $ , $ <var:G> = <nat:12> $ . We show <nat:11520> is a <def:five-composite> number as $ <var:T> \times <var:q> \times <var:x> \times <var:W> \times <var:G> = <nat:4> \times <nat:6> \times <nat:8> \times <nat:5> \times <nat:12> = <nat:11520> $ as well as by reason of $ <var:G> = <nat:12> $ , $ <var:q> = <nat:6> $ , $ <var:x> = <nat:8> $ , $ <var:W> = <nat:5> $ and $ <var:T> = <nat:4> \geq <nat:2> $ . Hence , $ <var:x> $ , $ <var:q> $ , $ <var:T> $ , $ <var:G> $ , $ <var:W> \geq <nat:2> $ and $ <var:q> \times <var:G> \times <var:W> \times <var:x> \times <var:T> = <nat:11520> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:K> : nat ) := exists <var:W> <var:x> <var:q> <var:T> <var:G> : nat , ( <var:T> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:K> = <var:W> * <var:G> * <var:T> * <var:q> * <var:x> ) . Theorem <genP:1> : <def:five-composite> <nat:11520> . Proof . unfold <def:five-composite> . exists <nat:5> . exists <nat:8> . exists <nat:6> . exists <nat:4> . exists <nat:12> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 