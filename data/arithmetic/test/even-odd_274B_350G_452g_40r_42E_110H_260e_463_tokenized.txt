\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:463> + <nat:42> \cdot <var:E> + <nat:350> \cdot <var:G> + <nat:452> \cdot <var:g> + <nat:40> \cdot <var:r> + <var:H> \cdot <nat:110> + <var:B> \cdot <nat:274> + <nat:260> \cdot <var:e> $ is odd . \end{theorem} \begin{proof} We prove the formula $ <var:G> <nat:350> + <nat:274> <var:B> + <nat:260> <var:e> + <nat:110> <var:H> + <nat:463> + <nat:452> <var:g> + <var:E> <nat:42> + <var:r> <nat:40> $ is guaranteed to be odd . Recall $ <nat:463> $ is an odd natural . The lemma is proven since $ <var:B> * <nat:274> + <var:G> * <nat:350> + <var:g> * <nat:452> + <var:r> * <nat:40> + <var:E> * <nat:42> + <var:H> * <nat:110> + <var:e> * <nat:260> $ is known as even . The leading terms $ <nat:260> $ , $ <nat:110> $ , $ <nat:274> $ , $ <nat:350> $ , $ <nat:42> $ , plus $ <nat:452> $ will be even Recall the integer $ <nat:40> $ is known to be even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:G> <var:g> <var:r> <var:H> <var:B> <var:e> : nat , Nat . odd ( <nat:42> * <var:E> + <nat:350> * <var:G> + <nat:452> * <var:g> + <nat:40> * <var:r> + <nat:110> * <var:H> + <nat:274> * <var:B> + <nat:260> * <var:e> + <nat:463> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:463> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:E> + <nat:350> * <var:G> + <nat:452> * <var:g> + <nat:40> * <var:r> + <nat:110> * <var:H> + <nat:274> * <var:B> + <nat:260> * <var:e> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 