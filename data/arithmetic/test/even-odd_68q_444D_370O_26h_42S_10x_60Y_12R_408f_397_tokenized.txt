\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:68> * <var:q> + <var:D> * <nat:444> + <var:O> * <nat:370> + <nat:26> * <var:h> + <nat:397> + <var:S> * <nat:42> + <var:x> * <nat:10> + <nat:60> * <var:Y> + <nat:12> * <var:R> + <nat:408> * <var:f> $ is guaranteed to be odd . \end{theorem} \begin{proof} Recall $ <nat:397> $ is odd . It can be checked that our lemma must be true . In addition to this , the products $ <nat:68> <var:q> $ , $ <nat:444> <var:D> $ , $ <nat:370> <var:O> $ , $ <var:h> <nat:26> $ , $ <nat:42> <var:S> $ , $ <nat:10> <var:x> $ , $ <nat:60> <var:Y> $ , $ <nat:12> <var:R> $ , and also $ <nat:408> <var:f> $ are clearly even naturals because taking the product between an even element of $ \mathbb{Z}^+ $ and an arbitrary number must be even and also the numbers $ <nat:68> $ , $ <nat:444> $ , $ <nat:370> $ , $ <nat:26> $ , $ <nat:42> $ , $ <nat:10> $ , $ <nat:60> $ , $ <nat:12> $ , and also $ <nat:408> $ are guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:D> <var:O> <var:h> <var:S> <var:x> <var:Y> <var:R> <var:f> : nat , Nat . odd ( <nat:68> * <var:q> + <nat:444> * <var:D> + <nat:370> * <var:O> + <nat:26> * <var:h> + <nat:42> * <var:S> + <nat:10> * <var:x> + <nat:60> * <var:Y> + <nat:12> * <var:R> + <nat:408> * <var:f> + <nat:397> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:397> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 