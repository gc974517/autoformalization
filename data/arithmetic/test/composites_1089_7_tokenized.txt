\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:d> $ , $ <var:H> $ , $ <var:U> $ , $ <var:Q> $ , $ <var:k> $ , $ <var:j> $ , $ <var:J> \in \mathbb{Z}^+ $ satisfying the condition that $ <var:U> $ , $ <var:J> $ , $ <var:k> $ , $ <var:Q> $ , $ <var:j> $ , $ <var:d> $ , $ <var:H> \geq <nat:2> $ . Take as given that some natural number $ <var:b> $ is called a <def:seven-composite> integer if $ <var:b> = <var:d> * <var:j> * <var:H> * <var:J> * <var:k> * <var:Q> * <var:U> $ . Accordingly $ <var:b> = <nat:1197504> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Recall that a <def:seven-composite> natural number is the multiplication between integers $ <var:k> $ , $ <var:H> $ , $ <var:d> $ , $ <var:j> $ , $ <var:Q> $ , $ <var:J> $ , and $ <var:U> $ where $ <var:j> $ , $ <var:d> $ , $ <var:H> $ , $ <var:k> $ , $ <var:Q> $ , $ <var:U> $ , and $ <var:J> \geq <nat:2> $ . Allow $ <var:U> = <nat:6> $ , $ <var:d> = <nat:12> $ , $ <var:j> = <nat:11> $ , $ <var:H> = <nat:8> $ , $ <var:J> = <nat:3> $ , $ <var:Q> = <nat:9> $ , $ <var:k> = <nat:7> $ . We prove <nat:1197504> is a <def:seven-composite> integer . Observe that $ <nat:3> $ , $ <nat:12> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:6> $ , $ <nat:8> $ , $ <nat:11> \geq <nat:2> $ . This produces the statement is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:b> : nat ) := exists <var:d> <var:H> <var:U> <var:Q> <var:k> <var:j> <var:J> : nat , ( <var:U> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:b> = <var:d> * <var:j> * <var:H> * <var:J> * <var:k> * <var:Q> * <var:U> ) . Theorem <genP:1> : <def:seven-composite> <nat:1197504> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:8> . exists <nat:6> . exists <nat:9> . exists <nat:7> . exists <nat:11> . exists <nat:3> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 