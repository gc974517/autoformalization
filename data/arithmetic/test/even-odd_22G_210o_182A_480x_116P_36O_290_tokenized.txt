\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:36> <var:O> + <var:x> <nat:480> + <nat:290> + <nat:22> <var:G> + <nat:210> <var:o> + <var:P> <nat:116> + <var:A> <nat:182> $ must be even . \end{theorem} \begin{proof} The formula $ <var:o> * <nat:210> + <var:A> * <nat:182> + <nat:480> * <var:x> + <var:O> * <nat:36> + <var:P> * <nat:116> + <nat:22> * <var:G> $ is guaranteed to be even . The numbers $ <nat:36> $ , $ <nat:22> $ , $ <nat:480> $ , plus $ <nat:116> $ are guaranteed to be even integers . Consequently , the pairs $ <var:O> <nat:36> $ , $ <nat:22> <var:G> $ , $ <var:x> <nat:480> $ , and moreover $ <nat:116> <var:P> $ is guaranteed to be even at the same time . Further , recall that the pair $ <nat:182> <var:A> $ is known as an even integer because the product of an even number in $ \mathbb{Z}^+ $ and an arbitrary element of $ \mathbb{N} $ will be even . This claim is proven from the fact the leading term $ <nat:182> $ is known as even . The integer $ <nat:210> $ is trivially an even natural . As a consequence , $ <nat:210> <var:o> $ is even in addition . By reason that the product of an even whole number and an arbitrary number must be an even positive integer the result is proven . We check the expression $ <var:G> * <nat:22> + <nat:290> + <nat:210> * <var:o> + <var:A> * <nat:182> + <var:x> * <nat:480> + <var:P> * <nat:116> + <nat:36> * <var:O> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:O> <var:x> <var:G> <var:o> <var:P> <var:A> : nat , Nat . even ( <nat:36> * <var:O> + <nat:480> * <var:x> + <nat:22> * <var:G> + <nat:210> * <var:o> + <nat:116> * <var:P> + <nat:182> * <var:A> + <nat:290> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even <nat:22> = true ) . { auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:O> + <nat:480> * <var:x> + <nat:22> * <var:G> + <nat:210> * <var:o> + <nat:116> * <var:P> + <nat:182> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . rewrite <genH> . auto . Qed . 