\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using any $ <var:T> $ , $ <var:S> $ , $ <var:X> $ , $ <var:H> $ , $ <var:P> $ , and $ <var:L> \in \mathbb{Z}^+ $ $ <nat:340> \times <var:L> + <nat:296> \times <var:H> + <var:X> \times <nat:48> + <nat:199> + <var:S> \times <nat:8> + <nat:356> \times <var:T> + <var:P> \times <nat:104> $ will be odd . \end{theorem} \begin{proof} The terms $ <var:L> * <nat:340> $ , $ <nat:296> * <var:H> $ , $ <nat:48> * <var:X> $ , $ <nat:8> * <var:S> $ , $ <nat:356> * <var:T> $ , and likewise $ <nat:104> * <var:P> $ are guaranteed to be even numbers in $ \mathbb{N} $ by reason that the integers $ <nat:340> $ , $ <nat:296> $ , $ <nat:48> $ , $ <nat:8> $ , $ <nat:356> $ , as well as $ <nat:104> $ are trivially trivially even numbers in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:S> <var:X> <var:H> <var:P> <var:L> : nat , Nat . odd ( <nat:340> * <var:L> + <nat:296> * <var:H> + <nat:48> * <var:X> + <nat:8> * <var:S> + <nat:356> * <var:T> + <nat:104> * <var:P> + <nat:199> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:104> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 