\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:u> * <nat:458> + <var:d> * <nat:496> + <var:l> * <nat:384> + <nat:322> * <var:J> + <nat:441> + <nat:252> * <var:m> + <nat:340> * <var:v> + <var:Q> * <nat:426> $ is odd . \end{theorem} \begin{proof} We show the expression $ <var:Q> * <nat:426> + <nat:384> * <var:l> + <nat:496> * <var:d> + <nat:252> * <var:m> + <nat:340> * <var:v> + <nat:458> * <var:u> + <nat:441> + <var:J> * <nat:322> $ will be odd . Take note that $ <nat:441> $ is known to be an odd natural . We know the terms $ <var:m> \cdot <nat:252> $ , $ <var:Q> \cdot <nat:426> $ , $ <var:J> \cdot <nat:322> $ , additionally $ <var:l> \cdot <nat:384> $ are clearly even numbers in $ \mathbb{N} $ . On top of this , the pairs $ <var:u> \cdot <nat:458> $ additionally $ <var:v> \cdot <nat:340> $ will be even whole numbers . Furthermore , see the term $ <nat:496> \cdot <var:d> $ is known to be an even number in $ \mathbb{Z}^+ $ as a consequence that multiplying of an even natural number with some natural number must be clearly an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:d> <var:l> <var:J> <var:m> <var:v> <var:Q> : nat , Nat . odd ( <nat:458> * <var:u> + <nat:496> * <var:d> + <nat:384> * <var:l> + <nat:322> * <var:J> + <nat:252> * <var:m> + <nat:340> * <var:v> + <nat:426> * <var:Q> + <nat:441> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:441> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 