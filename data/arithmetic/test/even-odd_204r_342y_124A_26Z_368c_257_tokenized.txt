\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking some positive numbers $ <var:A> $ , $ <var:Z> $ , $ <var:r> $ , $ <var:y> $ , and $ <var:c> $ the formula $ <nat:204> <var:r> + <nat:342> <var:y> + <nat:257> + <nat:124> <var:A> + <var:Z> <nat:26> + <var:c> <nat:368> $ must be odd . \end{theorem} \begin{proof} Further , remember the numbers $ <nat:204> $ , $ <nat:342> $ , $ <nat:124> $ , $ <nat:26> $ , and moreover $ <nat:368> $ are clearly even natural numbers . Then , the pairs $ <nat:204> <var:r> $ , $ <var:y> <nat:342> $ , $ <var:A> <nat:124> $ , $ <var:Z> <nat:26> $ , additionally $ <var:c> <nat:368> $ must be even at the same time . We know that $ <nat:257> $ is odd . We prove this main result must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:Z> <var:r> <var:y> <var:c> : nat , Nat . odd ( <nat:204> * <var:r> + <nat:342> * <var:y> + <nat:124> * <var:A> + <nat:26> * <var:Z> + <nat:368> * <var:c> + <nat:257> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even <nat:368> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:257> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 