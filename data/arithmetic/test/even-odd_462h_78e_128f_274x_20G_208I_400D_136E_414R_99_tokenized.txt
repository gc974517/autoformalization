\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For all variables $ <var:D> $ , $ <var:e> $ , $ <var:x> $ , $ <var:I> $ , $ <var:E> $ , $ <var:G> $ , $ <var:f> $ , $ <var:R> $ , and $ <var:h> $ the formula $ <nat:20> * <var:G> + <nat:414> * <var:R> + <var:h> * <nat:462> + <var:I> * <nat:208> + <nat:274> * <var:x> + <nat:136> * <var:E> + <var:D> * <nat:400> + <var:e> * <nat:78> + <nat:128> * <var:f> + <nat:99> $ will be odd . \end{theorem} \begin{proof} The positive integers $ <nat:400> $ , $ <nat:274> $ , $ <nat:128> $ , $ <nat:414> $ , $ <nat:20> $ , $ <nat:208> $ , $ <nat:78> $ , in addition to $ <nat:462> $ are trivially even elements of $ \mathbb{N} $ . Consequently , the products $ <nat:400> * <var:D> $ , $ <var:x> * <nat:274> $ , $ <nat:128> * <var:f> $ , $ <nat:414> * <var:R> $ , $ <var:G> * <nat:20> $ , $ <var:I> * <nat:208> $ , $ <nat:78> * <var:e> $ , additionally $ <nat:462> * <var:h> $ is even in addition . Notice the coefficient $ <nat:136> $ is obviously even . Hence , $ <nat:136> * <var:E> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:e> <var:x> <var:I> <var:E> <var:G> <var:f> <var:R> <var:h> : nat , Nat . odd ( <nat:20> * <var:G> + <nat:414> * <var:R> + <nat:462> * <var:h> + <nat:208> * <var:I> + <nat:274> * <var:x> + <nat:136> * <var:E> + <nat:400> * <var:D> + <nat:78> * <var:e> + <nat:128> * <var:f> + <nat:99> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 