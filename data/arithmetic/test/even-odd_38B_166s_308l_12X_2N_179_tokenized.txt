\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:179> + <var:B> <nat:38> + <var:s> <nat:166> + <nat:308> <var:l> + <nat:12> <var:X> + <nat:2> <var:N> $ must be odd given every whole numbers $ <var:N> $ , $ <var:B> $ , $ <var:l> $ , $ <var:s> $ , and $ <var:X> $ . \end{theorem} \begin{proof} We justify our proposition is proven . In addition , notice that the leading terms $ <nat:38> $ , $ <nat:166> $ , $ <nat:308> $ , $ <nat:12> $ , and likewise $ <nat:2> $ are clearly even numbers in $ \mathbb{N} $ . For this reason , the pairs $ <var:B> \cdot <nat:38> $ , $ <var:s> \cdot <nat:166> $ , $ <var:l> \cdot <nat:308> $ , $ <var:X> \cdot <nat:12> $ , and $ <nat:2> \cdot <var:N> $ will be even additionally . Observe the summing between even whole numbers concurrently and an odd natural number must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:B> <var:l> <var:s> <var:X> : nat , Nat . odd ( <nat:38> * <var:B> + <nat:166> * <var:s> + <nat:308> * <var:l> + <nat:12> * <var:X> + <nat:2> * <var:N> + <nat:179> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:38> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:38> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 