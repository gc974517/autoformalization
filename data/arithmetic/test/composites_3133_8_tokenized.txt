\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:R> $ , $ <var:J> $ , $ <var:U> $ , $ <var:A> $ , $ <var:G> $ , $ <var:z> $ , $ <var:N> $ , $ <var:y> \in \mathbb{N} $ so that $ <var:z> $ , $ <var:U> $ , $ <var:G> $ , $ <var:J> $ , $ <var:R> $ , $ <var:y> $ , $ <var:N> $ and $ <var:A> \geq <nat:2> $ . Denote that some number $ <var:C> $ will be named a <def:eight-composite> number if $ <var:C> = <var:z> * <var:y> * <var:J> * <var:U> * <var:N> * <var:A> * <var:G> * <var:R> $ . Consequently the integer <nat:6177600> is a <def:eight-composite> positive integer . \end{theorem} \begin{proof} Note that $ <nat:11> $ , $ <nat:13> $ , $ <nat:2> $ , $ <nat:4> $ , $ <nat:12> $ , $ <nat:9> $ , $ <nat:5> $ and $ <nat:10> $ are more than or equal to <nat:2> . Also observe that moreover $ <nat:6177600> = <var:G> \cdot <var:z> \cdot <var:N> \cdot <var:J> \cdot <var:y> \cdot <var:R> \cdot <var:A> \cdot <var:U> $ produces $ <var:U> = <nat:5> $ , $ <var:A> = <nat:9> $ , $ <var:y> = <nat:12> $ , $ <var:J> = <nat:11> $ , $ <var:N> = <nat:10> $ , $ <var:z> = <nat:13> $ , $ <var:R> = <nat:4> $ , and $ <var:G> = <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:C> : nat ) := exists <var:R> <var:J> <var:U> <var:A> <var:G> <var:z> <var:N> <var:y> : nat , ( <var:z> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:C> = <var:z> * <var:y> * <var:J> * <var:U> * <var:N> * <var:A> * <var:G> * <var:R> ) . Theorem <genP:1> : <def:eight-composite> <nat:6177600> . Proof . unfold <def:eight-composite> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } exists <nat:4> . exists <nat:11> . exists <nat:5> . exists <nat:9> . exists <nat:2> . exists <nat:13> . exists <nat:10> . exists <nat:12> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 