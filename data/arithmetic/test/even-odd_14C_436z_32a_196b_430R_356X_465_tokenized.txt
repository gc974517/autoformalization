\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:C> \cdot <nat:14> + <var:X> \cdot <nat:356> + <var:a> \cdot <nat:32> + <var:b> \cdot <nat:196> + <var:z> \cdot <nat:436> + <var:R> \cdot <nat:430> + <nat:465> $ will be odd . \end{theorem} \begin{proof} It can be justified that that the summation $ <var:C> \times <nat:14> + <nat:356> \times <var:X> + <nat:32> \times <var:a> + <nat:430> \times <var:R> + <var:z> \times <nat:436> + <nat:196> \times <var:b> $ is guaranteed to be even . Notice the integers $ <nat:196> $ and $ <nat:430> $ must be even In addition to this , recall that the whole numbers $ <nat:14> $ , $ <nat:436> $ , plus $ <nat:32> $ are trivially even See that the positive integer $ <nat:356> $ is known to be an even number The formula $ <nat:14> \times <var:C> + <nat:436> \times <var:z> + <var:a> \times <nat:32> + <var:b> \times <nat:196> + <nat:430> \times <var:R> + <nat:356> \times <var:X> $ will be trivially even from the knowledge multiplying of even numbers in $ \mathbb{Z}^+ $ with an arbitrary natural number is an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:X> <var:a> <var:b> <var:z> <var:R> : nat , Nat . odd ( <nat:14> * <var:C> + <nat:356> * <var:X> + <nat:32> * <var:a> + <nat:196> * <var:b> + <nat:436> * <var:z> + <nat:430> * <var:R> + <nat:465> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:430> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:C> + <nat:356> * <var:X> + <nat:32> * <var:a> + <nat:196> * <var:b> + <nat:436> * <var:z> + <nat:430> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 