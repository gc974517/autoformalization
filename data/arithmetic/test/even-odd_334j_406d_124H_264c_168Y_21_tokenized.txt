\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For some whole numbers $ <var:d> $ , $ <var:Y> $ , $ <var:H> $ , $ <var:j> $ , and $ <var:c> $ $ <nat:21> + <var:j> <nat:334> + <var:c> <nat:264> + <nat:406> <var:d> + <var:H> <nat:124> + <var:Y> <nat:168> $ is odd . \end{theorem} \begin{proof} What's more , the integer $ <nat:334> $ is known to be even . Consequently , $ <var:j> \cdot <nat:334> $ is even too . Further , the number $ <nat:406> $ is known as an even number in $ \mathbb{Z}^+ $ . Accordingly , $ <nat:406> \cdot <var:d> $ is guaranteed to be even at the same time . On top of this , the integer $ <nat:124> $ is an even positive integer . Consequently , the pair $ <var:H> \cdot <nat:124> $ must be even as well . What's more , the leading term $ <nat:264> $ is known to be even . So , the pair $ <var:c> \cdot <nat:264> $ is even too . The term $ <var:Y> \cdot <nat:168> $ is known as an even positive integer . This claim must be true by reason that taking the product of an even element of $ \mathbb{Z}^+ $ and any element of $ \mathbb{N} $ will be itself an even element of $ \mathbb{Z}^+ $ . This is true as a consequence that the whole number $ <nat:168> $ is trivially even . See that $ <nat:21> $ is known to be an odd positive integer . It can be checked that the proposition holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:Y> <var:H> <var:j> <var:c> : nat , Nat . odd ( <nat:334> * <var:j> + <nat:264> * <var:c> + <nat:406> * <var:d> + <nat:124> * <var:H> + <nat:168> * <var:Y> + <nat:21> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:21> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 