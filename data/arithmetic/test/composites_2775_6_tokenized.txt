\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We define that $ <var:Y> $ is a <def:six-composite> number with the condition there exist $ <var:k> $ , $ <var:p> $ , $ <var:j> $ , $ <var:v> $ , $ <var:h> $ , $ <var:d> \in \mathbb{N} $ where $ <var:v> \times <var:j> \times <var:k> \times <var:h> \times <var:d> \times <var:p> = <var:Y> $ for $ <var:Y> \in \mathbb{N} $ and such that $ <var:j> $ , $ <var:k> $ , $ <var:h> $ , $ <var:d> $ , $ <var:p> $ , $ <var:v> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:49140> = <var:Y> $ is a <def:six-composite> natural number . \end{theorem} \begin{proof} Recall <nat:49140> is a <def:six-composite> positive integer only if <nat:49140> is the multiplication between $ <var:p> $ , $ <var:k> $ , $ <var:d> $ , $ <var:j> $ , $ <var:v> $ , $ <var:h> $ greater than or equal to <nat:2> . Notice $ <nat:10> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:13> $ , $ <nat:3> $ and $ <nat:9> \geq <nat:2> $ . Further observe moreover $ <var:p> \times <var:j> \times <var:v> \times <var:d> \times <var:k> \times <var:h> = <nat:49140> $ gives $ <var:d> = <nat:2> $ , $ <var:h> = <nat:13> $ , $ <var:j> = <nat:7> $ , $ <var:p> = <nat:3> $ , $ <var:k> = <nat:9> $ and $ <var:v> = <nat:10> $ . This shows the principle holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:Y> : nat ) := exists <var:k> <var:p> <var:j> <var:v> <var:h> <var:d> : nat , ( <var:v> * <var:j> * <var:k> * <var:h> * <var:d> * <var:p> = <var:Y> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:49140> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } exists <nat:9> . exists <nat:3> . exists <nat:7> . exists <nat:10> . exists <nat:13> . exists <nat:2> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 