\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist natural numbers $ <var:u> $ , $ <var:i> $ , $ <var:e> $ , $ <var:q> $ , $ <var:d> $ , $ <var:j> $ , $ <var:v> $ , $ <var:U> $ , $ <var:D> $ where $ <var:e> $ , $ <var:v> $ , $ <var:u> $ , $ <var:j> $ , $ <var:q> $ , $ <var:D> $ , $ <var:d> $ , $ <var:U> $ , and $ <var:i> \geq <nat:2> $ . Assume that some number $ <var:R> $ will be considered a <def:nine-composite> number when $ <var:q> \times <var:v> \times <var:j> \times <var:U> \times <var:i> \times <var:D> \times <var:d> \times <var:u> \times <var:e> = <var:R> $ . \end{definition} \begin{theorem} <nat:12355200> is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Take $ <var:q> = <nat:2> $ , $ <var:u> = <nat:13> $ , $ <var:i> = <nat:5> $ , $ <var:j> = <nat:12> $ , $ <var:D> = <nat:11> $ , $ <var:v> = <nat:10> $ , $ <var:U> = <nat:6> $ , $ <var:d> = <nat:4> $ , $ <var:e> = <nat:3> $ . We present $ <var:u> \times <var:v> \times <var:q> \times <var:i> \times <var:d> \times <var:e> \times <var:j> \times <var:D> \times <var:U> = <nat:12355200> $ . This yields our statement is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:R> : nat ) := exists <var:u> <var:i> <var:e> <var:q> <var:d> <var:j> <var:v> <var:U> <var:D> : nat , ( <var:e> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:q> * <var:v> * <var:j> * <var:U> * <var:i> * <var:D> * <var:d> * <var:u> * <var:e> = <var:R> ) . Theorem <genP:1> : <def:nine-composite> <nat:12355200> . Proof . unfold <def:nine-composite> . exists <nat:13> . exists <nat:5> . exists <nat:3> . exists <nat:2> . exists <nat:4> . exists <nat:12> . exists <nat:10> . exists <nat:6> . exists <nat:11> . repeat split . all : lia . Qed . 