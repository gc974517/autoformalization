\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:y> * <nat:132> + <nat:28> * <var:p> + <nat:362> * <var:N> + <nat:192> * <var:F> + <nat:60> * <var:L> + <var:I> * <nat:406> + <var:q> * <nat:84> + <nat:350> * <var:Y> + <nat:135> + <nat:158> * <var:A> + <nat:66> * <var:a> + <var:x> * <nat:8> $ is odd . \end{theorem} \begin{proof} See the pairs $ <nat:66> * <var:a> $ , $ <nat:132> * <var:y> $ , $ <var:q> * <nat:84> $ , $ <var:I> * <nat:406> $ , $ <nat:158> * <var:A> $ , $ <var:L> * <nat:60> $ , $ <nat:362> * <var:N> $ , $ <var:p> * <nat:28> $ , $ <nat:350> * <var:Y> $ , as well as $ <var:F> * <nat:192> $ are known to be even . Notice that the term $ <nat:8> * <var:x> $ is known to be an even number in $ \mathbb{Z}^+ $ because the product between an even number with a whole number will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:p> <var:N> <var:F> <var:L> <var:I> <var:q> <var:Y> <var:A> <var:a> <var:x> : nat , Nat . odd ( <nat:132> * <var:y> + <nat:28> * <var:p> + <nat:362> * <var:N> + <nat:192> * <var:F> + <nat:60> * <var:L> + <nat:406> * <var:I> + <nat:84> * <var:q> + <nat:350> * <var:Y> + <nat:158> * <var:A> + <nat:66> * <var:a> + <nat:8> * <var:x> + <nat:135> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:66> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 