\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever we have $ <var:a> = <var:V> \times <var:z> \times <var:O> \times <var:F> \times <var:u> \times <var:Z> $ for $ <var:a> \in \mathbb{Z}^+ $ plus where $ <var:Z> $ , $ <var:u> $ , $ <var:F> $ , $ <var:V> $ , $ <var:O> $ , $ <var:z> \geq <nat:2> $ assuming some $ <var:u> $ , $ <var:z> $ , $ <var:F> $ , $ <var:Z> $ , $ <var:V> $ , $ <var:O> \in \mathbb{N} $ , then we assume that $ <var:a> $ is a <def:six-composite> integer . Accordingly the positive integer <nat:480480> is a <def:six-composite> natural number . \end{theorem} \begin{proof} Recollect that <nat:480480> is a <def:six-composite> integer wherever <nat:480480> is the multiplication of whole numbers $ <var:z> $ , $ <var:F> $ , $ <var:O> $ , $ <var:u> $ , $ <var:V> $ , $ <var:Z> $ such that $ <var:z> $ , $ <var:Z> $ , $ <var:F> $ , $ <var:O> $ , $ <var:V> $ , $ <var:u> > <nat:1> $ . We demonstrate <nat:480480> is a <def:six-composite> positive integer . Notice that $ <nat:11> $ , $ <nat:13> $ , $ <nat:5> $ , $ <nat:12> $ , $ <nat:8> $ , $ <nat:7> $ are greater than <nat:1> . Similarly note also $ <var:V> \cdot <var:u> \cdot <var:z> \cdot <var:Z> \cdot <var:F> \cdot <var:O> = <nat:480480> = <nat:11> \cdot <nat:5> \cdot <nat:8> \cdot <nat:12> \cdot <nat:13> \cdot <nat:7> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:a> : nat ) := exists <var:u> <var:z> <var:F> <var:Z> <var:V> <var:O> : nat , ( <var:a> = <var:V> * <var:z> * <var:O> * <var:F> * <var:u> * <var:Z> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:480480> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } exists <nat:5> . exists <nat:8> . exists <nat:13> . exists <nat:12> . exists <nat:11> . exists <nat:7> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 