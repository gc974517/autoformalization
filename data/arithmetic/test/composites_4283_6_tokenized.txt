\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take as given that $ <var:U> $ is a <def:six-composite> number supposing taking some $ <var:q> $ , $ <var:T> $ , $ <var:r> $ , $ <var:v> $ , $ <var:E> $ , $ <var:n> \in \mathbb{Z}^+ $ we have $ <var:q> $ , $ <var:r> $ , $ <var:v> $ , $ <var:E> $ , $ <var:T> $ , and $ <var:n> \geq <nat:2> $ plus using some $ <var:U> $ , $ <var:U> = <var:r> \cdot <var:n> \cdot <var:v> \cdot <var:q> \cdot <var:T> \cdot <var:E> $ . \end{definition} \begin{theorem} The whole number <nat:16200> is a <def:six-composite> natural number . \end{theorem} \begin{proof} Remember that a <def:six-composite> integer is the product of natural numbers $ <var:q> $ , $ <var:v> $ , $ <var:E> $ , $ <var:T> $ , $ <var:n> $ , $ <var:r> $ more than or equal to <nat:2> . Assume $ <var:T> = <nat:10> $ , $ <var:E> = <nat:5> $ , $ <var:q> = <nat:2> $ , $ <var:r> = <nat:6> $ , $ <var:v> = <nat:9> $ , $ <var:n> = <nat:3> $ . Observe $ <var:r> = <nat:6> $ , $ <var:T> = <nat:10> $ , $ <var:q> = <nat:2> $ , $ <var:E> = <nat:5> $ , $ <var:n> = <nat:3> $ , $ <var:v> = <nat:9> $ are greater than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:U> : nat ) := exists <var:q> <var:T> <var:r> <var:v> <var:E> <var:n> : nat , ( <var:q> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:U> = <var:r> * <var:n> * <var:v> * <var:q> * <var:T> * <var:E> ) . Theorem <genP:1> : <def:six-composite> <nat:16200> . Proof . unfold <def:six-composite> . exists <nat:2> . exists <nat:10> . exists <nat:6> . exists <nat:9> . exists <nat:5> . exists <nat:3> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 