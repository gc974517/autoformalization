\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:270> * <var:f> + <nat:273> + <var:Z> * <nat:434> + <var:G> * <nat:150> + <var:P> * <nat:216> $ must be odd . \end{theorem} \begin{proof} Notice that the summing between an even natural with an odd natural will be odd . We apply the assumption the understanding the formula $ <nat:273> + <var:f> \cdot <nat:270> + <nat:150> \cdot <var:G> + <nat:434> \cdot <var:Z> + <nat:216> \cdot <var:P> $ is trivially odd from the knowledge $ <nat:270> <var:f> + <var:G> <nat:150> + <nat:434> <var:Z> + <nat:216> <var:P> $ is guaranteed to be even , from the knowledge the adding of even integers concurrently and an even element of $ \mathbb{Z}^+ $ is even . The leading terms $ <nat:150> $ , $ <nat:270> $ , additionally $ <nat:216> $ must be even . Thus , the terms $ <nat:150> \cdot <var:G> $ , $ <nat:270> \cdot <var:f> $ , additionally $ <var:P> \cdot <nat:216> $ must be even also . Furthermore , notice that the number $ <nat:434> $ is even . For this reason , the product $ <var:Z> \cdot <nat:434> $ is even too . and also from the fact taking the product of an even integer and a number in $ \mathbb{Z}^+ $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:Z> <var:G> <var:P> : nat , Nat . odd ( <nat:270> * <var:f> + <nat:434> * <var:Z> + <nat:150> * <var:G> + <nat:216> * <var:P> + <nat:273> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:216> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:216> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:434> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:f> + <nat:434> * <var:Z> + <nat:150> * <var:G> + <nat:216> * <var:P> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 