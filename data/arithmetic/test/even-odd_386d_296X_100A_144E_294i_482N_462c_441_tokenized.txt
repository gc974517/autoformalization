\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:294> <var:i> + <var:c> <nat:462> + <nat:144> <var:E> + <nat:296> <var:X> + <nat:441> + <var:d> <nat:386> + <var:A> <nat:100> + <nat:482> <var:N> $ is odd assuming any terms $ <var:E> $ , $ <var:A> $ , $ <var:N> $ , $ <var:c> $ , $ <var:i> $ , $ <var:X> $ , and $ <var:d> $ . \end{theorem} \begin{proof} The totaling between even elements of $ \mathbb{N} $ collectively with an odd element of $ \mathbb{Z}^+ $ will be odd . In consequence , the expression $ <nat:386> <var:d> + <nat:441> + <var:X> <nat:296> + <nat:100> <var:A> + <nat:144> <var:E> + <var:i> <nat:294> + <nat:482> <var:N> + <nat:462> <var:c> $ clearly must be odd . Remember $ <nat:441> $ is obviously an odd positive integer . We know the positive integers $ <nat:386> $ , $ <nat:296> $ , $ <nat:100> $ , $ <nat:144> $ , $ <nat:294> $ , $ <nat:482> $ , and also $ <nat:462> $ must be even natural numbers . As a consequence , the products $ <nat:386> \times <var:d> $ , $ <nat:296> \times <var:X> $ , $ <nat:100> \times <var:A> $ , $ <var:E> \times <nat:144> $ , $ <nat:294> \times <var:i> $ , $ <var:N> \times <nat:482> $ , and moreover $ <nat:462> \times <var:c> $ will be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:A> <var:N> <var:c> <var:i> <var:X> <var:d> : nat , Nat . odd ( <nat:294> * <var:i> + <nat:462> * <var:c> + <nat:144> * <var:E> + <nat:296> * <var:X> + <nat:386> * <var:d> + <nat:100> * <var:A> + <nat:482> * <var:N> + <nat:441> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:441> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 