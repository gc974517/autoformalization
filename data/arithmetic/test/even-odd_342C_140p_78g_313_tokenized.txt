\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:p> <nat:140> + <var:C> <nat:342> + <var:g> <nat:78> + <nat:313> $ is guaranteed to be odd with some $ <var:C> $ , $ <var:p> $ , and $ <var:g> $ . \end{theorem} \begin{proof} We justify the expression $ <var:p> \cdot <nat:140> + <nat:313> + <nat:78> \cdot <var:g> + <var:C> \cdot <nat:342> $ will be odd . We apply the assumption that the formula $ <nat:313> + <nat:140> * <var:p> + <var:g> * <nat:78> + <var:C> * <nat:342> $ is known as odd because $ <var:C> \times <nat:342> + <nat:140> \times <var:p> + <nat:78> \times <var:g> $ is guaranteed to be even . See that the products $ <var:C> * <nat:342> $ additionally $ <var:g> * <nat:78> $ are trivially even . This fact is true because multiplying between an even whole number and any positive integer will be an even number in $ \mathbb{Z}^+ $ . Adding on , remember the term $ <var:p> * <nat:140> $ is obviously even . Because the summation of even natural numbers and an even element of $ \mathbb{Z}^+ $ will be by itself an even integer , in addition to from the knowledge taking the product of even positive integers and some whole number must be in itself an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:p> <var:g> : nat , Nat . odd ( <nat:140> * <var:p> + <nat:342> * <var:C> + <nat:78> * <var:g> + <nat:313> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:342> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:p> + <nat:342> * <var:C> + <nat:78> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 