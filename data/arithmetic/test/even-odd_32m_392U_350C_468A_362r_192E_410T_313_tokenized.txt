\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:32> <var:m> + <nat:313> + <var:U> <nat:392> + <var:C> <nat:350> + <nat:468> <var:A> + <var:r> <nat:362> + <nat:192> <var:E> + <nat:410> <var:T> $ is guaranteed to be odd given every $ <var:E> $ , $ <var:r> $ , $ <var:U> $ , $ <var:T> $ , $ <var:A> $ , $ <var:C> $ , and $ <var:m> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} In addition , recall that the leading terms $ <nat:32> $ , $ <nat:392> $ , $ <nat:350> $ , $ <nat:468> $ , $ <nat:362> $ , $ <nat:192> $ , and $ <nat:410> $ are known as even positive integers . Accordingly , the terms $ <nat:32> * <var:m> $ , $ <var:U> * <nat:392> $ , $ <var:C> * <nat:350> $ , $ <nat:468> * <var:A> $ , $ <var:r> * <nat:362> $ , $ <nat:192> * <var:E> $ , and likewise $ <nat:410> * <var:T> $ is even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:r> <var:U> <var:T> <var:A> <var:C> <var:m> : nat , Nat . odd ( <nat:32> * <var:m> + <nat:392> * <var:U> + <nat:350> * <var:C> + <nat:468> * <var:A> + <nat:362> * <var:r> + <nat:192> * <var:E> + <nat:410> * <var:T> + <nat:313> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even <nat:392> = true ) . { auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:362> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 