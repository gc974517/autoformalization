\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:296> * <var:n> + <nat:28> * <var:c> + <nat:334> * <var:J> + <nat:219> + <var:j> * <nat:352> + <nat:206> * <var:t> + <nat:348> * <var:b> + <nat:106> * <var:Y> + <var:U> * <nat:266> + <nat:46> * <var:I> + <var:q> * <nat:466> $ is odd . \end{theorem} \begin{proof} Notice $ <nat:219> $ is odd . We verify the summation $ <var:c> * <nat:28> + <var:J> * <nat:334> + <nat:348> * <var:b> + <nat:206> * <var:t> + <var:j> * <nat:352> + <nat:219> + <nat:266> * <var:U> + <var:q> * <nat:466> + <nat:106> * <var:Y> + <nat:46> * <var:I> + <nat:296> * <var:n> $ is odd . We make use the understanding $ <nat:352> \cdot <var:j> + <var:t> \cdot <nat:206> + <nat:28> \cdot <var:c> + <nat:334> \cdot <var:J> + <nat:296> \cdot <var:n> + <nat:266> \cdot <var:U> + <nat:106> \cdot <var:Y> + <var:q> \cdot <nat:466> + <var:b> \cdot <nat:348> + <var:I> \cdot <nat:46> $ is known to be even . What's more , notice that the coefficients $ <nat:352> $ , $ <nat:206> $ , $ <nat:28> $ , $ <nat:334> $ , $ <nat:296> $ , $ <nat:266> $ , $ <nat:106> $ , $ <nat:466> $ , $ <nat:348> $ , and $ <nat:46> $ must be even . As a consequence , the products $ <nat:352> <var:j> $ , $ <var:t> <nat:206> $ , $ <nat:28> <var:c> $ , $ <var:J> <nat:334> $ , $ <var:n> <nat:296> $ , $ <var:U> <nat:266> $ , $ <nat:106> <var:Y> $ , $ <var:q> <nat:466> $ , $ <var:b> <nat:348> $ , and $ <var:I> <nat:46> $ must be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:c> <var:J> <var:j> <var:t> <var:b> <var:Y> <var:U> <var:I> <var:q> : nat , Nat . odd ( <nat:296> * <var:n> + <nat:28> * <var:c> + <nat:334> * <var:J> + <nat:352> * <var:j> + <nat:206> * <var:t> + <nat:348> * <var:b> + <nat:106> * <var:Y> + <nat:266> * <var:U> + <nat:46> * <var:I> + <nat:466> * <var:q> + <nat:219> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:219> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:206> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:206> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:n> + <nat:28> * <var:c> + <nat:334> * <var:J> + <nat:352> * <var:j> + <nat:206> * <var:t> + <nat:348> * <var:b> + <nat:106> * <var:Y> + <nat:266> * <var:U> + <nat:46> * <var:I> + <nat:466> * <var:q> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 