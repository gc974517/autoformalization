\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:z> * <nat:46> + <nat:226> * <var:q> + <var:L> * <nat:302> + <nat:199> $ is guaranteed to be odd . \end{theorem} \begin{proof} The sum $ <var:q> \cdot <nat:226> + <var:z> \cdot <nat:46> + <nat:302> \cdot <var:L> $ is guaranteed to be even , because the summation of even positive integers collectively and an even positive integer is even . Adding on , the product $ <nat:46> \times <var:z> $ is even as a consequence that the integer $ <nat:46> $ is obviously even . Likewise , the natural number $ <nat:226> $ is obviously even . Accordingly , the product $ <nat:226> \times <var:q> $ will be even also . $ <var:L> \times <nat:302> $ is clearly an even number . This fact is proven because the product between an even natural number and a element of $ \mathbb{N} $ is even . This claim holds from the fact the positive integer $ <nat:302> $ is an even positive integer . The totaling of even elements of $ \mathbb{N} $ concurrently with an odd whole number must be an odd number in $ \mathbb{N} $ . We know that $ <nat:199> $ is known as an odd natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:q> <var:L> : nat , Nat . odd ( <nat:46> * <var:z> + <nat:226> * <var:q> + <nat:302> * <var:L> + <nat:199> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:302> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:302> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:z> + <nat:226> * <var:q> + <nat:302> * <var:L> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:199> = true ) . { auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 