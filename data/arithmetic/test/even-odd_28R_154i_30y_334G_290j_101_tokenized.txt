\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:j> \cdot <nat:290> + <nat:334> \cdot <var:G> + <var:i> \cdot <nat:154> + <nat:30> \cdot <var:y> + <nat:28> \cdot <var:R> + <nat:101> $ must be odd . \end{theorem} \begin{proof} It can be verified that $ <var:i> \times <nat:154> + <var:j> \times <nat:290> + <var:R> \times <nat:28> + <nat:101> + <var:y> \times <nat:30> + <nat:334> \times <var:G> $ is known as odd from the fact the formula $ <var:R> \times <nat:28> + <nat:154> \times <var:i> + <var:y> \times <nat:30> + <nat:334> \times <var:G> + <var:j> \times <nat:290> $ is obviously even . The terms $ <var:R> \times <nat:28> $ , $ <nat:154> \times <var:i> $ , $ <var:y> \times <nat:30> $ , $ <nat:334> \times <var:G> $ , $ <nat:290> \times <var:j> $ , must be even naturals . This claim holds as a consequence that the coefficients $ <nat:28> $ , $ <nat:154> $ , $ <nat:30> $ , $ <nat:334> $ , $ <nat:290> $ , will be instrinsically even numbers . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:j> <var:G> <var:i> <var:y> <var:R> : nat , Nat . odd ( <nat:290> * <var:j> + <nat:334> * <var:G> + <nat:154> * <var:i> + <nat:30> * <var:y> + <nat:28> * <var:R> + <nat:101> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:290> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:j> + <nat:334> * <var:G> + <nat:154> * <var:i> + <nat:30> * <var:y> + <nat:28> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 