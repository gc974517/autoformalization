\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:108> \times <var:S> + <var:J> \times <nat:464> + <nat:463> + <var:x> \times <nat:24> + <nat:318> \times <var:E> + <nat:198> \times <var:Z> + <nat:10> \times <var:I> + <var:K> \times <nat:192> + <var:H> \times <nat:118> + <nat:250> \times <var:z> + <var:B> \times <nat:454> $ is odd given positive integers $ <var:H> $ , $ <var:x> $ , $ <var:S> $ , $ <var:I> $ , $ <var:E> $ , $ <var:J> $ , $ <var:K> $ , $ <var:Z> $ , $ <var:z> $ , and $ <var:B> $ . \end{theorem} \begin{proof} The summing of an even whole number and an odd number is guaranteed to be odd . The integers $ <nat:118> $ , $ <nat:454> $ , plus $ <nat:198> $ are clearly even The coefficients $ <nat:24> $ , $ <nat:464> $ , $ <nat:10> $ , $ <nat:250> $ , $ <nat:192> $ , in addition to $ <nat:108> $ are known as even integers We know the number $ <nat:318> $ is known as an even number in $ \mathbb{N} $ Observe multiplying between an even natural and an arbitrary number in $ \mathbb{N} $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:x> <var:S> <var:I> <var:E> <var:J> <var:K> <var:Z> <var:z> <var:B> : nat , Nat . odd ( <nat:108> * <var:S> + <nat:464> * <var:J> + <nat:24> * <var:x> + <nat:318> * <var:E> + <nat:198> * <var:Z> + <nat:10> * <var:I> + <nat:192> * <var:K> + <nat:118> * <var:H> + <nat:250> * <var:z> + <nat:454> * <var:B> + <nat:463> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:108> = true ) . { auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 