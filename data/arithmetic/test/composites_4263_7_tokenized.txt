\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume that $ <var:k> $ is a <def:seven-composite> whole number with the condition that $ \exists <var:q> $ , $ <var:r> $ , $ <var:a> $ , $ <var:U> $ , $ <var:c> $ , $ <var:Y> $ , $ <var:N> \in \mathbb{N} $ so that $ <var:k> = <var:c> * <var:U> * <var:N> * <var:r> * <var:Y> * <var:q> * <var:a> $ given some whole number $ <var:k> $ as well as satisfying the condition that $ <var:N> $ , $ <var:r> $ , $ <var:Y> $ , $ <var:a> $ , $ <var:c> $ , $ <var:q> $ and $ <var:U> \geq <nat:2> $ . So <nat:1497600> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Assume $ <var:q> = <nat:5> $ , $ <var:Y> = <nat:8> $ , $ <var:a> = <nat:10> $ , $ <var:r> = <nat:13> $ , $ <var:N> = <nat:12> $ , $ <var:c> = <nat:6> $ , $ <var:U> = <nat:4> $ . Note that $ <nat:13> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:10> $ , $ <nat:8> $ and $ <nat:12> > <nat:1> $ . Additionally note as well $ <var:Y> \times <var:N> \times <var:c> \times <var:r> \times <var:q> \times <var:U> \times <var:a> = <nat:1497600> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:k> : nat ) := exists <var:q> <var:r> <var:a> <var:U> <var:c> <var:Y> <var:N> : nat , ( <var:k> = <var:c> * <var:U> * <var:N> * <var:r> * <var:Y> * <var:q> * <var:a> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:1497600> . Proof . unfold <def:seven-composite> . exists <nat:5> . exists <nat:13> . exists <nat:10> . exists <nat:4> . exists <nat:6> . exists <nat:8> . exists <nat:12> . assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 