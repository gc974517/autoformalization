\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:B> $ , $ <var:x> $ , $ <var:q> $ , $ <var:r> $ , $ <var:V> $ , $ <var:k> \in \mathbb{N} $ greater than or equivalent to <nat:2> . We claim that some positive integer $ <var:T> $ will be considered to be a <def:six-composite> integer assuming $ <var:k> \times <var:x> \times <var:B> \times <var:r> \times <var:q> \times <var:V> = <var:T> $ . \end{definition} \begin{theorem} The integer <nat:308880> is <def:six-composite> . \end{theorem} \begin{proof} Recall a <def:six-composite> natural number is the multiplication between integers $ <var:V> $ , $ <var:r> $ , $ <var:q> $ , $ <var:k> $ , $ <var:B> $ , $ <var:x> $ where $ <var:V> $ , $ <var:r> $ , $ <var:k> $ , $ <var:x> $ , $ <var:B> $ , and $ <var:q> \geq <nat:2> $ . Let $ <var:B> = <nat:6> $ , $ <var:r> = <nat:12> $ , $ <var:q> = <nat:10> $ , $ <var:k> = <nat:3> $ , $ <var:V> = <nat:13> $ , and $ <var:x> = <nat:11> $ . Note $ <var:V> = <nat:13> $ , $ <var:k> = <nat:3> $ , $ <var:r> = <nat:12> $ , $ <var:q> = <nat:10> $ , $ <var:x> = <nat:11> $ , and $ <var:B> = <nat:6> \geq <nat:2> $ . Moreover notice likewise $ <nat:308880> = <var:q> * <var:B> * <var:V> * <var:x> * <var:k> * <var:r> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:T> : nat ) := exists <var:B> <var:x> <var:q> <var:r> <var:V> <var:k> : nat , ( <var:B> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:k> * <var:x> * <var:B> * <var:r> * <var:q> * <var:V> = <var:T> ) . Theorem <genP:1> : <def:six-composite> <nat:308880> . Proof . unfold <def:six-composite> . exists <nat:6> . exists <nat:11> . exists <nat:10> . exists <nat:12> . exists <nat:13> . exists <nat:3> . assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 