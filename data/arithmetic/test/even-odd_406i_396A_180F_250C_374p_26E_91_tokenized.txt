\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:F> * <nat:180> + <var:E> * <nat:26> + <nat:406> * <var:i> + <nat:374> * <var:p> + <nat:250> * <var:C> + <nat:91> + <var:A> * <nat:396> $ must be odd for whole numbers $ <var:p> $ , $ <var:E> $ , $ <var:C> $ , $ <var:i> $ , $ <var:F> $ , and $ <var:A> $ . \end{theorem} \begin{proof} $ <var:i> <nat:406> $ is an even number from the fact the positive integer $ <nat:406> $ is guaranteed to be an even whole number . Further , recall that the term $ <var:A> <nat:396> $ is obviously even . This is proven from the knowledge the positive integer $ <nat:396> $ is guaranteed to be even . See the natural number $ <nat:180> $ is guaranteed to be even . Therefore , the term $ <var:F> <nat:180> $ is even as well . Adding on , the pair $ <nat:250> <var:C> $ is known as even from the knowledge the natural number $ <nat:250> $ is known to be even . The pair $ <var:p> <nat:374> $ is known to be even since the positive integer $ <nat:374> $ is known to be even . Take note that the pair $ <var:E> <nat:26> $ is trivially an even natural as a consequence that multiplying between an even number and any natural number will be even in addition to the whole number $ <nat:26> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:E> <var:C> <var:i> <var:F> <var:A> : nat , Nat . odd ( <nat:180> * <var:F> + <nat:26> * <var:E> + <nat:406> * <var:i> + <nat:374> * <var:p> + <nat:250> * <var:C> + <nat:396> * <var:A> + <nat:91> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:396> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:396> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:180> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:374> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:374> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 