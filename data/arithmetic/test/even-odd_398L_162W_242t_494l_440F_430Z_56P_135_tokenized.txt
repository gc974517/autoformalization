\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:135> + <nat:494> \times <var:l> + <nat:242> \times <var:t> + <nat:440> \times <var:F> + <var:Z> \times <nat:430> + <nat:162> \times <var:W> + <nat:398> \times <var:L> + <nat:56> \times <var:P> $ will be odd . \end{theorem} \begin{proof} It can be justified that the sum $ <nat:398> \cdot <var:L> + <nat:162> \cdot <var:W> + <var:t> \cdot <nat:242> + <var:l> \cdot <nat:494> + <nat:440> \cdot <var:F> + <nat:430> \cdot <var:Z> + <var:P> \cdot <nat:56> $ is known as even . The products $ <var:P> * <nat:56> $ , $ <nat:430> * <var:Z> $ , $ <nat:162> * <var:W> $ , $ <var:l> * <nat:494> $ , $ <var:L> * <nat:398> $ , and $ <var:F> * <nat:440> $ will be even . Recall the term $ <var:t> * <nat:242> $ is obviously an even element of $ \mathbb{N} $ . Our claim is true from the knowledge the addition between an even natural number with an even whole number is in itself an even element of $ \mathbb{N} $ and moreover as a consequence that the product of an even number in $ \mathbb{N} $ and an arbitrary integer is by definition an even natural . The summing between even naturals together and an odd whole number is guaranteed to be instrinsically an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:t> <var:F> <var:Z> <var:W> <var:L> <var:P> : nat , Nat . odd ( <nat:494> * <var:l> + <nat:242> * <var:t> + <nat:440> * <var:F> + <nat:430> * <var:Z> + <nat:162> * <var:W> + <nat:398> * <var:L> + <nat:56> * <var:P> + <nat:135> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:56> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:398> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:l> + <nat:242> * <var:t> + <nat:440> * <var:F> + <nat:430> * <var:Z> + <nat:162> * <var:W> + <nat:398> * <var:L> + <nat:56> * <var:P> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 