\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Whenever there exist $ <var:D> $ , $ <var:h> $ , $ <var:j> $ , $ <var:e> $ , $ <var:E> $ , $ <var:g> \in \mathbb{Z}^+ $ then say that some number $ <var:d> $ is considered to be a <def:six-composite> number given $ <var:d> = <var:g> * <var:D> * <var:E> * <var:j> * <var:h> * <var:e> $ and unique terms are larger than <nat:1> . \end{definition} \begin{theorem} $ <nat:33696> = <var:d> $ is a <def:six-composite> integer . \end{theorem} \begin{proof} We prove our thesis is valid for $ <nat:4> $ , $ <nat:12> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:2> $ , and $ <nat:13> > <nat:1> $ plus for $ <nat:33696> = <var:g> \cdot <var:e> \cdot <var:D> \cdot <var:E> \cdot <var:j> \cdot <var:h> $ hints $ <var:g> = <nat:9> $ , $ <var:D> = <nat:4> $ , $ <var:E> = <nat:2> $ , $ <var:e> = <nat:3> $ , $ <var:h> = <nat:13> $ and $ <var:j> = <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:d> : nat ) := exists <var:D> <var:h> <var:j> <var:e> <var:E> <var:g> : nat , ( <var:d> = <var:g> * <var:D> * <var:E> * <var:j> * <var:h> * <var:e> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:g> > <nat:1> ) . Theorem <genP:1> : <def:six-composite> <nat:33696> . Proof . unfold <def:six-composite> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } exists <nat:4> . exists <nat:13> . exists <nat:12> . exists <nat:3> . exists <nat:2> . exists <nat:9> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 