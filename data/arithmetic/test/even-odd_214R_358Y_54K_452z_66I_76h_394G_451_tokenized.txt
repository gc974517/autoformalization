\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> * <nat:54> + <nat:452> * <var:z> + <nat:451> + <var:h> * <nat:76> + <nat:394> * <var:G> + <nat:214> * <var:R> + <var:Y> * <nat:358> + <var:I> * <nat:66> $ is odd . \end{theorem} \begin{proof} This proposition must be true because $ <nat:76> \times <var:h> + <nat:394> \times <var:G> + <var:K> \times <nat:54> + <nat:214> \times <var:R> + <var:Y> \times <nat:358> + <nat:452> \times <var:z> + <var:I> \times <nat:66> $ is guaranteed to be even . Observe that the pairs $ <nat:66> * <var:I> $ , $ <nat:452> * <var:z> $ , $ <var:R> * <nat:214> $ , $ <nat:76> * <var:h> $ , $ <var:K> * <nat:54> $ , as well as $ <nat:358> * <var:Y> $ are known as even naturals . The term $ <var:G> * <nat:394> $ is known to be even . From the fact the adding between even positive integers and even elements of $ \mathbb{N} $ is guaranteed to be instrinsically an even number in $ \mathbb{Z}^+ $ , in addition to because the product of an even number in $ \mathbb{Z}^+ $ and an arbitrary integer is guaranteed to be even . It can be justified that the expression $ <nat:451> + <nat:214> \cdot <var:R> + <var:Y> \cdot <nat:358> + <var:K> \cdot <nat:54> + <nat:452> \cdot <var:z> + <var:I> \cdot <nat:66> + <nat:76> \cdot <var:h> + <var:G> \cdot <nat:394> $ is guaranteed to be odd . Recall $ <nat:451> $ is clearly odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:z> <var:h> <var:G> <var:R> <var:Y> <var:I> : nat , Nat . odd ( <nat:54> * <var:K> + <nat:452> * <var:z> + <nat:76> * <var:h> + <nat:394> * <var:G> + <nat:214> * <var:R> + <nat:358> * <var:Y> + <nat:66> * <var:I> + <nat:451> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:66> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:K> + <nat:452> * <var:z> + <nat:76> * <var:h> + <nat:394> * <var:G> + <nat:214> * <var:R> + <nat:358> * <var:Y> + <nat:66> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:451> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 