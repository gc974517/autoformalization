\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With some natural numbers $ <var:z> $ , $ <var:i> $ , $ <var:F> $ , $ <var:g> $ , $ <var:V> $ , $ <var:L> $ , $ <var:e> $ , $ <var:l> $ , $ <var:W> $ , $ <var:b> $ , and $ <var:Y> $ $ <nat:48> + <nat:468> \cdot <var:b> + <nat:144> \cdot <var:W> + <var:i> \cdot <nat:30> + <nat:186> \cdot <var:F> + <var:g> \cdot <nat:116> + <var:L> \cdot <nat:328> + <var:l> \cdot <nat:14> + <nat:330> \cdot <var:V> + <nat:418> \cdot <var:z> + <nat:492> \cdot <var:Y> + <nat:152> \cdot <var:e> $ is guaranteed to be even . \end{theorem} \begin{proof} The coefficients $ <nat:418> $ , $ <nat:116> $ , $ <nat:30> $ , $ <nat:330> $ , $ <nat:14> $ , $ <nat:144> $ , $ <nat:468> $ , $ <nat:492> $ , $ <nat:186> $ , and moreover $ <nat:152> $ will be even positive integers . As a consequence , the pairs $ <var:z> <nat:418> $ , $ <nat:116> <var:g> $ , $ <var:i> <nat:30> $ , $ <nat:330> <var:V> $ , $ <var:l> <nat:14> $ , $ <nat:144> <var:W> $ , $ <nat:468> <var:b> $ , $ <var:Y> <nat:492> $ , $ <nat:186> <var:F> $ , as well as $ <var:e> <nat:152> $ is guaranteed to be even also . Recall that the term $ <var:L> <nat:328> $ is obviously an even number in $ \mathbb{N} $ . This fact holds since the multiplication between an even number in $ \mathbb{N} $ and some natural number will be even in addition to the coefficient $ <nat:328> $ is obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:i> <var:F> <var:g> <var:V> <var:L> <var:e> <var:l> <var:W> <var:b> <var:Y> : nat , Nat . even ( <nat:468> * <var:b> + <nat:144> * <var:W> + <nat:30> * <var:i> + <nat:186> * <var:F> + <nat:116> * <var:g> + <nat:328> * <var:L> + <nat:14> * <var:l> + <nat:330> * <var:V> + <nat:418> * <var:z> + <nat:492> * <var:Y> + <nat:152> * <var:e> + <nat:48> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even <nat:152> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:152> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 