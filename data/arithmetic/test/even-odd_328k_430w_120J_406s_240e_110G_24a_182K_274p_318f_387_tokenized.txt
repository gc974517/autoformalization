\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:120> * <var:J> + <nat:406> * <var:s> + <nat:24> * <var:a> + <nat:328> * <var:k> + <nat:387> + <nat:240> * <var:e> + <nat:110> * <var:G> + <nat:182> * <var:K> + <nat:318> * <var:f> + <nat:430> * <var:w> + <var:p> * <nat:274> $ will be odd using every unknowns $ <var:G> $ , $ <var:J> $ , $ <var:p> $ , $ <var:K> $ , $ <var:a> $ , $ <var:e> $ , $ <var:k> $ , $ <var:s> $ , $ <var:w> $ , and $ <var:f> $ . \end{theorem} \begin{proof} It can be shown that this theorem must be true . Observe that $ <nat:387> $ is clearly odd . See the expression $ <nat:274> <var:p> + <var:J> <nat:120> + <var:f> <nat:318> + <var:k> <nat:328> + <nat:430> <var:w> + <nat:240> <var:e> + <var:s> <nat:406> + <var:K> <nat:182> + <var:a> <nat:24> + <nat:110> <var:G> $ is obviously even . Further , the pairs $ <var:p> <nat:274> $ , $ <var:J> <nat:120> $ , $ <nat:318> <var:f> $ , $ <var:k> <nat:328> $ , $ <nat:430> <var:w> $ , $ <var:e> <nat:240> $ , $ <nat:406> <var:s> $ , $ <nat:182> <var:K> $ , $ <nat:24> <var:a> $ , $ <var:G> <nat:110> $ , will be even . This claim holds since the numbers $ <nat:274> $ , $ <nat:120> $ , $ <nat:318> $ , $ <nat:328> $ , $ <nat:430> $ , $ <nat:240> $ , $ <nat:406> $ , $ <nat:182> $ , $ <nat:24> $ , $ <nat:110> $ , are known as even elements of $ \mathbb{Z}^+ $ . Because multiplying of an even integer and a number in $ \mathbb{N} $ is even the formula $ <var:k> \times <nat:328> + <var:w> \times <nat:430> + <nat:120> \times <var:J> + <var:s> \times <nat:406> + <nat:240> \times <var:e> + <nat:110> \times <var:G> + <var:a> \times <nat:24> + <nat:182> \times <var:K> + <var:p> \times <nat:274> + <nat:318> \times <var:f> $ is guaranteed to be fundamentally even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:J> <var:p> <var:K> <var:a> <var:e> <var:k> <var:s> <var:w> <var:f> : nat , Nat . odd ( <nat:120> * <var:J> + <nat:406> * <var:s> + <nat:24> * <var:a> + <nat:328> * <var:k> + <nat:240> * <var:e> + <nat:110> * <var:G> + <nat:182> * <var:K> + <nat:318> * <var:f> + <nat:430> * <var:w> + <nat:274> * <var:p> + <nat:387> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:387> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even <nat:430> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:J> + <nat:406> * <var:s> + <nat:24> * <var:a> + <nat:328> * <var:k> + <nat:240> * <var:e> + <nat:110> * <var:G> + <nat:182> * <var:K> + <nat:318> * <var:f> + <nat:430> * <var:w> + <nat:274> * <var:p> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 