\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:486> \times <var:S> + <nat:188> \times <var:d> + <nat:362> \times <var:y> + <var:x> \times <nat:56> + <var:L> \times <nat:470> + <nat:218> \times <var:Z> + <nat:489> + <nat:52> \times <var:a> + <var:k> \times <nat:276> + <var:E> \times <nat:458> $ is odd . \end{theorem} \begin{proof} What's more , the whole numbers $ <nat:486> $ , $ <nat:188> $ , $ <nat:362> $ , $ <nat:56> $ , $ <nat:470> $ , $ <nat:218> $ , $ <nat:52> $ , $ <nat:276> $ , plus $ <nat:458> $ are even . Thus , the pairs $ <nat:486> \times <var:S> $ , $ <var:d> \times <nat:188> $ , $ <var:y> \times <nat:362> $ , $ <nat:56> \times <var:x> $ , $ <var:L> \times <nat:470> $ , $ <nat:218> \times <var:Z> $ , $ <var:a> \times <nat:52> $ , $ <var:k> \times <nat:276> $ , and also $ <var:E> \times <nat:458> $ is guaranteed to be even as well . We check the summation $ <nat:362> <var:y> + <var:Z> <nat:218> + <var:E> <nat:458> + <var:L> <nat:470> + <var:k> <nat:276> + <var:S> <nat:486> + <var:x> <nat:56> + <var:d> <nat:188> + <nat:489> + <nat:52> <var:a> $ will be odd . Notice that $ <nat:489> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:S> <var:d> <var:y> <var:x> <var:L> <var:Z> <var:a> <var:k> <var:E> : nat , Nat . odd ( <nat:486> * <var:S> + <nat:188> * <var:d> + <nat:362> * <var:y> + <nat:56> * <var:x> + <nat:470> * <var:L> + <nat:218> * <var:Z> + <nat:52> * <var:a> + <nat:276> * <var:k> + <nat:458> * <var:E> + <nat:489> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even <nat:188> = true ) . { auto . } assert ( <genH> : Nat . even <nat:362> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:470> = true ) . { auto . } assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:470> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:489> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 