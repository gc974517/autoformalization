\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Define that $ <var:X> $ is a <def:seven-composite> whole number iff there are some whole numbers $ <var:s> $ , $ <var:k> $ , $ <var:H> $ , $ <var:q> $ , $ <var:P> $ , $ <var:i> $ , $ <var:j> $ such that $ <var:P> $ , $ <var:s> $ , $ <var:H> $ , $ <var:j> $ , $ <var:i> $ , $ <var:q> $ , $ <var:k> \geq <nat:2> $ as well as for some whole number $ <var:X> $ , $ <var:k> \cdot <var:P> \cdot <var:s> \cdot <var:H> \cdot <var:q> \cdot <var:j> \cdot <var:i> = <var:X> $ . Hence $ <nat:79200> = <var:X> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Remember <nat:79200> is <def:seven-composite> supposing that <nat:79200> is the multiplication between $ <var:q> $ , $ <var:k> $ , $ <var:P> $ , $ <var:H> $ , $ <var:j> $ , $ <var:s> $ and $ <var:i> $ greater than or equivalent to <nat:2> . Notice $ <nat:5> \times <nat:6> \times <nat:3> \times <nat:10> \times <nat:11> \times <nat:4> \times <nat:2> = <nat:79200> $ . Plus observe $ <nat:5> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:4> $ , and $ <nat:11> $ are more than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:X> : nat ) := exists <var:s> <var:k> <var:H> <var:q> <var:P> <var:i> <var:j> : nat , ( <var:P> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:k> * <var:P> * <var:s> * <var:H> * <var:q> * <var:j> * <var:i> = <var:X> ) . Theorem <genP:1> : <def:seven-composite> <nat:79200> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:3> . exists <nat:6> . exists <nat:4> . exists <nat:2> . exists <nat:5> . exists <nat:11> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 