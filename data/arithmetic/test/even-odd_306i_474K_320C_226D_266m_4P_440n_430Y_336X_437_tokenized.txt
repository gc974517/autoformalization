\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming any $ <var:n> $ , $ <var:Y> $ , $ <var:m> $ , $ <var:X> $ , $ <var:C> $ , $ <var:K> $ , $ <var:P> $ , $ <var:D> $ , and $ <var:i> \in \mathbb{Z}^+ $ the expression $ <nat:437> + <nat:306> \cdot <var:i> + <var:K> \cdot <nat:474> + <nat:320> \cdot <var:C> + <nat:226> \cdot <var:D> + <var:m> \cdot <nat:266> + <nat:4> \cdot <var:P> + <nat:440> \cdot <var:n> + <nat:430> \cdot <var:Y> + <var:X> \cdot <nat:336> $ must be odd . \end{theorem} \begin{proof} Notice $ <nat:437> $ is odd . The summation of an even natural number with an odd element of $ \mathbb{Z}^+ $ is guaranteed to be odd . See that the terms $ <var:i> * <nat:306> $ , $ <var:K> * <nat:474> $ , $ <var:C> * <nat:320> $ , $ <nat:226> * <var:D> $ , $ <nat:266> * <var:m> $ , $ <nat:4> * <var:P> $ , $ <nat:440> * <var:n> $ , $ <nat:430> * <var:Y> $ , and $ <var:X> * <nat:336> $ must be even from the fact the leading terms $ <nat:306> $ , $ <nat:474> $ , $ <nat:320> $ , $ <nat:226> $ , $ <nat:266> $ , $ <nat:4> $ , $ <nat:440> $ , $ <nat:430> $ , and $ <nat:336> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:Y> <var:m> <var:X> <var:C> <var:K> <var:P> <var:D> <var:i> : nat , Nat . odd ( <nat:306> * <var:i> + <nat:474> * <var:K> + <nat:320> * <var:C> + <nat:226> * <var:D> + <nat:266> * <var:m> + <nat:4> * <var:P> + <nat:440> * <var:n> + <nat:430> * <var:Y> + <nat:336> * <var:X> + <nat:437> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:437> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:430> = true ) . { auto . } assert ( <genH> : Nat . even <nat:336> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 