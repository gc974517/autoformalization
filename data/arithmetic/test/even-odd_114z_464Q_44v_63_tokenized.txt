\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:464> <var:Q> + <nat:44> <var:v> + <nat:114> <var:z> + <nat:63> $ is guaranteed to be odd given some integers $ <var:z> $ , $ <var:v> $ , and $ <var:Q> $ . \end{theorem} \begin{proof} Remember $ <nat:44> \cdot <var:v> + <var:z> \cdot <nat:114> + <nat:464> \cdot <var:Q> $ is guaranteed to be even . Notice that the product $ <nat:114> <var:z> $ is known as an even natural by reason that the positive integer $ <nat:114> $ is guaranteed to be an even whole number . Adding on , the term $ <var:Q> <nat:464> $ is clearly even . This fact must be true since the number $ <nat:464> $ is clearly even . The term $ <nat:44> <var:v> $ is known to be an even integer as a consequence that the leading term $ <nat:44> $ is obviously even . The expression $ <var:z> \cdot <nat:114> + <var:v> \cdot <nat:44> + <var:Q> \cdot <nat:464> $ is guaranteed to be even from the knowledge the multiplication of an even number and an arbitrary natural is guaranteed to be even . Notice $ <nat:63> $ is known as an odd element of $ \mathbb{N} $ . It can be checked that the expression $ <nat:63> + <var:z> \cdot <nat:114> + <nat:464> \cdot <var:Q> + <nat:44> \cdot <var:v> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:v> <var:Q> : nat , Nat . odd ( <nat:464> * <var:Q> + <nat:44> * <var:v> + <nat:114> * <var:z> + <nat:63> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:Q> + <nat:44> * <var:v> + <nat:114> * <var:z> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:63> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 