\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:421> + <nat:342> <var:r> + <var:L> <nat:108> + <var:P> <nat:198> + <var:i> <nat:46> $ is guaranteed to be odd . \end{theorem} \begin{proof} We verify the expression $ <nat:46> * <var:i> + <var:L> * <nat:108> + <var:P> * <nat:198> + <var:r> * <nat:342> $ is known as even , as a consequence that the totaling between even numbers in $ \mathbb{N} $ and an even number will be an even element of $ \mathbb{Z}^+ $ . Notice that the terms $ <nat:198> * <var:P> $ in addition to $ <var:L> * <nat:108> $ are clearly even . The term $ <nat:46> * <var:i> $ is clearly even . In addition to this , the product $ <nat:342> * <var:r> $ is an even positive integer . as well as from the fact multiplying of an even natural number with a number in $ \mathbb{N} $ will be even . See $ <nat:421> $ is known as an odd natural number . We justify the sum $ <var:L> \times <nat:108> + <var:P> \times <nat:198> + <nat:421> + <var:i> \times <nat:46> + <nat:342> \times <var:r> $ will be odd . Remember that the adding of even naturals successively with an odd whole number is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:L> <var:P> <var:i> : nat , Nat . odd ( <nat:342> * <var:r> + <nat:108> * <var:L> + <nat:198> * <var:P> + <nat:46> * <var:i> + <nat:421> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:198> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:108> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:r> + <nat:108> * <var:L> + <nat:198> * <var:P> + <nat:46> * <var:i> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:421> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 