\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Under the condition there are numbers $ <var:o> $ , $ <var:f> $ , $ <var:H> $ , $ <var:K> $ , $ <var:n> $ , $ <var:T> $ , $ <var:a> $ , $ <var:N> $ , $ <var:u> $ greater than or equivalent to <nat:2> . Denote that some whole number $ <var:e> $ is a <def:nine-composite> whole number assuming $ <var:e> = <var:u> * <var:n> * <var:N> * <var:H> * <var:K> * <var:o> * <var:T> * <var:f> * <var:a> $ . So the number <nat:5896800> is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Notice $ <nat:5> $ , $ <nat:13> $ , $ <nat:3> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:6> $ , and $ <nat:10> $ are larger than or equal to <nat:2> . What's more note too $ <var:N> \times <var:a> \times <var:T> \times <var:K> \times <var:n> \times <var:H> \times <var:u> \times <var:f> \times <var:o> = <nat:5896800> $ produces $ <var:H> = <nat:13> $ , $ <var:u> = <nat:10> $ , $ <var:a> = <nat:2> $ , $ <var:T> = <nat:7> $ , $ <var:K> = <nat:9> $ , $ <var:n> = <nat:5> $ , $ <var:N> = <nat:6> $ , $ <var:f> = <nat:3> $ , $ <var:o> = <nat:4> $ . This indicates our thesis is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:e> : nat ) := exists <var:o> <var:f> <var:H> <var:K> <var:n> <var:T> <var:a> <var:N> <var:u> : nat , ( <var:o> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:e> = <var:u> * <var:n> * <var:N> * <var:H> * <var:K> * <var:o> * <var:T> * <var:f> * <var:a> ) . Theorem <genP:1> : <def:nine-composite> <nat:5896800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } exists <nat:4> . exists <nat:3> . exists <nat:13> . exists <nat:9> . exists <nat:5> . exists <nat:7> . exists <nat:2> . exists <nat:6> . exists <nat:10> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 