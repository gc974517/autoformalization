\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Under the condition we have $ <var:k> $ , $ <var:Y> $ , $ <var:F> $ , $ <var:Z> $ , $ <var:y> $ , $ <var:X> $ and $ <var:S> \geq <nat:2> $ satisfying the condition that for $ <var:T> \in \mathbb{N} $ , $ <var:T> = <var:F> \times <var:Z> \times <var:Y> \times <var:y> \times <var:k> \times <var:S> \times <var:X> $ taking some $ <var:F> $ , $ <var:Z> $ , $ <var:y> $ , $ <var:Y> $ , $ <var:X> $ , $ <var:k> $ , $ <var:S> $ , we claim that $ <var:T> $ is a <def:seven-composite> integer . \end{definition} \begin{theorem} $ <nat:129600> = <var:T> $ is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Take $ <var:S> = <nat:3> $ , $ <var:F> = <nat:6> $ , $ <var:k> = <nat:5> $ , $ <var:Y> = <nat:8> $ , $ <var:y> = <nat:10> $ , $ <var:Z> = <nat:2> $ and $ <var:X> = <nat:9> $ . Moreover observe $ <var:k> = <nat:5> $ , $ <var:Z> = <nat:2> $ , $ <var:X> = <nat:9> $ , $ <var:S> = <nat:3> $ , $ <var:y> = <nat:10> $ , $ <var:F> = <nat:6> $ and $ <var:Y> = <nat:8> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:T> : nat ) := exists <var:F> <var:Z> <var:y> <var:Y> <var:X> <var:k> <var:S> : nat , ( <var:k> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:T> = <var:F> * <var:Z> * <var:Y> * <var:y> * <var:k> * <var:S> * <var:X> ) . Theorem <genP:1> : <def:seven-composite> <nat:129600> . Proof . unfold <def:seven-composite> . exists <nat:6> . exists <nat:2> . exists <nat:10> . exists <nat:8> . exists <nat:9> . exists <nat:5> . exists <nat:3> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 