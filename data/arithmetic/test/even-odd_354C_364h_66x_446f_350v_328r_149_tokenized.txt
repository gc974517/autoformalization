\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:r> <nat:328> + <var:f> <nat:446> + <var:v> <nat:350> + <var:x> <nat:66> + <nat:149> + <var:h> <nat:364> + <var:C> <nat:354> $ must be odd . \end{theorem} \begin{proof} The addition of an even natural number with an odd number is odd . We know $ <nat:149> $ is trivially odd . The theorem must be true from the fact $ <var:C> <nat:354> + <var:h> <nat:364> + <var:x> <nat:66> + <var:f> <nat:446> + <var:v> <nat:350> + <nat:328> <var:r> $ is obviously even . Notice the pairs $ <nat:354> <var:C> $ , $ <var:h> <nat:364> $ , $ <var:x> <nat:66> $ , $ <var:f> <nat:446> $ , $ <var:v> <nat:350> $ , and $ <nat:328> <var:r> $ are guaranteed to be even as a consequence that the integers $ <nat:354> $ , $ <nat:364> $ , $ <nat:66> $ , $ <nat:446> $ , $ <nat:350> $ , and moreover $ <nat:328> $ are trivially even elements of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:f> <var:v> <var:x> <var:h> <var:C> : nat , Nat . odd ( <nat:328> * <var:r> + <nat:446> * <var:f> + <nat:350> * <var:v> + <nat:66> * <var:x> + <nat:364> * <var:h> + <nat:354> * <var:C> + <nat:149> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:149> = true ) . { auto . } assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:r> + <nat:446> * <var:f> + <nat:350> * <var:v> + <nat:66> * <var:x> + <nat:364> * <var:h> + <nat:354> * <var:C> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 