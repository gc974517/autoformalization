\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking all integers $ <var:i> $ , $ <var:M> $ , $ <var:e> $ , $ <var:J> $ , $ <var:g> $ , $ <var:E> $ , $ <var:U> $ , $ <var:b> $ , $ <var:X> $ , $ <var:H> $ , and $ <var:F> $ the summation $ <nat:104> <var:g> + <var:J> <nat:446> + <var:X> <nat:308> + <var:F> <nat:162> + <nat:10> <var:E> + <nat:482> <var:H> + <nat:498> <var:b> + <var:i> <nat:88> + <nat:24> <var:M> + <nat:466> <var:e> + <nat:187> + <nat:46> <var:U> $ is odd . \end{theorem} \begin{proof} $ <var:b> \cdot <nat:498> + <var:e> \cdot <nat:466> + <var:H> \cdot <nat:482> + <nat:10> \cdot <var:E> + <nat:46> \cdot <var:U> + <nat:88> \cdot <var:i> + <nat:24> \cdot <var:M> + <nat:308> \cdot <var:X> + <nat:446> \cdot <var:J> + <nat:162> \cdot <var:F> + <var:g> \cdot <nat:104> $ is trivially even . Notice the summing between even positive integers and an even number in $ \mathbb{N} $ must be even . Recall the pairs $ <nat:104> * <var:g> $ , $ <var:i> * <nat:88> $ , $ <nat:24> * <var:M> $ , $ <var:J> * <nat:446> $ , and also $ <nat:46> * <var:U> $ are trivially even numbers in $ \mathbb{N} $ as a consequence that taking the product between an even natural and an arbitrary number in $ \mathbb{Z}^+ $ must be by definition an even number in $ \mathbb{Z}^+ $ . Additionally , the pairs $ <var:H> * <nat:482> $ , $ <nat:10> * <var:E> $ , additionally $ <var:b> * <nat:498> $ are guaranteed to be even elements of $ \mathbb{Z}^+ $ since the multiplication of an even positive integer and some natural number is guaranteed to be even . The products $ <nat:466> * <var:e> $ and $ <var:X> * <nat:308> $ are obviously even numbers in $ \mathbb{Z}^+ $ . $ <nat:162> * <var:F> $ is known as even from the knowledge the multiplication of an even number in $ \mathbb{Z}^+ $ and any number in $ \mathbb{Z}^+ $ must be an even natural . We know $ <nat:187> $ is guaranteed to be odd . The addition of an even element of $ \mathbb{N} $ with an odd natural number will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:M> <var:e> <var:J> <var:g> <var:E> <var:U> <var:b> <var:X> <var:H> <var:F> : nat , Nat . odd ( <nat:104> * <var:g> + <nat:446> * <var:J> + <nat:308> * <var:X> + <nat:162> * <var:F> + <nat:10> * <var:E> + <nat:482> * <var:H> + <nat:498> * <var:b> + <nat:88> * <var:i> + <nat:24> * <var:M> + <nat:466> * <var:e> + <nat:46> * <var:U> + <nat:187> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:104> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:g> + <nat:446> * <var:J> + <nat:308> * <var:X> + <nat:162> * <var:F> + <nat:10> * <var:E> + <nat:482> * <var:H> + <nat:498> * <var:b> + <nat:88> * <var:i> + <nat:24> * <var:M> + <nat:466> * <var:e> + <nat:46> * <var:U> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:187> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 