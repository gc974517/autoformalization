\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every natural numbers $ <var:Y> $ , $ <var:d> $ , $ <var:m> $ , $ <var:U> $ , $ <var:l> $ , $ <var:A> $ , $ <var:Z> $ , $ <var:p> $ , and $ <var:W> $ the expression $ <nat:350> * <var:m> + <var:p> * <nat:116> + <var:Y> * <nat:380> + <var:A> * <nat:120> + <nat:150> * <var:l> + <var:W> * <nat:488> + <nat:335> + <nat:282> * <var:U> + <var:d> * <nat:186> + <nat:172> * <var:Z> $ is guaranteed to be odd . \end{theorem} \begin{proof} We apply the assumption that the summation $ <nat:380> <var:Y> + <var:d> <nat:186> + <var:m> <nat:350> + <var:W> <nat:488> + <nat:120> <var:A> + <var:p> <nat:116> + <var:l> <nat:150> + <nat:172> <var:Z> + <nat:282> <var:U> $ is clearly even . The terms $ <nat:186> \cdot <var:d> $ , $ <nat:116> \cdot <var:p> $ , plus $ <nat:380> \cdot <var:Y> $ are clearly even numbers in $ \mathbb{Z}^+ $ from the knowledge taking the product between an even natural number with an arbitrary integer must be even . Take note that the products $ <nat:282> \cdot <var:U> $ , $ <var:Z> \cdot <nat:172> $ , $ <nat:488> \cdot <var:W> $ , $ <nat:350> \cdot <var:m> $ , as well as $ <var:A> \cdot <nat:120> $ will be even . This is true from the knowledge multiplying between an even positive integer and some number in $ \mathbb{N} $ must be even . The term $ <nat:150> \cdot <var:l> $ is obviously an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:d> <var:m> <var:U> <var:l> <var:A> <var:Z> <var:p> <var:W> : nat , Nat . odd ( <nat:350> * <var:m> + <nat:116> * <var:p> + <nat:380> * <var:Y> + <nat:120> * <var:A> + <nat:150> * <var:l> + <nat:488> * <var:W> + <nat:282> * <var:U> + <nat:186> * <var:d> + <nat:172> * <var:Z> + <nat:335> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:186> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:380> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:m> + <nat:116> * <var:p> + <nat:380> * <var:Y> + <nat:120> * <var:A> + <nat:150> * <var:l> + <nat:488> * <var:W> + <nat:282> * <var:U> + <nat:186> * <var:d> + <nat:172> * <var:Z> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 