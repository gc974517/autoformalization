\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:j> $ , $ <var:r> $ , $ <var:w> $ , $ <var:I> $ , $ <var:N> $ , $ <var:x> $ , $ <var:q> \in \mathbb{Z}^+ $ . Say that $ <var:B> \in \mathbb{N} $ is called <def:seven-composite> given $ <var:r> \cdot <var:N> \cdot <var:w> \cdot <var:x> \cdot <var:j> \cdot <var:I> \cdot <var:q> = <var:B> $ as well as where $ <var:q> $ , $ <var:I> $ , $ <var:w> $ , $ <var:x> $ , $ <var:r> $ , $ <var:j> $ , $ <var:N> > <nat:1> $ . \end{definition} \begin{theorem} The number <nat:221760> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember <nat:221760> is a <def:seven-composite> whole number with the condition it is the product of whole numbers $ <var:x> $ , $ <var:q> $ , $ <var:I> $ , $ <var:r> $ , $ <var:w> $ , $ <var:N> $ , $ <var:j> $ larger than <nat:1> . Assume $ <var:j> = <nat:5> $ , $ <var:I> = <nat:7> $ , $ <var:r> = <nat:8> $ , $ <var:w> = <nat:12> $ , $ <var:q> = <nat:3> $ , $ <var:x> = <nat:2> $ , $ <var:N> = <nat:11> $ . Similarly observe that $ <var:N> = <nat:11> $ , $ <var:x> = <nat:2> $ , $ <var:I> = <nat:7> $ , $ <var:w> = <nat:12> $ , $ <var:j> = <nat:5> $ , $ <var:r> = <nat:8> $ , $ <var:q> = <nat:3> > <nat:1> $ . This implies the result holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:B> : nat ) := exists <var:j> <var:r> <var:w> <var:I> <var:N> <var:x> <var:q> : nat , ( <var:r> * <var:N> * <var:w> * <var:x> * <var:j> * <var:I> * <var:q> = <var:B> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:w> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:N> > <nat:1> ) . Theorem <genP:1> : <def:seven-composite> <nat:221760> . Proof . unfold <def:seven-composite> . exists <nat:5> . exists <nat:8> . exists <nat:12> . exists <nat:7> . exists <nat:11> . exists <nat:2> . exists <nat:3> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 