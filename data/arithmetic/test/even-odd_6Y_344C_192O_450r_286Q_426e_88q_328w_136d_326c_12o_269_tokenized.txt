\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:6> \times <var:Y> + <var:C> \times <nat:344> + <var:O> \times <nat:192> + <var:r> \times <nat:450> + <nat:286> \times <var:Q> + <nat:426> \times <var:e> + <nat:88> \times <var:q> + <nat:328> \times <var:w> + <nat:136> \times <var:d> + <var:c> \times <nat:326> + <nat:269> + <nat:12> \times <var:o> $ will be odd assuming all $ <var:o> $ , $ <var:e> $ , $ <var:C> $ , $ <var:Y> $ , $ <var:O> $ , $ <var:w> $ , $ <var:r> $ , $ <var:q> $ , $ <var:c> $ , $ <var:Q> $ , and $ <var:d> \in \mathbb{N} $ . \end{theorem} \begin{proof} We know that the numbers $ <nat:136> $ , $ <nat:344> $ , $ <nat:450> $ , $ <nat:192> $ , $ <nat:12> $ , $ <nat:286> $ , $ <nat:88> $ , $ <nat:326> $ , $ <nat:328> $ , as well as $ <nat:6> $ are clearly even natural numbers The leading term $ <nat:426> $ is known as an even whole number Observe that $ <nat:269> $ is obviously an odd element of $ \mathbb{N} $ . It can be verified that this result is proven by applying multiplying of an even positive integer with some whole number must be an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:e> <var:C> <var:Y> <var:O> <var:w> <var:r> <var:q> <var:c> <var:Q> <var:d> : nat , Nat . odd ( <nat:6> * <var:Y> + <nat:344> * <var:C> + <nat:192> * <var:O> + <nat:450> * <var:r> + <nat:286> * <var:Q> + <nat:426> * <var:e> + <nat:88> * <var:q> + <nat:328> * <var:w> + <nat:136> * <var:d> + <nat:326> * <var:c> + <nat:12> * <var:o> + <nat:269> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . odd <nat:269> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 