\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We assume that $ <var:h> $ is a <def:six-composite> whole number supposing taking some $ <var:C> $ , $ <var:c> $ , $ <var:W> $ , $ <var:M> $ , $ <var:Q> $ , $ <var:x> \in \mathbb{Z}^+ $ we get satisfying the condition that $ <var:M> $ , $ <var:x> $ , $ <var:W> $ , $ <var:C> $ , $ <var:Q> $ and $ <var:c> > <nat:1> $ plus taking $ <var:h> \in \mathbb{Z}^+ $ , $ <var:M> \cdot <var:Q> \cdot <var:c> \cdot <var:x> \cdot <var:C> \cdot <var:W> = <var:h> $ . For this reason the integer <nat:75600> is a <def:six-composite> natural number . \end{theorem} \begin{proof} Recollect that <nat:75600> is a <def:six-composite> number with the condition that it is the multiplication between whole numbers $ <var:x> $ , $ <var:Q> $ , $ <var:c> $ , $ <var:W> $ , $ <var:C> $ , and $ <var:M> $ so that $ <var:M> $ , $ <var:C> $ , $ <var:Q> $ , $ <var:W> $ , $ <var:x> $ , and $ <var:c> > <nat:1> $ . Take $ <var:Q> = <nat:12> $ , $ <var:M> = <nat:3> $ , $ <var:c> = <nat:7> $ , $ <var:x> = <nat:6> $ , $ <var:W> = <nat:10> $ and $ <var:C> = <nat:5> $ . We prove the formula holds seeing that $ <var:Q> = <nat:12> $ , $ <var:c> = <nat:7> $ , $ <var:x> = <nat:6> $ , $ <var:M> = <nat:3> $ , $ <var:W> = <nat:10> $ and $ <var:C> = <nat:5> $ are more than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:h> : nat ) := exists <var:C> <var:c> <var:W> <var:M> <var:Q> <var:x> : nat , ( <var:M> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:M> * <var:Q> * <var:c> * <var:x> * <var:C> * <var:W> = <var:h> ) . Theorem <genP:1> : <def:six-composite> <nat:75600> . Proof . unfold <def:six-composite> . exists <nat:5> . exists <nat:7> . exists <nat:10> . exists <nat:3> . exists <nat:12> . exists <nat:6> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 