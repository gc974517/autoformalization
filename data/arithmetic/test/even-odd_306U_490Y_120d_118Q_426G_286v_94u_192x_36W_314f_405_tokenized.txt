\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:f> * <nat:314> + <var:G> * <nat:426> + <nat:286> * <var:v> + <var:x> * <nat:192> + <nat:306> * <var:U> + <nat:405> + <nat:490> * <var:Y> + <var:d> * <nat:120> + <nat:118> * <var:Q> + <var:W> * <nat:36> + <nat:94> * <var:u> $ will be odd . \end{theorem} \begin{proof} The result is proven from the knowledge $ <var:x> \times <nat:192> + <var:v> \times <nat:286> + <var:f> \times <nat:314> + <nat:118> \times <var:Q> + <var:W> \times <nat:36> + <var:u> \times <nat:94> + <var:G> \times <nat:426> + <var:Y> \times <nat:490> + <var:U> \times <nat:306> + <var:d> \times <nat:120> $ is trivially even . Recall the addition of an even number in $ \mathbb{N} $ with an even element of $ \mathbb{N} $ will be even . The pairs $ <nat:192> * <var:x> $ and likewise $ <nat:94> * <var:u> $ will be even numbers in $ \mathbb{Z}^+ $ . In addition to this , remember that the products $ <nat:120> * <var:d> $ , $ <nat:490> * <var:Y> $ , and moreover $ <var:G> * <nat:426> $ are known to be even . This claim is proven since the product between an even integer with some positive integer will be even . The term $ <nat:36> * <var:W> $ is known to be an even number in $ \mathbb{N} $ . Observe that the product $ <var:v> * <nat:286> $ is known as an even positive integer . Building on , the term $ <var:f> * <nat:314> $ is even as a consequence that multiplying between an even number with an arbitrary positive integer is guaranteed to be trivially an even number in $ \mathbb{Z}^+ $ . Likewise , we know the term $ <nat:306> * <var:U> $ is known to be an even number in $ \mathbb{N} $ . This is true because taking the product of an even positive integer with an arbitrary natural number must be even . Recall the term $ <var:Q> * <nat:118> $ is trivially even . as well as because the multiplication between even integers and any whole number must be even the expression $ <nat:306> \times <var:U> + <var:Y> \times <nat:490> + <nat:120> \times <var:d> + <var:Q> \times <nat:118> + <nat:426> \times <var:G> + <nat:286> \times <var:v> + <nat:94> \times <var:u> + <nat:192> \times <var:x> + <var:W> \times <nat:36> + <var:f> \times <nat:314> $ will be fundamentally even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:G> <var:v> <var:x> <var:U> <var:Y> <var:d> <var:Q> <var:W> <var:u> : nat , Nat . odd ( <nat:314> * <var:f> + <nat:426> * <var:G> + <nat:286> * <var:v> + <nat:192> * <var:x> + <nat:306> * <var:U> + <nat:490> * <var:Y> + <nat:120> * <var:d> + <nat:118> * <var:Q> + <nat:36> * <var:W> + <nat:94> * <var:u> + <nat:405> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:192> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:f> + <nat:426> * <var:G> + <nat:286> * <var:v> + <nat:192> * <var:x> + <nat:306> * <var:U> + <nat:490> * <var:Y> + <nat:120> * <var:d> + <nat:118> * <var:Q> + <nat:36> * <var:W> + <nat:94> * <var:u> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 