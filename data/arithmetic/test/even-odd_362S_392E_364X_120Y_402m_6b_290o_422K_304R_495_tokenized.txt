\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> * <nat:422> + <var:o> * <nat:290> + <var:m> * <nat:402> + <nat:392> * <var:E> + <nat:304> * <var:R> + <nat:6> * <var:b> + <var:Y> * <nat:120> + <nat:495> + <var:X> * <nat:364> + <nat:362> * <var:S> $ will be odd taking all $ <var:K> $ , $ <var:m> $ , $ <var:Y> $ , $ <var:E> $ , $ <var:S> $ , $ <var:R> $ , $ <var:X> $ , $ <var:o> $ , and $ <var:b> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} Notice that $ <nat:495> $ is guaranteed to be odd . The summing between an even element of $ \mathbb{Z}^+ $ and an odd whole number is obviously an odd number . Remember that $ <var:S> \cdot <nat:362> + <nat:392> \cdot <var:E> + <nat:364> \cdot <var:X> + <var:Y> \cdot <nat:120> + <nat:402> \cdot <var:m> + <var:b> \cdot <nat:6> + <var:o> \cdot <nat:290> + <nat:422> \cdot <var:K> + <nat:304> \cdot <var:R> $ is known to be even . By reason that the adding between an even whole number and even natural numbers is guaranteed to be even , as well as because the product between even integers with any integer is guaranteed to be an even integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:m> <var:Y> <var:E> <var:S> <var:R> <var:X> <var:o> <var:b> : nat , Nat . odd ( <nat:422> * <var:K> + <nat:290> * <var:o> + <nat:402> * <var:m> + <nat:392> * <var:E> + <nat:304> * <var:R> + <nat:6> * <var:b> + <nat:120> * <var:Y> + <nat:364> * <var:X> + <nat:362> * <var:S> + <nat:495> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:495> = true ) . { auto . } rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:422> * <var:K> + <nat:290> * <var:o> + <nat:402> * <var:m> + <nat:392> * <var:E> + <nat:304> * <var:R> + <nat:6> * <var:b> + <nat:120> * <var:Y> + <nat:364> * <var:X> + <nat:362> * <var:S> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 