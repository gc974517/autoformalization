\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:426> \cdot <var:l> + <var:Z> \cdot <nat:158> + <nat:238> \cdot <var:t> + <var:L> \cdot <nat:312> + <var:D> \cdot <nat:114> + <nat:464> \cdot <var:u> + <nat:21> + <nat:448> \cdot <var:e> + <var:K> \cdot <nat:420> + <nat:368> \cdot <var:s> + <nat:282> \cdot <var:C> $ must be odd given integers $ <var:L> $ , $ <var:u> $ , $ <var:K> $ , $ <var:l> $ , $ <var:s> $ , $ <var:Z> $ , $ <var:t> $ , $ <var:C> $ , $ <var:e> $ , and $ <var:D> $ . \end{theorem} \begin{proof} Observe the summing of an even number in $ \mathbb{Z}^+ $ and an odd whole number must be an odd number in $ \mathbb{Z}^+ $ . Remember $ <nat:21> $ is clearly an odd natural number . The expression $ <var:l> * <nat:426> + <nat:114> * <var:D> + <nat:21> + <var:s> * <nat:368> + <nat:282> * <var:C> + <var:K> * <nat:420> + <nat:158> * <var:Z> + <var:t> * <nat:238> + <var:u> * <nat:464> + <nat:448> * <var:e> + <nat:312> * <var:L> $ is known to be odd as a consequence that the expression $ <nat:464> <var:u> + <var:L> <nat:312> + <nat:238> <var:t> + <nat:448> <var:e> + <nat:420> <var:K> + <nat:114> <var:D> + <var:Z> <nat:158> + <var:l> <nat:426> + <var:C> <nat:282> + <nat:368> <var:s> $ is trivially even . The product $ <var:L> \times <nat:312> $ is guaranteed to be even from the fact the natural number $ <nat:312> $ is known as by itself an even number in $ \mathbb{N} $ . The number $ <nat:282> $ is known as an even positive integer . Hence , the product $ <nat:282> \times <var:C> $ is even as well . The term $ <var:e> \times <nat:448> $ is obviously an even number in $ \mathbb{Z}^+ $ . This claim is proven from the knowledge the positive integer $ <nat:448> $ is clearly even . The positive integer $ <nat:158> $ is trivially even . Thus , the pair $ <var:Z> \times <nat:158> $ is guaranteed to be even also . The coefficient $ <nat:464> $ is guaranteed to be an even integer . Then , the pair $ <nat:464> \times <var:u> $ must be even too . We know that the product $ <var:K> \times <nat:420> $ is known as an even element of $ \mathbb{N} $ . This claim must be true because the positive integer $ <nat:420> $ is clearly an even number . Adding on , recall that the coefficient $ <nat:426> $ is obviously even . Therefore , the product $ <nat:426> \times <var:l> $ will be even also . The pair $ <nat:114> \times <var:D> $ is even . This claim is true from the fact the leading term $ <nat:114> $ is even . The product $ <nat:368> \times <var:s> $ is guaranteed to be an even number as a consequence that the coefficient $ <nat:368> $ is known as instrinsically an even positive integer . Further , remember $ <var:t> \times <nat:238> $ is trivially even . This fact holds since the product of an even number in $ \mathbb{Z}^+ $ with an arbitrary whole number must be even , and holds by reason that the coefficient $ <nat:238> $ is obviously even . As a consequence that taking the product of even numbers in $ \mathbb{Z}^+ $ with any element of $ \mathbb{Z}^+ $ is even $ <nat:158> \cdot <var:Z> + <nat:238> \cdot <var:t> + <nat:368> \cdot <var:s> + <var:L> \cdot <nat:312> + <nat:426> \cdot <var:l> + <var:D> \cdot <nat:114> + <var:u> \cdot <nat:464> + <nat:282> \cdot <var:C> + <nat:420> \cdot <var:K> + <nat:448> \cdot <var:e> $ is fundamentally even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:u> <var:K> <var:l> <var:s> <var:Z> <var:t> <var:C> <var:e> <var:D> : nat , Nat . odd ( <nat:426> * <var:l> + <nat:158> * <var:Z> + <nat:238> * <var:t> + <nat:312> * <var:L> + <nat:114> * <var:D> + <nat:464> * <var:u> + <nat:448> * <var:e> + <nat:420> * <var:K> + <nat:368> * <var:s> + <nat:282> * <var:C> + <nat:21> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:21> = true ) . { auto . } assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:368> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:238> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:l> + <nat:158> * <var:Z> + <nat:238> * <var:t> + <nat:312> * <var:L> + <nat:114> * <var:D> + <nat:464> * <var:u> + <nat:448> * <var:e> + <nat:420> * <var:K> + <nat:368> * <var:s> + <nat:282> * <var:C> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 