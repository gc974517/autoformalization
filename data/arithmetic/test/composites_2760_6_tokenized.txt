\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:F> $ , $ <var:U> $ , $ <var:t> $ , $ <var:o> $ , $ <var:R> $ , $ <var:r> \in \mathbb{N} $ so that $ <var:o> $ , $ <var:r> $ , $ <var:t> $ , $ <var:R> $ , $ <var:U> $ and $ <var:F> \geq <nat:2> $ . Say that $ <var:a> \in \mathbb{Z}^+ $ will be considered to be a <def:six-composite> positive integer when $ <var:a> = <var:U> * <var:R> * <var:r> * <var:F> * <var:o> * <var:t> $ . Hence $ <nat:224640> = <var:a> $ is a <def:six-composite> whole number . \end{theorem} \begin{proof} Assume $ <var:R> = <nat:4> $ , $ <var:r> = <nat:9> $ , $ <var:F> = <nat:12> $ , $ <var:t> = <nat:13> $ , $ <var:U> = <nat:8> $ , $ <var:o> = <nat:5> $ . We justify <nat:224640> is the multiplication between some integers $ <var:F> $ , $ <var:t> $ , $ <var:o> $ , $ <var:R> $ , $ <var:U> $ , and $ <var:r> $ . Notice $ <var:r> = <nat:9> $ , $ <var:R> = <nat:4> $ , $ <var:t> = <nat:13> $ , $ <var:F> = <nat:12> $ , $ <var:o> = <nat:5> $ , and $ <var:U> = <nat:8> \geq <nat:2> $ . This suggests the principle is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:a> : nat ) := exists <var:F> <var:U> <var:t> <var:o> <var:R> <var:r> : nat , ( <var:o> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:a> = <var:U> * <var:R> * <var:r> * <var:F> * <var:o> * <var:t> ) . Theorem <genP:1> : <def:six-composite> <nat:224640> . Proof . unfold <def:six-composite> . exists <nat:12> . exists <nat:8> . exists <nat:13> . exists <nat:5> . exists <nat:4> . exists <nat:9> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 