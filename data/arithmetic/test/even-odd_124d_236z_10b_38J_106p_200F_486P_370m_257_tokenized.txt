\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using some positive terms $ <var:J> $ , $ <var:P> $ , $ <var:p> $ , $ <var:m> $ , $ <var:F> $ , $ <var:z> $ , $ <var:d> $ , and $ <var:b> $ $ <var:d> <nat:124> + <nat:236> <var:z> + <nat:10> <var:b> + <var:J> <nat:38> + <var:p> <nat:106> + <var:F> <nat:200> + <var:P> <nat:486> + <nat:257> + <var:m> <nat:370> $ is odd . \end{theorem} \begin{proof} Remember the integers $ <nat:236> $ , $ <nat:200> $ , $ <nat:370> $ , $ <nat:38> $ , in addition to $ <nat:486> $ are guaranteed to be even numbers in $ \mathbb{N} $ The coefficient $ <nat:10> $ is trivially an even positive integer The natural number $ <nat:124> $ is guaranteed to be even The natural number $ <nat:106> $ is clearly an even positive integer It can be demonstrated that the lemma must be true in accordance with the fact that the multiplication between an even integer with some natural number is in itself an even element of $ \mathbb{N} $ . Remember $ <nat:257> $ is obviously an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:P> <var:p> <var:m> <var:F> <var:z> <var:d> <var:b> : nat , Nat . odd ( <nat:124> * <var:d> + <nat:236> * <var:z> + <nat:10> * <var:b> + <nat:38> * <var:J> + <nat:106> * <var:p> + <nat:200> * <var:F> + <nat:486> * <var:P> + <nat:370> * <var:m> + <nat:257> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:236> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even <nat:38> = true ) . { auto . } assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . odd <nat:257> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 