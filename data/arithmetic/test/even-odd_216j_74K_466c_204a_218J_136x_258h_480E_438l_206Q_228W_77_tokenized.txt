\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:216> * <var:j> + <nat:74> * <var:K> + <var:c> * <nat:466> + <var:a> * <nat:204> + <var:J> * <nat:218> + <nat:77> + <var:x> * <nat:136> + <var:h> * <nat:258> + <var:E> * <nat:480> + <nat:438> * <var:l> + <nat:206> * <var:Q> + <var:W> * <nat:228> $ is guaranteed to be odd using whole numbers $ <var:W> $ , $ <var:x> $ , $ <var:E> $ , $ <var:c> $ , $ <var:a> $ , $ <var:j> $ , $ <var:h> $ , $ <var:Q> $ , $ <var:K> $ , $ <var:J> $ , and $ <var:l> $ . \end{theorem} \begin{proof} Remember the leading terms $ <nat:204> $ , $ <nat:258> $ , $ <nat:466> $ , $ <nat:216> $ , $ <nat:136> $ , $ <nat:218> $ , $ <nat:228> $ , additionally $ <nat:480> $ will be even Building on , see that the leading term $ <nat:206> $ is an even whole number Take note the number $ <nat:74> $ is known to be even Take note that the integer $ <nat:438> $ is known to be an even number \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:W> <var:x> <var:E> <var:c> <var:a> <var:j> <var:h> <var:Q> <var:K> <var:J> <var:l> : nat , Nat . odd ( <nat:216> * <var:j> + <nat:74> * <var:K> + <nat:466> * <var:c> + <nat:204> * <var:a> + <nat:218> * <var:J> + <nat:136> * <var:x> + <nat:258> * <var:h> + <nat:480> * <var:E> + <nat:438> * <var:l> + <nat:206> * <var:Q> + <nat:228> * <var:W> + <nat:77> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:216> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even <nat:206> = true ) . { auto . } assert ( <genH> : Nat . even <nat:74> = true ) . { auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 