\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:C> <nat:270> + <nat:320> <var:s> + <var:O> <nat:324> + <nat:275> + <nat:288> <var:e> + <nat:478> <var:V> $ is guaranteed to be odd . \end{theorem} \begin{proof} The expression $ <nat:275> + <var:e> \cdot <nat:288> + <nat:478> \cdot <var:V> + <nat:270> \cdot <var:C> + <var:O> \cdot <nat:324> + <var:s> \cdot <nat:320> $ is obviously odd because the expression $ <nat:324> * <var:O> + <nat:478> * <var:V> + <nat:320> * <var:s> + <nat:270> * <var:C> + <var:e> * <nat:288> $ is clearly even . Remember that the totaling between an even element of $ \mathbb{N} $ and an even number must be even . Take note that the positive integers $ <nat:320> $ , $ <nat:270> $ , plus $ <nat:288> $ will be even numbers in $ \mathbb{Z}^+ $ Adding on , the natural number $ <nat:324> $ is clearly an even integer Remember that the positive integer $ <nat:478> $ is guaranteed to be even Recall that $ <nat:275> $ is clearly odd . Remember that the adding between even numbers in $ \mathbb{N} $ successively with an odd number will be an odd number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:s> <var:O> <var:e> <var:V> : nat , Nat . odd ( <nat:270> * <var:C> + <nat:320> * <var:s> + <nat:324> * <var:O> + <nat:288> * <var:e> + <nat:478> * <var:V> + <nat:275> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:288> = true ) . { auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:C> + <nat:320> * <var:s> + <nat:324> * <var:O> + <nat:288> * <var:e> + <nat:478> * <var:V> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:275> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 