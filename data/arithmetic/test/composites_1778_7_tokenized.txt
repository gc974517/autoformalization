\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that we have $ <var:x> \times <var:K> \times <var:d> \times <var:q> \times <var:s> \times <var:c> \times <var:Y> = <var:w> $ for some $ <var:w> $ and so that $ <var:K> $ , $ <var:c> $ , $ <var:s> $ , $ <var:q> $ , $ <var:d> $ , $ <var:x> $ , $ <var:Y> \geq <nat:2> $ , take as given that $ <var:w> $ is a <def:seven-composite> number using some $ <var:s> $ , $ <var:c> $ , $ <var:Y> $ , $ <var:d> $ , $ <var:x> $ , $ <var:K> $ , $ <var:q> $ . \end{definition} \begin{theorem} <nat:64800> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Recall <nat:64800> is a <def:seven-composite> whole number under the condition that it is the product between numbers $ <var:Y> $ , $ <var:d> $ , $ <var:K> $ , $ <var:s> $ , $ <var:x> $ , $ <var:c> $ , and $ <var:q> $ more than or equal to <nat:2> . Observe that $ <nat:10> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:3> $ , $ <nat:6> $ , $ <nat:4> $ , and $ <nat:9> \geq <nat:2> $ . Furthermore observe likewise $ <var:c> \times <var:d> \times <var:s> \times <var:K> \times <var:x> \times <var:q> \times <var:Y> = <nat:64800> $ implies $ <var:Y> = <nat:5> $ , $ <var:s> = <nat:9> $ , $ <var:x> = <nat:4> $ , $ <var:q> = <nat:10> $ , $ <var:d> = <nat:6> $ , $ <var:K> = <nat:3> $ , and $ <var:c> = <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:w> : nat ) := exists <var:s> <var:c> <var:Y> <var:d> <var:x> <var:K> <var:q> : nat , ( <var:x> * <var:K> * <var:d> * <var:q> * <var:s> * <var:c> * <var:Y> = <var:w> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:64800> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } exists <nat:9> . exists <nat:2> . exists <nat:5> . exists <nat:6> . exists <nat:4> . exists <nat:3> . exists <nat:10> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 