\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take as given that $ <var:z> $ is a <def:five-composite> number when with some positive integers $ <var:M> $ , $ <var:J> $ , $ <var:k> $ , $ <var:T> $ , $ <var:o> $ we get $ <var:k> \cdot <var:o> \cdot <var:J> \cdot <var:M> \cdot <var:T> = <var:z> $ assuming $ <var:z> \in \mathbb{Z}^+ $ plus such that $ <var:J> $ , $ <var:M> $ , $ <var:k> $ , $ <var:T> $ and $ <var:o> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:13650> = <var:z> $ is a <def:five-composite> natural number . \end{theorem} \begin{proof} Remember that <nat:13650> is a <def:five-composite> number granted that it is the product between $ <var:J> $ , $ <var:k> $ , $ <var:T> $ , $ <var:o> $ and $ <var:M> $ greater than or equal to <nat:2> . Let $ <var:J> = <nat:10> $ , $ <var:T> = <nat:5> $ , $ <var:M> = <nat:3> $ , $ <var:o> = <nat:7> $ , and $ <var:k> = <nat:13> $ . We verify <nat:13650> is a <def:five-composite> integer on account of $ <nat:7> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:13> $ , $ <nat:10> \geq <nat:2> $ plus for $ <var:J> \times <var:T> \times <var:o> \times <var:M> \times <var:k> = <nat:13650> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:z> : nat ) := exists <var:M> <var:J> <var:k> <var:T> <var:o> : nat , ( <var:k> * <var:o> * <var:J> * <var:M> * <var:T> = <var:z> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:13650> . Proof . unfold <def:five-composite> . exists <nat:3> . exists <nat:10> . exists <nat:13> . exists <nat:5> . exists <nat:7> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:13> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 