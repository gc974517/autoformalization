\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Z> \cdot <nat:242> + <nat:470> \cdot <var:w> + <var:G> \cdot <nat:96> + <var:d> \cdot <nat:110> + <var:g> \cdot <nat:14> + <nat:165> + <nat:352> \cdot <var:x> + <var:S> \cdot <nat:420> + <var:n> \cdot <nat:474> $ will be odd with some natural numbers $ <var:g> $ , $ <var:n> $ , $ <var:d> $ , $ <var:G> $ , $ <var:w> $ , $ <var:x> $ , $ <var:S> $ , and $ <var:Z> $ . \end{theorem} \begin{proof} The positive integers $ <nat:242> $ , $ <nat:470> $ , $ <nat:96> $ , $ <nat:110> $ , $ <nat:14> $ , $ <nat:352> $ , $ <nat:420> $ , additionally $ <nat:474> $ are obviously even natural numbers . Accordingly , the terms $ <var:Z> * <nat:242> $ , $ <var:w> * <nat:470> $ , $ <var:G> * <nat:96> $ , $ <var:d> * <nat:110> $ , $ <var:g> * <nat:14> $ , $ <nat:352> * <var:x> $ , $ <var:S> * <nat:420> $ , and $ <nat:474> * <var:n> $ will be even as well . We check $ <var:G> * <nat:96> + <var:x> * <nat:352> + <nat:420> * <var:S> + <var:g> * <nat:14> + <var:d> * <nat:110> + <nat:165> + <nat:470> * <var:w> + <var:n> * <nat:474> + <nat:242> * <var:Z> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:n> <var:d> <var:G> <var:w> <var:x> <var:S> <var:Z> : nat , Nat . odd ( <nat:242> * <var:Z> + <nat:470> * <var:w> + <nat:96> * <var:G> + <nat:110> * <var:d> + <nat:14> * <var:g> + <nat:352> * <var:x> + <nat:420> * <var:S> + <nat:474> * <var:n> + <nat:165> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even <nat:470> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:470> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 