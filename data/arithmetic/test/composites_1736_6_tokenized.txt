\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Iff we get $ <var:S> \cdot <var:X> \cdot <var:N> \cdot <var:L> \cdot <var:s> \cdot <var:i> = <var:H> $ for $ <var:H> \in \mathbb{Z}^+ $ and where $ <var:X> $ , $ <var:i> $ , $ <var:N> $ , $ <var:S> $ , $ <var:s> $ , $ <var:L> \geq <nat:2> $ , assume that $ <var:H> $ is a <def:six-composite> integer taking some numbers $ <var:N> $ , $ <var:X> $ , $ <var:S> $ , $ <var:i> $ , $ <var:L> $ , $ <var:s> $ . \end{definition} \begin{theorem} The integer <nat:12480> is a <def:six-composite> positive integer . \end{theorem} \begin{proof} Allow $ <var:X> = <nat:4> $ , $ <var:N> = <nat:8> $ , $ <var:S> = <nat:13> $ , $ <var:i> = <nat:5> $ , $ <var:L> = <nat:3> $ , $ <var:s> = <nat:2> $ . Similarly observe $ <nat:2> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:8> $ , $ <nat:13> $ and $ <nat:3> $ are more than <nat:1> . Thus , <nat:12480> is the product of $ <var:i> $ , $ <var:N> $ , $ <var:s> $ , $ <var:X> $ , $ <var:S> $ , and $ <var:L> \in \mathbb{N} $ plus $ <var:i> $ , $ <var:S> $ , $ <var:N> $ , $ <var:L> $ , $ <var:X> $ , $ <var:s> > <nat:1> $ is verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:six-composite> ( <var:H> : nat ) := exists <var:N> <var:X> <var:S> <var:i> <var:L> <var:s> : nat , ( <var:S> * <var:X> * <var:N> * <var:L> * <var:s> * <var:i> = <var:H> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) . Theorem <genP:1> : <def:six-composite> <nat:12480> . Proof . unfold <def:six-composite> . exists <nat:8> . exists <nat:4> . exists <nat:13> . exists <nat:5> . exists <nat:3> . exists <nat:2> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:13> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 