\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:v> <nat:20> + <nat:454> <var:C> + <var:O> <nat:176> + <nat:398> <var:b> + <nat:69> $ will be odd for every terms $ <var:O> $ , $ <var:v> $ , $ <var:b> $ , and $ <var:C> $ . \end{theorem} \begin{proof} We apply the fact the sum $ <nat:69> + <var:b> * <nat:398> + <var:O> * <nat:176> + <nat:454> * <var:C> + <nat:20> * <var:v> $ is clearly odd from the fact the sum $ <var:v> \times <nat:20> + <var:C> \times <nat:454> + <nat:398> \times <var:b> + <nat:176> \times <var:O> $ is guaranteed to be even . Remember that the positive integers $ <nat:20> $ , $ <nat:454> $ , $ <nat:398> $ , and likewise $ <nat:176> $ must be even . Therefore , the terms $ <var:v> \cdot <nat:20> $ , $ <var:C> \cdot <nat:454> $ , $ <nat:398> \cdot <var:b> $ , as well as $ <var:O> \cdot <nat:176> $ must be even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:O> <var:v> <var:b> <var:C> : nat , Nat . odd ( <nat:20> * <var:v> + <nat:454> * <var:C> + <nat:176> * <var:O> + <nat:398> * <var:b> + <nat:69> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } assert ( <genH> : Nat . even <nat:398> = true ) . { auto . } assert ( <genH> : Nat . even <nat:176> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:398> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:176> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:v> + <nat:454> * <var:C> + <nat:176> * <var:O> + <nat:398> * <var:b> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 