\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:t> $ , $ <var:R> $ , $ <var:a> $ , $ <var:s> $ , $ <var:c> $ , $ <var:T> $ , $ <var:L> $ , $ <var:b> \in \mathbb{N} $ larger than <nat:1> . We define that some natural number $ <var:k> $ is considered to be a <def:eight-composite> natural number if $ <var:k> = <var:R> \cdot <var:L> \cdot <var:T> \cdot <var:b> \cdot <var:t> \cdot <var:a> \cdot <var:s> \cdot <var:c> $ . \end{definition} \begin{theorem} The positive integer <nat:633600> is a <def:eight-composite> number . \end{theorem} \begin{proof} We prove $ <nat:633600> = <var:t> * <var:a> * <var:s> * <var:R> * <var:c> * <var:b> * <var:T> * <var:L> $ . Observe $ <var:L> \cdot <var:b> \cdot <var:c> \cdot <var:T> \cdot <var:s> \cdot <var:R> \cdot <var:t> \cdot <var:a> = <nat:633600> $ indicates $ <var:L> = <nat:10> $ , $ <var:R> = <nat:3> $ , $ <var:c> = <nat:8> $ , $ <var:b> = <nat:4> $ , $ <var:t> = <nat:11> $ , $ <var:T> = <nat:5> $ , $ <var:s> = <nat:6> $ , $ <var:a> = <nat:2> $ . What's more notice $ <nat:5> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:10> $ , $ <nat:3> $ , and $ <nat:6> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:k> : nat ) := exists <var:t> <var:R> <var:a> <var:s> <var:c> <var:T> <var:L> <var:b> : nat , ( <var:t> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:k> = <var:R> * <var:L> * <var:T> * <var:b> * <var:t> * <var:a> * <var:s> * <var:c> ) . Theorem <genP:1> : <def:eight-composite> <nat:633600> . Proof . unfold <def:eight-composite> . exists <nat:11> . exists <nat:3> . exists <nat:2> . exists <nat:6> . exists <nat:8> . exists <nat:5> . exists <nat:10> . exists <nat:4> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 