\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:M> * <nat:88> + <nat:348> * <var:K> + <var:P> * <nat:368> + <var:q> * <nat:188> + <nat:416> * <var:d> + <var:e> * <nat:70> + <nat:473> + <var:z> * <nat:484> + <nat:130> * <var:j> + <nat:54> * <var:V> + <var:J> * <nat:180> + <var:L> * <nat:374> $ is odd assuming all integers $ <var:V> $ , $ <var:z> $ , $ <var:d> $ , $ <var:j> $ , $ <var:M> $ , $ <var:q> $ , $ <var:P> $ , $ <var:J> $ , $ <var:e> $ , $ <var:K> $ , and $ <var:L> $ . \end{theorem} \begin{proof} We know the natural numbers $ <nat:180> $ , $ <nat:416> $ , $ <nat:188> $ , $ <nat:88> $ , $ <nat:484> $ , $ <nat:70> $ , as well as $ <nat:374> $ are known as even . Hence , the terms $ <nat:180> \times <var:J> $ , $ <nat:416> \times <var:d> $ , $ <var:q> \times <nat:188> $ , $ <var:M> \times <nat:88> $ , $ <var:z> \times <nat:484> $ , $ <var:e> \times <nat:70> $ , in addition to $ <nat:374> \times <var:L> $ is even too . In addition to this , the products $ <var:P> \times <nat:368> $ in addition to $ <nat:348> \times <var:K> $ are clearly even numbers in $ \mathbb{Z}^+ $ since multiplying between an even natural number with some number in $ \mathbb{Z}^+ $ is guaranteed to be even , which is proven from the fact the coefficients $ <nat:368> $ and likewise $ <nat:348> $ are guaranteed to be even . The term $ <var:V> \times <nat:54> $ is obviously even . This is proven from the knowledge the product of an even number with any natural is obviously an even element of $ \mathbb{Z}^+ $ , and is proven from the knowledge the number $ <nat:54> $ is known as an even element of $ \mathbb{Z}^+ $ . Recall that $ <var:j> \times <nat:130> $ is even from the fact the coefficient $ <nat:130> $ is clearly clearly an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:z> <var:d> <var:j> <var:M> <var:q> <var:P> <var:J> <var:e> <var:K> <var:L> : nat , Nat . odd ( <nat:88> * <var:M> + <nat:348> * <var:K> + <nat:368> * <var:P> + <nat:188> * <var:q> + <nat:416> * <var:d> + <nat:70> * <var:e> + <nat:484> * <var:z> + <nat:130> * <var:j> + <nat:54> * <var:V> + <nat:180> * <var:J> + <nat:374> * <var:L> + <nat:473> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:180> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:188> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:374> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:374> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:368> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 