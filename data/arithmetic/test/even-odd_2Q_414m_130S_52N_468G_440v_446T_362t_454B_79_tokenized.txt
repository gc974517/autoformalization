\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:454> * <var:B> + <var:N> * <nat:52> + <nat:468> * <var:G> + <nat:362> * <var:t> + <var:T> * <nat:446> + <nat:2> * <var:Q> + <var:m> * <nat:414> + <var:S> * <nat:130> + <nat:79> + <nat:440> * <var:v> $ is guaranteed to be odd taking any variables $ <var:m> $ , $ <var:v> $ , $ <var:B> $ , $ <var:S> $ , $ <var:N> $ , $ <var:G> $ , $ <var:T> $ , $ <var:t> $ , and $ <var:Q> $ . \end{theorem} \begin{proof} It can be justified that that the summation $ <var:T> * <nat:446> + <var:v> * <nat:440> + <var:S> * <nat:130> + <var:Q> * <nat:2> + <var:B> * <nat:454> + <var:t> * <nat:362> + <var:m> * <nat:414> + <nat:52> * <var:N> + <var:G> * <nat:468> + <nat:79> $ is obviously odd from the knowledge the summation $ <var:Q> * <nat:2> + <var:m> * <nat:414> + <var:S> * <nat:130> + <nat:52> * <var:N> + <var:G> * <nat:468> + <nat:440> * <var:v> + <nat:446> * <var:T> + <var:t> * <nat:362> + <nat:454> * <var:B> $ is known to be even . Take note the pairs $ <var:Q> <nat:2> $ , $ <nat:414> <var:m> $ , $ <nat:130> <var:S> $ , $ <nat:52> <var:N> $ , $ <var:G> <nat:468> $ , $ <var:v> <nat:440> $ , $ <nat:446> <var:T> $ , $ <var:t> <nat:362> $ , and also $ <var:B> <nat:454> $ must be even from the fact the positive integers $ <nat:2> $ , $ <nat:414> $ , $ <nat:130> $ , $ <nat:52> $ , $ <nat:468> $ , $ <nat:440> $ , $ <nat:446> $ , $ <nat:362> $ , and $ <nat:454> $ are known to be even . Notice $ <nat:79> $ is known as odd . The totaling between even positive integers collectively with an odd number in $ \mathbb{N} $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:v> <var:B> <var:S> <var:N> <var:G> <var:T> <var:t> <var:Q> : nat , Nat . odd ( <nat:454> * <var:B> + <nat:52> * <var:N> + <nat:468> * <var:G> + <nat:362> * <var:t> + <nat:446> * <var:T> + <nat:2> * <var:Q> + <nat:414> * <var:m> + <nat:130> * <var:S> + <nat:440> * <var:v> + <nat:79> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even <nat:362> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:B> + <nat:52> * <var:N> + <nat:468> * <var:G> + <nat:362> * <var:t> + <nat:446> * <var:T> + <nat:2> * <var:Q> + <nat:414> * <var:m> + <nat:130> * <var:S> + <nat:440> * <var:v> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:79> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 