\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:112> \cdot <var:h> + <var:t> \cdot <nat:148> + <nat:48> \cdot <var:i> + <var:d> \cdot <nat:436> + <nat:64> \cdot <var:g> + <var:K> \cdot <nat:426> + <nat:450> \cdot <var:S> + <nat:237> + <nat:278> \cdot <var:k> + <nat:110> \cdot <var:X> + <nat:440> \cdot <var:r> $ must be odd . \end{theorem} \begin{proof} We know $ <nat:237> $ is clearly odd . It can be proven that the summation $ <nat:426> * <var:K> + <nat:278> * <var:k> + <var:r> * <nat:440> + <nat:237> + <nat:112> * <var:h> + <nat:48> * <var:i> + <nat:450> * <var:S> + <var:g> * <nat:64> + <var:t> * <nat:148> + <var:X> * <nat:110> + <nat:436> * <var:d> $ must be odd . The coefficients $ <nat:450> $ , $ <nat:112> $ , $ <nat:148> $ , $ <nat:48> $ , plus $ <nat:278> $ are guaranteed to be even numbers in $ \mathbb{N} $ . Therefore , the products $ <var:S> \cdot <nat:450> $ , $ <nat:112> \cdot <var:h> $ , $ <nat:148> \cdot <var:t> $ , $ <var:i> \cdot <nat:48> $ , additionally $ <var:k> \cdot <nat:278> $ will be even additionally . Take note the leading terms $ <nat:436> $ , $ <nat:426> $ , and moreover $ <nat:110> $ will be even naturals . Thus , the pairs $ <var:d> \cdot <nat:436> $ , $ <var:K> \cdot <nat:426> $ , and $ <var:X> \cdot <nat:110> $ is guaranteed to be even as well . In addition , observe that the term $ <nat:64> \cdot <var:g> $ is known as an even element of $ \mathbb{Z}^+ $ from the knowledge the leading term $ <nat:64> $ is by its very nature an even element of $ \mathbb{N} $ . The term $ <nat:440> \cdot <var:r> $ is clearly even . This fact must be true from the knowledge taking the product between an even element of $ \mathbb{Z}^+ $ and some natural number is even . This holds by reason that the number $ <nat:440> $ is clearly an even integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:t> <var:i> <var:d> <var:g> <var:K> <var:S> <var:k> <var:X> <var:r> : nat , Nat . odd ( <nat:112> * <var:h> + <nat:148> * <var:t> + <nat:48> * <var:i> + <nat:436> * <var:d> + <nat:64> * <var:g> + <nat:426> * <var:K> + <nat:450> * <var:S> + <nat:278> * <var:k> + <nat:110> * <var:X> + <nat:440> * <var:r> + <nat:237> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:237> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even <nat:112> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:112> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:278> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 