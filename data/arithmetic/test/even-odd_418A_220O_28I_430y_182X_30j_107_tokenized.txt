\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:107> + <var:A> \times <nat:418> + <var:X> \times <nat:182> + <nat:30> \times <var:j> + <nat:430> \times <var:y> + <nat:220> \times <var:O> + <nat:28> \times <var:I> $ must be odd . \end{theorem} \begin{proof} Our claim must be true from the fact $ <var:A> <nat:418> + <var:O> <nat:220> + <var:I> <nat:28> + <nat:430> <var:y> + <var:X> <nat:182> + <var:j> <nat:30> $ is known as even . The terms $ <var:I> \times <nat:28> $ in addition to $ <var:j> \times <nat:30> $ are trivially even numbers . The pairs $ <var:A> \times <nat:418> $ , $ <nat:430> \times <var:y> $ , and $ <nat:220> \times <var:O> $ are obviously even . $ <var:X> \times <nat:182> $ is known as an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:X> <var:j> <var:y> <var:O> <var:I> : nat , Nat . odd ( <nat:418> * <var:A> + <nat:182> * <var:X> + <nat:30> * <var:j> + <nat:430> * <var:y> + <nat:220> * <var:O> + <nat:28> * <var:I> + <nat:107> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:28> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:220> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:A> + <nat:182> * <var:X> + <nat:30> * <var:j> + <nat:430> * <var:y> + <nat:220> * <var:O> + <nat:28> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 