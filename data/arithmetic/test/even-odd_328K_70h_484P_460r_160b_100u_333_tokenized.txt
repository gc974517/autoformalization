\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:333> + <nat:70> \times <var:h> + <nat:484> \times <var:P> + <nat:100> \times <var:u> + <nat:328> \times <var:K> + <nat:460> \times <var:r> + <var:b> \times <nat:160> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know that the addition of an even integer with an odd natural number is in itself an odd positive integer . Our claim is proven from the knowledge $ <nat:328> <var:K> + <var:h> <nat:70> + <nat:484> <var:P> + <var:r> <nat:460> + <nat:160> <var:b> + <var:u> <nat:100> $ is clearly even . Likewise , the whole numbers $ <nat:328> $ , $ <nat:70> $ , $ <nat:484> $ , $ <nat:460> $ , $ <nat:160> $ , plus $ <nat:100> $ will be even numbers in $ \mathbb{N} $ . Therefore , the products $ <var:K> \cdot <nat:328> $ , $ <var:h> \cdot <nat:70> $ , $ <var:P> \cdot <nat:484> $ , $ <nat:460> \cdot <var:r> $ , $ <nat:160> \cdot <var:b> $ , plus $ <var:u> \cdot <nat:100> $ must be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:P> <var:u> <var:K> <var:r> <var:b> : nat , Nat . odd ( <nat:70> * <var:h> + <nat:484> * <var:P> + <nat:100> * <var:u> + <nat:328> * <var:K> + <nat:460> * <var:r> + <nat:160> * <var:b> + <nat:333> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:h> + <nat:484> * <var:P> + <nat:100> * <var:u> + <nat:328> * <var:K> + <nat:460> * <var:r> + <nat:160> * <var:b> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 