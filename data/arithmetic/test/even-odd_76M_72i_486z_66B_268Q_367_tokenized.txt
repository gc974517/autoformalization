\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:i> * <nat:72> + <nat:367> + <var:z> * <nat:486> + <nat:76> * <var:M> + <nat:66> * <var:B> + <var:Q> * <nat:268> $ is guaranteed to be odd . \end{theorem} \begin{proof} $ <nat:367> + <nat:76> * <var:M> + <nat:66> * <var:B> + <var:Q> * <nat:268> + <nat:72> * <var:i> + <var:z> * <nat:486> $ is guaranteed to be odd from the knowledge the expression $ <nat:76> * <var:M> + <nat:72> * <var:i> + <nat:486> * <var:z> + <nat:66> * <var:B> + <var:Q> * <nat:268> $ is clearly even . The coefficient $ <nat:268> $ is obviously an even integer The number $ <nat:76> $ is known to be an even number In addition to this , take note the coefficient $ <nat:72> $ is even The coefficient $ <nat:66> $ is guaranteed to be an even natural number Further , recall the leading term $ <nat:486> $ is even Our result must be true from the fact the product of an even integer and any number will be even . Take note $ <nat:367> $ is guaranteed to be an odd integer . Recall the adding of even numbers in $ \mathbb{Z}^+ $ together with an odd element of $ \mathbb{N} $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:z> <var:M> <var:B> <var:Q> : nat , Nat . odd ( <nat:72> * <var:i> + <nat:486> * <var:z> + <nat:76> * <var:M> + <nat:66> * <var:B> + <nat:268> * <var:Q> + <nat:367> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:i> + <nat:486> * <var:z> + <nat:76> * <var:M> + <nat:66> * <var:B> + <nat:268> * <var:Q> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:367> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 