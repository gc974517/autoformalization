\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:x> * <nat:12> + <nat:321> + <var:p> * <nat:194> + <var:j> * <nat:402> + <nat:96> * <var:w> + <nat:246> * <var:N> + <nat:118> * <var:R> + <nat:8> * <var:e> $ is guaranteed to be odd . \end{theorem} \begin{proof} Take note the pairs $ <var:x> \cdot <nat:12> $ and moreover $ <nat:96> \cdot <var:w> $ are known as even since the product of an even natural with an arbitrary integer is by itself an even number . On top of this , the products $ <nat:402> \cdot <var:j> $ as well as $ <var:N> \cdot <nat:246> $ must be even naturals . $ <var:e> \cdot <nat:8> $ is obviously an even positive integer . This claim holds from the fact the multiplication of an even whole number and some natural must be even . Likewise , the pair $ <var:R> \cdot <nat:118> $ is guaranteed to be even . The term $ <var:p> \cdot <nat:194> $ is obviously an even number in $ \mathbb{N} $ as a consequence that taking the product between an even element of $ \mathbb{Z}^+ $ and any element of $ \mathbb{N} $ must be an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:p> <var:j> <var:w> <var:N> <var:R> <var:e> : nat , Nat . odd ( <nat:12> * <var:x> + <nat:194> * <var:p> + <nat:402> * <var:j> + <nat:96> * <var:w> + <nat:246> * <var:N> + <nat:118> * <var:R> + <nat:8> * <var:e> + <nat:321> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:12> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:402> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 