\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:o> \times <nat:474> + <nat:64> \times <var:f> + <nat:140> \times <var:M> + <var:v> \times <nat:260> + <nat:70> \times <var:m> + <nat:152> \times <var:g> + <nat:156> \times <var:E> + <nat:420> \times <var:q> + <nat:357> + <var:L> \times <nat:314> + <nat:494> \times <var:C> + <nat:274> \times <var:J> $ is guaranteed to be odd . \end{theorem} \begin{proof} The expression $ <var:g> <nat:152> + <nat:156> <var:E> + <nat:70> <var:m> + <var:o> <nat:474> + <var:f> <nat:64> + <nat:140> <var:M> + <var:q> <nat:420> + <nat:314> <var:L> + <var:J> <nat:274> + <var:C> <nat:494> + <nat:260> <var:v> $ is known to be even . Take note that the products $ <var:m> \cdot <nat:70> $ , $ <var:M> \cdot <nat:140> $ , $ <var:g> \cdot <nat:152> $ , $ <nat:494> \cdot <var:C> $ , $ <var:f> \cdot <nat:64> $ , $ <var:J> \cdot <nat:274> $ , $ <nat:156> \cdot <var:E> $ , as well as $ <nat:474> \cdot <var:o> $ must be even numbers as a consequence that the coefficients $ <nat:70> $ , $ <nat:140> $ , $ <nat:152> $ , $ <nat:494> $ , $ <nat:64> $ , $ <nat:274> $ , $ <nat:156> $ , and also $ <nat:474> $ must be even . Furthermore , the leading terms $ <nat:314> $ and moreover $ <nat:420> $ are known as even . As a consequence , the terms $ <var:L> \cdot <nat:314> $ additionally $ <var:q> \cdot <nat:420> $ is even as well . Take note that $ <nat:260> \cdot <var:v> $ is clearly even . This must be true by reason that the product of an even number in $ \mathbb{Z}^+ $ with any natural number will be even , which is proven from the fact the number $ <nat:260> $ is clearly even . This main result is proven because the product between even elements of $ \mathbb{Z}^+ $ and an arbitrary element of $ \mathbb{N} $ is guaranteed to be clearly an even whole number . We prove our proposition must be true . We know that $ <nat:357> $ is guaranteed to be an odd integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:f> <var:M> <var:v> <var:m> <var:g> <var:E> <var:q> <var:L> <var:C> <var:J> : nat , Nat . odd ( <nat:474> * <var:o> + <nat:64> * <var:f> + <nat:140> * <var:M> + <nat:260> * <var:v> + <nat:70> * <var:m> + <nat:152> * <var:g> + <nat:156> * <var:E> + <nat:420> * <var:q> + <nat:314> * <var:L> + <nat:494> * <var:C> + <nat:274> * <var:J> + <nat:357> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even <nat:152> = true ) . { auto . } assert ( <genH> : Nat . even <nat:494> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:152> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:o> + <nat:64> * <var:f> + <nat:140> * <var:M> + <nat:260> * <var:v> + <nat:70> * <var:m> + <nat:152> * <var:g> + <nat:156> * <var:E> + <nat:420> * <var:q> + <nat:314> * <var:L> + <nat:494> * <var:C> + <nat:274> * <var:J> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:357> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 