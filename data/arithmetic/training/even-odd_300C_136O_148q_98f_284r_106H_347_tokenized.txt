\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:300> \cdot <var:C> + <var:f> \cdot <nat:98> + <var:r> \cdot <nat:284> + <nat:347> + <nat:148> \cdot <var:q> + <nat:136> \cdot <var:O> + <var:H> \cdot <nat:106> $ is guaranteed to be odd . \end{theorem} \begin{proof} We use the assumption the knowledge that the formula $ <var:r> \cdot <nat:284> + <nat:98> \cdot <var:f> + <var:O> \cdot <nat:136> + <nat:148> \cdot <var:q> + <nat:300> \cdot <var:C> + <var:H> \cdot <nat:106> $ is obviously even . The products $ <nat:284> <var:r> $ , $ <var:q> <nat:148> $ , $ <var:f> <nat:98> $ , $ <nat:300> <var:C> $ , and likewise $ <var:O> <nat:136> $ are even integers from the fact the leading terms $ <nat:284> $ , $ <nat:148> $ , $ <nat:98> $ , $ <nat:300> $ , and also $ <nat:136> $ are known to be even elements of $ \mathbb{N} $ . We know that the leading term $ <nat:106> $ is known as even . In consequence , the pair $ <var:H> <nat:106> $ is guaranteed to be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:f> <var:r> <var:q> <var:O> <var:H> : nat , Nat . odd ( <nat:300> * <var:C> + <nat:98> * <var:f> + <nat:284> * <var:r> + <nat:148> * <var:q> + <nat:136> * <var:O> + <nat:106> * <var:H> + <nat:347> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:C> + <nat:98> * <var:f> + <nat:284> * <var:r> + <nat:148> * <var:q> + <nat:136> * <var:O> + <nat:106> * <var:H> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 