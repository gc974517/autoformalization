\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:M> \times <nat:404> + <nat:278> \times <var:r> + <nat:136> \times <var:Q> + <var:X> \times <nat:366> + <nat:203> + <nat:122> \times <var:g> + <nat:426> \times <var:A> + <nat:382> \times <var:a> + <var:P> \times <nat:64> $ is odd . \end{theorem} \begin{proof} It can be proven that $ <nat:382> \cdot <var:a> + <nat:136> \cdot <var:Q> + <nat:203> + <nat:404> \cdot <var:M> + <nat:366> \cdot <var:X> + <nat:122> \cdot <var:g> + <var:A> \cdot <nat:426> + <nat:64> \cdot <var:P> + <nat:278> \cdot <var:r> $ is guaranteed to be odd . Recall that $ <nat:203> $ is clearly odd . Notice the coefficient $ <nat:426> $ is even In addition , recall that the positive integers $ <nat:136> $ as well as $ <nat:366> $ are obviously even positive integers The coefficients $ <nat:64> $ , $ <nat:382> $ , $ <nat:122> $ , as well as $ <nat:404> $ must be even integers The positive integer $ <nat:278> $ is guaranteed to be an even number \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:r> <var:Q> <var:X> <var:g> <var:A> <var:a> <var:P> : nat , Nat . odd ( <nat:404> * <var:M> + <nat:278> * <var:r> + <nat:136> * <var:Q> + <nat:366> * <var:X> + <nat:122> * <var:g> + <nat:426> * <var:A> + <nat:382> * <var:a> + <nat:64> * <var:P> + <nat:203> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:203> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:122> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 