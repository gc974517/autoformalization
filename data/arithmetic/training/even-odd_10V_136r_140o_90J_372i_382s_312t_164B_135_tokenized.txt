\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:V> * <nat:10> + <var:r> * <nat:136> + <nat:140> * <var:o> + <nat:90> * <var:J> + <var:i> * <nat:372> + <nat:382> * <var:s> + <var:t> * <nat:312> + <var:B> * <nat:164> + <nat:135> $ must be odd . \end{theorem} \begin{proof} The terms $ <var:J> \times <nat:90> $ , $ <nat:312> \times <var:t> $ , $ <var:r> \times <nat:136> $ , and also $ <var:o> \times <nat:140> $ will be even elements of $ \mathbb{N} $ . This claim must be true because the product of an even whole number and some integer will be even . We know that $ <nat:164> \times <var:B> $ is trivially even . Further , $ <var:V> \times <nat:10> $ is even . $ <nat:372> \times <var:i> $ is clearly an even element of $ \mathbb{N} $ . This claim must be true by reason that multiplying between an even number and some number in $ \mathbb{N} $ will be even . $ <nat:382> \times <var:s> $ is guaranteed to be an even whole number . This fact must be true from the knowledge multiplying of an even integer and an arbitrary positive integer is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:r> <var:o> <var:J> <var:i> <var:s> <var:t> <var:B> : nat , Nat . odd ( <nat:10> * <var:V> + <nat:136> * <var:r> + <nat:140> * <var:o> + <nat:90> * <var:J> + <nat:372> * <var:i> + <nat:382> * <var:s> + <nat:312> * <var:t> + <nat:164> * <var:B> + <nat:135> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:90> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 