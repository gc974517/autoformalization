\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If and only if we get $ <var:a> = <var:F> \times <var:X> \times <var:N> \times <var:K> \times <var:g> \times <var:f> \times <var:t> $ with some integer $ <var:a> $ as well as such that $ <var:t> $ , $ <var:f> $ , $ <var:K> $ , $ <var:g> $ , $ <var:F> $ , $ <var:N> $ and $ <var:X> \geq <nat:2> $ with some $ <var:f> $ , $ <var:F> $ , $ <var:g> $ , $ <var:N> $ , $ <var:t> $ , $ <var:X> $ , $ <var:K> \in \mathbb{N} $ , say that $ <var:a> $ is a <def:seven-composite> whole number . \end{definition} \begin{theorem} $ <var:a> = <nat:623700> $ is <def:seven-composite> . \end{theorem} \begin{proof} Remember a <def:seven-composite> integer is the product between whole numbers $ <var:t> $ , $ <var:f> $ , $ <var:K> $ , $ <var:N> $ , $ <var:X> $ , $ <var:F> $ and $ <var:g> $ greater than <nat:1> . Note $ <nat:11> \times <nat:3> \times <nat:6> \times <nat:9> \times <nat:10> \times <nat:5> \times <nat:7> = <nat:623700> $ . Similarly notice that $ <nat:5> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:6> $ , $ <nat:9> $ are larger than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:a> : nat ) := exists <var:f> <var:F> <var:g> <var:N> <var:t> <var:X> <var:K> : nat , ( <var:a> = <var:F> * <var:X> * <var:N> * <var:K> * <var:g> * <var:f> * <var:t> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:623700> . Proof . unfold <def:seven-composite> . exists <nat:5> . exists <nat:6> . exists <nat:11> . exists <nat:10> . exists <nat:3> . exists <nat:7> . exists <nat:9> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 