\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming that we get $ <var:V> = <var:o> \times <var:c> \times <var:Y> \times <var:E> \times <var:h> \times <var:x> \times <var:A> \times <var:B> \times <var:i> $ given $ <var:V> \in \mathbb{N} $ and where $ <var:i> $ , $ <var:c> $ , $ <var:A> $ , $ <var:o> $ , $ <var:h> $ , $ <var:x> $ , $ <var:E> $ , $ <var:Y> $ and $ <var:B> \geq <nat:2> $ , claim that $ <var:V> $ is a <def:nine-composite> number given some $ <var:Y> $ , $ <var:A> $ , $ <var:E> $ , $ <var:B> $ , $ <var:i> $ , $ <var:c> $ , $ <var:o> $ , $ <var:x> $ , $ <var:h> \in \mathbb{Z}^+ $ . Then the natural number <nat:5443200> is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Let $ <var:x> = <nat:6> $ , $ <var:i> = <nat:4> $ , $ <var:h> = <nat:12> $ , $ <var:c> = <nat:3> $ , $ <var:o> = <nat:10> $ , $ <var:B> = <nat:2> $ , $ <var:E> = <nat:7> $ , $ <var:Y> = <nat:5> $ , $ <var:A> = <nat:9> $ . What's more observe that $ <var:i> = <nat:4> $ , $ <var:Y> = <nat:5> $ , $ <var:c> = <nat:3> $ , $ <var:B> = <nat:2> $ , $ <var:h> = <nat:12> $ , $ <var:o> = <nat:10> $ , $ <var:A> = <nat:9> $ , $ <var:x> = <nat:6> $ , and $ <var:E> = <nat:7> $ are more than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:V> : nat ) := exists <var:Y> <var:A> <var:E> <var:B> <var:i> <var:c> <var:o> <var:x> <var:h> : nat , ( <var:V> = <var:o> * <var:c> * <var:Y> * <var:E> * <var:h> * <var:x> * <var:A> * <var:B> * <var:i> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:5443200> . Proof . unfold <def:nine-composite> . exists <nat:5> . exists <nat:9> . exists <nat:7> . exists <nat:2> . exists <nat:4> . exists <nat:3> . exists <nat:10> . exists <nat:6> . exists <nat:12> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 