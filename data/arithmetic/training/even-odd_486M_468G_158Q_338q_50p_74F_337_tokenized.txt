\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every $ <var:Q> $ , $ <var:G> $ , $ <var:F> $ , $ <var:p> $ , $ <var:q> $ , and $ <var:M> \in \mathbb{Z}^+ $ the expression $ <var:Q> <nat:158> + <nat:337> + <nat:50> <var:p> + <nat:468> <var:G> + <var:M> <nat:486> + <nat:338> <var:q> + <nat:74> <var:F> $ is guaranteed to be odd . \end{theorem} \begin{proof} Remember the positive integers $ <nat:486> $ , $ <nat:158> $ , $ <nat:50> $ , as well as $ <nat:74> $ are obviously even . Thus , the products $ <var:M> \cdot <nat:486> $ , $ <nat:158> \cdot <var:Q> $ , $ <var:p> \cdot <nat:50> $ , and also $ <var:F> \cdot <nat:74> $ is guaranteed to be even in addition . Notice the term $ <var:G> \cdot <nat:468> $ is clearly an even whole number . This fact holds because the product of an even element of $ \mathbb{Z}^+ $ with any number in $ \mathbb{N} $ must be even in addition to the whole number $ <nat:468> $ is known as an even whole number . The product $ <var:q> \cdot <nat:338> $ is clearly an even number from the fact the coefficient $ <nat:338> $ is trivially even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:G> <var:F> <var:p> <var:q> <var:M> : nat , Nat . odd ( <nat:158> * <var:Q> + <nat:50> * <var:p> + <nat:468> * <var:G> + <nat:486> * <var:M> + <nat:338> * <var:q> + <nat:74> * <var:F> + <nat:337> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even <nat:74> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:74> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 