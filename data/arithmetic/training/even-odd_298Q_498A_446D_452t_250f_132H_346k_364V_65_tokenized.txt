\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Q> \times <nat:298> + <nat:498> \times <var:A> + <nat:346> \times <var:k> + <nat:250> \times <var:f> + <nat:65> + <nat:364> \times <var:V> + <nat:452> \times <var:t> + <nat:132> \times <var:H> + <var:D> \times <nat:446> $ is odd . \end{theorem} \begin{proof} We use the fact that the formula $ <var:Q> \cdot <nat:298> + <var:f> \cdot <nat:250> + <nat:346> \cdot <var:k> + <nat:364> \cdot <var:V> + <var:D> \cdot <nat:446> + <var:t> \cdot <nat:452> + <nat:498> \cdot <var:A> + <nat:65> + <var:H> \cdot <nat:132> $ is odd by reason that $ <nat:364> * <var:V> + <var:Q> * <nat:298> + <nat:346> * <var:k> + <nat:446> * <var:D> + <nat:250> * <var:f> + <var:H> * <nat:132> + <nat:452> * <var:t> + <nat:498> * <var:A> $ is obviously even . We know the coefficients $ <nat:452> $ and moreover $ <nat:364> $ are even integers . In consequence , the products $ <nat:452> \times <var:t> $ and also $ <var:V> \times <nat:364> $ will be even in addition . Building on , the positive integers $ <nat:346> $ , $ <nat:250> $ , plus $ <nat:298> $ will be even numbers in $ \mathbb{N} $ . So , the terms $ <var:k> \times <nat:346> $ , $ <nat:250> \times <var:f> $ , in addition to $ <var:Q> \times <nat:298> $ must be even also . The terms $ <var:H> \times <nat:132> $ plus $ <nat:446> \times <var:D> $ are known to be even . This fact must be true as a consequence that the leading terms $ <nat:132> $ and also $ <nat:446> $ must be even . The leading term $ <nat:498> $ is known to be even . For this reason , the pair $ <nat:498> \times <var:A> $ is guaranteed to be even in addition . The proposition is true because the product of an even element of $ \mathbb{N} $ with some natural number is an even whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:A> <var:k> <var:f> <var:V> <var:t> <var:H> <var:D> : nat , Nat . odd ( <nat:298> * <var:Q> + <nat:498> * <var:A> + <nat:346> * <var:k> + <nat:250> * <var:f> + <nat:364> * <var:V> + <nat:452> * <var:t> + <nat:132> * <var:H> + <nat:446> * <var:D> + <nat:65> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:298> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:132> = true ) . { auto . } assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:Q> + <nat:498> * <var:A> + <nat:346> * <var:k> + <nat:250> * <var:f> + <nat:364> * <var:V> + <nat:452> * <var:t> + <nat:132> * <var:H> + <nat:446> * <var:D> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 