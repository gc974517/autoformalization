\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:363> + <var:O> \times <nat:394> + <nat:460> \times <var:G> $ is odd taking unknowns $ <var:G> $ , and $ <var:O> $ . \end{theorem} \begin{proof} We check the sum $ <nat:363> + <var:O> <nat:394> + <var:G> <nat:460> $ is known as odd as a consequence that the sum $ <nat:394> <var:O> + <var:G> <nat:460> $ is obviously even . We know $ <var:G> \times <nat:460> $ is known to be an even element of $ \mathbb{Z}^+ $ from the knowledge taking the product of an even element of $ \mathbb{Z}^+ $ and a number is guaranteed to be by definition an even number in $ \mathbb{Z}^+ $ . This fact is proven by reason that the number $ <nat:460> $ is known as even . See the product $ <nat:394> \times <var:O> $ is known as an even element of $ \mathbb{Z}^+ $ . This fact must be true from the fact the multiplication of an even element of $ \mathbb{N} $ with some natural number is by definition an even integer . This fact holds from the knowledge the natural number $ <nat:394> $ is trivially even . The sum $ <nat:460> * <var:G> + <nat:394> * <var:O> $ must be by itself even from the fact multiplying between an even number in $ \mathbb{N} $ and an arbitrary number must be an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:O> : nat , Nat . odd ( <nat:394> * <var:O> + <nat:460> * <var:G> + <nat:363> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:O> + <nat:460> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 