\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:m> $ , $ <var:C> $ , $ <var:P> $ , $ <var:j> $ , $ <var:l> $ , $ <var:Y> $ , and $ <var:n> $ as numbers so that $ <var:C> $ , $ <var:Y> $ , $ <var:P> $ , $ <var:j> $ , $ <var:l> $ , $ <var:m> $ and $ <var:n> $ greater than <nat:1> plus so that $ <nat:1267200> $ is the same as $ <var:m> \times <var:C> \times <var:n> \times <var:P> \times <var:j> \times <var:Y> \times <var:l> $ . \end{theorem} \begin{proof} Take $ <var:P> = <nat:8> $ , $ <var:j> = <nat:5> $ , $ <var:n> = <nat:10> $ , $ <var:m> = <nat:11> $ , $ <var:Y> = <nat:4> $ , $ <var:C> = <nat:12> $ and $ <var:l> = <nat:6> $ . We present $ <var:j> $ , $ <var:Y> $ , $ <var:m> $ , $ <var:l> $ , $ <var:C> $ , $ <var:n> $ and $ <var:P> $ are larger than <nat:1> as well as <nat:1267200> is the product of some natural numbers $ <var:P> $ , $ <var:n> $ , $ <var:j> $ , $ <var:C> $ , $ <var:m> $ , $ <var:Y> $ , $ <var:l> $ . Note $ <nat:4> $ , $ <nat:5> $ , $ <nat:8> $ , $ <nat:12> $ , $ <nat:10> $ , $ <nat:11> $ and $ <nat:6> $ are larger than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:m> <var:C> <var:P> <var:j> <var:l> <var:Y> <var:n> : nat , ( <var:C> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <nat:1267200> = <var:m> * <var:C> * <var:n> * <var:P> * <var:j> * <var:Y> * <var:l> ) . Proof . exists <nat:11> . exists <nat:12> . exists <nat:8> . exists <nat:5> . exists <nat:6> . exists <nat:4> . exists <nat:10> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 