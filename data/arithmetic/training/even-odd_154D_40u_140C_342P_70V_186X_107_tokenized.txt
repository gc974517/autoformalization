\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:C> \times <nat:140> + <nat:342> \times <var:P> + <nat:154> \times <var:D> + <var:u> \times <nat:40> + <var:X> \times <nat:186> + <nat:70> \times <var:V> + <nat:107> $ is guaranteed to be odd using some $ <var:P> $ , $ <var:C> $ , $ <var:X> $ , $ <var:u> $ , $ <var:V> $ , and $ <var:D> $ . \end{theorem} \begin{proof} The terms $ <nat:186> <var:X> $ , $ <nat:342> <var:P> $ , additionally $ <nat:70> <var:V> $ are guaranteed to be even from the knowledge multiplying between an even number in $ \mathbb{Z}^+ $ with some element of $ \mathbb{Z}^+ $ is guaranteed to be an even element of $ \mathbb{N} $ in addition to the integers $ <nat:186> $ , $ <nat:342> $ , plus $ <nat:70> $ are even . Furthermore , see that the products $ <nat:40> <var:u> $ and $ <nat:140> <var:C> $ are known to be even . This holds as a consequence that the whole numbers $ <nat:40> $ as well as $ <nat:140> $ are trivially even . Building on , the coefficient $ <nat:154> $ is trivially an even element of $ \mathbb{N} $ . For this reason , the product $ <nat:154> <var:D> $ is guaranteed to be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:C> <var:X> <var:u> <var:V> <var:D> : nat , Nat . odd ( <nat:140> * <var:C> + <nat:342> * <var:P> + <nat:154> * <var:D> + <nat:40> * <var:u> + <nat:186> * <var:X> + <nat:70> * <var:V> + <nat:107> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 