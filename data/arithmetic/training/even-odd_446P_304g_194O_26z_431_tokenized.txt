\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming $ <var:O> $ , $ <var:P> $ , $ <var:z> $ , and $ <var:g> \in \mathbb{N} $ $ <nat:26> * <var:z> + <nat:431> + <nat:446> * <var:P> + <var:O> * <nat:194> + <nat:304> * <var:g> $ is guaranteed to be odd . \end{theorem} \begin{proof} The products $ <var:P> \times <nat:446> $ plus $ <nat:194> \times <var:O> $ are even numbers in $ \mathbb{N} $ . This fact is true from the fact the leading terms $ <nat:446> $ and also $ <nat:194> $ are guaranteed to be even numbers in $ \mathbb{N} $ . Remember the positive integer $ <nat:304> $ is known as even . Thus , the term $ <nat:304> \times <var:g> $ will be even too . Further , we know that the term $ <var:z> \times <nat:26> $ is obviously an even element of $ \mathbb{Z}^+ $ as a consequence that taking the product of an even integer with any number must be even and moreover the natural number $ <nat:26> $ is trivially obviously an even positive integer . It can be verified that the formula $ <var:P> \cdot <nat:446> + <var:g> \cdot <nat:304> + <var:O> \cdot <nat:194> + <nat:431> + <nat:26> \cdot <var:z> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:O> <var:P> <var:z> <var:g> : nat , Nat . odd ( <nat:26> * <var:z> + <nat:446> * <var:P> + <nat:194> * <var:O> + <nat:304> * <var:g> + <nat:431> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 