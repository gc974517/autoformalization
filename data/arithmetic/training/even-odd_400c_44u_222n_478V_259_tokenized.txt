\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming all unknowns $ <var:c> $ , $ <var:V> $ , $ <var:u> $ , and $ <var:n> $ $ <nat:259> + <var:c> * <nat:400> + <var:u> * <nat:44> + <nat:478> * <var:V> + <nat:222> * <var:n> $ will be odd . \end{theorem} \begin{proof} Since the totaling of even natural numbers concurrently and an odd element of $ \mathbb{N} $ will be in itself an odd natural , thus the claim must be true . Recall that $ <nat:259> $ is clearly an odd natural number . $ <var:u> \cdot <nat:44> + <nat:400> \cdot <var:c> + <var:V> \cdot <nat:478> + <var:n> \cdot <nat:222> + <nat:259> $ is guaranteed to be odd by reason that the expression $ <nat:400> \times <var:c> + <var:u> \times <nat:44> + <var:n> \times <nat:222> + <var:V> \times <nat:478> $ is clearly even . Further , the pairs $ <nat:400> \times <var:c> $ , $ <nat:44> \times <var:u> $ , $ <var:n> \times <nat:222> $ , in addition to $ <var:V> \times <nat:478> $ are even from the knowledge the integers $ <nat:400> $ , $ <nat:44> $ , $ <nat:222> $ , plus $ <nat:478> $ are guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:V> <var:u> <var:n> : nat , Nat . odd ( <nat:400> * <var:c> + <nat:44> * <var:u> + <nat:478> * <var:V> + <nat:222> * <var:n> + <nat:259> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:259> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:c> + <nat:44> * <var:u> + <nat:478> * <var:V> + <nat:222> * <var:n> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 