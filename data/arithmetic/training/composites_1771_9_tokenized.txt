\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We claim that when there are $ <var:y> $ , $ <var:K> $ , $ <var:O> $ , $ <var:s> $ , $ <var:r> $ , $ <var:t> $ , $ <var:F> $ , $ <var:f> $ , $ <var:W> \in \mathbb{Z}^+ $ larger than or equivalent to <nat:2> . Say that $ <var:a> \in \mathbb{N} $ is <def:nine-composite> when $ <var:a> = <var:F> \cdot <var:s> \cdot <var:t> \cdot <var:f> \cdot <var:y> \cdot <var:K> \cdot <var:W> \cdot <var:r> \cdot <var:O> $ . Consequently $ <nat:6220800> = <var:a> $ is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Assume $ <var:t> = <nat:8> $ , $ <var:y> = <nat:10> $ , $ <var:f> = <nat:9> $ , $ <var:F> = <nat:3> $ , $ <var:s> = <nat:6> $ , $ <var:K> = <nat:5> $ , $ <var:W> = <nat:4> $ , $ <var:O> = <nat:2> $ , $ <var:r> = <nat:12> $ . What's more notice $ <nat:5> $ , $ <nat:8> $ , $ <nat:6> $ , $ <nat:12> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:4> $ , and $ <nat:10> $ are greater than or equivalent to <nat:2> . This yields <nat:6220800> is a <def:nine-composite> natural number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:a> : nat ) := exists <var:y> <var:K> <var:O> <var:s> <var:r> <var:t> <var:F> <var:f> <var:W> : nat , ( <var:y> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:a> = <var:F> * <var:s> * <var:t> * <var:f> * <var:y> * <var:K> * <var:W> * <var:r> * <var:O> ) . Theorem <genP:1> : <def:nine-composite> <nat:6220800> . Proof . unfold <def:nine-composite> . exists <nat:10> . exists <nat:5> . exists <nat:2> . exists <nat:6> . exists <nat:12> . exists <nat:8> . exists <nat:3> . exists <nat:9> . exists <nat:4> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 