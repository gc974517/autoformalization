\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Let $ <var:u> $ , $ <var:E> $ , $ <var:t> $ , $ <var:F> $ , $ <var:U> \in \mathbb{N} $ . Say that some $ <var:H> $ is a <def:five-composite> integer when $ <var:U> \times <var:t> \times <var:u> \times <var:E> \times <var:F> = <var:H> $ and greater than or equal to <nat:2> . \end{definition} \begin{theorem} $ <var:H> = <nat:71280> $ is a <def:five-composite> positive integer . \end{theorem} \begin{proof} Assume $ <var:F> = <nat:9> $ , $ <var:U> = <nat:11> $ , $ <var:t> = <nat:6> $ , $ <var:E> = <nat:12> $ and $ <var:u> = <nat:10> $ . We show <nat:71280> is the product of some positive integers $ <var:t> $ , $ <var:U> $ , $ <var:u> $ , $ <var:E> $ and $ <var:F> $ plus $ <var:t> $ , $ <var:U> $ , $ <var:F> $ , $ <var:E> $ and $ <var:u> $ are larger than or equivalent to <nat:2> . Note $ <nat:71280> = <var:U> \times <var:t> \times <var:u> \times <var:F> \times <var:E> $ . Plus notice that $ <var:t> = <nat:6> $ , $ <var:u> = <nat:10> $ , $ <var:F> = <nat:9> $ , $ <var:E> = <nat:12> $ , $ <var:U> = <nat:11> $ are more than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:H> : nat ) := exists <var:u> <var:E> <var:t> <var:F> <var:U> : nat , ( <var:U> * <var:t> * <var:u> * <var:E> * <var:F> = <var:H> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:71280> . Proof . unfold <def:five-composite> . exists <nat:10> . exists <nat:12> . exists <nat:6> . exists <nat:9> . exists <nat:11> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 