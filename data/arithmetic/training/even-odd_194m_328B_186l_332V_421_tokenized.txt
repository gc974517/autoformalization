\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:194> \times <var:m> + <nat:186> \times <var:l> + <nat:421> + <nat:328> \times <var:B> + <var:V> \times <nat:332> $ is guaranteed to be odd . \end{theorem} \begin{proof} We utilize the understanding that the summation $ <nat:328> * <var:B> + <nat:421> + <var:V> * <nat:332> + <nat:186> * <var:l> + <var:m> * <nat:194> $ is odd by reason that the sum $ <nat:186> <var:l> + <nat:332> <var:V> + <var:m> <nat:194> + <var:B> <nat:328> $ is trivially even . We know the natural numbers $ <nat:186> $ , $ <nat:332> $ , $ <nat:194> $ , $ <nat:328> $ , are known as even . Accordingly , the products $ <nat:186> \times <var:l> $ , $ <var:V> \times <nat:332> $ , $ <var:m> \times <nat:194> $ , $ <var:B> \times <nat:328> $ , is guaranteed to be even as well . It can be demonstrated that $ <var:m> \cdot <nat:194> + <nat:328> \cdot <var:B> + <nat:421> + <nat:186> \cdot <var:l> + <var:V> \cdot <nat:332> $ must be odd . Notice $ <nat:421> $ is guaranteed to be an odd element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:l> <var:B> <var:V> : nat , Nat . odd ( <nat:194> * <var:m> + <nat:186> * <var:l> + <nat:328> * <var:B> + <nat:332> * <var:V> + <nat:421> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:m> + <nat:186> * <var:l> + <nat:328> * <var:B> + <nat:332> * <var:V> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:421> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 