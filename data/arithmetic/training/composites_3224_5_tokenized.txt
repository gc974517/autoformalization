\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If and only if we get so that $ <var:k> $ , $ <var:Q> $ , $ <var:U> $ , $ <var:o> $ , and $ <var:h> > <nat:1> $ such that given $ <var:V> \in \mathbb{N} $ , $ <var:V> = <var:U> \times <var:Q> \times <var:k> \times <var:h> \times <var:o> $ with some $ <var:k> $ , $ <var:Q> $ , $ <var:U> $ , $ <var:h> $ , $ <var:o> \in \mathbb{N} $ , let that $ <var:V> $ is <def:five-composite> . \end{definition} \begin{theorem} The positive integer <nat:33600> is <def:five-composite> . \end{theorem} \begin{proof} Recall that <nat:33600> is a <def:five-composite> positive integer with the condition it is the product of whole numbers $ <var:h> $ , $ <var:k> $ , $ <var:Q> $ , $ <var:o> $ , $ <var:U> $ more than <nat:1> . Allow $ <var:U> = <nat:5> $ , $ <var:Q> = <nat:7> $ , $ <var:k> = <nat:12> $ , $ <var:o> = <nat:8> $ , $ <var:h> = <nat:10> $ . We verify our theory holds for By reason of $ <var:k> = <nat:12> $ , $ <var:U> = <nat:5> $ , $ <var:h> = <nat:10> $ , $ <var:Q> = <nat:7> $ , and $ <var:o> = <nat:8> $ are more than <nat:1> . Thus , <nat:33600> is <def:five-composite> has been validated . So , $ <var:k> $ , $ <var:Q> $ , $ <var:h> $ , $ <var:U> $ , $ <var:o> > <nat:1> $ as well as <nat:33600> is the product between $ <var:U> $ , $ <var:h> $ , $ <var:k> $ , $ <var:Q> $ , and $ <var:o> \in \mathbb{Z}^+ $ is verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:V> : nat ) := exists <var:k> <var:Q> <var:U> <var:h> <var:o> : nat , ( <var:k> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:V> = <var:U> * <var:Q> * <var:k> * <var:h> * <var:o> ) . Theorem <genP:1> : <def:five-composite> <nat:33600> . Proof . unfold <def:five-composite> . exists <nat:12> . exists <nat:7> . exists <nat:5> . exists <nat:10> . exists <nat:8> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 