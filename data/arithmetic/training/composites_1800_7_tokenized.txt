\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:B> $ , $ <var:T> $ , $ <var:t> $ , $ <var:U> $ , $ <var:y> $ , $ <var:H> $ , $ <var:j> $ are positive integers where $ <var:U> $ , $ <var:T> $ , $ <var:t> $ , $ <var:B> $ , $ <var:j> $ , $ <var:H> $ , $ <var:y> $ greater than or equal to <nat:2> plus so that the number <nat:1710720> is the product between numbers $ <var:B> $ , $ <var:T> $ , $ <var:t> $ , $ <var:U> $ , $ <var:y> $ , $ <var:H> $ , and $ <var:j> $ . \end{theorem} \begin{proof} Assume $ <var:U> = <nat:11> $ , $ <var:T> = <nat:9> $ , $ <var:B> = <nat:6> $ , $ <var:t> = <nat:12> $ , $ <var:y> = <nat:10> $ , $ <var:H> = <nat:8> $ , $ <var:j> = <nat:3> $ . Note that $ <nat:9> \times <nat:12> \times <nat:6> \times <nat:11> \times <nat:8> \times <nat:10> \times <nat:3> = <nat:1710720> $ . Plus note $ <var:H> = <nat:8> $ , $ <var:y> = <nat:10> $ , $ <var:B> = <nat:6> $ , $ <var:t> = <nat:12> $ , $ <var:T> = <nat:9> $ , $ <var:j> = <nat:3> $ and $ <var:U> = <nat:11> $ are greater than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:B> <var:T> <var:t> <var:U> <var:y> <var:H> <var:j> : nat , ( <var:U> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <nat:1710720> = <var:B> * <var:T> * <var:t> * <var:U> * <var:y> * <var:H> * <var:j> ) . Proof . exists <nat:6> . exists <nat:9> . exists <nat:12> . exists <nat:11> . exists <nat:10> . exists <nat:8> . exists <nat:3> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 