\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:496> \cdot <var:g> + <nat:36> \cdot <var:j> + <nat:330> \cdot <var:A> + <var:T> \cdot <nat:480> + <nat:281> + <var:x> \cdot <nat:140> + <nat:158> \cdot <var:B> + <var:s> \cdot <nat:112> + <var:h> \cdot <nat:358> $ must be odd . \end{theorem} \begin{proof} We know that $ <nat:281> $ is clearly odd . We demonstrate the proposition is proven . We make use the understanding that the expression $ <var:B> \cdot <nat:158> + <nat:281> + <nat:36> \cdot <var:j> + <nat:480> \cdot <var:T> + <var:x> \cdot <nat:140> + <var:g> \cdot <nat:496> + <nat:112> \cdot <var:s> + <nat:330> \cdot <var:A> + <nat:358> \cdot <var:h> $ is clearly odd by reason that the expression $ <var:A> \times <nat:330> + <var:h> \times <nat:358> + <nat:140> \times <var:x> + <var:T> \times <nat:480> + <nat:112> \times <var:s> + <nat:36> \times <var:j> + <nat:496> \times <var:g> + <nat:158> \times <var:B> $ is obviously even . $ <var:g> \cdot <nat:496> + <nat:158> \cdot <var:B> + <nat:140> \cdot <var:x> + <nat:480> \cdot <var:T> + <var:j> \cdot <nat:36> + <var:h> \cdot <nat:358> + <var:s> \cdot <nat:112> + <var:A> \cdot <nat:330> $ must be even since the product between an even number in $ \mathbb{N} $ with any number will be an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:j> <var:A> <var:T> <var:x> <var:B> <var:s> <var:h> : nat , Nat . odd ( <nat:496> * <var:g> + <nat:36> * <var:j> + <nat:330> * <var:A> + <nat:480> * <var:T> + <nat:140> * <var:x> + <nat:158> * <var:B> + <nat:112> * <var:s> + <nat:358> * <var:h> + <nat:281> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:281> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:g> + <nat:36> * <var:j> + <nat:330> * <var:A> + <nat:480> * <var:T> + <nat:140> * <var:x> + <nat:158> * <var:B> + <nat:112> * <var:s> + <nat:358> * <var:h> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 