\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} If and only if we get such that $ <var:i> $ , $ <var:e> $ , $ <var:Y> $ , $ <var:M> $ , $ <var:S> $ , $ <var:X> $ , and $ <var:k> > <nat:1> $ where with some whole number $ <var:m> $ , $ <var:Y> \times <var:i> \times <var:M> \times <var:X> \times <var:k> \times <var:S> \times <var:e> = <var:m> $ , define that $ <var:m> $ is a <def:seven-composite> integer assuming some natural numbers $ <var:S> $ , $ <var:i> $ , $ <var:Y> $ , $ <var:e> $ , $ <var:M> $ , $ <var:k> $ , $ <var:X> $ . Accordingly the natural number <nat:67200> is a <def:seven-composite> integer . \end{theorem} \begin{proof} We justify $ <var:Y> $ , $ <var:i> $ , $ <var:k> $ , $ <var:X> $ , $ <var:S> $ , $ <var:e> $ , $ <var:M> > <nat:1> $ and $ <nat:67200> = <var:e> * <var:S> * <var:i> * <var:Y> * <var:X> * <var:M> * <var:k> $ . Notice that $ <var:e> \cdot <var:S> \cdot <var:i> \cdot <var:k> \cdot <var:X> \cdot <var:Y> \cdot <var:M> = <nat:67200> $ indicates $ <var:S> = <nat:2> $ , $ <var:k> = <nat:3> $ , $ <var:M> = <nat:5> $ , $ <var:Y> = <nat:8> $ , $ <var:X> = <nat:10> $ , $ <var:e> = <nat:4> $ , and $ <var:i> = <nat:7> $ . Furthermore observe $ <nat:10> $ , $ <nat:8> $ , $ <nat:2> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:7> $ , $ <nat:3> > <nat:1> $ . This suggests the result is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:m> : nat ) := exists <var:S> <var:i> <var:Y> <var:e> <var:M> <var:k> <var:X> : nat , ( <var:i> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:M> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:Y> * <var:i> * <var:M> * <var:X> * <var:k> * <var:S> * <var:e> = <var:m> ) . Theorem <genP:1> : <def:seven-composite> <nat:67200> . Proof . unfold <def:seven-composite> . exists <nat:2> . exists <nat:7> . exists <nat:8> . exists <nat:4> . exists <nat:5> . exists <nat:3> . exists <nat:10> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 