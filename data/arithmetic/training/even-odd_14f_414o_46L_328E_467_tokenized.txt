\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:14> <var:f> + <var:E> <nat:328> + <nat:467> + <nat:414> <var:o> + <var:L> <nat:46> $ is guaranteed to be odd for every positive integers $ <var:L> $ , $ <var:f> $ , $ <var:E> $ , and $ <var:o> $ . \end{theorem} \begin{proof} Notice $ <nat:467> $ is obviously odd . We show the claim holds . We know the expression $ <var:f> <nat:14> + <nat:328> <var:E> + <nat:46> <var:L> + <nat:467> + <var:o> <nat:414> $ is odd because $ <nat:46> \cdot <var:L> + <var:E> \cdot <nat:328> + <var:f> \cdot <nat:14> + <nat:414> \cdot <var:o> $ is obviously even . What's more , the leading terms $ <nat:46> $ , $ <nat:328> $ , $ <nat:14> $ , plus $ <nat:414> $ are obviously even . In consequence , the pairs $ <var:L> <nat:46> $ , $ <nat:328> <var:E> $ , $ <nat:14> <var:f> $ , and moreover $ <var:o> <nat:414> $ will be even additionally . The sum $ <var:f> <nat:14> + <var:o> <nat:414> + <var:L> <nat:46> + <nat:328> <var:E> $ is guaranteed to be clearly even as a consequence that the addition between even elements of $ \mathbb{N} $ with an even number must be an even positive integer and also from the fact taking the product of an even number and any number must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:f> <var:E> <var:o> : nat , Nat . odd ( <nat:14> * <var:f> + <nat:328> * <var:E> + <nat:414> * <var:o> + <nat:46> * <var:L> + <nat:467> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:467> = true ) . { auto . } assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:f> + <nat:328> * <var:E> + <nat:414> * <var:o> + <nat:46> * <var:L> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 