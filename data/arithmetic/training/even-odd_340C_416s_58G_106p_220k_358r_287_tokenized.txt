\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all unknowns $ <var:r> $ , $ <var:C> $ , $ <var:s> $ , $ <var:G> $ , $ <var:p> $ , and $ <var:k> $ $ <var:C> * <nat:340> + <nat:416> * <var:s> + <var:G> * <nat:58> + <nat:106> * <var:p> + <var:k> * <nat:220> + <nat:358> * <var:r> + <nat:287> $ is odd . \end{theorem} \begin{proof} Notice that the leading terms $ <nat:340> $ , $ <nat:416> $ , $ <nat:58> $ , $ <nat:106> $ , $ <nat:220> $ , $ <nat:358> $ , are known to be even . Hence , the products $ <nat:340> <var:C> $ , $ <var:s> <nat:416> $ , $ <var:G> <nat:58> $ , $ <var:p> <nat:106> $ , $ <var:k> <nat:220> $ , $ <var:r> <nat:358> $ , is guaranteed to be even additionally . Notice $ <nat:287> $ is clearly an odd number in $ \mathbb{Z}^+ $ . The summing between even naturals concurrently and an odd integer is by definition an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:C> <var:s> <var:G> <var:p> <var:k> : nat , Nat . odd ( <nat:340> * <var:C> + <nat:416> * <var:s> + <nat:58> * <var:G> + <nat:106> * <var:p> + <nat:220> * <var:k> + <nat:358> * <var:r> + <nat:287> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:58> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:220> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:220> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:287> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 