\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that there are $ <var:X> $ , $ <var:C> $ , $ <var:x> $ , $ <var:g> $ , $ <var:i> $ , $ <var:h> $ , $ <var:A> \in \mathbb{Z}^+ $ take that $ <var:P> \in \mathbb{N} $ is a <def:seven-composite> integer if $ <var:C> \cdot <var:x> \cdot <var:X> \cdot <var:A> \cdot <var:g> \cdot <var:h> \cdot <var:i> = <var:P> $ plus factors are more than or equivalent to <nat:2> . \end{definition} \begin{theorem} The natural number <nat:226800> is <def:seven-composite> . \end{theorem} \begin{proof} Let $ <var:g> = <nat:9> $ , $ <var:A> = <nat:4> $ , $ <var:i> = <nat:7> $ , $ <var:x> = <nat:3> $ , $ <var:X> = <nat:5> $ , $ <var:h> = <nat:6> $ , $ <var:C> = <nat:10> $ . We verify <nat:226800> is a <def:seven-composite> positive integer in consideration of $ <var:g> = <nat:9> $ , $ <var:i> = <nat:7> $ , $ <var:C> = <nat:10> $ , $ <var:h> = <nat:6> $ , $ <var:X> = <nat:5> $ , $ <var:x> = <nat:3> $ , $ <var:A> = <nat:4> \geq <nat:2> $ plus by reason of $ <nat:226800> = <var:X> * <var:x> * <var:i> * <var:C> * <var:h> * <var:A> * <var:g> $ . Therefore , $ <var:h> * <var:X> * <var:x> * <var:A> * <var:g> * <var:C> * <var:i> = <nat:226800> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:P> : nat ) := exists <var:X> <var:C> <var:x> <var:g> <var:i> <var:h> <var:A> : nat , ( <var:C> * <var:x> * <var:X> * <var:A> * <var:g> * <var:h> * <var:i> = <var:P> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:226800> . Proof . unfold <def:seven-composite> . exists <nat:5> . exists <nat:10> . exists <nat:3> . exists <nat:9> . exists <nat:7> . exists <nat:6> . exists <nat:4> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 