\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:492> <var:M> + <nat:34> <var:F> + <nat:181> + <var:c> <nat:132> + <var:K> <nat:292> + <var:o> <nat:278> + <var:p> <nat:270> $ must be odd taking all $ <var:K> $ , $ <var:M> $ , $ <var:p> $ , $ <var:o> $ , $ <var:c> $ , and $ <var:F> $ . \end{theorem} \begin{proof} Building on , take note the pairs $ <nat:492> * <var:M> $ , $ <var:F> * <nat:34> $ , $ <nat:132> * <var:c> $ , $ <var:K> * <nat:292> $ , $ <var:o> * <nat:278> $ , in addition to $ <nat:270> * <var:p> $ are obviously even whole numbers since the multiplication of an even element of $ \mathbb{Z}^+ $ and any integer will be even as well as the integers $ <nat:492> $ , $ <nat:34> $ , $ <nat:132> $ , $ <nat:292> $ , $ <nat:278> $ , and also $ <nat:270> $ are guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:M> <var:p> <var:o> <var:c> <var:F> : nat , Nat . odd ( <nat:492> * <var:M> + <nat:34> * <var:F> + <nat:132> * <var:c> + <nat:292> * <var:K> + <nat:278> * <var:o> + <nat:270> * <var:p> + <nat:181> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even <nat:132> = true ) . { auto . } assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:278> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 