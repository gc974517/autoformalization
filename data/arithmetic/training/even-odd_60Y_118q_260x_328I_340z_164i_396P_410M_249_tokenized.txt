\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:i> \times <nat:164> + <nat:249> + <nat:396> \times <var:P> + <var:Y> \times <nat:60> + <nat:410> \times <var:M> + <nat:328> \times <var:I> + <nat:340> \times <var:z> + <nat:260> \times <var:x> + <nat:118> \times <var:q> $ is odd . \end{theorem} \begin{proof} The number $ <nat:118> $ is known as an even number On top of this , observe that the integers $ <nat:396> $ , $ <nat:340> $ , and $ <nat:60> $ are guaranteed to be even natural numbers The natural numbers $ <nat:164> $ and likewise $ <nat:260> $ are trivially even Furthermore , the coefficient $ <nat:410> $ is trivially even Remember that the number $ <nat:328> $ is trivially even It can be checked that $ <nat:60> \times <var:Y> + <var:q> \times <nat:118> + <nat:249> + <var:x> \times <nat:260> + <var:I> \times <nat:328> + <nat:340> \times <var:z> + <nat:164> \times <var:i> + <var:P> \times <nat:396> + <nat:410> \times <var:M> $ is odd . Take note $ <nat:249> $ is guaranteed to be an odd integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:P> <var:Y> <var:M> <var:I> <var:z> <var:x> <var:q> : nat , Nat . odd ( <nat:164> * <var:i> + <nat:396> * <var:P> + <nat:60> * <var:Y> + <nat:410> * <var:M> + <nat:328> * <var:I> + <nat:340> * <var:z> + <nat:260> * <var:x> + <nat:118> * <var:q> + <nat:249> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:396> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . odd <nat:249> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 