\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We define that $ <var:L> $ is a <def:five-composite> integer under the condition using some $ <var:u> $ , $ <var:I> $ , $ <var:a> $ , $ <var:Y> $ , $ <var:g> $ we get $ <var:a> $ , $ <var:u> $ , $ <var:I> $ , $ <var:g> $ and $ <var:Y> \geq <nat:2> $ and assuming $ <var:L> \in \mathbb{Z}^+ $ , $ <var:L> = <var:a> * <var:I> * <var:g> * <var:u> * <var:Y> $ . \end{definition} \begin{theorem} The whole number <nat:2304> is a <def:five-composite> integer . \end{theorem} \begin{proof} Remember a <def:five-composite> whole number is the product of natural numbers $ <var:g> $ , $ <var:Y> $ , $ <var:u> $ , $ <var:a> $ , and $ <var:I> $ greater than or equal to <nat:2> . Let $ <var:g> = <nat:12> $ , $ <var:I> = <nat:8> $ , $ <var:u> = <nat:2> $ , $ <var:a> = <nat:4> $ and $ <var:Y> = <nat:3> $ . We demonstrate <nat:2304> is a <def:five-composite> natural number . Observe $ <nat:4> \times <nat:3> \times <nat:2> \times <nat:12> \times <nat:8> = <var:a> \times <var:Y> \times <var:u> \times <var:g> \times <var:I> = <nat:2304> $ . Similarly observe $ <var:I> = <nat:8> $ , $ <var:g> = <nat:12> $ , $ <var:Y> = <nat:3> $ , $ <var:u> = <nat:2> $ , and $ <var:a> = <nat:4> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:L> : nat ) := exists <var:u> <var:I> <var:a> <var:Y> <var:g> : nat , ( <var:a> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:L> = <var:a> * <var:I> * <var:g> * <var:u> * <var:Y> ) . Theorem <genP:1> : <def:five-composite> <nat:2304> . Proof . unfold <def:five-composite> . exists <nat:2> . exists <nat:8> . exists <nat:4> . exists <nat:3> . exists <nat:12> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 