\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Define that only if there are $ <var:F> $ , $ <var:N> $ , $ <var:T> $ , $ <var:b> $ , $ <var:X> $ , $ <var:a> $ , $ <var:m> \in \mathbb{Z}^+ $ say that some whole number $ <var:H> $ is said to be a <def:seven-composite> positive integer given $ <var:a> \times <var:T> \times <var:b> \times <var:m> \times <var:X> \times <var:N> \times <var:F> = <var:H> $ and factors are more than or equivalent to <nat:2> . Thus $ <var:H> = <nat:151200> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Remember a <def:seven-composite> positive integer is the multiplication of natural numbers $ <var:F> $ , $ <var:T> $ , $ <var:a> $ , $ <var:b> $ , $ <var:N> $ , $ <var:m> $ , $ <var:X> $ so that $ <var:X> $ , $ <var:T> $ , $ <var:N> $ , $ <var:m> $ , $ <var:b> $ , $ <var:a> $ , and $ <var:F> \geq <nat:2> $ . Note that $ <nat:10> $ , $ <nat:9> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:5> $ , and $ <nat:6> \geq <nat:2> $ . Plus observe additionally $ <nat:151200> = <var:T> \cdot <var:F> \cdot <var:m> \cdot <var:a> \cdot <var:X> \cdot <var:b> \cdot <var:N> $ gives $ <var:N> = <nat:9> $ , $ <var:X> = <nat:4> $ , $ <var:F> = <nat:7> $ , $ <var:b> = <nat:6> $ , $ <var:a> = <nat:5> $ , $ <var:m> = <nat:2> $ , and $ <var:T> = <nat:10> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:H> : nat ) := exists <var:F> <var:N> <var:T> <var:b> <var:X> <var:a> <var:m> : nat , ( <var:a> * <var:T> * <var:b> * <var:m> * <var:X> * <var:N> * <var:F> = <var:H> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:151200> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } exists <nat:7> . exists <nat:9> . exists <nat:10> . exists <nat:6> . exists <nat:4> . exists <nat:5> . exists <nat:2> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 