\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:457> + <var:T> * <nat:158> + <var:k> * <nat:240> + <nat:296> * <var:q> + <var:y> * <nat:272> + <nat:372> * <var:a> + <nat:128> * <var:t> + <var:U> * <nat:124> + <var:C> * <nat:446> $ is guaranteed to be odd with integers $ <var:U> $ , $ <var:T> $ , $ <var:a> $ , $ <var:y> $ , $ <var:k> $ , $ <var:C> $ , $ <var:q> $ , and $ <var:t> $ . \end{theorem} \begin{proof} Observe that $ <nat:457> $ is guaranteed to be odd . We check our main result is true . See that the leading terms $ <nat:158> $ , $ <nat:240> $ , $ <nat:296> $ , $ <nat:272> $ , $ <nat:372> $ , $ <nat:128> $ , $ <nat:124> $ , additionally $ <nat:446> $ are trivially even . Accordingly , the products $ <var:T> * <nat:158> $ , $ <var:k> * <nat:240> $ , $ <var:q> * <nat:296> $ , $ <var:y> * <nat:272> $ , $ <var:a> * <nat:372> $ , $ <nat:128> * <var:t> $ , $ <nat:124> * <var:U> $ , and likewise $ <nat:446> * <var:C> $ will be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:U> <var:T> <var:a> <var:y> <var:k> <var:C> <var:q> <var:t> : nat , Nat . odd ( <nat:158> * <var:T> + <nat:240> * <var:k> + <nat:296> * <var:q> + <nat:272> * <var:y> + <nat:372> * <var:a> + <nat:128> * <var:t> + <nat:124> * <var:U> + <nat:446> * <var:C> + <nat:457> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:457> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:372> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:446> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:446> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 