\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:b> \cdot <nat:68> + <var:T> \cdot <nat:262> + <var:H> \cdot <nat:4> + <nat:254> \cdot <var:y> + <nat:497> $ will be odd with every integers $ <var:H> $ , $ <var:b> $ , $ <var:y> $ , and $ <var:T> $ . \end{theorem} \begin{proof} Take note the formula $ <var:T> \cdot <nat:262> + <nat:68> \cdot <var:b> + <nat:4> \cdot <var:H> + <var:y> \cdot <nat:254> $ is obviously even . $ <var:y> \times <nat:254> $ is known as an even natural . This claim is proven since multiplying between an even whole number and a positive integer must be even and also the number $ <nat:254> $ is obviously even . In addition , the term $ <nat:4> \times <var:H> $ is guaranteed to be an even natural . This fact must be true since the product between an even element of $ \mathbb{Z}^+ $ and any natural must be an even positive integer and also the coefficient $ <nat:4> $ is an even number in $ \mathbb{N} $ . Additionally , recall the pair $ <nat:68> \times <var:b> $ is obviously even . This must be true because the product between an even number in $ \mathbb{N} $ with an arbitrary integer must be even . This is proven from the knowledge the coefficient $ <nat:68> $ is trivially an even natural . Additionally , we know the whole number $ <nat:262> $ is guaranteed to be even . For this reason , the term $ <var:T> \times <nat:262> $ must be even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:b> <var:y> <var:T> : nat , Nat . odd ( <nat:68> * <var:b> + <nat:262> * <var:T> + <nat:4> * <var:H> + <nat:254> * <var:y> + <nat:497> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:b> + <nat:262> * <var:T> + <nat:4> * <var:H> + <nat:254> * <var:y> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 