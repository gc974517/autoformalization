\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:J> $ , $ <var:n> $ , $ <var:W> $ , $ <var:d> $ , $ <var:w> $ , $ <var:G> $ , $ <var:I> $ , $ <var:f> $ , $ <var:T> $ are whole numbers such that $ <var:I> $ , $ <var:w> $ , $ <var:d> $ , $ <var:G> $ , $ <var:T> $ , $ <var:n> $ , $ <var:f> $ , $ <var:J> $ , $ <var:W> > <nat:1> $ . Assume that $ <var:V> \in \mathbb{Z}^+ $ will be considered to be a <def:nine-composite> integer when $ <var:J> \times <var:I> \times <var:W> \times <var:G> \times <var:w> \times <var:n> \times <var:f> \times <var:d> \times <var:T> = <var:V> $ . Thus the whole number <nat:26611200> is a <def:nine-composite> number . \end{theorem} \begin{proof} Assume $ <var:G> = <nat:2> $ , $ <var:f> = <nat:5> $ , $ <var:W> = <nat:4> $ , $ <var:d> = <nat:11> $ , $ <var:n> = <nat:8> $ , $ <var:w> = <nat:7> $ , $ <var:J> = <nat:12> $ , $ <var:T> = <nat:10> $ , and $ <var:I> = <nat:9> $ . Further observe that $ <nat:12> $ , $ <nat:7> $ , $ <nat:2> $ , $ <nat:8> $ , $ <nat:11> $ , $ <nat:4> $ , $ <nat:10> $ , $ <nat:9> $ , and $ <nat:5> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:V> : nat ) := exists <var:J> <var:n> <var:W> <var:d> <var:w> <var:G> <var:I> <var:f> <var:T> : nat , ( <var:I> > <nat:1> ) /\ ( <var:w> > <nat:1> ) /\ ( <var:d> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:J> * <var:I> * <var:W> * <var:G> * <var:w> * <var:n> * <var:f> * <var:d> * <var:T> = <var:V> ) . Theorem <genP:1> : <def:nine-composite> <nat:26611200> . Proof . unfold <def:nine-composite> . exists <nat:12> . exists <nat:8> . exists <nat:4> . exists <nat:11> . exists <nat:7> . exists <nat:2> . exists <nat:9> . exists <nat:5> . exists <nat:10> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 