\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We denote that $ <var:Z> $ is a <def:seven-composite> positive integer if and only if there exist $ <var:A> $ , $ <var:D> $ , $ <var:k> $ , $ <var:N> $ , $ <var:J> $ , $ <var:r> $ , $ <var:x> \in \mathbb{N} $ where such that $ <var:A> $ , $ <var:x> $ , $ <var:J> $ , $ <var:N> $ , $ <var:k> $ , $ <var:r> $ , $ <var:D> > <nat:1> $ plus for $ <var:Z> \in \mathbb{N} $ , $ <var:J> \times <var:x> \times <var:k> \times <var:A> \times <var:D> \times <var:N> \times <var:r> = <var:Z> $ . \end{definition} \begin{theorem} $ <var:Z> = <nat:152064> $ is a <def:seven-composite> number . \end{theorem} \begin{proof} Observe that $ <nat:152064> = <nat:4> * <nat:11> * <nat:8> * <nat:2> * <nat:6> * <nat:12> * <nat:3> $ . Furthermore note $ <nat:2> $ , $ <nat:12> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:3> $ are greater than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Z> : nat ) := exists <var:A> <var:D> <var:k> <var:N> <var:J> <var:r> <var:x> : nat , ( <var:A> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:N> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:J> * <var:x> * <var:k> * <var:A> * <var:D> * <var:N> * <var:r> = <var:Z> ) . Theorem <genP:1> : <def:seven-composite> <nat:152064> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:8> . exists <nat:4> . exists <nat:3> . exists <nat:6> . exists <nat:11> . exists <nat:2> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 