\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:293> + <var:i> <nat:272> + <var:c> <nat:210> + <var:y> <nat:236> + <var:R> <nat:346> + <nat:342> <var:w> + <nat:352> <var:v> + <nat:174> <var:l> + <var:z> <nat:260> $ must be odd using every variables $ <var:y> $ , $ <var:z> $ , $ <var:R> $ , $ <var:i> $ , $ <var:l> $ , $ <var:w> $ , $ <var:c> $ , and $ <var:v> $ . \end{theorem} \begin{proof} On top of this , the natural numbers $ <nat:272> $ , $ <nat:210> $ , $ <nat:236> $ , $ <nat:346> $ , $ <nat:342> $ , $ <nat:352> $ , $ <nat:174> $ , plus $ <nat:260> $ are guaranteed to be even . So , the products $ <var:i> <nat:272> $ , $ <nat:210> <var:c> $ , $ <nat:236> <var:y> $ , $ <nat:346> <var:R> $ , $ <nat:342> <var:w> $ , $ <var:v> <nat:352> $ , $ <nat:174> <var:l> $ , additionally $ <var:z> <nat:260> $ is guaranteed to be even at the same time . It can be shown that this proposition must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:z> <var:R> <var:i> <var:l> <var:w> <var:c> <var:v> : nat , Nat . odd ( <nat:272> * <var:i> + <nat:210> * <var:c> + <nat:236> * <var:y> + <nat:346> * <var:R> + <nat:342> * <var:w> + <nat:352> * <var:v> + <nat:174> * <var:l> + <nat:260> * <var:z> + <nat:293> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even <nat:236> = true ) . { auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:174> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:174> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 