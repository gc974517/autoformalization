\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given unknowns $ <var:D> $ , $ <var:H> $ , $ <var:e> $ , and $ <var:T> $ $ <var:D> <nat:308> + <nat:340> <var:e> + <var:T> <nat:10> + <nat:171> + <var:H> <nat:40> $ will be odd . \end{theorem} \begin{proof} It can be verified that $ <nat:10> \cdot <var:T> + <var:D> \cdot <nat:308> + <var:e> \cdot <nat:340> + <var:H> \cdot <nat:40> + <nat:171> $ is odd . We utilize that $ <nat:10> * <var:T> + <var:D> * <nat:308> + <var:e> * <nat:340> + <nat:40> * <var:H> $ is known to be even . In addition to this , the pairs $ <nat:10> * <var:T> $ , $ <nat:308> * <var:D> $ , $ <nat:340> * <var:e> $ , as well as $ <nat:40> * <var:H> $ are guaranteed to be even by reason that the natural numbers $ <nat:10> $ , $ <nat:308> $ , $ <nat:340> $ , and $ <nat:40> $ are clearly even natural numbers . This claim is proven by reason that the multiplication between even integers with a natural is guaranteed to be even . The adding of an even number with an odd natural number is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:H> <var:e> <var:T> : nat , Nat . odd ( <nat:308> * <var:D> + <nat:340> * <var:e> + <nat:10> * <var:T> + <nat:40> * <var:H> + <nat:171> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:D> + <nat:340> * <var:e> + <nat:10> * <var:T> + <nat:40> * <var:H> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 