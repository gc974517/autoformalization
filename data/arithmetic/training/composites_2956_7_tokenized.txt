\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming that there exist positive integers $ <var:o> $ , $ <var:I> $ , $ <var:C> $ , $ <var:q> $ , $ <var:b> $ , $ <var:p> $ , $ <var:v> $ greater than or equivalent to <nat:2> . Take as given that some number $ <var:G> $ will be considered as <def:seven-composite> if $ <var:v> \cdot <var:p> \cdot <var:b> \cdot <var:o> \cdot <var:C> \cdot <var:q> \cdot <var:I> = <var:G> $ . Consequently $ <var:G> = <nat:249480> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Allow $ <var:p> = <nat:9> $ , $ <var:C> = <nat:5> $ , $ <var:q> = <nat:7> $ , $ <var:o> = <nat:12> $ , $ <var:b> = <nat:3> $ , $ <var:v> = <nat:2> $ and $ <var:I> = <nat:11> $ . We justify the belief holds for $ <nat:249480> = <var:p> \times <var:C> \times <var:q> \times <var:I> \times <var:b> \times <var:o> \times <var:v> $ and by reason of $ <nat:7> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:12> $ , $ <nat:2> $ and $ <nat:3> \geq <nat:2> $ . Thus , $ <nat:249480> = <var:v> * <var:I> * <var:C> * <var:q> * <var:o> * <var:b> * <var:p> $ is verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:G> : nat ) := exists <var:o> <var:I> <var:C> <var:q> <var:b> <var:p> <var:v> : nat , ( <var:o> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:v> * <var:p> * <var:b> * <var:o> * <var:C> * <var:q> * <var:I> = <var:G> ) . Theorem <genP:1> : <def:seven-composite> <nat:249480> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:11> . exists <nat:5> . exists <nat:7> . exists <nat:3> . exists <nat:9> . exists <nat:2> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 