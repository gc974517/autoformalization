\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using $ <var:y> $ , $ <var:I> $ , $ <var:E> $ , $ <var:o> $ , $ <var:p> $ , and $ <var:H> \in \mathbb{Z}^+ $ the expression $ <var:I> <nat:144> + <nat:60> <var:p> + <var:y> <nat:192> + <nat:76> <var:o> + <var:H> <nat:454> + <nat:159> + <var:E> <nat:268> $ is odd . \end{theorem} \begin{proof} The products $ <nat:144> \cdot <var:I> $ , $ <nat:454> \cdot <var:H> $ , $ <nat:76> \cdot <var:o> $ , in addition to $ <nat:268> \cdot <var:E> $ are obviously even . This holds by reason that multiplying of an even number in $ \mathbb{Z}^+ $ with an arbitrary natural will be an even number in $ \mathbb{N} $ . Take note that the product $ <nat:60> \cdot <var:p> $ is known to be even from the fact multiplying of an even positive integer with a positive integer will be fundamentally an even number . $ <var:y> \cdot <nat:192> $ is guaranteed to be even . This must be true as a consequence that the product of an even number in $ \mathbb{N} $ and an arbitrary natural number is guaranteed to be an even element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:I> <var:E> <var:o> <var:p> <var:H> : nat , Nat . odd ( <nat:144> * <var:I> + <nat:60> * <var:p> + <nat:192> * <var:y> + <nat:76> * <var:o> + <nat:454> * <var:H> + <nat:268> * <var:E> + <nat:159> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:144> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 