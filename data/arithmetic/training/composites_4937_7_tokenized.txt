\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If there are $ <var:R> $ , $ <var:v> $ , $ <var:z> $ , $ <var:I> $ , $ <var:d> $ , $ <var:s> $ , $ <var:q> \in \mathbb{N} $ then take that $ <var:L> \in \mathbb{Z}^+ $ is defined as a <def:seven-composite> natural number when $ <var:q> * <var:z> * <var:I> * <var:d> * <var:s> * <var:R> * <var:v> = <var:L> $ as well as greater than <nat:1> . \end{definition} \begin{theorem} The positive integer <nat:356400> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Assume $ <var:d> = <nat:4> $ , $ <var:I> = <nat:11> $ , $ <var:z> = <nat:5> $ , $ <var:R> = <nat:10> $ , $ <var:q> = <nat:3> $ , $ <var:s> = <nat:6> $ and $ <var:v> = <nat:9> $ . Notice $ <var:q> \times <var:d> \times <var:I> \times <var:s> \times <var:z> \times <var:R> \times <var:v> = <nat:356400> $ . Furthermore note $ <var:I> = <nat:11> $ , $ <var:s> = <nat:6> $ , $ <var:R> = <nat:10> $ , $ <var:q> = <nat:3> $ , $ <var:d> = <nat:4> $ , $ <var:v> = <nat:9> $ , $ <var:z> = <nat:5> > <nat:1> $ . Hence , <nat:356400> is the multiplication of $ <var:d> $ , $ <var:s> $ , $ <var:z> $ , $ <var:R> $ , $ <var:I> $ , $ <var:q> $ , $ <var:v> \in \mathbb{Z}^+ $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:L> : nat ) := exists <var:R> <var:v> <var:z> <var:I> <var:d> <var:s> <var:q> : nat , ( <var:q> * <var:z> * <var:I> * <var:d> * <var:s> * <var:R> * <var:v> = <var:L> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:d> > <nat:1> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:q> > <nat:1> ) . Theorem <genP:1> : <def:seven-composite> <nat:356400> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:9> . exists <nat:5> . exists <nat:11> . exists <nat:4> . exists <nat:6> . exists <nat:3> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 