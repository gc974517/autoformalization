\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:l> $ , $ <var:C> $ , $ <var:Z> $ , $ <var:m> $ , $ <var:x> $ , $ <var:D> $ , $ <var:i> $ , $ <var:Q> $ , $ <var:h> $ as whole numbers . Let that some positive integer $ <var:V> $ is named a <def:nine-composite> whole number when $ <var:V> = <var:m> \cdot <var:l> \cdot <var:Q> \cdot <var:C> \cdot <var:Z> \cdot <var:x> \cdot <var:i> \cdot <var:D> \cdot <var:h> $ as well as unique factors are larger than or equivalent to <nat:2> . Accordingly the whole number <nat:11975040> is a <def:nine-composite> number . \end{theorem} \begin{proof} Let $ <var:i> = <nat:11> $ , $ <var:x> = <nat:4> $ , $ <var:C> = <nat:12> $ , $ <var:Q> = <nat:6> $ , $ <var:Z> = <nat:2> $ , $ <var:m> = <nat:9> $ , $ <var:D> = <nat:7> $ , $ <var:h> = <nat:3> $ , $ <var:l> = <nat:10> $ . We verify <nat:11975040> is a <def:nine-composite> positive integer because $ <nat:4> $ , $ <nat:9> $ , $ <nat:6> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:2> $ , $ <nat:11> $ , $ <nat:12> $ , and $ <nat:10> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:V> : nat ) := exists <var:l> <var:C> <var:Z> <var:m> <var:x> <var:D> <var:i> <var:Q> <var:h> : nat , ( <var:V> = <var:m> * <var:l> * <var:Q> * <var:C> * <var:Z> * <var:x> * <var:i> * <var:D> * <var:h> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:11975040> . Proof . unfold <def:nine-composite> . exists <nat:10> . exists <nat:12> . exists <nat:2> . exists <nat:9> . exists <nat:4> . exists <nat:7> . exists <nat:11> . exists <nat:6> . exists <nat:3> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 