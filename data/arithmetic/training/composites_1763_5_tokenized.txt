\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Define that $ <var:N> $ is a <def:five-composite> positive integer under the condition for some positive integers $ <var:q> $ , $ <var:E> $ , $ <var:I> $ , $ <var:a> $ , $ <var:U> $ we get where $ <var:I> $ , $ <var:a> $ , $ <var:E> $ , $ <var:U> $ , $ <var:q> > <nat:1> $ and for some whole number $ <var:N> $ , $ <var:I> \times <var:U> \times <var:a> \times <var:E> \times <var:q> = <var:N> $ . \end{definition} \begin{theorem} $ <nat:3024> = <var:N> $ is a <def:five-composite> integer . \end{theorem} \begin{proof} Remember a <def:five-composite> integer is the multiplication of whole numbers $ <var:E> $ , $ <var:a> $ , $ <var:U> $ , $ <var:q> $ , $ <var:I> $ where $ <var:a> $ , $ <var:E> $ , $ <var:q> $ , $ <var:U> $ , $ <var:I> > <nat:1> $ . Take $ <var:a> = <nat:9> $ , $ <var:U> = <nat:3> $ , $ <var:E> = <nat:7> $ , $ <var:q> = <nat:8> $ and $ <var:I> = <nat:2> $ . We justify <nat:3024> is a <def:five-composite> integer . We justify the proposition holds on account of $ <var:a> * <var:I> * <var:E> * <var:U> * <var:q> = <nat:3024> $ as well as in consideration of $ <nat:3> $ , $ <nat:2> $ , $ <nat:8> $ , $ <nat:9> $ , and $ <nat:7> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:N> : nat ) := exists <var:q> <var:E> <var:I> <var:a> <var:U> : nat , ( <var:I> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:I> * <var:U> * <var:a> * <var:E> * <var:q> = <var:N> ) . Theorem <genP:1> : <def:five-composite> <nat:3024> . Proof . unfold <def:five-composite> . exists <nat:8> . exists <nat:7> . exists <nat:2> . exists <nat:9> . exists <nat:3> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 