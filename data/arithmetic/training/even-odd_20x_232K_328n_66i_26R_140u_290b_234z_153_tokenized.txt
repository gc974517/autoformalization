\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using $ <var:z> $ , $ <var:x> $ , $ <var:n> $ , $ <var:i> $ , $ <var:b> $ , $ <var:u> $ , $ <var:R> $ , and $ <var:K> $ the expression $ <nat:328> \times <var:n> + <var:x> \times <nat:20> + <var:b> \times <nat:290> + <nat:153> + <var:z> \times <nat:234> + <nat:232> \times <var:K> + <var:i> \times <nat:66> + <nat:140> \times <var:u> + <nat:26> \times <var:R> $ is odd . \end{theorem} \begin{proof} We utilize the fact the expression $ <nat:20> * <var:x> + <var:u> * <nat:140> + <var:i> * <nat:66> + <nat:234> * <var:z> + <var:b> * <nat:290> + <nat:328> * <var:n> + <var:K> * <nat:232> + <nat:153> + <var:R> * <nat:26> $ is known as odd as a consequence that the expression $ <var:R> \cdot <nat:26> + <nat:328> \cdot <var:n> + <var:b> \cdot <nat:290> + <var:z> \cdot <nat:234> + <nat:232> \cdot <var:K> + <nat:20> \cdot <var:x> + <nat:140> \cdot <var:u> + <nat:66> \cdot <var:i> $ is guaranteed to be even . Because the multiplication of an even positive integer and any number in $ \mathbb{N} $ is an even integer this main result is true . Remember $ <nat:153> $ is trivially odd . We verify $ <nat:20> \cdot <var:x> + <var:K> \cdot <nat:232> + <var:n> \cdot <nat:328> + <var:i> \cdot <nat:66> + <var:R> \cdot <nat:26> + <var:u> \cdot <nat:140> + <nat:290> \cdot <var:b> + <nat:153> + <nat:234> \cdot <var:z> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:x> <var:n> <var:i> <var:b> <var:u> <var:R> <var:K> : nat , Nat . odd ( <nat:328> * <var:n> + <nat:20> * <var:x> + <nat:290> * <var:b> + <nat:234> * <var:z> + <nat:232> * <var:K> + <nat:66> * <var:i> + <nat:140> * <var:u> + <nat:26> * <var:R> + <nat:153> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:328> * <var:n> + <nat:20> * <var:x> + <nat:290> * <var:b> + <nat:234> * <var:z> + <nat:232> * <var:K> + <nat:66> * <var:i> + <nat:140> * <var:u> + <nat:26> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:153> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 