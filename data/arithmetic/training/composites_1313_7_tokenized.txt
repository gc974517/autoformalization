\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Given we get $ <var:L> \times <var:j> \times <var:Q> \times <var:I> \times <var:a> \times <var:x> \times <var:b> = <var:Y> $ with $ <var:Y> \in \mathbb{Z}^+ $ as well as satisfying the condition that $ <var:b> $ , $ <var:L> $ , $ <var:Q> $ , $ <var:I> $ , $ <var:a> $ , $ <var:x> $ and $ <var:j> \geq <nat:2> $ , then define that $ <var:Y> $ is a <def:seven-composite> integer assuming some $ <var:x> $ , $ <var:b> $ , $ <var:I> $ , $ <var:j> $ , $ <var:Q> $ , $ <var:L> $ , $ <var:a> \in \mathbb{N} $ . \end{definition} \begin{theorem} $ <nat:226800> = <var:Y> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Recall a <def:seven-composite> positive integer is the product between positive integers $ <var:b> $ , $ <var:Q> $ , $ <var:a> $ , $ <var:x> $ , $ <var:I> $ , $ <var:j> $ , and $ <var:L> $ greater than or equivalent to <nat:2> . Let $ <var:I> = <nat:5> $ , $ <var:a> = <nat:10> $ , $ <var:b> = <nat:7> $ , $ <var:L> = <nat:12> $ , $ <var:x> = <nat:3> $ , $ <var:j> = <nat:2> $ , $ <var:Q> = <nat:9> $ . Notice $ <var:L> * <var:b> * <var:Q> * <var:I> * <var:x> * <var:j> * <var:a> = <nat:12> * <nat:7> * <nat:9> * <nat:5> * <nat:3> * <nat:2> * <nat:10> = <nat:226800> $ . Plus note $ <var:Q> = <nat:9> $ , $ <var:b> = <nat:7> $ , $ <var:j> = <nat:2> $ , $ <var:L> = <nat:12> $ , $ <var:I> = <nat:5> $ , $ <var:x> = <nat:3> $ , $ <var:a> = <nat:10> \geq <nat:2> $ . This implies our result is true . Hence , <nat:226800> is a <def:seven-composite> positive integer is verified . Therefore , <nat:226800> is the product of some $ <var:x> $ , $ <var:a> $ , $ <var:L> $ , $ <var:I> $ , $ <var:j> $ , $ <var:Q> $ , $ <var:b> $ and $ <var:L> $ , $ <var:I> $ , $ <var:b> $ , $ <var:x> $ , $ <var:a> $ , $ <var:j> $ , and $ <var:Q> \geq <nat:2> $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Y> : nat ) := exists <var:x> <var:b> <var:I> <var:j> <var:Q> <var:L> <var:a> : nat , ( <var:L> * <var:j> * <var:Q> * <var:I> * <var:a> * <var:x> * <var:b> = <var:Y> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:226800> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:7> . exists <nat:5> . exists <nat:2> . exists <nat:9> . exists <nat:12> . exists <nat:10> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 