\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take as given that $ <var:T> $ is a <def:five-composite> number if and only if there are $ <var:J> $ , $ <var:R> $ , $ <var:y> $ , $ <var:I> $ , $ <var:O> \in \mathbb{N} $ where $ <var:O> $ , $ <var:y> $ , $ <var:R> $ , $ <var:I> $ and $ <var:J> \geq <nat:2> $ and with $ <var:T> \in \mathbb{Z}^+ $ , $ <var:T> = <var:R> * <var:J> * <var:I> * <var:y> * <var:O> $ . \end{definition} \begin{theorem} $ <nat:1920> = <var:T> $ is a <def:five-composite> whole number . \end{theorem} \begin{proof} Remember a <def:five-composite> positive integer is the product of numbers $ <var:I> $ , $ <var:y> $ , $ <var:R> $ , $ <var:J> $ , and $ <var:O> $ satisfying the condition that $ <var:R> $ , $ <var:O> $ , $ <var:y> $ , $ <var:I> $ and $ <var:J> \geq <nat:2> $ . Allow $ <var:y> = <nat:2> $ , $ <var:O> = <nat:6> $ , $ <var:J> = <nat:5> $ , $ <var:I> = <nat:4> $ , $ <var:R> = <nat:8> $ . Observe $ <var:y> = <nat:2> $ , $ <var:O> = <nat:6> $ , $ <var:R> = <nat:8> $ , $ <var:J> = <nat:5> $ , and $ <var:I> = <nat:4> \geq <nat:2> $ . Because of this , <nat:1920> is a <def:five-composite> natural number is proven . Therefore , $ <var:J> $ , $ <var:R> $ , $ <var:I> $ , $ <var:O> $ and $ <var:y> $ are greater than or equivalent to <nat:2> as well as $ <nat:1920> = <var:J> \cdot <var:y> \cdot <var:R> \cdot <var:I> \cdot <var:O> $ has been verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:T> : nat ) := exists <var:J> <var:R> <var:y> <var:I> <var:O> : nat , ( <var:O> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:T> = <var:R> * <var:J> * <var:I> * <var:y> * <var:O> ) . Theorem <genP:1> : <def:five-composite> <nat:1920> . Proof . unfold <def:five-composite> . exists <nat:5> . exists <nat:8> . exists <nat:2> . exists <nat:4> . exists <nat:6> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 