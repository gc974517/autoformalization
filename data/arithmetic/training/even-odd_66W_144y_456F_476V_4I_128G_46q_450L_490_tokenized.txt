\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all unknowns $ <var:G> $ , $ <var:V> $ , $ <var:L> $ , $ <var:q> $ , $ <var:I> $ , $ <var:F> $ , $ <var:W> $ , and $ <var:y> $ the sum $ <nat:4> * <var:I> + <nat:144> * <var:y> + <nat:450> * <var:L> + <var:q> * <nat:46> + <var:W> * <nat:66> + <nat:476> * <var:V> + <nat:128> * <var:G> + <var:F> * <nat:456> + <nat:490> $ must be even . \end{theorem} \begin{proof} The adding between even natural numbers collectively and an even integer is an even natural . The expression $ <nat:456> * <var:F> + <nat:144> * <var:y> + <var:L> * <nat:450> + <nat:128> * <var:G> + <var:q> * <nat:46> + <var:W> * <nat:66> + <var:V> * <nat:476> + <var:I> * <nat:4> $ is clearly even . Additionally , notice the leading terms $ <nat:456> $ , $ <nat:144> $ , $ <nat:450> $ , $ <nat:128> $ , $ <nat:46> $ , $ <nat:66> $ , $ <nat:476> $ , additionally $ <nat:4> $ are even . Accordingly , the products $ <nat:456> * <var:F> $ , $ <var:y> * <nat:144> $ , $ <var:L> * <nat:450> $ , $ <var:G> * <nat:128> $ , $ <nat:46> * <var:q> $ , $ <nat:66> * <var:W> $ , $ <nat:476> * <var:V> $ , additionally $ <var:I> * <nat:4> $ is guaranteed to be even too . The expression $ <var:F> \cdot <nat:456> + <nat:476> \cdot <var:V> + <var:q> \cdot <nat:46> + <nat:450> \cdot <var:L> + <var:y> \cdot <nat:144> + <nat:4> \cdot <var:I> + <nat:128> \cdot <var:G> + <var:W> \cdot <nat:66> $ will be even since the product between an even number in $ \mathbb{Z}^+ $ and some natural is even . It can be proven that the formula $ <var:W> \times <nat:66> + <var:y> \times <nat:144> + <nat:456> \times <var:F> + <nat:490> + <var:V> \times <nat:476> + <nat:4> \times <var:I> + <nat:128> \times <var:G> + <var:q> \times <nat:46> + <nat:450> \times <var:L> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:V> <var:L> <var:q> <var:I> <var:F> <var:W> <var:y> : nat , Nat . even ( <nat:4> * <var:I> + <nat:144> * <var:y> + <nat:450> * <var:L> + <nat:46> * <var:q> + <nat:66> * <var:W> + <nat:476> * <var:V> + <nat:128> * <var:G> + <nat:456> * <var:F> + <nat:490> ) = true . Proof . intros . rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:I> + <nat:144> * <var:y> + <nat:450> * <var:L> + <nat:46> * <var:q> + <nat:66> * <var:W> + <nat:476> * <var:V> + <nat:128> * <var:G> + <nat:456> * <var:F> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <genH> . auto . Qed . 