\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given we get $ <var:s> * <var:M> * <var:F> * <var:v> * <var:b> * <var:c> * <var:y> * <var:m> * <var:G> = <var:t> $ given some number $ <var:t> $ as well as such that $ <var:M> $ , $ <var:s> $ , $ <var:c> $ , $ <var:m> $ , $ <var:v> $ , $ <var:b> $ , $ <var:F> $ , $ <var:y> $ , and $ <var:G> \geq <nat:2> $ , let that $ <var:t> $ is a <def:nine-composite> number taking some integers $ <var:b> $ , $ <var:c> $ , $ <var:v> $ , $ <var:F> $ , $ <var:m> $ , $ <var:G> $ , $ <var:y> $ , $ <var:M> $ , $ <var:s> $ . Then $ <nat:6652800> = <var:t> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Note that $ <nat:6652800> = <var:c> \times <var:b> \times <var:y> \times <var:G> \times <var:M> \times <var:m> \times <var:F> \times <var:s> \times <var:v> $ indicates $ <var:v> = <nat:7> $ , $ <var:F> = <nat:2> $ , $ <var:M> = <nat:3> $ , $ <var:G> = <nat:11> $ , $ <var:b> = <nat:4> $ , $ <var:m> = <nat:5> $ , $ <var:y> = <nat:10> $ , $ <var:s> = <nat:9> $ and $ <var:c> = <nat:8> $ . What's more note that $ <nat:3> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:10> $ , $ <nat:9> $ and $ <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:t> : nat ) := exists <var:b> <var:c> <var:v> <var:F> <var:m> <var:G> <var:y> <var:M> <var:s> : nat , ( <var:s> * <var:M> * <var:F> * <var:v> * <var:b> * <var:c> * <var:y> * <var:m> * <var:G> = <var:t> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:6652800> . Proof . unfold <def:nine-composite> . exists <nat:4> . exists <nat:8> . exists <nat:7> . exists <nat:2> . exists <nat:5> . exists <nat:11> . exists <nat:10> . exists <nat:3> . exists <nat:9> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 