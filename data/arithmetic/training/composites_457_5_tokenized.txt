\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Only if we get $ <var:b> \cdot <var:h> \cdot <var:L> \cdot <var:m> \cdot <var:F> = <var:M> $ given some number $ <var:M> $ plus where $ <var:L> $ , $ <var:b> $ , $ <var:h> $ , $ <var:m> $ , $ <var:F> \geq <nat:2> $ , denote that $ <var:M> $ is a <def:five-composite> whole number with some $ <var:m> $ , $ <var:b> $ , $ <var:F> $ , $ <var:L> $ , $ <var:h> \in \mathbb{N} $ . \end{definition} \begin{theorem} The integer <nat:3168> is a <def:five-composite> positive integer . \end{theorem} \begin{proof} Remember that <nat:3168> is <def:five-composite> only if it is the product of integers $ <var:h> $ , $ <var:b> $ , $ <var:m> $ , $ <var:L> $ , $ <var:F> $ greater than or equal to <nat:2> . Let $ <var:h> = <nat:11> $ , $ <var:L> = <nat:3> $ , $ <var:F> = <nat:8> $ , $ <var:m> = <nat:6> $ and $ <var:b> = <nat:2> $ . We prove <nat:3168> is a <def:five-composite> natural number . Also observe $ <nat:8> $ , $ <nat:2> $ , $ <nat:3> $ , $ <nat:6> $ , and $ <nat:11> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:M> : nat ) := exists <var:m> <var:b> <var:F> <var:L> <var:h> : nat , ( <var:b> * <var:h> * <var:L> * <var:m> * <var:F> = <var:M> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:3168> . Proof . unfold <def:five-composite> . exists <nat:6> . exists <nat:2> . exists <nat:8> . exists <nat:3> . exists <nat:11> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 