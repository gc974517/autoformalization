\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With any unknowns $ <var:u> $ , $ <var:c> $ , $ <var:J> $ , and $ <var:L> $ the formula $ <nat:439> + <var:L> <nat:146> + <nat:378> <var:c> + <var:J> <nat:196> + <var:u> <nat:94> $ must be odd . \end{theorem} \begin{proof} It can be proven that our claim is true . Observe $ <nat:439> $ is known to be odd . We demonstrate the sum $ <var:J> * <nat:196> + <var:u> * <nat:94> + <nat:146> * <var:L> + <var:c> * <nat:378> $ is obviously even . Adding on , the terms $ <var:J> \times <nat:196> $ , $ <nat:94> \times <var:u> $ , $ <nat:146> \times <var:L> $ , and $ <var:c> \times <nat:378> $ will be even numbers since the leading terms $ <nat:196> $ , $ <nat:94> $ , $ <nat:146> $ , as well as $ <nat:378> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:c> <var:J> <var:L> : nat , Nat . odd ( <nat:146> * <var:L> + <nat:378> * <var:c> + <nat:196> * <var:J> + <nat:94> * <var:u> + <nat:439> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:439> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:L> + <nat:378> * <var:c> + <nat:196> * <var:J> + <nat:94> * <var:u> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 