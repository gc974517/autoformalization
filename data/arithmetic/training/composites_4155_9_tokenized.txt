\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Define that with the condition there are $ <var:X> $ , $ <var:N> $ , $ <var:J> $ , $ <var:b> $ , $ <var:S> $ , $ <var:Y> $ , $ <var:a> $ , $ <var:i> $ , $ <var:c> \in \mathbb{N} $ we denote that some natural number $ <var:r> $ is a <def:nine-composite> positive integer given $ <var:b> \cdot <var:i> \cdot <var:J> \cdot <var:N> \cdot <var:c> \cdot <var:Y> \cdot <var:a> \cdot <var:S> \cdot <var:X> = <var:r> $ as well as unique terms are larger than or equivalent to <nat:2> . Hence <nat:14515200> is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Recall a <def:nine-composite> number is the product between whole numbers $ <var:S> $ , $ <var:b> $ , $ <var:N> $ , $ <var:J> $ , $ <var:Y> $ , $ <var:i> $ , $ <var:c> $ , $ <var:a> $ , $ <var:X> $ larger than or equal to <nat:2> . Notice $ <nat:9> $ , $ <nat:8> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:10> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:5> $ , and $ <nat:12> $ are greater than or equivalent to <nat:2> . Similarly note as well $ <nat:14515200> = <var:i> \times <var:b> \times <var:a> \times <var:S> \times <var:c> \times <var:N> \times <var:Y> \times <var:J> \times <var:X> = <nat:12> \times <nat:4> \times <nat:6> \times <nat:10> \times <nat:8> \times <nat:2> \times <nat:5> \times <nat:9> \times <nat:7> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:r> : nat ) := exists <var:X> <var:N> <var:J> <var:b> <var:S> <var:Y> <var:a> <var:i> <var:c> : nat , ( <var:b> * <var:i> * <var:J> * <var:N> * <var:c> * <var:Y> * <var:a> * <var:S> * <var:X> = <var:r> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:14515200> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } exists <nat:7> . exists <nat:2> . exists <nat:9> . exists <nat:4> . exists <nat:10> . exists <nat:5> . exists <nat:6> . exists <nat:12> . exists <nat:8> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 