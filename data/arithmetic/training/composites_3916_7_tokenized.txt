\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Under the condition that we have $ <var:b> $ , $ <var:F> $ , $ <var:g> $ , $ <var:B> $ , $ <var:Y> $ , $ <var:j> $ and $ <var:f> \geq <nat:2> $ so that assuming $ <var:Q> \in \mathbb{Z}^+ $ , $ <var:B> * <var:g> * <var:F> * <var:j> * <var:Y> * <var:f> * <var:b> = <var:Q> $ using some $ <var:b> $ , $ <var:Y> $ , $ <var:g> $ , $ <var:F> $ , $ <var:B> $ , $ <var:j> $ , $ <var:f> \in \mathbb{Z}^+ $ , then take as given that $ <var:Q> $ is a <def:seven-composite> whole number . \end{definition} \begin{theorem} The positive integer <nat:103680> is a <def:seven-composite> number . \end{theorem} \begin{proof} Assume $ <var:b> = <nat:8> $ , $ <var:Y> = <nat:6> $ , $ <var:B> = <nat:4> $ , $ <var:g> = <nat:2> $ , $ <var:F> = <nat:10> $ , $ <var:f> = <nat:3> $ , $ <var:j> = <nat:9> $ . Note $ <nat:103680> = <var:b> \times <var:B> \times <var:j> \times <var:Y> \times <var:F> \times <var:f> \times <var:g> = <nat:8> \times <nat:4> \times <nat:9> \times <nat:6> \times <nat:10> \times <nat:3> \times <nat:2> $ . Plus note that $ <nat:9> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:8> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:10> $ are more than or equal to <nat:2> . Consequently , $ <nat:103680> = <var:g> \cdot <var:B> \cdot <var:Y> \cdot <var:j> \cdot <var:f> \cdot <var:F> \cdot <var:b> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Q> : nat ) := exists <var:b> <var:Y> <var:g> <var:F> <var:B> <var:j> <var:f> : nat , ( <var:b> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:B> * <var:g> * <var:F> * <var:j> * <var:Y> * <var:f> * <var:b> = <var:Q> ) . Theorem <genP:1> : <def:seven-composite> <nat:103680> . Proof . unfold <def:seven-composite> . exists <nat:8> . exists <nat:6> . exists <nat:2> . exists <nat:10> . exists <nat:4> . exists <nat:9> . exists <nat:3> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 