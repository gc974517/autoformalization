\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} $ \exists <var:W> $ , $ <var:y> $ , $ <var:e> $ , $ <var:H> $ , $ <var:N> $ , $ <var:z> $ , $ <var:n> $ , $ <var:F> $ , $ <var:c> \in \mathbb{N} $ greater than or equivalent to <nat:2> . Say that $ <var:g> \in \mathbb{N} $ will be considered to be a <def:nine-composite> whole number if $ <var:e> * <var:y> * <var:H> * <var:n> * <var:c> * <var:W> * <var:N> * <var:F> * <var:z> = <var:g> $ . \end{definition} \begin{theorem} $ <var:g> = <nat:17107200> $ is <def:nine-composite> . \end{theorem} \begin{proof} Observe that $ <nat:8> \times <nat:11> \times <nat:3> \times <nat:12> \times <nat:5> \times <nat:10> \times <nat:9> \times <nat:2> \times <nat:6> = <var:F> \times <var:z> \times <var:y> \times <var:H> \times <var:e> \times <var:N> \times <var:n> \times <var:c> \times <var:W> = <nat:17107200> $ . Moreover observe that $ <nat:3> $ , $ <nat:12> $ , $ <nat:2> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:6> $ , and $ <nat:8> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:g> : nat ) := exists <var:W> <var:y> <var:e> <var:H> <var:N> <var:z> <var:n> <var:F> <var:c> : nat , ( <var:W> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:e> * <var:y> * <var:H> * <var:n> * <var:c> * <var:W> * <var:N> * <var:F> * <var:z> = <var:g> ) . Theorem <genP:1> : <def:nine-composite> <nat:17107200> . Proof . unfold <def:nine-composite> . exists <nat:6> . exists <nat:3> . exists <nat:5> . exists <nat:12> . exists <nat:10> . exists <nat:11> . exists <nat:9> . exists <nat:8> . exists <nat:2> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 