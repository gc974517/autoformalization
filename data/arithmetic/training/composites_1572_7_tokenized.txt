\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If and only if we get $ <var:C> $ , $ <var:I> $ , $ <var:B> $ , $ <var:p> $ , $ <var:x> $ , $ <var:V> $ , $ <var:A> \geq <nat:2> $ so that taking some natural number $ <var:S> $ , $ <var:S> = <var:B> * <var:I> * <var:x> * <var:C> * <var:V> * <var:p> * <var:A> $ , then denote that $ <var:S> $ is a <def:seven-composite> natural number with some $ <var:V> $ , $ <var:B> $ , $ <var:C> $ , $ <var:I> $ , $ <var:p> $ , $ <var:x> $ , $ <var:A> \in \mathbb{N} $ . \end{definition} \begin{theorem} <nat:443520> is <def:seven-composite> . \end{theorem} \begin{proof} Assume $ <var:I> = <nat:4> $ , $ <var:x> = <nat:12> $ , $ <var:C> = <nat:3> $ , $ <var:A> = <nat:7> $ , $ <var:p> = <nat:11> $ , $ <var:V> = <nat:5> $ and $ <var:B> = <nat:8> $ . We verify $ <var:x> \times <var:B> \times <var:V> \times <var:I> \times <var:C> \times <var:p> \times <var:A> = <nat:443520> $ . We justify <nat:443520> is a <def:seven-composite> whole number in view of $ <nat:3> $ , $ <nat:11> $ , $ <nat:4> $ , $ <nat:12> $ , $ <nat:5> $ , $ <nat:8> $ , $ <nat:7> $ are more than or equal to <nat:2> as well as $ <nat:443520> = <var:A> \times <var:B> \times <var:C> \times <var:x> \times <var:p> \times <var:I> \times <var:V> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:S> : nat ) := exists <var:V> <var:B> <var:C> <var:I> <var:p> <var:x> <var:A> : nat , ( <var:C> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:S> = <var:B> * <var:I> * <var:x> * <var:C> * <var:V> * <var:p> * <var:A> ) . Theorem <genP:1> : <def:seven-composite> <nat:443520> . Proof . unfold <def:seven-composite> . exists <nat:5> . exists <nat:8> . exists <nat:3> . exists <nat:4> . exists <nat:11> . exists <nat:12> . exists <nat:7> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 