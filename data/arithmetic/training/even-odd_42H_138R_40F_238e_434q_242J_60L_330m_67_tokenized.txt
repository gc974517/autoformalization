\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming any $ <var:q> $ , $ <var:L> $ , $ <var:H> $ , $ <var:R> $ , $ <var:F> $ , $ <var:J> $ , $ <var:m> $ , and $ <var:e> \in \mathbb{N} $ the expression $ <nat:67> + <var:J> <nat:242> + <var:R> <nat:138> + <nat:42> <var:H> + <nat:60> <var:L> + <var:F> <nat:40> + <nat:238> <var:e> + <var:m> <nat:330> + <nat:434> <var:q> $ will be odd . \end{theorem} \begin{proof} We verify the lemma holds . The pair $ <var:H> \times <nat:42> $ is an even whole number . This is true by reason that taking the product of an even element of $ \mathbb{N} $ and a natural is guaranteed to be even . This is proven since the number $ <nat:42> $ is obviously in itself an even integer . In addition , observe that $ <nat:138> \times <var:R> $ is an even natural number . This is proven from the fact the product of an even number in $ \mathbb{Z}^+ $ with an arbitrary number in $ \mathbb{N} $ must be even as well as the whole number $ <nat:138> $ is known as an even element of $ \mathbb{N} $ . In addition , take note the whole number $ <nat:40> $ is trivially an even element of $ \mathbb{Z}^+ $ . Accordingly , $ <nat:40> \times <var:F> $ is even additionally . In addition to this , see the natural number $ <nat:238> $ is known to be an even number . Accordingly , the term $ <var:e> \times <nat:238> $ must be even as well . See that the term $ <nat:434> \times <var:q> $ is known as even . This must be true from the knowledge the product between an even number in $ \mathbb{Z}^+ $ and some whole number must be even and likewise the positive integer $ <nat:434> $ is known as an even positive integer . Observe that the pair $ <var:J> \times <nat:242> $ is trivially an even number as a consequence that multiplying between an even natural and some natural number is an even element of $ \mathbb{N} $ in addition to the coefficient $ <nat:242> $ is even . We know the integer $ <nat:60> $ is clearly an even element of $ \mathbb{N} $ . Consequently , the product $ <var:L> \times <nat:60> $ is even in addition . Additionally , the integer $ <nat:330> $ is an even natural . Consequently , the product $ <nat:330> \times <var:m> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:L> <var:H> <var:R> <var:F> <var:J> <var:m> <var:e> : nat , Nat . odd ( <nat:242> * <var:J> + <nat:138> * <var:R> + <nat:42> * <var:H> + <nat:60> * <var:L> + <nat:40> * <var:F> + <nat:238> * <var:e> + <nat:330> * <var:m> + <nat:434> * <var:q> + <nat:67> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:238> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:434> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 