\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:c> * <nat:22> + <var:i> * <nat:358> + <nat:363> $ must be odd . \end{theorem} \begin{proof} Remember the adding between even integers and an odd whole number is guaranteed to be itself an odd element of $ \mathbb{N} $ . Remember $ <nat:363> $ is clearly an odd positive integer . The summation $ <var:c> \times <nat:22> + <nat:363> + <nat:358> \times <var:i> $ is obviously odd as a consequence that the sum $ <var:c> \cdot <nat:22> + <nat:358> \cdot <var:i> $ is obviously even . See the positive integer $ <nat:358> $ is obviously an even integer . Then , the pair $ <var:i> \cdot <nat:358> $ will be even in addition . Observe that $ <var:c> \cdot <nat:22> $ is trivially even . This is proven by reason that multiplying of an even element of $ \mathbb{N} $ with an arbitrary number in $ \mathbb{Z}^+ $ will be an even whole number , and must be true from the knowledge the number $ <nat:22> $ is known as even . The expression $ <nat:22> <var:c> + <nat:358> <var:i> $ is guaranteed to be obviously even from the fact the multiplication between an even natural number with an arbitrary natural number will be an even natural . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:i> : nat , Nat . odd ( <nat:22> * <var:c> + <nat:358> * <var:i> + <nat:363> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:363> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:22> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:22> * <var:c> + <nat:358> * <var:i> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 