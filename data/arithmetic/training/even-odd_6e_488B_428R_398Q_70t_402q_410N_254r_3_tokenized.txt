\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:398> \cdot <var:Q> + <var:t> \cdot <nat:70> + <nat:410> \cdot <var:N> + <nat:428> \cdot <var:R> + <nat:3> + <var:q> \cdot <nat:402> + <nat:254> \cdot <var:r> + <nat:6> \cdot <var:e> + <var:B> \cdot <nat:488> $ will be odd using some $ <var:r> $ , $ <var:e> $ , $ <var:N> $ , $ <var:Q> $ , $ <var:t> $ , $ <var:B> $ , $ <var:R> $ , and $ <var:q> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} Recall that the coefficient $ <nat:428> $ is even The coefficients $ <nat:254> $ , $ <nat:6> $ , and also $ <nat:402> $ must be even Notice the natural numbers $ <nat:70> $ and $ <nat:488> $ are even Building on , see that the leading term $ <nat:398> $ is clearly even Recall the whole number $ <nat:410> $ is known as an even integer Take note $ <nat:3> $ is obviously an odd whole number . The summing of even elements of $ \mathbb{N} $ together and an odd natural is obviously an odd integer . Thus , the expression $ <nat:6> <var:e> + <nat:488> <var:B> + <var:R> <nat:428> + <nat:398> <var:Q> + <nat:70> <var:t> + <var:q> <nat:402> + <var:N> <nat:410> + <nat:3> + <var:r> <nat:254> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:e> <var:N> <var:Q> <var:t> <var:B> <var:R> <var:q> : nat , Nat . odd ( <nat:398> * <var:Q> + <nat:70> * <var:t> + <nat:410> * <var:N> + <nat:428> * <var:R> + <nat:402> * <var:q> + <nat:254> * <var:r> + <nat:6> * <var:e> + <nat:488> * <var:B> + <nat:3> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even <nat:402> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even <nat:398> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . odd <nat:3> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 