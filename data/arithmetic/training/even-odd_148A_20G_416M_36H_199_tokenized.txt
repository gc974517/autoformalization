\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given every natural terms $ <var:H> $ , $ <var:M> $ , $ <var:G> $ , and $ <var:A> $ the expression $ <nat:199> + <nat:36> * <var:H> + <var:G> * <nat:20> + <nat:416> * <var:M> + <nat:148> * <var:A> $ is odd . \end{theorem} \begin{proof} It can be demonstrated that $ <var:A> * <nat:148> + <var:G> * <nat:20> + <var:M> * <nat:416> + <var:H> * <nat:36> $ is even . We know that the terms $ <nat:148> \cdot <var:A> $ , $ <var:G> \cdot <nat:20> $ , $ <nat:416> \cdot <var:M> $ , plus $ <nat:36> \cdot <var:H> $ are known to be even naturals as a consequence that the product between an even element of $ \mathbb{N} $ with some natural number will be even additionally the leading terms $ <nat:148> $ , $ <nat:20> $ , $ <nat:416> $ , and also $ <nat:36> $ are obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:M> <var:G> <var:A> : nat , Nat . odd ( <nat:36> * <var:H> + <nat:20> * <var:G> + <nat:416> * <var:M> + <nat:148> * <var:A> + <nat:199> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:H> + <nat:20> * <var:G> + <nat:416> * <var:M> + <nat:148> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 