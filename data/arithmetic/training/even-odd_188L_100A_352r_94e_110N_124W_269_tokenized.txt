\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:269> + <nat:188> * <var:L> + <nat:100> * <var:A> + <var:r> * <nat:352> + <nat:94> * <var:e> + <nat:110> * <var:N> + <nat:124> * <var:W> $ must be odd assuming any $ <var:L> $ , $ <var:N> $ , $ <var:W> $ , $ <var:r> $ , $ <var:A> $ , and $ <var:e> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} The whole numbers $ <nat:188> $ , $ <nat:100> $ , $ <nat:352> $ , $ <nat:94> $ , $ <nat:110> $ , and $ <nat:124> $ are guaranteed to be even . Therefore , the terms $ <var:L> \times <nat:188> $ , $ <nat:100> \times <var:A> $ , $ <var:r> \times <nat:352> $ , $ <var:e> \times <nat:94> $ , $ <var:N> \times <nat:110> $ , plus $ <nat:124> \times <var:W> $ is even as well . Take note $ <nat:269> $ is known to be an odd element of $ \mathbb{N} $ . The summation between even positive integers with an odd element of $ \mathbb{N} $ will be by definition an odd element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:N> <var:W> <var:r> <var:A> <var:e> : nat , Nat . odd ( <nat:188> * <var:L> + <nat:100> * <var:A> + <nat:352> * <var:r> + <nat:94> * <var:e> + <nat:110> * <var:N> + <nat:124> * <var:W> + <nat:269> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:188> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:269> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 