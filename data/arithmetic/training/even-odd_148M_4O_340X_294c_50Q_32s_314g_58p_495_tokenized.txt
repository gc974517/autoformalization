\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:M> <nat:148> + <var:O> <nat:4> + <nat:340> <var:X> + <nat:294> <var:c> + <nat:495> + <nat:50> <var:Q> + <var:s> <nat:32> + <nat:314> <var:g> + <var:p> <nat:58> $ will be odd using every positive terms $ <var:p> $ , $ <var:s> $ , $ <var:Q> $ , $ <var:c> $ , $ <var:g> $ , $ <var:M> $ , $ <var:O> $ , and $ <var:X> $ . \end{theorem} \begin{proof} We show the result is true . Observe that the terms $ <var:g> * <nat:314> $ , $ <var:Q> * <nat:50> $ , $ <nat:58> * <var:p> $ , $ <nat:294> * <var:c> $ , as well as $ <var:M> * <nat:148> $ will be even whole numbers . This is true from the fact the product between an even number in $ \mathbb{Z}^+ $ with a natural is guaranteed to be an even integer . Additionally , remember $ <var:X> * <nat:340> $ is known to be an even natural since taking the product between an even integer with any number is guaranteed to be an even positive integer . $ <nat:4> * <var:O> $ is guaranteed to be an even number in $ \mathbb{N} $ . Additionally , the term $ <var:s> * <nat:32> $ is an even integer . Recall that the summing of even positive integers collectively with an odd whole number is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:s> <var:Q> <var:c> <var:g> <var:M> <var:O> <var:X> : nat , Nat . odd ( <nat:148> * <var:M> + <nat:4> * <var:O> + <nat:340> * <var:X> + <nat:294> * <var:c> + <nat:50> * <var:Q> + <nat:32> * <var:s> + <nat:314> * <var:g> + <nat:58> * <var:p> + <nat:495> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:314> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 