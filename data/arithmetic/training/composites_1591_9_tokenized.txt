\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We denote that $ <var:k> $ is a <def:nine-composite> natural number assuming that there are $ <var:O> $ , $ <var:V> $ , $ <var:A> $ , $ <var:Z> $ , $ <var:B> $ , $ <var:F> $ , $ <var:Q> $ , $ <var:j> $ , $ <var:o> \in \mathbb{Z}^+ $ so that $ <var:k> = <var:V> \times <var:Q> \times <var:A> \times <var:j> \times <var:Z> \times <var:B> \times <var:O> \times <var:o> \times <var:F> $ with some $ <var:k> $ and so that $ <var:A> $ , $ <var:O> $ , $ <var:V> $ , $ <var:Z> $ , $ <var:o> $ , $ <var:B> $ , $ <var:Q> $ , $ <var:F> $ and $ <var:j> \geq <nat:2> $ . Then the integer <nat:19958400> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Note that $ <nat:19958400> = <var:j> \cdot <var:Q> \cdot <var:B> \cdot <var:o> \cdot <var:Z> \cdot <var:V> \cdot <var:F> \cdot <var:A> \cdot <var:O> $ implies $ <var:O> = <nat:12> $ , $ <var:A> = <nat:2> $ , $ <var:V> = <nat:6> $ , $ <var:F> = <nat:10> $ , $ <var:j> = <nat:7> $ , $ <var:Q> = <nat:5> $ , $ <var:B> = <nat:4> $ , $ <var:Z> = <nat:11> $ , and $ <var:o> = <nat:9> $ . In addition note that $ <nat:10> $ , $ <nat:12> $ , $ <nat:5> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:7> $ , $ <nat:2> $ , and $ <nat:6> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:k> : nat ) := exists <var:O> <var:V> <var:A> <var:Z> <var:B> <var:F> <var:Q> <var:j> <var:o> : nat , ( <var:k> = <var:V> * <var:Q> * <var:A> * <var:j> * <var:Z> * <var:B> * <var:O> * <var:o> * <var:F> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . exists <nat:12> . exists <nat:6> . exists <nat:2> . exists <nat:11> . exists <nat:4> . exists <nat:10> . exists <nat:5> . exists <nat:7> . exists <nat:9> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 