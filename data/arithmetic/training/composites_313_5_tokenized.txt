\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that we get $ <var:B> = <var:K> \times <var:D> \times <var:r> \times <var:x> \times <var:l> $ for $ <var:B> \in \mathbb{Z}^+ $ plus so that $ <var:D> $ , $ <var:l> $ , $ <var:r> $ , $ <var:K> $ , $ <var:x> \geq <nat:2> $ , let that $ <var:B> $ is a <def:five-composite> whole number for some positive integers $ <var:x> $ , $ <var:D> $ , $ <var:l> $ , $ <var:K> $ , $ <var:r> $ . \end{definition} \begin{theorem} $ <nat:19440> = <var:B> $ is <def:five-composite> . \end{theorem} \begin{proof} Remember that <nat:19440> is a <def:five-composite> whole number given <nat:19440> is the multiplication between natural numbers $ <var:D> $ , $ <var:r> $ , $ <var:K> $ , $ <var:l> $ and $ <var:x> $ larger than or equivalent to <nat:2> . Take $ <var:x> = <nat:12> $ , $ <var:l> = <nat:3> $ , $ <var:D> = <nat:6> $ , $ <var:r> = <nat:10> $ , $ <var:K> = <nat:9> $ . Notice $ <nat:19440> = <var:K> \times <var:D> \times <var:l> \times <var:x> \times <var:r> $ . In addition note that $ <nat:12> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:6> $ and $ <nat:10> \geq <nat:2> $ . Thus , <nat:19440> is a <def:five-composite> positive integer is verified . Because of this , $ <var:K> \times <var:D> \times <var:x> \times <var:r> \times <var:l> = <nat:19440> $ plus $ <var:x> $ , $ <var:D> $ , $ <var:l> $ , $ <var:K> $ , $ <var:r> \geq <nat:2> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:B> : nat ) := exists <var:x> <var:D> <var:l> <var:K> <var:r> : nat , ( <var:B> = <var:K> * <var:D> * <var:r> * <var:x> * <var:l> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:19440> . Proof . unfold <def:five-composite> . exists <nat:12> . exists <nat:6> . exists <nat:3> . exists <nat:9> . exists <nat:10> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 