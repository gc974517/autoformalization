\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:o> $ , $ <var:m> $ , $ <var:A> $ , $ <var:k> $ , $ <var:G> $ , $ <var:P> $ , $ <var:j> $ be integers . We claim that $ <var:g> \in \mathbb{Z}^+ $ will be named a <def:seven-composite> number given $ <var:g> = <var:G> \times <var:P> \times <var:k> \times <var:m> \times <var:A> \times <var:o> \times <var:j> $ plus unique factors are more than or equivalent to <nat:2> . So the whole number <nat:95040> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Remember that a <def:seven-composite> positive integer is the product of natural numbers $ <var:o> $ , $ <var:G> $ , $ <var:k> $ , $ <var:P> $ , $ <var:m> $ , $ <var:j> $ , $ <var:A> $ so that $ <var:o> $ , $ <var:G> $ , $ <var:P> $ , $ <var:m> $ , $ <var:A> $ , $ <var:k> $ , $ <var:j> \geq <nat:2> $ . Allow $ <var:P> = <nat:3> $ , $ <var:k> = <nat:11> $ , $ <var:G> = <nat:2> $ , $ <var:o> = <nat:12> $ , $ <var:m> = <nat:5> $ , $ <var:j> = <nat:6> $ , $ <var:A> = <nat:4> $ . In addition notice that $ <nat:4> $ , $ <nat:12> $ , $ <nat:11> $ , $ <nat:6> $ , $ <nat:3> $ , $ <nat:5> $ and $ <nat:2> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:g> : nat ) := exists <var:o> <var:m> <var:A> <var:k> <var:G> <var:P> <var:j> : nat , ( <var:g> = <var:G> * <var:P> * <var:k> * <var:m> * <var:A> * <var:o> * <var:j> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:95040> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:5> . exists <nat:4> . exists <nat:11> . exists <nat:2> . exists <nat:3> . exists <nat:6> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 