\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:173> + <nat:258> \times <var:T> + <var:j> \times <nat:318> + <var:p> \times <nat:78> + <nat:324> \times <var:R> $ will be odd . \end{theorem} \begin{proof} We make use the fact that the expression $ <nat:258> \cdot <var:T> + <nat:78> \cdot <var:p> + <nat:318> \cdot <var:j> + <nat:173> + <nat:324> \cdot <var:R> $ is clearly odd by reason that the expression $ <var:T> \cdot <nat:258> + <var:p> \cdot <nat:78> + <nat:318> \cdot <var:j> + <var:R> \cdot <nat:324> $ is even . Notice the coefficient $ <nat:324> $ is even . So , $ <nat:324> \cdot <var:R> $ will be even additionally . See that the pair $ <var:p> \cdot <nat:78> $ is an even number in $ \mathbb{Z}^+ $ . This claim is proven since the integer $ <nat:78> $ is clearly obviously an even natural number . The integer $ <nat:318> $ is even . Thus , the pair $ <nat:318> \cdot <var:j> $ will be even in addition . The whole number $ <nat:258> $ is guaranteed to be even . Therefore , the product $ <nat:258> \cdot <var:T> $ must be even in addition . The summation of an even number in $ \mathbb{Z}^+ $ and an odd positive integer is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:j> <var:p> <var:R> : nat , Nat . odd ( <nat:258> * <var:T> + <nat:318> * <var:j> + <nat:78> * <var:p> + <nat:324> * <var:R> + <nat:173> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:T> + <nat:318> * <var:j> + <nat:78> * <var:p> + <nat:324> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 