\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition we have $ <var:H> $ , $ <var:Q> $ , $ <var:g> $ , $ <var:U> $ , $ <var:O> $ , $ <var:t> $ , $ <var:B> $ , $ <var:E> $ , $ <var:s> \geq <nat:2> $ such that given $ <var:W> \in \mathbb{Z}^+ $ , $ <var:E> * <var:Q> * <var:H> * <var:t> * <var:U> * <var:B> * <var:O> * <var:s> * <var:g> = <var:W> $ given some $ <var:s> $ , $ <var:Q> $ , $ <var:B> $ , $ <var:U> $ , $ <var:O> $ , $ <var:g> $ , $ <var:H> $ , $ <var:E> $ , $ <var:t> \in \mathbb{N} $ , assume that $ <var:W> $ is a <def:nine-composite> natural number . \end{definition} \begin{theorem} $ <var:W> = <nat:6652800> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Observe that $ <nat:3> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:5> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:7> $ , $ <nat:12> $ , $ <nat:10> $ are larger than or equivalent to <nat:2> . Also note that still $ <var:O> \times <var:B> \times <var:H> \times <var:s> \times <var:E> \times <var:g> \times <var:U> \times <var:t> \times <var:Q> = <nat:6652800> $ suggests $ <var:U> = <nat:10> $ , $ <var:g> = <nat:4> $ , $ <var:B> = <nat:2> $ , $ <var:H> = <nat:11> $ , $ <var:E> = <nat:3> $ , $ <var:s> = <nat:5> $ , $ <var:Q> = <nat:6> $ , $ <var:t> = <nat:12> $ and $ <var:O> = <nat:7> $ . This suggests our principle is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:W> : nat ) := exists <var:s> <var:Q> <var:B> <var:U> <var:O> <var:g> <var:H> <var:E> <var:t> : nat , ( <var:H> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:E> * <var:Q> * <var:H> * <var:t> * <var:U> * <var:B> * <var:O> * <var:s> * <var:g> = <var:W> ) . Theorem <genP:1> : <def:nine-composite> <nat:6652800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } exists <nat:5> . exists <nat:6> . exists <nat:2> . exists <nat:10> . exists <nat:7> . exists <nat:4> . exists <nat:11> . exists <nat:3> . exists <nat:12> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 