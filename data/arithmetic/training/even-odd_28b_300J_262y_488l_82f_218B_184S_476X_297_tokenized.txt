\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:b> \times <nat:28> + <nat:297> + <nat:300> \times <var:J> + <var:y> \times <nat:262> + <nat:488> \times <var:l> + <nat:82> \times <var:f> + <nat:218> \times <var:B> + <nat:184> \times <var:S> + <nat:476> \times <var:X> $ is guaranteed to be odd . \end{theorem} \begin{proof} The product of even positive integers is even . Hence , the proposition must be true . The whole numbers $ <nat:218> $ , $ <nat:28> $ , $ <nat:184> $ , $ <nat:300> $ , additionally $ <nat:82> $ are obviously even positive integers On top of this , recall the leading term $ <nat:488> $ is known to be even In addition to this , the positive integer $ <nat:476> $ is guaranteed to be even Additionally , the integer $ <nat:262> $ is known to be an even integer \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:J> <var:y> <var:l> <var:f> <var:B> <var:S> <var:X> : nat , Nat . odd ( <nat:28> * <var:b> + <nat:300> * <var:J> + <nat:262> * <var:y> + <nat:488> * <var:l> + <nat:82> * <var:f> + <nat:218> * <var:B> + <nat:184> * <var:S> + <nat:476> * <var:X> + <nat:297> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 