\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:u> $ , $ <var:E> $ , $ <var:r> $ , $ <var:k> $ , $ <var:V> $ , $ <var:X> $ , $ <var:n> $ be natural numbers . Let that some positive integer $ <var:O> $ is considered a <def:seven-composite> natural number if $ <var:O> = <var:k> \cdot <var:E> \cdot <var:X> \cdot <var:u> \cdot <var:n> \cdot <var:V> \cdot <var:r> $ and such that $ <var:E> $ , $ <var:n> $ , $ <var:r> $ , $ <var:X> $ , $ <var:k> $ , $ <var:V> $ and $ <var:u> \geq <nat:2> $ . Accordingly $ <nat:950400> = <var:O> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Remember a <def:seven-composite> number is the multiplication between numbers $ <var:X> $ , $ <var:E> $ , $ <var:k> $ , $ <var:n> $ , $ <var:u> $ , $ <var:V> $ and $ <var:r> $ so that $ <var:X> $ , $ <var:r> $ , $ <var:u> $ , $ <var:n> $ , $ <var:k> $ , $ <var:E> $ , and $ <var:V> \geq <nat:2> $ . Observe that $ <nat:12> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:2> $ , $ <nat:11> $ , $ <nat:8> \geq <nat:2> $ . What's more notice that further $ <var:X> * <var:E> * <var:V> * <var:u> * <var:k> * <var:n> * <var:r> = <nat:950400> $ hints $ <var:X> = <nat:5> $ , $ <var:E> = <nat:11> $ , $ <var:u> = <nat:8> $ , $ <var:r> = <nat:10> $ , $ <var:n> = <nat:9> $ , $ <var:k> = <nat:2> $ , and $ <var:V> = <nat:12> $ . This hints <nat:950400> is a <def:seven-composite> integer . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:O> : nat ) := exists <var:u> <var:E> <var:r> <var:k> <var:V> <var:X> <var:n> : nat , ( <var:O> = <var:k> * <var:E> * <var:X> * <var:u> * <var:n> * <var:V> * <var:r> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:950400> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } exists <nat:8> . exists <nat:11> . exists <nat:10> . exists <nat:2> . exists <nat:12> . exists <nat:5> . exists <nat:9> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 