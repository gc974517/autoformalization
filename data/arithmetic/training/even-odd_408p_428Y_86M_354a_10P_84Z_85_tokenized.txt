\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:10> \cdot <var:P> + <nat:354> \cdot <var:a> + <var:M> \cdot <nat:86> + <nat:85> + <nat:428> \cdot <var:Y> + <var:Z> \cdot <nat:84> + <var:p> \cdot <nat:408> $ is guaranteed to be odd . \end{theorem} \begin{proof} The coefficient $ <nat:408> $ is obviously even . So , the pair $ <nat:408> \cdot <var:p> $ will be even also . In addition , the integer $ <nat:428> $ is known to be an even integer . Then , the pair $ <var:Y> \cdot <nat:428> $ must be even also . Notice the pair $ <nat:86> \cdot <var:M> $ is obviously even because the leading term $ <nat:86> $ is trivially by definition an even natural number . Building on , see the term $ <nat:354> \cdot <var:a> $ is obviously an even natural number from the knowledge the positive integer $ <nat:354> $ is known to be even . In addition , $ <var:P> \cdot <nat:10> $ is an even integer . This is proven since the natural number $ <nat:10> $ is known to be by itself an even integer . Building on , remember $ <var:Z> \cdot <nat:84> $ is even . This claim is true by reason that the whole number $ <nat:84> $ is known as trivially an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:a> <var:M> <var:Y> <var:Z> <var:p> : nat , Nat . odd ( <nat:10> * <var:P> + <nat:354> * <var:a> + <nat:86> * <var:M> + <nat:428> * <var:Y> + <nat:84> * <var:Z> + <nat:408> * <var:p> + <nat:85> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:84> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 