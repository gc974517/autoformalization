\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given we get $ <var:x> $ , $ <var:C> $ , $ <var:U> $ , $ <var:w> $ , $ <var:s> \geq <nat:2> $ where with $ <var:L> \in \mathbb{Z}^+ $ , $ <var:L> = <var:U> * <var:x> * <var:s> * <var:w> * <var:C> $ using some whole numbers $ <var:w> $ , $ <var:x> $ , $ <var:s> $ , $ <var:C> $ , $ <var:U> $ , say that $ <var:L> $ is a <def:five-composite> natural number . Hence the positive integer <nat:5040> is a <def:five-composite> integer . \end{theorem} \begin{proof} Remember a <def:five-composite> natural number is the product of natural numbers $ <var:x> $ , $ <var:w> $ , $ <var:U> $ , $ <var:s> $ , and $ <var:C> $ more than or equivalent to <nat:2> . Allow $ <var:s> = <nat:7> $ , $ <var:w> = <nat:5> $ , $ <var:U> = <nat:8> $ , $ <var:x> = <nat:2> $ , and $ <var:C> = <nat:9> $ . Notice that $ <nat:7> $ , $ <nat:8> $ , $ <nat:5> $ , $ <nat:9> $ and $ <nat:2> $ are more than or equivalent to <nat:2> . This gives <nat:5040> is <def:five-composite> . Thus , <nat:5040> is a <def:five-composite> number is proven . Thus , $ <var:C> $ , $ <var:x> $ , $ <var:s> $ , $ <var:w> $ , and $ <var:U> \geq <nat:2> $ plus $ <var:C> \cdot <var:s> \cdot <var:x> \cdot <var:w> \cdot <var:U> = <nat:5040> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:L> : nat ) := exists <var:w> <var:x> <var:s> <var:C> <var:U> : nat , ( <var:x> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:L> = <var:U> * <var:x> * <var:s> * <var:w> * <var:C> ) . Theorem <genP:1> : <def:five-composite> <nat:5040> . Proof . unfold <def:five-composite> . exists <nat:5> . exists <nat:2> . exists <nat:7> . exists <nat:9> . exists <nat:8> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 