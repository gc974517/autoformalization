\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Whenever there are whole numbers $ <var:r> $ , $ <var:D> $ , $ <var:e> $ , $ <var:Y> $ , $ <var:k> $ , $ <var:I> $ , $ <var:V> $ , $ <var:b> $ , $ <var:h> $ define that $ <var:A> \in \mathbb{N} $ is a <def:nine-composite> positive integer when $ <var:h> \cdot <var:Y> \cdot <var:I> \cdot <var:V> \cdot <var:r> \cdot <var:k> \cdot <var:b> \cdot <var:e> \cdot <var:D> = <var:A> $ and unique terms are larger than <nat:1> . Then the positive integer <nat:19958400> is a <def:nine-composite> number . \end{theorem} \begin{proof} Notice $ <nat:19958400> = <var:D> \cdot <var:r> \cdot <var:V> \cdot <var:Y> \cdot <var:e> \cdot <var:h> \cdot <var:I> \cdot <var:b> \cdot <var:k> $ suggests $ <var:k> = <nat:10> $ , $ <var:r> = <nat:3> $ , $ <var:I> = <nat:9> $ , $ <var:V> = <nat:2> $ , $ <var:Y> = <nat:12> $ , $ <var:b> = <nat:8> $ , $ <var:D> = <nat:11> $ , $ <var:h> = <nat:5> $ , $ <var:e> = <nat:7> $ . What's more notice $ <nat:10> $ , $ <nat:7> $ , $ <nat:12> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:11> $ , and $ <nat:8> $ are more than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:A> : nat ) := exists <var:r> <var:D> <var:e> <var:Y> <var:k> <var:I> <var:V> <var:b> <var:h> : nat , ( <var:h> * <var:Y> * <var:I> * <var:V> * <var:r> * <var:k> * <var:b> * <var:e> * <var:D> = <var:A> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:h> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:11> . exists <nat:7> . exists <nat:12> . exists <nat:10> . exists <nat:9> . exists <nat:2> . exists <nat:8> . exists <nat:5> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 