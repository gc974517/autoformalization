\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:466> <var:I> + <var:R> <nat:484> + <nat:258> <var:t> + <nat:164> <var:v> + <var:o> <nat:460> + <nat:32> + <var:i> <nat:170> + <var:M> <nat:76> + <var:d> <nat:476> $ will be even . \end{theorem} \begin{proof} The adding between even numbers concurrently must be even . We know that $ <nat:32> $ is obviously even . The theorem is proven from the fact $ <var:I> <nat:466> + <var:t> <nat:258> + <var:R> <nat:484> + <var:v> <nat:164> + <nat:476> <var:d> + <var:i> <nat:170> + <var:M> <nat:76> + <nat:460> <var:o> $ is guaranteed to be even , because the summation between an even positive integer and an even element of $ \mathbb{Z}^+ $ must be an even element of $ \mathbb{N} $ . In addition , see that the integers $ <nat:466> $ , $ <nat:258> $ , $ <nat:484> $ , $ <nat:164> $ , $ <nat:476> $ , $ <nat:170> $ , $ <nat:76> $ , as well as $ <nat:460> $ will be even elements of $ \mathbb{Z}^+ $ . As a consequence , the pairs $ <nat:466> <var:I> $ , $ <var:t> <nat:258> $ , $ <nat:484> <var:R> $ , $ <var:v> <nat:164> $ , $ <var:d> <nat:476> $ , $ <nat:170> <var:i> $ , $ <var:M> <nat:76> $ , plus $ <nat:460> <var:o> $ must be even too . and also by reason that taking the product between an even integer and some element of $ \mathbb{N} $ is guaranteed to be even $ <nat:164> <var:v> + <nat:76> <var:M> + <nat:258> <var:t> + <nat:476> <var:d> + <nat:170> <var:i> + <nat:466> <var:I> + <var:R> <nat:484> + <nat:460> <var:o> $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:R> <var:t> <var:v> <var:o> <var:i> <var:M> <var:d> : nat , Nat . even ( <nat:466> * <var:I> + <nat:484> * <var:R> + <nat:258> * <var:t> + <nat:164> * <var:v> + <nat:460> * <var:o> + <nat:170> * <var:i> + <nat:76> * <var:M> + <nat:476> * <var:d> + <nat:32> ) = true . Proof . intros . rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:I> + <nat:484> * <var:R> + <nat:258> * <var:t> + <nat:164> * <var:v> + <nat:460> * <var:o> + <nat:170> * <var:i> + <nat:76> * <var:M> + <nat:476> * <var:d> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . auto . Qed . 