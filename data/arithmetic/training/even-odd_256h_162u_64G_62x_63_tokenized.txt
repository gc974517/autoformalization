\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using any variables $ <var:u> $ , $ <var:G> $ , $ <var:x> $ , and $ <var:h> $ the summation $ <nat:162> <var:u> + <var:h> <nat:256> + <nat:63> + <nat:62> <var:x> + <var:G> <nat:64> $ will be odd . \end{theorem} \begin{proof} Recall that the addition of an even number and an odd positive integer must be odd . The expression $ <var:u> * <nat:162> + <var:G> * <nat:64> + <nat:62> * <var:x> + <nat:256> * <var:h> + <nat:63> $ is known to be odd by reason that the summation $ <nat:256> \cdot <var:h> + <var:u> \cdot <nat:162> + <nat:64> \cdot <var:G> + <nat:62> \cdot <var:x> $ is clearly even . Take note the multiplication between an even positive integer with any element of $ \mathbb{Z}^+ $ will be even . The natural numbers $ <nat:64> $ in addition to $ <nat:62> $ must be even numbers in $ \mathbb{N} $ Adding on , take note that the integer $ <nat:256> $ is guaranteed to be an even natural The integer $ <nat:162> $ is obviously even Since the adding between even whole numbers with an even whole number will be even , It can be checked that the lemma must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:G> <var:x> <var:h> : nat , Nat . odd ( <nat:162> * <var:u> + <nat:256> * <var:h> + <nat:62> * <var:x> + <nat:64> * <var:G> + <nat:63> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:62> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:u> + <nat:256> * <var:h> + <nat:62> * <var:x> + <nat:64> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 