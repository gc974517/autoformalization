\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:g> * <nat:346> + <nat:395> + <var:X> * <nat:436> + <nat:146> * <var:C> + <nat:68> * <var:b> $ will be odd taking any unknowns $ <var:C> $ , $ <var:X> $ , $ <var:g> $ , and $ <var:b> $ . \end{theorem} \begin{proof} It can be verified that the expression $ <var:C> * <nat:146> + <var:b> * <nat:68> + <var:X> * <nat:436> + <var:g> * <nat:346> $ is guaranteed to be even . Notice that the integer $ <nat:68> $ is obviously an even number in $ \mathbb{N} $ In addition to this , take note that the whole number $ <nat:436> $ is clearly an even whole number See the integer $ <nat:146> $ is known as even In addition to this , the positive integer $ <nat:346> $ is clearly an even whole number From the knowledge the product between even numbers in $ \mathbb{Z}^+ $ and any whole number is clearly an even integer the summation $ <nat:146> <var:C> + <var:b> <nat:68> + <nat:346> <var:g> + <var:X> <nat:436> $ is guaranteed to be itself even . Notice that $ <nat:395> $ is guaranteed to be odd . It can be shown that the sum $ <nat:436> <var:X> + <var:C> <nat:146> + <nat:395> + <nat:346> <var:g> + <nat:68> <var:b> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:X> <var:g> <var:b> : nat , Nat . odd ( <nat:346> * <var:g> + <nat:436> * <var:X> + <nat:146> * <var:C> + <nat:68> * <var:b> + <nat:395> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:g> + <nat:436> * <var:X> + <nat:146> * <var:C> + <nat:68> * <var:b> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:395> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 