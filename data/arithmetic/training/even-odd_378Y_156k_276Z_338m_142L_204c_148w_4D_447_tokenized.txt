\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Y> \cdot <nat:378> + <nat:447> + <var:k> \cdot <nat:156> + <var:Z> \cdot <nat:276> + <nat:338> \cdot <var:m> + <var:L> \cdot <nat:142> + <var:c> \cdot <nat:204> + <var:w> \cdot <nat:148> + <var:D> \cdot <nat:4> $ must be odd with every natural numbers $ <var:w> $ , $ <var:L> $ , $ <var:Y> $ , $ <var:k> $ , $ <var:c> $ , $ <var:D> $ , $ <var:Z> $ , and $ <var:m> $ . \end{theorem} \begin{proof} Recall the natural numbers $ <nat:378> $ , $ <nat:156> $ , $ <nat:276> $ , $ <nat:338> $ , $ <nat:142> $ , $ <nat:204> $ , $ <nat:148> $ , and also $ <nat:4> $ are clearly even . Consequently , the pairs $ <var:Y> <nat:378> $ , $ <nat:156> <var:k> $ , $ <var:Z> <nat:276> $ , $ <var:m> <nat:338> $ , $ <nat:142> <var:L> $ , $ <nat:204> <var:c> $ , $ <nat:148> <var:w> $ , additionally $ <nat:4> <var:D> $ will be even in addition . We know the summing between even numbers collectively and an odd positive integer will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:L> <var:Y> <var:k> <var:c> <var:D> <var:Z> <var:m> : nat , Nat . odd ( <nat:378> * <var:Y> + <nat:156> * <var:k> + <nat:276> * <var:Z> + <nat:338> * <var:m> + <nat:142> * <var:L> + <nat:204> * <var:c> + <nat:148> * <var:w> + <nat:4> * <var:D> + <nat:447> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 