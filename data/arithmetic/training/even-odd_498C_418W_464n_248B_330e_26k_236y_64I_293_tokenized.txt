\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:e> \cdot <nat:330> + <nat:464> \cdot <var:n> + <var:B> \cdot <nat:248> + <nat:418> \cdot <var:W> + <nat:293> + <nat:236> \cdot <var:y> + <var:k> \cdot <nat:26> + <nat:64> \cdot <var:I> + <nat:498> \cdot <var:C> $ must be odd . \end{theorem} \begin{proof} We verify the claim must be true . We justify that the expression $ <nat:64> * <var:I> + <var:e> * <nat:330> + <var:k> * <nat:26> + <nat:248> * <var:B> + <var:n> * <nat:464> + <nat:293> + <var:y> * <nat:236> + <var:W> * <nat:418> + <nat:498> * <var:C> $ is odd from the fact $ <var:C> * <nat:498> + <nat:418> * <var:W> + <var:n> * <nat:464> + <var:B> * <nat:248> + <nat:330> * <var:e> + <nat:26> * <var:k> + <var:y> * <nat:236> + <nat:64> * <var:I> $ is even . Remember that the products $ <nat:64> <var:I> $ , $ <var:y> <nat:236> $ , $ <nat:26> <var:k> $ , $ <nat:418> <var:W> $ , $ <nat:464> <var:n> $ , in addition to $ <nat:330> <var:e> $ are clearly even . On top of this , the product $ <var:C> <nat:498> $ is trivially an even positive integer . The product $ <var:B> <nat:248> $ is known as even . This fact is proven by reason that the multiplication between an even number in $ \mathbb{Z}^+ $ with some integer is an even natural . From the knowledge the adding between even natural numbers and an even element of $ \mathbb{Z}^+ $ will be even , the lemma must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:e> <var:n> <var:B> <var:W> <var:y> <var:k> <var:I> <var:C> : nat , Nat . odd ( <nat:330> * <var:e> + <nat:464> * <var:n> + <nat:248> * <var:B> + <nat:418> * <var:W> + <nat:236> * <var:y> + <nat:26> * <var:k> + <nat:64> * <var:I> + <nat:498> * <var:C> + <nat:293> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:64> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:e> + <nat:464> * <var:n> + <nat:248> * <var:B> + <nat:418> * <var:W> + <nat:236> * <var:y> + <nat:26> * <var:k> + <nat:64> * <var:I> + <nat:498> * <var:C> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 