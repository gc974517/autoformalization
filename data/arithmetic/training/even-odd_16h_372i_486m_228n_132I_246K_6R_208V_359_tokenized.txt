\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:n> <nat:228> + <nat:208> <var:V> + <nat:359> + <var:K> <nat:246> + <nat:132> <var:I> + <nat:372> <var:i> + <nat:486> <var:m> + <var:h> <nat:16> + <var:R> <nat:6> $ is guaranteed to be odd given all unknowns $ <var:I> $ , $ <var:V> $ , $ <var:R> $ , $ <var:h> $ , $ <var:m> $ , $ <var:n> $ , $ <var:K> $ , and $ <var:i> $ . \end{theorem} \begin{proof} We demonstrate $ <var:h> \cdot <nat:16> + <var:i> \cdot <nat:372> + <nat:486> \cdot <var:m> + <nat:228> \cdot <var:n> + <nat:132> \cdot <var:I> + <nat:246> \cdot <var:K> + <var:R> \cdot <nat:6> + <var:V> \cdot <nat:208> $ is known as even . Take note that the pair $ <var:h> <nat:16> $ is known to be even . Observe the product $ <nat:228> <var:n> $ is known to be even . The terms $ <nat:6> <var:R> $ , $ <nat:372> <var:i> $ , $ <var:K> <nat:246> $ , as well as $ <var:I> <nat:132> $ must be even . This claim is proven as a consequence that the product between an even number with an arbitrary integer will be even . In addition , observe that the term $ <var:V> <nat:208> $ is known as an even whole number from the fact multiplying between an even element of $ \mathbb{N} $ with any natural number is guaranteed to be even . The product $ <var:m> <nat:486> $ is known to be an even number in $ \mathbb{N} $ . Remember that $ <nat:359> $ is obviously an odd element of $ \mathbb{Z}^+ $ . We justify our theorem holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:V> <var:R> <var:h> <var:m> <var:n> <var:K> <var:i> : nat , Nat . odd ( <nat:228> * <var:n> + <nat:208> * <var:V> + <nat:246> * <var:K> + <nat:132> * <var:I> + <nat:372> * <var:i> + <nat:486> * <var:m> + <nat:16> * <var:h> + <nat:6> * <var:R> + <nat:359> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:16> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:n> + <nat:208> * <var:V> + <nat:246> * <var:K> + <nat:132> * <var:I> + <nat:372> * <var:i> + <nat:486> * <var:m> + <nat:16> * <var:h> + <nat:6> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:359> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 