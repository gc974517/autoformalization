\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:328> * <var:X> + <nat:324> * <var:b> + <nat:210> * <var:P> + <nat:86> * <var:B> + <nat:235> + <nat:394> * <var:O> + <nat:2> * <var:n> $ is guaranteed to be odd . \end{theorem} \begin{proof} We justify our main result holds . Observe $ <nat:235> $ is trivially an odd element of $ \mathbb{N} $ . $ <nat:210> \cdot <var:P> + <var:n> \cdot <nat:2> + <nat:394> \cdot <var:O> + <var:X> \cdot <nat:328> + <var:b> \cdot <nat:324> + <var:B> \cdot <nat:86> $ is clearly even , by reason that the adding between even positive integers together and an even natural number must be an even number in $ \mathbb{N} $ . The products $ <var:B> <nat:86> $ , $ <var:P> <nat:210> $ , as well as $ <nat:324> <var:b> $ are known as even integers . This must be true from the fact taking the product between an even whole number with some number in $ \mathbb{Z}^+ $ will be even . Building on , the product $ <nat:394> <var:O> $ is known as an even element of $ \mathbb{N} $ . In addition to this , $ <var:n> <nat:2> $ is known to be an even natural number . This fact is proven from the knowledge multiplying between an even number in $ \mathbb{N} $ with a number in $ \mathbb{Z}^+ $ is guaranteed to be an even natural . The product $ <nat:328> <var:X> $ is trivially an even whole number . This holds from the knowledge multiplying of an even positive integer and a whole number must be an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:b> <var:P> <var:B> <var:O> <var:n> : nat , Nat . odd ( <nat:328> * <var:X> + <nat:324> * <var:b> + <nat:210> * <var:P> + <nat:86> * <var:B> + <nat:394> * <var:O> + <nat:2> * <var:n> + <nat:235> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:235> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:X> + <nat:324> * <var:b> + <nat:210> * <var:P> + <nat:86> * <var:B> + <nat:394> * <var:O> + <nat:2> * <var:n> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 