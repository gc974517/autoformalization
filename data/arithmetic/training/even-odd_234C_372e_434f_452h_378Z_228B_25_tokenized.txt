\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking every integers $ <var:f> $ , $ <var:e> $ , $ <var:B> $ , $ <var:C> $ , $ <var:h> $ , and $ <var:Z> $ $ <nat:234> * <var:C> + <nat:25> + <nat:452> * <var:h> + <var:B> * <nat:228> + <var:e> * <nat:372> + <var:f> * <nat:434> + <var:Z> * <nat:378> $ will be odd . \end{theorem} \begin{proof} Notice that $ <var:C> * <nat:234> + <var:Z> * <nat:378> + <nat:228> * <var:B> + <nat:434> * <var:f> + <nat:372> * <var:e> + <nat:25> + <var:h> * <nat:452> $ is guaranteed to be odd from the knowledge the sum $ <var:C> <nat:234> + <nat:372> <var:e> + <nat:434> <var:f> + <nat:452> <var:h> + <nat:378> <var:Z> + <nat:228> <var:B> $ is trivially even . Notice the leading terms $ <nat:434> $ , $ <nat:452> $ , $ <nat:228> $ , and also $ <nat:378> $ are known to be even In addition , the positive integer $ <nat:372> $ is known to be even Further , the positive integer $ <nat:234> $ is known as even We know the summing of even numbers successively and an odd integer will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:e> <var:B> <var:C> <var:h> <var:Z> : nat , Nat . odd ( <nat:234> * <var:C> + <nat:452> * <var:h> + <nat:228> * <var:B> + <nat:372> * <var:e> + <nat:434> * <var:f> + <nat:378> * <var:Z> + <nat:25> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even <nat:372> = true ) . { auto . } assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:C> + <nat:452> * <var:h> + <nat:228> * <var:B> + <nat:372> * <var:e> + <nat:434> * <var:f> + <nat:378> * <var:Z> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 