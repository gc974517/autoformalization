\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:e> $ , $ <var:G> $ , $ <var:x> $ , $ <var:y> $ , $ <var:D> $ , $ <var:v> $ , $ <var:J> \in \mathbb{N} $ so that $ <var:y> $ , $ <var:J> $ , $ <var:G> $ , $ <var:e> $ , $ <var:v> $ , $ <var:x> $ , $ <var:D> > <nat:1> $ . Let that $ <var:L> \in \mathbb{N} $ is considered a <def:seven-composite> positive integer if $ <var:L> = <var:e> \cdot <var:D> \cdot <var:y> \cdot <var:J> \cdot <var:v> \cdot <var:G> \cdot <var:x> $ . Accordingly $ <var:L> = <nat:166320> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Take $ <var:J> = <nat:11> $ , $ <var:y> = <nat:7> $ , $ <var:G> = <nat:2> $ , $ <var:x> = <nat:3> $ , $ <var:D> = <nat:4> $ , $ <var:v> = <nat:9> $ , $ <var:e> = <nat:10> $ . Notice $ <nat:2> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:7> $ , and $ <nat:4> $ are more than <nat:1> . What's more observe that likewise $ <var:D> \times <var:x> \times <var:y> \times <var:J> \times <var:G> \times <var:e> \times <var:v> = <nat:4> \times <nat:3> \times <nat:7> \times <nat:11> \times <nat:2> \times <nat:10> \times <nat:9> = <nat:166320> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:L> : nat ) := exists <var:e> <var:G> <var:x> <var:y> <var:D> <var:v> <var:J> : nat , ( <var:y> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:L> = <var:e> * <var:D> * <var:y> * <var:J> * <var:v> * <var:G> * <var:x> ) . Theorem <genP:1> : <def:seven-composite> <nat:166320> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:2> . exists <nat:3> . exists <nat:7> . exists <nat:4> . exists <nat:9> . exists <nat:11> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 