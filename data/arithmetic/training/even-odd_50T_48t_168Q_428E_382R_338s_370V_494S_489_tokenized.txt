\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With any whole numbers $ <var:V> $ , $ <var:s> $ , $ <var:Q> $ , $ <var:t> $ , $ <var:E> $ , $ <var:S> $ , $ <var:R> $ , and $ <var:T> $ the summation $ <nat:50> \times <var:T> + <nat:48> \times <var:t> + <var:Q> \times <nat:168> + <nat:428> \times <var:E> + <nat:489> + <nat:382> \times <var:R> + <nat:338> \times <var:s> + <nat:370> \times <var:V> + <nat:494> \times <var:S> $ is odd . \end{theorem} \begin{proof} The pairs $ <var:s> \cdot <nat:338> $ additionally $ <var:t> \cdot <nat:48> $ are obviously even . Furthermore , the pairs $ <nat:428> \cdot <var:E> $ and moreover $ <var:V> \cdot <nat:370> $ are obviously even numbers in $ \mathbb{N} $ from the knowledge multiplying of an even integer and a positive integer is an even number in $ \mathbb{N} $ . Observe that $ <var:T> \cdot <nat:50> $ is clearly even . The terms $ <var:R> \cdot <nat:382> $ plus $ <nat:494> \cdot <var:S> $ are known to be even . Likewise , the term $ <nat:168> \cdot <var:Q> $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:s> <var:Q> <var:t> <var:E> <var:S> <var:R> <var:T> : nat , Nat . odd ( <nat:50> * <var:T> + <nat:48> * <var:t> + <nat:168> * <var:Q> + <nat:428> * <var:E> + <nat:382> * <var:R> + <nat:338> * <var:s> + <nat:370> * <var:V> + <nat:494> * <var:S> + <nat:489> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:338> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 