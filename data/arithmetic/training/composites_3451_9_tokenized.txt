\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} If we get satisfying the condition that $ <var:g> $ , $ <var:S> $ , $ <var:k> $ , $ <var:L> $ , $ <var:Q> $ , $ <var:v> $ , $ <var:N> $ , $ <var:a> $ , $ <var:V> > <nat:1> $ such that for some whole number $ <var:q> $ , $ <var:q> = <var:N> \cdot <var:g> \cdot <var:a> \cdot <var:V> \cdot <var:k> \cdot <var:Q> \cdot <var:v> \cdot <var:S> \cdot <var:L> $ , then say that $ <var:q> $ is <def:nine-composite> with some $ <var:S> $ , $ <var:a> $ , $ <var:N> $ , $ <var:L> $ , $ <var:V> $ , $ <var:g> $ , $ <var:v> $ , $ <var:Q> $ , $ <var:k> $ . Therefore the number <nat:7257600> is <def:nine-composite> . \end{theorem} \begin{proof} Notice $ <nat:7257600> = <nat:2> \times <nat:8> \times <nat:3> \times <nat:7> \times <nat:12> \times <nat:4> \times <nat:10> \times <nat:9> \times <nat:5> $ . Additionally notice that $ <nat:4> $ , $ <nat:9> $ , $ <nat:7> $ , $ <nat:5> $ , $ <nat:10> $ , $ <nat:12> $ , $ <nat:8> $ , $ <nat:2> $ , and $ <nat:3> $ are more than <nat:1> . Consequently , $ <nat:7257600> = <var:k> \cdot <var:a> \cdot <var:g> \cdot <var:V> \cdot <var:v> \cdot <var:Q> \cdot <var:L> \cdot <var:S> \cdot <var:N> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:q> : nat ) := exists <var:S> <var:a> <var:N> <var:L> <var:V> <var:g> <var:v> <var:Q> <var:k> : nat , ( <var:g> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:N> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:q> = <var:N> * <var:g> * <var:a> * <var:V> * <var:k> * <var:Q> * <var:v> * <var:S> * <var:L> ) . Theorem <genP:1> : <def:nine-composite> <nat:7257600> . Proof . unfold <def:nine-composite> . exists <nat:9> . exists <nat:2> . exists <nat:8> . exists <nat:4> . exists <nat:7> . exists <nat:3> . exists <nat:10> . exists <nat:5> . exists <nat:12> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 