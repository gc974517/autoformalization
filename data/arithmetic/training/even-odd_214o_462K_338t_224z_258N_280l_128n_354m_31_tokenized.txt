\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:214> * <var:o> + <var:K> * <nat:462> + <var:t> * <nat:338> + <nat:224> * <var:z> + <var:N> * <nat:258> + <nat:280> * <var:l> + <var:n> * <nat:128> + <nat:31> + <nat:354> * <var:m> $ is guaranteed to be odd using every positive integers $ <var:m> $ , $ <var:K> $ , $ <var:t> $ , $ <var:o> $ , $ <var:N> $ , $ <var:l> $ , $ <var:z> $ , and $ <var:n> $ . \end{theorem} \begin{proof} The terms $ <var:z> \cdot <nat:224> $ , $ <nat:280> \cdot <var:l> $ , $ <var:n> \cdot <nat:128> $ , $ <var:m> \cdot <nat:354> $ , $ <nat:462> \cdot <var:K> $ , and moreover $ <var:t> \cdot <nat:338> $ are even whole numbers . The product $ <var:o> \cdot <nat:214> $ is even as a consequence that multiplying of an even positive integer with a number in $ \mathbb{N} $ is an even natural number . Remember that the term $ <nat:258> \cdot <var:N> $ is obviously even . This fact is true because the product between an even natural number with an arbitrary natural is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:K> <var:t> <var:o> <var:N> <var:l> <var:z> <var:n> : nat , Nat . odd ( <nat:214> * <var:o> + <nat:462> * <var:K> + <nat:338> * <var:t> + <nat:224> * <var:z> + <nat:258> * <var:N> + <nat:280> * <var:l> + <nat:128> * <var:n> + <nat:354> * <var:m> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:224> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 