\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:162> \cdot <var:f> + <var:H> \cdot <nat:196> + <nat:18> \cdot <var:D> + <nat:458> \cdot <var:t> + <nat:403> $ is guaranteed to be odd . \end{theorem} \begin{proof} The formula $ <nat:196> * <var:H> + <var:t> * <nat:458> + <nat:162> * <var:f> + <var:D> * <nat:18> $ is known to be even . In addition , notice that the coefficient $ <nat:458> $ is known to be even . Accordingly , $ <var:t> \times <nat:458> $ is guaranteed to be even at the same time . In addition , take note that the natural number $ <nat:18> $ is known as an even natural number . Then , the term $ <nat:18> \times <var:D> $ is guaranteed to be even also . The natural number $ <nat:196> $ is clearly even . So , $ <var:H> \times <nat:196> $ will be even in addition . The product $ <nat:162> \times <var:f> $ is clearly even from the knowledge the product between an even integer and some natural is even and the leading term $ <nat:162> $ is clearly even . Since the summation between even numbers in $ \mathbb{N} $ and even positive integers is an even number in $ \mathbb{N} $ , plus by reason that taking the product of even natural numbers and any whole number is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:H> <var:D> <var:t> : nat , Nat . odd ( <nat:162> * <var:f> + <nat:196> * <var:H> + <nat:18> * <var:D> + <nat:458> * <var:t> + <nat:403> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:f> + <nat:196> * <var:H> + <nat:18> * <var:D> + <nat:458> * <var:t> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 