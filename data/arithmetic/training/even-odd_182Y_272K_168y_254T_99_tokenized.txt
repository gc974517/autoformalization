\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:y> \times <nat:168> + <nat:182> \times <var:Y> + <nat:272> \times <var:K> + <nat:254> \times <var:T> + <nat:99> $ is odd . \end{theorem} \begin{proof} We check $ <var:Y> \cdot <nat:182> + <nat:272> \cdot <var:K> + <nat:99> + <var:T> \cdot <nat:254> + <var:y> \cdot <nat:168> $ is obviously odd as a consequence that the expression $ <var:T> \cdot <nat:254> + <nat:272> \cdot <var:K> + <nat:168> \cdot <var:y> + <nat:182> \cdot <var:Y> $ is clearly even . The numbers $ <nat:182> $ and $ <nat:168> $ are guaranteed to be even integers We know that the leading term $ <nat:254> $ is trivially an even whole number Additionally , the whole number $ <nat:272> $ is obviously even The expression $ <nat:182> \cdot <var:Y> + <var:K> \cdot <nat:272> + <nat:168> \cdot <var:y> + <nat:254> \cdot <var:T> $ must be trivially even from the fact taking the product between an even number in $ \mathbb{Z}^+ $ with some number in $ \mathbb{N} $ will be even . Recall that $ <nat:99> $ is obviously odd . The adding of an even number in $ \mathbb{N} $ and an odd whole number must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:Y> <var:K> <var:T> : nat , Nat . odd ( <nat:168> * <var:y> + <nat:182> * <var:Y> + <nat:272> * <var:K> + <nat:254> * <var:T> + <nat:99> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:y> + <nat:182> * <var:Y> + <nat:272> * <var:K> + <nat:254> * <var:T> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:99> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 