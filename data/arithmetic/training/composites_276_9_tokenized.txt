\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Under the condition we have $ <var:D> \times <var:h> \times <var:m> \times <var:R> \times <var:i> \times <var:V> \times <var:s> \times <var:a> \times <var:g> = <var:Y> $ given some integer $ <var:Y> $ as well as so that $ <var:g> $ , $ <var:s> $ , $ <var:V> $ , $ <var:R> $ , $ <var:a> $ , $ <var:h> $ , $ <var:m> $ , $ <var:D> $ and $ <var:i> \geq <nat:2> $ , then we claim that $ <var:Y> $ is a <def:nine-composite> natural number with some $ <var:a> $ , $ <var:R> $ , $ <var:D> $ , $ <var:g> $ , $ <var:h> $ , $ <var:i> $ , $ <var:m> $ , $ <var:s> $ , $ <var:V> \in \mathbb{Z}^+ $ . Hence the positive integer <nat:6220800> is a <def:nine-composite> number . \end{theorem} \begin{proof} Take $ <var:s> = <nat:2> $ , $ <var:R> = <nat:6> $ , $ <var:i> = <nat:4> $ , $ <var:D> = <nat:5> $ , $ <var:g> = <nat:10> $ , $ <var:m> = <nat:9> $ , $ <var:h> = <nat:12> $ , $ <var:V> = <nat:8> $ and $ <var:a> = <nat:3> $ . Plus observe $ <nat:12> $ , $ <nat:2> $ , $ <nat:8> $ , $ <nat:3> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:10> $ , $ <nat:6> $ , and $ <nat:4> \geq <nat:2> $ . Therefore , $ <var:g> \times <var:h> \times <var:m> \times <var:s> \times <var:i> \times <var:a> \times <var:R> \times <var:V> \times <var:D> = <nat:6220800> $ is verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:Y> : nat ) := exists <var:a> <var:R> <var:D> <var:g> <var:h> <var:i> <var:m> <var:s> <var:V> : nat , ( <var:D> * <var:h> * <var:m> * <var:R> * <var:i> * <var:V> * <var:s> * <var:a> * <var:g> = <var:Y> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:6220800> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:6> . exists <nat:5> . exists <nat:10> . exists <nat:12> . exists <nat:4> . exists <nat:9> . exists <nat:2> . exists <nat:8> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 