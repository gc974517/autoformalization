\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> <nat:40> + <var:p> <nat:214> + <nat:390> <var:M> + <nat:314> <var:t> + <nat:158> <var:L> + <nat:438> <var:Z> + <nat:267> $ is odd . \end{theorem} \begin{proof} The leading term $ <nat:390> $ is known to be even . Consequently , the product $ <var:M> \cdot <nat:390> $ will be even too . The natural number $ <nat:158> $ is even . Consequently , the pair $ <var:L> \cdot <nat:158> $ will be even as well . Remember the pair $ <var:t> \cdot <nat:314> $ is clearly an even whole number as a consequence that the multiplication of an even number in $ \mathbb{Z}^+ $ and a element of $ \mathbb{N} $ will be even , which holds from the fact the coefficient $ <nat:314> $ is an even natural number . The whole number $ <nat:40> $ is trivially even . Therefore , the product $ <nat:40> \cdot <var:K> $ will be even in addition . The pair $ <var:p> \cdot <nat:214> $ is even . This claim must be true since the positive integer $ <nat:214> $ is known to be even . See that the integer $ <nat:438> $ is obviously an even natural number . Therefore , the product $ <nat:438> \cdot <var:Z> $ is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:p> <var:M> <var:t> <var:L> <var:Z> : nat , Nat . odd ( <nat:40> * <var:K> + <nat:214> * <var:p> + <nat:390> * <var:M> + <nat:314> * <var:t> + <nat:158> * <var:L> + <nat:438> * <var:Z> + <nat:267> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:390> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 