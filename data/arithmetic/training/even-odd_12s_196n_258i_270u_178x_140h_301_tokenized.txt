\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:h> \cdot <nat:140> + <var:u> \cdot <nat:270> + <var:x> \cdot <nat:178> + <nat:301> + <var:s> \cdot <nat:12> + <var:i> \cdot <nat:258> + <var:n> \cdot <nat:196> $ is guaranteed to be odd . \end{theorem} \begin{proof} We employ the fact the summation $ <nat:12> * <var:s> + <nat:196> * <var:n> + <nat:258> * <var:i> + <nat:270> * <var:u> + <var:x> * <nat:178> + <nat:140> * <var:h> $ is trivially even , as a consequence that the product of an even number and an arbitrary whole number is an even number in $ \mathbb{N} $ . The coefficients $ <nat:178> $ and also $ <nat:140> $ are known as even elements of $ \mathbb{Z}^+ $ Additionally , the positive integer $ <nat:12> $ is guaranteed to be even The positive integer $ <nat:258> $ is known to be an even integer The leading term $ <nat:270> $ is guaranteed to be an even integer On top of this , notice that the positive integer $ <nat:196> $ is trivially an even number in $ \mathbb{N} $ Notice $ <nat:301> $ is guaranteed to be odd . Remember that the addition of an even whole number with an odd number must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:u> <var:x> <var:s> <var:i> <var:n> : nat , Nat . odd ( <nat:140> * <var:h> + <nat:270> * <var:u> + <nat:178> * <var:x> + <nat:12> * <var:s> + <nat:258> * <var:i> + <nat:196> * <var:n> + <nat:301> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:178> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:h> + <nat:270> * <var:u> + <nat:178> * <var:x> + <nat:12> * <var:s> + <nat:258> * <var:i> + <nat:196> * <var:n> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:301> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 