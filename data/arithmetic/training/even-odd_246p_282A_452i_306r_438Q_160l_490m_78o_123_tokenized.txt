\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:p> <nat:246> + <var:A> <nat:282> + <var:i> <nat:452> + <nat:306> <var:r> + <nat:438> <var:Q> + <nat:123> + <var:l> <nat:160> + <var:m> <nat:490> + <var:o> <nat:78> $ is odd assuming some positive terms $ <var:p> $ , $ <var:o> $ , $ <var:m> $ , $ <var:i> $ , $ <var:r> $ , $ <var:Q> $ , $ <var:A> $ , and $ <var:l> $ . \end{theorem} \begin{proof} In addition , the natural numbers $ <nat:246> $ , $ <nat:282> $ , $ <nat:452> $ , $ <nat:306> $ , $ <nat:438> $ , $ <nat:160> $ , $ <nat:490> $ , and likewise $ <nat:78> $ will be even . Therefore , the pairs $ <nat:246> <var:p> $ , $ <nat:282> <var:A> $ , $ <nat:452> <var:i> $ , $ <nat:306> <var:r> $ , $ <nat:438> <var:Q> $ , $ <var:l> <nat:160> $ , $ <nat:490> <var:m> $ , and also $ <var:o> <nat:78> $ will be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:o> <var:m> <var:i> <var:r> <var:Q> <var:A> <var:l> : nat , Nat . odd ( <nat:246> * <var:p> + <nat:282> * <var:A> + <nat:452> * <var:i> + <nat:306> * <var:r> + <nat:438> * <var:Q> + <nat:160> * <var:l> + <nat:490> * <var:m> + <nat:78> * <var:o> + <nat:123> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:490> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 