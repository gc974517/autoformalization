\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:44> \cdot <var:t> + <var:i> \cdot <nat:198> + <nat:15> + <var:g> \cdot <nat:340> + <var:P> \cdot <nat:192> + <var:f> \cdot <nat:98> + <var:n> \cdot <nat:8> $ will be odd . \end{theorem} \begin{proof} Notice that the term $ <nat:44> \times <var:t> $ is known as even as a consequence that taking the product between an even number in $ \mathbb{N} $ with some integer will be even . This is true by reason that the positive integer $ <nat:44> $ is known as an even positive integer . The leading term $ <nat:192> $ is known to be even . As a consequence , the pair $ <nat:192> \times <var:P> $ must be even at the same time . Additionally , the leading term $ <nat:8> $ is trivially even . For this reason , the product $ <var:n> \times <nat:8> $ will be even as well . Likewise , the natural number $ <nat:98> $ is known to be even . Hence , $ <var:f> \times <nat:98> $ is guaranteed to be even also . Additionally , $ <var:i> \times <nat:198> $ is even by reason that taking the product of an even number in $ \mathbb{N} $ with some element of $ \mathbb{Z}^+ $ will be obviously an even element of $ \mathbb{N} $ , which is proven because the whole number $ <nat:198> $ is guaranteed to be even . Furthermore , the integer $ <nat:340> $ is trivially even . Consequently , the pair $ <var:g> \times <nat:340> $ is guaranteed to be even in addition . It can be proven that our lemma must be true . See $ <nat:15> $ is an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:t> <var:i> <var:g> <var:P> <var:f> <var:n> : nat , Nat . odd ( <nat:44> * <var:t> + <nat:198> * <var:i> + <nat:340> * <var:g> + <nat:192> * <var:P> + <nat:98> * <var:f> + <nat:8> * <var:n> + <nat:15> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:15> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 