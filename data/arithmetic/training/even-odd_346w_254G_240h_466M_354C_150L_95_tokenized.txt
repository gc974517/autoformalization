\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:h> \cdot <nat:240> + <var:G> \cdot <nat:254> + <var:L> \cdot <nat:150> + <nat:95> + <nat:466> \cdot <var:M> + <var:C> \cdot <nat:354> + <var:w> \cdot <nat:346> $ must be odd assuming some whole numbers $ <var:M> $ , $ <var:h> $ , $ <var:w> $ , $ <var:C> $ , $ <var:L> $ , and $ <var:G> $ . \end{theorem} \begin{proof} Observe that $ <var:w> \times <nat:346> + <nat:254> \times <var:G> + <var:h> \times <nat:240> + <var:M> \times <nat:466> + <var:C> \times <nat:354> + <nat:150> \times <var:L> $ is known to be even . Observe that the multiplication of an even whole number and some positive integer is guaranteed to be an even whole number . The numbers $ <nat:354> $ , $ <nat:346> $ , $ <nat:466> $ , $ <nat:240> $ , and $ <nat:254> $ are known to be even numbers The natural number $ <nat:150> $ is guaranteed to be an even natural number Recall $ <nat:95> $ is guaranteed to be odd . Notice that the summation of even whole numbers together with an odd element of $ \mathbb{Z}^+ $ is guaranteed to be an odd integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:h> <var:w> <var:C> <var:L> <var:G> : nat , Nat . odd ( <nat:240> * <var:h> + <nat:254> * <var:G> + <nat:150> * <var:L> + <nat:466> * <var:M> + <nat:354> * <var:C> + <nat:346> * <var:w> + <nat:95> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:h> + <nat:254> * <var:G> + <nat:150> * <var:L> + <nat:466> * <var:M> + <nat:354> * <var:C> + <nat:346> * <var:w> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:95> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 