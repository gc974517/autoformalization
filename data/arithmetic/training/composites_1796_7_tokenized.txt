\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Whenever we get so that $ <var:p> $ , $ <var:b> $ , $ <var:P> $ , $ <var:i> $ , $ <var:H> $ , $ <var:B> $ and $ <var:X> > <nat:1> $ where assuming $ <var:j> \in \mathbb{Z}^+ $ , $ <var:P> \times <var:p> \times <var:b> \times <var:i> \times <var:B> \times <var:H> \times <var:X> = <var:j> $ , then we define that $ <var:j> $ is a <def:seven-composite> positive integer given some $ <var:P> $ , $ <var:H> $ , $ <var:b> $ , $ <var:i> $ , $ <var:X> $ , $ <var:p> $ , $ <var:B> \in \mathbb{N} $ . \end{definition} \begin{theorem} $ <var:j> = <nat:113400> $ is <def:seven-composite> . \end{theorem} \begin{proof} We prove <nat:113400> is a <def:seven-composite> integer as $ <nat:113400> = <var:B> \times <var:P> \times <var:p> \times <var:b> \times <var:X> \times <var:H> \times <var:i> $ produces $ <var:p> = <nat:3> $ , $ <var:B> = <nat:6> $ , $ <var:H> = <nat:10> $ , $ <var:P> = <nat:7> $ , $ <var:i> = <nat:5> $ , $ <var:b> = <nat:2> $ and $ <var:X> = <nat:9> $ as well as because $ <nat:3> $ , $ <nat:5> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:6> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:j> : nat ) := exists <var:P> <var:H> <var:b> <var:i> <var:X> <var:p> <var:B> : nat , ( <var:p> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:B> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:P> * <var:p> * <var:b> * <var:i> * <var:B> * <var:H> * <var:X> = <var:j> ) . Theorem <genP:1> : <def:seven-composite> <nat:113400> . Proof . unfold <def:seven-composite> . exists <nat:7> . exists <nat:10> . exists <nat:2> . exists <nat:5> . exists <nat:9> . exists <nat:3> . exists <nat:6> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 