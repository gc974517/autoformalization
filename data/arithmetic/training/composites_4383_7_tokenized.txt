\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted that we get $ <var:I> \times <var:G> \times <var:A> \times <var:w> \times <var:g> \times <var:E> \times <var:l> = <var:P> $ assuming $ <var:P> \in \mathbb{N} $ as well as so that $ <var:l> $ , $ <var:E> $ , $ <var:G> $ , $ <var:I> $ , $ <var:w> $ , $ <var:g> $ , $ <var:A> \geq <nat:2> $ , let that $ <var:P> $ is a <def:seven-composite> whole number assuming some integers $ <var:l> $ , $ <var:g> $ , $ <var:G> $ , $ <var:I> $ , $ <var:E> $ , $ <var:A> $ , $ <var:w> $ . Therefore the integer <nat:532224> is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Assume $ <var:w> = <nat:3> $ , $ <var:A> = <nat:4> $ , $ <var:I> = <nat:12> $ , $ <var:G> = <nat:6> $ , $ <var:l> = <nat:11> $ , $ <var:E> = <nat:8> $ , $ <var:g> = <nat:7> $ . We justify <nat:532224> is the product between $ <var:I> $ , $ <var:G> $ , $ <var:l> $ , $ <var:w> $ , $ <var:A> $ , $ <var:g> $ and $ <var:E> \in \mathbb{N} $ and $ <var:l> $ , $ <var:G> $ , $ <var:g> $ , $ <var:I> $ , $ <var:A> $ , $ <var:E> $ and $ <var:w> \geq <nat:2> $ . Moreover notice $ <nat:4> $ , $ <nat:6> $ , $ <nat:11> $ , $ <nat:7> $ , $ <nat:8> $ , $ <nat:3> $ and $ <nat:12> $ are larger than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:P> : nat ) := exists <var:l> <var:g> <var:G> <var:I> <var:E> <var:A> <var:w> : nat , ( <var:I> * <var:G> * <var:A> * <var:w> * <var:g> * <var:E> * <var:l> = <var:P> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:532224> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:7> . exists <nat:6> . exists <nat:12> . exists <nat:8> . exists <nat:4> . exists <nat:3> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 