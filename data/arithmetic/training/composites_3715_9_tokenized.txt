\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Whenever there are whole numbers $ <var:d> $ , $ <var:l> $ , $ <var:b> $ , $ <var:L> $ , $ <var:M> $ , $ <var:D> $ , $ <var:x> $ , $ <var:s> $ , $ <var:B> $ then take that $ <var:Q> \in \mathbb{N} $ will be a <def:nine-composite> positive integer given $ <var:Q> = <var:D> \times <var:L> \times <var:B> \times <var:l> \times <var:s> \times <var:M> \times <var:x> \times <var:b> \times <var:d> $ and terms are greater than <nat:1> . \end{definition} \begin{theorem} $ <nat:26611200> = <var:Q> $ is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Notice that $ <nat:7> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:12> $ and $ <nat:8> $ are greater than <nat:1> . Additionally note also $ <nat:26611200> = <nat:10> \times <nat:8> \times <nat:5> \times <nat:2> \times <nat:4> \times <nat:11> \times <nat:7> \times <nat:9> \times <nat:12> = <var:l> \times <var:d> \times <var:x> \times <var:L> \times <var:b> \times <var:B> \times <var:M> \times <var:D> \times <var:s> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:Q> : nat ) := exists <var:d> <var:l> <var:b> <var:L> <var:M> <var:D> <var:x> <var:s> <var:B> : nat , ( <var:Q> = <var:D> * <var:L> * <var:B> * <var:l> * <var:s> * <var:M> * <var:x> * <var:b> * <var:d> ) /\ ( <var:d> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:M> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:B> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:26611200> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } exists <nat:8> . exists <nat:10> . exists <nat:4> . exists <nat:2> . exists <nat:7> . exists <nat:9> . exists <nat:5> . exists <nat:12> . exists <nat:11> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 