\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:I> $ , $ <var:c> $ , $ <var:t> $ , $ <var:d> $ , $ <var:w> $ , $ <var:m> $ , $ <var:V> $ as whole numbers . Let that $ <var:W> \in \mathbb{Z}^+ $ is considered a <def:seven-composite> integer assuming $ <var:W> = <var:c> \cdot <var:t> \cdot <var:I> \cdot <var:m> \cdot <var:d> \cdot <var:V> \cdot <var:w> $ plus terms are greater than or equivalent to <nat:2> . \end{definition} \begin{theorem} The positive integer <nat:99792> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Remember that <nat:99792> is a <def:seven-composite> integer whenever <nat:99792> is the product of $ <var:c> $ , $ <var:t> $ , $ <var:V> $ , $ <var:d> $ , $ <var:I> $ , $ <var:w> $ , $ <var:m> $ so that $ <var:t> $ , $ <var:c> $ , $ <var:w> $ , $ <var:I> $ , $ <var:V> $ , $ <var:d> $ and $ <var:m> \geq <nat:2> $ . We confirm <nat:99792> is a <def:seven-composite> natural number . Observe that $ <nat:11> $ , $ <nat:6> $ , $ <nat:9> $ , $ <nat:2> $ , $ <nat:4> $ , $ <nat:7> $ and $ <nat:3> \geq <nat:2> $ . Additionally observe further $ <nat:99792> = <var:I> \times <var:t> \times <var:V> \times <var:c> \times <var:w> \times <var:d> \times <var:m> $ indicates $ <var:t> = <nat:3> $ , $ <var:I> = <nat:4> $ , $ <var:c> = <nat:9> $ , $ <var:w> = <nat:2> $ , $ <var:d> = <nat:11> $ , $ <var:m> = <nat:6> $ , and $ <var:V> = <nat:7> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:W> : nat ) := exists <var:I> <var:c> <var:t> <var:d> <var:w> <var:m> <var:V> : nat , ( <var:W> = <var:c> * <var:t> * <var:I> * <var:m> * <var:d> * <var:V> * <var:w> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:99792> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } exists <nat:4> . exists <nat:9> . exists <nat:3> . exists <nat:11> . exists <nat:2> . exists <nat:6> . exists <nat:7> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 