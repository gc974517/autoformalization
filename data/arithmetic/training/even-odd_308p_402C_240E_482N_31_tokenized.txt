\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:p> <nat:308> + <nat:402> <var:C> + <var:N> <nat:482> + <nat:31> + <var:E> <nat:240> $ must be odd . \end{theorem} \begin{proof} See $ <nat:240> <var:E> + <nat:482> <var:N> + <nat:308> <var:p> + <var:C> <nat:402> $ is obviously even . The whole numbers $ <nat:240> $ additionally $ <nat:308> $ are known to be even natural numbers . For this reason , the products $ <var:E> <nat:240> $ and $ <nat:308> <var:p> $ will be even also . Further , remember the term $ <var:C> <nat:402> $ is clearly even . This claim is proven as a consequence that the coefficient $ <nat:402> $ is even . The number $ <nat:482> $ is obviously an even natural number . As a consequence , the pair $ <nat:482> <var:N> $ will be even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:C> <var:N> <var:E> : nat , Nat . odd ( <nat:308> * <var:p> + <nat:402> * <var:C> + <nat:482> * <var:N> + <nat:240> * <var:E> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:402> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:402> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:p> + <nat:402> * <var:C> + <nat:482> * <var:N> + <nat:240> * <var:E> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 