\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:r> * <nat:184> + <var:S> * <nat:228> + <var:g> * <nat:318> + <nat:252> * <var:h> + <var:P> * <nat:376> + <nat:109> + <var:o> * <nat:2> + <nat:456> * <var:O> + <nat:182> * <var:A> $ must be odd . \end{theorem} \begin{proof} Notice that the products $ <var:S> <nat:228> $ , $ <var:h> <nat:252> $ , $ <var:g> <nat:318> $ , additionally $ <nat:376> <var:P> $ must be even . This fact is true from the fact the multiplication between an even whole number and a number in $ \mathbb{Z}^+ $ is even . Furthermore , the pairs $ <nat:184> <var:r> $ , $ <var:A> <nat:182> $ , and likewise $ <var:o> <nat:2> $ are trivially even integers . In addition to this , the pair $ <var:O> <nat:456> $ is trivially an even number . Notice that $ <nat:109> $ is guaranteed to be an odd number in $ \mathbb{N} $ . Because the summing of an even element of $ \mathbb{Z}^+ $ with an odd natural will be odd , as a result $ <var:h> <nat:252> + <nat:318> <var:g> + <var:O> <nat:456> + <nat:376> <var:P> + <nat:109> + <var:S> <nat:228> + <nat:2> <var:o> + <var:r> <nat:184> + <var:A> <nat:182> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:S> <var:g> <var:h> <var:P> <var:o> <var:O> <var:A> : nat , Nat . odd ( <nat:184> * <var:r> + <nat:228> * <var:S> + <nat:318> * <var:g> + <nat:252> * <var:h> + <nat:376> * <var:P> + <nat:2> * <var:o> + <nat:456> * <var:O> + <nat:182> * <var:A> + <nat:109> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:228> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:376> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:109> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 