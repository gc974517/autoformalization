\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:I> <nat:448> + <nat:225> + <var:U> <nat:476> + <var:l> <nat:468> + <var:j> <nat:190> + <nat:146> <var:n> + <var:q> <nat:410> + <var:R> <nat:114> + <var:t> <nat:252> $ is guaranteed to be odd . \end{theorem} \begin{proof} Recall the pairs $ <nat:448> <var:I> $ , $ <nat:190> <var:j> $ , as well as $ <nat:114> <var:R> $ must be even . This is proven since the coefficients $ <nat:448> $ , $ <nat:190> $ , and also $ <nat:114> $ must be obviously even numbers . Remember the integers $ <nat:252> $ , $ <nat:410> $ , $ <nat:468> $ , and $ <nat:146> $ are even . Accordingly , the products $ <var:t> <nat:252> $ , $ <var:q> <nat:410> $ , $ <nat:468> <var:l> $ , and likewise $ <var:n> <nat:146> $ is guaranteed to be even also . Additionally , the coefficient $ <nat:476> $ is trivially even . Therefore , the term $ <var:U> <nat:476> $ will be even too . See that $ <nat:225> $ is obviously an odd natural number . The summing between an even natural with an odd natural number will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:U> <var:l> <var:j> <var:n> <var:q> <var:R> <var:t> : nat , Nat . odd ( <nat:448> * <var:I> + <nat:476> * <var:U> + <nat:468> * <var:l> + <nat:190> * <var:j> + <nat:146> * <var:n> + <nat:410> * <var:q> + <nat:114> * <var:R> + <nat:252> * <var:t> + <nat:225> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:225> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 