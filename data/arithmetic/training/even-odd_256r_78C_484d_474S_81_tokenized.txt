\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given terms $ <var:d> $ , $ <var:r> $ , $ <var:S> $ , and $ <var:C> $ the expression $ <nat:78> * <var:C> + <var:S> * <nat:474> + <nat:81> + <nat:256> * <var:r> + <var:d> * <nat:484> $ is guaranteed to be odd . \end{theorem} \begin{proof} The summing between even numbers in $ \mathbb{Z}^+ $ and an odd integer is an odd natural number . $ <nat:81> + <nat:256> \cdot <var:r> + <var:d> \cdot <nat:484> + <nat:474> \cdot <var:S> + <var:C> \cdot <nat:78> $ is known as odd by reason that the sum $ <nat:256> \times <var:r> + <nat:484> \times <var:d> + <var:C> \times <nat:78> + <nat:474> \times <var:S> $ is obviously even . On top of this , the products $ <nat:256> \times <var:r> $ , $ <nat:484> \times <var:d> $ , $ <var:C> \times <nat:78> $ , and $ <nat:474> \times <var:S> $ are even as a consequence that the product of an even number in $ \mathbb{Z}^+ $ and an arbitrary positive integer must be clearly an even number , and holds from the fact the positive integers $ <nat:256> $ , $ <nat:484> $ , $ <nat:78> $ , as well as $ <nat:474> $ are obviously even . The proposition is proven from the fact taking the product between even numbers with any integer will be an even integer . We demonstrate $ <nat:256> \times <var:r> + <var:C> \times <nat:78> + <var:d> \times <nat:484> + <var:S> \times <nat:474> + <nat:81> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:r> <var:S> <var:C> : nat , Nat . odd ( <nat:78> * <var:C> + <nat:474> * <var:S> + <nat:256> * <var:r> + <nat:484> * <var:d> + <nat:81> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:C> + <nat:474> * <var:S> + <nat:256> * <var:r> + <nat:484> * <var:d> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 