\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Let that $ <var:y> $ is a <def:nine-composite> natural number granted given some $ <var:P> $ , $ <var:p> $ , $ <var:J> $ , $ <var:n> $ , $ <var:v> $ , $ <var:w> $ , $ <var:Q> $ , $ <var:i> $ , $ <var:Z> \in \mathbb{Z}^+ $ we get $ <var:J> $ , $ <var:p> $ , $ <var:v> $ , $ <var:w> $ , $ <var:n> $ , $ <var:Q> $ , $ <var:Z> $ , $ <var:P> $ and $ <var:i> \geq <nat:2> $ and using some natural number $ <var:y> $ , $ <var:y> = <var:p> \times <var:J> \times <var:P> \times <var:n> \times <var:v> \times <var:i> \times <var:Q> \times <var:Z> \times <var:w> $ . \end{definition} \begin{theorem} $ <var:y> = <nat:14968800> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Notice that $ <nat:7> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:9> $ , $ <nat:3> $ , and $ <nat:12> $ are larger than or equal to <nat:2> . Moreover observe that likewise $ <nat:14968800> = <var:n> * <var:p> * <var:Z> * <var:w> * <var:P> * <var:Q> * <var:v> * <var:i> * <var:J> = <nat:10> * <nat:12> * <nat:6> * <nat:9> * <nat:11> * <nat:7> * <nat:5> * <nat:2> * <nat:3> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:y> : nat ) := exists <var:P> <var:p> <var:J> <var:n> <var:v> <var:w> <var:Q> <var:i> <var:Z> : nat , ( <var:J> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:y> = <var:p> * <var:J> * <var:P> * <var:n> * <var:v> * <var:i> * <var:Q> * <var:Z> * <var:w> ) . Theorem <genP:1> : <def:nine-composite> <nat:14968800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } exists <nat:11> . exists <nat:12> . exists <nat:3> . exists <nat:10> . exists <nat:5> . exists <nat:9> . exists <nat:7> . exists <nat:2> . exists <nat:6> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 