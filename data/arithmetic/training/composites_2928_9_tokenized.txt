\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} $ \exists <var:p> $ , $ <var:F> $ , $ <var:Q> $ , $ <var:j> $ , $ <var:b> $ , $ <var:o> $ , $ <var:G> $ , $ <var:E> $ , $ <var:W> \in \mathbb{N} $ greater than or equal to <nat:2> . Take that some number $ <var:T> $ is named a <def:nine-composite> natural number when $ <var:T> = <var:o> \times <var:Q> \times <var:F> \times <var:p> \times <var:W> \times <var:G> \times <var:b> \times <var:j> \times <var:E> $ . \end{definition} \begin{theorem} $ <nat:10886400> = <var:T> $ is a <def:nine-composite> integer . \end{theorem} \begin{proof} Note that $ <var:F> \cdot <var:b> \cdot <var:G> \cdot <var:o> \cdot <var:p> \cdot <var:j> \cdot <var:Q> \cdot <var:E> \cdot <var:W> = <nat:10886400> = <nat:7> \cdot <nat:8> \cdot <nat:12> \cdot <nat:3> \cdot <nat:2> \cdot <nat:6> \cdot <nat:10> \cdot <nat:5> \cdot <nat:9> $ . What's more observe $ <nat:7> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:9> $ , $ <nat:8> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:2> \geq <nat:2> $ . This yields the thesis holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:T> : nat ) := exists <var:p> <var:F> <var:Q> <var:j> <var:b> <var:o> <var:G> <var:E> <var:W> : nat , ( <var:p> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:T> = <var:o> * <var:Q> * <var:F> * <var:p> * <var:W> * <var:G> * <var:b> * <var:j> * <var:E> ) . Theorem <genP:1> : <def:nine-composite> <nat:10886400> . Proof . unfold <def:nine-composite> . exists <nat:2> . exists <nat:7> . exists <nat:10> . exists <nat:6> . exists <nat:8> . exists <nat:3> . exists <nat:12> . exists <nat:5> . exists <nat:9> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 