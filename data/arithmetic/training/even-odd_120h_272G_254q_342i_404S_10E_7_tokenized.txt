\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:120> <var:h> + <nat:404> <var:S> + <var:i> <nat:342> + <nat:272> <var:G> + <nat:7> + <var:q> <nat:254> + <var:E> <nat:10> $ is odd . \end{theorem} \begin{proof} See that the summation $ <nat:7> + <var:h> \cdot <nat:120> + <nat:272> \cdot <var:G> + <nat:342> \cdot <var:i> + <nat:10> \cdot <var:E> + <var:q> \cdot <nat:254> + <nat:404> \cdot <var:S> $ is known to be odd as a consequence that the expression $ <var:h> * <nat:120> + <nat:272> * <var:G> + <var:q> * <nat:254> + <var:i> * <nat:342> + <nat:404> * <var:S> + <nat:10> * <var:E> $ is obviously even . Further , observe the products $ <nat:120> \times <var:h> $ , $ <nat:272> \times <var:G> $ , $ <nat:254> \times <var:q> $ , $ <nat:342> \times <var:i> $ , $ <nat:404> \times <var:S> $ , $ <var:E> \times <nat:10> $ , must be even from the knowledge the integers $ <nat:120> $ , $ <nat:272> $ , $ <nat:254> $ , $ <nat:342> $ , $ <nat:404> $ , $ <nat:10> $ , are obviously themselves even elements of $ \mathbb{N} $ . The main result holds from the fact multiplying between even elements of $ \mathbb{Z}^+ $ and an arbitrary integer will be an even integer . We show the lemma is true . We know that $ <nat:7> $ is obviously odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:S> <var:i> <var:G> <var:q> <var:E> : nat , Nat . odd ( <nat:120> * <var:h> + <nat:404> * <var:S> + <nat:342> * <var:i> + <nat:272> * <var:G> + <nat:254> * <var:q> + <nat:10> * <var:E> + <nat:7> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:342> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:h> + <nat:404> * <var:S> + <nat:342> * <var:i> + <nat:272> * <var:G> + <nat:254> * <var:q> + <nat:10> * <var:E> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:7> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 