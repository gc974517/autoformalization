\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using any natural numbers $ <var:Q> $ , $ <var:m> $ , $ <var:T> $ , and $ <var:i> $ $ <var:i> * <nat:50> + <var:m> * <nat:450> + <nat:87> + <nat:440> * <var:Q> + <nat:316> * <var:T> $ is guaranteed to be odd . \end{theorem} \begin{proof} We check the lemma holds . See $ <nat:87> $ is known to be an odd natural . We know the pair $ <var:m> <nat:450> $ is known as an even number in $ \mathbb{Z}^+ $ . This fact is true as a consequence that the natural number $ <nat:450> $ is even . In addition , the product $ <var:T> <nat:316> $ is an even whole number . This holds since taking the product of an even element of $ \mathbb{Z}^+ $ and an arbitrary element of $ \mathbb{Z}^+ $ is guaranteed to be even . This holds as a consequence that the number $ <nat:316> $ is known to be even . Observe that the coefficient $ <nat:50> $ is known as an even integer . For this reason , the pair $ <var:i> <nat:50> $ is even in addition . In addition to this , notice the pair $ <var:Q> <nat:440> $ is known to be even . This fact must be true as a consequence that the natural number $ <nat:440> $ is an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:m> <var:T> <var:i> : nat , Nat . odd ( <nat:50> * <var:i> + <nat:450> * <var:m> + <nat:440> * <var:Q> + <nat:316> * <var:T> + <nat:87> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:87> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:316> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:316> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 