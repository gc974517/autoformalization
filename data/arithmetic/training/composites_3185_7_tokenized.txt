\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} The positive integer <nat:190080> is the multiplication of $ <var:D> $ , $ <var:f> $ , $ <var:o> $ , $ <var:j> $ , $ <var:u> $ , $ <var:c> $ , $ <var:s> \in \mathbb{Z}^+ $ satisfying the condition that $ <var:s> $ , $ <var:f> $ , $ <var:u> $ , $ <var:D> $ , $ <var:o> $ , $ <var:c> $ , $ <var:j> $ greater than <nat:1> . \end{theorem} \begin{proof} Assume $ <var:s> = <nat:4> $ , $ <var:D> = <nat:11> $ , $ <var:u> = <nat:6> $ , $ <var:c> = <nat:12> $ , $ <var:j> = <nat:10> $ , $ <var:o> = <nat:2> $ , $ <var:f> = <nat:3> $ . We show $ <var:c> \cdot <var:f> \cdot <var:u> \cdot <var:j> \cdot <var:o> \cdot <var:s> \cdot <var:D> = <nat:190080> $ . We verify the thesis is true by reason of $ <nat:6> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:10> $ , $ <nat:11> $ , and $ <nat:3> > <nat:1> $ plus by reason of $ <nat:190080> = <nat:12> \times <nat:4> \times <nat:2> \times <nat:10> \times <nat:6> \times <nat:11> \times <nat:3> = <var:c> \times <var:s> \times <var:o> \times <var:j> \times <var:u> \times <var:D> \times <var:f> $ . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:D> <var:f> <var:o> <var:j> <var:u> <var:c> <var:s> : nat , ( <nat:190080> = <var:D> * <var:f> * <var:o> * <var:j> * <var:u> * <var:c> * <var:s> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:j> > <nat:1> ) . Proof . exists <nat:11> . exists <nat:3> . exists <nat:2> . exists <nat:10> . exists <nat:6> . exists <nat:12> . exists <nat:4> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 