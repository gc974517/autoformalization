\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:87> + <nat:52> * <var:g> + <nat:306> * <var:w> + <nat:70> * <var:B> + <nat:30> * <var:A> $ must be odd . \end{theorem} \begin{proof} We justify that $ <nat:87> + <var:A> \times <nat:30> + <nat:306> \times <var:w> + <nat:52> \times <var:g> + <var:B> \times <nat:70> $ is clearly odd as a consequence that the summation $ <nat:52> \times <var:g> + <var:w> \times <nat:306> + <var:B> \times <nat:70> + <var:A> \times <nat:30> $ is guaranteed to be even . The pairs $ <var:g> \cdot <nat:52> $ , $ <var:B> \cdot <nat:70> $ , and also $ <var:A> \cdot <nat:30> $ are even . This fact is true from the knowledge the product of an even natural with some element of $ \mathbb{Z}^+ $ is an even integer . On top of this , notice that $ <nat:306> \cdot <var:w> $ is obviously an even element of $ \mathbb{N} $ . Since the adding of an even number in $ \mathbb{N} $ with an even positive integer will be even , as well as from the fact multiplying between even numbers in $ \mathbb{N} $ with a number in $ \mathbb{N} $ must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:w> <var:B> <var:A> : nat , Nat . odd ( <nat:52> * <var:g> + <nat:306> * <var:w> + <nat:70> * <var:B> + <nat:30> * <var:A> + <nat:87> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:52> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:g> + <nat:306> * <var:w> + <nat:70> * <var:B> + <nat:30> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 