\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:k> $ , $ <var:M> $ , $ <var:e> $ , $ <var:v> $ , $ <var:W> $ , $ <var:T> $ , $ <var:a> $ , $ <var:U> $ , $ <var:P> \in \mathbb{N} $ . We assume that $ <var:K> \in \mathbb{Z}^+ $ will be considered to be a <def:nine-composite> integer given $ <var:W> * <var:T> * <var:P> * <var:U> * <var:a> * <var:M> * <var:k> * <var:e> * <var:v> = <var:K> $ as well as unique terms are greater than or equivalent to <nat:2> . Then the natural number <nat:11975040> is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Take $ <var:k> = <nat:6> $ , $ <var:P> = <nat:9> $ , $ <var:a> = <nat:8> $ , $ <var:M> = <nat:7> $ , $ <var:W> = <nat:5> $ , $ <var:T> = <nat:2> $ , $ <var:U> = <nat:12> $ , $ <var:v> = <nat:11> $ , and $ <var:e> = <nat:3> $ . Observe $ <nat:11> $ , $ <nat:7> $ , $ <nat:5> $ , $ <nat:3> $ , $ <nat:9> $ , $ <nat:6> $ , $ <nat:12> $ , $ <nat:2> $ , and $ <nat:8> $ are more than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:K> : nat ) := exists <var:k> <var:M> <var:e> <var:v> <var:W> <var:T> <var:a> <var:U> <var:P> : nat , ( <var:W> * <var:T> * <var:P> * <var:U> * <var:a> * <var:M> * <var:k> * <var:e> * <var:v> = <var:K> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:11975040> . Proof . unfold <def:nine-composite> . exists <nat:6> . exists <nat:7> . exists <nat:3> . exists <nat:11> . exists <nat:5> . exists <nat:2> . exists <nat:8> . exists <nat:12> . exists <nat:9> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 