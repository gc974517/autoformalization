\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:n> $ , $ <var:m> $ , $ <var:V> $ , $ <var:I> $ , $ <var:s> $ , $ <var:K> $ , $ <var:Y> $ as whole numbers . Claim that $ <var:Q> \in \mathbb{N} $ will be considered as <def:seven-composite> if $ <var:Y> * <var:V> * <var:m> * <var:s> * <var:n> * <var:I> * <var:K> = <var:Q> $ and terms are more than or equivalent to <nat:2> . \end{definition} \begin{theorem} <nat:475200> is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Note $ <nat:10> $ , $ <nat:11> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:6> $ , $ <nat:3> $ and $ <nat:5> \geq <nat:2> $ . Plus notice moreover $ <var:K> \times <var:s> \times <var:V> \times <var:m> \times <var:I> \times <var:n> \times <var:Y> = <nat:475200> $ implies $ <var:V> = <nat:12> $ , $ <var:m> = <nat:6> $ , $ <var:n> = <nat:10> $ , $ <var:Y> = <nat:5> $ , $ <var:I> = <nat:3> $ , $ <var:s> = <nat:4> $ , and $ <var:K> = <nat:11> $ . Hence , $ <var:n> \times <var:Y> \times <var:K> \times <var:I> \times <var:m> \times <var:V> \times <var:s> = <nat:475200> $ and $ <var:n> $ , $ <var:s> $ , $ <var:V> $ , $ <var:m> $ , $ <var:Y> $ , $ <var:K> $ , $ <var:I> $ are greater than or equivalent to <nat:2> is true has been proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Q> : nat ) := exists <var:n> <var:m> <var:V> <var:I> <var:s> <var:K> <var:Y> : nat , ( <var:Y> * <var:V> * <var:m> * <var:s> * <var:n> * <var:I> * <var:K> = <var:Q> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:475200> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:6> . exists <nat:12> . exists <nat:3> . exists <nat:4> . exists <nat:11> . exists <nat:5> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 