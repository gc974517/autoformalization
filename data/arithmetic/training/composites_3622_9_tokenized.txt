\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We denote that $ <var:p> $ is a <def:nine-composite> natural number under the condition assuming some $ <var:G> $ , $ <var:v> $ , $ <var:L> $ , $ <var:d> $ , $ <var:w> $ , $ <var:R> $ , $ <var:l> $ , $ <var:I> $ , $ <var:h> \in \mathbb{N} $ we have $ <var:p> = <var:G> * <var:w> * <var:h> * <var:v> * <var:d> * <var:R> * <var:l> * <var:L> * <var:I> $ with $ <var:p> \in \mathbb{N} $ . \end{definition} \begin{theorem} $ <nat:6220800> = <var:p> $ is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Recall <nat:6220800> is a <def:nine-composite> positive integer granted that it is the multiplication of $ <var:d> $ , $ <var:L> $ , $ <var:h> $ , $ <var:w> $ , $ <var:I> $ , $ <var:v> $ , $ <var:l> $ , $ <var:R> $ , $ <var:G> $ more than <nat:1> . Notice that $ <nat:6220800> = <nat:2> \times <nat:4> \times <nat:9> \times <nat:6> \times <nat:10> \times <nat:3> \times <nat:5> \times <nat:8> \times <nat:12> = <var:R> \times <var:d> \times <var:L> \times <var:w> \times <var:l> \times <var:I> \times <var:h> \times <var:G> \times <var:v> $ . So , <nat:6220800> is a <def:nine-composite> number is true has been proven . Consequently , $ <var:l> \times <var:d> \times <var:R> \times <var:I> \times <var:G> \times <var:h> \times <var:v> \times <var:w> \times <var:L> = <nat:6220800> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:p> : nat ) := exists <var:G> <var:v> <var:L> <var:d> <var:w> <var:R> <var:l> <var:I> <var:h> : nat , ( <var:p> = <var:G> * <var:w> * <var:h> * <var:v> * <var:d> * <var:R> * <var:l> * <var:L> * <var:I> ) . Theorem <genP:1> : <def:nine-composite> <nat:6220800> . Proof . unfold <def:nine-composite> . exists <nat:8> . exists <nat:12> . exists <nat:9> . exists <nat:4> . exists <nat:6> . exists <nat:2> . exists <nat:10> . exists <nat:3> . exists <nat:5> . repeat split . all : lia . Qed . 