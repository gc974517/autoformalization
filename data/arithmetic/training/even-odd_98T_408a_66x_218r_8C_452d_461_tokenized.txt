\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:T> * <nat:98> + <nat:461> + <var:a> * <nat:408> + <var:x> * <nat:66> + <var:r> * <nat:218> + <var:C> * <nat:8> + <nat:452> * <var:d> $ will be odd . \end{theorem} \begin{proof} The pairs $ <var:T> \cdot <nat:98> $ , $ <var:a> \cdot <nat:408> $ , $ <var:x> \cdot <nat:66> $ , $ <nat:218> \cdot <var:r> $ , $ <nat:8> \cdot <var:C> $ , and likewise $ <nat:452> \cdot <var:d> $ are known to be even as a consequence that taking the product of an even whole number with a positive integer is even in addition to the integers $ <nat:98> $ , $ <nat:408> $ , $ <nat:66> $ , $ <nat:218> $ , $ <nat:8> $ , and also $ <nat:452> $ are trivially in themselves even numbers . Remember that $ <nat:461> $ is known as an odd element of $ \mathbb{Z}^+ $ . The addition between an even number in $ \mathbb{N} $ with an odd number in $ \mathbb{N} $ is an odd element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:a> <var:x> <var:r> <var:C> <var:d> : nat , Nat . odd ( <nat:98> * <var:T> + <nat:408> * <var:a> + <nat:66> * <var:x> + <nat:218> * <var:r> + <nat:8> * <var:C> + <nat:452> * <var:d> + <nat:461> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:461> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 