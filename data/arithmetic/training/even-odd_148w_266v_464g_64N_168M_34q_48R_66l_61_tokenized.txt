\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:R> <nat:48> + <nat:148> <var:w> + <var:N> <nat:64> + <var:q> <nat:34> + <var:l> <nat:66> + <nat:168> <var:M> + <var:v> <nat:266> + <nat:61> + <nat:464> <var:g> $ will be odd using positive integers $ <var:N> $ , $ <var:q> $ , $ <var:l> $ , $ <var:M> $ , $ <var:g> $ , $ <var:v> $ , $ <var:w> $ , and $ <var:R> $ . \end{theorem} \begin{proof} We check the result is proven . We employ the fact that the sum $ <var:w> <nat:148> + <nat:266> <var:v> + <var:g> <nat:464> + <var:N> <nat:64> + <var:M> <nat:168> + <var:q> <nat:34> + <nat:48> <var:R> + <var:l> <nat:66> $ is even , as a consequence that taking the product between even integers is an even natural . The positive integers $ <nat:66> $ and $ <nat:266> $ will be even numbers in $ \mathbb{N} $ The coefficients $ <nat:64> $ and likewise $ <nat:464> $ are known to be even numbers Additionally , the coefficient $ <nat:168> $ is clearly an even integer Likewise , remember the natural numbers $ <nat:148> $ and likewise $ <nat:34> $ are obviously even The leading term $ <nat:48> $ is clearly an even number The adding of even elements of $ \mathbb{N} $ collectively and an odd number must be an odd natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:q> <var:l> <var:M> <var:g> <var:v> <var:w> <var:R> : nat , Nat . odd ( <nat:48> * <var:R> + <nat:148> * <var:w> + <nat:64> * <var:N> + <nat:34> * <var:q> + <nat:66> * <var:l> + <nat:168> * <var:M> + <nat:266> * <var:v> + <nat:464> * <var:g> + <nat:61> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:R> + <nat:148> * <var:w> + <nat:64> * <var:N> + <nat:34> * <var:q> + <nat:66> * <var:l> + <nat:168> * <var:M> + <nat:266> * <var:v> + <nat:464> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 