\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For every natural numbers $ <var:x> $ , $ <var:b> $ , $ <var:U> $ , $ <var:q> $ , $ <var:d> $ , $ <var:z> $ , $ <var:E> $ , and $ <var:s> $ $ <var:s> \times <nat:466> + <var:q> \times <nat:242> + <nat:496> \times <var:b> + <nat:461> + <var:x> \times <nat:20> + <nat:370> \times <var:U> + <nat:286> \times <var:z> + <nat:68> \times <var:d> + <var:E> \times <nat:188> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know the integers $ <nat:20> $ , $ <nat:466> $ , $ <nat:496> $ , $ <nat:286> $ , as well as $ <nat:370> $ are known to be even elements of $ \mathbb{Z}^+ $ . Hence , the terms $ <var:x> <nat:20> $ , $ <var:s> <nat:466> $ , $ <nat:496> <var:b> $ , $ <var:z> <nat:286> $ , and moreover $ <var:U> <nat:370> $ will be even too . Furthermore , notice the leading term $ <nat:242> $ is even . In consequence , $ <nat:242> <var:q> $ will be even also . The integer $ <nat:68> $ is even . Consequently , the product $ <nat:68> <var:d> $ will be even in addition . The natural number $ <nat:188> $ is even . In consequence , the product $ <nat:188> <var:E> $ will be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:b> <var:U> <var:q> <var:d> <var:z> <var:E> <var:s> : nat , Nat . odd ( <nat:466> * <var:s> + <nat:242> * <var:q> + <nat:496> * <var:b> + <nat:20> * <var:x> + <nat:370> * <var:U> + <nat:286> * <var:z> + <nat:68> * <var:d> + <nat:188> * <var:E> + <nat:461> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:188> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 