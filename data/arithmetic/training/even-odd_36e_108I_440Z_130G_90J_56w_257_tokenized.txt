\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:36> <var:e> + <var:w> <nat:56> + <var:J> <nat:90> + <var:Z> <nat:440> + <var:I> <nat:108> + <nat:130> <var:G> + <nat:257> $ must be odd . \end{theorem} \begin{proof} We prove our proposition must be true . Observe that $ <nat:257> $ is trivially odd . The integers $ <nat:440> $ , $ <nat:90> $ , in addition to $ <nat:56> $ are trivially even numbers . Therefore , the terms $ <var:Z> \times <nat:440> $ , $ <var:J> \times <nat:90> $ , and $ <var:w> \times <nat:56> $ is guaranteed to be even additionally . In addition to this , the pairs $ <nat:36> \times <var:e> $ as well as $ <nat:130> \times <var:G> $ are even . This fact is true because the whole numbers $ <nat:36> $ and $ <nat:130> $ are guaranteed to be even . On top of this , observe that the number $ <nat:108> $ is guaranteed to be even . Thus , $ <var:I> \times <nat:108> $ is guaranteed to be even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:e> <var:w> <var:J> <var:Z> <var:I> <var:G> : nat , Nat . odd ( <nat:36> * <var:e> + <nat:56> * <var:w> + <nat:90> * <var:J> + <nat:440> * <var:Z> + <nat:108> * <var:I> + <nat:130> * <var:G> + <nat:257> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:257> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:90> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:90> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:108> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:108> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 