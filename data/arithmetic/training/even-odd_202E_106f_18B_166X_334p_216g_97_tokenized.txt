\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:18> <var:B> + <nat:166> <var:X> + <var:p> <nat:334> + <nat:97> + <nat:106> <var:f> + <var:g> <nat:216> + <var:E> <nat:202> $ must be odd . \end{theorem} \begin{proof} We justify the formula $ <var:B> \times <nat:18> + <var:f> \times <nat:106> + <nat:334> \times <var:p> + <nat:97> + <var:g> \times <nat:216> + <nat:166> \times <var:X> + <var:E> \times <nat:202> $ will be odd . We make use the fact that $ <var:E> \cdot <nat:202> + <nat:106> \cdot <var:f> + <var:B> \cdot <nat:18> + <var:X> \cdot <nat:166> + <nat:334> \cdot <var:p> + <var:g> \cdot <nat:216> $ is clearly even , from the fact the multiplication of even whole numbers is guaranteed to be an even element of $ \mathbb{N} $ . See the positive integer $ <nat:166> $ is guaranteed to be even Additionally , observe the numbers $ <nat:106> $ and moreover $ <nat:216> $ will be even Adding on , the whole number $ <nat:202> $ is even Adding on , the number $ <nat:334> $ is even What's more , the number $ <nat:18> $ is guaranteed to be an even whole number \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:B> <var:X> <var:p> <var:f> <var:g> <var:E> : nat , Nat . odd ( <nat:18> * <var:B> + <nat:166> * <var:X> + <nat:334> * <var:p> + <nat:106> * <var:f> + <nat:216> * <var:g> + <nat:202> * <var:E> + <nat:97> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:216> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:B> + <nat:166> * <var:X> + <nat:334> * <var:p> + <nat:106> * <var:f> + <nat:216> * <var:g> + <nat:202> * <var:E> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 