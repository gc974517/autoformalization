\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:Q> $ , $ <var:a> $ , $ <var:O> $ , $ <var:r> $ , $ <var:w> $ , $ <var:Z> $ , $ <var:R> $ as whole numbers . Define that some whole number $ <var:e> $ is defined to be a <def:seven-composite> positive integer if $ <var:Z> \cdot <var:R> \cdot <var:Q> \cdot <var:O> \cdot <var:w> \cdot <var:a> \cdot <var:r> = <var:e> $ as well as so that $ <var:w> $ , $ <var:r> $ , $ <var:Q> $ , $ <var:O> $ , $ <var:a> $ , $ <var:Z> $ , $ <var:R> \geq <nat:2> $ . For this reason the positive integer <nat:1330560> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Allow $ <var:Z> = <nat:11> $ , $ <var:r> = <nat:4> $ , $ <var:R> = <nat:9> $ , $ <var:a> = <nat:5> $ , $ <var:O> = <nat:7> $ , $ <var:w> = <nat:8> $ , and $ <var:Q> = <nat:12> $ . What's more note $ <var:R> = <nat:9> $ , $ <var:a> = <nat:5> $ , $ <var:r> = <nat:4> $ , $ <var:w> = <nat:8> $ , $ <var:Z> = <nat:11> $ , $ <var:Q> = <nat:12> $ , and $ <var:O> = <nat:7> $ are greater than or equivalent to <nat:2> . Consequently , $ <nat:1330560> = <var:a> \cdot <var:Q> \cdot <var:w> \cdot <var:Z> \cdot <var:R> \cdot <var:r> \cdot <var:O> $ as well as $ <var:O> $ , $ <var:Z> $ , $ <var:a> $ , $ <var:R> $ , $ <var:Q> $ , $ <var:w> $ , and $ <var:r> $ are more than or equal to <nat:2> is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:e> : nat ) := exists <var:Q> <var:a> <var:O> <var:r> <var:w> <var:Z> <var:R> : nat , ( <var:Z> * <var:R> * <var:Q> * <var:O> * <var:w> * <var:a> * <var:r> = <var:e> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:1330560> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:5> . exists <nat:7> . exists <nat:4> . exists <nat:8> . exists <nat:11> . exists <nat:9> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 