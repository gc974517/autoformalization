\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Claim that $ <var:u> $ is a <def:nine-composite> positive integer if and only if given some natural numbers $ <var:W> $ , $ <var:I> $ , $ <var:w> $ , $ <var:B> $ , $ <var:X> $ , $ <var:E> $ , $ <var:Z> $ , $ <var:N> $ , $ <var:D> $ we get $ <var:u> = <var:Z> \times <var:X> \times <var:E> \times <var:I> \times <var:W> \times <var:w> \times <var:D> \times <var:B> \times <var:N> $ with some integer $ <var:u> $ and such that $ <var:w> $ , $ <var:X> $ , $ <var:D> $ , $ <var:B> $ , $ <var:W> $ , $ <var:I> $ , $ <var:E> $ , $ <var:N> $ , and $ <var:Z> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <var:u> = <nat:34214400> $ is a <def:nine-composite> number . \end{theorem} \begin{proof} Recall that <nat:34214400> is a <def:nine-composite> positive integer assuming that <nat:34214400> is the product of positive integers $ <var:Z> $ , $ <var:w> $ , $ <var:B> $ , $ <var:W> $ , $ <var:I> $ , $ <var:X> $ , $ <var:E> $ , $ <var:N> $ , and $ <var:D> $ where $ <var:W> $ , $ <var:I> $ , $ <var:Z> $ , $ <var:E> $ , $ <var:w> $ , $ <var:X> $ , $ <var:B> $ , $ <var:D> $ , and $ <var:N> > <nat:1> $ . Note $ <var:N> * <var:B> * <var:w> * <var:E> * <var:X> * <var:D> * <var:Z> * <var:I> * <var:W> = <nat:34214400> $ yields $ <var:w> = <nat:8> $ , $ <var:X> = <nat:11> $ , $ <var:E> = <nat:5> $ , $ <var:D> = <nat:12> $ , $ <var:Z> = <nat:6> $ , $ <var:B> = <nat:4> $ , $ <var:N> = <nat:9> $ , $ <var:W> = <nat:3> $ and $ <var:I> = <nat:10> $ . Further note that $ <nat:8> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:3> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:11> $ and $ <nat:6> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:u> : nat ) := exists <var:W> <var:I> <var:w> <var:B> <var:X> <var:E> <var:Z> <var:N> <var:D> : nat , ( <var:u> = <var:Z> * <var:X> * <var:E> * <var:I> * <var:W> * <var:w> * <var:D> * <var:B> * <var:N> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:34214400> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:10> . exists <nat:8> . exists <nat:4> . exists <nat:11> . exists <nat:5> . exists <nat:6> . exists <nat:9> . exists <nat:12> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 