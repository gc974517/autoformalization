\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:330> <var:o> + <var:m> <nat:18> + <var:f> <nat:240> + <nat:14> <var:L> + <nat:39> + <nat:120> <var:p> + <nat:266> <var:C> + <nat:496> <var:P> + <nat:328> <var:V> $ is odd . \end{theorem} \begin{proof} Further , remember that the terms $ <var:o> * <nat:330> $ , $ <var:m> * <nat:18> $ , $ <nat:240> * <var:f> $ , $ <var:L> * <nat:14> $ , $ <var:p> * <nat:120> $ , $ <var:C> * <nat:266> $ , $ <var:P> * <nat:496> $ , and likewise $ <var:V> * <nat:328> $ will be even integers because multiplying of an even natural number with an arbitrary positive integer will be obviously an even element of $ \mathbb{N} $ and likewise the whole numbers $ <nat:330> $ , $ <nat:18> $ , $ <nat:240> $ , $ <nat:14> $ , $ <nat:120> $ , $ <nat:266> $ , $ <nat:496> $ , plus $ <nat:328> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:m> <var:f> <var:L> <var:p> <var:C> <var:P> <var:V> : nat , Nat . odd ( <nat:330> * <var:o> + <nat:18> * <var:m> + <nat:240> * <var:f> + <nat:14> * <var:L> + <nat:120> * <var:p> + <nat:266> * <var:C> + <nat:496> * <var:P> + <nat:328> * <var:V> + <nat:39> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even <nat:240> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 