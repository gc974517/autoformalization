\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:408> <var:F> + <nat:208> <var:l> + <var:w> <nat:426> + <nat:248> <var:d> + <var:k> <nat:2> + <nat:66> <var:a> + <nat:159> $ will be odd . \end{theorem} \begin{proof} Observe that $ <var:a> <nat:66> + <nat:208> <var:l> + <nat:426> <var:w> + <var:d> <nat:248> + <nat:2> <var:k> + <nat:408> <var:F> $ is even . Likewise , recall the numbers $ <nat:66> $ , $ <nat:208> $ , $ <nat:426> $ , $ <nat:248> $ , $ <nat:2> $ , and also $ <nat:408> $ are obviously even . Thus , the pairs $ <nat:66> \times <var:a> $ , $ <var:l> \times <nat:208> $ , $ <var:w> \times <nat:426> $ , $ <var:d> \times <nat:248> $ , $ <nat:2> \times <var:k> $ , plus $ <nat:408> \times <var:F> $ must be even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:l> <var:w> <var:d> <var:k> <var:a> : nat , Nat . odd ( <nat:408> * <var:F> + <nat:208> * <var:l> + <nat:426> * <var:w> + <nat:248> * <var:d> + <nat:2> * <var:k> + <nat:66> * <var:a> + <nat:159> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:F> + <nat:208> * <var:l> + <nat:426> * <var:w> + <nat:248> * <var:d> + <nat:2> * <var:k> + <nat:66> * <var:a> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 