\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take that assuming $ \exists <var:e> $ , $ <var:P> $ , $ <var:i> $ , $ <var:U> $ , $ <var:X> $ , $ <var:Y> $ , $ <var:t> $ , $ <var:h> $ , $ <var:E> \in \mathbb{N} $ then we assume that $ <var:r> \in \mathbb{Z}^+ $ will be considered <def:nine-composite> when $ <var:r> = <var:Y> * <var:i> * <var:X> * <var:E> * <var:h> * <var:e> * <var:P> * <var:t> * <var:U> $ and greater than or equivalent to <nat:2> . Consequently $ <var:r> = <nat:15966720> $ is a <def:nine-composite> integer . \end{theorem} \begin{proof} Note that $ <nat:15966720> = <var:P> * <var:E> * <var:Y> * <var:U> * <var:e> * <var:X> * <var:h> * <var:t> * <var:i> $ gives $ <var:U> = <nat:12> $ , $ <var:t> = <nat:4> $ , $ <var:Y> = <nat:7> $ , $ <var:e> = <nat:3> $ , $ <var:X> = <nat:2> $ , $ <var:i> = <nat:9> $ , $ <var:h> = <nat:10> $ , $ <var:E> = <nat:8> $ , $ <var:P> = <nat:11> $ . Moreover notice that $ <nat:9> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:12> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:3> $ , $ <nat:4> $ , and $ <nat:2> $ are greater than or equivalent to <nat:2> . This suggests our statement holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:r> : nat ) := exists <var:e> <var:P> <var:i> <var:U> <var:X> <var:Y> <var:t> <var:h> <var:E> : nat , ( <var:r> = <var:Y> * <var:i> * <var:X> * <var:E> * <var:h> * <var:e> * <var:P> * <var:t> * <var:U> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:15966720> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:11> . exists <nat:9> . exists <nat:12> . exists <nat:2> . exists <nat:7> . exists <nat:4> . exists <nat:10> . exists <nat:8> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 