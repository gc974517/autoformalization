\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:448> * <var:K> + <nat:73> + <nat:222> * <var:A> + <var:j> * <nat:132> + <nat:184> * <var:T> $ will be odd assuming every natural terms $ <var:T> $ , $ <var:K> $ , $ <var:j> $ , and $ <var:A> $ . \end{theorem} \begin{proof} It can be proven that our proposition is proven . Recall that $ <nat:73> $ is obviously an odd integer . Take note that the integer $ <nat:132> $ is trivially an even positive integer . Thus , $ <nat:132> * <var:j> $ is guaranteed to be even at the same time . The natural number $ <nat:448> $ is an even number in $ \mathbb{N} $ . In consequence , the product $ <nat:448> * <var:K> $ will be even as well . The pair $ <nat:222> * <var:A> $ is known to be an even positive integer from the fact the natural number $ <nat:222> $ is known to be trivially an even element of $ \mathbb{Z}^+ $ . Furthermore , see the coefficient $ <nat:184> $ is obviously even . So , the term $ <nat:184> * <var:T> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:K> <var:j> <var:A> : nat , Nat . odd ( <nat:448> * <var:K> + <nat:222> * <var:A> + <nat:132> * <var:j> + <nat:184> * <var:T> + <nat:73> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:73> = true ) . { auto . } assert ( <genH> : Nat . even <nat:132> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 