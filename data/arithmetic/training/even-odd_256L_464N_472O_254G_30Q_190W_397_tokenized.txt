\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:256> \cdot <var:L> + <var:N> \cdot <nat:464> + <var:O> \cdot <nat:472> + <nat:254> \cdot <var:G> + <var:Q> \cdot <nat:30> + <nat:397> + <var:W> \cdot <nat:190> $ must be odd given any natural numbers $ <var:N> $ , $ <var:W> $ , $ <var:O> $ , $ <var:L> $ , $ <var:Q> $ , and $ <var:G> $ . \end{theorem} \begin{proof} We know the terms $ <nat:256> \times <var:L> $ , $ <nat:254> \times <var:G> $ , and moreover $ <nat:464> \times <var:N> $ are clearly even numbers in $ \mathbb{N} $ from the knowledge taking the product of an even element of $ \mathbb{Z}^+ $ and any number in $ \mathbb{N} $ is guaranteed to be even . Additionally , remember the product $ <nat:472> \times <var:O> $ is known as an even positive integer . Likewise , the pair $ <var:W> \times <nat:190> $ is known as an even number . Remember that $ <var:Q> \times <nat:30> $ is trivially an even integer from the knowledge multiplying of an even element of $ \mathbb{Z}^+ $ and a natural is guaranteed to be by itself an even whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:W> <var:O> <var:L> <var:Q> <var:G> : nat , Nat . odd ( <nat:256> * <var:L> + <nat:464> * <var:N> + <nat:472> * <var:O> + <nat:254> * <var:G> + <nat:30> * <var:Q> + <nat:190> * <var:W> + <nat:397> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:256> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 