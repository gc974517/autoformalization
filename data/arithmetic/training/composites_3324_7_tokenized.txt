\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition we get where $ <var:x> $ , $ <var:u> $ , $ <var:k> $ , $ <var:J> $ , $ <var:l> $ , $ <var:X> $ , $ <var:g> > <nat:1> $ such that for some natural number $ <var:z> $ , $ <var:z> = <var:u> \times <var:x> \times <var:X> \times <var:k> \times <var:J> \times <var:l> \times <var:g> $ , claim that $ <var:z> $ is a <def:seven-composite> natural number assuming some natural numbers $ <var:k> $ , $ <var:u> $ , $ <var:X> $ , $ <var:J> $ , $ <var:x> $ , $ <var:g> $ , $ <var:l> $ . \end{definition} \begin{theorem} $ <var:z> = <nat:2494800> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Assume $ <var:u> = <nat:5> $ , $ <var:x> = <nat:12> $ , $ <var:X> = <nat:6> $ , $ <var:J> = <nat:7> $ , $ <var:g> = <nat:9> $ , $ <var:l> = <nat:11> $ and $ <var:k> = <nat:10> $ . Observe that $ <nat:6> $ , $ <nat:11> $ , $ <nat:12> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:7> $ , and $ <nat:5> > <nat:1> $ . Moreover notice too $ <nat:12> * <nat:5> * <nat:10> * <nat:7> * <nat:6> * <nat:9> * <nat:11> = <nat:2494800> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:z> : nat ) := exists <var:k> <var:u> <var:X> <var:J> <var:x> <var:g> <var:l> : nat , ( <var:x> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:z> = <var:u> * <var:x> * <var:X> * <var:k> * <var:J> * <var:l> * <var:g> ) . Theorem <genP:1> : <def:seven-composite> <nat:2494800> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:5> . exists <nat:6> . exists <nat:7> . exists <nat:12> . exists <nat:9> . exists <nat:11> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 