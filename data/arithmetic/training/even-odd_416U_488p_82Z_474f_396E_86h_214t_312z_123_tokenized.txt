\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:416> * <var:U> + <var:p> * <nat:488> + <nat:82> * <var:Z> + <nat:123> + <var:f> * <nat:474> + <nat:396> * <var:E> + <var:h> * <nat:86> + <nat:214> * <var:t> + <nat:312> * <var:z> $ will be odd given all $ <var:p> $ , $ <var:f> $ , $ <var:U> $ , $ <var:E> $ , $ <var:Z> $ , $ <var:t> $ , $ <var:h> $ , and $ <var:z> \in \mathbb{N} $ . \end{theorem} \begin{proof} Further , recall the pairs $ <nat:416> <var:U> $ , $ <nat:488> <var:p> $ , $ <var:Z> <nat:82> $ , $ <var:f> <nat:474> $ , $ <nat:396> <var:E> $ , $ <var:h> <nat:86> $ , $ <nat:214> <var:t> $ , and moreover $ <var:z> <nat:312> $ are trivially even . This claim holds as a consequence that the coefficients $ <nat:416> $ , $ <nat:488> $ , $ <nat:82> $ , $ <nat:474> $ , $ <nat:396> $ , $ <nat:86> $ , $ <nat:214> $ , and likewise $ <nat:312> $ are known to be clearly even elements of $ \mathbb{N} $ . It can be proven that the proposition is true . Recall $ <nat:123> $ is obviously odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:p> <var:f> <var:U> <var:E> <var:Z> <var:t> <var:h> <var:z> : nat , Nat . odd ( <nat:416> * <var:U> + <nat:488> * <var:p> + <nat:82> * <var:Z> + <nat:474> * <var:f> + <nat:396> * <var:E> + <nat:86> * <var:h> + <nat:214> * <var:t> + <nat:312> * <var:z> + <nat:123> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:396> = true ) . { auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:396> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:123> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 