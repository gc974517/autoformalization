\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Y> \times <nat:244> + <var:f> \times <nat:412> + <var:p> \times <nat:346> + <nat:356> \times <var:X> + <nat:347> $ will be odd . \end{theorem} \begin{proof} We know the summing of an even element of $ \mathbb{N} $ and an odd integer is guaranteed to be instrinsically an odd element of $ \mathbb{Z}^+ $ . Observe the formula $ <nat:244> * <var:Y> + <var:p> * <nat:346> + <nat:356> * <var:X> + <nat:347> + <var:f> * <nat:412> $ is odd as a consequence that the summation $ <var:f> <nat:412> + <var:p> <nat:346> + <var:X> <nat:356> + <var:Y> <nat:244> $ is even . We know that the adding of even elements of $ \mathbb{N} $ concurrently and an even integer is an even whole number . See that the integers $ <nat:412> $ , $ <nat:346> $ , $ <nat:356> $ , $ <nat:244> $ , are known as even whole numbers . For this reason , the terms $ <nat:412> \cdot <var:f> $ , $ <nat:346> \cdot <var:p> $ , $ <var:X> \cdot <nat:356> $ , $ <nat:244> \cdot <var:Y> $ , is guaranteed to be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:f> <var:p> <var:X> : nat , Nat . odd ( <nat:244> * <var:Y> + <nat:412> * <var:f> + <nat:346> * <var:p> + <nat:356> * <var:X> + <nat:347> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:412> = true ) . { auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:244> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:Y> + <nat:412> * <var:f> + <nat:346> * <var:p> + <nat:356> * <var:X> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 