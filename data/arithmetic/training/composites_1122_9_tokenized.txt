\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever we have $ <var:s> = <var:h> * <var:C> * <var:Z> * <var:c> * <var:O> * <var:X> * <var:r> * <var:S> * <var:W> $ given $ <var:s> \in \mathbb{N} $ plus so that $ <var:W> $ , $ <var:O> $ , $ <var:r> $ , $ <var:C> $ , $ <var:c> $ , $ <var:h> $ , $ <var:S> $ , $ <var:X> $ , and $ <var:Z> \geq <nat:2> $ , then claim that $ <var:s> $ is <def:nine-composite> with some numbers $ <var:O> $ , $ <var:C> $ , $ <var:Z> $ , $ <var:X> $ , $ <var:c> $ , $ <var:W> $ , $ <var:h> $ , $ <var:r> $ , $ <var:S> $ . Hence $ <nat:79833600> = <var:s> $ is a <def:nine-composite> integer . \end{theorem} \begin{proof} Notice $ <nat:5> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:4> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:8> $ , $ <nat:6> $ , and $ <nat:12> > <nat:1> $ . Similarly observe that moreover $ <nat:79833600> = <nat:10> \times <nat:11> \times <nat:4> \times <nat:8> \times <nat:9> \times <nat:12> \times <nat:7> \times <nat:5> \times <nat:6> $ . Hence , $ <var:r> * <var:S> * <var:C> * <var:Z> * <var:c> * <var:h> * <var:X> * <var:W> * <var:O> = <nat:79833600> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:s> : nat ) := exists <var:O> <var:C> <var:Z> <var:X> <var:c> <var:W> <var:h> <var:r> <var:S> : nat , ( <var:s> = <var:h> * <var:C> * <var:Z> * <var:c> * <var:O> * <var:X> * <var:r> * <var:S> * <var:W> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:79833600> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } exists <nat:12> . exists <nat:10> . exists <nat:8> . exists <nat:6> . exists <nat:5> . exists <nat:9> . exists <nat:11> . exists <nat:4> . exists <nat:7> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 