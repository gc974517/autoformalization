\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Only if we get $ <var:H> = <var:X> * <var:c> * <var:x> * <var:g> * <var:f> * <var:P> * <var:u> $ given $ <var:H> \in \mathbb{N} $ and such that $ <var:X> $ , $ <var:u> $ , $ <var:P> $ , $ <var:x> $ , $ <var:c> $ , $ <var:f> $ , $ <var:g> \geq <nat:2> $ for some $ <var:c> $ , $ <var:X> $ , $ <var:f> $ , $ <var:P> $ , $ <var:x> $ , $ <var:u> $ , $ <var:g> \in \mathbb{Z}^+ $ , take that $ <var:H> $ is <def:seven-composite> . \end{definition} \begin{theorem} The integer <nat:997920> is a <def:seven-composite> integer . \end{theorem} \begin{proof} We present <nat:997920> is a <def:seven-composite> natural number on account of $ <nat:3> \times <nat:7> \times <nat:11> \times <nat:8> \times <nat:10> \times <nat:9> \times <nat:6> = <nat:997920> $ plus as $ <nat:9> $ , $ <nat:10> $ , $ <nat:7> $ , $ <nat:6> $ , $ <nat:3> $ , $ <nat:11> $ , $ <nat:8> $ are greater than or equivalent to <nat:2> . Therefore , <nat:997920> is the product of $ <var:g> $ , $ <var:X> $ , $ <var:f> $ , $ <var:c> $ , $ <var:x> $ , $ <var:P> $ and $ <var:u> \in \mathbb{N} $ as well as $ <var:f> $ , $ <var:X> $ , $ <var:c> $ , $ <var:x> $ , $ <var:u> $ , $ <var:g> $ , $ <var:P> $ are greater than or equal to <nat:2> has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:H> : nat ) := exists <var:c> <var:X> <var:f> <var:P> <var:x> <var:u> <var:g> : nat , ( <var:H> = <var:X> * <var:c> * <var:x> * <var:g> * <var:f> * <var:P> * <var:u> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:997920> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:3> . exists <nat:10> . exists <nat:7> . exists <nat:6> . exists <nat:8> . exists <nat:11> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 