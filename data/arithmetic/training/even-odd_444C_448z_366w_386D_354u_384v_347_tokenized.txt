\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:384> \times <var:v> + <var:C> \times <nat:444> + <nat:347> + <nat:354> \times <var:u> + <nat:366> \times <var:w> + <nat:448> \times <var:z> + <nat:386> \times <var:D> $ will be odd . \end{theorem} \begin{proof} We use the assumption the understanding the sum $ <var:C> * <nat:444> + <var:z> * <nat:448> + <var:w> * <nat:366> + <nat:386> * <var:D> + <nat:354> * <var:u> + <nat:384> * <var:v> $ is guaranteed to be even . Remember that the summation between even numbers in $ \mathbb{N} $ together and an even natural number will be even . We know the positive integers $ <nat:354> $ in addition to $ <nat:448> $ are obviously even naturals The leading terms $ <nat:366> $ , $ <nat:384> $ , and moreover $ <nat:386> $ must be even naturals The positive integer $ <nat:444> $ is known as an even positive integer See the totaling between even numbers in $ \mathbb{N} $ concurrently with an odd positive integer will be an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:C> <var:u> <var:w> <var:z> <var:D> : nat , Nat . odd ( <nat:384> * <var:v> + <nat:444> * <var:C> + <nat:354> * <var:u> + <nat:366> * <var:w> + <nat:448> * <var:z> + <nat:386> * <var:D> + <nat:347> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:v> + <nat:444> * <var:C> + <nat:354> * <var:u> + <nat:366> * <var:w> + <nat:448> * <var:z> + <nat:386> * <var:D> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 