\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:X> \cdot <nat:8> + <var:c> \cdot <nat:302> + <var:m> \cdot <nat:30> + <nat:2> \cdot <var:i> + <nat:60> \cdot <var:U> + <var:e> \cdot <nat:390> + <nat:11> + <var:G> \cdot <nat:332> + <nat:474> \cdot <var:z> $ is guaranteed to be odd . \end{theorem} \begin{proof} The totaling of even numbers in $ \mathbb{Z}^+ $ concurrently with an odd number in $ \mathbb{N} $ will be odd . See that the positive integers $ <nat:30> $ , $ <nat:474> $ , $ <nat:390> $ , $ <nat:8> $ , $ <nat:302> $ , in addition to $ <nat:2> $ are known to be even elements of $ \mathbb{Z}^+ $ What's more , the natural number $ <nat:60> $ is obviously even Likewise , notice the natural number $ <nat:332> $ is known to be even It can be verified that the sum $ <var:G> \times <nat:332> + <var:U> \times <nat:60> + <var:m> \times <nat:30> + <nat:302> \times <var:c> + <nat:390> \times <var:e> + <nat:11> + <nat:8> \times <var:X> + <var:i> \times <nat:2> + <nat:474> \times <var:z> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:c> <var:m> <var:i> <var:U> <var:e> <var:G> <var:z> : nat , Nat . odd ( <nat:8> * <var:X> + <nat:302> * <var:c> + <nat:30> * <var:m> + <nat:2> * <var:i> + <nat:60> * <var:U> + <nat:390> * <var:e> + <nat:332> * <var:G> + <nat:474> * <var:z> + <nat:11> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:390> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:302> = true ) . { auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 