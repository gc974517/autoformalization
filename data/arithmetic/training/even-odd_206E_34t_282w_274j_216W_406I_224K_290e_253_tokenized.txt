\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:I> \times <nat:406> + <var:W> \times <nat:216> + <nat:282> \times <var:w> + <nat:253> + <nat:206> \times <var:E> + <nat:224> \times <var:K> + <var:e> \times <nat:290> + <nat:274> \times <var:j> + <nat:34> \times <var:t> $ is odd given every $ <var:I> $ , $ <var:E> $ , $ <var:j> $ , $ <var:W> $ , $ <var:e> $ , $ <var:K> $ , $ <var:t> $ , and $ <var:w> $ . \end{theorem} \begin{proof} Take note that the addition between an even element of $ \mathbb{Z}^+ $ with an odd number in $ \mathbb{Z}^+ $ is odd . We make use the understanding the expression $ <nat:206> * <var:E> + <var:w> * <nat:282> + <nat:216> * <var:W> + <nat:274> * <var:j> + <var:K> * <nat:224> + <nat:406> * <var:I> + <nat:290> * <var:e> + <var:t> * <nat:34> $ is known as even . Because the summation of an even number and an even whole number is guaranteed to be an even positive integer , as well as since the multiplication of even numbers in $ \mathbb{Z}^+ $ and any number is an even element of $ \mathbb{N} $ . We demonstrate the summation $ <nat:253> + <nat:206> \times <var:E> + <var:t> \times <nat:34> + <nat:282> \times <var:w> + <var:j> \times <nat:274> + <var:W> \times <nat:216> + <nat:406> \times <var:I> + <var:K> \times <nat:224> + <nat:290> \times <var:e> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:E> <var:j> <var:W> <var:e> <var:K> <var:t> <var:w> : nat , Nat . odd ( <nat:406> * <var:I> + <nat:216> * <var:W> + <nat:282> * <var:w> + <nat:206> * <var:E> + <nat:224> * <var:K> + <nat:290> * <var:e> + <nat:274> * <var:j> + <nat:34> * <var:t> + <nat:253> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:406> * <var:I> + <nat:216> * <var:W> + <nat:282> * <var:w> + <nat:206> * <var:E> + <nat:224> * <var:K> + <nat:290> * <var:e> + <nat:274> * <var:j> + <nat:34> * <var:t> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 