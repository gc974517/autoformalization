\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:l> \times <nat:194> + <nat:449> + <var:s> \times <nat:286> + <var:y> \times <nat:34> + <var:Z> \times <nat:238> $ must be odd . \end{theorem} \begin{proof} We justify the formula $ <nat:34> <var:y> + <nat:449> + <nat:194> <var:l> + <nat:238> <var:Z> + <var:s> <nat:286> $ is guaranteed to be odd . Notice $ <nat:449> $ is known as odd . See the term $ <nat:34> \times <var:y> $ is clearly even . This is true from the fact the product of an even positive integer and some element of $ \mathbb{N} $ is guaranteed to be even as well as the integer $ <nat:34> $ is guaranteed to be by itself an even natural number . In addition to this , the number $ <nat:194> $ is known as an even element of $ \mathbb{N} $ . Thus , the pair $ <nat:194> \times <var:l> $ is guaranteed to be even additionally . In addition to this , the whole number $ <nat:286> $ is an even element of $ \mathbb{N} $ . Therefore , the product $ <nat:286> \times <var:s> $ will be even as well . Likewise , take note the number $ <nat:238> $ is clearly even . Therefore , $ <var:Z> \times <nat:238> $ must be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:s> <var:y> <var:Z> : nat , Nat . odd ( <nat:194> * <var:l> + <nat:286> * <var:s> + <nat:34> * <var:y> + <nat:238> * <var:Z> + <nat:449> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:449> = true ) . { auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:238> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 