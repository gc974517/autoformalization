\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:v> $ , $ <var:S> $ , $ <var:t> $ , $ <var:N> $ , $ <var:Z> $ , $ <var:k> $ , $ <var:i> $ , $ <var:o> $ , $ <var:V> \in \mathbb{Z}^+ $ more than or equivalent to <nat:2> . Define that some positive integer $ <var:a> $ is considered <def:nine-composite> assuming $ <var:S> \cdot <var:k> \cdot <var:N> \cdot <var:V> \cdot <var:Z> \cdot <var:o> \cdot <var:t> \cdot <var:v> \cdot <var:i> = <var:a> $ . \end{definition} \begin{theorem} The whole number <nat:4989600> is a <def:nine-composite> number . \end{theorem} \begin{proof} Allow $ <var:N> = <nat:2> $ , $ <var:o> = <nat:4> $ , $ <var:V> = <nat:10> $ , $ <var:Z> = <nat:6> $ , $ <var:k> = <nat:11> $ , $ <var:t> = <nat:5> $ , $ <var:S> = <nat:7> $ , $ <var:v> = <nat:9> $ , and $ <var:i> = <nat:3> $ . We justify <nat:4989600> is <def:nine-composite> on account of Considering $ <var:Z> = <nat:6> $ , $ <var:N> = <nat:2> $ , $ <var:o> = <nat:4> $ , $ <var:k> = <nat:11> $ , $ <var:t> = <nat:5> $ , $ <var:v> = <nat:9> $ , $ <var:i> = <nat:3> $ , $ <var:V> = <nat:10> $ and $ <var:S> = <nat:7> $ are larger than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:a> : nat ) := exists <var:v> <var:S> <var:t> <var:N> <var:Z> <var:k> <var:i> <var:o> <var:V> : nat , ( <var:v> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:S> * <var:k> * <var:N> * <var:V> * <var:Z> * <var:o> * <var:t> * <var:v> * <var:i> = <var:a> ) . Theorem <genP:1> : <def:nine-composite> <nat:4989600> . Proof . unfold <def:nine-composite> . exists <nat:9> . exists <nat:7> . exists <nat:5> . exists <nat:2> . exists <nat:6> . exists <nat:11> . exists <nat:3> . exists <nat:4> . exists <nat:10> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 