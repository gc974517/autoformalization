\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:B> \times <nat:256> + <nat:62> \times <var:D> + <var:T> \times <nat:414> + <nat:352> \times <var:w> + <nat:458> \times <var:o> + <nat:467> + <var:P> \times <nat:130> $ is guaranteed to be odd assuming any terms $ <var:D> $ , $ <var:T> $ , $ <var:o> $ , $ <var:w> $ , $ <var:P> $ , and $ <var:B> $ . \end{theorem} \begin{proof} The summation $ <nat:130> \cdot <var:P> + <var:D> \cdot <nat:62> + <nat:458> \cdot <var:o> + <var:T> \cdot <nat:414> + <var:w> \cdot <nat:352> + <nat:256> \cdot <var:B> $ is obviously even . Further , notice the terms $ <var:P> * <nat:130> $ , $ <var:D> * <nat:62> $ , $ <nat:458> * <var:o> $ , $ <nat:414> * <var:T> $ , $ <var:w> * <nat:352> $ , $ <nat:256> * <var:B> $ , are known as even . This claim must be true since taking the product of an even positive integer with a number in $ \mathbb{Z}^+ $ must be an even whole number and moreover the leading terms $ <nat:130> $ , $ <nat:62> $ , $ <nat:458> $ , $ <nat:414> $ , $ <nat:352> $ , $ <nat:256> $ , are known as even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:T> <var:o> <var:w> <var:P> <var:B> : nat , Nat . odd ( <nat:256> * <var:B> + <nat:62> * <var:D> + <nat:414> * <var:T> + <nat:352> * <var:w> + <nat:458> * <var:o> + <nat:130> * <var:P> + <nat:467> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even <nat:62> = true ) . { auto . } assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:62> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:B> + <nat:62> * <var:D> + <nat:414> * <var:T> + <nat:352> * <var:w> + <nat:458> * <var:o> + <nat:130> * <var:P> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 