\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist numbers $ <var:D> $ , $ <var:M> $ , $ <var:q> $ , $ <var:X> $ , $ <var:A> $ , $ <var:u> $ , $ <var:v> $ so that $ <var:D> $ , $ <var:A> $ , $ <var:X> $ , $ <var:q> $ , $ <var:M> $ , $ <var:u> $ and $ <var:v> \geq <nat:2> $ . Define that some number $ <var:j> $ is defined as a <def:seven-composite> natural number if $ <var:j> = <var:u> \cdot <var:A> \cdot <var:v> \cdot <var:q> \cdot <var:D> \cdot <var:M> \cdot <var:X> $ . \end{definition} \begin{theorem} $ <nat:190080> = <var:j> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Let $ <var:v> = <nat:4> $ , $ <var:X> = <nat:9> $ , $ <var:q> = <nat:11> $ , $ <var:D> = <nat:3> $ , $ <var:A> = <nat:8> $ , $ <var:M> = <nat:2> $ and $ <var:u> = <nat:10> $ . Further observe $ <var:M> = <nat:2> $ , $ <var:u> = <nat:10> $ , $ <var:A> = <nat:8> $ , $ <var:X> = <nat:9> $ , $ <var:v> = <nat:4> $ , $ <var:D> = <nat:3> $ and $ <var:q> = <nat:11> \geq <nat:2> $ . This gives the proposition holds . Consequently , $ <var:u> * <var:D> * <var:A> * <var:M> * <var:X> * <var:q> * <var:v> = <nat:190080> $ has been verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:j> : nat ) := exists <var:D> <var:M> <var:q> <var:X> <var:A> <var:u> <var:v> : nat , ( <var:D> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:j> = <var:u> * <var:A> * <var:v> * <var:q> * <var:D> * <var:M> * <var:X> ) . Theorem <genP:1> : <def:seven-composite> <nat:190080> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:2> . exists <nat:11> . exists <nat:9> . exists <nat:8> . exists <nat:10> . exists <nat:4> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 