\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:39> + <nat:388> <var:I> + <nat:192> <var:M> + <nat:412> <var:z> + <nat:228> <var:i> + <nat:404> <var:C> + <var:j> <nat:426> + <var:J> <nat:226> + <nat:320> <var:w> $ will be odd given every unknowns $ <var:C> $ , $ <var:z> $ , $ <var:I> $ , $ <var:j> $ , $ <var:w> $ , $ <var:M> $ , $ <var:i> $ , and $ <var:J> $ . \end{theorem} \begin{proof} We know that the terms $ <var:I> \times <nat:388> $ , $ <nat:192> \times <var:M> $ , $ <var:z> \times <nat:412> $ , $ <nat:228> \times <var:i> $ , $ <nat:404> \times <var:C> $ , $ <var:j> \times <nat:426> $ , $ <nat:226> \times <var:J> $ , and $ <var:w> \times <nat:320> $ are obviously even as a consequence that the positive integers $ <nat:388> $ , $ <nat:192> $ , $ <nat:412> $ , $ <nat:228> $ , $ <nat:404> $ , $ <nat:426> $ , $ <nat:226> $ , plus $ <nat:320> $ are even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:z> <var:I> <var:j> <var:w> <var:M> <var:i> <var:J> : nat , Nat . odd ( <nat:388> * <var:I> + <nat:192> * <var:M> + <nat:412> * <var:z> + <nat:228> * <var:i> + <nat:404> * <var:C> + <nat:426> * <var:j> + <nat:226> * <var:J> + <nat:320> * <var:w> + <nat:39> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:412> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 