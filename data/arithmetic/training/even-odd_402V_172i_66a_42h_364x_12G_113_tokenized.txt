\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:364> \times <var:x> + <var:a> \times <nat:66> + <var:V> \times <nat:402> + <nat:42> \times <var:h> + <var:i> \times <nat:172> + <nat:113> + <var:G> \times <nat:12> $ must be odd assuming any positive numbers $ <var:V> $ , $ <var:i> $ , $ <var:G> $ , $ <var:h> $ , $ <var:a> $ , and $ <var:x> $ . \end{theorem} \begin{proof} We check the formula $ <nat:402> <var:V> + <var:i> <nat:172> + <nat:66> <var:a> + <nat:42> <var:h> + <nat:364> <var:x> + <var:G> <nat:12> $ is obviously even , from the knowledge taking the product of an even whole number and any element of $ \mathbb{Z}^+ $ must be an even number . Remember that the integers $ <nat:42> $ , $ <nat:12> $ , $ <nat:172> $ , plus $ <nat:402> $ are known as even Adding on , observe that the number $ <nat:364> $ is clearly even On top of this , we know that the integer $ <nat:66> $ is clearly even Observe $ <nat:113> $ is clearly an odd positive integer . We verify our claim is true according to the addition of even integers together and an odd element of $ \mathbb{N} $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:i> <var:G> <var:h> <var:a> <var:x> : nat , Nat . odd ( <nat:364> * <var:x> + <nat:66> * <var:a> + <nat:402> * <var:V> + <nat:42> * <var:h> + <nat:172> * <var:i> + <nat:12> * <var:G> + <nat:113> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:172> = true ) . { auto . } assert ( <genH> : Nat . even <nat:402> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:x> + <nat:66> * <var:a> + <nat:402> * <var:V> + <nat:42> * <var:h> + <nat:172> * <var:i> + <nat:12> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:113> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 