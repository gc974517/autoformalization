\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There are $ <var:N> $ , $ <var:f> $ , $ <var:D> $ , $ <var:Q> $ , $ <var:G> $ , $ <var:U> $ , $ <var:P> \in \mathbb{N} $ satisfying the condition that $ <var:U> $ , $ <var:G> $ , $ <var:f> $ , $ <var:N> $ , $ <var:Q> $ , $ <var:P> $ and $ <var:D> \geq <nat:2> $ . Let that $ <var:s> \in \mathbb{N} $ will be considered a <def:seven-composite> natural number assuming $ <var:f> * <var:Q> * <var:D> * <var:P> * <var:G> * <var:U> * <var:N> = <var:s> $ . \end{definition} \begin{theorem} The whole number <nat:55440> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Allow $ <var:Q> = <nat:11> $ , $ <var:P> = <nat:4> $ , $ <var:f> = <nat:2> $ , $ <var:U> = <nat:7> $ , $ <var:N> = <nat:6> $ , $ <var:D> = <nat:3> $ and $ <var:G> = <nat:5> $ . Notice $ <nat:6> $ , $ <nat:11> $ , $ <nat:2> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:4> $ and $ <nat:7> \geq <nat:2> $ . Plus note also $ <var:f> \cdot <var:D> \cdot <var:P> \cdot <var:N> \cdot <var:U> \cdot <var:Q> \cdot <var:G> = <nat:55440> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:s> : nat ) := exists <var:N> <var:f> <var:D> <var:Q> <var:G> <var:U> <var:P> : nat , ( <var:U> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:f> * <var:Q> * <var:D> * <var:P> * <var:G> * <var:U> * <var:N> = <var:s> ) . Theorem <genP:1> : <def:seven-composite> <nat:55440> . Proof . unfold <def:seven-composite> . exists <nat:6> . exists <nat:2> . exists <nat:3> . exists <nat:11> . exists <nat:5> . exists <nat:7> . exists <nat:4> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 