\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some positive terms $ <var:M> $ , $ <var:T> $ , $ <var:n> $ , $ <var:z> $ , $ <var:y> $ , $ <var:C> $ , $ <var:K> $ , and $ <var:Q> $ the formula $ <var:T> * <nat:422> + <var:C> * <nat:338> + <nat:45> + <var:n> * <nat:268> + <nat:294> * <var:y> + <nat:4> * <var:K> + <var:M> * <nat:158> + <nat:450> * <var:z> + <nat:416> * <var:Q> $ will be odd . \end{theorem} \begin{proof} Take note that $ <nat:45> $ is trivially odd . The adding between an even number and an odd number is guaranteed to be an odd element of $ \mathbb{Z}^+ $ . See the terms $ <nat:422> <var:T> $ , $ <var:C> <nat:338> $ , $ <var:n> <nat:268> $ , $ <nat:294> <var:y> $ , $ <var:K> <nat:4> $ , $ <nat:158> <var:M> $ , $ <nat:450> <var:z> $ , additionally $ <var:Q> <nat:416> $ are guaranteed to be even . This must be true by reason that the integers $ <nat:422> $ , $ <nat:338> $ , $ <nat:268> $ , $ <nat:294> $ , $ <nat:4> $ , $ <nat:158> $ , $ <nat:450> $ , plus $ <nat:416> $ are even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:T> <var:n> <var:z> <var:y> <var:C> <var:K> <var:Q> : nat , Nat . odd ( <nat:422> * <var:T> + <nat:338> * <var:C> + <nat:268> * <var:n> + <nat:294> * <var:y> + <nat:4> * <var:K> + <nat:158> * <var:M> + <nat:450> * <var:z> + <nat:416> * <var:Q> + <nat:45> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:45> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:422> = true ) . { auto . } assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:422> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 