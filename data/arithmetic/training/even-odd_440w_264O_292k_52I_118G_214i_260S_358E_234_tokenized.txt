\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using all natural terms $ <var:G> $ , $ <var:I> $ , $ <var:i> $ , $ <var:k> $ , $ <var:E> $ , $ <var:O> $ , $ <var:w> $ , and $ <var:S> $ the expression $ <nat:440> * <var:w> + <nat:118> * <var:G> + <var:E> * <nat:358> + <var:S> * <nat:260> + <nat:234> + <var:k> * <nat:292> + <var:O> * <nat:264> + <nat:52> * <var:I> + <nat:214> * <var:i> $ must be even . \end{theorem} \begin{proof} We justify $ <var:E> \times <nat:358> + <nat:264> \times <var:O> + <var:i> \times <nat:214> + <nat:440> \times <var:w> + <nat:52> \times <var:I> + <nat:234> + <nat:118> \times <var:G> + <nat:292> \times <var:k> + <nat:260> \times <var:S> $ will be even . The main result is proven as a consequence that $ <var:S> \cdot <nat:260> + <var:E> \cdot <nat:358> + <var:O> \cdot <nat:264> + <var:i> \cdot <nat:214> + <var:w> \cdot <nat:440> + <var:G> \cdot <nat:118> + <nat:52> \cdot <var:I> + <nat:292> \cdot <var:k> $ is obviously even . The leading terms $ <nat:260> $ , $ <nat:358> $ , $ <nat:264> $ , $ <nat:214> $ , $ <nat:440> $ , $ <nat:118> $ , $ <nat:52> $ , and likewise $ <nat:292> $ are obviously even . Thus , the terms $ <nat:260> <var:S> $ , $ <var:E> <nat:358> $ , $ <nat:264> <var:O> $ , $ <var:i> <nat:214> $ , $ <nat:440> <var:w> $ , $ <var:G> <nat:118> $ , $ <var:I> <nat:52> $ , and moreover $ <var:k> <nat:292> $ must be even also . The sum $ <nat:440> \cdot <var:w> + <var:O> \cdot <nat:264> + <var:k> \cdot <nat:292> + <var:I> \cdot <nat:52> + <nat:118> \cdot <var:G> + <var:i> \cdot <nat:214> + <nat:260> \cdot <var:S> + <var:E> \cdot <nat:358> $ must be trivially even from the knowledge multiplying of even numbers in $ \mathbb{N} $ and some number will be fundamentally an even positive integer . The summation between even numbers in $ \mathbb{N} $ and an even number in $ \mathbb{N} $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:I> <var:i> <var:k> <var:E> <var:O> <var:w> <var:S> : nat , Nat . even ( <nat:440> * <var:w> + <nat:118> * <var:G> + <nat:358> * <var:E> + <nat:260> * <var:S> + <nat:292> * <var:k> + <nat:264> * <var:O> + <nat:52> * <var:I> + <nat:214> * <var:i> + <nat:234> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:w> + <nat:118> * <var:G> + <nat:358> * <var:E> + <nat:260> * <var:S> + <nat:292> * <var:k> + <nat:264> * <var:O> + <nat:52> * <var:I> + <nat:214> * <var:i> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . rewrite <genH> . auto . Qed . 