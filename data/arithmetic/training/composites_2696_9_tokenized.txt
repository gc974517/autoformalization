\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming that there exist $ <var:N> $ , $ <var:w> $ , $ <var:c> $ , $ <var:X> $ , $ <var:b> $ , $ <var:v> $ , $ <var:r> $ , $ <var:I> $ , $ <var:a> \in \mathbb{Z}^+ $ assume that some natural number $ <var:d> $ will be a <def:nine-composite> number when $ <var:d> = <var:v> * <var:w> * <var:a> * <var:r> * <var:X> * <var:b> * <var:c> * <var:N> * <var:I> $ and greater than or equivalent to <nat:2> . Therefore the natural number <nat:7603200> is a <def:nine-composite> number . \end{theorem} \begin{proof} Take $ <var:c> = <nat:4> $ , $ <var:r> = <nat:10> $ , $ <var:I> = <nat:12> $ , $ <var:b> = <nat:11> $ , $ <var:N> = <nat:6> $ , $ <var:v> = <nat:2> $ , $ <var:a> = <nat:3> $ , $ <var:X> = <nat:5> $ and $ <var:w> = <nat:8> $ . Note $ <nat:12> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:10> $ and $ <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:d> : nat ) := exists <var:N> <var:w> <var:c> <var:X> <var:b> <var:v> <var:r> <var:I> <var:a> : nat , ( <var:d> = <var:v> * <var:w> * <var:a> * <var:r> * <var:X> * <var:b> * <var:c> * <var:N> * <var:I> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:7603200> . Proof . unfold <def:nine-composite> . exists <nat:6> . exists <nat:8> . exists <nat:4> . exists <nat:5> . exists <nat:11> . exists <nat:2> . exists <nat:10> . exists <nat:12> . exists <nat:3> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 