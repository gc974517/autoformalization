\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:C> \cdot <nat:462> + <var:B> \cdot <nat:410> + <var:H> \cdot <nat:248> + <nat:45> + <nat:340> \cdot <var:L> $ must be odd for any variables $ <var:C> $ , $ <var:B> $ , $ <var:L> $ , and $ <var:H> $ . \end{theorem} \begin{proof} Take note that the expression $ <nat:248> * <var:H> + <var:L> * <nat:340> + <nat:462> * <var:C> + <var:B> * <nat:410> $ is even . $ <nat:462> \times <var:C> $ is clearly even as a consequence that multiplying of an even natural number with some number in $ \mathbb{N} $ is guaranteed to be even and also the natural number $ <nat:462> $ is guaranteed to be even . Observe that the pairs $ <nat:410> \times <var:B> $ plus $ <nat:248> \times <var:H> $ are clearly even . This fact must be true by reason that the leading terms $ <nat:410> $ and likewise $ <nat:248> $ are clearly even . Adding on , the term $ <var:L> \times <nat:340> $ is known as even because the integer $ <nat:340> $ is obviously an even whole number . From the knowledge the summation between an even whole number and even natural numbers will be even , and also as a consequence that the product of an even number in $ \mathbb{N} $ with some number must be even . We know $ <nat:45> $ is guaranteed to be an odd whole number . Because the summing of an even element of $ \mathbb{Z}^+ $ and an odd whole number is guaranteed to be odd , thus the formula $ <nat:45> + <nat:340> <var:L> + <var:C> <nat:462> + <nat:248> <var:H> + <var:B> <nat:410> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:B> <var:L> <var:H> : nat , Nat . odd ( <nat:462> * <var:C> + <nat:410> * <var:B> + <nat:248> * <var:H> + <nat:340> * <var:L> + <nat:45> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:C> + <nat:410> * <var:B> + <nat:248> * <var:H> + <nat:340> * <var:L> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:45> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 