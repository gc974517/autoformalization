\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every positive integers $ <var:c> $ , $ <var:C> $ , $ <var:X> $ , $ <var:k> $ , $ <var:Z> $ , $ <var:U> $ , $ <var:m> $ , and $ <var:R> $ the expression $ <var:X> \times <nat:192> + <var:R> \times <nat:376> + <nat:124> \times <var:k> + <var:Z> \times <nat:64> + <nat:230> \times <var:c> + <var:m> \times <nat:430> + <nat:201> + <nat:198> \times <var:C> + <nat:140> \times <var:U> $ is guaranteed to be odd . \end{theorem} \begin{proof} The leading terms $ <nat:376> $ , $ <nat:140> $ , $ <nat:230> $ , $ <nat:430> $ , $ <nat:198> $ , plus $ <nat:124> $ must be even positive integers In addition , take note the natural number $ <nat:64> $ is obviously an even natural number Observe the integer $ <nat:192> $ is known to be an even element of $ \mathbb{Z}^+ $ We check our main result holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:C> <var:X> <var:k> <var:Z> <var:U> <var:m> <var:R> : nat , Nat . odd ( <nat:192> * <var:X> + <nat:376> * <var:R> + <nat:124> * <var:k> + <nat:64> * <var:Z> + <nat:230> * <var:c> + <nat:430> * <var:m> + <nat:198> * <var:C> + <nat:140> * <var:U> + <nat:201> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:376> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:430> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 