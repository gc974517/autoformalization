\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted we have $ <var:M> = <var:d> \times <var:y> \times <var:R> \times <var:m> \times <var:h> $ assuming some positive integer $ <var:M> $ as well as satisfying the condition that $ <var:d> $ , $ <var:y> $ , $ <var:h> $ , $ <var:m> $ and $ <var:R> \geq <nat:2> $ , then we assume that $ <var:M> $ is a <def:five-composite> integer with some numbers $ <var:y> $ , $ <var:d> $ , $ <var:R> $ , $ <var:h> $ , $ <var:m> $ . Thus $ <nat:8316> = <var:M> $ is <def:five-composite> . \end{theorem} \begin{proof} We prove $ <nat:8316> = <var:y> \times <var:R> \times <var:d> \times <var:m> \times <var:h> $ plus $ <var:h> $ , $ <var:y> $ , $ <var:R> $ , $ <var:d> $ , and $ <var:m> $ are larger than or equivalent to <nat:2> . Notice that $ <nat:6> $ , $ <nat:11> $ , $ <nat:2> $ , $ <nat:9> $ , and $ <nat:7> \geq <nat:2> $ . Plus note that too $ <nat:8316> = <var:m> \times <var:R> \times <var:y> \times <var:d> \times <var:h> $ yields $ <var:R> = <nat:6> $ , $ <var:h> = <nat:7> $ , $ <var:m> = <nat:9> $ , $ <var:d> = <nat:2> $ , and $ <var:y> = <nat:11> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:M> : nat ) := exists <var:y> <var:d> <var:R> <var:h> <var:m> : nat , ( <var:M> = <var:d> * <var:y> * <var:R> * <var:m> * <var:h> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:8316> . Proof . unfold <def:five-composite> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } exists <nat:11> . exists <nat:2> . exists <nat:6> . exists <nat:7> . exists <nat:9> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 