\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With $ <var:f> $ , $ <var:s> $ , $ <var:g> $ , $ <var:H> $ , $ <var:G> $ , $ <var:R> $ , $ <var:K> $ , and $ <var:c> \in \mathbb{N} $ the expression $ <nat:202> <var:H> + <nat:31> + <nat:274> <var:s> + <nat:292> <var:f> + <var:g> <nat:346> + <nat:436> <var:R> + <var:K> <nat:368> + <nat:62> <var:c> + <nat:26> <var:G> $ is odd . \end{theorem} \begin{proof} The products $ <nat:62> \times <var:c> $ , $ <nat:368> \times <var:K> $ , $ <var:s> \times <nat:274> $ , $ <nat:436> \times <var:R> $ , $ <var:g> \times <nat:346> $ , $ <nat:26> \times <var:G> $ , in addition to $ <var:H> \times <nat:202> $ are trivially even elements of $ \mathbb{Z}^+ $ . Furthermore , $ <nat:292> \times <var:f> $ is trivially an even element of $ \mathbb{N} $ . This must be true as a consequence that multiplying of an even natural with some number will be itself an even number in $ \mathbb{Z}^+ $ . We know that $ <nat:31> $ is guaranteed to be odd . Notice that the adding of even integers collectively with an odd element of $ \mathbb{Z}^+ $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:s> <var:g> <var:H> <var:G> <var:R> <var:K> <var:c> : nat , Nat . odd ( <nat:202> * <var:H> + <nat:274> * <var:s> + <nat:292> * <var:f> + <nat:346> * <var:g> + <nat:436> * <var:R> + <nat:368> * <var:K> + <nat:62> * <var:c> + <nat:26> * <var:G> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:62> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:31> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 