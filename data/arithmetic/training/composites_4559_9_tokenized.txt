\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:J> $ , $ <var:W> $ , $ <var:s> $ , $ <var:t> $ , $ <var:P> $ , $ <var:G> $ , $ <var:Z> $ , $ <var:j> $ , $ <var:k> \in \mathbb{N} $ so that $ <var:J> $ , $ <var:s> $ , $ <var:Z> $ , $ <var:P> $ , $ <var:G> $ , $ <var:t> $ , $ <var:W> $ , $ <var:j> $ , $ <var:k> \geq <nat:2> $ . Claim that $ <var:a> \in \mathbb{Z}^+ $ will be considered a <def:nine-composite> positive integer assuming $ <var:a> = <var:Z> * <var:j> * <var:P> * <var:J> * <var:k> * <var:t> * <var:G> * <var:W> * <var:s> $ . Accordingly $ <nat:10644480> = <var:a> $ is a <def:nine-composite> integer . \end{theorem} \begin{proof} Allow $ <var:s> = <nat:2> $ , $ <var:j> = <nat:7> $ , $ <var:t> = <nat:11> $ , $ <var:Z> = <nat:10> $ , $ <var:J> = <nat:4> $ , $ <var:G> = <nat:3> $ , $ <var:W> = <nat:8> $ , $ <var:k> = <nat:12> $ , $ <var:P> = <nat:6> $ . Note $ <var:j> = <nat:7> $ , $ <var:J> = <nat:4> $ , $ <var:t> = <nat:11> $ , $ <var:k> = <nat:12> $ , $ <var:G> = <nat:3> $ , $ <var:W> = <nat:8> $ , $ <var:Z> = <nat:10> $ , $ <var:s> = <nat:2> $ , and $ <var:P> = <nat:6> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:a> : nat ) := exists <var:J> <var:W> <var:s> <var:t> <var:P> <var:G> <var:Z> <var:j> <var:k> : nat , ( <var:J> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:a> = <var:Z> * <var:j> * <var:P> * <var:J> * <var:k> * <var:t> * <var:G> * <var:W> * <var:s> ) . Theorem <genP:1> : <def:nine-composite> <nat:10644480> . Proof . unfold <def:nine-composite> . exists <nat:4> . exists <nat:8> . exists <nat:2> . exists <nat:11> . exists <nat:6> . exists <nat:3> . exists <nat:10> . exists <nat:7> . exists <nat:12> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 