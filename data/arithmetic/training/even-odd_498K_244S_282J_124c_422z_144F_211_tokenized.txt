\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:211> + <var:K> * <nat:498> + <var:S> * <nat:244> + <nat:282> * <var:J> + <nat:124> * <var:c> + <nat:422> * <var:z> + <nat:144> * <var:F> $ is guaranteed to be odd using any terms $ <var:c> $ , $ <var:S> $ , $ <var:z> $ , $ <var:F> $ , $ <var:J> $ , and $ <var:K> $ . \end{theorem} \begin{proof} Additionally , the pairs $ <nat:498> * <var:K> $ , $ <nat:244> * <var:S> $ , $ <var:J> * <nat:282> $ , $ <var:c> * <nat:124> $ , $ <nat:422> * <var:z> $ , and moreover $ <nat:144> * <var:F> $ will be even from the fact taking the product of an even number with an arbitrary element of $ \mathbb{Z}^+ $ is guaranteed to be an even positive integer and likewise the natural numbers $ <nat:498> $ , $ <nat:244> $ , $ <nat:282> $ , $ <nat:124> $ , $ <nat:422> $ , and also $ <nat:144> $ are obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:S> <var:z> <var:F> <var:J> <var:K> : nat , Nat . odd ( <nat:498> * <var:K> + <nat:244> * <var:S> + <nat:282> * <var:J> + <nat:124> * <var:c> + <nat:422> * <var:z> + <nat:144> * <var:F> + <nat:211> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even <nat:244> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even <nat:124> = true ) . { auto . } assert ( <genH> : Nat . even <nat:422> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:422> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 