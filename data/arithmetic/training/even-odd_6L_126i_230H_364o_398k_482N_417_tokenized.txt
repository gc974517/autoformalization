\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:126> * <var:i> + <nat:482> * <var:N> + <nat:364> * <var:o> + <nat:417> + <nat:230> * <var:H> + <nat:398> * <var:k> + <nat:6> * <var:L> $ will be odd . \end{theorem} \begin{proof} We employ that $ <nat:364> \times <var:o> + <var:i> \times <nat:126> + <var:L> \times <nat:6> + <var:H> \times <nat:230> + <var:N> \times <nat:482> + <var:k> \times <nat:398> $ is guaranteed to be even . The numbers $ <nat:364> $ , $ <nat:482> $ , $ <nat:126> $ , $ <nat:230> $ , in addition to $ <nat:6> $ must be even numbers in $ \mathbb{N} $ . Hence , the terms $ <nat:364> \cdot <var:o> $ , $ <var:N> \cdot <nat:482> $ , $ <nat:126> \cdot <var:i> $ , $ <nat:230> \cdot <var:H> $ , in addition to $ <var:L> \cdot <nat:6> $ is guaranteed to be even at the same time . The product $ <nat:398> \cdot <var:k> $ is even from the fact the natural number $ <nat:398> $ is trivially by definition an even integer . By reason that the multiplication of an even natural and some integer will be even this proposition is proven . Recall $ <nat:417> $ is known to be odd . We check the expression $ <nat:6> * <var:L> + <nat:126> * <var:i> + <nat:230> * <var:H> + <nat:364> * <var:o> + <nat:398> * <var:k> + <var:N> * <nat:482> + <nat:417> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:N> <var:o> <var:H> <var:k> <var:L> : nat , Nat . odd ( <nat:126> * <var:i> + <nat:482> * <var:N> + <nat:364> * <var:o> + <nat:230> * <var:H> + <nat:398> * <var:k> + <nat:6> * <var:L> + <nat:417> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even <nat:126> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:398> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:398> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:i> + <nat:482> * <var:N> + <nat:364> * <var:o> + <nat:230> * <var:H> + <nat:398> * <var:k> + <nat:6> * <var:L> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:417> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 