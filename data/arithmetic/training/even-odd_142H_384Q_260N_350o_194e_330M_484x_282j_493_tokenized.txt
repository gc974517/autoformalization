\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:330> \times <var:M> + <var:o> \times <nat:350> + <nat:194> \times <var:e> + <var:N> \times <nat:260> + <nat:493> + <var:j> \times <nat:282> + <nat:384> \times <var:Q> + <var:x> \times <nat:484> + <nat:142> \times <var:H> $ is guaranteed to be odd . \end{theorem} \begin{proof} See that the summing between even elements of $ \mathbb{N} $ collectively and an odd number will be by itself an odd element of $ \mathbb{N} $ . We apply the assumption the fact that the sum $ <nat:194> \cdot <var:e> + <var:j> \cdot <nat:282> + <var:Q> \cdot <nat:384> + <var:M> \cdot <nat:330> + <nat:493> + <nat:350> \cdot <var:o> + <nat:142> \cdot <var:H> + <var:N> \cdot <nat:260> + <nat:484> \cdot <var:x> $ is obviously odd since the summation $ <nat:260> \cdot <var:N> + <nat:330> \cdot <var:M> + <nat:484> \cdot <var:x> + <var:H> \cdot <nat:142> + <nat:194> \cdot <var:e> + <nat:384> \cdot <var:Q> + <var:o> \cdot <nat:350> + <var:j> \cdot <nat:282> $ is even , from the knowledge the adding between an even number with an even number is an even positive integer . The terms $ <nat:350> <var:o> $ , $ <nat:194> <var:e> $ , $ <nat:282> <var:j> $ , $ <var:M> <nat:330> $ , $ <var:N> <nat:260> $ , and likewise $ <var:Q> <nat:384> $ are clearly even as a consequence that the whole numbers $ <nat:350> $ , $ <nat:194> $ , $ <nat:282> $ , $ <nat:330> $ , $ <nat:260> $ , and moreover $ <nat:384> $ must be by their very nature even numbers . Likewise , the leading term $ <nat:484> $ is known as even . Accordingly , the pair $ <var:x> <nat:484> $ must be even too . Take note that the product $ <nat:142> <var:H> $ is known to be even . This holds from the knowledge the natural number $ <nat:142> $ is obviously an even integer . and from the fact multiplying of even numbers with a number is guaranteed to be even . We show our proposition holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:o> <var:e> <var:N> <var:j> <var:Q> <var:x> <var:H> : nat , Nat . odd ( <nat:330> * <var:M> + <nat:350> * <var:o> + <nat:194> * <var:e> + <nat:260> * <var:N> + <nat:282> * <var:j> + <nat:384> * <var:Q> + <nat:484> * <var:x> + <nat:142> * <var:H> + <nat:493> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:M> + <nat:350> * <var:o> + <nat:194> * <var:e> + <nat:260> * <var:N> + <nat:282> * <var:j> + <nat:384> * <var:Q> + <nat:484> * <var:x> + <nat:142> * <var:H> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 