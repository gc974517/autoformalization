\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all $ <var:v> $ , $ <var:s> $ , $ <var:e> $ , $ <var:G> $ , $ <var:f> $ , and $ <var:m> \in \mathbb{Z}^+ $ the summation $ <nat:243> + <var:v> * <nat:242> + <nat:330> * <var:s> + <var:G> * <nat:376> + <var:e> * <nat:258> + <nat:194> * <var:m> + <var:f> * <nat:390> $ is guaranteed to be odd . \end{theorem} \begin{proof} Take note that the number $ <nat:258> $ is even Building on , notice the leading terms $ <nat:242> $ in addition to $ <nat:376> $ must be even Additionally , the positive integer $ <nat:390> $ is guaranteed to be even Further , the leading term $ <nat:194> $ is clearly an even element of $ \mathbb{Z}^+ $ Furthermore , the whole number $ <nat:330> $ is clearly an even positive integer Remember $ <nat:243> $ is clearly an odd natural number . We prove the formula $ <nat:243> + <var:v> \times <nat:242> + <var:s> \times <nat:330> + <var:G> \times <nat:376> + <nat:194> \times <var:m> + <nat:390> \times <var:f> + <var:e> \times <nat:258> $ will be odd . Remember multiplying between an even integer and a number in $ \mathbb{N} $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:s> <var:e> <var:G> <var:f> <var:m> : nat , Nat . odd ( <nat:242> * <var:v> + <nat:330> * <var:s> + <nat:376> * <var:G> + <nat:258> * <var:e> + <nat:194> * <var:m> + <nat:390> * <var:f> + <nat:243> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even <nat:376> = true ) . { auto . } assert ( <genH> : Nat . even <nat:390> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . odd <nat:243> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 