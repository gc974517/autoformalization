\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming all $ <var:m> $ , $ <var:N> $ , $ <var:A> $ , $ <var:H> $ , $ <var:P> $ , $ <var:s> $ , $ <var:X> $ , and $ <var:F> \in \mathbb{N} $ the summation $ <nat:484> \cdot <var:X> + <nat:408> \cdot <var:F> + <var:H> \cdot <nat:36> + <var:N> \cdot <nat:330> + <var:A> \cdot <nat:212> + <nat:2> \cdot <var:m> + <nat:406> \cdot <var:s> + <nat:359> + <nat:240> \cdot <var:P> $ is odd . \end{theorem} \begin{proof} The pairs $ <nat:2> <var:m> $ , $ <nat:408> <var:F> $ , $ <var:s> <nat:406> $ , $ <nat:212> <var:A> $ , and likewise $ <nat:330> <var:N> $ must be even numbers in $ \mathbb{Z}^+ $ . In addition to this , we know that the product $ <var:H> <nat:36> $ is guaranteed to be even . The product $ <nat:484> <var:X> $ is known as even . This claim is proven from the knowledge the multiplication between an even element of $ \mathbb{N} $ and some positive integer must be even . Take note that the pair $ <nat:240> <var:P> $ is even . Recall that the summing of an even natural and an odd positive integer is guaranteed to be odd . We know $ <nat:359> $ is clearly an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:N> <var:A> <var:H> <var:P> <var:s> <var:X> <var:F> : nat , Nat . odd ( <nat:484> * <var:X> + <nat:408> * <var:F> + <nat:36> * <var:H> + <nat:330> * <var:N> + <nat:212> * <var:A> + <nat:2> * <var:m> + <nat:406> * <var:s> + <nat:240> * <var:P> + <nat:359> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:2> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:212> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:240> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:359> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 