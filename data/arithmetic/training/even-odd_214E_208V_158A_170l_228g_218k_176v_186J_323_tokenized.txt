\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:E> \cdot <nat:214> + <nat:208> \cdot <var:V> + <var:A> \cdot <nat:158> + <var:l> \cdot <nat:170> + <nat:228> \cdot <var:g> + <var:k> \cdot <nat:218> + <nat:176> \cdot <var:v> + <nat:323> + <var:J> \cdot <nat:186> $ is guaranteed to be odd using any positive integers $ <var:k> $ , $ <var:A> $ , $ <var:V> $ , $ <var:E> $ , $ <var:l> $ , $ <var:g> $ , $ <var:J> $ , and $ <var:v> $ . \end{theorem} \begin{proof} Remember the products $ <var:J> \cdot <nat:186> $ , $ <nat:214> \cdot <var:E> $ , $ <var:V> \cdot <nat:208> $ , plus $ <var:l> \cdot <nat:170> $ are known as even . This is true by reason that taking the product between an even number in $ \mathbb{N} $ and a number in $ \mathbb{N} $ must be even . The pair $ <nat:158> \cdot <var:A> $ is even . This holds from the knowledge the multiplication between an even whole number and a number in $ \mathbb{N} $ is guaranteed to be an even number in $ \mathbb{N} $ . The product $ <nat:176> \cdot <var:v> $ is obviously an even positive integer from the knowledge taking the product between an even integer and an arbitrary element of $ \mathbb{Z}^+ $ will be in itself an even element of $ \mathbb{Z}^+ $ . Further , the product $ <nat:228> \cdot <var:g> $ is guaranteed to be even . Furthermore , see the pair $ <nat:218> \cdot <var:k> $ is known as an even element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:A> <var:V> <var:E> <var:l> <var:g> <var:J> <var:v> : nat , Nat . odd ( <nat:214> * <var:E> + <nat:208> * <var:V> + <nat:158> * <var:A> + <nat:170> * <var:l> + <nat:228> * <var:g> + <nat:218> * <var:k> + <nat:176> * <var:v> + <nat:186> * <var:J> + <nat:323> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:186> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:176> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 