\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Denote that $ <var:z> $ is a <def:nine-composite> integer given there are some numbers $ <var:j> $ , $ <var:w> $ , $ <var:c> $ , $ <var:S> $ , $ <var:W> $ , $ <var:k> $ , $ <var:u> $ , $ <var:v> $ , $ <var:s> $ satisfying the condition that $ <var:j> $ , $ <var:u> $ , $ <var:v> $ , $ <var:k> $ , $ <var:S> $ , $ <var:W> $ , $ <var:c> $ , $ <var:w> $ , $ <var:s> \geq <nat:2> $ plus assuming some $ <var:z> $ , $ <var:c> \cdot <var:s> \cdot <var:k> \cdot <var:j> \cdot <var:v> \cdot <var:w> \cdot <var:u> \cdot <var:W> \cdot <var:S> = <var:z> $ . Then $ <nat:6652800> = <var:z> $ is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Notice $ <nat:10> $ , $ <nat:5> $ , $ <nat:4> $ , $ <nat:7> $ , $ <nat:11> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:3> $ , and $ <nat:12> $ are more than or equal to <nat:2> . Also note likewise $ <var:u> \cdot <var:v> \cdot <var:j> \cdot <var:w> \cdot <var:k> \cdot <var:s> \cdot <var:S> \cdot <var:W> \cdot <var:c> = <nat:6652800> $ implies $ <var:j> = <nat:10> $ , $ <var:W> = <nat:11> $ , $ <var:w> = <nat:6> $ , $ <var:u> = <nat:5> $ , $ <var:k> = <nat:7> $ , $ <var:v> = <nat:2> $ , $ <var:s> = <nat:4> $ , $ <var:c> = <nat:3> $ and $ <var:S> = <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:z> : nat ) := exists <var:j> <var:w> <var:c> <var:S> <var:W> <var:k> <var:u> <var:v> <var:s> : nat , ( <var:j> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:c> * <var:s> * <var:k> * <var:j> * <var:v> * <var:w> * <var:u> * <var:W> * <var:S> = <var:z> ) . Theorem <genP:1> : <def:nine-composite> <nat:6652800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:6> . exists <nat:3> . exists <nat:12> . exists <nat:11> . exists <nat:7> . exists <nat:5> . exists <nat:2> . exists <nat:4> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 