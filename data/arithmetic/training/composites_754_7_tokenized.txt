\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:X> $ , $ <var:S> $ , $ <var:G> $ , $ <var:y> $ , $ <var:F> $ , $ <var:j> $ , $ <var:n> \in \mathbb{Z}^+ $ greater than <nat:1> . Let that $ <var:I> \in \mathbb{Z}^+ $ will be a <def:seven-composite> whole number if $ <var:X> \cdot <var:j> \cdot <var:S> \cdot <var:y> \cdot <var:n> \cdot <var:G> \cdot <var:F> = <var:I> $ . Accordingly the positive integer <nat:86400> is <def:seven-composite> . \end{theorem} \begin{proof} Take $ <var:j> = <nat:3> $ , $ <var:F> = <nat:12> $ , $ <var:G> = <nat:10> $ , $ <var:n> = <nat:4> $ , $ <var:y> = <nat:2> $ , $ <var:X> = <nat:6> $ , $ <var:S> = <nat:5> $ . We verify $ <nat:86400> = <var:F> \cdot <var:S> \cdot <var:X> \cdot <var:G> \cdot <var:n> \cdot <var:j> \cdot <var:y> $ . Similarly note that $ <var:y> = <nat:2> $ , $ <var:n> = <nat:4> $ , $ <var:F> = <nat:12> $ , $ <var:X> = <nat:6> $ , $ <var:j> = <nat:3> $ , $ <var:S> = <nat:5> $ and $ <var:G> = <nat:10> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:I> : nat ) := exists <var:X> <var:S> <var:G> <var:y> <var:F> <var:j> <var:n> : nat , ( <var:X> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:F> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:X> * <var:j> * <var:S> * <var:y> * <var:n> * <var:G> * <var:F> = <var:I> ) . Theorem <genP:1> : <def:seven-composite> <nat:86400> . Proof . unfold <def:seven-composite> . exists <nat:6> . exists <nat:5> . exists <nat:10> . exists <nat:2> . exists <nat:12> . exists <nat:3> . exists <nat:4> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 