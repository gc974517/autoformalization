\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With natural terms $ <var:G> $ , $ <var:y> $ , $ <var:v> $ , and $ <var:e> $ $ <nat:160> <var:e> + <nat:356> <var:y> + <nat:18> <var:G> + <nat:387> + <nat:476> <var:v> $ must be odd . \end{theorem} \begin{proof} Notice $ <var:y> \cdot <nat:356> + <nat:476> \cdot <var:v> + <nat:387> + <var:G> \cdot <nat:18> + <nat:160> \cdot <var:e> $ is known as odd because $ <nat:160> <var:e> + <nat:476> <var:v> + <var:G> <nat:18> + <var:y> <nat:356> $ is even . The term $ <nat:18> <var:G> $ is guaranteed to be even . Notice the pair $ <nat:160> <var:e> $ is clearly even . Notice the pair $ <nat:356> <var:y> $ is guaranteed to be an even whole number by reason that taking the product between an even natural and any integer is by definition an even whole number . $ <var:v> <nat:476> $ is guaranteed to be an even positive integer . $ <nat:160> * <var:e> + <nat:356> * <var:y> + <var:v> * <nat:476> + <var:G> * <nat:18> $ is guaranteed to be fundamentally even from the knowledge taking the product of even naturals with any natural number will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:y> <var:v> <var:e> : nat , Nat . odd ( <nat:160> * <var:e> + <nat:356> * <var:y> + <nat:18> * <var:G> + <nat:476> * <var:v> + <nat:387> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:18> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:e> + <nat:356> * <var:y> + <nat:18> * <var:G> + <nat:476> * <var:v> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 