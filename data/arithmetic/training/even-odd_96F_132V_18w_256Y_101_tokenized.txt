\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking all natural numbers $ <var:V> $ , $ <var:F> $ , $ <var:Y> $ , and $ <var:w> $ $ <var:V> \cdot <nat:132> + <nat:256> \cdot <var:Y> + <nat:101> + <nat:18> \cdot <var:w> + <nat:96> \cdot <var:F> $ is guaranteed to be odd . \end{theorem} \begin{proof} Remember the summation of an even positive integer and an odd integer must be an odd positive integer . The numbers $ <nat:132> $ , $ <nat:256> $ , $ <nat:18> $ , and also $ <nat:96> $ are trivially even . Thus , the products $ <nat:132> \times <var:V> $ , $ <nat:256> \times <var:Y> $ , $ <var:w> \times <nat:18> $ , as well as $ <nat:96> \times <var:F> $ is guaranteed to be even also . It can be verified that the sum $ <nat:96> \cdot <var:F> + <nat:132> \cdot <var:V> + <var:w> \cdot <nat:18> + <nat:256> \cdot <var:Y> + <nat:101> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:F> <var:Y> <var:w> : nat , Nat . odd ( <nat:132> * <var:V> + <nat:256> * <var:Y> + <nat:18> * <var:w> + <nat:96> * <var:F> + <nat:101> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:132> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 