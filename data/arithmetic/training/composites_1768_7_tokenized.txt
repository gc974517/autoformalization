\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:a> $ , $ <var:j> $ , $ <var:q> $ , $ <var:b> $ , $ <var:Y> $ , $ <var:V> $ , and $ <var:N> $ as integers so that $ <var:q> $ , $ <var:V> $ , $ <var:j> $ , $ <var:Y> $ , $ <var:b> $ , $ <var:N> $ and $ <var:a> \geq <nat:2> $ . $ <var:b> * <var:V> * <var:q> * <var:N> * <var:Y> * <var:j> * <var:a> $ is equal to $ <nat:342144> $ . \end{theorem} \begin{proof} Take $ <var:j> = <nat:12> $ , $ <var:b> = <nat:2> $ , $ <var:q> = <nat:8> $ , $ <var:a> = <nat:9> $ , $ <var:Y> = <nat:11> $ , $ <var:N> = <nat:3> $ , and $ <var:V> = <nat:6> $ . Note $ <nat:11> \times <nat:6> \times <nat:9> \times <nat:12> \times <nat:8> \times <nat:3> \times <nat:2> = <var:Y> \times <var:V> \times <var:a> \times <var:j> \times <var:q> \times <var:N> \times <var:b> = <nat:342144> $ . Similarly note $ <var:N> = <nat:3> $ , $ <var:j> = <nat:12> $ , $ <var:a> = <nat:9> $ , $ <var:b> = <nat:2> $ , $ <var:Y> = <nat:11> $ , $ <var:V> = <nat:6> $ , and $ <var:q> = <nat:8> \geq <nat:2> $ . This implies our belief is true . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:a> <var:j> <var:q> <var:b> <var:Y> <var:V> <var:N> : nat , ( <var:q> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:b> * <var:V> * <var:q> * <var:N> * <var:Y> * <var:j> * <var:a> = <nat:342144> ) . Proof . exists <nat:9> . exists <nat:12> . exists <nat:8> . exists <nat:2> . exists <nat:11> . exists <nat:6> . exists <nat:3> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 