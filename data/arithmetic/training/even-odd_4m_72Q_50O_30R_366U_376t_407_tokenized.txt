\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:m> \cdot <nat:4> + <nat:72> \cdot <var:Q> + <nat:50> \cdot <var:O> + <var:R> \cdot <nat:30> + <nat:407> + <nat:366> \cdot <var:U> + <nat:376> \cdot <var:t> $ must be odd . \end{theorem} \begin{proof} Recall $ <var:t> \times <nat:376> $ is obviously an even positive integer . Take note that the pair $ <var:O> \times <nat:50> $ is known as even . In addition , the terms $ <nat:4> \times <var:m> $ and likewise $ <var:R> \times <nat:30> $ are obviously even numbers in $ \mathbb{N} $ . This holds from the fact the multiplication of an even natural and some whole number must be an even whole number . In addition to this , see $ <var:Q> \times <nat:72> $ is trivially an even integer . This fact must be true by reason that the product between an even number in $ \mathbb{N} $ and some number in $ \mathbb{N} $ is guaranteed to be even . In addition , remember that the pair $ <nat:366> \times <var:U> $ is trivially even . We know that the summation of even positive integers and an odd element of $ \mathbb{Z}^+ $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:Q> <var:O> <var:R> <var:U> <var:t> : nat , Nat . odd ( <nat:4> * <var:m> + <nat:72> * <var:Q> + <nat:50> * <var:O> + <nat:30> * <var:R> + <nat:366> * <var:U> + <nat:376> * <var:t> + <nat:407> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:376> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 