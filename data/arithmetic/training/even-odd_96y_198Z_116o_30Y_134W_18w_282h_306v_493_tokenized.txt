\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With any $ <var:W> $ , $ <var:Z> $ , $ <var:h> $ , $ <var:Y> $ , $ <var:v> $ , $ <var:w> $ , $ <var:y> $ , and $ <var:o> \in \mathbb{N} $ the sum $ <nat:96> * <var:y> + <nat:282> * <var:h> + <var:Y> * <nat:30> + <var:o> * <nat:116> + <var:v> * <nat:306> + <nat:493> + <var:w> * <nat:18> + <nat:198> * <var:Z> + <var:W> * <nat:134> $ is guaranteed to be odd . \end{theorem} \begin{proof} The summation between even natural numbers together and an odd number is odd . So , our theorem is proven . We use the knowledge that the sum $ <nat:198> \cdot <var:Z> + <var:W> \cdot <nat:134> + <nat:493> + <var:y> \cdot <nat:96> + <var:w> \cdot <nat:18> + <var:v> \cdot <nat:306> + <var:o> \cdot <nat:116> + <var:h> \cdot <nat:282> + <nat:30> \cdot <var:Y> $ is odd as a consequence that the sum $ <nat:282> \cdot <var:h> + <nat:134> \cdot <var:W> + <var:Z> \cdot <nat:198> + <nat:306> \cdot <var:v> + <nat:96> \cdot <var:y> + <nat:116> \cdot <var:o> + <var:w> \cdot <nat:18> + <var:Y> \cdot <nat:30> $ is clearly even , by reason that the totaling between an even element of $ \mathbb{Z}^+ $ with an even positive integer must be even . The term $ <var:o> \times <nat:116> $ is even because the coefficient $ <nat:116> $ is clearly an even number in $ \mathbb{N} $ . Further , the terms $ <var:y> \times <nat:96> $ , $ <var:Z> \times <nat:198> $ , $ <var:Y> \times <nat:30> $ , $ <nat:282> \times <var:h> $ , $ <nat:134> \times <var:W> $ , as well as $ <nat:18> \times <var:w> $ are known to be even . This must be true as a consequence that the integers $ <nat:96> $ , $ <nat:198> $ , $ <nat:30> $ , $ <nat:282> $ , $ <nat:134> $ , as well as $ <nat:18> $ are known to be even . Likewise , notice that the term $ <nat:306> \times <var:v> $ is known as even from the knowledge the leading term $ <nat:306> $ is clearly by its very nature an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:W> <var:Z> <var:h> <var:Y> <var:v> <var:w> <var:y> <var:o> : nat , Nat . odd ( <nat:96> * <var:y> + <nat:282> * <var:h> + <nat:30> * <var:Y> + <nat:116> * <var:o> + <nat:306> * <var:v> + <nat:18> * <var:w> + <nat:198> * <var:Z> + <nat:134> * <var:W> + <nat:493> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:306> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:y> + <nat:282> * <var:h> + <nat:30> * <var:Y> + <nat:116> * <var:o> + <nat:306> * <var:v> + <nat:18> * <var:w> + <nat:198> * <var:Z> + <nat:134> * <var:W> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 