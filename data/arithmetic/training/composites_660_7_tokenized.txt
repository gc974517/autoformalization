\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:p> $ , $ <var:J> $ , $ <var:n> $ , $ <var:I> $ , $ <var:o> $ , $ <var:f> $ , $ <var:V> $ are positive integers such that $ <var:o> $ , $ <var:I> $ , $ <var:n> $ , $ <var:V> $ , $ <var:J> $ , $ <var:f> $ , $ <var:p> > <nat:1> $ . Take as given that some positive integer $ <var:j> $ is defined as a <def:seven-composite> positive integer given $ <var:j> = <var:f> \times <var:V> \times <var:J> \times <var:n> \times <var:I> \times <var:o> \times <var:p> $ . Therefore $ <nat:498960> = <var:j> $ is a <def:seven-composite> number . \end{theorem} \begin{proof} Recall <nat:498960> is a <def:seven-composite> whole number with the condition <nat:498960> is the product of whole numbers $ <var:o> $ , $ <var:I> $ , $ <var:f> $ , $ <var:p> $ , $ <var:V> $ , $ <var:n> $ and $ <var:J> $ more than <nat:1> . We demonstrate the proposition is true because $ <nat:3> \cdot <nat:11> \cdot <nat:4> \cdot <nat:9> \cdot <nat:6> \cdot <nat:10> \cdot <nat:7> = <nat:498960> $ and on account of $ <nat:10> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:6> $ , $ <nat:9> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:j> : nat ) := exists <var:p> <var:J> <var:n> <var:I> <var:o> <var:f> <var:V> : nat , ( <var:o> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:j> = <var:f> * <var:V> * <var:J> * <var:n> * <var:I> * <var:o> * <var:p> ) . Theorem <genP:1> : <def:seven-composite> <nat:498960> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:4> . exists <nat:11> . exists <nat:3> . exists <nat:10> . exists <nat:6> . exists <nat:7> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 