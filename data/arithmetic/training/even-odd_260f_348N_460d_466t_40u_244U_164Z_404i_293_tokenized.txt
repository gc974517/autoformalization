\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:293> + <var:Z> <nat:164> + <var:i> <nat:404> + <var:d> <nat:460> + <var:f> <nat:260> + <nat:244> <var:U> + <var:N> <nat:348> + <nat:40> <var:u> + <nat:466> <var:t> $ is guaranteed to be odd . \end{theorem} \begin{proof} Remember the leading terms $ <nat:348> $ , $ <nat:40> $ , $ <nat:404> $ , plus $ <nat:460> $ are known as even elements of $ \mathbb{Z}^+ $ . Accordingly , the terms $ <nat:348> \cdot <var:N> $ , $ <nat:40> \cdot <var:u> $ , $ <nat:404> \cdot <var:i> $ , as well as $ <nat:460> \cdot <var:d> $ is guaranteed to be even as well . The pair $ <var:t> \cdot <nat:466> $ is guaranteed to be even . This fact must be true because the integer $ <nat:466> $ is clearly even . In addition to this , notice the terms $ <var:f> \cdot <nat:260> $ and likewise $ <nat:244> \cdot <var:U> $ are even as a consequence that taking the product between an even number in $ \mathbb{N} $ with some element of $ \mathbb{N} $ is even , and holds because the natural numbers $ <nat:260> $ as well as $ <nat:244> $ are known as even . In addition , notice the pair $ <nat:164> \cdot <var:Z> $ is known as an even number from the knowledge the leading term $ <nat:164> $ is instrinsically an even integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Z> <var:i> <var:d> <var:f> <var:U> <var:N> <var:u> <var:t> : nat , Nat . odd ( <nat:164> * <var:Z> + <nat:404> * <var:i> + <nat:460> * <var:d> + <nat:260> * <var:f> + <nat:244> * <var:U> + <nat:348> * <var:N> + <nat:40> * <var:u> + <nat:466> * <var:t> + <nat:293> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:244> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 