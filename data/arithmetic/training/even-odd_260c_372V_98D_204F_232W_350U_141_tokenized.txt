\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:141> + <nat:204> \cdot <var:F> + <var:c> \cdot <nat:260> + <var:U> \cdot <nat:350> + <nat:372> \cdot <var:V> + <nat:98> \cdot <var:D> + <nat:232> \cdot <var:W> $ must be odd . \end{theorem} \begin{proof} The sum $ <var:F> \cdot <nat:204> + <nat:350> \cdot <var:U> + <var:D> \cdot <nat:98> + <nat:260> \cdot <var:c> + <var:V> \cdot <nat:372> + <var:W> \cdot <nat:232> $ is guaranteed to be even . Notice the terms $ <nat:350> <var:U> $ additionally $ <var:V> <nat:372> $ are clearly even whole numbers from the fact the multiplication of an even natural number and some element of $ \mathbb{Z}^+ $ is even , which holds from the fact the whole numbers $ <nat:350> $ and likewise $ <nat:372> $ are clearly . On top of this , recall the leading term $ <nat:98> $ is known as even . So , the pair $ <var:D> <nat:98> $ will be even at the same time . Adding on , we know the integers $ <nat:232> $ plus $ <nat:204> $ are even . Consequently , the pairs $ <var:W> <nat:232> $ and likewise $ <var:F> <nat:204> $ will be even also . The term $ <nat:260> <var:c> $ is trivially an even natural . This holds from the knowledge taking the product of an even number with any whole number will be even . This is true by reason that the coefficient $ <nat:260> $ is clearly by its very nature an even integer . It can be justified that our proposition holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:c> <var:U> <var:V> <var:D> <var:W> : nat , Nat . odd ( <nat:204> * <var:F> + <nat:260> * <var:c> + <nat:350> * <var:U> + <nat:372> * <var:V> + <nat:98> * <var:D> + <nat:232> * <var:W> + <nat:141> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:372> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:232> = true ) . { auto . } assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:F> + <nat:260> * <var:c> + <nat:350> * <var:U> + <nat:372> * <var:V> + <nat:98> * <var:D> + <nat:232> * <var:W> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 