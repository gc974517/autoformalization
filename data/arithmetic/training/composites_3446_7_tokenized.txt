\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given that we have $ <var:C> $ , $ <var:V> $ , $ <var:e> $ , $ <var:r> $ , $ <var:U> $ , $ <var:M> $ and $ <var:N> \geq <nat:2> $ satisfying the condition that taking $ <var:I> \in \mathbb{N} $ , $ <var:I> = <var:r> * <var:U> * <var:e> * <var:M> * <var:V> * <var:C> * <var:N> $ with some natural numbers $ <var:e> $ , $ <var:C> $ , $ <var:r> $ , $ <var:V> $ , $ <var:N> $ , $ <var:M> $ , $ <var:U> $ , claim that $ <var:I> $ is a <def:seven-composite> number . Consequently the positive integer <nat:266112> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Assume $ <var:V> = <nat:3> $ , $ <var:r> = <nat:12> $ , $ <var:N> = <nat:8> $ , $ <var:C> = <nat:11> $ , $ <var:e> = <nat:2> $ , $ <var:M> = <nat:7> $ , and $ <var:U> = <nat:6> $ . Observe $ <nat:266112> = <var:e> * <var:C> * <var:V> * <var:M> * <var:r> * <var:N> * <var:U> $ . Plus note that $ <nat:3> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:7> $ , $ <nat:6> $ , $ <nat:11> $ , and $ <nat:8> $ are greater than or equal to <nat:2> . This yields our thesis is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:I> : nat ) := exists <var:e> <var:C> <var:r> <var:V> <var:N> <var:M> <var:U> : nat , ( <var:C> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:I> = <var:r> * <var:U> * <var:e> * <var:M> * <var:V> * <var:C> * <var:N> ) . Theorem <genP:1> : <def:seven-composite> <nat:266112> . Proof . unfold <def:seven-composite> . exists <nat:2> . exists <nat:11> . exists <nat:12> . exists <nat:3> . exists <nat:8> . exists <nat:7> . exists <nat:6> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 