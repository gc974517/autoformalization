\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming positive integers $ <var:t> $ , $ <var:E> $ , $ <var:j> $ , $ <var:s> $ , $ <var:L> $ , and $ <var:K> $ the sum $ <nat:170> \cdot <var:K> + <var:j> \cdot <nat:364> + <nat:196> \cdot <var:L> + <nat:166> \cdot <var:s> + <nat:61> + <nat:400> \cdot <var:E> + <nat:16> \cdot <var:t> $ must be odd . \end{theorem} \begin{proof} We verify the expression $ <nat:61> + <var:E> * <nat:400> + <nat:196> * <var:L> + <nat:364> * <var:j> + <var:K> * <nat:170> + <var:t> * <nat:16> + <nat:166> * <var:s> $ is guaranteed to be odd . Remember that $ <nat:61> $ is known as odd . We utilize the understanding that $ <nat:16> <var:t> + <var:L> <nat:196> + <var:s> <nat:166> + <nat:400> <var:E> + <var:j> <nat:364> + <var:K> <nat:170> $ is clearly even . In addition to this , the positive integers $ <nat:16> $ , $ <nat:196> $ , $ <nat:166> $ , $ <nat:400> $ , $ <nat:364> $ , additionally $ <nat:170> $ are clearly even . Hence , the pairs $ <var:t> \cdot <nat:16> $ , $ <nat:196> \cdot <var:L> $ , $ <var:s> \cdot <nat:166> $ , $ <var:E> \cdot <nat:400> $ , $ <nat:364> \cdot <var:j> $ , and also $ <var:K> \cdot <nat:170> $ is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:t> <var:E> <var:j> <var:s> <var:L> <var:K> : nat , Nat . odd ( <nat:170> * <var:K> + <nat:364> * <var:j> + <nat:196> * <var:L> + <nat:166> * <var:s> + <nat:400> * <var:E> + <nat:16> * <var:t> + <nat:61> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:61> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:K> + <nat:364> * <var:j> + <nat:196> * <var:L> + <nat:166> * <var:s> + <nat:400> * <var:E> + <nat:16> * <var:t> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 