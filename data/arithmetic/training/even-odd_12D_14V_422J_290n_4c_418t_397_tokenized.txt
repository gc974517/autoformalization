\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:D> <nat:12> + <nat:14> <var:V> + <var:J> <nat:422> + <var:n> <nat:290> + <nat:4> <var:c> + <nat:397> + <var:t> <nat:418> $ is odd using some $ <var:n> $ , $ <var:V> $ , $ <var:t> $ , $ <var:J> $ , $ <var:c> $ , and $ <var:D> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} We demonstrate this lemma is true . The whole numbers $ <nat:12> $ , $ <nat:14> $ , $ <nat:422> $ , $ <nat:290> $ , $ <nat:4> $ , and $ <nat:418> $ are even naturals . So , the pairs $ <nat:12> \times <var:D> $ , $ <var:V> \times <nat:14> $ , $ <nat:422> \times <var:J> $ , $ <nat:290> \times <var:n> $ , $ <var:c> \times <nat:4> $ , plus $ <nat:418> \times <var:t> $ is even in addition . Remember that the summation of an even positive integer and an odd natural number will be an odd integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:V> <var:t> <var:J> <var:c> <var:D> : nat , Nat . odd ( <nat:12> * <var:D> + <nat:14> * <var:V> + <nat:422> * <var:J> + <nat:290> * <var:n> + <nat:4> * <var:c> + <nat:418> * <var:t> + <nat:397> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:422> = true ) . { auto . } assert ( <genH> : Nat . even <nat:290> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:422> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 