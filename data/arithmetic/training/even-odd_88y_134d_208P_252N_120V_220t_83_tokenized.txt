\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:252> \cdot <var:N> + <nat:120> \cdot <var:V> + <nat:88> \cdot <var:y> + <nat:208> \cdot <var:P> + <nat:134> \cdot <var:d> + <var:t> \cdot <nat:220> + <nat:83> $ must be odd assuming $ <var:V> $ , $ <var:N> $ , $ <var:d> $ , $ <var:y> $ , $ <var:P> $ , and $ <var:t> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} The natural numbers $ <nat:208> $ , $ <nat:134> $ , $ <nat:120> $ , $ <nat:220> $ , as well as $ <nat:252> $ are trivially even positive integers . For this reason , the products $ <var:P> * <nat:208> $ , $ <var:d> * <nat:134> $ , $ <nat:120> * <var:V> $ , $ <var:t> * <nat:220> $ , additionally $ <nat:252> * <var:N> $ must be even additionally . Notice $ <nat:88> * <var:y> $ is known to be even . This is proven as a consequence that the multiplication of an even integer with an arbitrary element of $ \mathbb{N} $ is guaranteed to be an even whole number . This fact is true by reason that the leading term $ <nat:88> $ is an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:N> <var:d> <var:y> <var:P> <var:t> : nat , Nat . odd ( <nat:252> * <var:N> + <nat:120> * <var:V> + <nat:88> * <var:y> + <nat:208> * <var:P> + <nat:134> * <var:d> + <nat:220> * <var:t> + <nat:83> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even <nat:220> = true ) . { auto . } assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:220> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 