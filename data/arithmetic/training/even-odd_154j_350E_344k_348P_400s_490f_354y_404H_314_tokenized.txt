\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:154> <var:j> + <nat:404> <var:H> + <nat:348> <var:P> + <nat:314> + <var:s> <nat:400> + <var:y> <nat:354> + <nat:344> <var:k> + <var:E> <nat:350> + <var:f> <nat:490> $ must be even with all positive numbers $ <var:E> $ , $ <var:s> $ , $ <var:P> $ , $ <var:y> $ , $ <var:f> $ , $ <var:k> $ , $ <var:H> $ , and $ <var:j> $ . \end{theorem} \begin{proof} We use the fact $ <var:k> \times <nat:344> + <var:H> \times <nat:404> + <nat:314> + <var:y> \times <nat:354> + <var:s> \times <nat:400> + <var:j> \times <nat:154> + <var:P> \times <nat:348> + <nat:350> \times <var:E> + <nat:490> \times <var:f> $ is obviously even because the sum $ <nat:404> <var:H> + <var:j> <nat:154> + <var:E> <nat:350> + <var:P> <nat:348> + <var:f> <nat:490> + <nat:344> <var:k> + <nat:354> <var:y> + <var:s> <nat:400> $ is trivially even . The pairs $ <var:P> \times <nat:348> $ , $ <var:k> \times <nat:344> $ , in addition to $ <var:s> \times <nat:400> $ will be even . This is proven because the leading terms $ <nat:348> $ , $ <nat:344> $ , and $ <nat:400> $ are known as even . Further , remember the natural number $ <nat:490> $ is known to be an even positive integer . So , the product $ <nat:490> \times <var:f> $ must be even as well . On top of this , take note the whole numbers $ <nat:404> $ , $ <nat:354> $ , additionally $ <nat:154> $ are obviously even integers . Then , the terms $ <nat:404> \times <var:H> $ , $ <var:y> \times <nat:354> $ , additionally $ <nat:154> \times <var:j> $ must be even additionally . What's more , see the integer $ <nat:350> $ is trivially even . Consequently , $ <nat:350> \times <var:E> $ is even too . Since the adding between an even number and an even number is guaranteed to be even , the lemma holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:s> <var:P> <var:y> <var:f> <var:k> <var:H> <var:j> : nat , Nat . even ( <nat:154> * <var:j> + <nat:404> * <var:H> + <nat:348> * <var:P> + <nat:400> * <var:s> + <nat:354> * <var:y> + <nat:344> * <var:k> + <nat:350> * <var:E> + <nat:490> * <var:f> + <nat:314> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:490> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:j> + <nat:404> * <var:H> + <nat:348> * <var:P> + <nat:400> * <var:s> + <nat:354> * <var:y> + <nat:344> * <var:k> + <nat:350> * <var:E> + <nat:490> * <var:f> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . rewrite <genH> . auto . Qed . 