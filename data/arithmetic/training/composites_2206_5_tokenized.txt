\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:C> $ , $ <var:g> $ , $ <var:L> $ , $ <var:o> $ , $ <var:G> \in \mathbb{N} $ such that $ <var:G> $ , $ <var:L> $ , $ <var:g> $ , $ <var:o> $ and $ <var:C> \geq <nat:2> $ . Denote that some positive integer $ <var:I> $ will be a <def:five-composite> positive integer assuming $ <var:o> \times <var:L> \times <var:C> \times <var:g> \times <var:G> = <var:I> $ . \end{definition} \begin{theorem} The positive integer <nat:3240> is a <def:five-composite> number . \end{theorem} \begin{proof} Recollect that <nat:3240> is a <def:five-composite> positive integer wherever <nat:3240> is the multiplication between whole numbers $ <var:L> $ , $ <var:C> $ , $ <var:G> $ , $ <var:o> $ , and $ <var:g> $ greater than or equal to <nat:2> . Note that $ <nat:3240> = <var:L> \cdot <var:g> \cdot <var:o> \cdot <var:C> \cdot <var:G> = <nat:9> \cdot <nat:2> \cdot <nat:3> \cdot <nat:10> \cdot <nat:6> $ . Further notice $ <nat:3> $ , $ <nat:6> $ , $ <nat:10> $ , $ <nat:2> $ and $ <nat:9> $ are greater than or equal to <nat:2> . Therefore , <nat:3240> is a <def:five-composite> natural number has been verified . As a result , $ <nat:3240> = <var:C> \times <var:G> \times <var:o> \times <var:L> \times <var:g> $ is verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:I> : nat ) := exists <var:C> <var:g> <var:L> <var:o> <var:G> : nat , ( <var:G> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:o> * <var:L> * <var:C> * <var:g> * <var:G> = <var:I> ) . Theorem <genP:1> : <def:five-composite> <nat:3240> . Proof . unfold <def:five-composite> . exists <nat:10> . exists <nat:2> . exists <nat:9> . exists <nat:3> . exists <nat:6> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 