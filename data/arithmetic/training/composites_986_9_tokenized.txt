\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:q> $ , $ <var:s> $ , $ <var:f> $ , $ <var:W> $ , $ <var:A> $ , $ <var:G> $ , $ <var:S> $ , $ <var:K> $ , $ <var:O> \in \mathbb{N} $ . Take as given that $ <var:a> \in \mathbb{Z}^+ $ will be considered as a <def:nine-composite> number given $ <var:G> \times <var:S> \times <var:s> \times <var:O> \times <var:W> \times <var:f> \times <var:K> \times <var:A> \times <var:q> = <var:a> $ plus larger than <nat:1> . Then $ <nat:22809600> = <var:a> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Note $ <nat:22809600> = <nat:8> \cdot <nat:5> \cdot <nat:2> \cdot <nat:6> \cdot <nat:12> \cdot <nat:9> \cdot <nat:4> \cdot <nat:11> \cdot <nat:10> $ . In addition notice $ <nat:6> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:10> $ and $ <nat:8> $ are larger than <nat:1> . This implies <nat:22809600> is <def:nine-composite> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:a> : nat ) := exists <var:q> <var:s> <var:f> <var:W> <var:A> <var:G> <var:S> <var:K> <var:O> : nat , ( <var:G> * <var:S> * <var:s> * <var:O> * <var:W> * <var:f> * <var:K> * <var:A> * <var:q> = <var:a> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:K> > <nat:1> ) /\ ( <var:O> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:22809600> . Proof . unfold <def:nine-composite> . exists <nat:10> . exists <nat:9> . exists <nat:5> . exists <nat:4> . exists <nat:11> . exists <nat:8> . exists <nat:2> . exists <nat:6> . exists <nat:12> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 