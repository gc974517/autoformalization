\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some integers $ <var:G> $ , $ <var:X> $ , $ <var:R> $ , and $ <var:v> $ $ <var:v> <nat:150> + <nat:392> <var:R> + <nat:148> <var:G> + <nat:153> + <nat:78> <var:X> $ must be odd . \end{theorem} \begin{proof} It can be shown that the formula $ <var:R> \times <nat:392> + <nat:150> \times <var:v> + <nat:78> \times <var:X> + <var:G> \times <nat:148> $ is obviously even . The product $ <nat:392> * <var:R> $ is clearly an even natural number . In addition to this , the terms $ <var:X> * <nat:78> $ in addition to $ <nat:148> * <var:G> $ must be even positive integers since the multiplication of an even positive integer with a whole number must be obviously an even element of $ \mathbb{Z}^+ $ . In addition to this , the product $ <nat:150> * <var:v> $ is even . As a consequence that the adding of an even element of $ \mathbb{Z}^+ $ with even elements of $ \mathbb{Z}^+ $ is trivially an even positive integer , in addition to since taking the product between an even element of $ \mathbb{Z}^+ $ and some positive integer will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:X> <var:R> <var:v> : nat , Nat . odd ( <nat:150> * <var:v> + <nat:392> * <var:R> + <nat:148> * <var:G> + <nat:78> * <var:X> + <nat:153> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:392> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:v> + <nat:392> * <var:R> + <nat:148> * <var:G> + <nat:78> * <var:X> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 