\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Denote that $ <var:F> $ is a <def:nine-composite> whole number supposing for some $ <var:C> $ , $ <var:T> $ , $ <var:x> $ , $ <var:I> $ , $ <var:k> $ , $ <var:E> $ , $ <var:O> $ , $ <var:Y> $ , $ <var:u> \in \mathbb{N} $ we get $ <var:F> = <var:u> * <var:E> * <var:C> * <var:T> * <var:Y> * <var:x> * <var:k> * <var:O> * <var:I> $ with some integer $ <var:F> $ and so that $ <var:k> $ , $ <var:T> $ , $ <var:O> $ , $ <var:I> $ , $ <var:E> $ , $ <var:x> $ , $ <var:C> $ , $ <var:u> $ , $ <var:Y> \geq <nat:2> $ . Accordingly $ <var:F> = <nat:4989600> $ is <def:nine-composite> . \end{theorem} \begin{proof} Note $ <nat:7> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:2> $ , and $ <nat:5> > <nat:1> $ . Also note still $ <var:x> \times <var:E> \times <var:Y> \times <var:O> \times <var:k> \times <var:T> \times <var:C> \times <var:I> \times <var:u> = <nat:4989600> $ yields $ <var:T> = <nat:10> $ , $ <var:C> = <nat:5> $ , $ <var:k> = <nat:4> $ , $ <var:O> = <nat:11> $ , $ <var:u> = <nat:6> $ , $ <var:I> = <nat:9> $ , $ <var:E> = <nat:2> $ , $ <var:x> = <nat:7> $ and $ <var:Y> = <nat:3> $ . This gives <nat:4989600> is a <def:nine-composite> positive integer . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:F> : nat ) := exists <var:C> <var:T> <var:x> <var:I> <var:k> <var:E> <var:O> <var:Y> <var:u> : nat , ( <var:F> = <var:u> * <var:E> * <var:C> * <var:T> * <var:Y> * <var:x> * <var:k> * <var:O> * <var:I> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:4989600> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } exists <nat:5> . exists <nat:10> . exists <nat:7> . exists <nat:9> . exists <nat:4> . exists <nat:2> . exists <nat:11> . exists <nat:3> . exists <nat:6> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 