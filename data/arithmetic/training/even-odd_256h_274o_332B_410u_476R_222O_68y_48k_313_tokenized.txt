\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:R> \times <nat:476> + <nat:222> \times <var:O> + <nat:256> \times <var:h> + <var:k> \times <nat:48> + <nat:332> \times <var:B> + <var:o> \times <nat:274> + <var:u> \times <nat:410> + <var:y> \times <nat:68> + <nat:313> $ is odd taking all integers $ <var:R> $ , $ <var:B> $ , $ <var:o> $ , $ <var:y> $ , $ <var:h> $ , $ <var:O> $ , $ <var:u> $ , and $ <var:k> $ . \end{theorem} \begin{proof} The lemma is proven from the fact $ <var:u> \times <nat:410> + <nat:68> \times <var:y> + <var:h> \times <nat:256> + <nat:476> \times <var:R> + <nat:222> \times <var:O> + <var:o> \times <nat:274> + <var:B> \times <nat:332> + <var:k> \times <nat:48> $ is guaranteed to be even . In addition to this , the leading terms $ <nat:410> $ , $ <nat:68> $ , $ <nat:256> $ , $ <nat:476> $ , $ <nat:222> $ , $ <nat:274> $ , $ <nat:332> $ , plus $ <nat:48> $ are known as even . Then , the pairs $ <nat:410> \cdot <var:u> $ , $ <var:y> \cdot <nat:68> $ , $ <nat:256> \cdot <var:h> $ , $ <var:R> \cdot <nat:476> $ , $ <var:O> \cdot <nat:222> $ , $ <nat:274> \cdot <var:o> $ , $ <nat:332> \cdot <var:B> $ , and $ <nat:48> \cdot <var:k> $ will be even as well . By reason that taking the product of even naturals and some element of $ \mathbb{Z}^+ $ must be even $ <nat:256> \cdot <var:h> + <var:o> \cdot <nat:274> + <nat:332> \cdot <var:B> + <var:u> \cdot <nat:410> + <nat:476> \cdot <var:R> + <nat:222> \cdot <var:O> + <var:y> \cdot <nat:68> + <nat:48> \cdot <var:k> $ must be clearly even . Take note $ <nat:313> $ is known to be odd . Remember that the summing between even naturals together with an odd number is an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:R> <var:B> <var:o> <var:y> <var:h> <var:O> <var:u> <var:k> : nat , Nat . odd ( <nat:476> * <var:R> + <nat:222> * <var:O> + <nat:256> * <var:h> + <nat:48> * <var:k> + <nat:332> * <var:B> + <nat:274> * <var:o> + <nat:410> * <var:u> + <nat:68> * <var:y> + <nat:313> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:R> + <nat:222> * <var:O> + <nat:256> * <var:h> + <nat:48> * <var:k> + <nat:332> * <var:B> + <nat:274> * <var:o> + <nat:410> * <var:u> + <nat:68> * <var:y> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:313> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 