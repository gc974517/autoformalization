\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:Q> $ , $ <var:V> $ , $ <var:L> $ , $ <var:k> $ , $ <var:x> $ , $ <var:s> $ , $ <var:d> \in \mathbb{Z}^+ $ more than <nat:1> . Claim that $ <var:X> \in \mathbb{Z}^+ $ is defined as a <def:seven-composite> natural number given $ <var:X> = <var:x> \cdot <var:d> \cdot <var:s> \cdot <var:L> \cdot <var:Q> \cdot <var:k> \cdot <var:V> $ . Accordingly <nat:299376> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Recall <nat:299376> is a <def:seven-composite> positive integer granted <nat:299376> is the product between positive integers $ <var:V> $ , $ <var:d> $ , $ <var:s> $ , $ <var:L> $ , $ <var:k> $ , $ <var:x> $ , $ <var:Q> $ larger than <nat:1> . Allow $ <var:k> = <nat:2> $ , $ <var:d> = <nat:11> $ , $ <var:x> = <nat:12> $ , $ <var:s> = <nat:6> $ , $ <var:L> = <nat:3> $ , $ <var:V> = <nat:7> $ , $ <var:Q> = <nat:9> $ . Observe that $ <var:s> = <nat:6> $ , $ <var:x> = <nat:12> $ , $ <var:d> = <nat:11> $ , $ <var:k> = <nat:2> $ , $ <var:V> = <nat:7> $ , $ <var:Q> = <nat:9> $ , and $ <var:L> = <nat:3> $ are greater than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:X> : nat ) := exists <var:Q> <var:V> <var:L> <var:k> <var:x> <var:s> <var:d> : nat , ( <var:Q> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:d> > <nat:1> ) /\ ( <var:X> = <var:x> * <var:d> * <var:s> * <var:L> * <var:Q> * <var:k> * <var:V> ) . Theorem <genP:1> : <def:seven-composite> <nat:299376> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:7> . exists <nat:3> . exists <nat:2> . exists <nat:12> . exists <nat:6> . exists <nat:11> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 