\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} When we get $ <var:g> $ , $ <var:M> $ , $ <var:T> $ , $ <var:I> $ , $ <var:z> $ , $ <var:t> $ and $ <var:k> \geq <nat:2> $ where assuming $ <var:Z> \in \mathbb{N} $ , $ <var:Z> = <var:k> * <var:T> * <var:I> * <var:z> * <var:t> * <var:M> * <var:g> $ with some positive integers $ <var:k> $ , $ <var:I> $ , $ <var:t> $ , $ <var:T> $ , $ <var:g> $ , $ <var:z> $ , $ <var:M> $ , then we denote that $ <var:Z> $ is a <def:seven-composite> integer . \end{definition} \begin{theorem} <nat:60480> is a <def:seven-composite> number . \end{theorem} \begin{proof} Recollect that a <def:seven-composite> whole number is the multiplication of integers $ <var:t> $ , $ <var:I> $ , $ <var:M> $ , $ <var:k> $ , $ <var:g> $ , $ <var:z> $ , and $ <var:T> $ greater than or equal to <nat:2> . Notice $ <var:M> \times <var:t> \times <var:I> \times <var:T> \times <var:z> \times <var:g> \times <var:k> = <nat:60480> $ implies $ <var:T> = <nat:5> $ , $ <var:I> = <nat:3> $ , $ <var:k> = <nat:7> $ , $ <var:t> = <nat:9> $ , $ <var:M> = <nat:2> $ , $ <var:g> = <nat:4> $ , and $ <var:z> = <nat:8> $ . Plus note that $ <nat:2> $ , $ <nat:8> $ , $ <nat:3> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:7> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Z> : nat ) := exists <var:k> <var:I> <var:t> <var:T> <var:g> <var:z> <var:M> : nat , ( <var:g> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:Z> = <var:k> * <var:T> * <var:I> * <var:z> * <var:t> * <var:M> * <var:g> ) . Theorem <genP:1> : <def:seven-composite> <nat:60480> . Proof . unfold <def:seven-composite> . exists <nat:7> . exists <nat:3> . exists <nat:9> . exists <nat:5> . exists <nat:4> . exists <nat:8> . exists <nat:2> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 