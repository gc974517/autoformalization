\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever we have $ <var:w> $ , $ <var:a> $ , $ <var:O> $ , $ <var:L> $ , $ <var:D> $ , $ <var:e> $ , $ <var:q> \geq <nat:2> $ satisfying the condition that using some number $ <var:C> $ , $ <var:C> = <var:O> \times <var:e> \times <var:L> \times <var:D> \times <var:q> \times <var:a> \times <var:w> $ , then we define that $ <var:C> $ is a <def:seven-composite> natural number for some $ <var:e> $ , $ <var:O> $ , $ <var:w> $ , $ <var:D> $ , $ <var:q> $ , $ <var:a> $ , $ <var:L> \in \mathbb{N} $ . Therefore the positive integer <nat:237600> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Take $ <var:e> = <nat:10> $ , $ <var:q> = <nat:3> $ , $ <var:w> = <nat:8> $ , $ <var:L> = <nat:2> $ , $ <var:O> = <nat:5> $ , $ <var:a> = <nat:9> $ , $ <var:D> = <nat:11> $ . Observe $ <var:D> \times <var:O> \times <var:q> \times <var:e> \times <var:w> \times <var:L> \times <var:a> = <nat:237600> $ . Moreover note that $ <var:q> = <nat:3> $ , $ <var:O> = <nat:5> $ , $ <var:w> = <nat:8> $ , $ <var:e> = <nat:10> $ , $ <var:D> = <nat:11> $ , $ <var:a> = <nat:9> $ , $ <var:L> = <nat:2> \geq <nat:2> $ . This suggests our theorem is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:C> : nat ) := exists <var:e> <var:O> <var:w> <var:D> <var:q> <var:a> <var:L> : nat , ( <var:w> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:C> = <var:O> * <var:e> * <var:L> * <var:D> * <var:q> * <var:a> * <var:w> ) . Theorem <genP:1> : <def:seven-composite> <nat:237600> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:5> . exists <nat:8> . exists <nat:11> . exists <nat:3> . exists <nat:9> . exists <nat:2> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 