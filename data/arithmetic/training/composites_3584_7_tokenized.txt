\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that we have $ <var:B> $ , $ <var:O> $ , $ <var:I> $ , $ <var:X> $ , $ <var:j> $ , $ <var:G> $ , and $ <var:E> \geq <nat:2> $ so that with $ <var:C> \in \mathbb{N} $ , $ <var:C> = <var:I> * <var:B> * <var:j> * <var:E> * <var:G> * <var:X> * <var:O> $ , then denote that $ <var:C> $ is a <def:seven-composite> positive integer using some $ <var:E> $ , $ <var:X> $ , $ <var:G> $ , $ <var:O> $ , $ <var:j> $ , $ <var:I> $ , $ <var:B> \in \mathbb{N} $ . \end{definition} \begin{theorem} The integer <nat:380160> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Assume $ <var:O> = <nat:11> $ , $ <var:G> = <nat:9> $ , $ <var:X> = <nat:2> $ , $ <var:B> = <nat:5> $ , $ <var:j> = <nat:12> $ , $ <var:I> = <nat:4> $ , $ <var:E> = <nat:8> $ . Observe that $ <var:j> = <nat:12> $ , $ <var:O> = <nat:11> $ , $ <var:B> = <nat:5> $ , $ <var:I> = <nat:4> $ , $ <var:X> = <nat:2> $ , $ <var:G> = <nat:9> $ , $ <var:E> = <nat:8> $ are more than or equal to <nat:2> . Furthermore note too $ <nat:380160> = <var:B> * <var:I> * <var:j> * <var:X> * <var:O> * <var:G> * <var:E> $ . This implies our formula is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:C> : nat ) := exists <var:E> <var:X> <var:G> <var:O> <var:j> <var:I> <var:B> : nat , ( <var:B> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:C> = <var:I> * <var:B> * <var:j> * <var:E> * <var:G> * <var:X> * <var:O> ) . Theorem <genP:1> : <def:seven-composite> <nat:380160> . Proof . unfold <def:seven-composite> . exists <nat:8> . exists <nat:2> . exists <nat:9> . exists <nat:11> . exists <nat:12> . exists <nat:4> . exists <nat:5> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 