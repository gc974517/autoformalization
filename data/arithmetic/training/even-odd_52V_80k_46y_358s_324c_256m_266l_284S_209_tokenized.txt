\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:284> \cdot <var:S> + <var:V> \cdot <nat:52> + <var:k> \cdot <nat:80> + <var:c> \cdot <nat:324> + <nat:209> + <nat:266> \cdot <var:l> + <var:m> \cdot <nat:256> + <nat:46> \cdot <var:y> + <var:s> \cdot <nat:358> $ is guaranteed to be odd given all natural numbers $ <var:l> $ , $ <var:V> $ , $ <var:c> $ , $ <var:s> $ , $ <var:m> $ , $ <var:k> $ , $ <var:y> $ , and $ <var:S> $ . \end{theorem} \begin{proof} We check the sum $ <var:V> \times <nat:52> + <nat:80> \times <var:k> + <var:y> \times <nat:46> + <nat:209> + <var:s> \times <nat:358> + <var:c> \times <nat:324> + <var:m> \times <nat:256> + <nat:266> \times <var:l> + <nat:284> \times <var:S> $ will be odd . In addition to this , observe that the leading terms $ <nat:52> $ , $ <nat:80> $ , $ <nat:46> $ , $ <nat:358> $ , $ <nat:324> $ , $ <nat:256> $ , $ <nat:266> $ , and also $ <nat:284> $ are trivially even naturals . Then , the terms $ <var:V> \cdot <nat:52> $ , $ <nat:80> \cdot <var:k> $ , $ <nat:46> \cdot <var:y> $ , $ <nat:358> \cdot <var:s> $ , $ <nat:324> \cdot <var:c> $ , $ <var:m> \cdot <nat:256> $ , $ <var:l> \cdot <nat:266> $ , and likewise $ <nat:284> \cdot <var:S> $ will be even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:V> <var:c> <var:s> <var:m> <var:k> <var:y> <var:S> : nat , Nat . odd ( <nat:284> * <var:S> + <nat:52> * <var:V> + <nat:80> * <var:k> + <nat:324> * <var:c> + <nat:266> * <var:l> + <nat:256> * <var:m> + <nat:46> * <var:y> + <nat:358> * <var:s> + <nat:209> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:80> = true ) . { auto . } assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 