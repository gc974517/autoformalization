\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} When we have such that $ <var:Q> $ , $ <var:i> $ , $ <var:m> $ , $ <var:U> $ , $ <var:P> $ , $ <var:S> $ , and $ <var:q> > <nat:1> $ where using some $ <var:O> $ , $ <var:O> = <var:S> * <var:U> * <var:i> * <var:m> * <var:q> * <var:Q> * <var:P> $ using some positive integers $ <var:q> $ , $ <var:i> $ , $ <var:P> $ , $ <var:Q> $ , $ <var:S> $ , $ <var:m> $ , $ <var:U> $ , take that $ <var:O> $ is a <def:seven-composite> integer . Consequently <nat:221760> is <def:seven-composite> . \end{theorem} \begin{proof} Notice that $ <nat:221760> = <var:m> \cdot <var:q> \cdot <var:U> \cdot <var:P> \cdot <var:S> \cdot <var:Q> \cdot <var:i> $ shows $ <var:U> = <nat:5> $ , $ <var:i> = <nat:3> $ , $ <var:q> = <nat:11> $ , $ <var:Q> = <nat:8> $ , $ <var:P> = <nat:4> $ , $ <var:S> = <nat:7> $ , and $ <var:m> = <nat:6> $ . Similarly observe $ <nat:5> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:6> $ , $ <nat:11> $ , $ <nat:8> $ and $ <nat:4> > <nat:1> $ . As a consequence , $ <var:q> * <var:Q> * <var:i> * <var:S> * <var:P> * <var:U> * <var:m> = <nat:221760> $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:O> : nat ) := exists <var:q> <var:i> <var:P> <var:Q> <var:S> <var:m> <var:U> : nat , ( <var:Q> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:O> = <var:S> * <var:U> * <var:i> * <var:m> * <var:q> * <var:Q> * <var:P> ) . Theorem <genP:1> : <def:seven-composite> <nat:221760> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:3> . exists <nat:4> . exists <nat:8> . exists <nat:7> . exists <nat:6> . exists <nat:5> . assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 