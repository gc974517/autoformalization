\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We denote that $ <var:S> $ is a <def:seven-composite> positive integer wherever there are some numbers $ <var:c> $ , $ <var:g> $ , $ <var:t> $ , $ <var:P> $ , $ <var:X> $ , $ <var:m> $ , $ <var:o> $ satisfying the condition that $ <var:S> = <var:P> \cdot <var:m> \cdot <var:t> \cdot <var:c> \cdot <var:g> \cdot <var:o> \cdot <var:X> $ with $ <var:S> \in \mathbb{N} $ and such that $ <var:P> $ , $ <var:g> $ , $ <var:X> $ , $ <var:t> $ , $ <var:o> $ , $ <var:c> $ , $ <var:m> \geq <nat:2> $ . \end{definition} \begin{theorem} The positive integer <nat:760320> is a <def:seven-composite> number . \end{theorem} \begin{proof} We confirm $ <nat:760320> = <var:g> \times <var:t> \times <var:o> \times <var:m> \times <var:P> \times <var:c> \times <var:X> $ . Notice $ <var:t> * <var:o> * <var:c> * <var:m> * <var:g> * <var:P> * <var:X> = <nat:760320> $ produces $ <var:g> = <nat:4> $ , $ <var:o> = <nat:12> $ , $ <var:c> = <nat:10> $ , $ <var:X> = <nat:3> $ , $ <var:m> = <nat:6> $ , $ <var:P> = <nat:8> $ , $ <var:t> = <nat:11> $ . Furthermore notice $ <nat:8> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:11> $ and $ <nat:4> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:S> : nat ) := exists <var:c> <var:g> <var:t> <var:P> <var:X> <var:m> <var:o> : nat , ( <var:S> = <var:P> * <var:m> * <var:t> * <var:c> * <var:g> * <var:o> * <var:X> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:760320> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:4> . exists <nat:11> . exists <nat:8> . exists <nat:3> . exists <nat:6> . exists <nat:12> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 