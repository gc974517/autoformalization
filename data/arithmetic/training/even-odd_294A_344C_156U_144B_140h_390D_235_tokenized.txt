\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With any terms $ <var:B> $ , $ <var:C> $ , $ <var:U> $ , $ <var:h> $ , $ <var:D> $ , and $ <var:A> $ the formula $ <nat:294> \cdot <var:A> + <nat:235> + <nat:156> \cdot <var:U> + <var:C> \cdot <nat:344> + <var:B> \cdot <nat:144> + <nat:140> \cdot <var:h> + <var:D> \cdot <nat:390> $ will be odd . \end{theorem} \begin{proof} The proposition must be true by reason that $ <var:A> \cdot <nat:294> + <var:C> \cdot <nat:344> + <nat:156> \cdot <var:U> + <nat:144> \cdot <var:B> + <var:h> \cdot <nat:140> + <var:D> \cdot <nat:390> $ is obviously even . Observe the products $ <var:A> * <nat:294> $ , $ <var:C> * <nat:344> $ , $ <var:U> * <nat:156> $ , $ <nat:144> * <var:B> $ , $ <nat:140> * <var:h> $ , as well as $ <nat:390> * <var:D> $ must be even from the knowledge the leading terms $ <nat:294> $ , $ <nat:344> $ , $ <nat:156> $ , $ <nat:144> $ , $ <nat:140> $ , and $ <nat:390> $ must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:B> <var:C> <var:U> <var:h> <var:D> <var:A> : nat , Nat . odd ( <nat:294> * <var:A> + <nat:156> * <var:U> + <nat:344> * <var:C> + <nat:144> * <var:B> + <nat:140> * <var:h> + <nat:390> * <var:D> + <nat:235> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:140> = true ) . { auto . } assert ( <genH> : Nat . even <nat:390> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:A> + <nat:156> * <var:U> + <nat:344> * <var:C> + <nat:144> * <var:B> + <nat:140> * <var:h> + <nat:390> * <var:D> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 