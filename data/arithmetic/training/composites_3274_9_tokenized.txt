\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Wherever we have $ <var:E> * <var:i> * <var:z> * <var:W> * <var:f> * <var:B> * <var:s> * <var:e> * <var:J> = <var:k> $ assuming $ <var:k> \in \mathbb{N} $ and satisfying the condition that $ <var:B> $ , $ <var:s> $ , $ <var:i> $ , $ <var:E> $ , $ <var:e> $ , $ <var:f> $ , $ <var:J> $ , $ <var:z> $ , and $ <var:W> \geq <nat:2> $ , we denote that $ <var:k> $ is a <def:nine-composite> integer with some $ <var:e> $ , $ <var:z> $ , $ <var:i> $ , $ <var:f> $ , $ <var:E> $ , $ <var:W> $ , $ <var:B> $ , $ <var:J> $ , $ <var:s> \in \mathbb{Z}^+ $ . Thus <nat:6652800> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} We justify <nat:6652800> is a <def:nine-composite> number considering $ <nat:7> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:10> $ , $ <nat:12> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:3> $ , $ <nat:11> $ are greater than <nat:1> and on account of $ <nat:11> \times <nat:6> \times <nat:4> \times <nat:10> \times <nat:7> \times <nat:2> \times <nat:12> \times <nat:5> \times <nat:3> = <nat:6652800> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:k> : nat ) := exists <var:e> <var:z> <var:i> <var:f> <var:E> <var:W> <var:B> <var:J> <var:s> : nat , ( <var:E> * <var:i> * <var:z> * <var:W> * <var:f> * <var:B> * <var:s> * <var:e> * <var:J> = <var:k> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:6652800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } exists <nat:3> . exists <nat:4> . exists <nat:10> . exists <nat:12> . exists <nat:2> . exists <nat:11> . exists <nat:5> . exists <nat:6> . exists <nat:7> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 