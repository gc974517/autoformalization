\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted that we get satisfying the condition that $ <var:O> $ , $ <var:A> $ , $ <var:d> $ , $ <var:k> $ , $ <var:Z> $ , $ <var:o> $ , $ <var:u> $ , $ <var:z> $ , $ <var:T> > <nat:1> $ satisfying the condition that assuming some number $ <var:a> $ , $ <var:a> = <var:A> * <var:Z> * <var:k> * <var:o> * <var:u> * <var:T> * <var:z> * <var:d> * <var:O> $ given some $ <var:O> $ , $ <var:u> $ , $ <var:d> $ , $ <var:A> $ , $ <var:T> $ , $ <var:k> $ , $ <var:z> $ , $ <var:Z> $ , $ <var:o> \in \mathbb{N} $ , then take as given that $ <var:a> $ is a <def:nine-composite> whole number . Therefore the natural number <nat:5702400> is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Notice $ <nat:10> $ , $ <nat:8> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:9> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:6> $ , and $ <nat:5> > <nat:1> $ . Also notice still $ <nat:11> \times <nat:2> \times <nat:6> \times <nat:4> \times <nat:3> \times <nat:9> \times <nat:5> \times <nat:8> \times <nat:10> = <nat:5702400> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:a> : nat ) := exists <var:O> <var:u> <var:d> <var:A> <var:T> <var:k> <var:z> <var:Z> <var:o> : nat , ( <var:O> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:d> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:Z> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:a> = <var:A> * <var:Z> * <var:k> * <var:o> * <var:u> * <var:T> * <var:z> * <var:d> * <var:O> ) . Theorem <genP:1> : <def:nine-composite> <nat:5702400> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } exists <nat:5> . exists <nat:3> . exists <nat:2> . exists <nat:9> . exists <nat:10> . exists <nat:8> . exists <nat:4> . exists <nat:6> . exists <nat:11> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 