\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using some $ <var:M> $ , $ <var:C> $ , $ <var:P> $ , $ <var:n> $ , $ <var:K> $ , and $ <var:O> $ the expression $ <var:P> * <nat:262> + <var:K> * <nat:274> + <nat:44> * <var:O> + <var:n> * <nat:210> + <var:C> * <nat:60> + <nat:351> + <nat:116> * <var:M> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know $ <nat:351> $ is guaranteed to be odd . We show our theorem holds . Observe that the number $ <nat:274> $ is known as even . Thus , the product $ <nat:274> \times <var:K> $ is even as well . See the whole number $ <nat:262> $ is an even number . Consequently , $ <nat:262> \times <var:P> $ will be even at the same time . We know that the product $ <nat:210> \times <var:n> $ is obviously an even element of $ \mathbb{N} $ from the fact the coefficient $ <nat:210> $ is known as an even integer . The product $ <nat:44> \times <var:O> $ is trivially an even number in $ \mathbb{N} $ . This fact holds since the coefficient $ <nat:44> $ is known as even . In addition to this , notice the term $ <nat:60> \times <var:C> $ is trivially even because the multiplication of an even number in $ \mathbb{Z}^+ $ with any integer is an even natural , and is true because the leading term $ <nat:60> $ is clearly even . The positive integer $ <nat:116> $ is guaranteed to be an even positive integer . In consequence , the product $ <nat:116> \times <var:M> $ will be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:C> <var:P> <var:n> <var:K> <var:O> : nat , Nat . odd ( <nat:262> * <var:P> + <nat:274> * <var:K> + <nat:44> * <var:O> + <nat:210> * <var:n> + <nat:60> * <var:C> + <nat:116> * <var:M> + <nat:351> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:351> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 