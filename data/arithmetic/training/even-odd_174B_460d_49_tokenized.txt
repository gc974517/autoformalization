\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:d> <nat:460> + <nat:49> + <nat:174> <var:B> $ will be odd using some $ <var:B> $ , and $ <var:d> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} It can be justified that the expression $ <nat:49> + <nat:460> \cdot <var:d> + <nat:174> \cdot <var:B> $ is odd employing the fact that the adding between even elements of $ \mathbb{Z}^+ $ collectively with an odd whole number is an odd element of $ \mathbb{N} $ . We apply the knowledge that the expression $ <nat:49> + <var:B> \times <nat:174> + <nat:460> \times <var:d> $ is known to be odd because $ <nat:460> \times <var:d> + <nat:174> \times <var:B> $ is known as even , because the addition between an even element of $ \mathbb{Z}^+ $ with an even integer is even . Remember the product $ <var:d> <nat:460> $ is guaranteed to be even . This is true because the multiplication between an even element of $ \mathbb{N} $ with a positive integer will be in itself an even positive integer . Additionally , we know that the product $ <var:B> <nat:174> $ is guaranteed to be an even positive integer from the knowledge the multiplication of an even whole number with an arbitrary whole number will be even . additionally because the product between an even number with a number is even the summation $ <var:B> <nat:174> + <var:d> <nat:460> $ will be obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:B> <var:d> : nat , Nat . odd ( <nat:460> * <var:d> + <nat:174> * <var:B> + <nat:49> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:460> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:174> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:d> + <nat:174> * <var:B> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 