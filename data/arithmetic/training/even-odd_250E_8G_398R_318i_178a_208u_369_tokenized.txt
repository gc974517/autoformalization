\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:398> <var:R> + <var:E> <nat:250> + <nat:369> + <var:u> <nat:208> + <nat:178> <var:a> + <nat:8> <var:G> + <var:i> <nat:318> $ is guaranteed to be odd . \end{theorem} \begin{proof} See the leading term $ <nat:250> $ is trivially even . So , the pair $ <var:E> <nat:250> $ must be even also . The pair $ <var:G> <nat:8> $ is trivially even . This holds because multiplying between an even element of $ \mathbb{Z}^+ $ with a positive integer must be even . This fact is proven as a consequence that the natural number $ <nat:8> $ is trivially trivially an even number . The number $ <nat:398> $ is clearly even . Therefore , the product $ <nat:398> <var:R> $ must be even as well . $ <var:i> <nat:318> $ is clearly even because the number $ <nat:318> $ is guaranteed to be even . In addition , $ <var:a> <nat:178> $ is guaranteed to be even . This fact holds from the knowledge the leading term $ <nat:178> $ is known as an even element of $ \mathbb{N} $ . Adding on , the term $ <var:u> <nat:208> $ is trivially an even positive integer from the fact the coefficient $ <nat:208> $ is obviously an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:R> <var:E> <var:u> <var:a> <var:G> <var:i> : nat , Nat . odd ( <nat:398> * <var:R> + <nat:250> * <var:E> + <nat:208> * <var:u> + <nat:178> * <var:a> + <nat:8> * <var:G> + <nat:318> * <var:i> + <nat:369> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:398> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:398> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:178> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:178> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 