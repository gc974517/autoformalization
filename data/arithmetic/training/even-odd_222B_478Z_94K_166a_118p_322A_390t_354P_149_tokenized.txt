\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using some unknowns $ <var:A> $ , $ <var:P> $ , $ <var:B> $ , $ <var:a> $ , $ <var:K> $ , $ <var:p> $ , $ <var:t> $ , and $ <var:Z> $ the formula $ <var:t> \cdot <nat:390> + <nat:94> \cdot <var:K> + <nat:149> + <var:p> \cdot <nat:118> + <var:Z> \cdot <nat:478> + <nat:354> \cdot <var:P> + <var:a> \cdot <nat:166> + <var:A> \cdot <nat:322> + <nat:222> \cdot <var:B> $ is guaranteed to be odd . \end{theorem} \begin{proof} We prove $ <nat:390> * <var:t> + <nat:94> * <var:K> + <nat:322> * <var:A> + <var:p> * <nat:118> + <nat:149> + <var:B> * <nat:222> + <var:Z> * <nat:478> + <nat:166> * <var:a> + <nat:354> * <var:P> $ must be odd . We apply that the summation $ <var:Z> <nat:478> + <nat:118> <var:p> + <var:P> <nat:354> + <var:K> <nat:94> + <nat:166> <var:a> + <var:t> <nat:390> + <var:A> <nat:322> + <nat:149> + <var:B> <nat:222> $ is guaranteed to be odd since $ <nat:222> * <var:B> + <nat:478> * <var:Z> + <var:K> * <nat:94> + <nat:166> * <var:a> + <var:p> * <nat:118> + <nat:322> * <var:A> + <var:t> * <nat:390> + <var:P> * <nat:354> $ is trivially even . The products $ <var:B> <nat:222> $ , $ <var:Z> <nat:478> $ , $ <var:K> <nat:94> $ , $ <nat:166> <var:a> $ , $ <nat:118> <var:p> $ , $ <var:A> <nat:322> $ , $ <nat:390> <var:t> $ , and likewise $ <nat:354> <var:P> $ are even naturals . This claim must be true by reason that multiplying of an even number in $ \mathbb{Z}^+ $ with some element of $ \mathbb{N} $ is guaranteed to be instrinsically an even number , which is proven because the coefficients $ <nat:222> $ , $ <nat:478> $ , $ <nat:94> $ , $ <nat:166> $ , $ <nat:118> $ , $ <nat:322> $ , $ <nat:390> $ , and $ <nat:354> $ are clearly even . The theorem holds because the multiplication between even natural numbers with a number must be clearly an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:P> <var:B> <var:a> <var:K> <var:p> <var:t> <var:Z> : nat , Nat . odd ( <nat:390> * <var:t> + <nat:94> * <var:K> + <nat:118> * <var:p> + <nat:478> * <var:Z> + <nat:354> * <var:P> + <nat:166> * <var:a> + <nat:322> * <var:A> + <nat:222> * <var:B> + <nat:149> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:322> = true ) . { auto . } assert ( <genH> : Nat . even <nat:390> = true ) . { auto . } assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:t> + <nat:94> * <var:K> + <nat:118> * <var:p> + <nat:478> * <var:Z> + <nat:354> * <var:P> + <nat:166> * <var:a> + <nat:322> * <var:A> + <nat:222> * <var:B> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 