\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:21> + <var:V> <nat:94> + <var:F> <nat:238> + <nat:38> <var:H> + <var:O> <nat:160> + <var:E> <nat:82> + <var:T> <nat:380> + <var:y> <nat:332> + <nat:462> <var:p> $ is guaranteed to be odd . \end{theorem} \begin{proof} The addition of even numbers in $ \mathbb{N} $ collectively and an odd element of $ \mathbb{Z}^+ $ must be odd . Notice that $ <nat:21> $ is clearly an odd number . Recall the coefficients $ <nat:94> $ , $ <nat:238> $ , $ <nat:38> $ , $ <nat:160> $ , $ <nat:82> $ , $ <nat:380> $ , $ <nat:332> $ , and $ <nat:462> $ are known to be even . For this reason , the terms $ <var:V> \cdot <nat:94> $ , $ <nat:238> \cdot <var:F> $ , $ <var:H> \cdot <nat:38> $ , $ <nat:160> \cdot <var:O> $ , $ <var:E> \cdot <nat:82> $ , $ <nat:380> \cdot <var:T> $ , $ <var:y> \cdot <nat:332> $ , additionally $ <var:p> \cdot <nat:462> $ must be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:F> <var:H> <var:O> <var:E> <var:T> <var:y> <var:p> : nat , Nat . odd ( <nat:94> * <var:V> + <nat:238> * <var:F> + <nat:38> * <var:H> + <nat:160> * <var:O> + <nat:82> * <var:E> + <nat:380> * <var:T> + <nat:332> * <var:y> + <nat:462> * <var:p> + <nat:21> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:21> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:238> = true ) . { auto . } assert ( <genH> : Nat . even <nat:38> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even <nat:380> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:38> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:380> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 