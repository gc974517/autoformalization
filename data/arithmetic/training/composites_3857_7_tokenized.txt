\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assuming that we get $ <var:s> = <var:u> * <var:c> * <var:U> * <var:x> * <var:W> * <var:d> * <var:i> $ for $ <var:s> \in \mathbb{N} $ and satisfying the condition that $ <var:d> $ , $ <var:u> $ , $ <var:c> $ , $ <var:W> $ , $ <var:U> $ , $ <var:x> $ , $ <var:i> \geq <nat:2> $ assuming some numbers $ <var:x> $ , $ <var:d> $ , $ <var:i> $ , $ <var:u> $ , $ <var:U> $ , $ <var:c> $ , $ <var:W> $ , let that $ <var:s> $ is a <def:seven-composite> natural number . \end{definition} \begin{theorem} <nat:83160> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember that a <def:seven-composite> natural number is the product of whole numbers $ <var:u> $ , $ <var:x> $ , $ <var:d> $ , $ <var:c> $ , $ <var:W> $ , $ <var:U> $ and $ <var:i> $ greater than <nat:1> . Take $ <var:i> = <nat:11> $ , $ <var:W> = <nat:3> $ , $ <var:x> = <nat:7> $ , $ <var:d> = <nat:2> $ , $ <var:c> = <nat:9> $ , $ <var:u> = <nat:4> $ , $ <var:U> = <nat:5> $ . We present <nat:83160> is <def:seven-composite> . Observe $ <nat:11> $ , $ <nat:5> $ , $ <nat:4> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:3> $ and $ <nat:2> > <nat:1> $ . This shows our result is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:s> : nat ) := exists <var:x> <var:d> <var:i> <var:u> <var:U> <var:c> <var:W> : nat , ( <var:s> = <var:u> * <var:c> * <var:U> * <var:x> * <var:W> * <var:d> * <var:i> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:83160> . Proof . unfold <def:seven-composite> . exists <nat:7> . exists <nat:2> . exists <nat:11> . exists <nat:4> . exists <nat:5> . exists <nat:9> . exists <nat:3> . assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 