\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using positive terms $ <var:Z> $ , $ <var:H> $ , $ <var:M> $ , and $ <var:T> $ $ <nat:411> + <var:H> <nat:488> + <var:Z> <nat:442> + <var:T> <nat:296> + <nat:144> <var:M> $ must be odd . \end{theorem} \begin{proof} We use the assumption the knowledge the summation $ <var:Z> \times <nat:442> + <nat:144> \times <var:M> + <var:T> \times <nat:296> + <var:H> \times <nat:488> $ is obviously even . Notice the pairs $ <nat:296> \times <var:T> $ and likewise $ <var:H> \times <nat:488> $ are obviously even . The term $ <nat:144> \times <var:M> $ is guaranteed to be an even positive integer as a consequence that taking the product of an even integer with an arbitrary number in $ \mathbb{Z}^+ $ is guaranteed to be an even integer . $ <nat:442> \times <var:Z> $ is obviously even . This claim must be true since the multiplication between an even number and any element of $ \mathbb{Z}^+ $ is guaranteed to be even . Observe $ <nat:411> $ is guaranteed to be an odd natural number . Recall the totaling between even positive integers collectively and an odd element of $ \mathbb{N} $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Z> <var:H> <var:M> <var:T> : nat , Nat . odd ( <nat:488> * <var:H> + <nat:442> * <var:Z> + <nat:296> * <var:T> + <nat:144> * <var:M> + <nat:411> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:296> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:H> + <nat:442> * <var:Z> + <nat:296> * <var:T> + <nat:144> * <var:M> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:411> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 