\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:v> \times <nat:98> + <nat:481> + <var:s> \times <nat:94> + <var:H> \times <nat:394> + <nat:214> \times <var:G> + <nat:402> \times <var:P> + <nat:138> \times <var:R> $ will be odd . \end{theorem} \begin{proof} Take note the pairs $ <var:R> <nat:138> $ and moreover $ <var:P> <nat:402> $ are obviously even . This claim must be true as a consequence that the product between an even whole number with some integer is guaranteed to be even . Likewise , recall the products $ <nat:214> <var:G> $ and also $ <nat:94> <var:s> $ are trivially even as a consequence that multiplying of an even whole number and an arbitrary natural number is an even natural number . Additionally , the term $ <var:H> <nat:394> $ is even . The pair $ <var:v> <nat:98> $ is known to be an even natural number . We show $ <nat:138> * <var:R> + <nat:94> * <var:s> + <nat:481> + <var:G> * <nat:214> + <nat:394> * <var:H> + <var:v> * <nat:98> + <nat:402> * <var:P> $ will be odd . Take note that $ <nat:481> $ is clearly odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:s> <var:H> <var:G> <var:P> <var:R> : nat , Nat . odd ( <nat:98> * <var:v> + <nat:94> * <var:s> + <nat:394> * <var:H> + <nat:214> * <var:G> + <nat:402> * <var:P> + <nat:138> * <var:R> + <nat:481> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:138> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:402> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:481> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 