\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:465> + <nat:390> \times <var:C> + <nat:366> \times <var:E> + <var:k> \times <nat:148> + <var:i> \times <nat:402> $ must be odd given natural terms $ <var:E> $ , $ <var:k> $ , $ <var:C> $ , and $ <var:i> $ . \end{theorem} \begin{proof} It can be demonstrated that the formula $ <var:k> \times <nat:148> + <var:i> \times <nat:402> + <nat:366> \times <var:E> + <var:C> \times <nat:390> + <nat:465> $ is odd . We make use the knowledge that the sum $ <nat:390> * <var:C> + <nat:148> * <var:k> + <nat:402> * <var:i> + <var:E> * <nat:366> $ is known to be even . See the addition of an even natural number with an even element of $ \mathbb{N} $ will be an even natural number . See that the product $ <nat:366> <var:E> $ is known to be an even positive integer . In addition , remember the terms $ <var:i> <nat:402> $ and $ <var:C> <nat:390> $ are obviously even . Take note that the product $ <nat:148> <var:k> $ is clearly an even number . The adding between an even integer with an odd positive integer is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:k> <var:C> <var:i> : nat , Nat . odd ( <nat:390> * <var:C> + <nat:366> * <var:E> + <nat:148> * <var:k> + <nat:402> * <var:i> + <nat:465> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:366> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:402> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:C> + <nat:366> * <var:E> + <nat:148> * <var:k> + <nat:402> * <var:i> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 