\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We claim that $ <var:u> $ is a <def:nine-composite> integer whenever with some $ <var:w> $ , $ <var:G> $ , $ <var:L> $ , $ <var:P> $ , $ <var:O> $ , $ <var:R> $ , $ <var:S> $ , $ <var:D> $ , $ <var:k> $ we have $ <var:D> $ , $ <var:P> $ , $ <var:k> $ , $ <var:L> $ , $ <var:R> $ , $ <var:w> $ , $ <var:G> $ , $ <var:O> $ , $ <var:S> \geq <nat:2> $ as well as using some natural number $ <var:u> $ , $ <var:w> \times <var:S> \times <var:k> \times <var:L> \times <var:P> \times <var:R> \times <var:D> \times <var:O> \times <var:G> = <var:u> $ . Then the whole number <nat:8709120> is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Let $ <var:w> = <nat:9> $ , $ <var:P> = <nat:10> $ , $ <var:D> = <nat:3> $ , $ <var:R> = <nat:4> $ , $ <var:O> = <nat:6> $ , $ <var:k> = <nat:12> $ , $ <var:S> = <nat:7> $ , $ <var:L> = <nat:8> $ and $ <var:G> = <nat:2> $ . We prove <nat:8709120> is a <def:nine-composite> positive integer by reason of In view of $ <var:D> = <nat:3> $ , $ <var:k> = <nat:12> $ , $ <var:L> = <nat:8> $ , $ <var:R> = <nat:4> $ , $ <var:P> = <nat:10> $ , $ <var:O> = <nat:6> $ , $ <var:S> = <nat:7> $ , $ <var:G> = <nat:2> $ , and $ <var:w> = <nat:9> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:u> : nat ) := exists <var:w> <var:G> <var:L> <var:P> <var:O> <var:R> <var:S> <var:D> <var:k> : nat , ( <var:D> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:w> * <var:S> * <var:k> * <var:L> * <var:P> * <var:R> * <var:D> * <var:O> * <var:G> = <var:u> ) . Theorem <genP:1> : <def:nine-composite> <nat:8709120> . Proof . unfold <def:nine-composite> . exists <nat:9> . exists <nat:2> . exists <nat:8> . exists <nat:10> . exists <nat:6> . exists <nat:4> . exists <nat:7> . exists <nat:3> . exists <nat:12> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 