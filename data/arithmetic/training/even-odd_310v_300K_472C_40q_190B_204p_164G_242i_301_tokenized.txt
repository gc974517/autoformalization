\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:q> \cdot <nat:40> + <nat:310> \cdot <var:v> + <nat:204> \cdot <var:p> + <nat:300> \cdot <var:K> + <nat:242> \cdot <var:i> + <nat:301> + <nat:472> \cdot <var:C> + <nat:164> \cdot <var:G> + <nat:190> \cdot <var:B> $ will be odd . \end{theorem} \begin{proof} We verify the formula $ <var:v> <nat:310> + <nat:300> <var:K> + <var:C> <nat:472> + <var:q> <nat:40> + <nat:190> <var:B> + <nat:204> <var:p> + <nat:164> <var:G> + <nat:242> <var:i> $ is obviously even . The coefficients $ <nat:310> $ , $ <nat:300> $ , $ <nat:472> $ , $ <nat:40> $ , $ <nat:190> $ , $ <nat:204> $ , $ <nat:164> $ , additionally $ <nat:242> $ are guaranteed to be even . Then , the products $ <var:v> * <nat:310> $ , $ <nat:300> * <var:K> $ , $ <nat:472> * <var:C> $ , $ <var:q> * <nat:40> $ , $ <nat:190> * <var:B> $ , $ <nat:204> * <var:p> $ , $ <var:G> * <nat:164> $ , as well as $ <nat:242> * <var:i> $ is even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:v> <var:p> <var:K> <var:i> <var:C> <var:G> <var:B> : nat , Nat . odd ( <nat:40> * <var:q> + <nat:310> * <var:v> + <nat:204> * <var:p> + <nat:300> * <var:K> + <nat:242> * <var:i> + <nat:472> * <var:C> + <nat:164> * <var:G> + <nat:190> * <var:B> + <nat:301> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:472> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:310> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:q> + <nat:310> * <var:v> + <nat:204> * <var:p> + <nat:300> * <var:K> + <nat:242> * <var:i> + <nat:472> * <var:C> + <nat:164> * <var:G> + <nat:190> * <var:B> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 