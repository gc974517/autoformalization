\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:o> $ , $ <var:g> $ , $ <var:R> $ , $ <var:t> $ , $ <var:v> $ , $ <var:L> $ , $ <var:m> $ , $ <var:H> $ , $ <var:N> $ as integers more than or equivalent to <nat:2> . Define that $ <var:n> \in \mathbb{N} $ will be called a <def:nine-composite> whole number when $ <var:v> * <var:R> * <var:N> * <var:m> * <var:L> * <var:o> * <var:H> * <var:t> * <var:g> = <var:n> $ . Therefore $ <nat:59875200> = <var:n> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Assume $ <var:t> = <nat:6> $ , $ <var:o> = <nat:3> $ , $ <var:m> = <nat:7> $ , $ <var:L> = <nat:10> $ , $ <var:H> = <nat:5> $ , $ <var:N> = <nat:8> $ , $ <var:R> = <nat:12> $ , $ <var:v> = <nat:11> $ , $ <var:g> = <nat:9> $ . Similarly note $ <var:L> = <nat:10> $ , $ <var:H> = <nat:5> $ , $ <var:R> = <nat:12> $ , $ <var:v> = <nat:11> $ , $ <var:o> = <nat:3> $ , $ <var:N> = <nat:8> $ , $ <var:t> = <nat:6> $ , $ <var:m> = <nat:7> $ and $ <var:g> = <nat:9> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:n> : nat ) := exists <var:o> <var:g> <var:R> <var:t> <var:v> <var:L> <var:m> <var:H> <var:N> : nat , ( <var:o> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:v> * <var:R> * <var:N> * <var:m> * <var:L> * <var:o> * <var:H> * <var:t> * <var:g> = <var:n> ) . Theorem <genP:1> : <def:nine-composite> <nat:59875200> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:9> . exists <nat:12> . exists <nat:6> . exists <nat:11> . exists <nat:10> . exists <nat:7> . exists <nat:5> . exists <nat:8> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 