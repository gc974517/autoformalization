\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming positive terms $ <var:x> $ , $ <var:t> $ , $ <var:G> $ , $ <var:V> $ , $ <var:D> $ , and $ <var:k> $ the formula $ <nat:254> * <var:D> + <var:V> * <nat:328> + <var:G> * <nat:104> + <var:t> * <nat:58> + <var:k> * <nat:198> + <var:x> * <nat:250> + <nat:343> $ is odd . \end{theorem} \begin{proof} The product $ <var:G> \cdot <nat:104> $ is known as an even number in $ \mathbb{Z}^+ $ . This holds as a consequence that the multiplication between an even whole number and some whole number is even . Notice that the product $ <var:t> \cdot <nat:58> $ is clearly even since multiplying between an even natural number with any whole number is guaranteed to be an even number in $ \mathbb{Z}^+ $ . On top of this , notice the pairs $ <nat:254> \cdot <var:D> $ , $ <var:k> \cdot <nat:198> $ , additionally $ <nat:328> \cdot <var:V> $ are obviously even as a consequence that taking the product between an even positive integer with a natural number is guaranteed to be even . What's more , see the term $ <nat:250> \cdot <var:x> $ is trivially even . This claim is true from the fact multiplying between an even positive integer and an arbitrary element of $ \mathbb{Z}^+ $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:t> <var:G> <var:V> <var:D> <var:k> : nat , Nat . odd ( <nat:254> * <var:D> + <nat:328> * <var:V> + <nat:104> * <var:G> + <nat:58> * <var:t> + <nat:198> * <var:k> + <nat:250> * <var:x> + <nat:343> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:104> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:328> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 