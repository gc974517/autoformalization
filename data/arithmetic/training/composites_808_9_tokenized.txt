\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted that there exist positive integers $ <var:u> $ , $ <var:a> $ , $ <var:Q> $ , $ <var:L> $ , $ <var:r> $ , $ <var:E> $ , $ <var:J> $ , $ <var:S> $ , $ <var:Y> $ then say that some natural number $ <var:i> $ will be named a <def:nine-composite> integer if $ <var:Y> \times <var:L> \times <var:J> \times <var:r> \times <var:E> \times <var:u> \times <var:Q> \times <var:a> \times <var:S> = <var:i> $ as well as factors are more than <nat:1> . Hence $ <nat:10644480> = <var:i> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Notice that $ <nat:12> $ , $ <nat:8> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:4> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:7> $ and $ <nat:3> > <nat:1> $ . Also note that likewise $ <nat:10644480> = <var:Y> * <var:a> * <var:E> * <var:Q> * <var:L> * <var:r> * <var:S> * <var:J> * <var:u> = <nat:10> * <nat:6> * <nat:8> * <nat:2> * <nat:7> * <nat:3> * <nat:4> * <nat:11> * <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:i> : nat ) := exists <var:u> <var:a> <var:Q> <var:L> <var:r> <var:E> <var:J> <var:S> <var:Y> : nat , ( <var:Y> * <var:L> * <var:J> * <var:r> * <var:E> * <var:u> * <var:Q> * <var:a> * <var:S> = <var:i> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:10644480> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } exists <nat:12> . exists <nat:6> . exists <nat:2> . exists <nat:7> . exists <nat:3> . exists <nat:8> . exists <nat:11> . exists <nat:4> . exists <nat:10> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 