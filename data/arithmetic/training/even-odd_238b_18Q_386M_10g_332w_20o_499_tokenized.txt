\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For every variables $ <var:g> $ , $ <var:o> $ , $ <var:M> $ , $ <var:w> $ , $ <var:b> $ , and $ <var:Q> $ the formula $ <var:Q> \times <nat:18> + <var:w> \times <nat:332> + <nat:499> + <nat:238> \times <var:b> + <nat:386> \times <var:M> + <var:o> \times <nat:20> + <nat:10> \times <var:g> $ is guaranteed to be odd . \end{theorem} \begin{proof} We utilize $ <nat:499> + <nat:332> <var:w> + <nat:20> <var:o> + <var:b> <nat:238> + <var:g> <nat:10> + <var:Q> <nat:18> + <var:M> <nat:386> $ is guaranteed to be odd from the knowledge $ <nat:20> \times <var:o> + <var:Q> \times <nat:18> + <nat:386> \times <var:M> + <var:b> \times <nat:238> + <var:w> \times <nat:332> + <var:g> \times <nat:10> $ is even . See the natural number $ <nat:332> $ is trivially an even number in $ \mathbb{Z}^+ $ . Then , $ <var:w> \times <nat:332> $ will be even in addition . What's more , notice $ <nat:18> \times <var:Q> $ is known as even since the product between an even positive integer and an arbitrary element of $ \mathbb{Z}^+ $ is guaranteed to be itself an even natural number , and is proven from the fact the natural number $ <nat:18> $ is obviously even . The whole number $ <nat:238> $ is guaranteed to be even . As a consequence , the product $ <var:b> \times <nat:238> $ is guaranteed to be even as well . The term $ <var:o> \times <nat:20> $ is known as an even integer . This fact must be true from the knowledge multiplying between an even element of $ \mathbb{N} $ with a natural will be even . This fact is true because the positive integer $ <nat:20> $ is obviously an even integer . Building on , we know that the product $ <nat:10> \times <var:g> $ is an even integer since the coefficient $ <nat:10> $ is clearly trivially an even element of $ \mathbb{N} $ . Take note that the term $ <var:M> \times <nat:386> $ is known as even as a consequence that the whole number $ <nat:386> $ is obviously an even element of $ \mathbb{N} $ . The expression $ <var:b> \times <nat:238> + <nat:18> \times <var:Q> + <nat:386> \times <var:M> + <var:g> \times <nat:10> + <var:w> \times <nat:332> + <nat:20> \times <var:o> $ will be even from the knowledge taking the product of an even positive integer with an arbitrary number in $ \mathbb{N} $ will be even . The summing of an even natural number and an odd element of $ \mathbb{N} $ will be in itself an odd number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:o> <var:M> <var:w> <var:b> <var:Q> : nat , Nat . odd ( <nat:18> * <var:Q> + <nat:332> * <var:w> + <nat:238> * <var:b> + <nat:386> * <var:M> + <nat:20> * <var:o> + <nat:10> * <var:g> + <nat:499> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:238> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:10> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:Q> + <nat:332> * <var:w> + <nat:238> * <var:b> + <nat:386> * <var:M> + <nat:20> * <var:o> + <nat:10> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 