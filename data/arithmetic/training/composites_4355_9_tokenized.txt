\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Define that $ <var:k> $ is a <def:nine-composite> natural number with the condition that there exist $ <var:E> $ , $ <var:z> $ , $ <var:B> $ , $ <var:H> $ , $ <var:X> $ , $ <var:u> $ , $ <var:a> $ , $ <var:x> $ , $ <var:R> \in \mathbb{N} $ satisfying the condition that such that $ <var:u> $ , $ <var:B> $ , $ <var:z> $ , $ <var:x> $ , $ <var:X> $ , $ <var:E> $ , $ <var:H> $ , $ <var:R> $ and $ <var:a> > <nat:1> $ plus with some $ <var:k> $ , $ <var:k> = <var:x> * <var:E> * <var:a> * <var:u> * <var:X> * <var:R> * <var:z> * <var:B> * <var:H> $ . \end{definition} \begin{theorem} <nat:4838400> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Note that $ <nat:4838400> = <nat:6> \cdot <nat:10> \cdot <nat:12> \cdot <nat:4> \cdot <nat:5> \cdot <nat:2> \cdot <nat:3> \cdot <nat:7> \cdot <nat:8> $ . Also note that $ <nat:2> $ , $ <nat:7> $ , $ <nat:8> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:3> $ , $ <nat:6> $ , $ <nat:10> $ , $ <nat:5> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:k> : nat ) := exists <var:E> <var:z> <var:B> <var:H> <var:X> <var:u> <var:a> <var:x> <var:R> : nat , ( <var:u> > <nat:1> ) /\ ( <var:B> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:k> = <var:x> * <var:E> * <var:a> * <var:u> * <var:X> * <var:R> * <var:z> * <var:B> * <var:H> ) . Theorem <genP:1> : <def:nine-composite> <nat:4838400> . Proof . unfold <def:nine-composite> . exists <nat:12> . exists <nat:10> . exists <nat:2> . exists <nat:5> . exists <nat:7> . exists <nat:4> . exists <nat:3> . exists <nat:6> . exists <nat:8> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 