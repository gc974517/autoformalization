\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume that $ <var:Q> $ is a <def:seven-composite> number whenever using some integers $ <var:R> $ , $ <var:r> $ , $ <var:c> $ , $ <var:m> $ , $ <var:n> $ , $ <var:s> $ , $ <var:P> $ we get $ <var:Q> = <var:c> * <var:R> * <var:P> * <var:s> * <var:m> * <var:r> * <var:n> $ with $ <var:Q> \in \mathbb{N} $ and where $ <var:r> $ , $ <var:R> $ , $ <var:P> $ , $ <var:c> $ , $ <var:m> $ , $ <var:s> $ , $ <var:n> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:712800> = <var:Q> $ is a <def:seven-composite> number . \end{theorem} \begin{proof} Recall <nat:712800> is a <def:seven-composite> natural number when it is the multiplication between numbers $ <var:m> $ , $ <var:n> $ , $ <var:s> $ , $ <var:r> $ , $ <var:R> $ , $ <var:c> $ , and $ <var:P> $ larger than <nat:1> . Assume $ <var:r> = <nat:11> $ , $ <var:m> = <nat:3> $ , $ <var:R> = <nat:9> $ , $ <var:n> = <nat:10> $ , $ <var:P> = <nat:5> $ , $ <var:c> = <nat:8> $ , and $ <var:s> = <nat:6> $ . What's more notice $ <nat:9> $ , $ <nat:8> $ , $ <nat:10> $ , $ <nat:3> $ , $ <nat:6> $ , $ <nat:5> $ , $ <nat:11> $ are larger than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Q> : nat ) := exists <var:R> <var:r> <var:c> <var:m> <var:n> <var:s> <var:P> : nat , ( <var:Q> = <var:c> * <var:R> * <var:P> * <var:s> * <var:m> * <var:r> * <var:n> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:712800> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:11> . exists <nat:8> . exists <nat:3> . exists <nat:10> . exists <nat:6> . exists <nat:5> . assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 