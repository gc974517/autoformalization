\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We define that under the condition there are positive integers $ <var:G> $ , $ <var:o> $ , $ <var:r> $ , $ <var:L> $ , $ <var:C> $ where $ <var:o> $ , $ <var:L> $ , $ <var:r> $ , $ <var:C> $ and $ <var:G> > <nat:1> $ . We assume that $ <var:N> \in \mathbb{N} $ will be considered as a <def:five-composite> integer when $ <var:o> \times <var:C> \times <var:r> \times <var:L> \times <var:G> = <var:N> $ . Hence the positive integer <nat:8064> is a <def:five-composite> natural number . \end{theorem} \begin{proof} Assume $ <var:L> = <nat:12> $ , $ <var:G> = <nat:8> $ , $ <var:C> = <nat:4> $ , $ <var:r> = <nat:3> $ , and $ <var:o> = <nat:7> $ . Observe $ <nat:12> $ , $ <nat:8> $ , $ <nat:7> $ , $ <nat:3> $ , and $ <nat:4> $ are more than <nat:1> . Furthermore observe that too $ <nat:8064> = <nat:12> \times <nat:3> \times <nat:7> \times <nat:8> \times <nat:4> = <var:L> \times <var:r> \times <var:o> \times <var:G> \times <var:C> $ . Because of this , $ <var:C> $ , $ <var:L> $ , $ <var:o> $ , $ <var:r> $ and $ <var:G> > <nat:1> $ and $ <var:r> \times <var:o> \times <var:G> \times <var:L> \times <var:C> = <nat:8064> $ has been verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:N> : nat ) := exists <var:G> <var:o> <var:r> <var:L> <var:C> : nat , ( <var:o> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:o> * <var:C> * <var:r> * <var:L> * <var:G> = <var:N> ) . Theorem <genP:1> : <def:five-composite> <nat:8064> . Proof . unfold <def:five-composite> . exists <nat:8> . exists <nat:7> . exists <nat:3> . exists <nat:12> . exists <nat:4> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 