\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Under the condition there are positive integers $ <var:x> $ , $ <var:g> $ , $ <var:D> $ , $ <var:n> $ , $ <var:b> $ , $ <var:A> $ , $ <var:X> $ satisfying the condition that $ <var:D> $ , $ <var:n> $ , $ <var:A> $ , $ <var:b> $ , $ <var:X> $ , $ <var:g> $ , and $ <var:x> \geq <nat:2> $ . Say that $ <var:m> \in \mathbb{Z}^+ $ is a <def:seven-composite> positive integer assuming $ <var:X> \cdot <var:b> \cdot <var:n> \cdot <var:A> \cdot <var:x> \cdot <var:g> \cdot <var:D> = <var:m> $ . For this reason $ <var:m> = <nat:133056> $ is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Take $ <var:A> = <nat:2> $ , $ <var:g> = <nat:11> $ , $ <var:b> = <nat:7> $ , $ <var:X> = <nat:9> $ , $ <var:n> = <nat:8> $ , $ <var:x> = <nat:3> $ , $ <var:D> = <nat:4> $ . We justify the belief holds on account of $ <nat:133056> = <nat:3> \cdot <nat:2> \cdot <nat:7> \cdot <nat:9> \cdot <nat:8> \cdot <nat:11> \cdot <nat:4> $ as well as as $ <nat:3> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:9> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:2> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:m> : nat ) := exists <var:x> <var:g> <var:D> <var:n> <var:b> <var:A> <var:X> : nat , ( <var:D> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:X> * <var:b> * <var:n> * <var:A> * <var:x> * <var:g> * <var:D> = <var:m> ) . Theorem <genP:1> : <def:seven-composite> <nat:133056> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:11> . exists <nat:4> . exists <nat:8> . exists <nat:7> . exists <nat:2> . exists <nat:9> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 