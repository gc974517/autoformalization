\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:m> \times <nat:440> + <nat:296> \times <var:f> + <nat:112> \times <var:F> + <var:l> \times <nat:182> + <nat:62> \times <var:W> + <nat:372> \times <var:d> + <nat:170> \times <var:a> + <nat:249> + <var:T> \times <nat:450> $ must be odd . \end{theorem} \begin{proof} The whole numbers $ <nat:440> $ , $ <nat:372> $ , $ <nat:170> $ , $ <nat:296> $ , $ <nat:182> $ , in addition to $ <nat:450> $ must be even integers . Hence , the terms $ <var:m> \cdot <nat:440> $ , $ <nat:372> \cdot <var:d> $ , $ <var:a> \cdot <nat:170> $ , $ <var:f> \cdot <nat:296> $ , $ <var:l> \cdot <nat:182> $ , and likewise $ <nat:450> \cdot <var:T> $ is even also . Furthermore , the product $ <var:W> \cdot <nat:62> $ is obviously even from the fact multiplying between an even number in $ \mathbb{N} $ with some number in $ \mathbb{N} $ must be an even number additionally the natural number $ <nat:62> $ is obviously even . Remember that the leading term $ <nat:112> $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ . Therefore , the term $ <nat:112> \cdot <var:F> $ must be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:f> <var:F> <var:l> <var:W> <var:d> <var:a> <var:T> : nat , Nat . odd ( <nat:440> * <var:m> + <nat:296> * <var:f> + <nat:112> * <var:F> + <nat:182> * <var:l> + <nat:62> * <var:W> + <nat:372> * <var:d> + <nat:170> * <var:a> + <nat:450> * <var:T> + <nat:249> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } assert ( <genH> : Nat . even <nat:372> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:62> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:62> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:112> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:112> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 