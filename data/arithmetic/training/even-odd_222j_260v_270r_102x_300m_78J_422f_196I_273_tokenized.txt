\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given all $ <var:I> $ , $ <var:m> $ , $ <var:J> $ , $ <var:j> $ , $ <var:r> $ , $ <var:v> $ , $ <var:f> $ , and $ <var:x> \in \mathbb{Z}^+ $ the expression $ <nat:273> + <nat:222> * <var:j> + <var:v> * <nat:260> + <var:r> * <nat:270> + <nat:102> * <var:x> + <var:m> * <nat:300> + <var:J> * <nat:78> + <nat:422> * <var:f> + <var:I> * <nat:196> $ must be odd . \end{theorem} \begin{proof} Furthermore , the terms $ <nat:222> \cdot <var:j> $ , $ <var:v> \cdot <nat:260> $ , $ <nat:270> \cdot <var:r> $ , $ <var:x> \cdot <nat:102> $ , $ <var:m> \cdot <nat:300> $ , $ <var:J> \cdot <nat:78> $ , $ <nat:422> \cdot <var:f> $ , and moreover $ <nat:196> \cdot <var:I> $ are trivially even numbers in $ \mathbb{N} $ by reason that the leading terms $ <nat:222> $ , $ <nat:260> $ , $ <nat:270> $ , $ <nat:102> $ , $ <nat:300> $ , $ <nat:78> $ , $ <nat:422> $ , and $ <nat:196> $ are trivially even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:m> <var:J> <var:j> <var:r> <var:v> <var:f> <var:x> : nat , Nat . odd ( <nat:222> * <var:j> + <nat:260> * <var:v> + <nat:270> * <var:r> + <nat:102> * <var:x> + <nat:300> * <var:m> + <nat:78> * <var:J> + <nat:422> * <var:f> + <nat:196> * <var:I> + <nat:273> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:422> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:422> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 