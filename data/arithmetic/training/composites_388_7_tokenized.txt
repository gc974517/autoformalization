\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Granted there exist positive integers $ <var:y> $ , $ <var:j> $ , $ <var:M> $ , $ <var:r> $ , $ <var:R> $ , $ <var:Q> $ , $ <var:s> $ then say that $ <var:c> \in \mathbb{N} $ will be considered as a <def:seven-composite> integer assuming $ <var:M> \cdot <var:r> \cdot <var:y> \cdot <var:s> \cdot <var:Q> \cdot <var:R> \cdot <var:j> = <var:c> $ as well as terms are greater than or equal to <nat:2> . \end{definition} \begin{theorem} The number <nat:285120> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember that <nat:285120> is a <def:seven-composite> natural number granted that it is the product between numbers $ <var:R> $ , $ <var:M> $ , $ <var:j> $ , $ <var:Q> $ , $ <var:r> $ , $ <var:y> $ , and $ <var:s> $ larger than or equivalent to <nat:2> . We verify <nat:285120> is a <def:seven-composite> number . Notice $ <nat:10> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:3> $ , and $ <nat:2> \geq <nat:2> $ . Similarly note that as well $ <nat:11> \cdot <nat:9> \cdot <nat:2> \cdot <nat:4> \cdot <nat:3> \cdot <nat:10> \cdot <nat:12> = <var:r> \cdot <var:M> \cdot <var:j> \cdot <var:s> \cdot <var:y> \cdot <var:Q> \cdot <var:R> = <nat:285120> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:c> : nat ) := exists <var:y> <var:j> <var:M> <var:r> <var:R> <var:Q> <var:s> : nat , ( <var:M> * <var:r> * <var:y> * <var:s> * <var:Q> * <var:R> * <var:j> = <var:c> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:285120> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } exists <nat:3> . exists <nat:2> . exists <nat:9> . exists <nat:11> . exists <nat:12> . exists <nat:10> . exists <nat:4> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 