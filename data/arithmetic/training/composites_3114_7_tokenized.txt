\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} If there are $ <var:p> $ , $ <var:f> $ , $ <var:Q> $ , $ <var:j> $ , $ <var:d> $ , $ <var:w> $ , $ <var:o> \in \mathbb{Z}^+ $ so that $ <var:p> $ , $ <var:o> $ , $ <var:j> $ , $ <var:d> $ , $ <var:f> $ , $ <var:Q> $ , $ <var:w> \geq <nat:2> $ . Take that some whole number $ <var:i> $ is called a <def:seven-composite> whole number given $ <var:i> = <var:d> * <var:w> * <var:Q> * <var:o> * <var:p> * <var:f> * <var:j> $ . So the positive integer <nat:369600> is a <def:seven-composite> number . \end{theorem} \begin{proof} Recall <nat:369600> is a <def:seven-composite> whole number given <nat:369600> is the multiplication between positive integers $ <var:j> $ , $ <var:d> $ , $ <var:Q> $ , $ <var:f> $ , $ <var:w> $ , $ <var:p> $ , and $ <var:o> $ more than or equal to <nat:2> . Let $ <var:o> = <nat:11> $ , $ <var:p> = <nat:12> $ , $ <var:Q> = <nat:4> $ , $ <var:f> = <nat:5> $ , $ <var:j> = <nat:10> $ , $ <var:d> = <nat:2> $ , and $ <var:w> = <nat:7> $ . Also notice that $ <nat:4> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:11> $ , $ <nat:12> $ are more than or equivalent to <nat:2> . This implies our result is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:i> : nat ) := exists <var:p> <var:f> <var:Q> <var:j> <var:d> <var:w> <var:o> : nat , ( <var:p> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:i> = <var:d> * <var:w> * <var:Q> * <var:o> * <var:p> * <var:f> * <var:j> ) . Theorem <genP:1> : <def:seven-composite> <nat:369600> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:5> . exists <nat:4> . exists <nat:10> . exists <nat:2> . exists <nat:7> . exists <nat:11> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 