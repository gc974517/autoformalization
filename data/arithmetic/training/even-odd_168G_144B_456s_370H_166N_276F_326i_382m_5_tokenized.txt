\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking all unknowns $ <var:F> $ , $ <var:G> $ , $ <var:H> $ , $ <var:N> $ , $ <var:i> $ , $ <var:B> $ , $ <var:s> $ , and $ <var:m> $ $ <nat:5> + <nat:168> <var:G> + <nat:144> <var:B> + <nat:276> <var:F> + <nat:382> <var:m> + <var:i> <nat:326> + <var:H> <nat:370> + <nat:456> <var:s> + <var:N> <nat:166> $ must be odd . \end{theorem} \begin{proof} Our main result holds since $ <var:s> <nat:456> + <nat:276> <var:F> + <var:N> <nat:166> + <nat:326> <var:i> + <var:m> <nat:382> + <var:B> <nat:144> + <var:G> <nat:168> + <var:H> <nat:370> $ is trivially even , because the addition between even numbers and an even element of $ \mathbb{Z}^+ $ is guaranteed to be even . Notice the natural numbers $ <nat:456> $ , $ <nat:276> $ , $ <nat:166> $ , $ <nat:326> $ , $ <nat:382> $ , $ <nat:144> $ , $ <nat:168> $ , additionally $ <nat:370> $ are known as even . Then , the terms $ <nat:456> * <var:s> $ , $ <var:F> * <nat:276> $ , $ <nat:166> * <var:N> $ , $ <var:i> * <nat:326> $ , $ <nat:382> * <var:m> $ , $ <var:B> * <nat:144> $ , $ <nat:168> * <var:G> $ , and $ <nat:370> * <var:H> $ must be even also . and from the fact the multiplication of an even positive integer with a natural number must be even . Notice that $ <nat:5> $ is known as odd . It can be checked that the expression $ <var:G> \times <nat:168> + <nat:144> \times <var:B> + <nat:456> \times <var:s> + <var:H> \times <nat:370> + <nat:166> \times <var:N> + <nat:5> + <var:F> \times <nat:276> + <var:i> \times <nat:326> + <var:m> \times <nat:382> $ will be odd making use of the understanding the summing between an even element of $ \mathbb{Z}^+ $ and an odd integer is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:G> <var:H> <var:N> <var:i> <var:B> <var:s> <var:m> : nat , Nat . odd ( <nat:168> * <var:G> + <nat:144> * <var:B> + <nat:276> * <var:F> + <nat:382> * <var:m> + <nat:326> * <var:i> + <nat:370> * <var:H> + <nat:456> * <var:s> + <nat:166> * <var:N> + <nat:5> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:G> + <nat:144> * <var:B> + <nat:276> * <var:F> + <nat:382> * <var:m> + <nat:326> * <var:i> + <nat:370> * <var:H> + <nat:456> * <var:s> + <nat:166> * <var:N> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:5> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 