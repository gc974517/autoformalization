\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:F> \times <nat:392> + <nat:58> \times <var:n> + <var:s> \times <nat:150> + <nat:260> \times <var:H> + <var:W> \times <nat:202> + <nat:182> \times <var:p> + <var:k> \times <nat:230> + <var:Q> \times <nat:68> + <nat:52> $ will be even . \end{theorem} \begin{proof} The product $ <var:Q> * <nat:68> $ is clearly an even element of $ \mathbb{N} $ since the positive integer $ <nat:68> $ is known to be an even element of $ \mathbb{N} $ . Observe that the pair $ <var:W> * <nat:202> $ is guaranteed to be even from the knowledge multiplying of an even element of $ \mathbb{Z}^+ $ and some positive integer will be even and the number $ <nat:202> $ is known as an even element of $ \mathbb{Z}^+ $ . In addition to this , the natural number $ <nat:58> $ is trivially even . Thus , the product $ <var:n> * <nat:58> $ will be even also . Further , recall that the leading term $ <nat:392> $ is clearly even . Consequently , the product $ <var:F> * <nat:392> $ is guaranteed to be even too . We know that $ <nat:182> * <var:p> $ is clearly an even integer from the knowledge the number $ <nat:182> $ is clearly an even number . Building on , notice the integer $ <nat:260> $ is clearly an even element of $ \mathbb{Z}^+ $ . As a consequence , $ <var:H> * <nat:260> $ is guaranteed to be even also . The pair $ <var:s> * <nat:150> $ is guaranteed to be even . This fact is true by reason that taking the product between an even number in $ \mathbb{N} $ and a positive integer is an even number . This is proven from the fact the whole number $ <nat:150> $ is known as by definition an even whole number . On top of this , the product $ <var:k> * <nat:230> $ is known to be even . This must be true from the knowledge multiplying between an even whole number with some number in $ \mathbb{Z}^+ $ is an even natural and likewise the leading term $ <nat:230> $ is known as an even number in $ \mathbb{Z}^+ $ . We prove the summation $ <nat:392> \cdot <var:F> + <nat:202> \cdot <var:W> + <nat:68> \cdot <var:Q> + <nat:182> \cdot <var:p> + <nat:230> \cdot <var:k> + <nat:58> \cdot <var:n> + <var:s> \cdot <nat:150> + <nat:260> \cdot <var:H> + <nat:52> $ is even . We know $ <nat:52> $ is clearly an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:n> <var:s> <var:H> <var:W> <var:p> <var:k> <var:Q> : nat , Nat . even ( <nat:392> * <var:F> + <nat:58> * <var:n> + <nat:150> * <var:s> + <nat:260> * <var:H> + <nat:202> * <var:W> + <nat:182> * <var:p> + <nat:230> * <var:k> + <nat:68> * <var:Q> + <nat:52> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:58> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:392> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 