\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:382> * <var:n> + <nat:26> * <var:w> + <nat:372> * <var:R> + <var:O> * <nat:6> + <var:C> * <nat:158> + <var:c> * <nat:192> + <nat:361> $ is guaranteed to be odd . \end{theorem} \begin{proof} We show this proposition must be true . Remember $ <nat:361> $ is clearly an odd element of $ \mathbb{N} $ . Our result must be true because $ <var:w> * <nat:26> + <nat:192> * <var:c> + <var:C> * <nat:158> + <var:n> * <nat:382> + <var:O> * <nat:6> + <var:R> * <nat:372> $ is even . Recall the positive integers $ <nat:26> $ , $ <nat:192> $ , $ <nat:158> $ , $ <nat:382> $ , $ <nat:6> $ , $ <nat:372> $ , are guaranteed to be even numbers in $ \mathbb{N} $ . In consequence , the products $ <var:w> \times <nat:26> $ , $ <var:c> \times <nat:192> $ , $ <nat:158> \times <var:C> $ , $ <nat:382> \times <var:n> $ , $ <nat:6> \times <var:O> $ , $ <var:R> \times <nat:372> $ , is guaranteed to be even at the same time . By reason that the summing between even whole numbers with an even positive integer is guaranteed to be even , as well as from the knowledge multiplying of an even natural number with some natural will be obviously an even number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:w> <var:R> <var:O> <var:C> <var:c> : nat , Nat . odd ( <nat:382> * <var:n> + <nat:26> * <var:w> + <nat:372> * <var:R> + <nat:6> * <var:O> + <nat:158> * <var:C> + <nat:192> * <var:c> + <nat:361> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:361> = true ) . { auto . } assert ( <genH> : Nat . even <nat:26> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even <nat:372> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:n> + <nat:26> * <var:w> + <nat:372> * <var:R> + <nat:6> * <var:O> + <nat:158> * <var:C> + <nat:192> * <var:c> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 