\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist whole numbers $ <var:t> $ , $ <var:b> $ , $ <var:P> $ , $ <var:O> $ , $ <var:T> $ , $ <var:Q> $ , $ <var:F> $ , $ <var:x> $ , $ <var:H> $ larger than <nat:1> . We claim that some natural number $ <var:p> $ will be considered as a <def:nine-composite> integer assuming $ <var:T> \times <var:F> \times <var:Q> \times <var:b> \times <var:O> \times <var:P> \times <var:H> \times <var:t> \times <var:x> = <var:p> $ . \end{definition} \begin{theorem} $ <nat:17107200> = <var:p> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Allow $ <var:H> = <nat:11> $ , $ <var:O> = <nat:9> $ , $ <var:P> = <nat:3> $ , $ <var:b> = <nat:8> $ , $ <var:T> = <nat:10> $ , $ <var:F> = <nat:5> $ , $ <var:Q> = <nat:2> $ , $ <var:t> = <nat:6> $ , $ <var:x> = <nat:12> $ . Furthermore notice that $ <nat:2> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:3> $ , and $ <nat:12> $ are more than <nat:1> . This produces <nat:17107200> is a <def:nine-composite> whole number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:p> : nat ) := exists <var:t> <var:b> <var:P> <var:O> <var:T> <var:Q> <var:F> <var:x> <var:H> : nat , ( <var:t> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:O> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:F> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:T> * <var:F> * <var:Q> * <var:b> * <var:O> * <var:P> * <var:H> * <var:t> * <var:x> = <var:p> ) . Theorem <genP:1> : <def:nine-composite> <nat:17107200> . Proof . unfold <def:nine-composite> . exists <nat:6> . exists <nat:8> . exists <nat:3> . exists <nat:9> . exists <nat:10> . exists <nat:2> . exists <nat:5> . exists <nat:12> . exists <nat:11> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 