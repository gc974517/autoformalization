\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every positive numbers $ <var:n> $ , $ <var:l> $ , $ <var:p> $ , $ <var:R> $ , $ <var:I> $ , $ <var:O> $ , $ <var:V> $ , and $ <var:c> $ $ <nat:202> <var:l> + <var:c> <nat:82> + <nat:492> <var:p> + <var:n> <nat:36> + <nat:143> + <var:I> <nat:136> + <var:V> <nat:396> + <var:R> <nat:142> + <var:O> <nat:324> $ is guaranteed to be odd . \end{theorem} \begin{proof} This result is proven since $ <var:n> <nat:36> + <nat:202> <var:l> + <var:I> <nat:136> + <var:R> <nat:142> + <var:O> <nat:324> + <nat:492> <var:p> + <nat:396> <var:V> + <var:c> <nat:82> $ is guaranteed to be even . What's more , observe the leading terms $ <nat:36> $ , $ <nat:202> $ , $ <nat:136> $ , $ <nat:142> $ , $ <nat:324> $ , $ <nat:492> $ , $ <nat:396> $ , and likewise $ <nat:82> $ will be even elements of $ \mathbb{N} $ . Thus , the pairs $ <var:n> \cdot <nat:36> $ , $ <nat:202> \cdot <var:l> $ , $ <var:I> \cdot <nat:136> $ , $ <nat:142> \cdot <var:R> $ , $ <var:O> \cdot <nat:324> $ , $ <var:p> \cdot <nat:492> $ , $ <nat:396> \cdot <var:V> $ , plus $ <nat:82> \cdot <var:c> $ must be even additionally . From the knowledge the addition of an even natural number with even elements of $ \mathbb{Z}^+ $ will be even , and moreover because the product between even numbers in $ \mathbb{N} $ with an arbitrary number in $ \mathbb{N} $ will be even . The totaling of even whole numbers together with an odd number in $ \mathbb{Z}^+ $ must be itself an odd whole number . Therefore , the formula $ <var:O> \times <nat:324> + <var:p> \times <nat:492> + <var:R> \times <nat:142> + <nat:136> \times <var:I> + <var:l> \times <nat:202> + <nat:82> \times <var:c> + <nat:143> + <var:n> \times <nat:36> + <nat:396> \times <var:V> $ in itself is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:l> <var:p> <var:R> <var:I> <var:O> <var:V> <var:c> : nat , Nat . odd ( <nat:202> * <var:l> + <nat:82> * <var:c> + <nat:492> * <var:p> + <nat:36> * <var:n> + <nat:136> * <var:I> + <nat:396> * <var:V> + <nat:142> * <var:R> + <nat:324> * <var:O> + <nat:143> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even <nat:396> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:396> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:l> + <nat:82> * <var:c> + <nat:492> * <var:p> + <nat:36> * <var:n> + <nat:136> * <var:I> + <nat:396> * <var:V> + <nat:142> * <var:R> + <nat:324> * <var:O> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 