\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:w> <nat:12> + <nat:262> <var:s> + <nat:414> <var:u> + <nat:486> <var:I> + <nat:295> $ must be odd taking some $ <var:u> $ , $ <var:s> $ , $ <var:I> $ , and $ <var:w> \in \mathbb{N} $ . \end{theorem} \begin{proof} The coefficient $ <nat:262> $ is trivially even . As a consequence , the pair $ <var:s> * <nat:262> $ is even too . Remember that the term $ <nat:486> * <var:I> $ is guaranteed to be even from the knowledge the whole number $ <nat:486> $ is known as an even element of $ \mathbb{N} $ . What's more , $ <var:w> * <nat:12> $ is trivially an even number in $ \mathbb{N} $ . This must be true because the positive integer $ <nat:12> $ is even . The integer $ <nat:414> $ is trivially even . Thus , the product $ <var:u> * <nat:414> $ is even also . It can be shown that the sum $ <var:I> * <nat:486> + <var:u> * <nat:414> + <nat:295> + <var:w> * <nat:12> + <nat:262> * <var:s> $ is odd . Remember $ <nat:295> $ is known as an odd number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:s> <var:I> <var:w> : nat , Nat . odd ( <nat:12> * <var:w> + <nat:262> * <var:s> + <nat:414> * <var:u> + <nat:486> * <var:I> + <nat:295> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:414> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:295> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 