\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:70> <var:r> + <nat:358> <var:c> + <nat:266> <var:A> + <var:b> <nat:28> + <nat:387> + <nat:154> <var:f> + <var:g> <nat:56> $ must be odd for every positive integers $ <var:g> $ , $ <var:b> $ , $ <var:f> $ , $ <var:c> $ , $ <var:A> $ , and $ <var:r> $ . \end{theorem} \begin{proof} Notice that $ <nat:387> $ is clearly odd . We prove $ <nat:387> + <var:c> \times <nat:358> + <nat:266> \times <var:A> + <var:b> \times <nat:28> + <nat:56> \times <var:g> + <var:f> \times <nat:154> + <var:r> \times <nat:70> $ is odd . Adding on , the coefficients $ <nat:358> $ , $ <nat:266> $ , $ <nat:28> $ , $ <nat:56> $ , $ <nat:154> $ , and also $ <nat:70> $ are clearly even natural numbers . Consequently , the pairs $ <var:c> \times <nat:358> $ , $ <var:A> \times <nat:266> $ , $ <nat:28> \times <var:b> $ , $ <nat:56> \times <var:g> $ , $ <var:f> \times <nat:154> $ , and likewise $ <var:r> \times <nat:70> $ is guaranteed to be even at the same time . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:b> <var:f> <var:c> <var:A> <var:r> : nat , Nat . odd ( <nat:70> * <var:r> + <nat:358> * <var:c> + <nat:266> * <var:A> + <nat:28> * <var:b> + <nat:154> * <var:f> + <nat:56> * <var:g> + <nat:387> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:387> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 