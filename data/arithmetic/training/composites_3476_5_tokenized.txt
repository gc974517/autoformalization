\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Wherever we get $ <var:r> \times <var:y> \times <var:E> \times <var:e> \times <var:U> = <var:W> $ for $ <var:W> \in \mathbb{N} $ and such that $ <var:U> $ , $ <var:E> $ , $ <var:r> $ , $ <var:e> $ , $ <var:y> \geq <nat:2> $ , then we denote that $ <var:W> $ is a <def:five-composite> whole number taking some positive integers $ <var:e> $ , $ <var:U> $ , $ <var:y> $ , $ <var:r> $ , $ <var:E> $ . \end{definition} \begin{theorem} The number <nat:1512> is <def:five-composite> . \end{theorem} \begin{proof} Recollect that <nat:1512> is a <def:five-composite> integer iff it is the multiplication of $ <var:e> $ , $ <var:y> $ , $ <var:r> $ , $ <var:E> $ , $ <var:U> $ where $ <var:y> $ , $ <var:r> $ , $ <var:e> $ , $ <var:U> $ , $ <var:E> \geq <nat:2> $ . Let $ <var:E> = <nat:9> $ , $ <var:e> = <nat:3> $ , $ <var:y> = <nat:7> $ , $ <var:r> = <nat:4> $ , $ <var:U> = <nat:2> $ . Notice that $ <nat:1512> = <var:y> \times <var:r> \times <var:U> \times <var:e> \times <var:E> = <nat:7> \times <nat:4> \times <nat:2> \times <nat:3> \times <nat:9> $ . Further observe that $ <nat:2> $ , $ <nat:3> $ , $ <nat:9> $ , $ <nat:4> $ , and $ <nat:7> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:W> : nat ) := exists <var:e> <var:U> <var:y> <var:r> <var:E> : nat , ( <var:r> * <var:y> * <var:E> * <var:e> * <var:U> = <var:W> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:1512> . Proof . unfold <def:five-composite> . exists <nat:3> . exists <nat:2> . exists <nat:7> . exists <nat:4> . exists <nat:9> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 