\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:254> \times <var:I> + <var:e> \times <nat:130> + <nat:39> + <var:B> \times <nat:224> + <nat:256> \times <var:n> + <nat:134> \times <var:q> + <nat:270> \times <var:A> $ must be odd . \end{theorem} \begin{proof} We know the integers $ <nat:254> $ , $ <nat:130> $ , $ <nat:224> $ , $ <nat:256> $ , $ <nat:134> $ , additionally $ <nat:270> $ are even . So , the terms $ <nat:254> \cdot <var:I> $ , $ <nat:130> \cdot <var:e> $ , $ <nat:224> \cdot <var:B> $ , $ <nat:256> \cdot <var:n> $ , $ <nat:134> \cdot <var:q> $ , in addition to $ <var:A> \cdot <nat:270> $ must be even too . Observe the totaling between even natural numbers collectively with an odd number in $ \mathbb{Z}^+ $ is odd . See $ <nat:39> $ is guaranteed to be an odd element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:e> <var:B> <var:n> <var:q> <var:A> : nat , Nat . odd ( <nat:254> * <var:I> + <nat:130> * <var:e> + <nat:224> * <var:B> + <nat:256> * <var:n> + <nat:134> * <var:q> + <nat:270> * <var:A> + <nat:39> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even <nat:224> = true ) . { auto . } assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:224> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:39> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 