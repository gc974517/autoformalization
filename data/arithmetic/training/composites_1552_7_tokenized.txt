\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Define that $ <var:V> $ is a <def:seven-composite> positive integer assuming there are $ <var:X> $ , $ <var:F> $ , $ <var:Y> $ , $ <var:O> $ , $ <var:l> $ , $ <var:N> $ , $ <var:i> \in \mathbb{Z}^+ $ such that where $ <var:F> $ , $ <var:O> $ , $ <var:l> $ , $ <var:i> $ , $ <var:Y> $ , $ <var:N> $ and $ <var:X> > <nat:1> $ plus assuming $ <var:V> \in \mathbb{Z}^+ $ , $ <var:N> \times <var:F> \times <var:X> \times <var:l> \times <var:Y> \times <var:O> \times <var:i> = <var:V> $ . \end{definition} \begin{theorem} The integer <nat:80640> is <def:seven-composite> . \end{theorem} \begin{proof} Take $ <var:O> = <nat:8> $ , $ <var:Y> = <nat:10> $ , $ <var:F> = <nat:7> $ , $ <var:i> = <nat:6> $ , $ <var:X> = <nat:3> $ , $ <var:l> = <nat:4> $ , $ <var:N> = <nat:2> $ . Plus note that $ <var:X> = <nat:3> $ , $ <var:O> = <nat:8> $ , $ <var:i> = <nat:6> $ , $ <var:l> = <nat:4> $ , $ <var:N> = <nat:2> $ , $ <var:F> = <nat:7> $ , and $ <var:Y> = <nat:10> > <nat:1> $ . As a result , $ <var:l> $ , $ <var:Y> $ , $ <var:X> $ , $ <var:i> $ , $ <var:N> $ , $ <var:O> $ , and $ <var:F> > <nat:1> $ plus <nat:80640> is the multiplication between some numbers $ <var:F> $ , $ <var:X> $ , $ <var:Y> $ , $ <var:l> $ , $ <var:O> $ , $ <var:i> $ and $ <var:N> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:V> : nat ) := exists <var:X> <var:F> <var:Y> <var:O> <var:l> <var:N> <var:i> : nat , ( <var:F> > <nat:1> ) /\ ( <var:O> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:N> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:N> * <var:F> * <var:X> * <var:l> * <var:Y> * <var:O> * <var:i> = <var:V> ) . Theorem <genP:1> : <def:seven-composite> <nat:80640> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:7> . exists <nat:10> . exists <nat:8> . exists <nat:4> . exists <nat:2> . exists <nat:6> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 