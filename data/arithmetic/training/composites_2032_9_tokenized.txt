\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If and only if there are natural numbers $ <var:A> $ , $ <var:b> $ , $ <var:v> $ , $ <var:J> $ , $ <var:j> $ , $ <var:G> $ , $ <var:Z> $ , $ <var:i> $ , $ <var:U> $ then claim that $ <var:I> \in \mathbb{N} $ will be considered to be a <def:nine-composite> integer given $ <var:I> = <var:i> * <var:j> * <var:v> * <var:G> * <var:Z> * <var:J> * <var:U> * <var:b> * <var:A> $ and terms are larger than <nat:1> . \end{definition} \begin{theorem} The integer <nat:3628800> is a <def:nine-composite> integer . \end{theorem} \begin{proof} Remember a <def:nine-composite> whole number is the product of numbers $ <var:i> $ , $ <var:U> $ , $ <var:J> $ , $ <var:Z> $ , $ <var:A> $ , $ <var:b> $ , $ <var:v> $ , $ <var:G> $ and $ <var:j> $ where $ <var:b> $ , $ <var:i> $ , $ <var:J> $ , $ <var:G> $ , $ <var:v> $ , $ <var:j> $ , $ <var:A> $ , $ <var:U> $ , and $ <var:Z> > <nat:1> $ . Note that $ <nat:3> $ , $ <nat:8> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:9> $ and $ <nat:5> > <nat:1> $ . Plus observe that further $ <nat:3628800> = <nat:2> \cdot <nat:8> \cdot <nat:7> \cdot <nat:6> \cdot <nat:9> \cdot <nat:4> \cdot <nat:10> \cdot <nat:3> \cdot <nat:5> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:I> : nat ) := exists <var:A> <var:b> <var:v> <var:J> <var:j> <var:G> <var:Z> <var:i> <var:U> : nat , ( <var:I> = <var:i> * <var:j> * <var:v> * <var:G> * <var:Z> * <var:J> * <var:U> * <var:b> * <var:A> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:Z> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:U> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:3628800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } exists <nat:4> . exists <nat:6> . exists <nat:5> . exists <nat:10> . exists <nat:9> . exists <nat:8> . exists <nat:2> . exists <nat:7> . exists <nat:3> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 