\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given any $ <var:n> $ , $ <var:e> $ , $ <var:B> $ , and $ <var:Q> \in \mathbb{N} $ $ <var:B> \cdot <nat:242> + <nat:425> + <var:e> \cdot <nat:290> + <var:Q> \cdot <nat:406> + <var:n> \cdot <nat:184> $ is odd . \end{theorem} \begin{proof} It can be justified that the sum $ <var:B> <nat:242> + <var:e> <nat:290> + <nat:425> + <nat:184> <var:n> + <nat:406> <var:Q> $ is guaranteed to be odd . Take note the summing of even positive integers concurrently and an odd number is guaranteed to be odd . It can be checked that that the expression $ <var:n> \times <nat:184> + <nat:406> \times <var:Q> + <nat:242> \times <var:B> + <nat:425> + <var:e> \times <nat:290> $ is known to be odd since the expression $ <nat:242> * <var:B> + <var:e> * <nat:290> + <var:Q> * <nat:406> + <var:n> * <nat:184> $ is even . Notice that the addition of an even number and an even number in $ \mathbb{N} $ is guaranteed to be itself an even whole number . Notice additionally taking the product between an even element of $ \mathbb{N} $ and a number will be even . The numbers $ <nat:184> $ plus $ <nat:406> $ are even Remember the positive integer $ <nat:242> $ is known to be even Take note that the leading term $ <nat:290> $ is known as an even number in $ \mathbb{Z}^+ $ \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:n> <var:e> <var:B> <var:Q> : nat , Nat . odd ( <nat:242> * <var:B> + <nat:290> * <var:e> + <nat:406> * <var:Q> + <nat:184> * <var:n> + <nat:425> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even <nat:290> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:B> + <nat:290> * <var:e> + <nat:406> * <var:Q> + <nat:184> * <var:n> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 