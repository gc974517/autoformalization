\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:X> $ , $ <var:B> $ , $ <var:P> $ , $ <var:n> $ , $ <var:r> $ , $ <var:g> $ , $ <var:j> $ as whole numbers greater than <nat:1> . We denote that $ <var:m> \in \mathbb{N} $ will be a <def:seven-composite> positive integer given $ <var:X> \cdot <var:g> \cdot <var:B> \cdot <var:r> \cdot <var:n> \cdot <var:j> \cdot <var:P> = <var:m> $ . So the number <nat:259200> is a <def:seven-composite> number . \end{theorem} \begin{proof} Remember that <nat:259200> is <def:seven-composite> assuming <nat:259200> is the multiplication between whole numbers $ <var:g> $ , $ <var:X> $ , $ <var:B> $ , $ <var:P> $ , $ <var:r> $ , $ <var:n> $ and $ <var:j> $ satisfying the condition that $ <var:B> $ , $ <var:P> $ , $ <var:r> $ , $ <var:j> $ , $ <var:X> $ , $ <var:g> $ , and $ <var:n> > <nat:1> $ . Notice that $ <nat:8> $ , $ <nat:2> $ , $ <nat:10> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:5> $ , and $ <nat:12> > <nat:1> $ . Also notice that as well $ <nat:259200> = <var:P> * <var:B> * <var:r> * <var:j> * <var:X> * <var:n> * <var:g> $ hints $ <var:j> = <nat:3> $ , $ <var:P> = <nat:5> $ , $ <var:g> = <nat:8> $ , $ <var:n> = <nat:2> $ , $ <var:r> = <nat:9> $ , $ <var:B> = <nat:10> $ , $ <var:X> = <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:m> : nat ) := exists <var:X> <var:B> <var:P> <var:n> <var:r> <var:g> <var:j> : nat , ( <var:X> > <nat:1> ) /\ ( <var:B> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:X> * <var:g> * <var:B> * <var:r> * <var:n> * <var:j> * <var:P> = <var:m> ) . Theorem <genP:1> : <def:seven-composite> <nat:259200> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } exists <nat:12> . exists <nat:10> . exists <nat:5> . exists <nat:2> . exists <nat:9> . exists <nat:8> . exists <nat:3> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 