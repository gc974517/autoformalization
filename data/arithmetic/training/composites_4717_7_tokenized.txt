\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Supposing we get so that $ <var:b> $ , $ <var:V> $ , $ <var:F> $ , $ <var:m> $ , $ <var:w> $ , $ <var:I> $ , $ <var:R> > <nat:1> $ such that for some number $ <var:l> $ , $ <var:F> \times <var:m> \times <var:w> \times <var:R> \times <var:b> \times <var:I> \times <var:V> = <var:l> $ , then we assume that $ <var:l> $ is <def:seven-composite> taking some positive integers $ <var:w> $ , $ <var:b> $ , $ <var:F> $ , $ <var:m> $ , $ <var:R> $ , $ <var:I> $ , $ <var:V> $ . \end{definition} \begin{theorem} $ <var:l> = <nat:997920> $ is <def:seven-composite> . \end{theorem} \begin{proof} Observe $ <nat:997920> = <var:b> \cdot <var:w> \cdot <var:m> \cdot <var:R> \cdot <var:I> \cdot <var:F> \cdot <var:V> $ gives $ <var:m> = <nat:8> $ , $ <var:b> = <nat:9> $ , $ <var:I> = <nat:3> $ , $ <var:R> = <nat:5> $ , $ <var:F> = <nat:12> $ , $ <var:V> = <nat:7> $ and $ <var:w> = <nat:11> $ . Further notice that $ <nat:8> $ , $ <nat:11> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:7> $ , and $ <nat:9> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:l> : nat ) := exists <var:w> <var:b> <var:F> <var:m> <var:R> <var:I> <var:V> : nat , ( <var:b> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:F> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:w> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:F> * <var:m> * <var:w> * <var:R> * <var:b> * <var:I> * <var:V> = <var:l> ) . Theorem <genP:1> : <def:seven-composite> <nat:997920> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:9> . exists <nat:12> . exists <nat:8> . exists <nat:5> . exists <nat:3> . exists <nat:7> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 