\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:12> \times <var:R> + <var:I> \times <nat:314> + <nat:305> + <nat:322> \times <var:i> + <var:X> \times <nat:234> + <var:u> \times <nat:356> + <nat:24> \times <var:h> + <var:p> \times <nat:480> + <nat:304> \times <var:k> $ is odd . \end{theorem} \begin{proof} It can be justified that the formula $ <var:h> <nat:24> + <var:X> <nat:234> + <nat:305> + <var:I> <nat:314> + <nat:356> <var:u> + <var:k> <nat:304> + <var:R> <nat:12> + <var:i> <nat:322> + <var:p> <nat:480> $ must be odd . See that the summation $ <var:i> \cdot <nat:322> + <var:u> \cdot <nat:356> + <nat:304> \cdot <var:k> + <nat:234> \cdot <var:X> + <var:I> \cdot <nat:314> + <nat:12> \cdot <var:R> + <nat:480> \cdot <var:p> + <nat:24> \cdot <var:h> $ is trivially even . In addition , the terms $ <var:i> * <nat:322> $ , $ <nat:356> * <var:u> $ , $ <var:k> * <nat:304> $ , $ <var:X> * <nat:234> $ , $ <var:I> * <nat:314> $ , $ <nat:12> * <var:R> $ , $ <var:p> * <nat:480> $ , additionally $ <nat:24> * <var:h> $ must be even elements of $ \mathbb{N} $ . This holds since the leading terms $ <nat:322> $ , $ <nat:356> $ , $ <nat:304> $ , $ <nat:234> $ , $ <nat:314> $ , $ <nat:12> $ , $ <nat:480> $ , in addition to $ <nat:24> $ will be even elements of $ \mathbb{Z}^+ $ . As a consequence that taking the product of even numbers in $ \mathbb{N} $ with any positive integer is clearly an even element of $ \mathbb{Z}^+ $ the expression $ <var:i> \cdot <nat:322> + <nat:12> \cdot <var:R> + <var:X> \cdot <nat:234> + <nat:24> \cdot <var:h> + <nat:356> \cdot <var:u> + <var:I> \cdot <nat:314> + <var:k> \cdot <nat:304> + <var:p> \cdot <nat:480> $ must be even . Take note the totaling between even numbers in $ \mathbb{N} $ collectively and an odd positive integer must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:R> <var:I> <var:i> <var:X> <var:u> <var:h> <var:p> <var:k> : nat , Nat . odd ( <nat:12> * <var:R> + <nat:314> * <var:I> + <nat:322> * <var:i> + <nat:234> * <var:X> + <nat:356> * <var:u> + <nat:24> * <var:h> + <nat:480> * <var:p> + <nat:304> * <var:k> + <nat:305> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:322> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:322> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:R> + <nat:314> * <var:I> + <nat:322> * <var:i> + <nat:234> * <var:X> + <nat:356> * <var:u> + <nat:24> * <var:h> + <nat:480> * <var:p> + <nat:304> * <var:k> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 