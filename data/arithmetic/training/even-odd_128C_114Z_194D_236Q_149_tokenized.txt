\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming $ <var:Q> $ , $ <var:D> $ , $ <var:C> $ , and $ <var:Z> \in \mathbb{N} $ the formula $ <nat:236> * <var:Q> + <var:C> * <nat:128> + <nat:194> * <var:D> + <var:Z> * <nat:114> + <nat:149> $ must be odd . \end{theorem} \begin{proof} Observe that $ <var:D> * <nat:194> + <var:Q> * <nat:236> + <var:Z> * <nat:114> + <var:C> * <nat:128> $ is trivially even . Notice the products $ <var:D> \times <nat:194> $ , $ <var:Q> \times <nat:236> $ , $ <nat:114> \times <var:Z> $ , $ <var:C> \times <nat:128> $ , will be even . This is proven by reason that multiplying of an even integer and any number in $ \mathbb{Z}^+ $ must be even additionally the numbers $ <nat:194> $ , $ <nat:236> $ , $ <nat:114> $ , $ <nat:128> $ , are guaranteed to be even . We know that $ <nat:149> $ is known as an odd number in $ \mathbb{N} $ . We verify the summation $ <nat:149> + <var:C> \cdot <nat:128> + <var:Z> \cdot <nat:114> + <var:D> \cdot <nat:194> + <var:Q> \cdot <nat:236> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:D> <var:C> <var:Z> : nat , Nat . odd ( <nat:236> * <var:Q> + <nat:128> * <var:C> + <nat:194> * <var:D> + <nat:114> * <var:Z> + <nat:149> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even <nat:236> = true ) . { auto . } assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even <nat:128> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:128> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:Q> + <nat:128> * <var:C> + <nat:194> * <var:D> + <nat:114> * <var:Z> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:149> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 