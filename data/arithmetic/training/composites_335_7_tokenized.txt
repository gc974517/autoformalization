\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We assume that if and only if there exist positive integers $ <var:T> $ , $ <var:F> $ , $ <var:e> $ , $ <var:D> $ , $ <var:X> $ , $ <var:f> $ , $ <var:W> $ then define that $ <var:V> \in \mathbb{N} $ will be considered a <def:seven-composite> integer assuming $ <var:T> \times <var:f> \times <var:X> \times <var:F> \times <var:W> \times <var:D> \times <var:e> = <var:V> $ and satisfying the condition that $ <var:f> $ , $ <var:W> $ , $ <var:D> $ , $ <var:F> $ , $ <var:e> $ , $ <var:T> $ , $ <var:X> \geq <nat:2> $ . Therefore <nat:399168> is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Let $ <var:F> = <nat:7> $ , $ <var:W> = <nat:12> $ , $ <var:D> = <nat:11> $ , $ <var:e> = <nat:4> $ , $ <var:T> = <nat:9> $ , $ <var:f> = <nat:6> $ , $ <var:X> = <nat:2> $ . We prove <nat:399168> is a <def:seven-composite> number in consideration of $ <nat:2> $ , $ <nat:6> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:12> $ , $ <nat:4> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:V> : nat ) := exists <var:T> <var:F> <var:e> <var:D> <var:X> <var:f> <var:W> : nat , ( <var:T> * <var:f> * <var:X> * <var:F> * <var:W> * <var:D> * <var:e> = <var:V> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:399168> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:7> . exists <nat:4> . exists <nat:11> . exists <nat:2> . exists <nat:6> . exists <nat:12> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 