\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let that $ <var:f> $ is <def:nine-composite> assuming that there exist some natural numbers $ <var:V> $ , $ <var:t> $ , $ <var:G> $ , $ <var:I> $ , $ <var:T> $ , $ <var:N> $ , $ <var:o> $ , $ <var:C> $ , $ <var:D> $ where so that $ <var:D> $ , $ <var:V> $ , $ <var:N> $ , $ <var:C> $ , $ <var:T> $ , $ <var:t> $ , $ <var:G> $ , $ <var:I> $ and $ <var:o> > <nat:1> $ plus given some positive integer $ <var:f> $ , $ <var:f> = <var:N> * <var:C> * <var:G> * <var:I> * <var:D> * <var:T> * <var:V> * <var:o> * <var:t> $ . Thus the whole number <nat:7603200> is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Allow $ <var:G> = <nat:10> $ , $ <var:t> = <nat:8> $ , $ <var:N> = <nat:5> $ , $ <var:o> = <nat:3> $ , $ <var:T> = <nat:12> $ , $ <var:D> = <nat:2> $ , $ <var:V> = <nat:6> $ , $ <var:I> = <nat:4> $ and $ <var:C> = <nat:11> $ . Notice that $ <var:t> = <nat:8> $ , $ <var:G> = <nat:10> $ , $ <var:D> = <nat:2> $ , $ <var:V> = <nat:6> $ , $ <var:I> = <nat:4> $ , $ <var:C> = <nat:11> $ , $ <var:o> = <nat:3> $ , $ <var:T> = <nat:12> $ , $ <var:N> = <nat:5> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:f> : nat ) := exists <var:V> <var:t> <var:G> <var:I> <var:T> <var:N> <var:o> <var:C> <var:D> : nat , ( <var:D> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:N> > <nat:1> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:t> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:I> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:f> = <var:N> * <var:C> * <var:G> * <var:I> * <var:D> * <var:T> * <var:V> * <var:o> * <var:t> ) . Theorem <genP:1> : <def:nine-composite> <nat:7603200> . Proof . unfold <def:nine-composite> . exists <nat:6> . exists <nat:8> . exists <nat:10> . exists <nat:4> . exists <nat:12> . exists <nat:5> . exists <nat:3> . exists <nat:11> . exists <nat:2> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 