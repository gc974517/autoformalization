\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted that there are numbers $ <var:z> $ , $ <var:f> $ , $ <var:L> $ , $ <var:k> $ , $ <var:u> $ , $ <var:H> $ , $ <var:v> $ , $ <var:D> $ , $ <var:m> $ so that $ <var:v> $ , $ <var:z> $ , $ <var:m> $ , $ <var:H> $ , $ <var:D> $ , $ <var:L> $ , $ <var:k> $ , $ <var:f> $ , $ <var:u> > <nat:1> $ . Take that some integer $ <var:N> $ will be considered to be a <def:nine-composite> natural number if $ <var:N> = <var:D> \cdot <var:L> \cdot <var:k> \cdot <var:f> \cdot <var:z> \cdot <var:v> \cdot <var:u> \cdot <var:H> \cdot <var:m> $ . Thus the integer <nat:10886400> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} We confirm our proposition holds by reason of $ <nat:9> $ , $ <nat:12> $ , $ <nat:10> $ , $ <nat:7> $ , $ <nat:8> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:3> $ and $ <nat:5> > <nat:1> $ and by reason of $ <nat:2> * <nat:5> * <nat:7> * <nat:8> * <nat:6> * <nat:10> * <nat:12> * <nat:3> * <nat:9> = <var:f> * <var:m> * <var:L> * <var:v> * <var:H> * <var:z> * <var:D> * <var:u> * <var:k> = <nat:10886400> $ . Thus , <nat:10886400> is the product between $ <var:H> $ , $ <var:u> $ , $ <var:D> $ , $ <var:m> $ , $ <var:z> $ , $ <var:v> $ , $ <var:f> $ , $ <var:k> $ and $ <var:L> \in \mathbb{N} $ is true has been proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:N> : nat ) := exists <var:z> <var:f> <var:L> <var:k> <var:u> <var:H> <var:v> <var:D> <var:m> : nat , ( <var:v> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:k> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:N> = <var:D> * <var:L> * <var:k> * <var:f> * <var:z> * <var:v> * <var:u> * <var:H> * <var:m> ) . Theorem <genP:1> : <def:nine-composite> <nat:10886400> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } exists <nat:10> . exists <nat:2> . exists <nat:7> . exists <nat:9> . exists <nat:3> . exists <nat:6> . exists <nat:8> . exists <nat:12> . exists <nat:5> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 