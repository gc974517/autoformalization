\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We define that $ <var:p> $ is a <def:nine-composite> whole number supposing that there are $ <var:r> $ , $ <var:V> $ , $ <var:i> $ , $ <var:L> $ , $ <var:R> $ , $ <var:y> $ , $ <var:z> $ , $ <var:G> $ , $ <var:P> \in \mathbb{N} $ where satisfying the condition that $ <var:P> $ , $ <var:z> $ , $ <var:R> $ , $ <var:G> $ , $ <var:V> $ , $ <var:L> $ , $ <var:i> $ , $ <var:y> $ and $ <var:r> > <nat:1> $ as well as for $ <var:p> \in \mathbb{Z}^+ $ , $ <var:L> * <var:r> * <var:G> * <var:y> * <var:R> * <var:z> * <var:P> * <var:V> * <var:i> = <var:p> $ . Therefore the integer <nat:23950080> is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Allow $ <var:G> = <nat:11> $ , $ <var:P> = <nat:9> $ , $ <var:y> = <nat:6> $ , $ <var:r> = <nat:7> $ , $ <var:z> = <nat:4> $ , $ <var:V> = <nat:12> $ , $ <var:R> = <nat:5> $ , $ <var:i> = <nat:3> $ and $ <var:L> = <nat:8> $ . Plus observe that $ <nat:12> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:7> $ , $ <nat:3> $ , $ <nat:8> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:9> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:p> : nat ) := exists <var:r> <var:V> <var:i> <var:L> <var:R> <var:y> <var:z> <var:G> <var:P> : nat , ( <var:P> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:r> > <nat:1> ) /\ ( <var:L> * <var:r> * <var:G> * <var:y> * <var:R> * <var:z> * <var:P> * <var:V> * <var:i> = <var:p> ) . Theorem <genP:1> : <def:nine-composite> <nat:23950080> . Proof . unfold <def:nine-composite> . exists <nat:7> . exists <nat:12> . exists <nat:3> . exists <nat:8> . exists <nat:5> . exists <nat:6> . exists <nat:4> . exists <nat:11> . exists <nat:9> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 