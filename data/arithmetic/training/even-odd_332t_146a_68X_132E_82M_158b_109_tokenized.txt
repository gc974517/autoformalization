\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:109> + <nat:146> * <var:a> + <nat:158> * <var:b> + <nat:82> * <var:M> + <var:t> * <nat:332> + <var:X> * <nat:68> + <var:E> * <nat:132> $ is guaranteed to be odd taking some whole numbers $ <var:b> $ , $ <var:a> $ , $ <var:M> $ , $ <var:E> $ , $ <var:t> $ , and $ <var:X> $ . \end{theorem} \begin{proof} See $ <nat:109> $ is known as odd . It can be proven that this proposition must be true . It can be demonstrated that that the summation $ <var:M> <nat:82> + <nat:109> + <nat:146> <var:a> + <nat:332> <var:t> + <nat:68> <var:X> + <var:b> <nat:158> + <var:E> <nat:132> $ is odd from the knowledge $ <var:t> \cdot <nat:332> + <nat:146> \cdot <var:a> + <var:X> \cdot <nat:68> + <nat:132> \cdot <var:E> + <var:M> \cdot <nat:82> + <nat:158> \cdot <var:b> $ is obviously even . Remember the numbers $ <nat:158> $ , $ <nat:146> $ , $ <nat:332> $ , $ <nat:82> $ , and also $ <nat:68> $ are trivially even natural numbers The number $ <nat:132> $ is known as an even element of $ \mathbb{Z}^+ $ \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:a> <var:M> <var:E> <var:t> <var:X> : nat , Nat . odd ( <nat:146> * <var:a> + <nat:158> * <var:b> + <nat:82> * <var:M> + <nat:332> * <var:t> + <nat:68> * <var:X> + <nat:132> * <var:E> + <nat:109> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:109> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:132> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:a> + <nat:158> * <var:b> + <nat:82> * <var:M> + <nat:332> * <var:t> + <nat:68> * <var:X> + <nat:132> * <var:E> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 