\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With positive integers $ <var:V> $ , $ <var:A> $ , $ <var:p> $ , $ <var:f> $ , $ <var:N> $ , $ <var:H> $ , $ <var:R> $ , and $ <var:C> $ the expression $ <nat:284> * <var:H> + <nat:52> * <var:A> + <nat:478> * <var:V> + <var:p> * <nat:336> + <nat:21> + <var:f> * <nat:242> + <var:C> * <nat:330> + <var:N> * <nat:146> + <var:R> * <nat:320> $ is odd . \end{theorem} \begin{proof} Building on , the pairs $ <var:H> \cdot <nat:284> $ , $ <var:A> \cdot <nat:52> $ , $ <var:V> \cdot <nat:478> $ , $ <nat:336> \cdot <var:p> $ , $ <var:f> \cdot <nat:242> $ , $ <var:C> \cdot <nat:330> $ , $ <nat:146> \cdot <var:N> $ , and also $ <var:R> \cdot <nat:320> $ are trivially even whole numbers . This claim is proven as a consequence that the numbers $ <nat:284> $ , $ <nat:52> $ , $ <nat:478> $ , $ <nat:336> $ , $ <nat:242> $ , $ <nat:330> $ , $ <nat:146> $ , in addition to $ <nat:320> $ are obviously even . Recall $ <nat:21> $ is known as an odd number in $ \mathbb{Z}^+ $ . We show $ <nat:330> * <var:C> + <nat:52> * <var:A> + <nat:21> + <var:N> * <nat:146> + <var:R> * <nat:320> + <var:f> * <nat:242> + <var:H> * <nat:284> + <nat:478> * <var:V> + <var:p> * <nat:336> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:A> <var:p> <var:f> <var:N> <var:H> <var:R> <var:C> : nat , Nat . odd ( <nat:284> * <var:H> + <nat:52> * <var:A> + <nat:478> * <var:V> + <nat:336> * <var:p> + <nat:242> * <var:f> + <nat:330> * <var:C> + <nat:146> * <var:N> + <nat:320> * <var:R> + <nat:21> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:336> = true ) . { auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:21> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 