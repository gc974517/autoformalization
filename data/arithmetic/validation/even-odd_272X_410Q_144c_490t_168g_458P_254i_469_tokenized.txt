\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every positive integers $ <var:Q> $ , $ <var:i> $ , $ <var:g> $ , $ <var:P> $ , $ <var:c> $ , $ <var:X> $ , and $ <var:t> $ $ <var:X> <nat:272> + <nat:469> + <nat:410> <var:Q> + <nat:144> <var:c> + <nat:490> <var:t> + <nat:168> <var:g> + <var:P> <nat:458> + <var:i> <nat:254> $ is guaranteed to be odd . \end{theorem} \begin{proof} What's more , the whole numbers $ <nat:272> $ , $ <nat:410> $ , $ <nat:144> $ , $ <nat:490> $ , $ <nat:168> $ , $ <nat:458> $ , and likewise $ <nat:254> $ are guaranteed to be even elements of $ \mathbb{N} $ . Therefore , the terms $ <var:X> * <nat:272> $ , $ <var:Q> * <nat:410> $ , $ <nat:144> * <var:c> $ , $ <var:t> * <nat:490> $ , $ <var:g> * <nat:168> $ , $ <var:P> * <nat:458> $ , in addition to $ <nat:254> * <var:i> $ will be even also . We know that $ <nat:469> $ is known as an odd natural number . Since the totaling of an even element of $ \mathbb{N} $ and an odd whole number will be an odd element of $ \mathbb{N} $ , as a consequence this result must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:i> <var:g> <var:P> <var:c> <var:X> <var:t> : nat , Nat . odd ( <nat:272> * <var:X> + <nat:410> * <var:Q> + <nat:144> * <var:c> + <nat:490> * <var:t> + <nat:168> * <var:g> + <nat:458> * <var:P> + <nat:254> * <var:i> + <nat:469> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:490> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:490> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:469> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 