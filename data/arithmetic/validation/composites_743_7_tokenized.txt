\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Whenever we have $ <var:l> * <var:R> * <var:j> * <var:a> * <var:r> * <var:X> * <var:C> = <var:W> $ given some $ <var:W> $ as well as satisfying the condition that $ <var:C> $ , $ <var:a> $ , $ <var:R> $ , $ <var:l> $ , $ <var:j> $ , $ <var:X> $ and $ <var:r> \geq <nat:2> $ given some $ <var:R> $ , $ <var:l> $ , $ <var:a> $ , $ <var:j> $ , $ <var:X> $ , $ <var:C> $ , $ <var:r> \in \mathbb{Z}^+ $ , then say that $ <var:W> $ is a <def:seven-composite> positive integer . Thus $ <nat:316800> = <var:W> $ is a <def:seven-composite> number . \end{theorem} \begin{proof} Recall that <nat:316800> is a <def:seven-composite> integer whenever <nat:316800> is the multiplication of $ <var:j> $ , $ <var:l> $ , $ <var:a> $ , $ <var:r> $ , $ <var:R> $ , $ <var:X> $ , $ <var:C> $ greater than or equal to <nat:2> . Take $ <var:j> = <nat:2> $ , $ <var:R> = <nat:11> $ , $ <var:C> = <nat:5> $ , $ <var:r> = <nat:4> $ , $ <var:a> = <nat:12> $ , $ <var:l> = <nat:6> $ and $ <var:X> = <nat:10> $ . We demonstrate <nat:316800> is a <def:seven-composite> number for $ <nat:6> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:10> $ , $ <nat:12> $ , $ <nat:11> $ and $ <nat:5> $ are larger than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:W> : nat ) := exists <var:R> <var:l> <var:a> <var:j> <var:X> <var:C> <var:r> : nat , ( <var:l> * <var:R> * <var:j> * <var:a> * <var:r> * <var:X> * <var:C> = <var:W> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:316800> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:6> . exists <nat:12> . exists <nat:2> . exists <nat:10> . exists <nat:5> . exists <nat:4> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 