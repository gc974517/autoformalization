\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:39> + <nat:428> * <var:k> + <var:d> * <nat:8> + <nat:176> * <var:M> + <nat:326> * <var:x> + <var:K> * <nat:110> + <var:i> * <nat:340> + <nat:456> * <var:R> + <nat:222> * <var:X> $ will be odd using all integers $ <var:K> $ , $ <var:i> $ , $ <var:X> $ , $ <var:M> $ , $ <var:d> $ , $ <var:R> $ , $ <var:x> $ , and $ <var:k> $ . \end{theorem} \begin{proof} In addition to this , the leading terms $ <nat:428> $ , $ <nat:8> $ , $ <nat:176> $ , $ <nat:326> $ , $ <nat:110> $ , $ <nat:340> $ , $ <nat:456> $ , and also $ <nat:222> $ are guaranteed to be even . Accordingly , the terms $ <var:k> \cdot <nat:428> $ , $ <var:d> \cdot <nat:8> $ , $ <var:M> \cdot <nat:176> $ , $ <nat:326> \cdot <var:x> $ , $ <var:K> \cdot <nat:110> $ , $ <var:i> \cdot <nat:340> $ , $ <nat:456> \cdot <var:R> $ , additionally $ <var:X> \cdot <nat:222> $ is even also . We know that $ <nat:39> $ is obviously odd . We verify $ <nat:428> * <var:k> + <var:R> * <nat:456> + <var:d> * <nat:8> + <nat:39> + <nat:176> * <var:M> + <var:X> * <nat:222> + <var:K> * <nat:110> + <nat:326> * <var:x> + <var:i> * <nat:340> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:i> <var:X> <var:M> <var:d> <var:R> <var:x> <var:k> : nat , Nat . odd ( <nat:428> * <var:k> + <nat:8> * <var:d> + <nat:176> * <var:M> + <nat:326> * <var:x> + <nat:110> * <var:K> + <nat:340> * <var:i> + <nat:456> * <var:R> + <nat:222> * <var:X> + <nat:39> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:176> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:176> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:222> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:39> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 