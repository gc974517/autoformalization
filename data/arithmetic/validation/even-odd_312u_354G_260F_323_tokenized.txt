\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:312> * <var:u> + <nat:260> * <var:F> + <nat:354> * <var:G> + <nat:323> $ is odd taking terms $ <var:u> $ , $ <var:G> $ , and $ <var:F> $ . \end{theorem} \begin{proof} We check the formula $ <var:G> <nat:354> + <nat:312> <var:u> + <var:F> <nat:260> + <nat:323> $ is clearly odd because the sum $ <var:F> <nat:260> + <nat:354> <var:G> + <var:u> <nat:312> $ is known to be even . Remember the adding between even positive integers and an even natural will be an even number in $ \mathbb{Z}^+ $ . Take note the pair $ <nat:354> * <var:G> $ is an even element of $ \mathbb{Z}^+ $ . This fact must be true since multiplying of an even positive integer and some integer will be even . Adding on , remember that the term $ <var:F> * <nat:260> $ is guaranteed to be even . This is proven since the multiplication of an even number in $ \mathbb{N} $ and an arbitrary element of $ \mathbb{N} $ will be an even positive integer . $ <var:u> * <nat:312> $ is known as an even whole number from the fact the multiplication between an even number and some number is by itself an even integer . It can be verified that the sum $ <var:u> \cdot <nat:312> + <nat:354> \cdot <var:G> + <nat:323> + <nat:260> \cdot <var:F> $ is odd . Observe $ <nat:323> $ is clearly odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:u> <var:G> <var:F> : nat , Nat . odd ( <nat:312> * <var:u> + <nat:260> * <var:F> + <nat:354> * <var:G> + <nat:323> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:354> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:u> + <nat:260> * <var:F> + <nat:354> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:323> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 