\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With some positive terms $ <var:b> $ , $ <var:y> $ , $ <var:G> $ , $ <var:O> $ , $ <var:L> $ , $ <var:X> $ , and $ <var:q> $ $ <var:L> \times <nat:134> + <var:q> \times <nat:356> + <nat:258> \times <var:y> + <nat:257> + <var:O> \times <nat:234> + <nat:320> \times <var:X> + <nat:304> \times <var:b> + <var:G> \times <nat:484> $ is odd . \end{theorem} \begin{proof} We use the knowledge the sum $ <var:O> <nat:234> + <var:L> <nat:134> + <var:y> <nat:258> + <var:G> <nat:484> + <var:b> <nat:304> + <nat:356> <var:q> + <nat:320> <var:X> $ is guaranteed to be even , because the adding of even numbers in $ \mathbb{N} $ together and an even element of $ \mathbb{N} $ is guaranteed to be even . The leading terms $ <nat:234> $ , $ <nat:356> $ , $ <nat:258> $ , $ <nat:134> $ , $ <nat:304> $ , as well as $ <nat:484> $ are known to be even integers Additionally , we know the integer $ <nat:320> $ is obviously even plus as a consequence that the product between even numbers in $ \mathbb{N} $ with some positive integer must be an even integer the formula $ <nat:484> <var:G> + <nat:320> <var:X> + <nat:234> <var:O> + <var:b> <nat:304> + <var:L> <nat:134> + <var:q> <nat:356> + <nat:258> <var:y> $ must be itself even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:y> <var:G> <var:O> <var:L> <var:X> <var:q> : nat , Nat . odd ( <nat:134> * <var:L> + <nat:356> * <var:q> + <nat:258> * <var:y> + <nat:234> * <var:O> + <nat:320> * <var:X> + <nat:304> * <var:b> + <nat:484> * <var:G> + <nat:257> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even <nat:356> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:L> + <nat:356> * <var:q> + <nat:258> * <var:y> + <nat:234> * <var:O> + <nat:320> * <var:X> + <nat:304> * <var:b> + <nat:484> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 