\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that we get $ <var:w> $ , $ <var:f> $ , $ <var:i> $ , $ <var:P> $ , $ <var:j> $ , $ <var:r> $ and $ <var:I> \geq <nat:2> $ satisfying the condition that for some positive integer $ <var:Y> $ , $ <var:w> \cdot <var:I> \cdot <var:i> \cdot <var:f> \cdot <var:P> \cdot <var:r> \cdot <var:j> = <var:Y> $ assuming some $ <var:r> $ , $ <var:i> $ , $ <var:j> $ , $ <var:I> $ , $ <var:w> $ , $ <var:f> $ , $ <var:P> \in \mathbb{N} $ , then take that $ <var:Y> $ is a <def:seven-composite> number . \end{definition} \begin{theorem} $ <var:Y> = <nat:332640> $ is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Assume $ <var:f> = <nat:3> $ , $ <var:j> = <nat:2> $ , $ <var:r> = <nat:10> $ , $ <var:I> = <nat:11> $ , $ <var:w> = <nat:7> $ , $ <var:P> = <nat:8> $ , and $ <var:i> = <nat:9> $ . Note $ <nat:3> \times <nat:9> \times <nat:10> \times <nat:11> \times <nat:2> \times <nat:7> \times <nat:8> = <nat:332640> $ . Similarly note that $ <nat:10> $ , $ <nat:7> $ , $ <nat:3> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:9> $ , $ <nat:2> $ are more than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Y> : nat ) := exists <var:r> <var:i> <var:j> <var:I> <var:w> <var:f> <var:P> : nat , ( <var:w> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:w> * <var:I> * <var:i> * <var:f> * <var:P> * <var:r> * <var:j> = <var:Y> ) . Theorem <genP:1> : <def:seven-composite> <nat:332640> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:9> . exists <nat:2> . exists <nat:11> . exists <nat:7> . exists <nat:3> . exists <nat:8> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 