\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:O> * <nat:350> + <nat:433> + <var:X> * <nat:356> + <var:x> * <nat:116> + <var:N> * <nat:30> + <var:B> * <nat:250> + <var:g> * <nat:132> $ is odd for every whole numbers $ <var:g> $ , $ <var:B> $ , $ <var:x> $ , $ <var:X> $ , $ <var:N> $ , and $ <var:O> $ . \end{theorem} \begin{proof} Remember $ <nat:433> $ is trivially odd . It can be demonstrated that the claim holds . The terms $ <var:X> <nat:356> $ , $ <nat:132> <var:g> $ , $ <nat:350> <var:O> $ , and likewise $ <nat:116> <var:x> $ are guaranteed to be even whole numbers . Furthermore , we know the pair $ <nat:250> <var:B> $ is known to be an even number because the multiplication of an even number with some positive integer is even . $ <nat:30> <var:N> $ is guaranteed to be even . This claim is true from the fact multiplying of an even whole number and a number in $ \mathbb{Z}^+ $ will be trivially an even number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:B> <var:x> <var:X> <var:N> <var:O> : nat , Nat . odd ( <nat:350> * <var:O> + <nat:356> * <var:X> + <nat:116> * <var:x> + <nat:30> * <var:N> + <nat:250> * <var:B> + <nat:132> * <var:g> + <nat:433> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:433> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 