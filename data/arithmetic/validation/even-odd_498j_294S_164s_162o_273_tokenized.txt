\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:162> <var:o> + <nat:273> + <var:j> <nat:498> + <var:S> <nat:294> + <nat:164> <var:s> $ is guaranteed to be odd taking all positive terms $ <var:S> $ , $ <var:s> $ , $ <var:j> $ , and $ <var:o> $ . \end{theorem} \begin{proof} Observe that the products $ <var:S> \cdot <nat:294> $ and moreover $ <nat:498> \cdot <var:j> $ are trivially even numbers . This fact holds from the knowledge the numbers $ <nat:294> $ additionally $ <nat:498> $ are even . Likewise , the number $ <nat:162> $ is known as even . Then , the term $ <var:o> \cdot <nat:162> $ will be even as well . Recall that the product $ <nat:164> \cdot <var:s> $ is trivially even from the fact taking the product of an even number with any positive integer is guaranteed to be even , which holds because the integer $ <nat:164> $ is clearly an even number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:S> <var:s> <var:j> <var:o> : nat , Nat . odd ( <nat:162> * <var:o> + <nat:498> * <var:j> + <nat:294> * <var:S> + <nat:164> * <var:s> + <nat:273> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 