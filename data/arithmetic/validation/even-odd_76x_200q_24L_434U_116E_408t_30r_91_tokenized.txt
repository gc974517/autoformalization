\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking all $ <var:U> $ , $ <var:L> $ , $ <var:t> $ , $ <var:q> $ , $ <var:r> $ , $ <var:E> $ , and $ <var:x> $ the expression $ <var:L> \times <nat:24> + <nat:76> \times <var:x> + <nat:116> \times <var:E> + <nat:434> \times <var:U> + <var:t> \times <nat:408> + <var:r> \times <nat:30> + <var:q> \times <nat:200> + <nat:91> $ will be odd . \end{theorem} \begin{proof} We justify the expression $ <var:x> <nat:76> + <var:q> <nat:200> + <nat:24> <var:L> + <nat:434> <var:U> + <var:E> <nat:116> + <var:t> <nat:408> + <nat:30> <var:r> + <nat:91> $ is guaranteed to be odd applying multiplying between an even positive integer with some number is an even number in $ \mathbb{N} $ . Recall the natural numbers $ <nat:30> $ , $ <nat:116> $ , $ <nat:408> $ , $ <nat:76> $ , $ <nat:434> $ , as well as $ <nat:200> $ are known as even natural numbers In addition , see the number $ <nat:24> $ is known as even The addition of an even number in $ \mathbb{Z}^+ $ and an odd natural is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:U> <var:L> <var:t> <var:q> <var:r> <var:E> <var:x> : nat , Nat . odd ( <nat:24> * <var:L> + <nat:76> * <var:x> + <nat:116> * <var:E> + <nat:434> * <var:U> + <nat:408> * <var:t> + <nat:30> * <var:r> + <nat:200> * <var:q> + <nat:91> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 