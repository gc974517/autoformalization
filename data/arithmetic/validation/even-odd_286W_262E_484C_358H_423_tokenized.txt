\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some integers $ <var:H> $ , $ <var:E> $ , $ <var:W> $ , and $ <var:C> $ $ <nat:286> \cdot <var:W> + <var:C> \cdot <nat:484> + <nat:262> \cdot <var:E> + <var:H> \cdot <nat:358> + <nat:423> $ must be odd . \end{theorem} \begin{proof} It can be verified that that the summation $ <nat:484> * <var:C> + <var:W> * <nat:286> + <var:H> * <nat:358> + <nat:262> * <var:E> + <nat:423> $ is odd . Remember that the totaling between even integers and an odd positive integer is guaranteed to be an odd element of $ \mathbb{Z}^+ $ . Remember that the coefficient $ <nat:286> $ is even . For this reason , the term $ <var:W> \cdot <nat:286> $ is guaranteed to be even also . Recall the whole number $ <nat:262> $ is known as an even element of $ \mathbb{N} $ . So , the term $ <var:E> \cdot <nat:262> $ is even in addition . Notice the integer $ <nat:484> $ is known as even . Then , the term $ <var:C> \cdot <nat:484> $ is guaranteed to be even too . Further , the integer $ <nat:358> $ is clearly an even element of $ \mathbb{N} $ . Then , the product $ <var:H> \cdot <nat:358> $ is even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:E> <var:W> <var:C> : nat , Nat . odd ( <nat:286> * <var:W> + <nat:484> * <var:C> + <nat:262> * <var:E> + <nat:358> * <var:H> + <nat:423> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:484> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:484> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 