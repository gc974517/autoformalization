\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking unknowns $ <var:b> $ , $ <var:f> $ , $ <var:S> $ , $ <var:p> $ , $ <var:X> $ , $ <var:G> $ , $ <var:y> $ , and $ <var:v> $ the formula $ <var:f> \cdot <nat:338> + <var:b> \cdot <nat:260> + <nat:1> + <nat:32> \cdot <var:v> + <nat:72> \cdot <var:G> + <nat:458> \cdot <var:y> + <var:S> \cdot <nat:330> + <nat:124> \cdot <var:p> + <var:X> \cdot <nat:58> $ is odd . \end{theorem} \begin{proof} The pairs $ <var:v> * <nat:32> $ , $ <nat:58> * <var:X> $ , $ <nat:72> * <var:G> $ , $ <nat:458> * <var:y> $ , $ <nat:260> * <var:b> $ , as well as $ <var:p> * <nat:124> $ are guaranteed to be even integers from the knowledge multiplying between an even natural and an arbitrary positive integer is guaranteed to be even . See that the product $ <nat:330> * <var:S> $ is an even number in $ \mathbb{Z}^+ $ from the knowledge multiplying between an even element of $ \mathbb{N} $ with an arbitrary number will be even . Recall the pair $ <var:f> * <nat:338> $ is known to be an even number in $ \mathbb{N} $ from the knowledge multiplying of an even whole number and some integer is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:f> <var:S> <var:p> <var:X> <var:G> <var:y> <var:v> : nat , Nat . odd ( <nat:338> * <var:f> + <nat:260> * <var:b> + <nat:32> * <var:v> + <nat:72> * <var:G> + <nat:458> * <var:y> + <nat:330> * <var:S> + <nat:124> * <var:p> + <nat:58> * <var:X> + <nat:1> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:32> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 