\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming positive terms $ <var:T> $ , $ <var:H> $ , $ <var:n> $ , and $ <var:w> $ the sum $ <nat:44> <var:T> + <nat:467> + <nat:60> <var:n> + <var:w> <nat:176> + <var:H> <nat:418> $ must be odd . \end{theorem} \begin{proof} The products $ <nat:418> \times <var:H> $ , $ <nat:44> \times <var:T> $ , additionally $ <nat:60> \times <var:n> $ are known to be even since taking the product of an even positive integer with any natural number must be an even number in $ \mathbb{N} $ , which is proven since the leading terms $ <nat:418> $ , $ <nat:44> $ , and $ <nat:60> $ are even . See that the leading term $ <nat:176> $ is known to be an even number in $ \mathbb{N} $ . Therefore , the product $ <nat:176> \times <var:w> $ will be even also . Notice that $ <nat:467> $ is clearly odd . Because the addition between an even whole number and an odd natural number will be odd , hence our proposition holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:H> <var:n> <var:w> : nat , Nat . odd ( <nat:44> * <var:T> + <nat:60> * <var:n> + <nat:176> * <var:w> + <nat:418> * <var:H> + <nat:467> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:176> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:176> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:467> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 