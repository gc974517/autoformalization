\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist $ <var:t> $ , $ <var:D> $ , $ <var:S> $ , $ <var:K> $ , $ <var:O> $ , $ <var:T> $ , $ <var:L> \in \mathbb{Z}^+ $ where $ <var:L> $ , $ <var:S> $ , $ <var:T> $ , $ <var:K> $ , $ <var:D> $ , $ <var:O> $ and $ <var:t> \geq <nat:2> $ . Take that $ <var:F> \in \mathbb{N} $ will be called a <def:seven-composite> number if $ <var:t> \cdot <var:K> \cdot <var:L> \cdot <var:T> \cdot <var:S> \cdot <var:O> \cdot <var:D> = <var:F> $ . \end{definition} \begin{theorem} The number <nat:332640> is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Assume $ <var:D> = <nat:9> $ , $ <var:O> = <nat:7> $ , $ <var:K> = <nat:10> $ , $ <var:t> = <nat:8> $ , $ <var:T> = <nat:3> $ , $ <var:S> = <nat:2> $ , $ <var:L> = <nat:11> $ . Moreover notice that $ <var:S> = <nat:2> $ , $ <var:K> = <nat:10> $ , $ <var:t> = <nat:8> $ , $ <var:D> = <nat:9> $ , $ <var:T> = <nat:3> $ , $ <var:O> = <nat:7> $ , and $ <var:L> = <nat:11> $ are greater than or equivalent to <nat:2> . This yields our statement holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:F> : nat ) := exists <var:t> <var:D> <var:S> <var:K> <var:O> <var:T> <var:L> : nat , ( <var:L> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:t> * <var:K> * <var:L> * <var:T> * <var:S> * <var:O> * <var:D> = <var:F> ) . Theorem <genP:1> : <def:seven-composite> <nat:332640> . Proof . unfold <def:seven-composite> . exists <nat:8> . exists <nat:9> . exists <nat:2> . exists <nat:10> . exists <nat:7> . exists <nat:3> . exists <nat:11> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 