\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:O> \times <nat:394> + <var:R> \times <nat:44> + <nat:36> \times <var:s> + <nat:111> $ is guaranteed to be odd using every $ <var:O> $ , $ <var:s> $ , and $ <var:R> \in \mathbb{N} $ . \end{theorem} \begin{proof} We justify the claim holds . Take note the expression $ <nat:111> + <var:O> \cdot <nat:394> + <nat:44> \cdot <var:R> + <nat:36> \cdot <var:s> $ is known as odd from the knowledge the expression $ <var:O> <nat:394> + <var:R> <nat:44> + <nat:36> <var:s> $ is known as even . What's more , the products $ <nat:394> * <var:O> $ , $ <nat:44> * <var:R> $ , as well as $ <var:s> * <nat:36> $ are guaranteed to be even as a consequence that multiplying between an even natural with some natural number will be an even integer . This fact is true as a consequence that the whole numbers $ <nat:394> $ , $ <nat:44> $ , and also $ <nat:36> $ are known to be even . The adding between an even number with an odd number in $ \mathbb{N} $ is guaranteed to be by definition an odd integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:O> <var:s> <var:R> : nat , Nat . odd ( <nat:394> * <var:O> + <nat:44> * <var:R> + <nat:36> * <var:s> + <nat:111> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:O> + <nat:44> * <var:R> + <nat:36> * <var:s> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 