\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:L> <nat:254> + <nat:265> + <nat:92> <var:Y> + <nat:142> <var:i> + <var:T> <nat:272> + <nat:72> <var:h> + <nat:384> <var:X> + <var:c> <nat:40> + <var:k> <nat:194> $ will be odd with every positive terms $ <var:L> $ , $ <var:k> $ , $ <var:c> $ , $ <var:X> $ , $ <var:h> $ , $ <var:i> $ , $ <var:Y> $ , and $ <var:T> $ . \end{theorem} \begin{proof} Take note $ <nat:265> $ is obviously odd . It can be verified that the expression $ <var:c> <nat:40> + <var:Y> <nat:92> + <var:k> <nat:194> + <var:i> <nat:142> + <var:h> <nat:72> + <nat:265> + <var:T> <nat:272> + <nat:254> <var:L> + <nat:384> <var:X> $ is guaranteed to be odd . Our lemma is proven from the knowledge $ <nat:72> * <var:h> + <nat:254> * <var:L> + <var:k> * <nat:194> + <var:Y> * <nat:92> + <nat:384> * <var:X> + <nat:142> * <var:i> + <var:T> * <nat:272> + <nat:40> * <var:c> $ is clearly even . The numbers $ <nat:72> $ , $ <nat:254> $ , $ <nat:194> $ , $ <nat:92> $ , $ <nat:384> $ , $ <nat:142> $ , $ <nat:272> $ , and also $ <nat:40> $ are obviously even numbers . As a consequence , the pairs $ <nat:72> * <var:h> $ , $ <nat:254> * <var:L> $ , $ <var:k> * <nat:194> $ , $ <var:Y> * <nat:92> $ , $ <nat:384> * <var:X> $ , $ <var:i> * <nat:142> $ , $ <var:T> * <nat:272> $ , in addition to $ <nat:40> * <var:c> $ will be even additionally . The expression $ <var:T> \cdot <nat:272> + <nat:142> \cdot <var:i> + <var:k> \cdot <nat:194> + <nat:92> \cdot <var:Y> + <var:c> \cdot <nat:40> + <nat:254> \cdot <var:L> + <nat:384> \cdot <var:X> + <nat:72> \cdot <var:h> $ is guaranteed to be even from the knowledge taking the product between even integers and a positive integer is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:k> <var:c> <var:X> <var:h> <var:i> <var:Y> <var:T> : nat , Nat . odd ( <nat:254> * <var:L> + <nat:92> * <var:Y> + <nat:142> * <var:i> + <nat:272> * <var:T> + <nat:72> * <var:h> + <nat:384> * <var:X> + <nat:40> * <var:c> + <nat:194> * <var:k> + <nat:265> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:265> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:142> = true ) . { auto . } assert ( <genH> : Nat . even <nat:272> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:72> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:L> + <nat:92> * <var:Y> + <nat:142> * <var:i> + <nat:272> * <var:T> + <nat:72> * <var:h> + <nat:384> * <var:X> + <nat:40> * <var:c> + <nat:194> * <var:k> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 