\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:W> \times <nat:244> + <nat:174> \times <var:h> + <var:X> \times <nat:144> + <nat:47> + <var:p> \times <nat:28> $ will be odd . \end{theorem} \begin{proof} $ <nat:174> <var:h> + <nat:28> <var:p> + <var:X> <nat:144> + <nat:244> <var:W> $ is guaranteed to be even . Take note the numbers $ <nat:174> $ , $ <nat:28> $ , $ <nat:144> $ , $ <nat:244> $ , are known to be even . Consequently , the products $ <nat:174> * <var:h> $ , $ <nat:28> * <var:p> $ , $ <var:X> * <nat:144> $ , $ <nat:244> * <var:W> $ , is guaranteed to be even in addition . From the knowledge taking the product of even numbers and a integer will be even the summation $ <nat:28> <var:p> + <nat:174> <var:h> + <var:W> <nat:244> + <nat:144> <var:X> $ must be even . We check our main result is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:W> <var:h> <var:X> <var:p> : nat , Nat . odd ( <nat:244> * <var:W> + <nat:174> * <var:h> + <nat:144> * <var:X> + <nat:28> * <var:p> + <nat:47> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:174> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:244> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:174> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:244> * <var:W> + <nat:174> * <var:h> + <nat:144> * <var:X> + <nat:28> * <var:p> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 