\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every $ <var:m> $ , $ <var:D> $ , $ <var:C> $ , $ <var:Y> $ , $ <var:f> $ , $ <var:g> $ , and $ <var:K> \in \mathbb{Z}^+ $ $ <nat:318> \cdot <var:m> + <nat:176> \cdot <var:Y> + <nat:92> \cdot <var:g> + <nat:485> + <var:K> \cdot <nat:252> + <var:C> \cdot <nat:262> + <var:D> \cdot <nat:448> + <nat:260> \cdot <var:f> $ is odd . \end{theorem} \begin{proof} It can be shown that $ <nat:252> \times <var:K> + <nat:262> \times <var:C> + <var:g> \times <nat:92> + <var:f> \times <nat:260> + <nat:318> \times <var:m> + <nat:448> \times <var:D> + <nat:176> \times <var:Y> $ is trivially even . Additionally , notice the integers $ <nat:252> $ , $ <nat:262> $ , $ <nat:92> $ , $ <nat:260> $ , $ <nat:318> $ , $ <nat:448> $ , in addition to $ <nat:176> $ are clearly even . Therefore , the products $ <var:K> \cdot <nat:252> $ , $ <nat:262> \cdot <var:C> $ , $ <nat:92> \cdot <var:g> $ , $ <nat:260> \cdot <var:f> $ , $ <nat:318> \cdot <var:m> $ , $ <var:D> \cdot <nat:448> $ , additionally $ <var:Y> \cdot <nat:176> $ will be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:D> <var:C> <var:Y> <var:f> <var:g> <var:K> : nat , Nat . odd ( <nat:318> * <var:m> + <nat:176> * <var:Y> + <nat:92> * <var:g> + <nat:252> * <var:K> + <nat:262> * <var:C> + <nat:448> * <var:D> + <nat:260> * <var:f> + <nat:485> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even <nat:176> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:176> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:m> + <nat:176> * <var:Y> + <nat:92> * <var:g> + <nat:252> * <var:K> + <nat:262> * <var:C> + <nat:448> * <var:D> + <nat:260> * <var:f> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 