\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Only if we have $ <var:C> $ , $ <var:K> $ , $ <var:u> $ , $ <var:H> $ and $ <var:z> \geq <nat:2> $ so that for some positive integer $ <var:Q> $ , $ <var:z> \cdot <var:u> \cdot <var:K> \cdot <var:C> \cdot <var:H> = <var:Q> $ using some $ <var:u> $ , $ <var:z> $ , $ <var:H> $ , $ <var:C> $ , $ <var:K> \in \mathbb{N} $ , then define that $ <var:Q> $ is a <def:five-composite> positive integer . \end{definition} \begin{theorem} $ <var:Q> = <nat:5760> $ is a <def:five-composite> number . \end{theorem} \begin{proof} Recall that <nat:5760> is a <def:five-composite> natural number with the condition <nat:5760> is the product between natural numbers $ <var:H> $ , $ <var:u> $ , $ <var:C> $ , $ <var:z> $ and $ <var:K> $ satisfying the condition that $ <var:z> $ , $ <var:H> $ , $ <var:C> $ , $ <var:u> $ and $ <var:K> \geq <nat:2> $ . We show <nat:5760> is a <def:five-composite> integer because $ <nat:5760> = <var:K> \cdot <var:u> \cdot <var:z> \cdot <var:C> \cdot <var:H> $ produces $ <var:z> = <nat:3> $ , $ <var:u> = <nat:12> $ , $ <var:K> = <nat:10> $ , $ <var:H> = <nat:2> $ , $ <var:C> = <nat:8> $ as well as because $ <nat:10> $ , $ <nat:3> $ , $ <nat:8> $ , $ <nat:12> $ and $ <nat:2> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:Q> : nat ) := exists <var:u> <var:z> <var:H> <var:C> <var:K> : nat , ( <var:C> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:z> * <var:u> * <var:K> * <var:C> * <var:H> = <var:Q> ) . Theorem <genP:1> : <def:five-composite> <nat:5760> . Proof . unfold <def:five-composite> . exists <nat:12> . exists <nat:3> . exists <nat:2> . exists <nat:8> . exists <nat:10> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 