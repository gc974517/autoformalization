\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:252> <var:o> + <nat:428> <var:x> + <nat:115> + <nat:184> <var:d> + <var:J> <nat:432> + <nat:268> <var:f> + <nat:238> <var:a> + <var:z> <nat:148> + <nat:284> <var:B> $ must be odd with some integers $ <var:d> $ , $ <var:J> $ , $ <var:z> $ , $ <var:o> $ , $ <var:a> $ , $ <var:B> $ , $ <var:f> $ , and $ <var:x> $ . \end{theorem} \begin{proof} In addition , notice that the pairs $ <nat:252> \cdot <var:o> $ , $ <nat:428> \cdot <var:x> $ , $ <var:d> \cdot <nat:184> $ , $ <var:J> \cdot <nat:432> $ , $ <nat:268> \cdot <var:f> $ , $ <nat:238> \cdot <var:a> $ , $ <var:z> \cdot <nat:148> $ , and likewise $ <var:B> \cdot <nat:284> $ are obviously even by reason that the leading terms $ <nat:252> $ , $ <nat:428> $ , $ <nat:184> $ , $ <nat:432> $ , $ <nat:268> $ , $ <nat:238> $ , $ <nat:148> $ , and moreover $ <nat:284> $ are known as even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:J> <var:z> <var:o> <var:a> <var:B> <var:f> <var:x> : nat , Nat . odd ( <nat:252> * <var:o> + <nat:428> * <var:x> + <nat:184> * <var:d> + <nat:432> * <var:J> + <nat:268> * <var:f> + <nat:238> * <var:a> + <nat:148> * <var:z> + <nat:284> * <var:B> + <nat:115> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even <nat:432> = true ) . { auto . } assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even <nat:238> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:252> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:432> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 