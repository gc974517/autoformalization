\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We define that $ <var:M> $ is a <def:five-composite> natural number supposing with some $ <var:V> $ , $ <var:S> $ , $ <var:J> $ , $ <var:W> $ , $ <var:I> \in \mathbb{N} $ we have $ <var:I> $ , $ <var:W> $ , $ <var:J> $ , $ <var:S> $ and $ <var:V> \geq <nat:2> $ as well as with some natural number $ <var:M> $ , $ <var:S> \cdot <var:V> \cdot <var:I> \cdot <var:W> \cdot <var:J> = <var:M> $ . \end{definition} \begin{theorem} $ <var:M> = <nat:19440> $ is <def:five-composite> . \end{theorem} \begin{proof} Remember a <def:five-composite> is the multiplication between integers $ <var:S> $ , $ <var:J> $ , $ <var:I> $ , $ <var:W> $ , and $ <var:V> $ such that $ <var:W> $ , $ <var:J> $ , $ <var:S> $ , $ <var:I> $ , and $ <var:V> \geq <nat:2> $ . Take $ <var:W> = <nat:6> $ , $ <var:S> = <nat:12> $ , $ <var:I> = <nat:9> $ , $ <var:J> = <nat:3> $ , and $ <var:V> = <nat:10> $ . Observe that $ <nat:9> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:6> $ and $ <nat:10> $ are larger than or equal to <nat:2> . In addition notice that likewise $ <nat:19440> = <var:S> * <var:V> * <var:J> * <var:I> * <var:W> $ . This shows our formula is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:M> : nat ) := exists <var:V> <var:S> <var:J> <var:W> <var:I> : nat , ( <var:I> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:S> * <var:V> * <var:I> * <var:W> * <var:J> = <var:M> ) . Theorem <genP:1> : <def:five-composite> <nat:19440> . Proof . unfold <def:five-composite> . exists <nat:10> . exists <nat:12> . exists <nat:3> . exists <nat:6> . exists <nat:9> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 