\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:450> * <var:i> + <var:n> * <nat:138> + <nat:478> * <var:k> + <nat:349> + <nat:4> * <var:H> + <var:L> * <nat:264> + <nat:218> * <var:p> $ is odd . \end{theorem} \begin{proof} The products $ <nat:4> \cdot <var:H> $ , $ <var:i> \cdot <nat:450> $ , $ <nat:218> \cdot <var:p> $ , and likewise $ <nat:264> \cdot <var:L> $ are clearly even by reason that the product of an even element of $ \mathbb{N} $ with some number in $ \mathbb{N} $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ . Adding on , remember $ <nat:138> \cdot <var:n> $ is known as an even integer . This claim is true because the product of an even natural and an arbitrary integer must be trivially an even element of $ \mathbb{N} $ . The term $ <var:k> \cdot <nat:478> $ is known as even . Observe that $ <nat:349> $ is trivially an odd whole number . We justify $ <nat:478> \times <var:k> + <nat:218> \times <var:p> + <var:n> \times <nat:138> + <var:H> \times <nat:4> + <nat:264> \times <var:L> + <nat:450> \times <var:i> + <nat:349> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:i> <var:n> <var:k> <var:H> <var:L> <var:p> : nat , Nat . odd ( <nat:450> * <var:i> + <nat:138> * <var:n> + <nat:478> * <var:k> + <nat:4> * <var:H> + <nat:264> * <var:L> + <nat:218> * <var:p> + <nat:349> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:4> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:349> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 