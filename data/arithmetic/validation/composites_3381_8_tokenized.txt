\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We say that assuming there exist whole numbers $ <var:X> $ , $ <var:d> $ , $ <var:I> $ , $ <var:V> $ , $ <var:q> $ , $ <var:F> $ , $ <var:T> $ , $ <var:G> $ greater than or equivalent to <nat:2> . Define that some number $ <var:C> $ will be named a <def:eight-composite> natural number when $ <var:C> = <var:T> * <var:F> * <var:G> * <var:V> * <var:d> * <var:X> * <var:I> * <var:q> $ . Thus the natural number <nat:997920> is a <def:eight-composite> natural number . \end{theorem} \begin{proof} Let $ <var:V> = <nat:11> $ , $ <var:X> = <nat:6> $ , $ <var:F> = <nat:9> $ , $ <var:G> = <nat:2> $ , $ <var:q> = <nat:3> $ , $ <var:I> = <nat:7> $ , $ <var:T> = <nat:5> $ and $ <var:d> = <nat:8> $ . Notice that $ <var:q> = <nat:3> $ , $ <var:V> = <nat:11> $ , $ <var:G> = <nat:2> $ , $ <var:F> = <nat:9> $ , $ <var:T> = <nat:5> $ , $ <var:X> = <nat:6> $ , $ <var:I> = <nat:7> $ , and $ <var:d> = <nat:8> \geq <nat:2> $ . Similarly note still $ <nat:997920> = <nat:3> \times <nat:9> \times <nat:6> \times <nat:11> \times <nat:7> \times <nat:2> \times <nat:5> \times <nat:8> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:C> : nat ) := exists <var:X> <var:d> <var:I> <var:V> <var:q> <var:F> <var:T> <var:G> : nat , ( <var:X> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:C> = <var:T> * <var:F> * <var:G> * <var:V> * <var:d> * <var:X> * <var:I> * <var:q> ) . Theorem <genP:1> : <def:eight-composite> <nat:997920> . Proof . unfold <def:eight-composite> . exists <nat:6> . exists <nat:8> . exists <nat:7> . exists <nat:11> . exists <nat:3> . exists <nat:9> . exists <nat:5> . exists <nat:2> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 