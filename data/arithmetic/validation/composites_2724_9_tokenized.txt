\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We say that $ <var:Q> $ is a <def:nine-composite> integer given using some $ <var:P> $ , $ <var:F> $ , $ <var:b> $ , $ <var:I> $ , $ <var:s> $ , $ <var:t> $ , $ <var:u> $ , $ <var:o> $ , $ <var:D> \in \mathbb{Z}^+ $ we get $ <var:o> $ , $ <var:s> $ , $ <var:I> $ , $ <var:F> $ , $ <var:t> $ , $ <var:P> $ , $ <var:u> $ , $ <var:D> $ and $ <var:b> \geq <nat:2> $ as well as given $ <var:Q> \in \mathbb{N} $ , $ <var:s> \times <var:b> \times <var:D> \times <var:F> \times <var:I> \times <var:o> \times <var:t> \times <var:P> \times <var:u> = <var:Q> $ . Therefore $ <var:Q> = <nat:6842880> $ is a <def:nine-composite> number . \end{theorem} \begin{proof} Take $ <var:u> = <nat:4> $ , $ <var:t> = <nat:11> $ , $ <var:s> = <nat:8> $ , $ <var:D> = <nat:9> $ , $ <var:I> = <nat:6> $ , $ <var:P> = <nat:5> $ , $ <var:o> = <nat:3> $ , $ <var:b> = <nat:2> $ , $ <var:F> = <nat:12> $ . Further observe $ <nat:4> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:8> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:12> $ , and $ <nat:6> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:Q> : nat ) := exists <var:P> <var:F> <var:b> <var:I> <var:s> <var:t> <var:u> <var:o> <var:D> : nat , ( <var:o> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:t> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:s> * <var:b> * <var:D> * <var:F> * <var:I> * <var:o> * <var:t> * <var:P> * <var:u> = <var:Q> ) . Theorem <genP:1> : <def:nine-composite> <nat:6842880> . Proof . unfold <def:nine-composite> . exists <nat:5> . exists <nat:12> . exists <nat:2> . exists <nat:6> . exists <nat:8> . exists <nat:11> . exists <nat:4> . exists <nat:3> . exists <nat:9> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 