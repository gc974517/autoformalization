\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Define that $ <var:Q> $ is <def:seven-composite> given that given some $ <var:T> $ , $ <var:r> $ , $ <var:H> $ , $ <var:l> $ , $ <var:K> $ , $ <var:F> $ , $ <var:L> $ we get $ <var:Q> = <var:T> * <var:l> * <var:H> * <var:K> * <var:L> * <var:r> * <var:F> $ with $ <var:Q> \in \mathbb{N} $ plus such that $ <var:H> $ , $ <var:L> $ , $ <var:K> $ , $ <var:T> $ , $ <var:r> $ , $ <var:F> $ , $ <var:l> \geq <nat:2> $ . \end{definition} \begin{theorem} The number <nat:1995840> is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Remember that a <def:seven-composite> number is the product of $ <var:K> $ , $ <var:H> $ , $ <var:L> $ , $ <var:l> $ , $ <var:r> $ , $ <var:T> $ , $ <var:F> $ satisfying the condition that $ <var:r> $ , $ <var:F> $ , $ <var:T> $ , $ <var:K> $ , $ <var:L> $ , $ <var:H> $ , $ <var:l> > <nat:1> $ . Let $ <var:r> = <nat:5> $ , $ <var:l> = <nat:9> $ , $ <var:L> = <nat:11> $ , $ <var:T> = <nat:12> $ , $ <var:K> = <nat:8> $ , $ <var:F> = <nat:6> $ , $ <var:H> = <nat:7> $ . We show <nat:1995840> is a <def:seven-composite> positive integer . Further note that $ <nat:6> $ , $ <nat:8> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:5> $ , and $ <nat:12> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:Q> : nat ) := exists <var:T> <var:r> <var:H> <var:l> <var:K> <var:F> <var:L> : nat , ( <var:Q> = <var:T> * <var:l> * <var:H> * <var:K> * <var:L> * <var:r> * <var:F> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:1995840> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:5> . exists <nat:7> . exists <nat:9> . exists <nat:8> . exists <nat:6> . exists <nat:11> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 