\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:390> <var:L> + <nat:202> <var:Z> + <nat:294> <var:e> + <var:l> <nat:346> + <nat:406> <var:t> + <var:S> <nat:300> + <nat:338> <var:X> + <nat:333> $ is guaranteed to be odd . \end{theorem} \begin{proof} Notice that the natural number $ <nat:390> $ is known to be an even number in $ \mathbb{N} $ . In consequence , the term $ <var:L> \cdot <nat:390> $ is even too . The whole number $ <nat:300> $ is guaranteed to be even . As a consequence , the product $ <var:S> \cdot <nat:300> $ is guaranteed to be even additionally . Adding on , the coefficient $ <nat:346> $ is known to be even . Then , the product $ <var:l> \cdot <nat:346> $ is even as well . The pair $ <var:X> \cdot <nat:338> $ is guaranteed to be even . This fact is true since the product between an even element of $ \mathbb{N} $ and any natural is even . This is proven from the fact the integer $ <nat:338> $ is an even number . In addition to this , we know the integer $ <nat:202> $ is obviously an even element of $ \mathbb{N} $ . Therefore , the term $ <var:Z> \cdot <nat:202> $ must be even too . See that the pair $ <nat:294> \cdot <var:e> $ is known as an even natural number . This claim is proven from the fact taking the product of an even element of $ \mathbb{Z}^+ $ with a integer will be even in addition to the whole number $ <nat:294> $ is clearly even . The positive integer $ <nat:406> $ is known as an even integer . Hence , the pair $ <nat:406> \cdot <var:t> $ is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:Z> <var:e> <var:l> <var:t> <var:S> <var:X> : nat , Nat . odd ( <nat:390> * <var:L> + <nat:202> * <var:Z> + <nat:294> * <var:e> + <nat:346> * <var:l> + <nat:406> * <var:t> + <nat:300> * <var:S> + <nat:338> * <var:X> + <nat:333> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:390> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 