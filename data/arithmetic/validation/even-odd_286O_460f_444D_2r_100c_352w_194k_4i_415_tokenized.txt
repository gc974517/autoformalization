\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:194> \times <var:k> + <nat:444> \times <var:D> + <nat:286> \times <var:O> + <var:r> \times <nat:2> + <nat:100> \times <var:c> + <nat:460> \times <var:f> + <var:i> \times <nat:4> + <var:w> \times <nat:352> + <nat:415> $ must be odd using unknowns $ <var:k> $ , $ <var:O> $ , $ <var:D> $ , $ <var:i> $ , $ <var:r> $ , $ <var:w> $ , $ <var:c> $ , and $ <var:f> $ . \end{theorem} \begin{proof} Take note $ <nat:415> $ is clearly odd . It can be proven that $ <var:w> \cdot <nat:352> + <nat:415> + <nat:2> \cdot <var:r> + <var:k> \cdot <nat:194> + <var:c> \cdot <nat:100> + <var:D> \cdot <nat:444> + <nat:286> \cdot <var:O> + <nat:4> \cdot <var:i> + <nat:460> \cdot <var:f> $ must be odd . The whole number $ <nat:286> $ is guaranteed to be even . In consequence , the term $ <var:O> \cdot <nat:286> $ is even in addition . Adding on , the number $ <nat:460> $ is even . Then , the term $ <var:f> \cdot <nat:460> $ is guaranteed to be even in addition . What's more , remember the integer $ <nat:444> $ is known to be even . Consequently , the product $ <nat:444> \cdot <var:D> $ is even as well . In addition , observe that the whole number $ <nat:2> $ is clearly an even natural number . Accordingly , the pair $ <nat:2> \cdot <var:r> $ must be even as well . See that $ <var:c> \cdot <nat:100> $ is trivially an even number in $ \mathbb{Z}^+ $ since taking the product of an even element of $ \mathbb{N} $ with a natural will be an even element of $ \mathbb{Z}^+ $ in addition to the natural number $ <nat:100> $ is by itself an even natural number . Adding on , the term $ <nat:352> \cdot <var:w> $ is trivially even by reason that multiplying of an even integer and any integer is an even number , which holds from the fact the integer $ <nat:352> $ is guaranteed to be even . Take note the integer $ <nat:194> $ is known as even . So , the pair $ <nat:194> \cdot <var:k> $ is even in addition . See that $ <var:i> \cdot <nat:4> $ is trivially even . This claim must be true from the fact multiplying of an even integer with some positive integer will be an even positive integer , which holds from the fact the whole number $ <nat:4> $ is obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:O> <var:D> <var:i> <var:r> <var:w> <var:c> <var:f> : nat , Nat . odd ( <nat:194> * <var:k> + <nat:444> * <var:D> + <nat:286> * <var:O> + <nat:2> * <var:r> + <nat:100> * <var:c> + <nat:460> * <var:f> + <nat:4> * <var:i> + <nat:352> * <var:w> + <nat:415> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:415> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:194> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 