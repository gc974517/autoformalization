\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:G> $ , $ <var:e> $ , $ <var:O> $ , $ <var:M> $ , $ <var:i> $ , $ <var:k> $ , $ <var:A> $ , $ <var:c> \in \mathbb{Z}^+ $ . Define that some $ <var:Q> $ is defined as a <def:eight-composite> integer given $ <var:Q> = <var:c> * <var:e> * <var:k> * <var:G> * <var:M> * <var:O> * <var:i> * <var:A> $ and unique terms are larger than or equal to <nat:2> . \end{definition} \begin{theorem} The positive integer <nat:7257600> is a <def:eight-composite> positive integer . \end{theorem} \begin{proof} Recall that a <def:eight-composite> positive integer is the product between numbers $ <var:k> $ , $ <var:e> $ , $ <var:G> $ , $ <var:A> $ , $ <var:i> $ , $ <var:O> $ , $ <var:M> $ and $ <var:c> $ satisfying the condition that $ <var:G> $ , $ <var:i> $ , $ <var:c> $ , $ <var:k> $ , $ <var:A> $ , $ <var:O> $ , $ <var:e> $ , $ <var:M> \geq <nat:2> $ . Notice $ <var:i> \times <var:e> \times <var:O> \times <var:k> \times <var:G> \times <var:A> \times <var:c> \times <var:M> = <nat:7257600> = <nat:6> \times <nat:9> \times <nat:10> \times <nat:5> \times <nat:4> \times <nat:8> \times <nat:12> \times <nat:7> $ . This produces the claim holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:Q> : nat ) := exists <var:G> <var:e> <var:O> <var:M> <var:i> <var:k> <var:A> <var:c> : nat , ( <var:Q> = <var:c> * <var:e> * <var:k> * <var:G> * <var:M> * <var:O> * <var:i> * <var:A> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) . Theorem <genP:1> : <def:eight-composite> <nat:7257600> . Proof . unfold <def:eight-composite> . exists <nat:4> . exists <nat:9> . exists <nat:10> . exists <nat:7> . exists <nat:6> . exists <nat:5> . exists <nat:8> . exists <nat:12> . repeat split . all : lia . Qed . 