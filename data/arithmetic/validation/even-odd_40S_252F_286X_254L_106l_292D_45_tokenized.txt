\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:292> \times <var:D> + <var:l> \times <nat:106> + <var:X> \times <nat:286> + <nat:45> + <var:S> \times <nat:40> + <var:F> \times <nat:252> + <nat:254> \times <var:L> $ must be odd with natural terms $ <var:F> $ , $ <var:S> $ , $ <var:L> $ , $ <var:l> $ , $ <var:D> $ , and $ <var:X> $ . \end{theorem} \begin{proof} We apply the understanding that $ <nat:40> \cdot <var:S> + <var:F> \cdot <nat:252> + <nat:286> \cdot <var:X> + <nat:254> \cdot <var:L> + <nat:106> \cdot <var:l> + <nat:292> \cdot <var:D> $ is even , from the fact the summing of an even number in $ \mathbb{N} $ and an even element of $ \mathbb{Z}^+ $ is an even natural number . The positive integers $ <nat:292> $ , $ <nat:106> $ , $ <nat:40> $ , and also $ <nat:254> $ are guaranteed to be even In addition to this , notice the natural number $ <nat:286> $ is trivially even Remember the leading term $ <nat:252> $ is obviously even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:S> <var:L> <var:l> <var:D> <var:X> : nat , Nat . odd ( <nat:292> * <var:D> + <nat:106> * <var:l> + <nat:286> * <var:X> + <nat:40> * <var:S> + <nat:252> * <var:F> + <nat:254> * <var:L> + <nat:45> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even <nat:252> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:D> + <nat:106> * <var:l> + <nat:286> * <var:X> + <nat:40> * <var:S> + <nat:252> * <var:F> + <nat:254> * <var:L> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 