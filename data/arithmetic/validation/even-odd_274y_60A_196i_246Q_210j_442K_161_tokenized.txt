\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:A> * <nat:60> + <nat:274> * <var:y> + <nat:196> * <var:i> + <nat:442> * <var:K> + <nat:161> + <nat:210> * <var:j> + <var:Q> * <nat:246> $ is guaranteed to be odd using all integers $ <var:Q> $ , $ <var:A> $ , $ <var:K> $ , $ <var:j> $ , $ <var:y> $ , and $ <var:i> $ . \end{theorem} \begin{proof} Notice the totaling between an even whole number with an odd natural number is odd . Remember that $ <nat:161> $ is trivially odd . The pair $ <nat:274> \times <var:y> $ is clearly an even integer as a consequence that the integer $ <nat:274> $ is guaranteed to be by itself an even element of $ \mathbb{N} $ . Furthermore , the term $ <nat:60> \times <var:A> $ is clearly an even number in $ \mathbb{N} $ by reason that multiplying of an even number in $ \mathbb{N} $ and an arbitrary number in $ \mathbb{N} $ must be itself an even natural number . This claim is proven as a consequence that the integer $ <nat:60> $ is clearly an even number . Notice the number $ <nat:196> $ is clearly even . In consequence , the product $ <var:i> \times <nat:196> $ will be even in addition . Additionally , recall that $ <var:Q> \times <nat:246> $ is known as even . This is true as a consequence that the whole number $ <nat:246> $ is trivially even . The number $ <nat:210> $ is clearly an even integer . Consequently , the product $ <var:j> \times <nat:210> $ is even at the same time . On top of this , the positive integer $ <nat:442> $ is an even number in $ \mathbb{N} $ . Accordingly , the term $ <nat:442> \times <var:K> $ is even at the same time . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:A> <var:K> <var:j> <var:y> <var:i> : nat , Nat . odd ( <nat:60> * <var:A> + <nat:274> * <var:y> + <nat:196> * <var:i> + <nat:442> * <var:K> + <nat:210> * <var:j> + <nat:246> * <var:Q> + <nat:161> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:161> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:442> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 