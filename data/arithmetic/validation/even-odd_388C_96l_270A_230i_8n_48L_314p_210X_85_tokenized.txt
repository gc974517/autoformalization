\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For any $ <var:l> $ , $ <var:A> $ , $ <var:p> $ , $ <var:n> $ , $ <var:i> $ , $ <var:L> $ , $ <var:C> $ , and $ <var:X> \in \mathbb{Z}^+ $ $ <var:C> \cdot <nat:388> + <var:l> \cdot <nat:96> + <var:A> \cdot <nat:270> + <nat:230> \cdot <var:i> + <nat:8> \cdot <var:n> + <var:L> \cdot <nat:48> + <var:p> \cdot <nat:314> + <nat:210> \cdot <var:X> + <nat:85> $ is odd . \end{theorem} \begin{proof} We prove our result is proven . Further , the coefficients $ <nat:388> $ , $ <nat:96> $ , $ <nat:270> $ , $ <nat:230> $ , $ <nat:8> $ , $ <nat:48> $ , $ <nat:314> $ , $ <nat:210> $ , are known as even . For this reason , the terms $ <nat:388> <var:C> $ , $ <var:l> <nat:96> $ , $ <nat:270> <var:A> $ , $ <nat:230> <var:i> $ , $ <var:n> <nat:8> $ , $ <nat:48> <var:L> $ , $ <nat:314> <var:p> $ , $ <nat:210> <var:X> $ , must be even at the same time . The summation between an even number and an odd number is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:l> <var:A> <var:p> <var:n> <var:i> <var:L> <var:C> <var:X> : nat , Nat . odd ( <nat:388> * <var:C> + <nat:96> * <var:l> + <nat:270> * <var:A> + <nat:230> * <var:i> + <nat:8> * <var:n> + <nat:48> * <var:L> + <nat:314> * <var:p> + <nat:210> * <var:X> + <nat:85> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:96> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 