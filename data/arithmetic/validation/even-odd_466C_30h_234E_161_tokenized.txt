\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:C> <nat:466> + <var:E> <nat:234> + <nat:30> <var:h> + <nat:161> $ must be odd assuming any whole numbers $ <var:E> $ , $ <var:C> $ , and $ <var:h> $ . \end{theorem} \begin{proof} It can be shown that $ <nat:161> + <nat:30> \times <var:h> + <var:C> \times <nat:466> + <nat:234> \times <var:E> $ is guaranteed to be odd . It can be shown that $ <var:C> <nat:466> + <var:h> <nat:30> + <var:E> <nat:234> $ is clearly even , as a consequence that the adding between even numbers with an even whole number is even . The pair $ <var:h> \times <nat:30> $ is guaranteed to be an even element of $ \mathbb{N} $ . This claim is proven because taking the product between an even number in $ \mathbb{N} $ with any positive integer must be trivially an even integer . In addition to this , take note the product $ <nat:234> \times <var:E> $ is trivially even . This fact must be true since the product of an even integer and any natural will be even . The pair $ <nat:466> \times <var:C> $ is trivially even . and also as a consequence that taking the product between even numbers in $ \mathbb{N} $ with any element of $ \mathbb{Z}^+ $ will be by itself an even element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:C> <var:h> : nat , Nat . odd ( <nat:466> * <var:C> + <nat:234> * <var:E> + <nat:30> * <var:h> + <nat:161> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:30> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:C> + <nat:234> * <var:E> + <nat:30> * <var:h> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 