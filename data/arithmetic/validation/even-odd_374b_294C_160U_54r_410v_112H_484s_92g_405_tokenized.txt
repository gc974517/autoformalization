\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For integers $ <var:r> $ , $ <var:U> $ , $ <var:g> $ , $ <var:v> $ , $ <var:s> $ , $ <var:H> $ , $ <var:b> $ , and $ <var:C> $ the summation $ <nat:112> \times <var:H> + <nat:405> + <nat:294> \times <var:C> + <var:b> \times <nat:374> + <nat:92> \times <var:g> + <nat:54> \times <var:r> + <var:v> \times <nat:410> + <var:U> \times <nat:160> + <nat:484> \times <var:s> $ must be odd . \end{theorem} \begin{proof} This theorem holds by reason that $ <var:U> \cdot <nat:160> + <var:b> \cdot <nat:374> + <nat:294> \cdot <var:C> + <var:g> \cdot <nat:92> + <nat:484> \cdot <var:s> + <var:H> \cdot <nat:112> + <var:v> \cdot <nat:410> + <var:r> \cdot <nat:54> $ is clearly even . The summation $ <nat:374> \cdot <var:b> + <nat:294> \cdot <var:C> + <var:U> \cdot <nat:160> + <nat:54> \cdot <var:r> + <var:v> \cdot <nat:410> + <var:H> \cdot <nat:112> + <nat:484> \cdot <var:s> + <nat:92> \cdot <var:g> $ is guaranteed to be instrinsically even by reason that the summing between even positive integers with even positive integers will be even as well as from the knowledge taking the product between an even whole number with some number in $ \mathbb{Z}^+ $ is guaranteed to be even . Remember that $ <nat:405> $ is guaranteed to be an odd integer . We check the proposition must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:U> <var:g> <var:v> <var:s> <var:H> <var:b> <var:C> : nat , Nat . odd ( <nat:112> * <var:H> + <nat:294> * <var:C> + <nat:374> * <var:b> + <nat:92> * <var:g> + <nat:54> * <var:r> + <nat:410> * <var:v> + <nat:160> * <var:U> + <nat:484> * <var:s> + <nat:405> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:112> * <var:H> + <nat:294> * <var:C> + <nat:374> * <var:b> + <nat:92> * <var:g> + <nat:54> * <var:r> + <nat:410> * <var:v> + <nat:160> * <var:U> + <nat:484> * <var:s> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:405> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 