\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:T> \cdot <nat:496> + <nat:337> + <nat:68> \cdot <var:F> + <nat:406> \cdot <var:A> + <var:V> \cdot <nat:38> $ is guaranteed to be odd assuming every unknowns $ <var:A> $ , $ <var:V> $ , $ <var:T> $ , and $ <var:F> $ . \end{theorem} \begin{proof} The pairs $ <var:T> * <nat:496> $ and likewise $ <var:F> * <nat:68> $ are guaranteed to be even . This is true as a consequence that the multiplication of an even number in $ \mathbb{Z}^+ $ and an arbitrary number is even as well as the integers $ <nat:496> $ as well as $ <nat:68> $ are guaranteed to be even . Remember that the natural number $ <nat:406> $ is known to be an even number in $ \mathbb{N} $ . Then , the term $ <nat:406> * <var:A> $ is guaranteed to be even additionally . In addition to this , see the term $ <nat:38> * <var:V> $ is guaranteed to be an even number in $ \mathbb{N} $ . This holds because the product between an even natural number and a number in $ \mathbb{Z}^+ $ is guaranteed to be even . This is true as a consequence that the leading term $ <nat:38> $ is known to be even . The addition between an even element of $ \mathbb{N} $ and an odd element of $ \mathbb{N} $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:V> <var:T> <var:F> : nat , Nat . odd ( <nat:496> * <var:T> + <nat:68> * <var:F> + <nat:406> * <var:A> + <nat:38> * <var:V> + <nat:337> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:38> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:38> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 