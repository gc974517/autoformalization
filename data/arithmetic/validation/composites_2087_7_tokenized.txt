\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} $ \exists <var:a> $ , $ <var:M> $ , $ <var:m> $ , $ <var:V> $ , $ <var:R> $ , $ <var:G> $ , $ <var:P> \in \mathbb{Z}^+ $ satisfying the condition that $ <var:V> $ , $ <var:m> $ , $ <var:R> $ , $ <var:a> $ , $ <var:M> $ , $ <var:G> $ , and $ <var:P> \geq <nat:2> $ . We define that some whole number $ <var:h> $ is called a <def:seven-composite> integer assuming $ <var:h> = <var:m> * <var:a> * <var:R> * <var:V> * <var:M> * <var:P> * <var:G> $ . \end{definition} \begin{theorem} The positive integer <nat:155520> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Assume $ <var:a> = <nat:12> $ , $ <var:m> = <nat:4> $ , $ <var:R> = <nat:9> $ , $ <var:M> = <nat:3> $ , $ <var:G> = <nat:6> $ , $ <var:V> = <nat:2> $ and $ <var:P> = <nat:10> $ . We verify the thesis is true in view of $ <var:m> = <nat:4> $ , $ <var:V> = <nat:2> $ , $ <var:G> = <nat:6> $ , $ <var:M> = <nat:3> $ , $ <var:a> = <nat:12> $ , $ <var:P> = <nat:10> $ and $ <var:R> = <nat:9> \geq <nat:2> $ . Consequently , $ <var:P> $ , $ <var:m> $ , $ <var:M> $ , $ <var:V> $ , $ <var:R> $ , $ <var:a> $ , and $ <var:G> \geq <nat:2> $ and <nat:155520> is the product of $ <var:R> $ , $ <var:M> $ , $ <var:G> $ , $ <var:V> $ , $ <var:m> $ , $ <var:P> $ , and $ <var:a> \in \mathbb{N} $ has been verified . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:h> : nat ) := exists <var:a> <var:M> <var:m> <var:V> <var:R> <var:G> <var:P> : nat , ( <var:V> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:h> = <var:m> * <var:a> * <var:R> * <var:V> * <var:M> * <var:P> * <var:G> ) . Theorem <genP:1> : <def:seven-composite> <nat:155520> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:3> . exists <nat:4> . exists <nat:2> . exists <nat:9> . exists <nat:6> . exists <nat:10> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 