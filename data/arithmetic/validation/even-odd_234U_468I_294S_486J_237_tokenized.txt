\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:468> <var:I> + <nat:486> <var:J> + <var:S> <nat:294> + <var:U> <nat:234> + <nat:237> $ must be odd . \end{theorem} \begin{proof} We apply the fact the formula $ <nat:294> * <var:S> + <var:U> * <nat:234> + <nat:468> * <var:I> + <nat:486> * <var:J> $ is known as even . Observe that the integers $ <nat:294> $ , $ <nat:234> $ , $ <nat:468> $ , and moreover $ <nat:486> $ are trivially even . In consequence , the terms $ <nat:294> \times <var:S> $ , $ <var:U> \times <nat:234> $ , $ <nat:468> \times <var:I> $ , and also $ <var:J> \times <nat:486> $ must be even in addition . The expression $ <nat:234> \times <var:U> + <var:I> \times <nat:468> + <var:S> \times <nat:294> + <var:J> \times <nat:486> $ will be even since the multiplication of even naturals with any number is guaranteed to be even . Take note $ <nat:237> $ is clearly an odd element of $ \mathbb{N} $ . The totaling of even positive integers concurrently and an odd positive integer is an odd natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:J> <var:S> <var:U> : nat , Nat . odd ( <nat:468> * <var:I> + <nat:486> * <var:J> + <nat:294> * <var:S> + <nat:234> * <var:U> + <nat:237> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even <nat:486> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:486> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:I> + <nat:486> * <var:J> + <nat:294> * <var:S> + <nat:234> * <var:U> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:237> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 