\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:y> <nat:44> + <nat:106> <var:b> + <nat:75> + <nat:18> <var:X> + <nat:300> <var:O> + <nat:380> <var:D> + <var:R> <nat:122> + <nat:84> <var:K> + <nat:364> <var:o> $ will be odd for every $ <var:b> $ , $ <var:o> $ , $ <var:R> $ , $ <var:y> $ , $ <var:X> $ , $ <var:K> $ , $ <var:D> $ , and $ <var:O> \in \mathbb{N} $ . \end{theorem} \begin{proof} The addition between even positive integers together with an odd element of $ \mathbb{Z}^+ $ is guaranteed to be by its very nature an odd number . Then , the expression $ <var:R> \times <nat:122> + <nat:84> \times <var:K> + <var:o> \times <nat:364> + <var:y> \times <nat:44> + <nat:18> \times <var:X> + <nat:75> + <nat:380> \times <var:D> + <nat:106> \times <var:b> + <nat:300> \times <var:O> $ will be odd . See $ <nat:75> $ is clearly odd . We verify that $ <var:b> \cdot <nat:106> + <var:D> \cdot <nat:380> + <nat:84> \cdot <var:K> + <var:O> \cdot <nat:300> + <var:y> \cdot <nat:44> + <var:R> \cdot <nat:122> + <var:X> \cdot <nat:18> + <var:o> \cdot <nat:364> $ is obviously even . The products $ <var:b> \cdot <nat:106> $ , $ <var:D> \cdot <nat:380> $ , $ <nat:84> \cdot <var:K> $ , $ <var:O> \cdot <nat:300> $ , $ <nat:44> \cdot <var:y> $ , $ <var:R> \cdot <nat:122> $ , $ <nat:18> \cdot <var:X> $ , and also $ <nat:364> \cdot <var:o> $ are trivially even whole numbers . This claim is proven by reason that multiplying between an even whole number and an arbitrary integer is even as well as the natural numbers $ <nat:106> $ , $ <nat:380> $ , $ <nat:84> $ , $ <nat:300> $ , $ <nat:44> $ , $ <nat:122> $ , $ <nat:18> $ , plus $ <nat:364> $ are known as even . Because the addition of even whole numbers with even numbers in $ \mathbb{Z}^+ $ must be even , the main result is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:o> <var:R> <var:y> <var:X> <var:K> <var:D> <var:O> : nat , Nat . odd ( <nat:44> * <var:y> + <nat:106> * <var:b> + <nat:18> * <var:X> + <nat:300> * <var:O> + <nat:380> * <var:D> + <nat:122> * <var:R> + <nat:84> * <var:K> + <nat:364> * <var:o> + <nat:75> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:75> = true ) . { auto . } assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:380> = true ) . { auto . } assert ( <genH> : Nat . even <nat:84> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:44> = true ) . { auto . } assert ( <genH> : Nat . even <nat:122> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:380> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:122> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:y> + <nat:106> * <var:b> + <nat:18> * <var:X> + <nat:300> * <var:O> + <nat:380> * <var:D> + <nat:122> * <var:R> + <nat:84> * <var:K> + <nat:364> * <var:o> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 