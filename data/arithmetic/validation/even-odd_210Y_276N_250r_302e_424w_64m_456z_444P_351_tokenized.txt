\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:210> <var:Y> + <nat:351> + <var:N> <nat:276> + <nat:424> <var:w> + <nat:444> <var:P> + <var:m> <nat:64> + <var:e> <nat:302> + <nat:250> <var:r> + <nat:456> <var:z> $ is odd . \end{theorem} \begin{proof} The main result holds from the fact $ <var:w> <nat:424> + <nat:64> <var:m> + <nat:276> <var:N> + <var:e> <nat:302> + <var:r> <nat:250> + <nat:210> <var:Y> + <var:z> <nat:456> + <var:P> <nat:444> $ is obviously even . Observe that the product $ <nat:210> <var:Y> $ is known to be an even integer . This claim is true because the leading term $ <nat:210> $ is known as in itself an even number . The term $ <nat:276> <var:N> $ is known as an even number in $ \mathbb{N} $ as a consequence that the multiplication between an even number with some element of $ \mathbb{N} $ must be by its very nature an even whole number , which is true as a consequence that the integer $ <nat:276> $ is guaranteed to be even . In addition to this , the coefficient $ <nat:250> $ is obviously even . Thus , the pair $ <var:r> <nat:250> $ will be even as well . Further , the whole number $ <nat:302> $ is guaranteed to be an even number . Accordingly , the term $ <nat:302> <var:e> $ must be even too . Further , the integer $ <nat:424> $ is trivially an even whole number . As a consequence , the product $ <var:w> <nat:424> $ will be even as well . Take note the pair $ <nat:64> <var:m> $ is known to be an even element of $ \mathbb{Z}^+ $ . This claim is proven since the positive integer $ <nat:64> $ is guaranteed to be trivially an even number in $ \mathbb{N} $ . Further , recall that the number $ <nat:456> $ is guaranteed to be an even whole number . Therefore , the product $ <nat:456> <var:z> $ will be even additionally . See the pair $ <nat:444> <var:P> $ is known as even from the knowledge the number $ <nat:444> $ is trivially instrinsically an even whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:N> <var:w> <var:P> <var:m> <var:e> <var:r> <var:z> : nat , Nat . odd ( <nat:210> * <var:Y> + <nat:276> * <var:N> + <nat:424> * <var:w> + <nat:444> * <var:P> + <nat:64> * <var:m> + <nat:302> * <var:e> + <nat:250> * <var:r> + <nat:456> * <var:z> + <nat:351> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:302> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:302> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:424> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:424> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:Y> + <nat:276> * <var:N> + <nat:424> * <var:w> + <nat:444> * <var:P> + <nat:64> * <var:m> + <nat:302> * <var:e> + <nat:250> * <var:r> + <nat:456> * <var:z> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 