\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:y> * <nat:186> + <nat:39> + <nat:400> * <var:v> + <var:q> * <nat:8> + <nat:18> * <var:l> $ will be odd . \end{theorem} \begin{proof} See the addition between even naturals and an odd element of $ \mathbb{N} $ is odd . The sum $ <nat:18> \cdot <var:l> + <nat:39> + <nat:186> \cdot <var:y> + <var:q> \cdot <nat:8> + <nat:400> \cdot <var:v> $ is obviously odd because $ <var:q> <nat:8> + <nat:400> <var:v> + <nat:18> <var:l> + <var:y> <nat:186> $ is obviously even . Likewise , the pairs $ <var:q> \cdot <nat:8> $ , $ <var:v> \cdot <nat:400> $ , $ <var:l> \cdot <nat:18> $ , and also $ <nat:186> \cdot <var:y> $ are guaranteed to be even . This must be true from the knowledge multiplying of an even natural number and any number is guaranteed to be an even natural . This fact is proven from the knowledge the leading terms $ <nat:8> $ , $ <nat:400> $ , $ <nat:18> $ , and also $ <nat:186> $ are obviously even . We show the expression $ <nat:18> <var:l> + <var:q> <nat:8> + <nat:400> <var:v> + <nat:186> <var:y> + <nat:39> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:y> <var:v> <var:q> <var:l> : nat , Nat . odd ( <nat:186> * <var:y> + <nat:400> * <var:v> + <nat:8> * <var:q> + <nat:18> * <var:l> + <nat:39> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:8> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even <nat:186> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:y> + <nat:400> * <var:v> + <nat:8> * <var:q> + <nat:18> * <var:l> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 