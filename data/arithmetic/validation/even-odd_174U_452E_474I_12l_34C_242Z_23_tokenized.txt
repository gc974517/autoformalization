\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:E> <nat:452> + <nat:23> + <nat:12> <var:l> + <nat:34> <var:C> + <nat:242> <var:Z> + <nat:474> <var:I> + <nat:174> <var:U> $ will be odd . \end{theorem} \begin{proof} The expression $ <nat:242> \cdot <var:Z> + <var:U> \cdot <nat:174> + <var:E> \cdot <nat:452> + <var:I> \cdot <nat:474> + <nat:12> \cdot <var:l> + <nat:34> \cdot <var:C> $ is known to be even . The pairs $ <nat:452> \cdot <var:E> $ , $ <var:l> \cdot <nat:12> $ , and also $ <nat:242> \cdot <var:Z> $ are known to be even . This fact holds since the numbers $ <nat:452> $ , $ <nat:12> $ , and moreover $ <nat:242> $ are clearly even . Further , the product $ <var:U> \cdot <nat:174> $ is known to be even because the coefficient $ <nat:174> $ is known as an even number in $ \mathbb{Z}^+ $ . What's more , take note the product $ <nat:474> \cdot <var:I> $ is known to be an even integer as a consequence that taking the product between an even integer and a number in $ \mathbb{Z}^+ $ is clearly an even number in $ \mathbb{N} $ . This fact is proven since the integer $ <nat:474> $ is obviously obviously an even natural number . See that the positive integer $ <nat:34> $ is guaranteed to be an even element of $ \mathbb{N} $ . For this reason , the term $ <var:C> \cdot <nat:34> $ is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:l> <var:C> <var:Z> <var:I> <var:U> : nat , Nat . odd ( <nat:452> * <var:E> + <nat:12> * <var:l> + <nat:34> * <var:C> + <nat:242> * <var:Z> + <nat:474> * <var:I> + <nat:174> * <var:U> + <nat:23> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:242> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:242> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:174> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:174> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:E> + <nat:12> * <var:l> + <nat:34> * <var:C> + <nat:242> * <var:Z> + <nat:474> * <var:I> + <nat:174> * <var:U> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 