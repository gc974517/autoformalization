\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using any $ <var:G> $ , $ <var:F> $ , $ <var:h> $ , $ <var:f> $ , $ <var:W> $ , and $ <var:j> \in \mathbb{N} $ the formula $ <var:F> <nat:372> + <nat:368> <var:j> + <nat:292> <var:f> + <var:h> <nat:84> + <nat:256> <var:W> + <nat:320> <var:G> + <nat:49> $ must be odd . \end{theorem} \begin{proof} Take note the products $ <nat:256> * <var:W> $ , $ <var:h> * <nat:84> $ , and moreover $ <nat:320> * <var:G> $ must be even . $ <var:j> * <nat:368> $ is known as even by reason that taking the product between an even natural number and some number in $ \mathbb{Z}^+ $ will be instrinsically an even natural number . Take note that the product $ <nat:292> * <var:f> $ is obviously even from the knowledge taking the product of an even element of $ \mathbb{N} $ and a positive integer will be even . Likewise , we know that the pair $ <var:F> * <nat:372> $ is known as even . This fact must be true as a consequence that the product between an even integer and a number is fundamentally an even number . It can be proven that this theorem is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:F> <var:h> <var:f> <var:W> <var:j> : nat , Nat . odd ( <nat:372> * <var:F> + <nat:368> * <var:j> + <nat:292> * <var:f> + <nat:84> * <var:h> + <nat:256> * <var:W> + <nat:320> * <var:G> + <nat:49> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:256> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:84> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 