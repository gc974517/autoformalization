\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:42> \times <var:Z> + <nat:98> \times <var:d> + <nat:165> + <nat:54> \times <var:V> $ is guaranteed to be odd using natural numbers $ <var:d> $ , $ <var:Z> $ , and $ <var:V> $ . \end{theorem} \begin{proof} We use the assumption the fact that $ <nat:42> * <var:Z> + <var:d> * <nat:98> + <nat:165> + <nat:54> * <var:V> $ is guaranteed to be odd because the formula $ <nat:42> \times <var:Z> + <nat:98> \times <var:d> + <nat:54> \times <var:V> $ is clearly even , from the knowledge the summing of even numbers in $ \mathbb{Z}^+ $ concurrently and an even natural is guaranteed to be by its very nature an even integer . The coefficient $ <nat:98> $ is guaranteed to be even . Consequently , the term $ <var:d> * <nat:98> $ is guaranteed to be even too . In addition , the integer $ <nat:54> $ is clearly an even element of $ \mathbb{N} $ . In consequence , the pair $ <var:V> * <nat:54> $ is guaranteed to be even at the same time . The whole number $ <nat:42> $ is even . Consequently , $ <nat:42> * <var:Z> $ will be even in addition . and moreover since the multiplication between even positive integers with any whole number will be clearly an even natural number . The summing of an even number in $ \mathbb{Z}^+ $ with an odd element of $ \mathbb{Z}^+ $ will be an odd number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:Z> <var:V> : nat , Nat . odd ( <nat:42> * <var:Z> + <nat:98> * <var:d> + <nat:54> * <var:V> + <nat:165> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:42> * <var:Z> + <nat:98> * <var:d> + <nat:54> * <var:V> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 