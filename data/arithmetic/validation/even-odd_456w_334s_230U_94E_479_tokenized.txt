\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:479> + <nat:456> \cdot <var:w> + <var:E> \cdot <nat:94> + <nat:230> \cdot <var:U> + <nat:334> \cdot <var:s> $ must be odd assuming every integers $ <var:E> $ , $ <var:s> $ , $ <var:w> $ , and $ <var:U> $ . \end{theorem} \begin{proof} We use the assumption the knowledge the formula $ <nat:456> \times <var:w> + <var:E> \times <nat:94> + <var:U> \times <nat:230> + <var:s> \times <nat:334> $ is known as even , from the fact the totaling of even integers with an even natural is guaranteed to be even . The term $ <var:w> \times <nat:456> $ is known as an even number in $ \mathbb{Z}^+ $ since taking the product of an even natural with some number in $ \mathbb{N} $ is even . This must be true since the number $ <nat:456> $ is clearly instrinsically an even natural number . The positive integer $ <nat:334> $ is known as an even whole number . So , $ <nat:334> \times <var:s> $ is guaranteed to be even also . In addition , the term $ <var:U> \times <nat:230> $ is even as a consequence that the whole number $ <nat:230> $ is known as even . The whole number $ <nat:94> $ is trivially even . Consequently , $ <var:E> \times <nat:94> $ must be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:s> <var:w> <var:U> : nat , Nat . odd ( <nat:456> * <var:w> + <nat:94> * <var:E> + <nat:230> * <var:U> + <nat:334> * <var:s> + <nat:479> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:w> + <nat:94> * <var:E> + <nat:230> * <var:U> + <nat:334> * <var:s> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 