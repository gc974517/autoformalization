\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:q> $ , $ <var:p> $ , $ <var:E> $ , $ <var:s> $ , $ <var:R> $ , $ <var:D> $ , $ <var:V> \in \mathbb{N} $ . Say that $ <var:b> \in \mathbb{Z}^+ $ will be considered a <def:seven-composite> positive integer given $ <var:R> * <var:p> * <var:q> * <var:E> * <var:D> * <var:s> * <var:V> = <var:b> $ as well as factors are more than or equal to <nat:2> . \end{definition} \begin{theorem} The positive integer <nat:443520> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Remember <nat:443520> is a <def:seven-composite> integer assuming <nat:443520> is the product between $ <var:p> $ , $ <var:V> $ , $ <var:D> $ , $ <var:E> $ , $ <var:s> $ , $ <var:q> $ , $ <var:R> $ larger than or equivalent to <nat:2> . Notice $ <nat:443520> = <var:D> \cdot <var:V> \cdot <var:E> \cdot <var:s> \cdot <var:p> \cdot <var:R> \cdot <var:q> = <nat:10> \cdot <nat:7> \cdot <nat:2> \cdot <nat:6> \cdot <nat:12> \cdot <nat:11> \cdot <nat:4> $ . In addition observe that $ <nat:6> $ , $ <nat:12> $ , $ <nat:2> $ , $ <nat:10> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:11> $ are greater than or equal to <nat:2> . This indicates <nat:443520> is a <def:seven-composite> number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:b> : nat ) := exists <var:q> <var:p> <var:E> <var:s> <var:R> <var:D> <var:V> : nat , ( <var:R> * <var:p> * <var:q> * <var:E> * <var:D> * <var:s> * <var:V> = <var:b> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:443520> . Proof . unfold <def:seven-composite> . exists <nat:4> . exists <nat:12> . exists <nat:2> . exists <nat:6> . exists <nat:11> . exists <nat:10> . exists <nat:7> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 