\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We assume that whenever there exist numbers $ <var:C> $ , $ <var:y> $ , $ <var:d> $ , $ <var:q> $ , $ <var:w> $ , $ <var:P> $ , $ <var:e> $ take as given that some whole number $ <var:F> $ is a <def:seven-composite> whole number if $ <var:C> \times <var:d> \times <var:y> \times <var:w> \times <var:q> \times <var:P> \times <var:e> = <var:F> $ and unique terms are more than or equivalent to <nat:2> . So $ <var:F> = <nat:253440> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Let $ <var:q> = <nat:6> $ , $ <var:C> = <nat:12> $ , $ <var:y> = <nat:5> $ , $ <var:e> = <nat:8> $ , $ <var:w> = <nat:11> $ , $ <var:P> = <nat:4> $ , and $ <var:d> = <nat:2> $ . Notice that $ <var:d> = <nat:2> $ , $ <var:C> = <nat:12> $ , $ <var:P> = <nat:4> $ , $ <var:e> = <nat:8> $ , $ <var:q> = <nat:6> $ , $ <var:w> = <nat:11> $ , $ <var:y> = <nat:5> \geq <nat:2> $ . Further note that additionally $ <var:e> \times <var:q> \times <var:d> \times <var:y> \times <var:C> \times <var:w> \times <var:P> = <nat:253440> $ . This gives <nat:253440> is a <def:seven-composite> whole number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:F> : nat ) := exists <var:C> <var:y> <var:d> <var:q> <var:w> <var:P> <var:e> : nat , ( <var:C> * <var:d> * <var:y> * <var:w> * <var:q> * <var:P> * <var:e> = <var:F> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:253440> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:5> . exists <nat:2> . exists <nat:6> . exists <nat:11> . exists <nat:4> . exists <nat:8> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 