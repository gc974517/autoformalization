\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With positive terms $ <var:v> $ , $ <var:o> $ , $ <var:Q> $ , $ <var:n> $ , $ <var:X> $ , and $ <var:O> $ the formula $ <var:n> \cdot <nat:70> + <var:Q> \cdot <nat:350> + <var:o> \cdot <nat:276> + <var:v> \cdot <nat:4> + <var:X> \cdot <nat:262> + <nat:2> \cdot <var:O> + <nat:305> $ will be odd . \end{theorem} \begin{proof} We check our main result is proven in accordance with the knowledge the summation of an even natural number with an odd element of $ \mathbb{Z}^+ $ is guaranteed to be odd . Take note the product $ <nat:70> \cdot <var:n> $ is known as an even number from the knowledge the integer $ <nat:70> $ is obviously an even whole number . What's more , we know that the positive integer $ <nat:2> $ is obviously an even number in $ \mathbb{N} $ . So , the pair $ <var:O> \cdot <nat:2> $ will be even as well . Remember the coefficient $ <nat:276> $ is known as even . Therefore , $ <nat:276> \cdot <var:o> $ will be even too . What's more , the number $ <nat:350> $ is guaranteed to be an even number . So , $ <var:Q> \cdot <nat:350> $ must be even in addition . $ <var:v> \cdot <nat:4> $ is known as an even element of $ \mathbb{N} $ . This fact is proven from the knowledge the product of an even positive integer and some element of $ \mathbb{N} $ is guaranteed to be even , which must be true from the fact the leading term $ <nat:4> $ is clearly instrinsically an even natural . Recall the natural number $ <nat:262> $ is guaranteed to be an even number in $ \mathbb{N} $ . Thus , the term $ <var:X> \cdot <nat:262> $ must be even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:o> <var:Q> <var:n> <var:X> <var:O> : nat , Nat . odd ( <nat:70> * <var:n> + <nat:350> * <var:Q> + <nat:276> * <var:o> + <nat:4> * <var:v> + <nat:262> * <var:X> + <nat:2> * <var:O> + <nat:305> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:2> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 