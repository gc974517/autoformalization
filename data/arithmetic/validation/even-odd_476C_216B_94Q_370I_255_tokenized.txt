\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:476> \times <var:C> + <nat:255> + <var:B> \times <nat:216> + <var:Q> \times <nat:94> + <nat:370> \times <var:I> $ is guaranteed to be odd . \end{theorem} \begin{proof} We prove the summation $ <nat:476> * <var:C> + <var:I> * <nat:370> + <nat:255> + <nat:94> * <var:Q> + <nat:216> * <var:B> $ is odd . We employ the knowledge the summation $ <var:I> <nat:370> + <nat:216> <var:B> + <nat:94> <var:Q> + <var:C> <nat:476> + <nat:255> $ is known as odd from the fact $ <nat:476> \times <var:C> + <nat:216> \times <var:B> + <nat:94> \times <var:Q> + <var:I> \times <nat:370> $ is obviously even . Furthermore , remember that the pairs $ <var:C> \times <nat:476> $ , $ <nat:216> \times <var:B> $ , $ <nat:94> \times <var:Q> $ , $ <nat:370> \times <var:I> $ , are trivially even whole numbers since the product between an even positive integer and any whole number is guaranteed to be an even integer , and holds from the fact the coefficients $ <nat:476> $ , $ <nat:216> $ , $ <nat:94> $ , $ <nat:370> $ , are trivially even elements of $ \mathbb{N} $ . Recall that the totaling between even integers concurrently with an odd number in $ \mathbb{N} $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:B> <var:Q> <var:I> : nat , Nat . odd ( <nat:476> * <var:C> + <nat:216> * <var:B> + <nat:94> * <var:Q> + <nat:370> * <var:I> + <nat:255> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:216> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:216> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:C> + <nat:216> * <var:B> + <nat:94> * <var:Q> + <nat:370> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 