\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} $ \exists <var:E> $ , $ <var:u> $ , $ <var:B> $ , $ <var:M> $ , $ <var:Y> $ , $ <var:U> $ , $ <var:j> \in \mathbb{N} $ such that $ <var:B> $ , $ <var:U> $ , $ <var:j> $ , $ <var:M> $ , $ <var:u> $ , $ <var:Y> $ and $ <var:E> \geq <nat:2> $ . Define that some $ <var:F> $ is considered a <def:seven-composite> positive integer assuming $ <var:F> = <var:E> \times <var:Y> \times <var:B> \times <var:U> \times <var:j> \times <var:M> \times <var:u> $ . \end{definition} \begin{theorem} $ <var:F> = <nat:177408> $ is a <def:seven-composite> natural number . \end{theorem} \begin{proof} Recall <nat:177408> is a <def:seven-composite> number supposing that it is the product of positive integers $ <var:B> $ , $ <var:E> $ , $ <var:U> $ , $ <var:M> $ , $ <var:u> $ , $ <var:j> $ , and $ <var:Y> $ larger than or equal to <nat:2> . Let $ <var:E> = <nat:11> $ , $ <var:B> = <nat:8> $ , $ <var:M> = <nat:2> $ , $ <var:u> = <nat:12> $ , $ <var:U> = <nat:7> $ , $ <var:j> = <nat:4> $ and $ <var:Y> = <nat:3> $ . Plus note $ <var:M> = <nat:2> $ , $ <var:u> = <nat:12> $ , $ <var:B> = <nat:8> $ , $ <var:U> = <nat:7> $ , $ <var:E> = <nat:11> $ , $ <var:j> = <nat:4> $ and $ <var:Y> = <nat:3> \geq <nat:2> $ . This shows our formula holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:F> : nat ) := exists <var:E> <var:u> <var:B> <var:M> <var:Y> <var:U> <var:j> : nat , ( <var:B> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:F> = <var:E> * <var:Y> * <var:B> * <var:U> * <var:j> * <var:M> * <var:u> ) . Theorem <genP:1> : <def:seven-composite> <nat:177408> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:12> . exists <nat:8> . exists <nat:2> . exists <nat:3> . exists <nat:7> . exists <nat:4> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 