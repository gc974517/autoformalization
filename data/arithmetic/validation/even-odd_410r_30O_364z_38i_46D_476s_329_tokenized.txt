\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:D> <nat:46> + <nat:30> <var:O> + <nat:329> + <nat:38> <var:i> + <var:s> <nat:476> + <nat:410> <var:r> + <var:z> <nat:364> $ is odd . \end{theorem} \begin{proof} Recall that $ <nat:329> $ is guaranteed to be odd . We check $ <var:r> \cdot <nat:410> + <nat:30> \cdot <var:O> + <var:z> \cdot <nat:364> + <nat:38> \cdot <var:i> + <nat:329> + <nat:46> \cdot <var:D> + <var:s> \cdot <nat:476> $ must be odd . Recall the integers $ <nat:410> $ , $ <nat:30> $ , $ <nat:364> $ , $ <nat:38> $ , $ <nat:46> $ , additionally $ <nat:476> $ are known to be even . Thus , the pairs $ <nat:410> \cdot <var:r> $ , $ <var:O> \cdot <nat:30> $ , $ <nat:364> \cdot <var:z> $ , $ <nat:38> \cdot <var:i> $ , $ <var:D> \cdot <nat:46> $ , additionally $ <nat:476> \cdot <var:s> $ must be even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:O> <var:i> <var:s> <var:r> <var:z> : nat , Nat . odd ( <nat:46> * <var:D> + <nat:30> * <var:O> + <nat:38> * <var:i> + <nat:476> * <var:s> + <nat:410> * <var:r> + <nat:364> * <var:z> + <nat:329> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:329> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:30> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:38> = true ) . { auto . } assert ( <genH> : Nat . even <nat:46> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:30> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:38> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:46> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 