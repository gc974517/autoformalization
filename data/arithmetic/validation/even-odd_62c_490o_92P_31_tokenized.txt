\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given every positive terms $ <var:o> $ , $ <var:P> $ , and $ <var:c> $ $ <nat:62> * <var:c> + <nat:31> + <var:o> * <nat:490> + <var:P> * <nat:92> $ will be odd . \end{theorem} \begin{proof} Take note $ <nat:31> $ is known to be an odd natural . Take note the summing between even integers collectively with an odd whole number is an odd natural . Observe that the formula $ <nat:92> * <var:P> + <var:o> * <nat:490> + <var:c> * <nat:62> $ is guaranteed to be even . Recall that the product $ <nat:490> * <var:o> $ is obviously even . The pair $ <nat:62> * <var:c> $ is an even integer . This claim must be true because the product of an even element of $ \mathbb{N} $ with some number will be even . Adding on , remember the pair $ <var:P> * <nat:92> $ is guaranteed to be an even element of $ \mathbb{N} $ as a consequence that taking the product of an even element of $ \mathbb{Z}^+ $ and any element of $ \mathbb{N} $ must be even . As a consequence that the adding of an even element of $ \mathbb{Z}^+ $ and an even element of $ \mathbb{N} $ must be even , the sum $ <nat:62> \times <var:c> + <var:o> \times <nat:490> + <nat:92> \times <var:P> $ will be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:P> <var:c> : nat , Nat . odd ( <nat:62> * <var:c> + <nat:490> * <var:o> + <nat:92> * <var:P> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:31> = true ) . { auto . } rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:490> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:62> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:62> * <var:c> + <nat:490> * <var:o> + <nat:92> * <var:P> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 