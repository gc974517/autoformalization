\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:172> * <var:S> + <nat:408> * <var:m> + <nat:314> * <var:F> + <var:i> * <nat:482> + <nat:179> + <var:P> * <nat:18> + <var:l> * <nat:282> + <nat:156> * <var:r> + <var:W> * <nat:98> $ must be odd . \end{theorem} \begin{proof} Observe that the positive integers $ <nat:172> $ , $ <nat:408> $ , $ <nat:314> $ , $ <nat:482> $ , $ <nat:18> $ , $ <nat:282> $ , $ <nat:156> $ , as well as $ <nat:98> $ are trivially even numbers in $ \mathbb{N} $ . For this reason , the products $ <var:S> \cdot <nat:172> $ , $ <var:m> \cdot <nat:408> $ , $ <nat:314> \cdot <var:F> $ , $ <var:i> \cdot <nat:482> $ , $ <var:P> \cdot <nat:18> $ , $ <nat:282> \cdot <var:l> $ , $ <nat:156> \cdot <var:r> $ , additionally $ <nat:98> \cdot <var:W> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:S> <var:m> <var:F> <var:i> <var:P> <var:l> <var:r> <var:W> : nat , Nat . odd ( <nat:172> * <var:S> + <nat:408> * <var:m> + <nat:314> * <var:F> + <nat:482> * <var:i> + <nat:18> * <var:P> + <nat:282> * <var:l> + <nat:156> * <var:r> + <nat:98> * <var:W> + <nat:179> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:172> = true ) . { auto . } assert ( <genH> : Nat . even <nat:408> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even <nat:18> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 