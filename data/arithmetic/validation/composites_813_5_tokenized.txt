\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With the condition that we have $ <var:m> $ , $ <var:Q> $ , $ <var:b> $ , $ <var:W> $ , $ <var:p> \geq <nat:2> $ where using some natural number $ <var:U> $ , $ <var:W> \times <var:Q> \times <var:p> \times <var:b> \times <var:m> = <var:U> $ , then we assume that $ <var:U> $ is a <def:five-composite> positive integer with some $ <var:Q> $ , $ <var:W> $ , $ <var:b> $ , $ <var:m> $ , $ <var:p> $ . Consequently the natural number <nat:19008> is a <def:five-composite> integer . \end{theorem} \begin{proof} Recall a <def:five-composite> whole number is the multiplication between natural numbers $ <var:p> $ , $ <var:m> $ , $ <var:b> $ , $ <var:Q> $ , and $ <var:W> $ such that $ <var:p> $ , $ <var:m> $ , $ <var:W> $ , $ <var:Q> $ and $ <var:b> \geq <nat:2> $ . Take $ <var:b> = <nat:12> $ , $ <var:p> = <nat:3> $ , $ <var:Q> = <nat:8> $ , $ <var:m> = <nat:11> $ and $ <var:W> = <nat:6> $ . Plus note that $ <var:Q> = <nat:8> $ , $ <var:p> = <nat:3> $ , $ <var:W> = <nat:6> $ , $ <var:b> = <nat:12> $ , and $ <var:m> = <nat:11> \geq <nat:2> $ . This indicates <nat:19008> is a <def:five-composite> number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:U> : nat ) := exists <var:Q> <var:W> <var:b> <var:m> <var:p> : nat , ( <var:m> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:W> * <var:Q> * <var:p> * <var:b> * <var:m> = <var:U> ) . Theorem <genP:1> : <def:five-composite> <nat:19008> . Proof . unfold <def:five-composite> . exists <nat:8> . exists <nat:6> . exists <nat:12> . exists <nat:11> . exists <nat:3> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 