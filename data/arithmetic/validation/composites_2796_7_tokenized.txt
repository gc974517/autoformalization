\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Only if we get $ <var:h> $ , $ <var:r> $ , $ <var:e> $ , $ <var:Z> $ , $ <var:l> $ , $ <var:i> $ , $ <var:s> \geq <nat:2> $ such that for $ <var:S> \in \mathbb{N} $ , $ <var:S> = <var:Z> \cdot <var:l> \cdot <var:e> \cdot <var:s> \cdot <var:r> \cdot <var:h> \cdot <var:i> $ taking some numbers $ <var:l> $ , $ <var:h> $ , $ <var:e> $ , $ <var:Z> $ , $ <var:s> $ , $ <var:i> $ , $ <var:r> $ , then we define that $ <var:S> $ is a <def:seven-composite> number . For this reason the natural number <nat:226800> is a <def:seven-composite> integer . \end{theorem} \begin{proof} We confirm $ <var:e> $ , $ <var:l> $ , $ <var:h> $ , $ <var:r> $ , $ <var:s> $ , $ <var:Z> $ and $ <var:i> \geq <nat:2> $ as well as <nat:226800> is the product of some numbers $ <var:h> $ , $ <var:r> $ , $ <var:i> $ , $ <var:Z> $ , $ <var:s> $ , $ <var:l> $ and $ <var:e> $ . Notice $ <nat:10> \cdot <nat:5> \cdot <nat:9> \cdot <nat:6> \cdot <nat:3> \cdot <nat:7> \cdot <nat:4> = <nat:226800> = <var:h> \cdot <var:s> \cdot <var:l> \cdot <var:i> \cdot <var:e> \cdot <var:Z> \cdot <var:r> $ . Similarly notice that $ <nat:6> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:10> $ , $ <nat:4> $ , $ <nat:7> $ , and $ <nat:3> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:S> : nat ) := exists <var:l> <var:h> <var:e> <var:Z> <var:s> <var:i> <var:r> : nat , ( <var:h> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:S> = <var:Z> * <var:l> * <var:e> * <var:s> * <var:r> * <var:h> * <var:i> ) . Theorem <genP:1> : <def:seven-composite> <nat:226800> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:10> . exists <nat:3> . exists <nat:7> . exists <nat:5> . exists <nat:6> . exists <nat:4> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 