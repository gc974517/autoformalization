\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:320> * <var:J> + <var:Y> * <nat:394> + <var:W> * <nat:432> + <var:r> * <nat:378> + <nat:191> $ must be odd . \end{theorem} \begin{proof} We utilize the knowledge $ <nat:378> \cdot <var:r> + <nat:320> \cdot <var:J> + <var:W> \cdot <nat:432> + <var:Y> \cdot <nat:394> + <nat:191> $ is known as odd from the knowledge $ <var:W> * <nat:432> + <nat:394> * <var:Y> + <var:r> * <nat:378> + <nat:320> * <var:J> $ is even . $ <var:r> <nat:378> $ is known as even . On top of this , remember the pair $ <var:W> <nat:432> $ is known as an even natural . This claim holds as a consequence that multiplying between an even number in $ \mathbb{N} $ with some whole number must be even . Take note the product $ <var:J> <nat:320> $ is even . Additionally , we know that the product $ <var:Y> <nat:394> $ is clearly an even positive integer . The expression $ <nat:320> \times <var:J> + <var:r> \times <nat:378> + <var:W> \times <nat:432> + <nat:394> \times <var:Y> $ must be even by reason that taking the product between even positive integers and a number in $ \mathbb{N} $ is guaranteed to be obviously an even natural . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:Y> <var:W> <var:r> : nat , Nat . odd ( <nat:320> * <var:J> + <nat:394> * <var:Y> + <nat:432> * <var:W> + <nat:378> * <var:r> + <nat:191> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:378> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:432> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:J> + <nat:394> * <var:Y> + <nat:432> * <var:W> + <nat:378> * <var:r> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 