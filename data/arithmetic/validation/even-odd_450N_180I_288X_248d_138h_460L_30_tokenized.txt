\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:h> <nat:138> + <var:d> <nat:248> + <var:N> <nat:450> + <nat:30> + <nat:460> <var:L> + <var:X> <nat:288> + <nat:180> <var:I> $ must be even . \end{theorem} \begin{proof} The expression $ <nat:248> <var:d> + <nat:450> <var:N> + <nat:138> <var:h> + <var:L> <nat:460> + <nat:288> <var:X> + <var:I> <nat:180> $ is even . Take note the product $ <var:N> <nat:450> $ is an even whole number by reason that the coefficient $ <nat:450> $ is an even whole number . What's more , the coefficient $ <nat:180> $ is known as an even number in $ \mathbb{Z}^+ $ . Therefore , the term $ <nat:180> <var:I> $ must be even also . $ <var:X> <nat:288> $ is trivially an even number . This claim holds since the leading term $ <nat:288> $ is guaranteed to be even . In addition to this , the leading term $ <nat:248> $ is even . So , the product $ <var:d> <nat:248> $ will be even at the same time . Take note that the positive integer $ <nat:138> $ is obviously an even natural . For this reason , the product $ <nat:138> <var:h> $ must be even also . Notice that the natural number $ <nat:460> $ is known as even . As a consequence , the product $ <nat:460> <var:L> $ is even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:d> <var:N> <var:L> <var:X> <var:I> : nat , Nat . even ( <nat:138> * <var:h> + <nat:248> * <var:d> + <nat:450> * <var:N> + <nat:460> * <var:L> + <nat:288> * <var:X> + <nat:180> * <var:I> + <nat:30> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:180> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:288> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:288> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:h> + <nat:248> * <var:d> + <nat:450> * <var:N> + <nat:460> * <var:L> + <nat:288> * <var:X> + <nat:180> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . rewrite <genH> . auto . Qed . 