\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:94> <var:v> + <nat:134> <var:e> + <nat:304> <var:w> + <var:T> <nat:48> + <var:W> <nat:170> + <var:S> <nat:386> + <nat:381> + <nat:346> <var:B> + <var:t> <nat:166> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know that the terms $ <nat:94> \times <var:v> $ , $ <var:e> \times <nat:134> $ , $ <nat:304> \times <var:w> $ , $ <var:T> \times <nat:48> $ , $ <nat:170> \times <var:W> $ , $ <nat:386> \times <var:S> $ , $ <nat:346> \times <var:B> $ , additionally $ <var:t> \times <nat:166> $ will be even as a consequence that the numbers $ <nat:94> $ , $ <nat:134> $ , $ <nat:304> $ , $ <nat:48> $ , $ <nat:170> $ , $ <nat:386> $ , $ <nat:346> $ , and likewise $ <nat:166> $ must be even integers . Notice that $ <nat:381> $ is known to be an odd integer . See the addition of an even element of $ \mathbb{N} $ with an odd number in $ \mathbb{N} $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:e> <var:w> <var:T> <var:W> <var:S> <var:B> <var:t> : nat , Nat . odd ( <nat:94> * <var:v> + <nat:134> * <var:e> + <nat:304> * <var:w> + <nat:48> * <var:T> + <nat:170> * <var:W> + <nat:386> * <var:S> + <nat:346> * <var:B> + <nat:166> * <var:t> + <nat:381> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even <nat:386> = true ) . { auto . } assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:381> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 