\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist positive integers $ <var:q> $ , $ <var:I> $ , $ <var:v> $ , $ <var:p> $ , $ <var:h> $ , $ <var:k> $ , $ <var:z> $ larger than or equivalent to <nat:2> . Say that some $ <var:U> $ is said to be a <def:seven-composite> integer given $ <var:U> = <var:k> * <var:p> * <var:h> * <var:I> * <var:v> * <var:z> * <var:q> $ . \end{definition} \begin{theorem} The whole number <nat:604800> is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Remember that <nat:604800> is a <def:seven-composite> natural number with the condition it is the product of $ <var:k> $ , $ <var:v> $ , $ <var:h> $ , $ <var:p> $ , $ <var:z> $ , $ <var:q> $ , and $ <var:I> $ more than or equivalent to <nat:2> . Assume $ <var:z> = <nat:10> $ , $ <var:q> = <nat:6> $ , $ <var:h> = <nat:12> $ , $ <var:p> = <nat:3> $ , $ <var:v> = <nat:5> $ , $ <var:k> = <nat:7> $ and $ <var:I> = <nat:8> $ . We verify our thesis is valid as $ <nat:5> $ , $ <nat:3> $ , $ <nat:12> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:7> $ , and $ <nat:8> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:U> : nat ) := exists <var:q> <var:I> <var:v> <var:p> <var:h> <var:k> <var:z> : nat , ( <var:q> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:U> = <var:k> * <var:p> * <var:h> * <var:I> * <var:v> * <var:z> * <var:q> ) . Theorem <genP:1> : <def:seven-composite> <nat:604800> . Proof . unfold <def:seven-composite> . exists <nat:6> . exists <nat:8> . exists <nat:5> . exists <nat:3> . exists <nat:12> . exists <nat:7> . exists <nat:10> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 