\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If $ \exists <var:A> $ , $ <var:C> $ , $ <var:t> $ , $ <var:a> $ , $ <var:m> $ , $ <var:T> $ , $ <var:H> $ , $ <var:p> \in \mathbb{N} $ we denote that some number $ <var:M> $ is considered a <def:eight-composite> positive integer when $ <var:T> \cdot <var:C> \cdot <var:p> \cdot <var:a> \cdot <var:t> \cdot <var:A> \cdot <var:m> \cdot <var:H> = <var:M> $ as well as unique factors are greater than <nat:1> . \end{definition} \begin{theorem} The positive integer <nat:1612800> is a <def:eight-composite> positive integer . \end{theorem} \begin{proof} Remember that a <def:eight-composite> positive integer is the product of natural numbers $ <var:T> $ , $ <var:m> $ , $ <var:a> $ , $ <var:p> $ , $ <var:t> $ , $ <var:C> $ , $ <var:H> $ , and $ <var:A> $ more than <nat:1> . We show <nat:1612800> is <def:eight-composite> . We confirm the principle is valid for $ <nat:2> \times <nat:10> \times <nat:8> \times <nat:6> \times <nat:7> \times <nat:4> \times <nat:12> \times <nat:5> = <nat:1612800> $ as well as seeing that $ <nat:4> $ , $ <nat:12> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:10> $ and $ <nat:8> $ are more than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:M> : nat ) := exists <var:A> <var:C> <var:t> <var:a> <var:m> <var:T> <var:H> <var:p> : nat , ( <var:T> * <var:C> * <var:p> * <var:a> * <var:t> * <var:A> * <var:m> * <var:H> = <var:M> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:t> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:p> > <nat:1> ) . Theorem <genP:1> : <def:eight-composite> <nat:1612800> . Proof . unfold <def:eight-composite> . exists <nat:4> . exists <nat:12> . exists <nat:8> . exists <nat:6> . exists <nat:2> . exists <nat:10> . exists <nat:7> . exists <nat:5> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 