\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:B> $ , $ <var:T> $ , $ <var:o> $ , $ <var:K> $ , $ <var:i> $ , $ <var:p> $ , $ <var:l> $ , $ <var:e> $ , $ <var:q> \in \mathbb{Z}^+ $ greater than or equal to <nat:2> . Take that some natural number $ <var:z> $ is named <def:nine-composite> assuming $ <var:o> \times <var:T> \times <var:l> \times <var:e> \times <var:p> \times <var:B> \times <var:q> \times <var:i> \times <var:K> = <var:z> $ . \end{definition} \begin{theorem} $ <var:z> = <nat:6652800> $ is a <def:nine-composite> integer . \end{theorem} \begin{proof} Remember that a <def:nine-composite> number is the product between $ <var:q> $ , $ <var:T> $ , $ <var:K> $ , $ <var:o> $ , $ <var:p> $ , $ <var:B> $ , $ <var:e> $ , $ <var:i> $ and $ <var:l> $ greater than or equivalent to <nat:2> . Take $ <var:T> = <nat:4> $ , $ <var:l> = <nat:10> $ , $ <var:K> = <nat:9> $ , $ <var:i> = <nat:5> $ , $ <var:p> = <nat:2> $ , $ <var:B> = <nat:7> $ , $ <var:o> = <nat:11> $ , $ <var:q> = <nat:3> $ , and $ <var:e> = <nat:8> $ . We demonstrate <nat:6652800> is a <def:nine-composite> number . We present the statement is true as $ <nat:7> $ , $ <nat:8> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:9> $ , $ <nat:2> $ , $ <nat:4> $ , $ <nat:5> $ and $ <nat:10> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:z> : nat ) := exists <var:B> <var:T> <var:o> <var:K> <var:i> <var:p> <var:l> <var:e> <var:q> : nat , ( <var:B> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:o> * <var:T> * <var:l> * <var:e> * <var:p> * <var:B> * <var:q> * <var:i> * <var:K> = <var:z> ) . Theorem <genP:1> : <def:nine-composite> <nat:6652800> . Proof . unfold <def:nine-composite> . exists <nat:7> . exists <nat:4> . exists <nat:11> . exists <nat:9> . exists <nat:5> . exists <nat:2> . exists <nat:10> . exists <nat:8> . exists <nat:3> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 