\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:470> * <var:U> + <var:R> * <nat:356> + <nat:368> * <var:z> + <var:O> * <nat:466> + <nat:437> + <var:A> * <nat:116> + <var:C> * <nat:226> $ must be odd . \end{theorem} \begin{proof} The summation of even naturals and an odd number will be in itself an odd natural number . The terms $ <var:U> \cdot <nat:470> $ and also $ <var:R> \cdot <nat:356> $ are obviously even numbers in $ \mathbb{N} $ since the product of an even natural with any natural number is guaranteed to be an even whole number . Building on , the products $ <var:A> \cdot <nat:116> $ and $ <var:O> \cdot <nat:466> $ are clearly even . Recall that the product $ <var:C> \cdot <nat:226> $ is clearly an even element of $ \mathbb{N} $ . This fact holds from the fact taking the product of an even integer with a element of $ \mathbb{N} $ is guaranteed to be even . Further , remember that $ <var:z> \cdot <nat:368> $ is trivially an even natural . This claim holds because multiplying between an even element of $ \mathbb{N} $ with a natural number is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:U> <var:R> <var:z> <var:O> <var:A> <var:C> : nat , Nat . odd ( <nat:470> * <var:U> + <nat:356> * <var:R> + <nat:368> * <var:z> + <nat:466> * <var:O> + <nat:116> * <var:A> + <nat:226> * <var:C> + <nat:437> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even ( <nat:470> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:356> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 