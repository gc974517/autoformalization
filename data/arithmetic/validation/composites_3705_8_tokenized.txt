\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:T> $ , $ <var:U> $ , $ <var:Y> $ , $ <var:Z> $ , $ <var:f> $ , $ <var:p> $ , $ <var:b> $ , $ <var:O> $ are whole numbers satisfying the condition that $ <var:U> $ , $ <var:p> $ , $ <var:T> $ , $ <var:O> $ , $ <var:f> $ , $ <var:Z> $ , $ <var:b> $ and $ <var:Y> \geq <nat:2> $ . We denote that some positive integer $ <var:G> $ is named a <def:eight-composite> number if $ <var:G> = <var:U> \times <var:T> \times <var:b> \times <var:Z> \times <var:O> \times <var:p> \times <var:Y> \times <var:f> $ . Thus $ <var:G> = <nat:7983360> $ is a <def:eight-composite> number . \end{theorem} \begin{proof} Assume $ <var:T> = <nat:12> $ , $ <var:b> = <nat:10> $ , $ <var:U> = <nat:4> $ , $ <var:f> = <nat:8> $ , $ <var:p> = <nat:9> $ , $ <var:Z> = <nat:7> $ , $ <var:O> = <nat:3> $ , $ <var:Y> = <nat:11> $ . Observe that $ <nat:11> * <nat:8> * <nat:7> * <nat:4> * <nat:9> * <nat:12> * <nat:10> * <nat:3> = <nat:7983360> $ . Similarly note $ <var:p> = <nat:9> $ , $ <var:T> = <nat:12> $ , $ <var:U> = <nat:4> $ , $ <var:f> = <nat:8> $ , $ <var:b> = <nat:10> $ , $ <var:O> = <nat:3> $ , $ <var:Z> = <nat:7> $ , $ <var:Y> = <nat:11> $ are more than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:G> : nat ) := exists <var:T> <var:U> <var:Y> <var:Z> <var:f> <var:p> <var:b> <var:O> : nat , ( <var:U> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:G> = <var:U> * <var:T> * <var:b> * <var:Z> * <var:O> * <var:p> * <var:Y> * <var:f> ) . Theorem <genP:1> : <def:eight-composite> <nat:7983360> . Proof . unfold <def:eight-composite> . exists <nat:12> . exists <nat:4> . exists <nat:11> . exists <nat:7> . exists <nat:8> . exists <nat:9> . exists <nat:10> . exists <nat:3> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 