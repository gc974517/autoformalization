\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For every positive terms $ <var:c> $ , $ <var:F> $ , $ <var:p> $ , $ <var:P> $ , $ <var:X> $ , $ <var:r> $ , and $ <var:Z> $ the expression $ <var:r> \times <nat:384> + <var:P> \times <nat:290> + <var:F> \times <nat:234> + <var:X> \times <nat:280> + <var:Z> \times <nat:52> + <nat:130> \times <var:p> + <nat:368> \times <var:c> + <nat:193> $ is odd . \end{theorem} \begin{proof} Observe the products $ <var:p> \times <nat:130> $ and moreover $ <nat:384> \times <var:r> $ will be even positive integers from the knowledge the coefficients $ <nat:130> $ and $ <nat:384> $ are obviously even positive integers . Adding on , the products $ <var:F> \times <nat:234> $ and likewise $ <var:Z> \times <nat:52> $ are known to be even . This is true from the knowledge multiplying of an even natural and a positive integer will be even , and must be true from the knowledge the positive integers $ <nat:234> $ and $ <nat:52> $ are known to be even numbers . Remember the whole numbers $ <nat:280> $ in addition to $ <nat:368> $ are clearly even elements of $ \mathbb{Z}^+ $ . Accordingly , the pairs $ <nat:280> \times <var:X> $ and likewise $ <var:c> \times <nat:368> $ is guaranteed to be even too . What's more , the integer $ <nat:290> $ is trivially an even element of $ \mathbb{N} $ . Thus , the product $ <nat:290> \times <var:P> $ must be even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:F> <var:p> <var:P> <var:X> <var:r> <var:Z> : nat , Nat . odd ( <nat:384> * <var:r> + <nat:290> * <var:P> + <nat:234> * <var:F> + <nat:280> * <var:X> + <nat:52> * <var:Z> + <nat:130> * <var:p> + <nat:368> * <var:c> + <nat:193> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even <nat:52> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even <nat:368> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:290> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 