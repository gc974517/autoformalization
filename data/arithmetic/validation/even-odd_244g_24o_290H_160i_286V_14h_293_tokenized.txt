\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:H> <nat:290> + <nat:14> <var:h> + <var:V> <nat:286> + <nat:160> <var:i> + <var:o> <nat:24> + <nat:293> + <nat:244> <var:g> $ will be odd taking positive integers $ <var:V> $ , $ <var:h> $ , $ <var:g> $ , $ <var:i> $ , $ <var:H> $ , and $ <var:o> $ . \end{theorem} \begin{proof} We employ the knowledge that $ <var:g> \times <nat:244> + <var:o> \times <nat:24> + <nat:290> \times <var:H> + <nat:160> \times <var:i> + <var:V> \times <nat:286> + <var:h> \times <nat:14> $ is obviously even . Observe multiplying between an even element of $ \mathbb{Z}^+ $ with some element of $ \mathbb{N} $ will be an even whole number . Take note the whole number $ <nat:244> $ is obviously an even element of $ \mathbb{Z}^+ $ The leading term $ <nat:290> $ is clearly an even natural number Further , the positive integers $ <nat:160> $ , $ <nat:24> $ , additionally $ <nat:286> $ are trivially even In addition to this , the coefficient $ <nat:14> $ is known to be an even natural Take note that $ <nat:293> $ is obviously odd . It can be checked that the claim is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:h> <var:g> <var:i> <var:H> <var:o> : nat , Nat . odd ( <nat:290> * <var:H> + <nat:14> * <var:h> + <nat:286> * <var:V> + <nat:160> * <var:i> + <nat:24> * <var:o> + <nat:244> * <var:g> + <nat:293> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:244> = true ) . { auto . } assert ( <genH> : Nat . even <nat:290> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:286> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:H> + <nat:14> * <var:h> + <nat:286> * <var:V> + <nat:160> * <var:i> + <nat:24> * <var:o> + <nat:244> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:293> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 