\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given there exist natural numbers $ <var:b> $ , $ <var:y> $ , $ <var:L> $ , $ <var:D> $ , $ <var:S> $ , $ <var:F> $ , $ <var:g> $ , $ <var:R> $ , $ <var:G> $ then let that some integer $ <var:i> $ is said to be a <def:nine-composite> whole number when $ <var:i> = <var:L> \times <var:F> \times <var:g> \times <var:y> \times <var:D> \times <var:R> \times <var:G> \times <var:S> \times <var:b> $ and unique factors are greater than <nat:1> . So the positive integer <nat:5702400> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Note that $ <nat:2> $ , $ <nat:8> $ , $ <nat:10> $ , $ <nat:5> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:4> $ , $ <nat:6> > <nat:1> $ . What's more notice that additionally $ <nat:11> \cdot <nat:5> \cdot <nat:3> \cdot <nat:9> \cdot <nat:6> \cdot <nat:2> \cdot <nat:10> \cdot <nat:8> \cdot <nat:4> = <var:b> \cdot <var:y> \cdot <var:L> \cdot <var:g> \cdot <var:R> \cdot <var:S> \cdot <var:D> \cdot <var:F> \cdot <var:G> = <nat:5702400> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:i> : nat ) := exists <var:b> <var:y> <var:L> <var:D> <var:S> <var:F> <var:g> <var:R> <var:G> : nat , ( <var:i> = <var:L> * <var:F> * <var:g> * <var:y> * <var:D> * <var:R> * <var:G> * <var:S> * <var:b> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:D> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:F> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:G> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:5702400> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } exists <nat:11> . exists <nat:5> . exists <nat:3> . exists <nat:10> . exists <nat:2> . exists <nat:8> . exists <nat:9> . exists <nat:6> . exists <nat:4> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 