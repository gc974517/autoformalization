\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given natural numbers $ <var:M> $ , $ <var:Q> $ , $ <var:l> $ , $ <var:Z> $ , $ <var:X> $ , $ <var:B> $ , $ <var:g> $ , and $ <var:V> $ $ <nat:233> + <var:g> * <nat:478> + <nat:262> * <var:B> + <var:X> * <nat:448> + <var:M> * <nat:196> + <var:l> * <nat:160> + <nat:284> * <var:Q> + <nat:458> * <var:V> + <nat:48> * <var:Z> $ must be odd . \end{theorem} \begin{proof} The positive integers $ <nat:160> $ , $ <nat:262> $ , $ <nat:48> $ , and moreover $ <nat:478> $ are even See that the number $ <nat:284> $ is guaranteed to be even The integers $ <nat:448> $ as well as $ <nat:458> $ are clearly even Take note the integer $ <nat:196> $ is trivially an even element of $ \mathbb{Z}^+ $ Remember that $ <nat:233> $ is clearly an odd number . We justify the summation $ <var:V> \cdot <nat:458> + <var:g> \cdot <nat:478> + <var:Q> \cdot <nat:284> + <nat:233> + <var:X> \cdot <nat:448> + <nat:262> \cdot <var:B> + <var:Z> \cdot <nat:48> + <var:l> \cdot <nat:160> + <var:M> \cdot <nat:196> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:Q> <var:l> <var:Z> <var:X> <var:B> <var:g> <var:V> : nat , Nat . odd ( <nat:478> * <var:g> + <nat:262> * <var:B> + <nat:448> * <var:X> + <nat:196> * <var:M> + <nat:160> * <var:l> + <nat:284> * <var:Q> + <nat:458> * <var:V> + <nat:48> * <var:Z> + <nat:233> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even <nat:48> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . odd <nat:233> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 