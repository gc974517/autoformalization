\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:214> \times <var:I> + <nat:188> \times <var:h> + <nat:458> \times <var:G> + <nat:134> \times <var:p> + <nat:71> + <var:t> \times <nat:24> + <nat:130> \times <var:F> $ is odd for all positive integers $ <var:h> $ , $ <var:I> $ , $ <var:G> $ , $ <var:p> $ , $ <var:t> $ , and $ <var:F> $ . \end{theorem} \begin{proof} What's more , see the pairs $ <var:I> <nat:214> $ , $ <nat:188> <var:h> $ , $ <var:G> <nat:458> $ , $ <var:p> <nat:134> $ , $ <nat:24> <var:t> $ , additionally $ <var:F> <nat:130> $ will be even positive integers because the product between an even natural with an arbitrary whole number is clearly an even number in $ \mathbb{Z}^+ $ . This fact is true by reason that the leading terms $ <nat:214> $ , $ <nat:188> $ , $ <nat:458> $ , $ <nat:134> $ , $ <nat:24> $ , and moreover $ <nat:130> $ are guaranteed to be even numbers in $ \mathbb{Z}^+ $ . See that $ <nat:71> $ is guaranteed to be an odd element of $ \mathbb{Z}^+ $ . Recall the summation of an even positive integer with an odd number in $ \mathbb{N} $ is an odd element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:I> <var:G> <var:p> <var:t> <var:F> : nat , Nat . odd ( <nat:214> * <var:I> + <nat:188> * <var:h> + <nat:458> * <var:G> + <nat:134> * <var:p> + <nat:24> * <var:t> + <nat:130> * <var:F> + <nat:71> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:188> = true ) . { auto . } assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:188> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:71> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 