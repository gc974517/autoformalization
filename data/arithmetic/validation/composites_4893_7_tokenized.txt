\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We say that $ <var:I> $ is a <def:seven-composite> whole number iff there are some whole numbers $ <var:L> $ , $ <var:m> $ , $ <var:M> $ , $ <var:U> $ , $ <var:N> $ , $ <var:a> $ , $ <var:A> $ where $ <var:U> $ , $ <var:L> $ , $ <var:N> $ , $ <var:m> $ , $ <var:a> $ , $ <var:A> $ , and $ <var:M> \geq <nat:2> $ and given some natural number $ <var:I> $ , $ <var:m> \cdot <var:U> \cdot <var:N> \cdot <var:A> \cdot <var:M> \cdot <var:a> \cdot <var:L> = <var:I> $ . \end{definition} \begin{theorem} The whole number <nat:213840> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Assume $ <var:A> = <nat:11> $ , $ <var:L> = <nat:12> $ , $ <var:U> = <nat:5> $ , $ <var:a> = <nat:6> $ , $ <var:m> = <nat:3> $ , $ <var:N> = <nat:9> $ , $ <var:M> = <nat:2> $ . Observe $ <var:M> = <nat:2> $ , $ <var:N> = <nat:9> $ , $ <var:U> = <nat:5> $ , $ <var:a> = <nat:6> $ , $ <var:m> = <nat:3> $ , $ <var:A> = <nat:11> $ , and $ <var:L> = <nat:12> \geq <nat:2> $ . This yields <nat:213840> is a <def:seven-composite> integer . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:I> : nat ) := exists <var:L> <var:m> <var:M> <var:U> <var:N> <var:a> <var:A> : nat , ( <var:U> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:m> * <var:U> * <var:N> * <var:A> * <var:M> * <var:a> * <var:L> = <var:I> ) . Theorem <genP:1> : <def:seven-composite> <nat:213840> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:3> . exists <nat:2> . exists <nat:5> . exists <nat:9> . exists <nat:6> . exists <nat:11> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 