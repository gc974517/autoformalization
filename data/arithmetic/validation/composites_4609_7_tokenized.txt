\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:G> $ , $ <var:L> $ , $ <var:m> $ , $ <var:I> $ , $ <var:W> $ , $ <var:U> $ , $ <var:z> $ are positive integers so that $ <var:m> $ , $ <var:W> $ , $ <var:I> $ , $ <var:z> $ , $ <var:G> $ , $ <var:U> $ and $ <var:L> \geq <nat:2> $ and such that the integer <nat:311040> is the product between whole numbers $ <var:G> $ , $ <var:L> $ , $ <var:m> $ , $ <var:I> $ , $ <var:W> $ , $ <var:U> $ , $ <var:z> $ . \end{theorem} \begin{proof} Let $ <var:L> = <nat:3> $ , $ <var:U> = <nat:12> $ , $ <var:I> = <nat:8> $ , $ <var:m> = <nat:6> $ , $ <var:G> = <nat:9> $ , $ <var:z> = <nat:10> $ and $ <var:W> = <nat:2> $ . We prove $ <var:z> * <var:W> * <var:I> * <var:L> * <var:U> * <var:G> * <var:m> = <nat:311040> $ . Note that $ <var:W> * <var:z> * <var:I> * <var:G> * <var:m> * <var:U> * <var:L> = <nat:311040> $ . Also note that $ <var:z> = <nat:10> $ , $ <var:G> = <nat:9> $ , $ <var:m> = <nat:6> $ , $ <var:L> = <nat:3> $ , $ <var:I> = <nat:8> $ , $ <var:W> = <nat:2> $ and $ <var:U> = <nat:12> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:G> <var:L> <var:m> <var:I> <var:W> <var:U> <var:z> : nat , ( <var:m> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <nat:311040> = <var:G> * <var:L> * <var:m> * <var:I> * <var:W> * <var:U> * <var:z> ) . Proof . exists <nat:9> . exists <nat:3> . exists <nat:6> . exists <nat:8> . exists <nat:2> . exists <nat:12> . exists <nat:10> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 