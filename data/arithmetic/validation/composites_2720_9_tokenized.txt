\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:Y> $ , $ <var:I> $ , $ <var:w> $ , $ <var:Z> $ , $ <var:x> $ , $ <var:X> $ , $ <var:c> $ , $ <var:q> $ , $ <var:m> $ are positive integers . Define that $ <var:f> \in \mathbb{Z}^+ $ will be considered as a <def:nine-composite> positive integer given $ <var:f> = <var:I> \cdot <var:c> \cdot <var:Y> \cdot <var:x> \cdot <var:q> \cdot <var:Z> \cdot <var:w> \cdot <var:X> \cdot <var:m> $ as well as greater than or equivalent to <nat:2> . Accordingly $ <nat:3628800> = <var:f> $ is <def:nine-composite> . \end{theorem} \begin{proof} Assume $ <var:I> = <nat:5> $ , $ <var:w> = <nat:3> $ , $ <var:Z> = <nat:7> $ , $ <var:q> = <nat:8> $ , $ <var:X> = <nat:2> $ , $ <var:x> = <nat:10> $ , $ <var:c> = <nat:6> $ , $ <var:Y> = <nat:9> $ , $ <var:m> = <nat:4> $ . We prove <nat:3628800> is the product between some numbers $ <var:I> $ , $ <var:m> $ , $ <var:x> $ , $ <var:Y> $ , $ <var:X> $ , $ <var:w> $ , $ <var:Z> $ , $ <var:q> $ and $ <var:c> $ . We show <nat:3628800> is <def:nine-composite> as $ <var:m> = <nat:4> $ , $ <var:c> = <nat:6> $ , $ <var:X> = <nat:2> $ , $ <var:Z> = <nat:7> $ , $ <var:w> = <nat:3> $ , $ <var:x> = <nat:10> $ , $ <var:Y> = <nat:9> $ , $ <var:q> = <nat:8> $ and $ <var:I> = <nat:5> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:f> : nat ) := exists <var:Y> <var:I> <var:w> <var:Z> <var:x> <var:X> <var:c> <var:q> <var:m> : nat , ( <var:f> = <var:I> * <var:c> * <var:Y> * <var:x> * <var:q> * <var:Z> * <var:w> * <var:X> * <var:m> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:3628800> . Proof . unfold <def:nine-composite> . exists <nat:9> . exists <nat:5> . exists <nat:3> . exists <nat:7> . exists <nat:10> . exists <nat:2> . exists <nat:6> . exists <nat:8> . exists <nat:4> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 