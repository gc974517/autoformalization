\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:v> <nat:266> + <nat:305> + <var:F> <nat:186> + <var:a> <nat:230> + <nat:24> <var:E> + <var:N> <nat:264> + <var:w> <nat:180> + <var:I> <nat:434> $ is odd . \end{theorem} \begin{proof} We use the knowledge that the sum $ <var:E> * <nat:24> + <var:F> * <nat:186> + <nat:180> * <var:w> + <nat:266> * <var:v> + <var:a> * <nat:230> + <var:N> * <nat:264> + <nat:434> * <var:I> $ is known to be even . Notice that the products $ <nat:434> \cdot <var:I> $ , $ <nat:264> \cdot <var:N> $ , $ <nat:24> \cdot <var:E> $ , $ <var:v> \cdot <nat:266> $ , $ <var:w> \cdot <nat:180> $ , and $ <nat:186> \cdot <var:F> $ are guaranteed to be even integers . Further , the pair $ <nat:230> \cdot <var:a> $ is known to be an even natural number since multiplying between an even natural number with a number in $ \mathbb{Z}^+ $ is guaranteed to be fundamentally an even number in $ \mathbb{N} $ . From the fact the totaling between even numbers and an even whole number is even , and from the knowledge the product of even whole numbers with some positive integer must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:F> <var:a> <var:E> <var:N> <var:w> <var:I> : nat , Nat . odd ( <nat:266> * <var:v> + <nat:186> * <var:F> + <nat:230> * <var:a> + <nat:24> * <var:E> + <nat:264> * <var:N> + <nat:180> * <var:w> + <nat:434> * <var:I> + <nat:305> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:434> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:v> + <nat:186> * <var:F> + <nat:230> * <var:a> + <nat:24> * <var:E> + <nat:264> * <var:N> + <nat:180> * <var:w> + <nat:434> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 