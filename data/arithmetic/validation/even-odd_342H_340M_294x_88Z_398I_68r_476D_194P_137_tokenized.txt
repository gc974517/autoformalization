\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:H> \cdot <nat:342> + <nat:340> \cdot <var:M> + <nat:137> + <nat:294> \cdot <var:x> + <nat:88> \cdot <var:Z> + <nat:398> \cdot <var:I> + <nat:68> \cdot <var:r> + <nat:476> \cdot <var:D> + <var:P> \cdot <nat:194> $ is guaranteed to be odd with all $ <var:H> $ , $ <var:P> $ , $ <var:D> $ , $ <var:r> $ , $ <var:I> $ , $ <var:x> $ , $ <var:Z> $ , and $ <var:M> $ . \end{theorem} \begin{proof} Take note $ <nat:137> $ is trivially odd . It can be demonstrated that our claim is true . Remember that the products $ <nat:342> * <var:H> $ , $ <nat:476> * <var:D> $ , $ <var:x> * <nat:294> $ , $ <var:r> * <nat:68> $ , $ <var:I> * <nat:398> $ , in addition to $ <var:M> * <nat:340> $ are obviously even . This holds because the product between an even integer and a natural must be even . Take note the product $ <nat:88> * <var:Z> $ is an even number . This is proven since taking the product between an even natural number with a natural must be even . The term $ <var:P> * <nat:194> $ is obviously an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:P> <var:D> <var:r> <var:I> <var:x> <var:Z> <var:M> : nat , Nat . odd ( <nat:342> * <var:H> + <nat:340> * <var:M> + <nat:294> * <var:x> + <nat:88> * <var:Z> + <nat:398> * <var:I> + <nat:68> * <var:r> + <nat:476> * <var:D> + <nat:194> * <var:P> + <nat:137> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:137> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:398> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 