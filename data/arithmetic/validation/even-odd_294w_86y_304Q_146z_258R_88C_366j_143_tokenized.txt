\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using all $ <var:R> $ , $ <var:z> $ , $ <var:j> $ , $ <var:C> $ , $ <var:w> $ , $ <var:Q> $ , and $ <var:y> $ the expression $ <nat:294> * <var:w> + <nat:258> * <var:R> + <var:C> * <nat:88> + <var:y> * <nat:86> + <var:z> * <nat:146> + <nat:143> + <nat:304> * <var:Q> + <nat:366> * <var:j> $ is odd . \end{theorem} \begin{proof} The product $ <var:Q> \cdot <nat:304> $ is known to be even . This fact is proven by reason that multiplying between an even natural number and a positive integer is guaranteed to be even , and is true because the number $ <nat:304> $ is an even element of $ \mathbb{Z}^+ $ . Further , the numbers $ <nat:294> $ , $ <nat:86> $ , $ <nat:146> $ , and moreover $ <nat:366> $ are known as even naturals . Thus , the products $ <nat:294> \cdot <var:w> $ , $ <var:y> \cdot <nat:86> $ , $ <var:z> \cdot <nat:146> $ , and $ <var:j> \cdot <nat:366> $ must be even at the same time . The positive integer $ <nat:258> $ is obviously even . Consequently , the term $ <nat:258> \cdot <var:R> $ is guaranteed to be even in addition . Building on , see that the term $ <var:C> \cdot <nat:88> $ is obviously even . This claim is proven as a consequence that the leading term $ <nat:88> $ is an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:R> <var:z> <var:j> <var:C> <var:w> <var:Q> <var:y> : nat , Nat . odd ( <nat:294> * <var:w> + <nat:258> * <var:R> + <nat:88> * <var:C> + <nat:86> * <var:y> + <nat:146> * <var:z> + <nat:304> * <var:Q> + <nat:366> * <var:j> + <nat:143> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:294> = true ) . { auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 