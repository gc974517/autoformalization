\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Under the condition we have $ <var:I> \times <var:E> \times <var:Y> \times <var:o> \times <var:B> = <var:h> $ for some integer $ <var:h> $ and so that $ <var:B> $ , $ <var:o> $ , $ <var:I> $ , $ <var:E> $ , $ <var:Y> \geq <nat:2> $ assuming some $ <var:Y> $ , $ <var:I> $ , $ <var:B> $ , $ <var:E> $ , $ <var:o> \in \mathbb{Z}^+ $ , we assume that $ <var:h> $ is a <def:five-composite> natural number . Therefore $ <nat:4320> = <var:h> $ is a <def:five-composite> positive integer . \end{theorem} \begin{proof} Remember <nat:4320> is a <def:five-composite> natural number wherever <nat:4320> is the product between whole numbers $ <var:o> $ , $ <var:B> $ , $ <var:Y> $ , $ <var:I> $ and $ <var:E> $ greater than or equal to <nat:2> . Notice $ <nat:4320> = <var:I> \cdot <var:Y> \cdot <var:o> \cdot <var:B> \cdot <var:E> $ yields $ <var:I> = <nat:8> $ , $ <var:o> = <nat:5> $ , $ <var:Y> = <nat:9> $ , $ <var:B> = <nat:4> $ , and $ <var:E> = <nat:3> $ . What's more observe $ <nat:3> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:9> $ and $ <nat:8> $ are more than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:h> : nat ) := exists <var:Y> <var:I> <var:B> <var:E> <var:o> : nat , ( <var:I> * <var:E> * <var:Y> * <var:o> * <var:B> = <var:h> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:4320> . Proof . unfold <def:five-composite> . exists <nat:9> . exists <nat:8> . exists <nat:4> . exists <nat:3> . exists <nat:5> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 