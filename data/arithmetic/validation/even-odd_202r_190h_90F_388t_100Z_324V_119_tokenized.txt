\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:r> \cdot <nat:202> + <var:t> \cdot <nat:388> + <nat:119> + <nat:190> \cdot <var:h> + <nat:100> \cdot <var:Z> + <nat:90> \cdot <var:F> + <var:V> \cdot <nat:324> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be proven that our lemma is proven . Take note $ <nat:119> $ is obviously odd . Furthermore , notice the pair $ <nat:202> \times <var:r> $ is clearly an even number . This holds from the knowledge taking the product of an even number in $ \mathbb{Z}^+ $ with an arbitrary number is guaranteed to be even , which is proven from the knowledge the coefficient $ <nat:202> $ is guaranteed to be an even integer . Additionally , observe that the term $ <nat:190> \times <var:h> $ is trivially even . This fact holds as a consequence that the leading term $ <nat:190> $ is known to be even . Recall the integer $ <nat:90> $ is obviously even . For this reason , the pair $ <var:F> \times <nat:90> $ is guaranteed to be even additionally . Building on , the number $ <nat:388> $ is even . Accordingly , $ <var:t> \times <nat:388> $ is even in addition . Furthermore , the pair $ <nat:100> \times <var:Z> $ is obviously an even positive integer . This fact is proven from the fact taking the product of an even number in $ \mathbb{Z}^+ $ and an arbitrary positive integer is even . This claim must be true because the natural number $ <nat:100> $ is clearly by its very nature an even number in $ \mathbb{N} $ . The whole number $ <nat:324> $ is trivially an even element of $ \mathbb{Z}^+ $ . Hence , the product $ <var:V> \times <nat:324> $ is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:t> <var:h> <var:Z> <var:F> <var:V> : nat , Nat . odd ( <nat:202> * <var:r> + <nat:388> * <var:t> + <nat:190> * <var:h> + <nat:100> * <var:Z> + <nat:90> * <var:F> + <nat:324> * <var:V> + <nat:119> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:119> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:90> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:90> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 