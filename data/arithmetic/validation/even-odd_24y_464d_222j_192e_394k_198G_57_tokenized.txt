\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:394> \times <var:k> + <nat:464> \times <var:d> + <nat:57> + <var:G> \times <nat:198> + <nat:24> \times <var:y> + <var:e> \times <nat:192> + <nat:222> \times <var:j> $ must be odd . \end{theorem} \begin{proof} We justify $ <nat:394> * <var:k> + <nat:222> * <var:j> + <nat:57> + <var:e> * <nat:192> + <var:y> * <nat:24> + <nat:198> * <var:G> + <nat:464> * <var:d> $ is odd . We know that $ <nat:57> $ is an odd number in $ \mathbb{N} $ . Notice $ <var:y> \times <nat:24> + <var:d> \times <nat:464> + <nat:222> \times <var:j> + <nat:192> \times <var:e> + <nat:394> \times <var:k> + <var:G> \times <nat:198> $ is guaranteed to be even . Remember that the positive integers $ <nat:24> $ , $ <nat:464> $ , $ <nat:394> $ , $ <nat:198> $ , as well as $ <nat:222> $ are obviously even numbers in $ \mathbb{N} $ In addition , notice that the natural number $ <nat:192> $ is guaranteed to be an even positive integer \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:d> <var:G> <var:y> <var:e> <var:j> : nat , Nat . odd ( <nat:394> * <var:k> + <nat:464> * <var:d> + <nat:198> * <var:G> + <nat:24> * <var:y> + <nat:192> * <var:e> + <nat:222> * <var:j> + <nat:57> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:57> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:198> = true ) . { auto . } assert ( <genH> : Nat . even <nat:222> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:k> + <nat:464> * <var:d> + <nat:198> * <var:G> + <nat:24> * <var:y> + <nat:192> * <var:e> + <nat:222> * <var:j> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 