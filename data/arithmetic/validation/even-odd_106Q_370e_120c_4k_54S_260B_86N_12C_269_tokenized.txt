\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:Q> * <nat:106> + <nat:370> * <var:e> + <nat:269> + <nat:120> * <var:c> + <nat:4> * <var:k> + <nat:54> * <var:S> + <var:B> * <nat:260> + <var:N> * <nat:86> + <nat:12> * <var:C> $ is odd using any $ <var:c> $ , $ <var:e> $ , $ <var:N> $ , $ <var:B> $ , $ <var:k> $ , $ <var:C> $ , $ <var:S> $ , and $ <var:Q> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} See that the totaling between an even natural number and an odd natural number must be odd . Take note $ <nat:269> $ is guaranteed to be odd . Observe that the pairs $ <nat:86> * <var:N> $ , $ <var:C> * <nat:12> $ , $ <var:Q> * <nat:106> $ , $ <nat:260> * <var:B> $ , $ <nat:54> * <var:S> $ , $ <var:k> * <nat:4> $ , additionally $ <nat:370> * <var:e> $ are trivially even naturals . This fact is proven from the fact taking the product between an even element of $ \mathbb{N} $ and some natural number is even . The product $ <var:c> * <nat:120> $ is obviously even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:c> <var:e> <var:N> <var:B> <var:k> <var:C> <var:S> <var:Q> : nat , Nat . odd ( <nat:106> * <var:Q> + <nat:370> * <var:e> + <nat:120> * <var:c> + <nat:4> * <var:k> + <nat:54> * <var:S> + <nat:260> * <var:B> + <nat:86> * <var:N> + <nat:12> * <var:C> + <nat:269> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:269> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 