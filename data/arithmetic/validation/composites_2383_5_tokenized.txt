\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Define that $ <var:V> $ is a <def:five-composite> integer under the condition that with some $ <var:l> $ , $ <var:C> $ , $ <var:K> $ , $ <var:f> $ , $ <var:m> \in \mathbb{Z}^+ $ we have $ <var:C> * <var:l> * <var:K> * <var:f> * <var:m> = <var:V> $ with some $ <var:V> $ and where $ <var:C> $ , $ <var:m> $ , $ <var:f> $ , $ <var:l> $ , and $ <var:K> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <var:V> = <nat:2880> $ is <def:five-composite> . \end{theorem} \begin{proof} Recall that a <def:five-composite> number is the product of integers $ <var:f> $ , $ <var:C> $ , $ <var:m> $ , $ <var:K> $ and $ <var:l> $ where $ <var:K> $ , $ <var:l> $ , $ <var:m> $ , $ <var:f> $ and $ <var:C> \geq <nat:2> $ . Allow $ <var:l> = <nat:3> $ , $ <var:m> = <nat:10> $ , $ <var:f> = <nat:8> $ , $ <var:C> = <nat:6> $ and $ <var:K> = <nat:2> $ . We justify <nat:2880> is a <def:five-composite> number . We present the belief is valid as $ <var:l> = <nat:3> $ , $ <var:m> = <nat:10> $ , $ <var:f> = <nat:8> $ , $ <var:K> = <nat:2> $ , $ <var:C> = <nat:6> \geq <nat:2> $ plus because $ <nat:6> * <nat:8> * <nat:10> * <nat:2> * <nat:3> = <nat:2880> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:V> : nat ) := exists <var:l> <var:C> <var:K> <var:f> <var:m> : nat , ( <var:C> * <var:l> * <var:K> * <var:f> * <var:m> = <var:V> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:2880> . Proof . unfold <def:five-composite> . exists <nat:3> . exists <nat:6> . exists <nat:2> . exists <nat:8> . exists <nat:10> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 