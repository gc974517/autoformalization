\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:154> \times <var:A> + <var:H> \times <nat:464> + <nat:220> \times <var:J> + <nat:120> \times <var:p> + <nat:151> + <var:X> \times <nat:66> + <var:h> \times <nat:420> + <var:f> \times <nat:204> $ will be odd assuming some natural terms $ <var:H> $ , $ <var:p> $ , $ <var:A> $ , $ <var:f> $ , $ <var:X> $ , $ <var:J> $ , and $ <var:h> $ . \end{theorem} \begin{proof} Remember that the pairs $ <nat:154> * <var:A> $ , $ <var:H> * <nat:464> $ , $ <var:J> * <nat:220> $ , $ <nat:120> * <var:p> $ , $ <nat:66> * <var:X> $ , $ <var:h> * <nat:420> $ , additionally $ <nat:204> * <var:f> $ are clearly even natural numbers as a consequence that multiplying of an even positive integer and any natural is even . This fact must be true since the numbers $ <nat:154> $ , $ <nat:464> $ , $ <nat:220> $ , $ <nat:120> $ , $ <nat:66> $ , $ <nat:420> $ , and $ <nat:204> $ are obviously even . We know $ <nat:151> $ is known to be an odd number in $ \mathbb{Z}^+ $ . It can be shown that the proposition is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:p> <var:A> <var:f> <var:X> <var:J> <var:h> : nat , Nat . odd ( <nat:154> * <var:A> + <nat:464> * <var:H> + <nat:220> * <var:J> + <nat:120> * <var:p> + <nat:66> * <var:X> + <nat:420> * <var:h> + <nat:204> * <var:f> + <nat:151> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:220> = true ) . { auto . } assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even <nat:204> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:220> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:204> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:151> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 