\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming all positive numbers $ <var:x> $ , $ <var:D> $ , $ <var:g> $ , and $ <var:s> $ the formula $ <var:D> * <nat:136> + <nat:199> + <var:g> * <nat:202> + <var:s> * <nat:338> + <var:x> * <nat:250> $ must be odd . \end{theorem} \begin{proof} We check the expression $ <nat:199> + <nat:136> <var:D> + <nat:250> <var:x> + <nat:202> <var:g> + <nat:338> <var:s> $ must be odd . We demonstrate $ <nat:136> \times <var:D> + <var:g> \times <nat:202> + <var:x> \times <nat:250> + <var:s> \times <nat:338> $ is guaranteed to be even . Recall that the adding of an even number with an even number in $ \mathbb{Z}^+ $ will be an even element of $ \mathbb{N} $ . The products $ <var:D> \cdot <nat:136> $ , $ <nat:202> \cdot <var:g> $ , $ <nat:250> \cdot <var:x> $ , $ <nat:338> \cdot <var:s> $ , are clearly even natural numbers as a consequence that multiplying of an even natural and a integer must be by itself an even positive integer , which must be true from the knowledge the numbers $ <nat:136> $ , $ <nat:202> $ , $ <nat:250> $ , $ <nat:338> $ , will be even . The summation between even numbers collectively with an odd whole number must be instrinsically an odd number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:D> <var:g> <var:s> : nat , Nat . odd ( <nat:136> * <var:D> + <nat:202> * <var:g> + <nat:338> * <var:s> + <nat:250> * <var:x> + <nat:199> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:D> + <nat:202> * <var:g> + <nat:338> * <var:s> + <nat:250> * <var:x> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 