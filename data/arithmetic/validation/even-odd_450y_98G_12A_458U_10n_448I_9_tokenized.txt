\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:U> * <nat:458> + <var:A> * <nat:12> + <nat:9> + <nat:448> * <var:I> + <nat:10> * <var:n> + <nat:450> * <var:y> + <nat:98> * <var:G> $ must be odd given every natural numbers $ <var:I> $ , $ <var:G> $ , $ <var:A> $ , $ <var:n> $ , $ <var:U> $ , and $ <var:y> $ . \end{theorem} \begin{proof} The proposition is true as a consequence that $ <var:I> * <nat:448> + <nat:10> * <var:n> + <var:A> * <nat:12> + <nat:98> * <var:G> + <nat:450> * <var:y> + <var:U> * <nat:458> $ is guaranteed to be even . The products $ <var:n> \times <nat:10> $ , $ <var:U> \times <nat:458> $ , $ <var:y> \times <nat:450> $ , and likewise $ <var:I> \times <nat:448> $ will be even elements of $ \mathbb{Z}^+ $ . Take note that the pair $ <nat:98> \times <var:G> $ is known as an even integer . In addition to this , the pair $ <var:A> \times <nat:12> $ is clearly even . Observe $ <nat:9> $ is obviously odd . We demonstrate the formula $ <nat:9> + <var:y> <nat:450> + <var:G> <nat:98> + <nat:12> <var:A> + <var:U> <nat:458> + <var:n> <nat:10> + <nat:448> <var:I> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:G> <var:A> <var:n> <var:U> <var:y> : nat , Nat . odd ( <nat:458> * <var:U> + <nat:12> * <var:A> + <nat:448> * <var:I> + <nat:10> * <var:n> + <nat:450> * <var:y> + <nat:98> * <var:G> + <nat:9> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:10> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:U> + <nat:12> * <var:A> + <nat:448> * <var:I> + <nat:10> * <var:n> + <nat:450> * <var:y> + <nat:98> * <var:G> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:9> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 