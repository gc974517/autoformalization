\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:f> $ , $ <var:L> $ , $ <var:i> $ , $ <var:P> $ , $ <var:C> $ , $ <var:l> $ , $ <var:A> $ , $ <var:H> $ , $ <var:b> $ are natural numbers greater than <nat:1> . We assume that some whole number $ <var:O> $ is considered <def:nine-composite> if $ <var:O> = <var:L> \times <var:H> \times <var:f> \times <var:l> \times <var:i> \times <var:A> \times <var:C> \times <var:b> \times <var:P> $ . For this reason the number <nat:19958400> is a <def:nine-composite> number . \end{theorem} \begin{proof} Recall that a <def:nine-composite> is the product between positive integers $ <var:A> $ , $ <var:i> $ , $ <var:C> $ , $ <var:f> $ , $ <var:L> $ , $ <var:l> $ , $ <var:b> $ , $ <var:P> $ , $ <var:H> $ larger than <nat:1> . Observe $ <nat:19958400> = <nat:6> \cdot <nat:8> \cdot <nat:4> \cdot <nat:7> \cdot <nat:10> \cdot <nat:3> \cdot <nat:9> \cdot <nat:11> \cdot <nat:5> $ . Furthermore observe that $ <nat:10> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:7> $ , $ <nat:3> $ , $ <nat:8> $ and $ <nat:4> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:O> : nat ) := exists <var:f> <var:L> <var:i> <var:P> <var:C> <var:l> <var:A> <var:H> <var:b> : nat , ( <var:f> > <nat:1> ) /\ ( <var:L> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:C> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:A> > <nat:1> ) /\ ( <var:H> > <nat:1> ) /\ ( <var:b> > <nat:1> ) /\ ( <var:O> = <var:L> * <var:H> * <var:f> * <var:l> * <var:i> * <var:A> * <var:C> * <var:b> * <var:P> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . exists <nat:3> . exists <nat:11> . exists <nat:4> . exists <nat:6> . exists <nat:8> . exists <nat:9> . exists <nat:5> . exists <nat:10> . exists <nat:7> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 