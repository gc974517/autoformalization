\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:172> \times <var:k> + <nat:451> + <var:M> \times <nat:338> + <nat:104> \times <var:n> + <nat:376> \times <var:Z> + <var:P> \times <nat:250> + <var:q> \times <nat:64> + <nat:202> \times <var:x> $ is odd taking any natural terms $ <var:P> $ , $ <var:Z> $ , $ <var:n> $ , $ <var:M> $ , $ <var:k> $ , $ <var:x> $ , and $ <var:q> $ . \end{theorem} \begin{proof} Notice the expression $ <nat:64> * <var:q> + <var:M> * <nat:338> + <nat:250> * <var:P> + <var:k> * <nat:172> + <var:Z> * <nat:376> + <nat:451> + <var:x> * <nat:202> + <var:n> * <nat:104> $ is odd since the summation $ <nat:338> \cdot <var:M> + <var:P> \cdot <nat:250> + <var:k> \cdot <nat:172> + <var:n> \cdot <nat:104> + <var:q> \cdot <nat:64> + <nat:202> \cdot <var:x> + <nat:376> \cdot <var:Z> $ is known as even . Take note that the adding between even whole numbers successively with an even positive integer is guaranteed to be even . On top of this , the products $ <nat:338> <var:M> $ , $ <var:P> <nat:250> $ , $ <var:k> <nat:172> $ , $ <var:n> <nat:104> $ , $ <nat:64> <var:q> $ , $ <nat:202> <var:x> $ , in addition to $ <var:Z> <nat:376> $ are known as even numbers in $ \mathbb{Z}^+ $ . This is proven by reason that the integers $ <nat:338> $ , $ <nat:250> $ , $ <nat:172> $ , $ <nat:104> $ , $ <nat:64> $ , $ <nat:202> $ , and also $ <nat:376> $ are guaranteed to be even . and from the fact taking the product of an even number in $ \mathbb{Z}^+ $ with any element of $ \mathbb{Z}^+ $ will be even the expression $ <var:Z> \cdot <nat:376> + <var:M> \cdot <nat:338> + <var:q> \cdot <nat:64> + <nat:104> \cdot <var:n> + <var:k> \cdot <nat:172> + <nat:250> \cdot <var:P> + <var:x> \cdot <nat:202> $ is clearly even . See that $ <nat:451> $ is obviously odd . The addition of even integers collectively and an odd natural number must be itself an odd natural . Accordingly , the summation $ <nat:451> + <nat:250> * <var:P> + <var:k> * <nat:172> + <nat:376> * <var:Z> + <nat:104> * <var:n> + <var:x> * <nat:202> + <nat:338> * <var:M> + <var:q> * <nat:64> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:Z> <var:n> <var:M> <var:k> <var:x> <var:q> : nat , Nat . odd ( <nat:172> * <var:k> + <nat:338> * <var:M> + <nat:104> * <var:n> + <nat:376> * <var:Z> + <nat:250> * <var:P> + <nat:64> * <var:q> + <nat:202> * <var:x> + <nat:451> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even <nat:250> = true ) . { auto . } assert ( <genH> : Nat . even <nat:172> = true ) . { auto . } assert ( <genH> : Nat . even <nat:104> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } assert ( <genH> : Nat . even <nat:376> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:376> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:k> + <nat:338> * <var:M> + <nat:104> * <var:n> + <nat:376> * <var:Z> + <nat:250> * <var:P> + <nat:64> * <var:q> + <nat:202> * <var:x> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:451> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 