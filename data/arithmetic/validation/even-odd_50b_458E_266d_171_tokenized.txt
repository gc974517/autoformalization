\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:171> + <nat:266> <var:d> + <var:b> <nat:50> + <nat:458> <var:E> $ is odd . \end{theorem} \begin{proof} Observe that the sum $ <var:b> \times <nat:50> + <nat:266> \times <var:d> + <nat:171> + <var:E> \times <nat:458> $ is trivially odd by reason that the formula $ <var:E> * <nat:458> + <var:d> * <nat:266> + <nat:50> * <var:b> $ is even . Notice the leading term $ <nat:458> $ is clearly an even natural . So , the pair $ <nat:458> \cdot <var:E> $ will be even in addition . What's more , the coefficient $ <nat:50> $ is known as even . Therefore , the product $ <nat:50> \cdot <var:b> $ is even additionally . In addition , take note that the product $ <nat:266> \cdot <var:d> $ is guaranteed to be an even number in $ \mathbb{N} $ from the fact the coefficient $ <nat:266> $ is obviously even . The sum $ <var:b> \cdot <nat:50> + <nat:458> \cdot <var:E> + <nat:266> \cdot <var:d> $ will be even since the summing between even integers and an even integer is by its very nature an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:b> <var:E> : nat , Nat . odd ( <nat:266> * <var:d> + <nat:50> * <var:b> + <nat:458> * <var:E> + <nat:171> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:458> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:d> + <nat:50> * <var:b> + <nat:458> * <var:E> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 