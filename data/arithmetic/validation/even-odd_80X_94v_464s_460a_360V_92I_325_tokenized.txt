\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:I> \times <nat:92> + <nat:325> + <nat:360> \times <var:V> + <nat:94> \times <var:v> + <nat:464> \times <var:s> + <nat:460> \times <var:a> + <nat:80> \times <var:X> $ must be odd using all positive terms $ <var:a> $ , $ <var:s> $ , $ <var:v> $ , $ <var:V> $ , $ <var:I> $ , and $ <var:X> $ . \end{theorem} \begin{proof} The expression $ <var:s> \times <nat:464> + <var:V> \times <nat:360> + <nat:92> \times <var:I> + <var:X> \times <nat:80> + <var:a> \times <nat:460> + <nat:94> \times <var:v> + <nat:325> $ is trivially odd because $ <nat:80> <var:X> + <nat:94> <var:v> + <nat:464> <var:s> + <nat:460> <var:a> + <var:V> <nat:360> + <var:I> <nat:92> $ is obviously even . The natural numbers $ <nat:80> $ , $ <nat:94> $ , $ <nat:464> $ , $ <nat:460> $ , $ <nat:360> $ , and also $ <nat:92> $ are guaranteed to be even numbers in $ \mathbb{N} $ . Therefore , the products $ <var:X> \times <nat:80> $ , $ <nat:94> \times <var:v> $ , $ <nat:464> \times <var:s> $ , $ <nat:460> \times <var:a> $ , $ <nat:360> \times <var:V> $ , and $ <nat:92> \times <var:I> $ will be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:a> <var:s> <var:v> <var:V> <var:I> <var:X> : nat , Nat . odd ( <nat:92> * <var:I> + <nat:360> * <var:V> + <nat:94> * <var:v> + <nat:464> * <var:s> + <nat:460> * <var:a> + <nat:80> * <var:X> + <nat:325> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:80> = true ) . { auto . } assert ( <genH> : Nat . even <nat:94> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:94> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:I> + <nat:360> * <var:V> + <nat:94> * <var:v> + <nat:464> * <var:s> + <nat:460> * <var:a> + <nat:80> * <var:X> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 