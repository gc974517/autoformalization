\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some $ <var:L> $ , $ <var:y> $ , $ <var:G> $ , $ <var:p> $ , $ <var:o> $ , $ <var:m> $ , $ <var:e> $ , and $ <var:H> $ $ <nat:202> * <var:H> + <var:o> * <nat:476> + <var:L> * <nat:304> + <var:G> * <nat:242> + <nat:267> + <nat:126> * <var:m> + <var:e> * <nat:370> + <var:y> * <nat:192> + <nat:442> * <var:p> $ must be odd . \end{theorem} \begin{proof} We know $ <nat:267> $ is obviously odd . The summation between even naturals collectively with an odd number will be odd . The products $ <var:G> \cdot <nat:242> $ , $ <var:o> \cdot <nat:476> $ , $ <var:p> \cdot <nat:442> $ , $ <var:e> \cdot <nat:370> $ , $ <nat:202> \cdot <var:H> $ , in addition to $ <var:m> \cdot <nat:126> $ will be even . In addition , the pair $ <var:y> \cdot <nat:192> $ is known as even . The product $ <var:L> \cdot <nat:304> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:y> <var:G> <var:p> <var:o> <var:m> <var:e> <var:H> : nat , Nat . odd ( <nat:202> * <var:H> + <nat:476> * <var:o> + <nat:304> * <var:L> + <nat:242> * <var:G> + <nat:126> * <var:m> + <nat:370> * <var:e> + <nat:192> * <var:y> + <nat:442> * <var:p> + <nat:267> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:267> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even ( <nat:242> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:476> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 