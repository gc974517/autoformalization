\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:378> \cdot <var:r> + <var:j> \cdot <nat:284> + <nat:310> \cdot <var:Z> + <nat:28> \cdot <var:K> + <nat:299> + <var:U> \cdot <nat:56> + <nat:68> \cdot <var:a> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know $ <nat:299> $ is known as odd . We justify $ <nat:378> \cdot <var:r> + <nat:68> \cdot <var:a> + <var:j> \cdot <nat:284> + <nat:28> \cdot <var:K> + <nat:56> \cdot <var:U> + <var:Z> \cdot <nat:310> + <nat:299> $ will be odd . This proposition holds from the fact $ <nat:28> \times <var:K> + <var:U> \times <nat:56> + <var:Z> \times <nat:310> + <nat:68> \times <var:a> + <nat:284> \times <var:j> + <var:r> \times <nat:378> $ is known as even . In addition , the coefficients $ <nat:28> $ , $ <nat:56> $ , $ <nat:310> $ , $ <nat:68> $ , $ <nat:284> $ , plus $ <nat:378> $ will be even elements of $ \mathbb{Z}^+ $ . As a consequence , the products $ <nat:28> \times <var:K> $ , $ <var:U> \times <nat:56> $ , $ <var:Z> \times <nat:310> $ , $ <nat:68> \times <var:a> $ , $ <var:j> \times <nat:284> $ , and likewise $ <nat:378> \times <var:r> $ is even as well . By reason that the multiplication of an even element of $ \mathbb{Z}^+ $ with a number in $ \mathbb{N} $ is an even positive integer this main result must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:j> <var:Z> <var:K> <var:U> <var:a> : nat , Nat . odd ( <nat:378> * <var:r> + <nat:284> * <var:j> + <nat:310> * <var:Z> + <nat:28> * <var:K> + <nat:56> * <var:U> + <nat:68> * <var:a> + <nat:299> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:299> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:310> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:r> + <nat:284> * <var:j> + <nat:310> * <var:Z> + <nat:28> * <var:K> + <nat:56> * <var:U> + <nat:68> * <var:a> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 