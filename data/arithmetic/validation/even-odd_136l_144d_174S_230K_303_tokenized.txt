\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:303> + <nat:144> <var:d> + <var:l> <nat:136> + <nat:230> <var:K> + <nat:174> <var:S> $ is odd . \end{theorem} \begin{proof} The sum $ <nat:174> <var:S> + <nat:303> + <nat:144> <var:d> + <nat:136> <var:l> + <nat:230> <var:K> $ is known as odd because $ <nat:136> \cdot <var:l> + <var:d> \cdot <nat:144> + <var:S> \cdot <nat:174> + <var:K> \cdot <nat:230> $ is trivially even . Furthermore , take note that the positive integers $ <nat:136> $ , $ <nat:144> $ , $ <nat:174> $ , and likewise $ <nat:230> $ are guaranteed to be even . So , the terms $ <nat:136> \cdot <var:l> $ , $ <nat:144> \cdot <var:d> $ , $ <var:S> \cdot <nat:174> $ , and likewise $ <nat:230> \cdot <var:K> $ is even additionally . We verify the result is true . Remember $ <nat:303> $ is known as an odd number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:l> <var:K> <var:S> : nat , Nat . odd ( <nat:144> * <var:d> + <nat:136> * <var:l> + <nat:230> * <var:K> + <nat:174> * <var:S> + <nat:303> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:174> = true ) . { auto . } assert ( <genH> : Nat . even <nat:230> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:174> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:d> + <nat:136> * <var:l> + <nat:230> * <var:K> + <nat:174> * <var:S> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:303> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 